# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               CSPECTMAP eliteN.map
   4  0000               OPT --zxnext=cspect --syntax=a --reversepop
   5  0000
   6  0000              DEBUGSEGSIZE   equ 1
   7  0000              DEBUGLOGSUMMARY equ 1
   8  0000              ;DEBUGLOGDETAIL equ 1
   9  0000
  10  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  11  0000              ; Game Defines
  12  0000              ScreenLocal      EQU 0
  13  0000              ScreenGalactic   EQU ScreenLocal + 1
  14  0000              ScreenMarket     EQU ScreenGalactic + 1
  15  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  16  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  17  0000              ScreenInvent     EQU ScreenStatus + 1
  18  0000              ScreenPlanet     EQU ScreenInvent + 1
  19  0000              ScreenEquip      EQU ScreenPlanet + 1
  20  0000              ScreenLaunch     EQU ScreenEquip + 1
  21  0000              ScreenFront      EQU ScreenLaunch + 1
  22  0000              ScreenAft        EQU ScreenFront+1
  23  0000              ScreenLeft       EQU ScreenAft+1
  24  0000              ScreenRight      EQU ScreenLeft+1
  25  0000              ScreenDocking    EQU ScreenRight+1
  26  0000              ScreenHyperspace EQU ScreenDocking+1
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              SunBankAddr             equ $c000
  25+ 0000              PlanetBankAddr          equ $c000
  26+ 0000              UniverseBankAddr	    equ $c000
  27+ 0000              LaunchShipAddr          equ $c000
  28+ 0000              membank7 			    equ $e000
  29+ 0000              L1membankAddr   	    equ $e000
  30+ 0000              L2membankAddr   	    equ $e000
  31+ 0000              ShipModelsAddr	        equ $e000
  32+ 0000              SpritemembankAddr       equ $e000
  33+ 0000              ResetUniverseAddr       equ $e000
  34+ 0000              StockTableAddr	        equ $e000
  35+ 0000              CommanderAddr           equ $e000
  36+ 0000              LAYER2Addr              equ $e000
  37+ 0000              LAYER1Addr              equ $e000
  38+ 0000              SPRITEAddr              equ $e000
  39+ 0000              ConsoleImageAddr        equ $e000
  40+ 0000              GalaxyDataAddr          equ $e000
  41+ 0000
  42+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  43+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  44+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  45+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  46+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  57+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  58+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  60+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  61+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  62+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  63+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  64+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  65+ 0000
  66+ 0000              BankResetUniv           equ 49
  67+ 0000              BankMenuShrCht          equ 50
  68+ 0000              BankMenuGalCht          equ 51
  69+ 0000              BankMenuInvent          equ 52
  70+ 0000              BankMenuSystem          equ 53
  71+ 0000              BankMenuMarket          equ 54
  72+ 0000              BankStockTable          equ 55
  73+ 0000              BankCommander           equ 56
  74+ 0000              BankLAYER2              equ 57
  75+ 0000              BankLAYER1              equ 58
  76+ 0000              BankShipModels1         equ 59
  77+ 0000              BankSPRITE              equ 60
  78+ 0000              BankConsole             equ 61
  79+ 0000              BankFrontView           equ 62
  80+ 0000              BankMenuStatus          equ 63
  81+ 0000              BankMenuEquipS          equ 64
  82+ 0000              BankLaunchShip          equ 65
  83+ 0000              BankDispMarket          equ 66
  84+ 0000              BankShipModels2         equ 67
  85+ 0000              BankShipModels3         equ 68
  86+ 0000              BankShipModels4         equ 69
  87+ 0000
  88+ 0000              BankUNIVDATA0           equ 70
  89+ 0000              BankUNIVDATA1           equ 71
  90+ 0000              BankUNIVDATA2           equ 72
  91+ 0000              BankUNIVDATA3           equ 73
  92+ 0000              BankUNIVDATA4           equ 74
  93+ 0000              BankUNIVDATA5           equ 75
  94+ 0000              BankUNIVDATA6           equ 76
  95+ 0000              BankUNIVDATA7           equ 77
  96+ 0000              BankUNIVDATA8           equ 78
  97+ 0000              BankUNIVDATA9           equ 79
  98+ 0000              BankUNIVDATA10          equ 80
  99+ 0000              BankUNIVDATA11          equ 81
 100+ 0000              BankUNIVDATA12          equ 82
 101+ 0000              BankSunData             equ 83
 102+ 0000              BankPlanetData          equ 84
 103+ 0000
 104+ 0000              BankGalaxyData0         equ 91
 105+ 0000              BankGalaxyData1         equ 92
 106+ 0000              BankGalaxyData2         equ 93
 107+ 0000              BankGalaxyData3         equ 94
 108+ 0000              BankGalaxyData4         equ 95
 109+ 0000              BankGalaxyData5         equ 96
 110+ 0000              BankGalaxyData6         equ 97
 111+ 0000              BankGalaxyData7         equ 98
 112+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipAIFlagsOffset       equ 24
  23+ 0000              ShipDataLength          equ ShipAIFlagsOffset+1
  24+ 0000
  25+ 0000              CobraTablePointer       equ 43
  26+ 0000              ;29 faulty
  27+ 0000              BankThreshold           equ 16
  28+ 0000
  29+ 0000              ShipTableALast          equ 23
  30+ 0000              ShipTableBLast          equ 39
  31+ 0000              ShipTableCLast          equ 55
  32+ 0000
# file closed: ./Data/ShipModelEquates.asm
  51  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAGTENusng:        MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	nc,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
   8+ 0000 ~                                    ld      hl,reg
   9+ 0000 ~                                    cp      (hl)
  10+ 0000 ~                                    call	nc,target
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              CallIfALTNusng:         MACRO   reg,target
  14+ 0000 ~                                    cp      reg
  15+ 0000 ~                                    call	c,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  19+ 0000 ~                                    ld   a,(mem)
  20+ 0000 ~                                    ld   hl,address
  21+ 0000 ~                                    cp   (hl)
  22+ 0000 ~                                    call    z,target
  23+ 0000                                      ENDM
  24+ 0000
  25+ 0000              CallIfMemTrue:          MACRO mem, target
  26+ 0000 ~                                    ld      a,(mem)
  27+ 0000 ~                                    and     a
  28+ 0000 ~                                    call    z, target
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              CallIfMemFalse:         MACRO mem, target
  32+ 0000 ~                                    ld      a,(mem)
  33+ 0000 ~                                    and     a
  34+ 0000 ~                                    call    nz, target
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              CallIfATrue:            MACRO target
  38+ 0000 ~                                    and     a
  39+ 0000 ~                                    call    z, target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              CallIfAFalse:           MACRO target
  43+ 0000 ~                                    and     a
  44+ 0000 ~                                    call    nz, target
  45+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  52  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  53  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  54  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyTextAtHLtoDE:     MACRO
  29+ 0000 ~            .CopyLoop:              ld      a,(hl)
  30+ 0000 ~                                    ld      (de),a
  31+ 0000 ~                                    cp      0
  32+ 0000 ~                                    ret     z
  33+ 0000 ~                                    inc     hl
  34+ 0000 ~                                    inc     de
  35+ 0000 ~                                    jr      .CopyLoop
  36+ 0000                                      ENDM
  37+ 0000
  38+ 0000              ldClearTextLoop:        MACRO   TextSize
  39+ 0000 ~                                    ld      b,a
  40+ 0000 ~                                    ld      a,TextSize
  41+ 0000 ~            .ClearLoop:             ld      (hl),a
  42+ 0000 ~                                    inc     hl
  43+ 0000 ~                                    djnz    .ClearLoop
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldCopyByte:             MACRO memfrom, memto
  47+ 0000 ~                                    ld       a,(memfrom)
  48+ 0000 ~                                    ld       (memto),a
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000
  52+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  53+ 0000 ~                                    ld       a,(memfrom)
  54+ 0000 ~                                    and		$7F
  55+ 0000 ~                                    ld       (memto),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  59+ 0000 ~                                    ld       hl,(memfrom)
  60+ 0000 ~                                    ld       (memto),hl
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              ldWriteConst            MACRO  memfrom, memto
  64+ 0000 ~                                    ld       a,memfrom
  65+ 0000 ~                                    ld       (memto),a
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ldWriteZero             MACRO  memto
  69+ 0000 ~                                    xor      a
  70+ 0000 ~                                    ld       (memto),a
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              ldIXLaFromN:	        MACRO memfrom
  74+ 0000 ~                                    ld		a,(memfrom)
  75+ 0000 ~                                    ld		ixl,a
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ldIXHaFromN:	        MACRO memfrom
  79+ 0000 ~                                    ld		a,(memfrom)
  80+ 0000 ~                                    ld		ixh,a
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              ldIYLaFromN:	        MACRO memfrom
  84+ 0000 ~                                    ld		a,(memfrom)
  85+ 0000 ~                                    ld		iyl,a
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              ldIYHaFromN:	        MACRO memfrom
  89+ 0000 ~                                    ld		a,(memfrom)
  90+ 0000 ~                                    ld		iyh,a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              ldhlde:			        MACRO
  94+ 0000 ~                                    ld		h,d
  95+ 0000 ~                                    ld		l,e
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              ldhlbc:			        MACRO
  99+ 0000 ~                                    ld		h,b
 100+ 0000 ~                                    ld		l,c
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ldbcde:			        MACRO
 104+ 0000 ~                                    ld		b,d
 105+ 0000 ~                                    ld		c,e
 106+ 0000                                      ENDM
 107+ 0000
 108+ 0000              lddebc:			        MACRO
 109+ 0000 ~                                    ld		d,b
 110+ 0000 ~                                    ld		e,c
 111+ 0000                                      ENDM
 112+ 0000
 113+ 0000              ldbchl:			        MACRO
 114+ 0000 ~                                    ld		b,h
 115+ 0000 ~                                    ld		c,l
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              lddeiy:			        MACRO
 119+ 0000 ~                                    ld		d,iyh
 120+ 0000 ~                                    ld		e,iyl
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              ldiyde:			        MACRO
 124+ 0000 ~                                    ld		iyh,d
 125+ 0000 ~                                    ld		iyl,e
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000
 129+ 0000              FourLDIInstrunctions:   MACRO
 130+ 0000 ~                                    ldi
 131+ 0000 ~                                    ldi
 132+ 0000 ~                                    ldi
 133+ 0000 ~                                    ldi
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              FiveLDIInstrunctions:   MACRO
 137+ 0000 ~                                    ldi
 138+ 0000 ~                                    ldi
 139+ 0000 ~                                    ldi
 140+ 0000 ~                                    ldi
 141+ 0000 ~                                    ldi
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              SixLDIInstrunctions:    MACRO
 145+ 0000 ~                                    ldi
 146+ 0000 ~                                    ldi
 147+ 0000 ~                                    ldi
 148+ 0000 ~                                    ldi
 149+ 0000 ~                                    ldi
 150+ 0000 ~                                    ldi
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              EightLDIInstrunctions:  MACRO
 154+ 0000 ~            		                ldi
 155+ 0000 ~            		                ldi
 156+ 0000 ~            		                ldi
 157+ 0000 ~            		                ldi
 158+ 0000 ~            		                ldi
 159+ 0000 ~            		                ldi
 160+ 0000 ~            		                ldi
 161+ 0000 ~            		                ldi
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              NineLDIInstrunctions:  MACRO
 165+ 0000 ~            		                ldi
 166+ 0000 ~            		                ldi
 167+ 0000 ~            		                ldi
 168+ 0000 ~            		                ldi
 169+ 0000 ~            		                ldi
 170+ 0000 ~            		                ldi
 171+ 0000 ~            		                ldi
 172+ 0000 ~            		                ldi
 173+ 0000 ~            		                ldi
 174+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  55  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  56  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  29+ 0000 ~                                    ld      a,(mem)
  30+ 0000 ~                                    bit 	bitnbr,a
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  35+ 0000 ~                                    ld      a,(mem)
  36+ 0000 ~                                    bit 	bitnbr,a
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnABit5Set:         MACRO   target
  41+ 0000 ~                                    and     Bit5Only
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnABit5Clear:       MACRO   target
  46+ 0000 ~                                    and     Bit5Only
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  51+ 0000 ~                                    and     bitmask
  52+ 0000 ~                                    jp      nz,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  56+ 0000 ~                                    and     bitmask
  57+ 0000 ~                                    jp      z,target
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  61+ 0000 ~                                    bit 	bitnbr,reg
  62+ 0000 ~                                    jp      nz,target
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  66+ 0000 ~                                    bit 	bitnbr,reg
  67+ 0000 ~                                    jp      z,target
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ; Comparison Routines
  71+ 0000              JumpIfAGTEusng:         MACRO
  72+ 0000 ~                                    jp		nc,target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              JumpIfAGTENusng:        MACRO reg,target
  76+ 0000 ~                                    cp     reg
  77+ 0000 ~                                    jp		nc,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
  81+ 0000 ~                                    ld      hl,mem
  82+ 0000 ~                                    cp      (hl)
  83+ 0000 ~                                    jp		nc,target
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              JumpIfALTMemusng:       MACRO mem,target
  87+ 0000 ~                                    ld      hl,mem
  88+ 0000 ~                                    cp      (hl)
  89+ 0000 ~                                    jp		c,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  93+ 0000 ~                                    ld     a,(mem)
  94+ 0000 ~                                    cp     value
  95+ 0000 ~                                    jp	  nc,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
  99+ 0000 ~                                    ld   a,(mem)
 100+ 0000 ~                                    ld   hl,address
 101+ 0000 ~                                    cp   (hl)
 102+ 0000 ~                                    jp	  nc,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 106+ 0000 ~                                    ld   a,(mem)
 107+ 0000 ~                                    ld   hl,address
 108+ 0000 ~                                    cp   (hl)
 109+ 0000 ~                                    jp	  z,target
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              JumpIfMemTrue:          MACRO mem, target
 113+ 0000 ~                                    ld      a,(mem)
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    jp      z, target
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              JumpIfMemFalse:         MACRO mem, target
 119+ 0000 ~                                    ld      a,(mem)
 120+ 0000 ~                                    and     a
 121+ 0000 ~                                    jp      nz, target
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000              JumpIfATrue:            MACRO target
 125+ 0000 ~                                    and     a
 126+ 0000 ~                                    jp      z, target
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000              JumpIfAFalse:           MACRO target
 130+ 0000 ~                                    and     a
 131+ 0000 ~                                    jp      nz, target
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              JumpIfALTusng:          MACRO target
 135+ 0000 ~                                    jp		c,target
 136+ 0000                                      ENDM
 137+ 0000
 138+ 0000              JumpIfALTNusng:         MACRO value, target
 139+ 0000 ~                                    cp      value
 140+ 0000 ~                                    jp		c, target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 144+ 0000 ~                                    ld      a,(mem)
 145+ 0000 ~                                    cp      value
 146+ 0000 ~                                    jp	  c,target
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 150+ 0000 ~                                    ld    a,(mem)
 151+ 0000 ~                                    ld    hl,value
 152+ 0000 ~                                    cp    (hl)
 153+ 0000 ~                                    jp	  c,target
 154+ 0000                                      ENDM
 155+ 0000
 156+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 157+ 0000 ~                                    ld  a,(mem)
 158+ 0000 ~                                    cp  value
 159+ 0000 ~                                    jp  z,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 163+ 0000 ~                                    ld  a,(mem)
 164+ 0000 ~                                    cp  value
 165+ 0000 ~                                    jp  nz,target
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              JumpIfMemZero:          MACRO mem,target
 169+ 0000 ~                                    ld  a,(mem)
 170+ 0000 ~                                    and a
 171+ 0000 ~                                    jp  z,target
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              JumpIfMemNotZero:       MACRO mem,target
 175+ 0000 ~                                    ld  a,(mem)
 176+ 0000 ~                                    and a
 177+ 0000 ~                                    jp  nz,target
 178+ 0000                                      ENDM
 179+ 0000
 180+ 0000              JumpIfALTMemHLusng:     MACRO target
 181+ 0000 ~                                    cp    (hl)
 182+ 0000 ~                                    jp	  c,target
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              JumpIfANENusng:         MACRO value, target
 186+ 0000 ~                                    cp     value
 187+ 0000 ~                                    jp      nz,target
 188+ 0000                                      ENDM
 189+ 0000
 190+ 0000              JumpIfANEMemusng:       MACRO  value, target
 191+ 0000 ~                                    ld    hl,value
 192+ 0000 ~                                    cp    (hl)
 193+ 0000 ~                                    jp      nz,target
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              JumpIfAEqNusng:         MACRO value, target
 197+ 0000 ~                                    cp     value
 198+ 0000 ~                                    jp      z,target
 199+ 0000                                      ENDM
 200+ 0000
 201+ 0000              JumpIfAIsZero:	        MACRO target
 202+ 0000 ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
 203+ 0000 ~                                    jp	z, target
 204+ 0000                                      ENDM
 205+ 0000
 206+ 0000              JumpIfAIsNotZero:       MACRO target
 207+ 0000 ~                                    cp	0
 208+ 0000 ~                                    jp	nz,target
 209+ 0000                                      ENDM
 210+ 0000
 211+ 0000              IfResultZeroGoto:	    MACRO target
 212+ 0000 ~                                    jp	z,target
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              IfResultNotZeroGoto:    MACRO target
 216+ 0000 ~                                    jp	nz,target
 217+ 0000                                      ENDM
 218+ 0000
# file closed: ./Macros/jumpMacros.asm
  57  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000
   3+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
   4+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   5+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
   6+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
   7+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
   8+ 0000 ~                                    xor $80                             ;
   9+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  10+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  12+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  13+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  14+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SignedHLTo2C:           MACRO
  18+ 0000 ~                                    bit     7,h
  19+ 0000 ~                                    jr      z,.Done2c
  20+ 0000 ~                                    ld      a,h
  21+ 0000 ~                                    and     SignMask8Bit
  22+ 0000 ~                                    ld      h,a
  23+ 0000 ~                                    NegHL
  24+ 0000 ~            .Done2c:
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              MemSignedTo2C:          MACRO   memfrom
  28+ 0000 ~                                    ld      hl,(memfrom)
  29+ 0000 ~                                    bit     7,h
  30+ 0000 ~                                    jr      z,.Done2c
  31+ 0000 ~                                    ld      a,h
  32+ 0000 ~                                    and     SignMask8Bit
  33+ 0000 ~                                    ld      h,a
  34+ 0000 ~            .Done2c:                ld      (memfrom),hl
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000
  38+ 0000                  ;returns result in H
  39+ 0000              EDiv10Inline:           MACRO
  40+ 0000 ~                                    ld      d,0
  41+ 0000 ~                                    ld      hl,de
  42+ 0000 ~                                    add     hl,hl
  43+ 0000 ~                                    add     hl,de
  44+ 0000 ~                                    add     hl,hl
  45+ 0000 ~                                    add     hl,hl
  46+ 0000 ~                                    add     hl,de
  47+ 0000 ~                                    add     hl,hl
  48+ 0000                                      ENDM
  49+ 0000
# file closed: ./Macros/MathsMacros.asm
  58  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipBank1:  MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipBank2:  MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipBank3:  MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  29+ 0000              					 ENDM
  30+ 0000              MMUSelectShipBank4:  MACRO
  31+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectShipBankA   MACRO
  35+ 0000 ~            					 nextreg ShipModelMMU,	    a
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectShipBankN:  MACRO value
  39+ 0000 ~            					 nextreg ShipModelMMU,	    value
  40+ 0000              					 ENDM
  41+ 0000
  42+ 0000              MMUSelectCommander:	 MACRO
  43+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  44+ 0000              					 ENDM
  45+ 0000
  46+ 0000              MMUSelectStockTable: MACRO
  47+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  48+ 0000              					 ENDM
  49+ 0000
  50+ 0000              MMUSelectCpySrcA:    MACRO
  51+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  52+ 0000              					 ENDM
  53+ 0000
  54+ 0000              MMUSelectCpySrcN:    MACRO value
  55+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  56+ 0000              					 ENDM
  57+ 0000
  58+ 0000              MMUSelectSun:        MACRO
  59+ 0000 ~                                 nextreg SunMMU,            BankSunData
  60+ 0000                                   ENDM
  61+ 0000
  62+ 0000              MMUSelectPlanet:     MACRO
  63+ 0000 ~                                 nextreg PlanetMMU,         PlanetBankAddr
  64+ 0000                                   ENDM
  65+ 0000
  66+ 0000              MMUSelectUniverseA:  MACRO
  67+ 0000 ~                                 add    a,BankUNIVDATA0
  68+ 0000 ~                                 nextreg UniverseMMU,       a
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectUniverseN:  MACRO value
  72+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  73+ 0000                                   ENDM
  74+ 0000
  75+ 0000              MMUSelectGalaxyA:    MACRO
  76+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  77+ 0000                                   ENDM
  78+ 0000
  79+ 0000              MMUSelectGalaxyN:    MACRO value
  80+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  81+ 0000                                   ENDM
  82+ 0000              MMUSelectGalaxyACopy:MACRO
  83+ 0000 ~                                 nextreg UniverseMMU,       a
  84+ 0000                                   ENDM
  85+ 0000
  86+ 0000              MMUSelectUniverseAbs:MACRO value
  87+ 0000 ~                                 nextreg UniverseMMU,       value
  88+ 0000                                   ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuGalCht: MACRO
  91+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuShrCht: MACRO
  95+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuInvent: MACRO
  99+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectMenuSystem: MACRO
 103+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectMenuMarket: MACRO
 107+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 108+ 0000              					 ENDM
 109+ 0000
 110+ 0000              MMUSelectMenuStatus: MACRO
 111+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 112+ 0000              					 ENDM
 113+ 0000
 114+ 0000              MMUSelectViewFront:  MACRO
 115+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 116+ 0000              					 ENDM
 117+ 0000
 118+ 0000              MMUSelectScreenA:    MACRO
 119+ 0000 ~                                 nextreg ScreenBankMMU,		a
 120+ 0000              					 ENDM
 121+ 0000
# file closed: ./Macros/MMUMacros.asm
  59  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  60  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  47+ 0000 ~                                    and     bitmask
  48+ 0000 ~                                    ret     z
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  52+ 0000 ~                                    and     bitmask
  53+ 0000 ~                                    ret     nz
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemEquN:        MACRO mem, value
  57+ 0000 ~                                    ld     a,(mem)
  58+ 0000 ~                                    cp     value
  59+ 0000 ~                                    ret    nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  63+ 0000 ~                                    ld   a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    z
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfANotZero:       MACRO
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    ret     nz
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              ReturnIfNotZero:        MACRO
  74+ 0000 ~                                    ret     nz
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000
  78+ 0000              ReturnIfNegative:       MACRO
  79+ 0000 ~                                    ret     m
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000
  83+ 0000              ReturnIfMemNotZero:     MACRO mem
  84+ 0000 ~                                    ld     a,(mem)
  85+ 0000 ~                                    and     a
  86+ 0000 ~                                    ret    nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              ReturnIfAGTEusng:       MACRO value
  90+ 0000 ~                                    cp    value
  91+ 0000 ~                                    ret	 nc
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              ReturnIfALTNusng:       MACRO value
  95+ 0000 ~                                    cp    value
  96+ 0000 ~                                    ret	 c
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfAGTENusng:      MACRO value
 100+ 0000 ~                                    cp    value
 101+ 0000 ~                                    ret	 nc
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              ReturnIfAGTEMemusng:    MACRO value
 105+ 0000 ~                                    ld      hl,value
 106+ 0000 ~                                    cp      (hl)
 107+ 0000 ~                                    ret	    nc
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ReturnIfANENusng:       MACRO value
 111+ 0000 ~                                    cp      value
 112+ 0000 ~                                    ret     nz
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ReturnIfAEqNusng:       MACRO value
 116+ 0000 ~                                    cp      value
 117+ 0000 ~                                    ret     z
 118+ 0000                                      ENDM
 119+ 0000
# file closed: ./Macros/returnMacros.asm
  61  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  62  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000
   2+ 0000              FlipMemSign:            MACRO mem
   3+ 0000 ~                                    ld  a,(mem)
   4+ 0000 ~                                    xor SignOnly8Bit
   5+ 0000 ~                                    ld  (mem),a
   6+ 0000                                      ENDM
   7+ 0000
# file closed: ./Macros/signBitMacros.asm
  63  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  64  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              AnyMissilesLeft:        MACRO
  82+ 0000 ~                                    ld      a,(NbrMissiles)
  83+ 0000 ~                                    and     a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              SetMissileTargetA:      MACRO
  87+ 0000 ~                                    ld      (MissileTarget),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              IsMissileLockedOn:      MACRO
  91+ 0000 ~                                    ld      a,(MissileTarget)
  92+ 0000 ~                                    cp      $FF
  93+ 0000 ~                                    ret     z
  94+ 0000 ~                                    ReturnIfSlotAEmpty                  ; if target slot is empty
  95+ 0000 ~                                    ret                                 ; will return as nz now
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              ClearMissileTarget:     MACRO
  99+ 0000 ~                                    xor     a                           ; Set missile target to FF
 100+ 0000 ~                                    dec     a
 101+ 0000 ~                                    ld      (MissileTarget),a
 102+ 0000 ~                                    SetMemFalse MissileLaunchFlag
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ClearECM:               MACRO
 106+ 0000 ~                                    xor     a
 107+ 0000 ~                                    ld      (ECMLoopA),a
 108+ 0000 ~                                    ld      (ECMLoopB),a
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ChargeEnergyAndShields: MACRO
 112+ 0000 ~                                    ld      a,$FF
 113+ 0000 ~                                    ld      (PlayerEnergy),a
 114+ 0000 ~                                    ld      (ForeShield),a
 115+ 0000 ~                                    ld      (AftShield),a
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              HalveFugitiveStatus:    MACRO
 119+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 120+ 0000 ~                                    srl     (hl)
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              ClearForceTransition    MACRO
 124+ 0000 ~                                    ld      a,$FF
 125+ 0000 ~                                    ld      (ScreenTransitionForced),a
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              ForceTransition:        MACRO newScreen
 129+ 0000 ~                                    ld      a,newScreen
 130+ 0000 ~                                    ld      (ScreenTransitionForced), a
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              SetSafeZone:            MACRO
 134+ 0000 ~                                    ld      a,$FF
 135+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 136+ 0000                                      ENDM
 137+ 0000
 138+ 0000              ClearSafeZone:          MACRO
 139+ 0000 ~                                    xor     a
 140+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              CoolLasers:             MACRO
 144+ 0000 ~                                    ld      a,(GunTemperature)
 145+ 0000 ~                                    and     a
 146+ 0000 ~                                    jr      z,.AlreadyCool
 147+ 0000 ~                                    dec     a
 148+ 0000 ~                                    ld      (GunTemperature),a
 149+ 0000 ~            .AlreadyCool:
 150+ 0000                                      ENDM
 151+ 0000
 152+ 0000              InitEventCounter:       MACRO
 153+ 0000 ~                                    xor     a
 154+ 0000 ~                                    ld      (EventCounter),a
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              ClearMissJump:          MACRO
 158+ 0000 ~                                    xor     a
 159+ 0000 ~                                    ld      (MissJumpFlag),a
 160+ 0000                                      ENDM
 161+ 0000
# file closed: ./Variables/general_variables_macros.asm
  65  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              TestRoomForJunk:        MACRO   Target
  13+ 0000 ~                                    ld      a,3
  14+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              JumpIfSpaceStation:     MACRO   Target
  18+ 0000 ~                                    ld      hl,UniverseSlotType
  19+ 0000 ~                                    ld      a,(hl)
  20+ 0000 ~                                    cp      ShipTypeStation
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              ; Checks if slot is empty else A = ship type
  25+ 0000              ReturnIfSlotAEmpty:     MACRO
  26+ 0000 ~                                    ld      hl,UniverseSlotList
  27+ 0000 ~                                    add     hl,a
  28+ 0000 ~                                    ld      a,(hl)
  29+ 0000 ~                                    inc     a
  30+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  31+ 0000 ~                                    dec     a           ; get original value back for later
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  35+ 0000 ~                                    ld      hl,UniverseSlotList
  36+ 0000 ~                                    add     hl,a
  37+ 0000 ~                                    ld      a,(hl)
  38+ 0000 ~                                    inc     a
  39+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  40+ 0000 ~                                    dec     a           ; get original value back for later
  41+ 0000                                      ENDM
  42+ 0000
  43+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  44+ 0000 ~                                    ld      a,(hl)
  45+ 0000 ~                                    and     a
  46+ 0000 ~                                    jr      nz,Target
  47+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  66  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  67  0000
  68  0000
  69  0000              charactersetaddr		equ 15360
  70  0000              STEPDEBUG               equ 1
  71  0000
  72  0000
  73  0000              EliteNextStartup:       ORG         $8000
  74  8000 F3                                   di
  75  8001                                      ; "STARTUP"
  76  8001                                      MMUSelectLayer1
  76  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  77  8005 CD 80 E0                             call		l1_cls
  78  8008 3E 07                                ld			a,7
  79  800A CD 9B E0                             call		l1_attr_cls_to_a
  80  800D 3E FF                                ld          a,$FF
  81  800F CD A5 E0                             call        l1_set_border
  82  8012                                      MMUSelectSpriteBank
  82  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  83  8016 CD 4C E4                             call		sprite_load_sprite_data
  84  8019              Initialise:             MMUSelectLayer2
  84  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  85  801D CD D0 E0                             call 		l2_initialise
  86  8020                                      ClearForceTransition
  86  8020 3E FF       >                        ld      a,$FF
  86  8022 32 E3 86    >                        ld      (ScreenTransitionForced),a
  87  8025 3E 10        TidyDEBUG:              ld          a,16
  88  8027 32 B1 85                             ld          (TidyCounter),a
  89  802A
  90  802A AF           TestText:               xor			a
  91  802B 32 F7 96                             ld      (JSTX),a
  92  802E                                      MMUSelectCommander
  92  802E ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  93  8032 CD 2F E0                             call		defaultCommander
  94  8035              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
  94  8035 AF          >                        xor     a
  94  8036 32 E7 96    >                        ld      (SpaceStationSafeZone),a
  95  8039                                      MMUSelectSpriteBank
  95  8039 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  96  803D CD 44 E4                             call		init_sprites
  97  8040
  98  8040                                      IFDEF DOUBLEBUFFER
  99  8040                                          MMUSelectLayer2
  99  8040 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 100  8044 CD C9 E0                                 call        l2_cls
 101  8047 CD DD E0                                 call  l2_flip_buffers
 102  804A                                      ENDIF
 103  804A              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 104  804A DD 01                                break
 105  804C CD E4 86     InitialiseGalaxies:    call		ResetUniv                       ; Reset ship data
 106  804F CD 0C 87                            call        ResetGalaxy                     ; Reset each galaxy copying in code
 107  8052 CD 35 87                            call        SeedAllGalaxies
 108  8055
 109  8055              .ClearLayer2Buffers:    MMUSelectLayer2
 109  8055 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110  8059 CD C9 E0                             call        l2_cls
 111  805C                                      IFDEF DOUBLEBUFFER
 112  805C                                          MMUSelectLayer2
 112  805C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113  8060 CD DD E0                                 call  l2_flip_buffers
 114  8063                                      ENDIF
 115  8063
 116  8063
 117  8063              ;.Sa                        MMUSelectUniverseN 0
 118  8063
 119  8063              ;InitialiseDemoShip:     call    ClearFreeSlotList
 120  8063              ;                        call    FindNextFreeSlotInA
 121  8063              ;                        ld      b,a
 122  8063              ;                        ld      a,13 ;Coriolis station
 123  8063              ;                        call    InitialiseShipAUnivB
 124  8063              ;                        xor     a
 125  8063 AF           InitialiseMainLoop:     xor     a
 126  8064 32 A6 98                             ld      (CurrentUniverseAI),a
 127  8067 32 A8 98                             ld      (SetStationAngryFlag),a
 128  806A 3E 03                                ld      a,3
 129  806C 32 EF 97                             ld      (MenuIdMax),a
 130  806F                                      SetAFalse                               ; Starts Docked
 130  806F 3E FF       >                        ld      a,$FF
 131  8071 32 F3 97                             ld      (DockedFlag),a
 132  8074              ;                        call    InitialiseFrontView
 133  8074 CD 7A 87                             call    InitialiseCommander
 134  8077                                      MMUSelectUniverseN 2
 134  8077 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 135  807B CD 46 88                             call    SetInitialShipPosition
 136  807E
 137  807E                                      MMUSelectStockTable
 137  807E ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 138  8082 CD AA E0                             call    generate_stock_market
 139  8085 CD 15 8D                             call    ResetMessageQueue
 140  8088                                      InitEventCounter
 140  8088 AF          >                        xor     a
 140  8089 32 AA 98    >                        ld      (EventCounter),a
 141  808C                                      ClearMissJump
 141  808C AF          >                        xor     a
 141  808D 32 AB 98    >                        ld      (MissJumpFlag),a
 142  8090              ;..MAIN GAME LOOP..................................................................................................................
 143  8090              ; MACRO BLOCKS.....................................................................................................................
 144  8090              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 145  8090              InputMainMacro:         MACRO
 146  8090 ~                                    call    ViewKeyTest
 147  8090 ~                                    call    TestPauseMode
 148  8090 ~                                    ld      a,(GamePaused)
 149  8090 ~                                    cp      0
 150  8090 ~                                    jr      nz,MainLoop
 151  8090 ~                                    call    MovementKeyTest
 152  8090                                      ENDM
 153  8090
 154  8090              ;..................................................................................................................................
 155  8090 CD 72 9C     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 156  8093                                      CoolLasers
 156  8093 3A D1 9A    >                        ld      a,(GunTemperature)
 156  8096 A7          >                        and     a
 156  8097 28 04       >                        jr      z,.AlreadyCool
 156  8099 3D          >                        dec     a
 156  809A 32 D1 9A    >                        ld      (GunTemperature),a
 156  809D             >.AlreadyCool:
 157  809D CD 9E 94                             call    scan_keyboard
 158  80A0              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 159  80A0 CD E6 83     DemoOfShipsDEBUG:       call    TestForNextShip
 160  80A3              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 161  80A3 3E 00        InputBlockerCheck:      ld      a,$0
 162  80A5                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 162  80A5 FE 01       >                        cp     $01
 162  80A7 CA C9 80    >                        jp      z,SkipInputHandlers
 163  80AA                                      InputMainMacro
 163  80AA CD DE 87    >                        call    ViewKeyTest
 163  80AD CD 02 85    >                        call    TestPauseMode
 163  80B0 3A F4 97    >                        ld      a,(GamePaused)
 163  80B3 FE 00       >                        cp      0
 163  80B5 20 D9       >                        jr      nz,MainLoop
 163  80B7 CD 2F 96    >                        call    MovementKeyTest
 164  80BA              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 165  80BA 3A C8 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 166  80BD                                      JumpIfAIsZero     TestAreWeDocked
 166  80BD A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 166  80BE CA C9 80    >                        jp	z, TestAreWeDocked
 167  80C1              ;.. Handle displaying correct screen ..............................................................................................
 168  80C1 3E 00        HandleBankSelect:       ld      a,$00
 169  80C3                                      MMUSelectScreenA
 169  80C3 ED 92 56    >                     nextreg ScreenBankMMU,		a
 170  80C6 CD 00 00     CallCursorRoutine:      call    $0000
 171  80C9              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 172  80C9              ;.. Also end up here if we have the screen input blocker set
 173  80C9              SkipInputHandlers:
 174  80C9              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 175  80C9 3A F3 97     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 176  80CC                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 176  80CC FE 00       >                        cp     0
 176  80CE C2 39 81    >                        jp      nz,SkipUniveseUpdate
 177  80D1
 178  80D1 21 AA 98     .UpdateEventCounter:    ld      hl,EventCounter                               ; evnery 256 cycles we do a trigger test
 179  80D4 35                                   dec     (hl)
 180  80D5 CC CD 81                             call    z,LoopEventTriggered
 181  80D8                                      CallIfMemTrue   MissileLaunchFlag, LaunchPlayerMissile
 181  80D8 3A DC 9A    >                        ld      a,(MissileLaunchFlag)
 181  80DB A7          >                        and     a
 181  80DC CC 9A 82    >                        call    z, LaunchPlayerMissile
 182  80DF              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 183  80DF              ;.. we do one universe slot each loop update ......................................................................................
 184  80DF              ;.. First update Sun...............................................................................................................
 185  80DF CD 0F 83     .UpdateShips:           call    UpdateUniverseObjects
 186  80E2                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 186  80E2 3A E3 86    >                        ld  a,(ScreenTransitionForced)
 186  80E5 FE FF       >                        cp  $FF
 186  80E7 C2 FE 82    >                        jp  nz,BruteForceChange
 187  80EA 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 188  80EC FE 00                                cp      0                                             ; .
 189  80EE 28 41                                jr      z, MenusLoop                                  ; This will change as more screens are added TODO
 190  80F0              ;..Processing a view...............................................................................................................
 191  80F0              ;..Display any message ............................................................................................................
 192  80F0              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 192  80F0 2A F1 96    >                        ld      hl,(InnerHyperCount)
 192  80F3 7C          >                        ld      a,h
 192  80F4 B5          >                        or      l
 192  80F5 28 03       >                        jr      z, .HandleMessages
 193  80F7 CD B1 8D                             call    HyperSpaceMessage
 194  80FA              .HandleMessages:        AnyMessagesMacro  .NoMessages
 194  80FA 3A FF 96    >                        ld      a, (MessageCount)
 194  80FD A7          >                        and     a
 194  80FE 28 06       >                        jr      z, .NoMessages
 195  8100 CD 93 8D                             call    DisplayCurrentMessage
 196  8103 CD 72 8D                             call    UpdateMessageTimer
 197  8106
 198  8106              .NoMessages:            MMUSelectLayer2
 198  8106 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 199  810A CD C9 E0                             call   l2_cls                                       ; change this to do top 2 thirds only  fopr console
 200  810D                                      MMUSelectLayer1
 200  810D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 201  8111              .UpdateSun:             MMUSelectSun
 201  8111 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 202  8115              .DEBUGFORCE:            ;ld      hl,$0000
 203  8115                                      ;ld      (SBnKxlo),hl
 204  8115                                      ;ld      (SBnKylo),hl
 205  8115                                      ;xor     a
 206  8115                                      ;ld      (SBnKxsgn),a
 207  8115                                      ;ld      (SBnKysgn),a
 208  8115                                      ;ld      hl,$0200
 209  8115                                      ;ld      (SBnKzlo),hl
 210  8115                                      ;ld      a,$00
 211  8115                                      ;ld      (SBnKzsgn),a
 212  8115 CD 5F C5                             call    SunUpdateAndRender
 213  8118              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 214  8118 3E DF        DrawDustForwards:       ld     a,$DF
 215  811A 32 E7 E8                             ld     (line_gfx_colour),a
 216  811D              DustUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 216  811D ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 217  8121 CD 9E 91     DustUpdateRoutine:      call   DustForward                                   ; This needs to be self modifying
 218  8124              PrepLayer2:             MMUSelectLayer2                                       ; Clear layer 2 for graphics
 218  8124 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219  8128                                    ;  call   l2_cls
 220  8128              ;ProcessSun:             call    DrawForwardSun
 221  8128              ProcessPlanet:
 222  8128 CD B2 83     ProcessShipModels:      call   DrawForwardShips                               ; Draw all ships (this may need to be self modifying)
 223  812B                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 224  812B                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 225  812B                                      ; now will CLS bottom thrid
 226  812B CD D3 88                             call    UpdateConsole                              ; Update display console on layer 1
 227  812E C3 48 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 228  8131              ;..If we were not in views then we were in display screens/menus...................................................................
 229  8131 2A 46 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 230  8134 7C                                   ld      a,h
 231  8135 B5                                   or      l
 232  8136 CA 48 81                             jp      z,LoopRepeatPoint
 233  8139              ;..This is the screen update routine for menus.....................................................................................
 234  8139              ;.. Also used by transition routines
 235  8139              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 235  8139 3A 46 81    >                        ld  a,(ScreenLoopJP+1)
 235  813C A7          >                        and a
 235  813D CA 48 81    >                        jp  z,LoopRepeatPoint
 236  8140 3E 00        ScreenLoopBank:         ld      a,$0
 237  8142                                      MMUSelectScreenA
 237  8142 ED 92 56    >                     nextreg ScreenBankMMU,		a
 238  8145 CD 00 00     ScreenLoopJP:           call    $0000
 239  8148 3A F3 97     LoopRepeatPoint:        ld      a,(DockedFlag)
 240  814B              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 240  814B FE FD       >                        cp     $FD
 240  814D CA 67 81    >                        jp      z,WeHaveCompletedLaunch
 241  8150                                      JumpIfAEqNusng  $FE, WeAreInTransition
 241  8150 FE FE       >                        cp     $FE
 241  8152 CA E3 82    >                        jp      z,WeAreInTransition
 242  8155                                      JumpIfAEqNusng  $FC, WeAreHJumping
 242  8155 FE FC       >                        cp     $FC
 242  8157 CA 6D 81    >                        jp      z,WeAreHJumping
 243  815A                                      JumpIfAEqNusng  $FB, WeAreHEntering
 243  815A FE FB       >                        cp     $FB
 243  815C CA 7B 81    >                        jp      z,WeAreHEntering
 244  815F                                      JumpIfAEqNusng  $FA, WeHaveCompletedHJump
 244  815F FE FA       >                        cp     $FA
 244  8161 CA 83 81    >                        jp      z,WeHaveCompletedHJump
 245  8164 C3 E3 82                             jp  DoubleBufferCheck
 246  8167 CD 46 87     WeHaveCompletedLaunch:  call    LaunchedFromStation
 247  816A C3 E3 82                             jp      DoubleBufferCheck
 248  816D CD DE C1     WeAreHJumping:          call        hyperspace_Lightning
 249  8170 DA E3 82                             jp      c,DoubleBufferCheck
 250  8173 3E FB                                ld      a,$FB
 251  8175 32 F3 97                             ld      (DockedFlag),a
 252  8178 C3 E3 82                             jp      DoubleBufferCheck
 253  817B 3E FA        WeAreHEntering:         ld      a,$FA
 254  817D 32 F3 97                             ld      (DockedFlag),a
 255  8180 C3 E3 82                             jp  DoubleBufferCheck
 256  8183 3A CF 98     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 257  8186                                      MMUSelectGalaxyA
 257  8186 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 258  8189 2A E4 98                             ld      hl,(TargetPlanetX)
 259  818C 22 E2 98                             ld      (PresentSystemX),hl
 260  818F 44                                   ld      b,h
 261  8190 4D                                   ld      c,l
 262  8191                                      CorrectPostJumpFuel
 262  8191 3A 1B 9C    >                        ld      a,(Fuel)
 262  8194 21 75 98    >                        ld      hl,Distance
 262  8197 96          >                        sub     a,(hl)
 262  8198 32 1B 9C    >                        ld      (Fuel),a
 263  819B                                      ForceTransition ScreenFront            ; This will also trigger stars
 263  819B 3E 09       >                        ld      a,ScreenFront
 263  819D 32 E3 86    >                        ld      (ScreenTransitionForced), a
 264  81A0 3E 00                                ld      a,$00
 265  81A2 32 AC 98                             ld      (ExtraVesselsCounter),a
 266  81A5 32 F3 97                             ld      (DockedFlag),a
 267  81A8 CD 6B F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 268  81AB CD D9 9C                             call    copy_working_to_system         ; and propogate copies of seeds
 269  81AE CD D1 9C                             call    copy_working_to_galaxy         ; .
 270  81B1 CD BF 9D                             call    get_planet_data_working_seed   ; sort out system data
 271  81B4                                      ;call    GetDigramGalaxySeed           ; .
 272  81B4                                      MMUSelectStockTable                    ; .
 272  81B4 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 273  81B8 CD AA E0                             call    generate_stock_market          ; generate new prices
 274  81BB CD 8D 9B                             call    ClearUnivSlotList              ; clear out any ships
 275  81BE CD 40 9B                             call    ResetPlayerShip
 276  81C1                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 276  81C1 21 50 98    >                        ld      hl,FugitiveInnocentStatus
 276  81C4 CB 3E       >                        srl     (hl)
 277  81C6                                      MMUSelectSun
 277  81C6 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 278  81CA CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 279  81CD              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 280  81CD              ;TODO.CreateSun:             call    SetSunSlot
 281  81CD              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 282  81CD              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 283  81CD              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 284  81CD              ;;TODO                        call    CopyBodyToUniverse
 285  81CD              ;;TODO                        call    CreateSun
 286  81CD              ;;TODOCreatePlanet:          call    SetPlanetSlot
 287  81CD              ;;TODO                       MMUSelectShipBank1
 288  81CD              ;;TODO                       call    GetShipBankId
 289  81CD              ;;TODO                       MMUSelectUniverseBankN 1
 290  81CD              ;;TODO                       call    CopyBodyToUniverse
 291  81CD
 292  81CD              LoopEventTriggered:
 293  81CD CD F9 9B     .CanWeDoAnAdd:          call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 294  81D0 D8                                   ret     c                                   ; then may as well just skip routine
 295  81D1 FD 61                                ld      iyh,c                               ; save slot free in iyh
 296  81D3                                      JumpIfMemNotZero MissJumpFlag, .WitchSpaceEvent
 296  81D3 3A AB 98    >                        ld  a,(MissJumpFlag)
 296  81D6 A7          >                        and a
 296  81D7 C2 99 82    >                        jp  nz,.WitchSpaceEvent
 297  81DA CD 72 9C                             call    doRandom                            ; if random > 35 then its not junk
 298  81DD                                      JumpIfAGTENusng 35, .NotJunk
 298  81DD FE 23       >                        cp     35
 298  81DF D2 10 82    >                        jp		nc,.NotJunk
 299  81E2              .TestJunk:              TestRoomForJunk .NotJunk                    ; can we fit in any junk
 299  81E2 3E 03       >                        ld      a,3
 299  81E4             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 299  81E4 21 AD 98    >                        ld      hl,JunkCount
 299  81E7 BE          >                        cp      (hl)
 299  81E8 DA 10 82    >                        jp		c,.NotJunk
 300  81EB CD 72 9C     .CouldBeTrader:         call    doRandom                            ; so its now a 50/50 change of being a trader
 301  81EE E6 01                                and     1
 302  81F0 CA 5C 82                             jp      z,.SpawnTrader
 303  81F3 79           .SpawnJunk:             ld      a,c                                 ; a = slot number
 304  81F4 CD 72 9C                             call    doRandom
 305  81F7 FE 0A                                cp      10                                  ; will set carry if a < 10
 306  81F9                                      FlipCarryFlag                               ; so now carry is set if a > 10
 306  81F9 3F          >                        ccf
 307  81FA E6 01                                and     1                                   ; so only have carry flag
 308  81FC CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 309  81FE 47                                   ld      b,a                                 ; save ship type
 310  81FF 3A E7 96                             ld      a,(SpaceStationSafeZone)            ; if in space station zone
 311  8202 A7                                   and     a                                   ; then we can't do asteroids
 312  8203 28 04                                jr      z,.NotInSafeZone                    ; .
 313  8205 78                                   ld      a,b
 314  8206                                      ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 314  8206 FE 06       >                        cp      ShipID_Asteroid
 314  8208 C8          >                        ret     z
 315  8209              .NotInSafeZone:         AddJunkCount                                ; so its
 315  8209 21 AD 98    >                        ld      hl,JunkCount
 315  820C 34          >                        inc     (hl)
 316  820D C3 B5 82                             jp      SpawnShipTypeA
 317  8210                                      ;.......implicit ret
 318  8210              .NotJunk:               JumpIfMemNotZero SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 318  8210 3A E7 96    >                        ld  a,(SpaceStationSafeZone)
 318  8213 A7          >                        and a
 318  8214 C2 5C 82    >                        jp  nz,.SpawnTrader
 319  8217                                      MMUSelectCommander                          ; get cargo rating
 319  8217 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 320  821B CD CF E0                             call    calculateBadness                    ; a = badness
 321  821E CB 27                                sla     a                                   ; double badness for scans
 322  8220                                      JumpIfMemZero CopCount,.NoCopsInSystem
 322  8220 3A CD 98    >                        ld  a,(CopCount)
 322  8223 A7          >                        and a
 322  8224 CA 2B 82    >                        jp  z,.NoCopsInSystem
 323  8227 21 50 98                             ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 324  822A B6                                   or      (hl)
 325  822B 32 ED 9A     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 326  822E CD 72 9C                             call    doRandom                            ; then its hostile
 327  8231                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 327  8231 21 ED 9A    >                        ld      hl,BadnessStatus
 327  8234 BE          >                        cp      (hl)
 327  8235 D4 5C 82    >                        call	nc,.SpawnHostileCop
 328  8238                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 328  8238 3A CD 98    >                        ld     a,(CopCount)
 328  823B A7          >                        and     a
 328  823C C0          >                        ret    nz
 329  823D 21 AC 98                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 330  8240 35                                   dec     (hl)                                ; to prevent mass spawing
 331  8241 F0                                   ret     p                                   ;
 332  8242 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 333  8243                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 334  8243                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 335  8243 3A CF 98                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 336  8246                                      MMUSelectGalaxyA
 336  8246 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 337  8249 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 338  824C                                      JumpIfAIsNotZero .NotAnarchySystem
 338  824C FE 00       >                        cp	0
 338  824E C2 75 82    >                        jp	nz,.NotAnarchySystem
 339  8251 47                                   ld      b,a
 340  8252 CD 72 9C                             call    doRandom                            ; if random > 120 then don't spawn
 341  8255                                      ReturnIfAGTENusng 120                       ;
 341  8255 FE 78       >                        cp    120
 341  8257 D0          >                        ret	 nc
 342  8258 E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 343  825A                                      ReturnIfALTNusng b                          ; then return
 343  825A B8          >                        cp    b
 343  825B D8          >                        ret	 c
 344  825C              .SpawnTrader:       ; TODO
 345  825C              .SpawnHostileCop: ;TODO
 346  825C 78           .SpawnHostile:          ld      a,b
 347  825D                                      JumpIfAGTENusng 100,.SpawnPirates               ; 100 in 255 change of one or more pirates
 347  825D FE 64       >                        cp     100
 347  825F D2 76 82    >                        jp		nc,.SpawnPirates
 348  8262 21 AC 98                             ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 349  8265 34                                   inc     (hl)                                ;
 350  8266 E6 03                                and     3                                   ; a = random 0..3
 351  8268                                      MMUSelectShipBank1
 351  8268 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 352  826C                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 352  826C 21 81 8E    >                    ld          hl,ShipHunterTable
 352  826F ED 31       >                    add         hl,a
 352  8271 7E          >                    ld          a,(hl)
 353  8272 C3 B5 82                             jp      SpawnShipTypeA
 354  8275                                      ;.......implicit ret
 355  8275 C9           .NotAnarchySystem:      ret
 356  8276 78           .SpawnPirates:          ld      a,b                                 ; a = random 0..3
 357  8277 E6 03                                and     3
 358  8279 32 AC 98                             ld      (ExtraVesselsCounter),a
 359  827C 32 CE 98                             ld      (PirateCount),a
 360  827F CD 72 9C     .PirateLoop:            call    doRandom
 361  8282 4F                                   ld      c,a                                 ; random and random and 7
 362  8283 CD 72 9C                             call    doRandom
 363  8286 A1                                   and     c
 364  8287 E6 07                                and     7
 365  8289                                      GetByteAInTable ShipPackList
 365  8289 21 79 8E    >                    ld          hl,ShipPackList
 365  828C ED 31       >                    add         hl,a
 365  828E 7E          >                    ld          a,(hl)
 366  828F CD B5 82                             call    SpawnShipTypeA
 367  8292 21 CE 98                             ld      hl,PirateCount
 368  8295 35                                   dec     (hl)
 369  8296 20 E7                                jr      nz,.PirateLoop
 370  8298 C9                                   ret
 371  8299 C9           .WitchSpaceEvent:       ret; TODO for now
 372  829A
 373  829A
 374  829A CD F9 9B     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 375  829D 38 15                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 376  829F 3E 19        .LaunchGood:            ld      a,ShipID_Missile                    ; TODO For now only 1 missile type
 377  82A1                                      GetByteAInTable ShipPackList                ; swap in missile data
 377  82A1 21 79 8E    >                    ld          hl,ShipPackList
 377  82A4 ED 31       >                    add         hl,a
 377  82A6 7E          >                    ld          a,(hl)
 378  82A7 CD B5 82                             call    SpawnShipTypeA                      ; spawn the ship
 379  82AA 3A DB 9A                             ld      a,(MissileTarget)
 380  82AD 32 1E C0                             ld      (UBnKMissileTarget),a               ; load target Data
 381  82B0 CD 43 C5                             call    UnivSetPlayerMissile
 382  82B3 C9                                   ret
 383  82B4 C9           .MissileMissFire:       ret ; TODO bing bong noise misfire message
 384  82B5
 385  82B5
 386  82B5
 387  82B5 FD 6F        SpawnShipTypeA:         ld      iyl,a                               ; save ship type
 388  82B7                                      MMUSelectShipBank1                          ; select bank 1
 388  82B7 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 389  82BB FD 7C                                ld      a,iyh                               ; select unverse free slot
 390  82BD FD 45                                ld      b,iyl
 391  82BF CD A4 9B                             call    SetSlotAToTypeB
 392  82C2                                      MMUSelectUniverseA                          ; .
 392  82C2 C6 46       >                     add    a,BankUNIVDATA0
 392  82C4 ED 92 56    >                     nextreg UniverseMMU,       a
 393  82C7 FD 7D                                ld      a, iyl                              ; retrive ship type
 394  82C9                                      ;call    SetSlotAToTypeB                    ; record in the lookup tables
 395  82C9 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 396  82CC                                      MMUSelectShipBankA
 396  82CC ED 92 57    >					 nextreg ShipModelMMU,	    a
 397  82CF 78                                   ld      a,b                                 ; b = computed ship id for bank
 398  82D0 CD 6A E0                             call    CopyShipToUniverse
 399  82D3 CD 79 C5                             call    UnivSetSpawnPosition                ; set initial spawn position
 400  82D6 CD FD C5                             call    UnivInitRuntime                     ; Clear runtime data before startup
 401  82D9 3A 21 C3                             ld      a,(ShipTypeAddr)
 402  82DC 47                                   ld      b,a
 403  82DD FD 7D                                ld      a,iyl
 404  82DF CD AB 9B                             call    SetSlotAToClassB
 405  82E2
 406  82E2 C9                                   ret
 407  82E3
 408  82E3                                      ; reset main loop counters
 409  82E3                                      ; from BBC TT18 jump code
 410  82E3                                      ; need to set system corrodinates, flush out univere ships etc
 411  82E3                                      ; set up new star system and landing location in system
 412  82E3                                      ; reset ship speed etc (RES2)
 413  82E3                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 414  82E3                                      ;   put planet into data blokc 1 of FRIN
 415  82E3                                      ;   put sun inot data block (NWWSHIP)
 416  82E3                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 417  82E3
 418  82E3
 419  82E3              WeAreInTransition:
 420  82E3 3E 00        DoubleBufferCheck:      ld      a,00
 421  82E5                                      IFDEF DOUBLEBUFFER
 422  82E5 FE 00                                    cp      0
 423  82E7 CA F6 82                                 jp      z,TestTransition
 424  82EA                                          MMUSelectLayer2
 424  82EA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425  82EE 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 426  82F1 FE 00                                    cp     0
 427  82F3 C4 DD E0                                 call   nz,l2_flip_buffers
 428  82F6                                      ENDIF
 429  82F6 3A E3 86     TestTransition:        ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 430  82F9 FE FF                                cp      $FF
 431  82FB CA 90 80                             jp      z,MainLoop
 432  82FE 57           BruteForceChange:      ld      d,a
 433  82FF 1E 10                                ld      e,ScreenMapRow
 434  8301 ED 30                                mul
 435  8303 DD 21 F6 85                          ld      ix,ScreenKeyMap
 436  8307 DD 19                                add     ix,de                               ; Force screen transition
 437  8309 CD 8E 87                             call    SetScreenAIX
 438  830C C3 90 80                             jp MainLoop
 439  830F
 440  830F              ;..................................................................................................................................
 441  830F              ;..Process A ship..................................................................................................................
 442  830F
 443  830F              ;..Update Universe Objects.........................................................................................................
 444  830F AF           UpdateUniverseObjects:  xor     a
 445  8310 32 A7 98                             ld      (SelectedUniverseSlot),a
 446  8313 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 447  8314              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 448  8314 CD ED 9B                             call    GetTypeAtSlotA
 449  8317 FE FF                                cp      $FF
 450  8319 28 29                                jr      z,.ProcessedUniverseSlot
 451  831B 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 452  831C                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 452  831C C6 46       >                     add    a,BankUNIVDATA0
 452  831E ED 92 56    >                     nextreg UniverseMMU,       a
 453  8321 CD DB D5                             call    ApplyMyRollAndPitch
 454  8324 CD B5 D6                             call    ApplyShipRollAndPitch
 455  8327              ;.. If its a space station then see if we are ready to dock........................................................................
 456  8327 3A 21 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 457  832A                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 457  832A FE 02       >                        cp     ShipTypeStation
 457  832C C2 3A 83    >                        jp      nz,.NotDockingCheck
 458  832F              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 458  832F 3A 22 C3    >                        ld      a,(ShipNewBitsAddr)
 458  8332 CB 67       >                        bit 	4,a
 458  8334 C2 3A 83    >                        jp      nz,.NotDockingCheck
 459  8337 CD 77 83                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 460  833A                                     ; ReturnIfMemEquN ScreenTransitionForced, $FF             ; if we docked then a transition would have been forced
 461  833A              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 461  833A 3A A7 98    >                        ld   a,(SelectedUniverseSlot)
 461  833D 21 A6 98    >                        ld   hl,CurrentUniverseAI
 461  8340 BE          >                        cp   (hl)
 461  8341 CC 2D 85    >                        call    z,UpdateShip
 462  8344 3A A7 98     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 463  8347 3C                                   inc     a                                               ; .
 464  8348                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter    ; .
 464  8348 FE 0C       >                        cp     UniverseSlotListSize
 464  834A D2 53 83    >                        jp		nc,.UpdateAICounter
 465  834D 32 A7 98                             ld      (SelectedUniverseSlot),a
 466  8350 C3 13 83                             jp      .UpdateUniverseLoop
 467  8353 3A A6 98     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 468  8356 3C                                   inc     a
 469  8357 FE 0C                                cp      12
 470  8359 38 01                                jr      c,.IterateAI
 471  835B AF                                   xor     a
 472  835C 32 A6 98     .IterateAI:             ld      (CurrentUniverseAI),a
 473  835F              .CheckIfStationAngry:   ReturnIfMemFalse  SetStationAngryFlag
 473  835F 3A A8 98    >                        ld      a,(SetStationAngryFlag)
 473  8362 A7          >                        and     a
 473  8363 C0          >                        ret     nz
 474  8364              .SetStationAngryIfPoss: ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 474  8364 3A B4 98    >                        ld   a,(UniverseSlotList)
 474  8367 FE 02       >                        cp     ShipTypeStation
 474  8369 C8          >                        ret    z
 475  836A                                      MMUSelectUniverseN 0
 475  836A ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 476  836E CD 9F B2                             call    ForceAngryDirect
 477  8371                                      SetMemFalse    SetStationAngryFlag
 477  8371 3E FF       >                        ld      a,$FF
 477  8373 32 A8 98    >                        ld      (SetStationAngryFlag),a
 478  8376 C9                                   ret
 479  8377              ;..................................................................................................................................
 480  8377              ;.. Quickly eliminate space stations too far away..................................................................................
 481  8377 ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 482  837B 2A 0F C0                             ld      hl,(UBnKylo)
 483  837E ED 5B 12 C0                          ld      de,(UBnKzlo)
 484  8382 78                                   ld      a,b
 485  8383 B4                                   or      h
 486  8384 B2                                   or      d
 487  8385 C0                                   ret     nz
 488  8386 79           .CheckIfInRangeLo:      ld      a,c
 489  8387 B5                                   or      l
 490  8388 B3                                   or      e
 491  8389 E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 492  838B C0                                   ret     nz
 493  838C              ;.. Now check to see if we are comming in at a viable angle........................................................................
 494  838C 3A 39 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 495  838F                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 495  838F FE D6       >                        cp    214
 495  8391 D8          >                        ret	 c
 496  8392 CD 4B 85                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 497  8395 CB 7F                                bit     7,a                                 ; if its negative
 498  8397 C0                                   ret     nz                                  ; we are flying away from it
 499  8398                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 499  8398 FE 59       >                        cp    89
 499  839A D8          >                        ret	 c
 500  839B 3A 2F C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 501  839E E6 7F                                and     SignMask8Bit
 502  83A0                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 502  83A0 FE 50       >                        cp    80
 502  83A2 D8          >                        ret	 c
 503  83A3              ;.. Its passed all validation and we are docking...................................................................................
 504  83A3              .AreDocking:            MMUSelectLayer1
 504  83A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 505  83A7 3E 06                                ld        a,$6
 506  83A9 CD A5 E0                             call      l1_set_border
 507  83AC              .EnterDockingBay:       ForceTransition ScreenDocking
 507  83AC 3E 0D       >                        ld      a,ScreenDocking
 507  83AE 32 E3 86    >                        ld      (ScreenTransitionForced), a
 508  83B1 C9                                   ret
 509  83B2
 510  83B2              ;..................................................................................................................................
 511  83B2              ;; TODODrawForwardSun:         MMUSelectSun
 512  83B2              ;; TODO                        ld      a,(SunKShipType)
 513  83B2              ;; TODO.ProcessBody:           cp      129
 514  83B2              ;; TODO                        jr      nz,.ProcessPlanet
 515  83B2              ;; TODO.ProcessSun:            call    ProcessSun
 516  83B2              ;; TODO
 517  83B2              ;; TODOProcessSun:             call    CheckSunDistance
 518  83B2              ;; TODO
 519  83B2              ;; TODO                        ret
 520  83B2              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 521  83B2              ;; TODO                        ret
 522  83B2              ;..................................................................................................................................
 523  83B2 AF           DrawForwardShips:       xor     a
 524  83B3 32 E5 83     .DrawShipLoop:          ld      (CurrentShipUniv),a
 525  83B6 CD ED 9B                             call    GetTypeAtSlotA
 526  83B9 FE FF                                cp      $FF
 527  83BB 28 0E                                jr      z,.ProcessedDrawShip
 528  83BD              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 529  83BD 3A E5 83     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 530  83C0                                      MMUSelectUniverseA
 530  83C0 C6 46       >                     add    a,BankUNIVDATA0
 530  83C2 ED 92 56    >                     nextreg UniverseMMU,       a
 531  83C5                                      ; Need check for exploding here
 532  83C5 CD F3 D7     .ProcessUnivShip:       call    ProcessShip          ; TODFO TUNE THIS   ;; call    ProcessUnivShip
 533  83C8              .UpdateRadar:
 534  83C8              ;;;Does nothing                       ld      a,BankFrontView
 535  83C8              ;;;Does nothing                       MMUSelectScreenA
 536  83C8              ;;;Does nothing         ld      a,(CurrentShipUniv)
 537  83C8              ;;;Does nothing         MMUSelectUniverseA
 538  83C8 CD 6F 8C                             call    UpdateScannerShip               ; Always update ship positions
 539  83CB 3A E5 83     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 540  83CE 3C                                   inc     a
 541  83CF                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 541  83CF FE 0C       >                        cp      UniverseSlotListSize
 541  83D1 DA B3 83    >                        jp		c, .DrawShipLoop
 542  83D4              .DrawSunCompass:        MMUSelectSun
 542  83D4 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 543  83D8 CD 6A 8A                             call    UpdateCompassSun                ; Always update the sun position
 544  83DB CD AE 8B                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 545  83DE 3A E7 96     .CheckPlanetCompass:    ld      a,(SpaceStationSafeZone)
 546  83E1 A7                                   and     a
 547  83E2 20 00                                jr      nz,.DrawSpaceStationCompass
 548  83E4              .DrawPlanetCompass:
 549  83E4
 550  83E4              .DrawSpaceStationCompass:
 551  83E4
 552  83E4 C9                                   ret
 553  83E5              ;..................................................................................................................................
 554  83E5 00           CurrentShipUniv:        DB      0
 555  83E6
 556  83E6              ;;;ProcessUnivShip:        call    CheckDistance               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 557  83E6              ;;;                        ret     c
 558  83E6              ;;;                        ld      a,(UbnkDrawAsDot)
 559  83E6              ;;;                        and     a
 560  83E6              ;;;                        jr      z,.CarryOnWithDraw
 561  83E6              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 562  83E6              ;;;                        ld      a,$FF                       ; just draw a pixel
 563  83E6              ;;;                        MMUSelectLayer2                     ; then go to update radar
 564  83E6              ;;;                        call    l2_plot_pixel               ;
 565  83E6              ;;;                        ClearCarryFlag
 566  83E6              ;;;                        ret
 567  83E6              ;;;.ProcessShipNodes:      call    ProcessShip
 568  83E6              ;;;
 569  83E6              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 570  83E6              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 571  83E6              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 572  83E6              ;;;                        ld      a,(CurrentShipUniv)
 573  83E6              ;;;                        MMUSelectUniverseA
 574  83E6              ;;;                        call   DrawLines
 575  83E6              ;;;                        ClearCarryFlag
 576  83E6              ;;;                        ret
 577  83E6
 578  83E6
 579  83E6 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 580  83E8 CD 25 95                             call    is_key_pressed
 581  83EB C0                                   ret     nz
 582  83EC 3A 2C 85                             ld      a,(currentDemoShip)
 583  83EF 3C                                   inc     a
 584  83F0 FE 2C                                cp      44
 585  83F2 20 01                                jr      nz,.TestOK
 586  83F4 AF                                   xor     a
 587  83F5 32 2C 85     .TestOK:                ld      (currentDemoShip),a
 588  83F8 CD 8D 9B                             call    ClearUnivSlotList
 589  83FB 3A 2C 85                             ld      a,(currentDemoShip)
 590  83FE 47                                   ld      b,a
 591  83FF AF                                   xor     a
 592  8400 CD A4 9B                             call    SetSlotAToTypeB
 593  8403                                      MMUSelectUniverseN 2
 593  8403 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 594  8407 CD 2D C5                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 595  840A 3A 2C 85                             ld      a,(currentDemoShip)
 596  840D                                      MMUSelectShipBank1
 596  840D ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 597  8411 CD 0F E0                             call    GetShipBankId
 598  8414                                      MMUSelectShipBankA
 598  8414 ED 92 57    >					 nextreg ShipModelMMU,	    a
 599  8417 78                                   ld      a,b
 600  8418 CD 6A E0                             call    CopyShipToUniverse
 601  841B CD 46 88                             call    SetInitialShipPosition
 602  841E CD B2 85                             call    DEBUGSETNODES
 603  8421 C9                                   ret
 604  8422
 605  8422              ;----------------------------------------------------------------------------------------------------------------------------------
 606  8422              NeedAMessageQueue:
 607  8422
 608  8422 3A F2 96     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 609  8425 11 7C 84                             ld		de,Hyp_counter
 610  8428 0E 9C                                ld	c, -100
 611  842A CD 34 84                             call	.Num1
 612  842D 0E F6                                ld	c,-10
 613  842F CD 34 84                             call	.Num1
 614  8432 0E FF                                ld	c,-1
 615  8434 06 2F        .Num1:	                ld	b,'0'-1
 616  8436 04           .Num2:	                inc		b
 617  8437 81                                   add		a,c
 618  8438 38 FC                                jr		c,.Num2
 619  843A 91                                   sub 	c
 620  843B C5                                   push	bc
 621  843C F5                                   push	af
 622  843D 79                                   ld		a,c
 623  843E FE FF                                cp		-1
 624  8440 78                                   ld		a,b
 625  8441 12                                   ld		(de),a
 626  8442 13                                   inc		de
 627  8443 F1                                   pop		af
 628  8444 C1                                   pop		bc
 629  8445 C9                                   ret
 630  8446
 631  8446              ;----------------------------------------------------------------------------------------------------------------------------------
 632  8446 54 6F 3A     Hyp_message             DB "To:"
 633  8449 00 00 00...  Hyp_to                  DS 32
 634  8469 20           Hyp_space1              DB " "
 635  846A 30 2E 30     Hyp_dist_amount         DB "0.0"
 636  846D 2E           Hyp_decimal             DB "."
 637  846E 30           Hyp_fraction            DB "0"
 638  846F 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 639  8473 43 68 61 72  Hyp_charging            DB "Charging:"
 639  8477 67 69 6E 67
 639  847B 3A
 640  847C 30 30 30 00  Hyp_counter             DB "000",0
 641  8480 00 00 00...  Hyp_centeredTarget      DS 32
 642  84A0 00           Hyp_centeredEol         DB 0
 643  84A1 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 644  84C1 00 00 00...  Hyp_centeredCharging    DS 32
 645  84E1 00           Hyp_centeredEol2        DB 0
 646  84E2 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 647  8502
 648  8502
 649  8502              ;DisplayTargetAndRange
 650  8502              ;DisplayCountDownNumber
 651  8502              ;----------------------------------------------------------------------------------------------------------------------------------
 652  8502 3A F4 97     TestPauseMode:          ld      a,(GamePaused)
 653  8505 FE 00                                cp      0
 654  8507 20 12                                jr      nz,.TestForResume
 655  8509 3A EC 97     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 656  850C                                      ReturnIfAGTENusng       ScreenFront
 656  850C FE 09       >                        cp    ScreenFront
 656  850E D0          >                        ret	 nc
 657  850F 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 658  8511 CD 25 95                             call    is_key_pressed
 659  8514 C0                                   ret     nz
 660  8515              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 660  8515 3E FF       >                        ld      a,$FF
 661  8517 32 F4 97                             ld      (GamePaused),a
 662  851A C9                                   ret
 663  851B 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 664  851D CD 25 95                             call    is_key_pressed
 665  8520 C0                                   ret     nz
 666  8521 AF           .ResumePressed:         xor     a
 667  8522 32 F4 97                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 668  8525 C9                                   ret
 669  8526
 670  8526 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 671  8528 CD 25 95                             call    is_key_pressed
 672  852B C9                                   ret
 673  852C 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 674  852D
 675  852D
 676  852D              ;----------------------------------------------------------------------------------------------------------------------------------
 677  852D              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 678  852D 21 B1 85                             ld      hl,TidyCounter
 679  8530 35                                   dec     (hl)
 680  8531 C0                                   ret     nz
 681  8532 3E 10                                ld      a,16
 682  8534 32 B1 85                             ld      (TidyCounter),a
 683  8537                                      ; call    TIDY TIDY IS BROKEN
 684  8537                                     ; add AI in here too
 685  8537 C9                                   ret
 686  8538
 687  8538 F5           InitialiseShipAUnivB:   push    af
 688  8539 78                                   ld      a,b
 689  853A                                      MMUSelectUniverseA                          ; load up register into universe bank
 689  853A C6 46       >                     add    a,BankUNIVDATA0
 689  853C ED 92 56    >                     nextreg UniverseMMU,       a
 690  853F CD 2D C5                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 691  8542                                      MMUSelectShipBank1
 691  8542 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 692  8546 F1                                   pop     af
 693  8547 CD 6A E0                             call    CopyShipToUniverse
 694  854A C9                                   ret
 695  854B
 696  854B 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 697  854E 11 01 98                             ld      de,varVector9ByteWork
 698  8551 ED A0                                ldi
 699  8553 ED A0                                ldi
 700  8555 ED A0                                ldi
 701  8557 ED A0                                ldi
 702  8559 ED A0                                ldi
 703  855B ED A0                                ldi
 704  855D ED A0                                ldi
 705  855F ED A0                                ldi
 706  8561 ED A0                                ldi
 707  8563 2A 01 98     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 708  8566 ED 5B 04 98                          ld      de, (varVector9ByteWork+3); Y
 709  856A ED 4B 07 98                          ld      bc, (varVector9ByteWork+6); Z
 710  856E 7D                                   ld      a,l
 711  856F B3                                   or      e
 712  8570 B1                                   or      c
 713  8571 F6 01                                or      1
 714  8573 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 715  8575 7C                                   ld      a,h
 716  8576 B2                                   or      d
 717  8577 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 718  8578 C5           .MulBy2Loop:            push    bc
 719  8579 DD 45                                ld      b,ixl
 720  857B CB 20                                sla     b                       ; Shift ixl left
 721  857D DD 68                                ld      ixl,b
 722  857F C1                                   pop     bc
 723  8580 CB 17                                rl      a                       ; roll into a
 724  8582 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 725  8584                                      ShiftHLLeft1                    ; Shift Left X
 725  8584 CB 25       >			   sla l
 725  8586 CB 14       >			   rl  h
 726  8588                                      ShiftDELeft1                    ; Shift Left Y
 726  8588 CB 23       >			   sla e
 726  858A CB 12       >			   rl  d
 727  858C                                      ShiftBCLeft1                    ; Shift Left Z
 727  858C CB 21       >			   sla c
 727  858E CB 10       >			   rl  b
 728  8590 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 729  8592 3A 03 98     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 730  8595 CB 3C                                srl     h
 731  8597 B4                                   or      h
 732  8598 32 82 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 733  859B 3A 06 98                             ld      a,(varVector9ByteWork+5); y sign
 734  859E CB 3A                                srl     d
 735  85A0 B2                                   or      d
 736  85A1 32 83 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 737  85A4 3A 09 98                             ld      a,(varVector9ByteWork+8); y sign
 738  85A7 CB 38                                srl     b
 739  85A9 B0                                   or      b
 740  85AA 32 84 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 741  85AD CD F6 AB                             call    normaliseXX1596fast
 742  85B0 C9                                   ret                             ; will return with a holding Vector Z
 743  85B1
 744  85B1 00           TidyCounter             DB  0
 745  85B2
 746  85B2                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 85B2
   2+ 85B2
   3+ 85B2 21 D5 85     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 85B5 11 0C C0                             ld      de,UBnKxlo
   5+ 85B8 01 09 00                             ld      bc,9
   6+ 85BB ED B0                                ldir
   7+ 85BD 21 DE 85                             ld      hl,DEBUGROTMATDATA
   8+ 85C0 11 28 C0                             ld      de,UBnkrotmatSidevX
   9+ 85C3 01 12 00                             ld      bc,6*3
  10+ 85C6 ED B0                                ldir
  11+ 85C8 C9                                   ret
  12+ 85C9
  13+ 85C9 21 D5 85     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 85CC 11 0C C0                             ld      de,UBnKxlo
  15+ 85CF 01 06 00                             ld      bc,9 - 3
  16+ 85D2 ED B0                                ldir
  17+ 85D4 C9                                   ret
  18+ 85D5
  19+ 85D5              ; culltest
  20+ 85D5              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 85D5 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 85D9 00 00 5C 07
  21+ 85DD 00
  22+ 85DE 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 85E2 00 00
  23+ 85E4 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 85E8 00 00
  24+ 85EA 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 85EE 00 E0
  25+ 85F0
  26+ 85F0              ; FAILS due to sharp angle, OK now
  27+ 85F0              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 85F0              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 85F0              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 85F0              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 85F0              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 85F0              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 85F0              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 85F0              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 85F0              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 85F0              ; Looks OK
  37+ 85F0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 85F0              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 85F0              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 85F0              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 85F0              ;
  42+ 85F0              ; Massive horizontal line
  43+ 85F0              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 85F0              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 85F0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 85F0              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 85F0              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 85F0              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 85F0              ; Line lost in clipping
  50+ 85F0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 85F0              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 85F0              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 85F0              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 85F0              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 85F0              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 85F0              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 85F0              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 85F0              ;
  59+ 85F0              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 85F0              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 85F0              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 85F0              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 85F0              ; top left off right issue
  64+ 85F0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 85F0              ; test middle of screen
  69+ 85F0              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 85F0              ;
  71+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 85F0              ; test middle of screen futher away
  75+ 85F0              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 85F0              ;
  77+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 85F0
  81+ 85F0              ; Test left center clip still warping
  82+ 85F0              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 85F0              ;
  84+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 85F0              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 85F0              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 85F0              ;
  90+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 85F0              ; Test top center clip test 1 - good test many ships fail
  94+ 85F0              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 85F0              ;
  96+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 85F0              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 85F0              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 85F0              ;
 102+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 85F0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 85F0              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 85F0              ; looks better now may have some clipping issues maybe ship data
 107+ 85F0              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 85F0              ;
 109+ 85F0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 85F0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 85F0 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 85F4 B0 55
 112+ 85F6              ; Test left top center clip
 113+ 85F6
 114+ 85F6              ; Test right top center clip
 115+ 85F6              ; Test left bottom center clip
 116+ 85F6              ; Test right bottom center clip
 117+ 85F6
 118+ 85F6              ; Tests with no clip
 119+ 85F6              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 85F6              ;
 121+ 85F6              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 85F6              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 85F6              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 85F6              ;
 125+ 85F6              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 85F6              ;
 127+ 85F6              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 85F6              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 85F6
# file closed: ./debugMatrices.asm
 747  85F6
 748  85F6
 749  85F6              ;TODO Optimisation
 750  85F6              ; Need this table to handle differnet events
 751  85F6              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 752  85F6              ; cursor key, joystick press
 753  85F6              ; cursor key, joystick press
 754  85F6              ; non cursor keys presses
 755  85F6              ;
 756  85F6              ; First byte is now docked flag
 757  85F6              ;
 758  85F6              ; Padded to 8 bytes to allow a * 8 for addressing
 759  85F6              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 760  85F6              ; Byte 1   - Screen Id
 761  85F6              ; Byte 2,3 - address of keypress table
 762  85F6              ; Byte 4   - Bank with Display code
 763  85F6              ; Byte 5,6 - Function for display
 764  85F6              ; Byte 7,8 - Main loop update routine
 765  85F6              ; Byte 9   - Draw stars Y/N
 766  85F6              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 767  85F6              ; byte 11  - Double Buffering 0 = no, 1 = yes
 768  85F6              ; byte 12,13  - cursor key input routine
 769  85F6              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 770  85F6              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 771  85F6              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 772  85F6 00 00 4E 94  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 772  85FA 32 FC C3 00
 772  85FE 00 00 00 00
 772  8602 5A C4 01 00
 773  8606 00 01 4C 94  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 773  860A 33 43 C1 62
 773  860E C2 00 00 00
 773  8612 05 C3 01 00
 774  8616 01 02 50 94                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 774  861A 36 43 C3 FA
 774  861E C3 00 00 00
 774  8622 00 00 01 00
 775  8626 02 03 50 94                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 775  862A 36 43 C3 00
 775  862E 00 00 00 00
 775  8632 00 00 01 00
 776  8636 00 04 52 94  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 776  863A 3F 19 CF 5D
 776  863E CF 00 00 00
 776  8642 00 00 01 00
 777  8646 00 05 54 94                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 777  864A 34 F5 C1 00
 777  864E 00 00 00 00
 777  8652 00 00 01 00
 778  8656 00 06 62 94                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 778  865A 35 F0 C2 00
 778  865E 00 00 00 00
 778  8662 00 00 01 00
 779  8666 01 07 4A 94                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 779  866A 40 EA D3 86
 779  866E D4 00 00 00
 779  8672 00 00 01 00
 780  8676 01 08 44 94                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 780  867A 41 79 C1 63
 780  867E C2 00 01 01
 780  8682 00 00 01 00
 781  8686 02 09 1A 94  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 781  868A 3E 6A C0 00
 781  868E 00 01 00 01
 781  8692 75 C2 00 00
 782  8696 02 0A 1A 94                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 782  869A 3E 6A C0 00
 782  869E 00 01 00 01
 782  86A2 75 C2 00 00
 783  86A6 02 0B 1A 94                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 783  86AA 3E 6A C0 00
 783  86AE 00 01 00 01
 783  86B2 75 C2 00 00
 784  86B6 02 0C 1A 94                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 784  86BA 3E 6A C0 00
 784  86BE 00 01 00 01
 784  86C2 75 C2 00 00
 785  86C6 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 785  86CA 41 F5 C1 98
 785  86CE C2 00 01 01
 785  86D2 00 00 01 00
 786  86D6 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 786  86DA 3E 2D C2 73
 786  86DE C2 00 01 01
 786  86E2 00
 787  86E3
 788  86E3              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 789  86E3              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 790  86E3              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 791  86E3              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 792  86E3              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 793  86E3              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 794  86E3 FF           ScreenTransitionForced  DB $FF
 795  86E4                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 86E4              ; Use bank 0 as source and bank 7 as write target
   2+ 86E4              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 86E4 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 86E8 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 86EA 06 0C                                ld		b,12
   5+ 86EC C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 86EE                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 86EE C6 46       >                     add    a,BankUNIVDATA0
   6+ 86F0 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 86F3 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 86F6 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 86F9 01 70 19                             ld		bc,UnivBankSize
  10+ 86FC CD C5 93                             call	memcopy_dma
  11+ 86FF F1 C1                                pop		bc,,af
  12+ 8701 57                                   ld      d,a
  13+ 8702 C6 41                                add     "A"
  14+ 8704 32 0B C0                             ld      (StartOfUnivN),a
  15+ 8707 7A                                   ld      a,d
  16+ 8708 3C                                   inc		a
  17+ 8709 10 E1                                djnz	.ResetCopyLoop
  18+ 870B C9                                   ret
  19+ 870C
  20+ 870C              ; Use bank 0 as source and bank 7 as write target
  21+ 870C              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 870C ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 8710 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 8712 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 8714 0E 01                                ld      c,1                              ;
  25+ 8716 F5           .ResetCopyLoop:         push	af                               ;
  26+ 8717 C5                                   push	bc                               ;
  27+ 8718                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 8718 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  28+ 871B 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 871E 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 8721 01 CD 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 8724 CD C5 93                             call	memcopy_dma                      ; .
  32+ 8727 C1                                   pop		bc                               ; .
  33+ 8728 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 872B 79                                   ld      a,c                              ;
  35+ 872C C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 872E 77                                   ld      (hl),a                           ; .
  37+ 872F 0C                                   inc     c                                ; Do next bank
  38+ 8730 F1                                   pop     af                               ; .
  39+ 8731 3C                                   inc		a                                ; .
  40+ 8732 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 8734 C9                                   ret
  42+ 8735
  43+ 8735 06 08        SeedAllGalaxies:        ld          b,8
  44+ 8737 0E 5B                                ld          c,BankGalaxyData0
  45+ 8739 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 873A 79                                   ld          a,c
  47+ 873B                                      MMUSelectGalaxyA
  47+ 873B ED 92 57    >                     nextreg GalaxyDataMMU,       a
  48+ 873E CD 90 FC                             call        SeedGalaxy
  49+ 8741 C1                                   pop         bc
  50+ 8742 0C                                   inc         c
  51+ 8743 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 8745 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 796  8746
 797  8746
 798  8746              ;----------------------------------------------------------------------------------------------------------------------------------
 799  8746              LaunchedFromStation:    MMUSelectSun
 799  8746 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 800  874A CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 801  874D CD 8D 9B                             call    ClearUnivSlotList
 802  8750 CD 99 9B                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 803  8753                                      MMUSelectUniverseN 0                        ; Prep Target universe
 803  8753 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 804  8757                                      MMUSelectShipBank1                          ; Bank in the ship model code
 804  8757 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 805  875B CD FD C5                             call    UnivInitRuntime                     ; Zerp ship runtime data
 806  875E 3E 0D                                ld      a,CoriloisStation
 807  8760 CD 0F E0                             call    GetShipBankId
 808  8763                                      MMUSelectShipBankA                          ; Select the correct bank found
 808  8763 ED 92 57    >					 nextreg ShipModelMMU,	    a
 809  8766 78                                   ld      a,b                                 ; Select the correct ship
 810  8767 CD 6A E0                             call    CopyShipToUniverse
 811  876A CD CA C5     .BuiltStation:          call    ResetStationLaunch
 812  876D AF           .NowInFlight:           xor     a
 813  876E 32 F3 97                             ld      (DockedFlag),a
 814  8771                                      ForceTransition ScreenFront
 814  8771 3E 09       >                        ld      a,ScreenFront
 814  8773 32 E3 86    >                        ld      (ScreenTransitionForced), a
 815  8776 CD 40 9B                             call    ResetPlayerShip
 816  8779 C9                                   ret
 817  877A
 818  877A 3A 37 86     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 819  877D DD 21 36 86                          ld      ix,ScreenCmdr
 820  8781 C3 8E 87                             jp      SetScreenAIX
 821  8784
 822  8784 3A 87 86     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 823  8787 DD 21 86 86                          ld      ix,ScreenKeyFront
 824  878B C3 8E 87                             jp      SetScreenAIX
 825  878E              ; false ret here as we get it free from jp
 826  878E
 827  878E              ;----------------------------------------------------------------------------------------------------------------------------------
 828  878E 32 EC 97     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 829  8791                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
 829  8791 3E FF       >                        ld      a,$FF
 829  8793 32 E3 86    >                        ld      (ScreenTransitionForced),a
 830  8796 32 EB 97                             ld      (ScreenChanged),a               ; Set screen changed to FF
 831  8799 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 832  879C 32 41 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 833  879F 32 C2 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 834  87A2                                      MMUSelectScreenA
 834  87A2 ED 92 56    >                     nextreg ScreenBankMMU,		a
 835  87A5 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 836  87A8 32 DC 87                             ld      (ScreenUpdateAddr+1),a
 837  87AB DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 838  87AE 32 DD 87                             ld      (ScreenUpdateAddr+2),a
 839  87B1 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 840  87B4 32 46 81                             ld      (ScreenLoopJP+1),a
 841  87B7 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 842  87BA 32 47 81                             ld      (ScreenLoopJP+2),a
 843  87BD DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 844  87C0 32 EB 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 845  87C3 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 846  87C6 32 A4 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 847  87C9 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 848  87CC 32 E4 82                             ld      (DoubleBufferCheck+1),a
 849  87CF DD 7E 0C                             ld      a,(ix+12)
 850  87D2 32 C7 80                             ld      (CallCursorRoutine+1),a
 851  87D5 DD 7E 0D                             ld      a,(ix+13)
 852  87D8 32 C8 80                             ld      (CallCursorRoutine+2),a
 853  87DB
 854  87DB C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 855  87DE              ;----------------------------------------------------------------------------------------------------------------------------------
 856  87DE 3A EC 97     ViewKeyTest:            ld      a,(ScreenIndex)
 857  87E1 4F                                   ld      c,a
 858  87E2 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 859  87E4 DD 21 F6 85                          ld      ix,ScreenKeyMap
 860  87E8 2A F1 96                             ld      hl,(InnerHyperCount)
 861  87EB 7C                                   ld      a,h
 862  87EC B5                                   or      l
 863  87ED FD 67                                ld      iyh,a
 864  87EF FD 7C        ViewScanLoop:           ld      a,iyh
 865  87F1 A7           .HyperspaceCountdown:   and     a
 866  87F2 28 08                                jr      z,.DockedFlag
 867  87F4 DD 7E 0E                             ld      a,(ix+14)
 868  87F7 FE 01                                cp      1
 869  87F9 CA 3E 88                             jp      z,NotReadNextKey
 870  87FC DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 871  87FF              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 872  87FF FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 873  8801 28 3B                                jr      z,NotReadNextKey                ;
 874  8803 FE 00                                cp      0                               ; if itr a always read skip docking check
 875  8805 28 14                                jr      z,.NoDocCheck
 876  8807 57           .DocCheck:              ld      d,a
 877  8808 3A F3 97                             ld      a,(DockedFlag)
 878  880B FE 00                                cp      0                               ; if we are docked
 879  880D 28 07                                jr      z,.NotDockedCheck
 880  880F 7A           .DockedCheck:           ld      a,d
 881  8810 FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 882  8812 20 2A                                jr      nz,NotReadNextKey
 883  8814 18 05                                jr      .NoDocCheck
 884  8816 7A           .NotDockedCheck:        ld      a,d
 885  8817 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 886  8819 20 23                                jr      nz,NotReadNextKey
 887  881B DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 888  881E B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 889  881F 5F                                   ld      e,a
 890  8820 28 1C                                jr      z,NotReadNextKey
 891  8822 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 892  8825 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 893  8827 28 15                                jr      z,NotReadNextKey
 894  8829 32 33 88                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 895  882C DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 896  882F 32 34 88                             ld      (ReadKeyAddr+2),a
 897  8832 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 898  8835 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 899  8836                                      JumpIfAIsZero NotReadNextKey
 899  8836 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 899  8837 CA 3E 88    >                        jp	z, NotReadNextKey
 900  883A 7B           .ValidScreenChange:     ld      a,e
 901  883B C3 8E 87                             jp      SetScreenAIX
 902  883E              ;--- CODE WILL NOT FALL TO HERE ---
 903  883E 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 904  8841 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 905  8843 10 AA                                djnz    ViewScanLoop
 906  8845 C9                                   ret
 907  8846
 908  8846 21 00 00     SetInitialShipPosition: ld      hl,$0000
 909  8849 22 0C C0                             ld      (UBnKxlo),hl
 910  884C 21 00 00                             ld      hl,$0000
 911  884F 22 0F C0                             ld      (UBnKylo),hl
 912  8852 21 B4 03                             ld      hl,$03B4
 913  8855 22 12 C0                             ld      (UBnKzlo),hl
 914  8858 AF                                   xor     a
 915  8859 32 0E C0                             ld      (UBnKxsgn),a
 916  885C 32 11 C0                             ld      (UBnKysgn),a
 917  885F 32 14 C0                             ld      (UBnKzsgn),a
 918  8862              ;    call    Reset TODO
 919  8862 CD 70 C7                             call	InitialiseOrientation            ;#00;
 920  8865 3E 01                                ld      a,1
 921  8867 32 DF 97                             ld      (DELTA),a
 922  886A 21 04 00                             ld      hl,4
 923  886D 22 E0 97                             ld      (DELTA4),hl
 924  8870 C9                                   ret
 925  8871
 926  8871
 927  8871                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 8871              ; bc = start position, d = length, e = colour
   2+ 8871 1E 10        Draw3LineBar:           ld      e,16
   3+ 8873 C5 D5                                push    bc,,de
   4+ 8875                                      MMUSelectLayer2
   4+ 8875 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 8879 CD 60 E2                             call    l2_draw_horz_line
   6+ 887C D1 C1                                pop     bc,,de
   7+ 887E 05                                   dec     b
   8+ 887F C5 D5                                push    bc,,de
   9+ 8881 1E 14                                ld      e,20
  10+ 8883                                      MMUSelectLayer2
  10+ 8883 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 8887 CD 60 E2                             call    l2_draw_horz_line
  12+ 888A D1 C1                                pop     bc,,de
  13+ 888C 05                                   dec     b
  14+ 888D                                      MMUSelectLayer2
  14+ 888D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 8891 CD 60 E2                             call    l2_draw_horz_line
  16+ 8894 C9                                   ret
  17+ 8895
  18+ 8895 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 8897 FE 28                                cp      40
  20+ 8899 30 18                                jr      nc,DrawColourEBar
  21+ 889B 1E 54                                ld      e,84
  22+ 889D FE 1E                                cp      30
  23+ 889F 30 12                                jr      nc,DrawColourEBar
  24+ 88A1 1E D8                                ld      e,216
  25+ 88A3 FE 14                                cp      20
  26+ 88A5 1E EC                                ld      e,236
  27+ 88A7 FE 0A                                cp      10
  28+ 88A9 30 08                                jr      nc,DrawColourEBar
  29+ 88AB 1E E1                                ld      e,225
  30+ 88AD FE 05                                cp      5
  31+ 88AF 30 02                                jr      nc,DrawColourEBar
  32+ 88B1 1E E0                                ld      e,224
  33+ 88B3 C5 D5        DrawColourEBar:         push    bc,,de
  34+ 88B5                                      MMUSelectLayer2
  34+ 88B5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 88B9 CD 60 E2                             call    l2_draw_horz_line
  36+ 88BC D1 C1                                pop     bc,,de
  37+ 88BE 05                                   dec     b
  38+ 88BF C5 D5                                push    bc,,de
  39+ 88C1                                      MMUSelectLayer2
  39+ 88C1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 88C5 CD 60 E2                             call    l2_draw_horz_line
  41+ 88C8 D1 C1                                pop     bc,,de
  42+ 88CA 05                                   dec     b
  43+ 88CB                                      MMUSelectLayer2
  43+ 88CB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 88CF CD 60 E2                             call    l2_draw_horz_line
  45+ 88D2 C9                                   ret
  46+ 88D3
  47+ 88D3                                      ; no ret needed as jp handles it
  48+ 88D3
  49+ 88D3
  50+ 88D3
  51+ 88D3
  52+ 88D3 3A DF 97     UpdateConsole:          ld      a,(DELTA)
  53+ 88D6 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  54+ 88D8 28 0C                                jr      z,.UpdateRoll
  55+ 88DA 01 D1 84                             ld      bc,SpeedoStart
  56+ 88DD 21 17 9B                             ld      hl,SpeedoMapping
  57+ 88E0 ED 31                                add     hl,a
  58+ 88E2 56                                   ld      d,(hl)
  59+ 88E3 CD 71 88                             call    Draw3LineBar
  60+ 88E6 3A FA 96     .UpdateRoll:            ld      a,(ALP1)
  61+ 88E9 FE 00                                cp      0
  62+ 88EB CA 1F 89                             jp      z,.UpdatePitch
  63+ 88EE 21 E0 8C                             ld      hl,RollMiddle
  64+ 88F1 3A FB 96                             ld      a,(ALP2)
  65+ 88F4 FE 00                                cp      0
  66+ 88F6 CA 11 89                             jp     z,.PosRoll
  67+ 88F9 16 00        .NegRoll:               ld      d,0
  68+ 88FB 3A FA 96                             ld      a,(ALP1)
  69+ 88FE CB 27                                sla     a
  70+ 8900 5F                                   ld      e,a
  71+ 8901 B7                                   or      a
  72+ 8902 ED 52                                sbc     hl,de
  73+ 8904 44 4D                                ld      bc,hl
  74+ 8906 3E E1                                ld      a,DialMiddleXPos
  75+ 8908 91                                   sub     c
  76+ 8909 57                                   ld      d,a
  77+ 890A 1E FF                                ld      e,$FF
  78+ 890C CD 71 88                             call    Draw3LineBar
  79+ 890F 18 0E                                jr      .UpdatePitch
  80+ 8911 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  81+ 8914 3A FA 96                             ld      a,(ALP1)
  82+ 8917 CB 27                                sla     a
  83+ 8919 57                                   ld      d,a
  84+ 891A 1E FF                                ld      e,$FF
  85+ 891C CD 71 88                             call    Draw3LineBar
  86+ 891F 3A EA 96     .UpdatePitch:           ld      a,(BET1)
  87+ 8922 FE 00                                cp      0
  88+ 8924 CA 59 89                             jp      z,.Fuel
  89+ 8927 21 E0 94                             ld      hl,PitchMiddle
  90+ 892A 3A EB 96                             ld      a,(BET2)
  91+ 892D FE 00                                cp      0
  92+ 892F CA 4B 89                             jp      z,.PosPitch
  93+ 8932 16 00        .NegPitch:              ld      d,0
  94+ 8934 3A EA 96                             ld      a,(BET1)
  95+ 8937 CB 27                                sla     a
  96+ 8939 5F                                   ld      e,a
  97+ 893A B7                                   or      a
  98+ 893B ED 52                                sbc     hl,de
  99+ 893D 44 4D                                ld      bc,hl
 100+ 893F 3E E1                                ld      a,DialMiddleXPos
 101+ 8941 91                                   sub     c
 102+ 8942 57                                   ld      d,a
 103+ 8943 1E FF                                ld      e,$FF
 104+ 8945 CD 71 88                             call    Draw3LineBar
 105+ 8948 C3 59 89                             jp      .Fuel
 106+ 894B 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 107+ 894E 3A EA 96                             ld      a,(BET1)
 108+ 8951 CB 27                                sla     a
 109+ 8953 57                                   ld      d,a
 110+ 8954 1E FF                                ld      e,$FF
 111+ 8956 CD 71 88                             call    Draw3LineBar
 112+ 8959 3A 1B 9C     .Fuel:                  ld      a,(Fuel)
 113+ 895C CB 3F                                srl     a               ; divide by 4 to get range on screen
 114+ 895E 21 F2 9A                             ld      hl,FuelMapping
 115+ 8961 ED 31                                add     hl,a
 116+ 8963 7E                                   ld      a,(hl)
 117+ 8964 01 10 94                             ld      bc,FuelStart
 118+ 8967 57                                   ld      d,a
 119+ 8968 CD 95 88                             call    DrawColourCodedBar
 120+ 896B 3A D6 9A     .ForeShield:            ld      a,(ForeShield)
 121+ 896E CB 3F                                srl     a
 122+ 8970 CB 3F                                srl     a
 123+ 8972 CB 3F                                srl     a
 124+ 8974 01 10 84                             ld      bc,FShieldStart
 125+ 8977 CD 95 88                             call    DrawColourCodedBar
 126+ 897A 3A D7 9A     .AftShield:             ld      a,(AftShield)
 127+ 897D CB 3F                                srl     a
 128+ 897F CB 3F                                srl     a
 129+ 8981 CB 3F                                srl     a
 130+ 8983 01 10 8D                             ld      bc,AShieldStart
 131+ 8986 57                                   ld      d,a
 132+ 8987 CD 95 88                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 133+ 898A 3A D8 9A     .EnergyBars:            ld      a,(PlayerEnergy)
 134+ 898D CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 135+ 898F                                      CallIfALTNusng  31 + 1,.Draw1EnergyBar
 135+ 898F FE 20       >                        cp      31 + 1
 135+ 8991 DC CA 89    >                        call	c,.Draw1EnergyBar
 136+ 8994                                      CallIfALTNusng  (31*2) + 1,.Draw2EnergyBars
 136+ 8994 FE 3F       >                        cp      (31*2) + 1
 136+ 8996 DC D6 89    >                        call	c,.Draw2EnergyBars
 137+ 8999                                      CallIfALTNusng  (31*3) + 1,.Draw3EnergyBars
 137+ 8999 FE 5E       >                        cp      (31*3) + 1
 137+ 899B DC EE 89    >                        call	c,.Draw3EnergyBars
 138+ 899E 1E 18        .Draw4EnergyBars:       ld      e,24
 139+ 89A0 D6 60                                sub     (32*3)
 140+ 89A2 57                                   ld      d,a
 141+ 89A3 01 D5 A5                             ld      bc,EnergyBar4Start
 142+ 89A6 CD B3 88                             call    DrawColourEBar
 143+ 89A9 16 1F                                ld      d,31
 144+ 89AB 1E 18                                ld      e,24
 145+ 89AD 01 D5 AD                             ld      bc,EnergyBar3Start
 146+ 89B0 CD B3 88                             call    DrawColourEBar
 147+ 89B3 16 1F                                ld      d,31
 148+ 89B5 1E 18                                ld      e,24
 149+ 89B7 01 D5 B5                             ld      bc,EnergyBar2Start
 150+ 89BA CD B3 88                             call    DrawColourEBar
 151+ 89BD 16 1F                                ld      d,31
 152+ 89BF 1E 18                                ld      e,24
 153+ 89C1 01 D5 BD                             ld      bc,EnergyBar1Start
 154+ 89C4 CD B3 88                             call    DrawColourEBar
 155+ 89C7 C3 0F 8A                             jp      .DoneEnergyBars
 156+ 89CA 1E E0        .Draw1EnergyBar:        ld      e,224
 157+ 89CC 57                                   ld      d,a
 158+ 89CD 01 D5 BD                             ld      bc,EnergyBar1Start
 159+ 89D0 CD B3 88                             call    DrawColourEBar
 160+ 89D3 C3 0F 8A                             jp      .DoneEnergyBars
 161+ 89D6 1E D8        .Draw2EnergyBars:       ld      e,216
 162+ 89D8 D6 1F                                sub     31
 163+ 89DA 57                                   ld      d,a
 164+ 89DB 01 D5 B5                             ld      bc,EnergyBar2Start
 165+ 89DE CD B3 88                             call    DrawColourEBar
 166+ 89E1 16 1F                                ld      d,31
 167+ 89E3 1E D8                                ld      e,216
 168+ 89E5 01 D5 BD                             ld      bc,EnergyBar1Start
 169+ 89E8 CD B3 88                             call    DrawColourEBar
 170+ 89EB C3 0F 8A                             jp      .DoneEnergyBars
 171+ 89EE 1E 14        .Draw3EnergyBars:       ld      e,20
 172+ 89F0 D6 3E                                sub     31*2
 173+ 89F2 57                                   ld      d,a
 174+ 89F3 1E 14                                ld      e,20
 175+ 89F5 01 D5 AD                             ld      bc,EnergyBar3Start
 176+ 89F8 CD B3 88                             call    DrawColourEBar
 177+ 89FB 16 1F                                ld      d,31
 178+ 89FD 1E 14                                ld      e,20
 179+ 89FF 01 D5 B5                             ld      bc,EnergyBar2Start
 180+ 8A02 CD B3 88                             call    DrawColourEBar
 181+ 8A05 16 1F                                ld      d,31
 182+ 8A07 1E 14                                ld      e,20
 183+ 8A09 01 D5 BD                             ld      bc,EnergyBar1Start
 184+ 8A0C CD B3 88                             call    DrawColourEBar
 185+ 8A0F              .DoneEnergyBars:
 186+ 8A0F
 187+ 8A0F
 188+ 8A0F
 189+ 8A0F              ; NEED ENERGY BAR
 190+ 8A0F              ;PlayerEnergy
 191+ 8A0F              ; BNEED LASER temp
 192+ 8A0F              ; NEED CABIN TEMP
 193+ 8A0F              ;NEED ALTITUDE
 194+ 8A0F              ; Draw compas - if in range draw station, else do planet
 195+ 8A0F C9           .DoneConsole:           ret
 196+ 8A10
 197+ 8A10
 198+ 8A10
 199+ 8A10              ScannerBottom           equ 190
 200+ 8A10              ScannerTypeMissle       equ 2
 201+ 8A10              ScannerXRangeOffset     equ $35
 202+ 8A10              ScannerCenter           equ 127
 203+ 8A10
 204+ 8A10              ScannerDefault          equ 0
 205+ 8A10              ScannerMissile          equ 2
 206+ 8A10              ScannerStation          equ 4
 207+ 8A10              ScannerEnemy            equ 6
 208+ 8A10
 209+ 8A10
 210+ 8A10 00           SunXScaled              DB  0
 211+ 8A11 00           SunYScaled              DB  0
 212+ 8A12 00           SunZScaled              DB  0
 213+ 8A13
 214+ 8A13
 215+ 8A13 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 215+ 8A17 12 1F 80 E0
 216+ 8A1B C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 217+ 8A1D
 218+ 8A1D              GetShipColor:           MACRO
 219+ 8A1D ~                                    ld      a,(ShipTypeAddr)
 220+ 8A1D ~                                    sla     a                            ; as its byte pairs * 2
 221+ 8A1D ~                                    ld      hl,ScannerColourTable
 222+ 8A1D ~                                    add     hl,a
 223+ 8A1D ~                                    ld      a,(hl)
 224+ 8A1D                                      ENDM
 225+ 8A1D              GetShipColorBright:     MACRO
 226+ 8A1D ~                                    ld      a,(ShipTypeAddr)
 227+ 8A1D ~                                    sla     a                            ; as its byte pairs * 2
 228+ 8A1D ~                                    inc     a
 229+ 8A1D ~                                    ld      hl,ScannerColourTable
 230+ 8A1D ~                                    add     hl,a
 231+ 8A1D ~                                    ld      a,(hl)
 232+ 8A1D                                      ENDM
 233+ 8A1D
 234+ 8A1D              Shift24BitScan:         MACRO   regHi, reglo
 235+ 8A1D ~                                    ld      hl,(regHi)
 236+ 8A1D ~                                    ld      b,h
 237+ 8A1D ~                                    ld      a,h
 238+ 8A1D ~                                    and     SignMask8Bit
 239+ 8A1D ~                                    ld      h,a
 240+ 8A1D ~                                    ld      a,(reglo)
 241+ 8A1D ~                                    sla     a
 242+ 8A1D ~                                    rl      l
 243+ 8A1D ~                                    rl      h
 244+ 8A1D ~                                    sla     a
 245+ 8A1D ~                                    rl      l
 246+ 8A1D ~                                    rl      h
 247+ 8A1D ~                                    sla     a
 248+ 8A1D ~                                    rl      l
 249+ 8A1D ~                                    rl      h
 250+ 8A1D ~                                    sla     a
 251+ 8A1D ~                                    rl      l
 252+ 8A1D ~                                    rl      h
 253+ 8A1D ~                                    sla     a
 254+ 8A1D ~                                    rl      l
 255+ 8A1D ~                                    rl      h
 256+ 8A1D ~                                    sla     a
 257+ 8A1D ~                                    rl      l
 258+ 8A1D ~                                    rl      h
 259+ 8A1D                                      ENDM
 260+ 8A1D
 261+ 8A1D              SunShiftRight           MACRO   reglo, reghi, regsgn
 262+ 8A1D ~                                    ld      a,regsgn
 263+ 8A1D ~                                    srl     a
 264+ 8A1D ~                                    rr      reghi
 265+ 8A1D ~                                    rr      reglo
 266+ 8A1D ~                                    ld      regsgn,a
 267+ 8A1D                                      ENDM
 268+ 8A1D
 269+ 8A1D              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 270+ 8A1D              ;                        ld      a,(SBnKzsgn)
 271+ 8A1D              ;                        push    af
 272+ 8A1D              ;                        and     SignMask8Bit
 273+ 8A1D              ;                        ld      iyl,a
 274+ 8A1D              ;                        ld      hl,(SBnKxlo)
 275+ 8A1D              ;                        ld      a,(SBnKxsgn)
 276+ 8A1D              ;                        push    af
 277+ 8A1D              ;                        and     SignMask8Bit
 278+ 8A1D              ;                        ld      ixl,a
 279+ 8A1D              ;                        ld      bc,(SBnKylo)
 280+ 8A1D              ;                        ld      a,(SBnKysgn)
 281+ 8A1D              ;                        and     SignMask8Bit
 282+ 8A1D              ;                        push    af
 283+ 8A1D              ;                        ld      iyh,a
 284+ 8A1D              ;.ShiftLoop:             ld      a,iyh
 285+ 8A1D              ;                        or      iyl
 286+ 8A1D              ;                        or      ixl
 287+ 8A1D              ;                        jr      z,.ShiftBit15
 288+ 8A1D              ;.ShiftZ:                SunShiftRight iyl, d, e
 289+ 8A1D              ;.ShiftX:                SunShiftRight ixl, h, l
 290+ 8A1D              ;.ShiftY:                SunShiftRight ixh, b, c
 291+ 8A1D              ;                        jr      .ShipLoop
 292+ 8A1D              ;.ShiftBit15:            ld      a,iyh
 293+ 8A1D              ;                        or      iyl
 294+ 8A1D              ;                        or      ixl
 295+ 8A1D              ;                        jr      z,.CompletedShift
 296+ 8A1D              ;.ShiftZ:                SunShiftRight iyl, d, e
 297+ 8A1D              ;.ShiftX:                SunShiftRight ixl, h, l
 298+ 8A1D              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 299+ 8A1D              ;.CompletedShift:        pop     af                          ; get ysgn
 300+ 8A1D              ;                        and     SignOnly8Bit
 301+ 8A1D              ;                        or      b
 302+ 8A1D              ;                        ld      b,a
 303+ 8A1D              ;                        pop     af                          ; get xsgn
 304+ 8A1D              ;                        and     SignOnly8Bit
 305+ 8A1D              ;                        or      h
 306+ 8A1D              ;                        ld      h,a
 307+ 8A1D              ;                        pop     af                          ; get zsgn
 308+ 8A1D              ;                        and     SignOnly8Bit
 309+ 8A1D              ;                        or      d
 310+ 8A1D              ;                        ld      d,a
 311+ 8A1D              ;                        ret
 312+ 8A1D              ;
 313+ 8A1D ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 314+ 8A21 7A                                   ld      a,d                         ; .
 315+ 8A22 F5                                   push    af                          ; .
 316+ 8A23 E6 7F                                and     SignMask8Bit                ; .
 317+ 8A25 57                                   ld      d,a                         ; .
 318+ 8A26 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 319+ 8A29 7C                                   ld      a,h                         ; .
 320+ 8A2A F5                                   push    af                          ; .
 321+ 8A2B E6 7F                                and     SignMask8Bit                ; .
 322+ 8A2D 67                                   ld      h,a                         ; .
 323+ 8A2E ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 324+ 8A32 78                                   ld      a,b                         ; .
 325+ 8A33 F5                                   push    af                          ; .
 326+ 8A34 E6 7F                                and     SignMask8Bit                ; .
 327+ 8A36 47                                   ld      b,a                         ; .
 328+ 8A37 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 329+ 8A38 B2                                   or      d                           ; .
 330+ 8A39 B4                                   or      h                           ; .
 331+ 8A3A 28 0E                                jr      z,.Shifted                  ; .
 332+ 8A3C                                      ShiftBCRight1                       ; .
 332+ 8A3C CB 38       >			   srl b
 332+ 8A3E CB 19       >			   rr  c
 333+ 8A40                                      ShiftHLRight1                       ; .
 333+ 8A40 CB 3C       >			   srl h
 333+ 8A42 CB 1D       >			   rr  l
 334+ 8A44                                      ShiftDERight1                       ; .
 334+ 8A44 CB 3A       >			   srl d
 334+ 8A46 CB 1B       >			   rr  e
 335+ 8A48 18 ED                                jr      .ShiftLoop
 336+ 8A4A 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 337+ 8A4B B5                                   or      l                           ;
 338+ 8A4C B2                                   or      d                           ;
 339+ 8A4D E6 80                                and     $80                         ;
 340+ 8A4F 28 0C                                jr      z,.NoAdditionalShift        ;
 341+ 8A51                                      ShiftBCRight1                       ; we want 7 bit
 341+ 8A51 CB 38       >			   srl b
 341+ 8A53 CB 19       >			   rr  c
 342+ 8A55                                      ShiftHLRight1                       ; to acommodate the sign
 342+ 8A55 CB 3C       >			   srl h
 342+ 8A57 CB 1D       >			   rr  l
 343+ 8A59                                      ShiftDERight1                       ; .
 343+ 8A59 CB 3A       >			   srl d
 343+ 8A5B CB 1B       >			   rr  e
 344+ 8A5D F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 345+ 8A5E E6 80                                and     SignOnly8Bit                ;
 346+ 8A60 47                                   ld      b,a                         ; bc = shifted signed Y
 347+ 8A61 F1                                   pop     af                          ; get xsgn
 348+ 8A62 E6 80                                and     SignOnly8Bit                ;
 349+ 8A64 67                                   ld      h,a                         ; hl = shifted signed X
 350+ 8A65 F1                                   pop     af                          ; get zsgn
 351+ 8A66 E6 80                                and     SignOnly8Bit                ;
 352+ 8A68 57                                   ld      d,a                         ; de = shifted signed Z
 353+ 8A69 C9                                   ret
 354+ 8A6A
 355+ 8A6A
 356+ 8A6A
 357+ 8A6A              UpdateCompassSun:       MMUSelectSun
 357+ 8A6A ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 358+ 8A6E CD 1D 8A                             call    ScaleSunPos                 ; get as 7 bit signed
 359+ 8A71 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 360+ 8A75 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 361+ 8A76 59                                   ld      e,c                         ; .
 362+ 8A77 ED 30                                mul                                 ; .
 363+ 8A79 42 4B                                ld      bc,de                       ; .
 364+ 8A7B 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 365+ 8A7C 5D                                   ld      e,l                         ; .
 366+ 8A7D ED 30                                mul                                 ; .
 367+ 8A7F EB                                   ex      de,hl                       ; .
 368+ 8A80 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 369+ 8A81 53                                   ld      d,e                         ; de = z ^
 370+ 8A82 ED 30                                mul                                 ; .
 371+ 8A84 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 372+ 8A85 09                                   add     hl,bc
 373+ 8A86 EB                                   ex      de,hl
 374+ 8A87 CD 13 A9                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 375+ 8A8A                                      ; if h <> 0 then more difficult
 376+ 8A8A 55                                   ld      d,l                         ; iyl = q
 377+ 8A8B FD 6A                                ld      iyl,d                       ; .
 378+ 8A8D E1           .NormaliseX:            pop     hl                          ; hl x scaled
 379+ 8A8E 7C                                   ld      a,h                         ; c = sign
 380+ 8A8F E6 80                                and     SignOnly8Bit                ; .
 381+ 8A91 4F                                   ld      c,a                         ; .
 382+ 8A92 C5                                   push    bc                          ; save sign to stack
 383+ 8A93 7D                                   ld      a,l                         ; a = 8 bit abs z
 384+ 8A94 CD 18 AE                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 385+ 8A97 5F                                   ld      e,a                         ; .
 386+ 8A98                                      EDiv10Inline                        ; a = e / 10
 386+ 8A98 16 00       >                        ld      d,0
 386+ 8A9A 62 6B       >                        ld      hl,de
 386+ 8A9C 29          >                        add     hl,hl
 386+ 8A9D 19          >                        add     hl,de
 386+ 8A9E 29          >                        add     hl,hl
 386+ 8A9F 29          >                        add     hl,hl
 386+ 8AA0 19          >                        add     hl,de
 386+ 8AA1 29          >                        add     hl,hl
 387+ 8AA2 7C                                   ld      a,h                         ; .
 388+ 8AA3 C1                                   pop     bc                          ; retrieve sign
 389+ 8AA4 FE 00                                cp      0
 390+ 8AA6 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 391+ 8AA8 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 392+ 8AAA 28 02                                jr      z,.DoneNormX
 393+ 8AAC ED 44                                neg
 394+ 8AAE DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 395+ 8AB0 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 396+ 8AB2 E1                                   pop     hl                          ; hl z scaled
 397+ 8AB3 7C                                   ld      a,h                         ; c = sign
 398+ 8AB4 E6 80                                and     SignOnly8Bit                ; .
 399+ 8AB6 4F                                   ld      c,a                         ; .
 400+ 8AB7 C5                                   push    bc                          ; save sign to stack
 401+ 8AB8 7D                                   ld      a,l                         ; e = a /q * 96
 402+ 8AB9 CD 18 AE                             call    AequAdivQmul96ABS              ; .
 403+ 8ABC 5F                                   ld      e,a                         ; a = e / 10
 404+ 8ABD                                      EDiv10Inline                        ; .
 404+ 8ABD 16 00       >                        ld      d,0
 404+ 8ABF 62 6B       >                        ld      hl,de
 404+ 8AC1 29          >                        add     hl,hl
 404+ 8AC2 19          >                        add     hl,de
 404+ 8AC3 29          >                        add     hl,hl
 404+ 8AC4 29          >                        add     hl,hl
 404+ 8AC5 19          >                        add     hl,de
 404+ 8AC6 29          >                        add     hl,hl
 405+ 8AC7 7C                                   ld      a,h                         ; retrieve sign
 406+ 8AC8 C1                                   pop     bc                          ; retrieve sign
 407+ 8AC9 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 408+ 8ACB 28 02                                jr      z,.DoneNormZ
 409+ 8ACD ED 44                                neg
 410+ 8ACF DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 411+ 8AD1 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 412+ 8AD3 E1                                   pop     hl                          ; hl y scaled
 413+ 8AD4 7C                                   ld      a,h                         ; c = sign
 414+ 8AD5 E6 80                                and     SignOnly8Bit                ; .
 415+ 8AD7 4F                                   ld      c,a                         ; .
 416+ 8AD8 C5                                   push    bc                          ; save sign to stack
 417+ 8AD9 7D                                   ld      a,l                         ; a = 8 bit signed z
 418+ 8ADA CD 18 AE                             call    AequAdivQmul96ABS              ; .
 419+ 8ADD 5F                                   ld      e,a                         ; a = e / 10
 420+ 8ADE                                      EDiv10Inline                        ; .
 420+ 8ADE 16 00       >                        ld      d,0
 420+ 8AE0 62 6B       >                        ld      hl,de
 420+ 8AE2 29          >                        add     hl,hl
 420+ 8AE3 19          >                        add     hl,de
 420+ 8AE4 29          >                        add     hl,hl
 420+ 8AE5 29          >                        add     hl,hl
 420+ 8AE6 19          >                        add     hl,de
 420+ 8AE7 29          >                        add     hl,hl
 421+ 8AE8 7C                                   ld      a,h                         ; retrieve sign
 422+ 8AE9 C1                                   pop     bc                          ; retrieve sign
 423+ 8AEA FE 00                                cp      0
 424+ 8AEC 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 425+ 8AEE CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 426+ 8AF0 28 02                                jr      z,.DoneNormY
 427+ 8AF2 ED 44                                neg
 428+ 8AF4 47           .DoneNormY:             ld      b,a                       ; .
 429+ 8AF5 DD 4C                                ld      c,ixh
 430+ 8AF7              .SetSprite:             MMUSelectSpriteBank
 430+ 8AF7 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 431+ 8AFB CD 02 E1                             call    compass_sun_move
 432+ 8AFE DD 7D                                ld      a,ixl
 433+ 8B00 CB 7F                                bit     7,a
 434+ 8B02 20 04                                jr      nz,.SunBehind
 435+ 8B04 CD 96 E1     .SunInfront:            call    show_compass_sun_infront
 436+ 8B07 C9                                   ret
 437+ 8B08 CD A1 E1     .SunBehind:             call    show_compass_sun_behind
 438+ 8B0B C9                                   ret
 439+ 8B0C
 440+ 8B0C              UpdateCompassStation:   MMUSelectShipBankN 0
 440+ 8B0C ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 441+ 8B10
 442+ 8B10 CD 1D 8A                             call    ScaleSunPos                 ; get as 7 bit signed
 443+ 8B13 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 444+ 8B17 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 445+ 8B18 59                                   ld      e,c                         ; .
 446+ 8B19 ED 30                                mul                                 ; .
 447+ 8B1B 42 4B                                ld      bc,de                       ; .
 448+ 8B1D 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 449+ 8B1E 5D                                   ld      e,l                         ; .
 450+ 8B1F ED 30                                mul                                 ; .
 451+ 8B21 EB                                   ex      de,hl                       ; .
 452+ 8B22 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 453+ 8B23 53                                   ld      d,e                         ; de = z ^
 454+ 8B24 ED 30                                mul                                 ; .
 455+ 8B26 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 456+ 8B27 09                                   add     hl,bc
 457+ 8B28 EB                                   ex      de,hl
 458+ 8B29 CD 13 A9                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 459+ 8B2C                                      ; if h <> 0 then more difficult
 460+ 8B2C 55                                   ld      d,l                         ; iyl = q
 461+ 8B2D FD 6A                                ld      iyl,d                       ; .
 462+ 8B2F E1           .NormaliseX:            pop     hl                          ; hl x scaled
 463+ 8B30 7C                                   ld      a,h                         ; c = sign
 464+ 8B31 E6 80                                and     SignOnly8Bit                ; .
 465+ 8B33 4F                                   ld      c,a                         ; .
 466+ 8B34 C5                                   push    bc                          ; save sign to stack
 467+ 8B35 7D                                   ld      a,l                         ; a = 8 bit abs z
 468+ 8B36 CD 18 AE                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 469+ 8B39 5F                                   ld      e,a                         ; .
 470+ 8B3A                                      EDiv10Inline                        ; a = e / 10
 470+ 8B3A 16 00       >                        ld      d,0
 470+ 8B3C 62 6B       >                        ld      hl,de
 470+ 8B3E 29          >                        add     hl,hl
 470+ 8B3F 19          >                        add     hl,de
 470+ 8B40 29          >                        add     hl,hl
 470+ 8B41 29          >                        add     hl,hl
 470+ 8B42 19          >                        add     hl,de
 470+ 8B43 29          >                        add     hl,hl
 471+ 8B44 7C                                   ld      a,h                         ; .
 472+ 8B45 C1                                   pop     bc                          ; retrieve sign
 473+ 8B46 FE 00                                cp      0
 474+ 8B48 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 475+ 8B4A CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 476+ 8B4C 28 02                                jr      z,.DoneNormX
 477+ 8B4E ED 44                                neg
 478+ 8B50 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 479+ 8B52 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 480+ 8B54 E1                                   pop     hl                          ; hl z scaled
 481+ 8B55 7C                                   ld      a,h                         ; c = sign
 482+ 8B56 E6 80                                and     SignOnly8Bit                ; .
 483+ 8B58 4F                                   ld      c,a                         ; .
 484+ 8B59 C5                                   push    bc                          ; save sign to stack
 485+ 8B5A 7D                                   ld      a,l                         ; e = a /q * 96
 486+ 8B5B CD 18 AE                             call    AequAdivQmul96ABS              ; .
 487+ 8B5E 5F                                   ld      e,a                         ; a = e / 10
 488+ 8B5F                                      EDiv10Inline                        ; .
 488+ 8B5F 16 00       >                        ld      d,0
 488+ 8B61 62 6B       >                        ld      hl,de
 488+ 8B63 29          >                        add     hl,hl
 488+ 8B64 19          >                        add     hl,de
 488+ 8B65 29          >                        add     hl,hl
 488+ 8B66 29          >                        add     hl,hl
 488+ 8B67 19          >                        add     hl,de
 488+ 8B68 29          >                        add     hl,hl
 489+ 8B69 7C                                   ld      a,h                         ; retrieve sign
 490+ 8B6A C1                                   pop     bc                          ; retrieve sign
 491+ 8B6B CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 492+ 8B6D 28 02                                jr      z,.DoneNormZ
 493+ 8B6F ED 44                                neg
 494+ 8B71 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 495+ 8B73 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 496+ 8B75 E1                                   pop     hl                          ; hl y scaled
 497+ 8B76 7C                                   ld      a,h                         ; c = sign
 498+ 8B77 E6 80                                and     SignOnly8Bit                ; .
 499+ 8B79 4F                                   ld      c,a                         ; .
 500+ 8B7A C5                                   push    bc                          ; save sign to stack
 501+ 8B7B 7D                                   ld      a,l                         ; a = 8 bit signed z
 502+ 8B7C CD 18 AE                             call    AequAdivQmul96ABS              ; .
 503+ 8B7F 5F                                   ld      e,a                         ; a = e / 10
 504+ 8B80                                      EDiv10Inline                        ; .
 504+ 8B80 16 00       >                        ld      d,0
 504+ 8B82 62 6B       >                        ld      hl,de
 504+ 8B84 29          >                        add     hl,hl
 504+ 8B85 19          >                        add     hl,de
 504+ 8B86 29          >                        add     hl,hl
 504+ 8B87 29          >                        add     hl,hl
 504+ 8B88 19          >                        add     hl,de
 504+ 8B89 29          >                        add     hl,hl
 505+ 8B8A 7C                                   ld      a,h                         ; retrieve sign
 506+ 8B8B C1                                   pop     bc                          ; retrieve sign
 507+ 8B8C FE 00                                cp      0
 508+ 8B8E 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 509+ 8B90 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 510+ 8B92 28 02                                jr      z,.DoneNormY
 511+ 8B94 ED 44                                neg
 512+ 8B96 47           .DoneNormY:             ld      b,a                       ; .
 513+ 8B97 DD 4C                                ld      c,ixh
 514+ 8B99              .SetSprite:             MMUSelectSpriteBank
 514+ 8B99 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 515+ 8B9D CD 02 E1                             call    compass_sun_move
 516+ 8BA0 DD 7D                                ld      a,ixl
 517+ 8BA2 CB 7F                                bit     7,a
 518+ 8BA4 20 04                                jr      nz,.SunBehind
 519+ 8BA6 CD 96 E1     .SunInfront:            call    show_compass_sun_infront
 520+ 8BA9 C9                                   ret
 521+ 8BAA CD A1 E1     .SunBehind:             call    show_compass_sun_behind
 522+ 8BAD C9                                   ret
 523+ 8BAE
 524+ 8BAE
 525+ 8BAE              UpdateScannerSun:       MMUSelectSun
 525+ 8BAE ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 526+ 8BB2                                      Shift24BitScan  SBnKyhi, SBnKylo
 526+ 8BB2 2A 14 C0    >                        ld      hl,(SBnKyhi)
 526+ 8BB5 44          >                        ld      b,h
 526+ 8BB6 7C          >                        ld      a,h
 526+ 8BB7 E6 7F       >                        and     SignMask8Bit
 526+ 8BB9 67          >                        ld      h,a
 526+ 8BBA 3A 13 C0    >                        ld      a,(SBnKylo)
 526+ 8BBD CB 27       >                        sla     a
 526+ 8BBF CB 15       >                        rl      l
 526+ 8BC1 CB 14       >                        rl      h
 526+ 8BC3 CB 27       >                        sla     a
 526+ 8BC5 CB 15       >                        rl      l
 526+ 8BC7 CB 14       >                        rl      h
 526+ 8BC9 CB 27       >                        sla     a
 526+ 8BCB CB 15       >                        rl      l
 526+ 8BCD CB 14       >                        rl      h
 526+ 8BCF CB 27       >                        sla     a
 526+ 8BD1 CB 15       >                        rl      l
 526+ 8BD3 CB 14       >                        rl      h
 526+ 8BD5 CB 27       >                        sla     a
 526+ 8BD7 CB 15       >                        rl      l
 526+ 8BD9 CB 14       >                        rl      h
 526+ 8BDB CB 27       >                        sla     a
 526+ 8BDD CB 15       >                        rl      l
 526+ 8BDF CB 14       >                        rl      h
 527+ 8BE1 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 528+ 8BE4 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 529+ 8BE7 B6                                   or      (hl)                        ; then its too far away
 530+ 8BE8 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 531+ 8BEB B6                                   or      (hl)                        ; so rely on the compass
 532+ 8BEC E6 7F                                and     SignMask8Bit                ;
 533+ 8BEE C0                                   ret     nz                          ;
 534+ 8BEF 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 535+ 8BF2 ED 5B 10 C0                          ld      de,(SBnKxlo)
 536+ 8BF6 ED 4B 13 C0                          ld      bc,(SBnKylo)
 537+ 8BFA 7C                                   ld      a,h
 538+ 8BFB B2                                   or      d
 539+ 8BFC B0                                   or      b
 540+ 8BFD E6 C0                                and     %11000000
 541+ 8BFF C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 542+ 8C00 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 543+ 8C03 CB 7F                                bit     7,a
 544+ 8C05 28 04                                jr      z,.absXHi
 545+ 8C07                                      NegD
 545+ 8C07 7A          >                    ld      a,d
 545+ 8C08 ED 44       >                    neg
 545+ 8C0A 57          >                    ld      d,a
 546+ 8C0B 7A           .absXHi:                ld      a,d
 547+ 8C0C C6 80                                add     ScannerX
 548+ 8C0E DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 549+ 8C10 CB 3C        .ProcessZCoord:         srl     h
 550+ 8C12 CB 3C                                srl     h
 551+ 8C14 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 552+ 8C17 CB 7F                                bit     7,a
 553+ 8C19 28 04                                jr      z,.absZHi
 554+ 8C1B                                      NegH
 554+ 8C1B 7C          >                    ld      a,h
 554+ 8C1C ED 44       >                    neg
 554+ 8C1E 67          >                    ld      h,a
 555+ 8C1F 3E AB        .absZHi:                ld      a,ScannerY
 556+ 8C21 94                                   sub     h
 557+ 8C22 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 558+ 8C24 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 559+ 8C26 20 0B                                jr      nz,.StickHasLength
 560+ 8C28 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 561+ 8C2A FD 6F                                ld      iyl,a
 562+ 8C2C                                      MMUSelectLayer2
 562+ 8C2C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 563+ 8C30 C3 5B 8C                             jp      .NoStick
 564+ 8C33 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 565+ 8C36 CB 7F                                bit     7,a
 566+ 8C38 28 04                                jr      z,.absYHi
 567+ 8C3A                                      NegB
 567+ 8C3A 78          >                    ld      a,b
 567+ 8C3B ED 44       >                    neg
 567+ 8C3D 47          >                    ld      b,a
 568+ 8C3E FD 7C        .absYHi:                ld      a,iyh
 569+ 8C40 90           .SetStickPos:           sub     b
 570+ 8C41                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 570+ 8C41 FE BE       >                        cp      ScannerBottom
 570+ 8C43 DA 48 8C    >                        jp		c, .StickOnScreen
 571+ 8C46 3E BE                                ld      a,ScannerBottom
 572+ 8C48 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 573+ 8C4A DD 6F                                ld      ixl,a
 574+ 8C4C FD 44                                ld      b,iyh                       ; from row
 575+ 8C4E DD 4C                                ld      c,ixh                       ; from col
 576+ 8C50 FD 55                                ld      d,iyl                       ; to row
 577+ 8C52 1E B4                                ld      e,L2SunScanner
 578+ 8C54                                      MMUSelectLayer2
 578+ 8C54 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 579+ 8C58 CD 0B E3                             call    l2_draw_vert_line_to
 580+ 8C5B FD 45        .NoStick:               ld      b,iyl                       ; row
 581+ 8C5D DD 4C                                ld      c,ixh                       ; col
 582+ 8C5F 3E FC                                ld      a,L2SunScannerBright
 583+ 8C61 CD FF E0                             call    l2_plot_pixel
 584+ 8C64 FD 45                                ld      b,iyl
 585+ 8C66 DD 4C                                ld      c,ixh
 586+ 8C68 0C                                   inc     c
 587+ 8C69 3E FC                                ld      a,L2SunScannerBright
 588+ 8C6B CD FF E0                             call    l2_plot_pixel
 589+ 8C6E C9                                   ret
 590+ 8C6F
 591+ 8C6F              ; This will do a planet update if we are not in space station range
 592+ 8C6F              UpdateScannerPlanet:
 593+ 8C6F
 594+ 8C6F              ; As the space station is always ship 0 then we can just use the scanner
 595+ 8C6F
 596+ 8C6F              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 597+ 8C6F 3A 23 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 598+ 8C72 CB 67                                bit     4,a                         ; .
 599+ 8C74                                      ;DEBUG ret     z                           ; .
 600+ 8C74 3A 21 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 601+ 8C77 CB 7F                                bit     7,a
 602+ 8C79 C0                                   ret     nz
 603+ 8C7A              ; DEBUG Add in station types later
 604+ 8C7A 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 605+ 8C7D ED 5B 0C C0                          ld      de,(UBnKxlo)
 606+ 8C81 ED 4B 0F C0                          ld      bc,(UBnKylo)
 607+ 8C85 7C                                   ld      a,h
 608+ 8C86 B2                                   or      d
 609+ 8C87 B0                                   or      b
 610+ 8C88 E6 C0                                and     %11000000
 611+ 8C8A C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 612+ 8C8B 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 613+ 8C8E CB 7F                                bit     7,a
 614+ 8C90 28 04                                jr      z,.absXHi
 615+ 8C92                                      NegD
 615+ 8C92 7A          >                    ld      a,d
 615+ 8C93 ED 44       >                    neg
 615+ 8C95 57          >                    ld      d,a
 616+ 8C96 7A           .absXHi:                ld      a,d
 617+ 8C97 C6 80                                add     ScannerX
 618+ 8C99 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 619+ 8C9B CB 3C        .ProcessZCoord:         srl     h
 620+ 8C9D CB 3C                                srl     h
 621+ 8C9F 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 622+ 8CA2 CB 7F                                bit     7,a
 623+ 8CA4 28 04                                jr      z,.absZHi
 624+ 8CA6                                      NegH
 624+ 8CA6 7C          >                    ld      a,h
 624+ 8CA7 ED 44       >                    neg
 624+ 8CA9 67          >                    ld      h,a
 625+ 8CAA 3E AB        .absZHi:                ld      a,ScannerY
 626+ 8CAC 94                                   sub     h
 627+ 8CAD FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 628+ 8CAF CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 629+ 8CB1 20 19                                jr      nz,.StickHasLength
 630+ 8CB3 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 631+ 8CB5 FD 6F                                ld      iyl,a
 632+ 8CB7 DD 7D                                ld      a,ixl
 633+ 8CB9                                      GetShipColorBright
 633+ 8CB9 3A 21 C3    >                        ld      a,(ShipTypeAddr)
 633+ 8CBC CB 27       >                        sla     a                            ; as its byte pairs * 2
 633+ 8CBE 3C          >                        inc     a
 633+ 8CBF 21 13 8A    >                        ld      hl,ScannerColourTable
 633+ 8CC2 ED 31       >                        add     hl,a
 633+ 8CC4 7E          >                        ld      a,(hl)
 634+ 8CC5                                      MMUSelectLayer2
 634+ 8CC5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 635+ 8CC9 C3 03 8D                             jp      .NoStick
 636+ 8CCC 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 637+ 8CCF CB 7F                                bit     7,a
 638+ 8CD1 28 04                                jr      z,.absYHi
 639+ 8CD3                                      NegB
 639+ 8CD3 78          >                    ld      a,b
 639+ 8CD4 ED 44       >                    neg
 639+ 8CD6 47          >                    ld      b,a
 640+ 8CD7 FD 7C        .absYHi:                ld      a,iyh
 641+ 8CD9 90           .SetStickPos:           sub     b
 642+ 8CDA                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 642+ 8CDA FE BE       >                        cp      ScannerBottom
 642+ 8CDC DA E1 8C    >                        jp		c, .StickOnScreen
 643+ 8CDF 3E BE                                ld      a,ScannerBottom
 644+ 8CE1 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 645+ 8CE3                                      GetShipColor
 645+ 8CE3 3A 21 C3    >                        ld      a,(ShipTypeAddr)
 645+ 8CE6 CB 27       >                        sla     a                            ; as its byte pairs * 2
 645+ 8CE8 21 13 8A    >                        ld      hl,ScannerColourTable
 645+ 8CEB ED 31       >                        add     hl,a
 645+ 8CED 7E          >                        ld      a,(hl)
 646+ 8CEE DD 6F                                ld      ixl,a
 647+ 8CF0 FD 44                                ld      b,iyh                       ; from row
 648+ 8CF2 DD 4C                                ld      c,ixh                       ; from col
 649+ 8CF4 FD 55                                ld      d,iyl                       ; to row
 650+ 8CF6 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 651+ 8CF8 E5                                   push    hl
 652+ 8CF9                                      MMUSelectLayer2
 652+ 8CF9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 653+ 8CFD CD 0B E3                             call    l2_draw_vert_line_to
 654+ 8D00 E1                                   pop     hl
 655+ 8D01 23                                   inc     hl
 656+ 8D02 7E                                   ld      a,(hl)
 657+ 8D03 FD 45        .NoStick:               ld      b,iyl                       ; row
 658+ 8D05 DD 4C                                ld      c,ixh                       ; col
 659+ 8D07 F5                                   push    af
 660+ 8D08 CD FF E0                             call    l2_plot_pixel
 661+ 8D0B F1                                   pop     af
 662+ 8D0C FD 45                                ld      b,iyl
 663+ 8D0E DD 4C                                ld      c,ixh
 664+ 8D10 0C                                   inc     c
 665+ 8D11 CD FF E0                             call    l2_plot_pixel
 666+ 8D14 C9                                   ret
 667+ 8D15
 668+ 8D15
# file closed: ./Views/ConsoleDrawing.asm
 928  8D15                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 8D15
   2+ 8D15
   3+ 8D15              ResetMessageQueue:      ZeroA
   3+ 8D15 AF          >                        xor a
   4+ 8D16 32 FF 96                             ld      (MessageCount),a
   5+ 8D19 32 00 97                             ld      (MessageCurrent),a
   6+ 8D1C 21 03 97                             ld      hl,MessageQueue
   7+ 8D1F 11 01 97                             ld      de,MessageIndex
   8+ 8D22 06 05                                ld      b,5
   9+ 8D24 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 8D25 12                                   ld      (de),a                              ;
  11+ 8D26 13                                   inc     de                                  ;
  12+ 8D27 7C                                   ld      a,h                                 ;
  13+ 8D28 12                                   ld      (de),a                              ;
  14+ 8D29 13                                   inc     de                                  ;
  15+ 8D2A 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 8D2C ED 31                                add     hl,a                                ;
  17+ 8D2E 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 8D30 21 03 97     .ClearText:             ld      hl,MessageQueue
  19+ 8D33 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 8D36 3E 00                                ld      a,0
  21+ 8D38 CD 9F 93                             call	memfill_dma
  22+ 8D3B C9                                   ret
  23+ 8D3C
  24+ 8D3C              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 8D3C              ;                                       IYH = timer for message
  26+ 8D3C 3A FF 96     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 8D3F                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 8D3F FE 05       >                        cp    MAXMESSAGES
  27+ 8D41 D0          >                        ret	 nc
  28+ 8D42 3C                                   inc     a
  29+ 8D43 32 FF 96                             ld      (MessageCount),a                    ; get ready for next message
  30+ 8D46 4F           .AddMessage:            ld      c,a
  31+ 8D47 3A 00 97                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 8D4A 81                                   add     c                                   ;
  33+ 8D4B                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 8D4B FE 05       >                        cp      MAXMESSAGES
  33+ 8D4D DA 52 8D    >                        jp		c, .ReadyToAdd
  34+ 8D50 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 8D52 21 A8 97     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 8D55 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 8D57 4F                                   ld      c,a                                 ;
  38+ 8D58 FD 7C                                ld      a,iyh                               ;
  39+ 8D5A 77                                   ld      (hl),a                              ;
  40+ 8D5B 79                                   ld      a,c                                 ; get back index
  41+ 8D5C 21 01 97                             ld      hl,MessageIndex
  42+ 8D5F                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 8D5F CB 27       >                    sla         a
  42+ 8D61 ED 31       >                    add         hl,a
  42+ 8D63 7E          >                    ld          a,(hl)
  42+ 8D64 23          >                    inc         hl
  42+ 8D65 66          >                    ld          h,(hl)
  42+ 8D66 6F          >                    ld          l,a
  43+ 8D67 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 8D68                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 8D68 7E          >.CopyLoop:              ld      a,(hl)
  44+ 8D69 12          >                        ld      (de),a
  44+ 8D6A FE 00       >                        cp      0
  44+ 8D6C C8          >                        ret     z
  44+ 8D6D 23          >                        inc     hl
  44+ 8D6E 13          >                        inc     de
  44+ 8D6F 18 F7       >                        jr      .CopyLoop
  45+ 8D71 C9                                   ret
  46+ 8D72
  47+ 8D72 3A 00 97     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 8D75 21 A8 97                             ld      hl,MessageTimeout
  49+ 8D78 ED 31                                add     hl,a
  50+ 8D7A 7E                                   ld      a,(hl)
  51+ 8D7B 3D                                   dec     a
  52+ 8D7C 28 02                                jr      z,.UpdateQueue
  53+ 8D7E 77           .UpdateTimer            ld      (hl),a
  54+ 8D7F C9                                   ret
  55+ 8D80 77           .UpdateQueue:           ld      (hl),a
  56+ 8D81 21 FF 96                             ld      hl,MessageCount
  57+ 8D84 35                                   dec     (hl)
  58+ 8D85 3A 00 97                             ld      a,(MessageCurrent)
  59+ 8D88 23                                   inc     hl
  60+ 8D89                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 8D89 FE 05       >                        cp      MAXMESSAGES
  60+ 8D8B DA 8F 8D    >                        jp		c, .ReadyToUpdate
  61+ 8D8E              .CircularQueue:         ZeroA
  61+ 8D8E AF          >                        xor a
  62+ 8D8F 32 00 97     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 8D92 C9                                   ret
  64+ 8D93
  65+ 8D93 3A FF 96     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 8D96                                      ReturnIfAIsZero
  66+ 8D96 A7          >                        and     a
  66+ 8D97 C8          >                        ret     z
  67+ 8D98 3A 00 97                             ld      a,(MessageCurrent)
  68+ 8D9B 21 01 97                             ld      hl,MessageIndex
  69+ 8D9E                                      HLEquAddrAtHLPlusA
  69+ 8D9E CB 27       >                    sla         a
  69+ 8DA0 ED 31       >                    add         hl,a
  69+ 8DA2 7E          >                    ld          a,(hl)
  69+ 8DA3 23          >                    inc         hl
  69+ 8DA4 66          >                    ld          h,(hl)
  69+ 8DA5 6F          >                    ld          l,a
  70+ 8DA6                                      MMUSelectLayer1
  70+ 8DA6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 8DAA 11 01 00                             ld      de,MESSAGELINE
  72+ 8DAD CD 15 E1                             call    l1_print_at_wrap
  73+ 8DB0 C9                                   ret
  74+ 8DB1
  75+ 8DB1              HyperSpaceMessage:      MMUSelectLayer1
  75+ 8DB1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 8DB5 11 49 84     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 8DB8 21 DF A4                             ld      hl,name_expanded
  78+ 8DBB                                      ldCopyTextAtHLtoDE
  78+ 8DBB 7E          >.CopyLoop:              ld      a,(hl)
  78+ 8DBC 12          >                        ld      (de),a
  78+ 8DBD FE 00       >                        cp      0
  78+ 8DBF C8          >                        ret     z
  78+ 8DC0 23          >                        inc     hl
  78+ 8DC1 13          >                        inc     de
  78+ 8DC2 18 F7       >                        jr      .CopyLoop
  79+ 8DC4 AF           .DoneName:              xor     a
  80+ 8DC5 12                                   ld      (de),a
  81+ 8DC6 32 65 84                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 8DC9 21 46 84     .CentreJustify:         ld      hl,Hyp_message
  83+ 8DCC                                      HalfLengthHL
  83+ 8DCC 06 00       >                        ld      b,0
  83+ 8DCE 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 8DCF FE 00       >                        cp      0
  83+ 8DD1 28 04       >                        jr      z,.DoneCount
  83+ 8DD3 04          >                        inc     b
  83+ 8DD4 23          >                        inc     hl
  83+ 8DD5 18 F7       >                        jr      .CountLenLoop
  83+ 8DD7 3E 20       >.DoneCount:             ld      a,32
  83+ 8DD9 90          >                        sub     b
  83+ 8DDA CB 2F       >                        sra     a
  84+ 8DDC 21 80 84                             ld      hl,Hyp_centeredTarget
  85+ 8DDF                                      ldClearTextLoop 32
  85+ 8DDF 47          >                        ld      b,a
  85+ 8DE0 3E 20       >                        ld      a,32
  85+ 8DE2 77          >.ClearLoop:             ld      (hl),a
  85+ 8DE3 23          >                        inc     hl
  85+ 8DE4 10 FC       >                        djnz    .ClearLoop
  86+ 8DE6 EB                                   ex      de,hl
  87+ 8DE7 21 46 84                             ld      hl,Hyp_message
  88+ 8DEA                                      ldCopyTextAtHLtoDE
  88+ 8DEA 7E          >.CopyLoop:              ld      a,(hl)
  88+ 8DEB 12          >                        ld      (de),a
  88+ 8DEC FE 00       >                        cp      0
  88+ 8DEE C8          >                        ret     z
  88+ 8DEF 23          >                        inc     hl
  88+ 8DF0 13          >                        inc     de
  88+ 8DF1 18 F7       >                        jr      .CopyLoop
  89+ 8DF3                                      ZeroA
  89+ 8DF3 AF          >                        xor a
  90+ 8DF4 32 A0 84                             ld      (Hyp_centeredEol),a
  91+ 8DF7 21 7C 84                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 8DFA 3E 20                                ld      a,32                     ; clear counter digits
  93+ 8DFC 77                                   ld      (hl),a                   ; clear counter digits
  94+ 8DFD 23                                   inc     hl                       ; clear counter digits
  95+ 8DFE 77                                   ld      (hl),a                   ; clear counter digits
  96+ 8DFF 23                                   inc     hl                       ; clear counter digits
  97+ 8E00 77                                   ld      (hl),a                   ; clear counter digits
  98+ 8E01 CD 22 84                             call    UpdateCountdownNumber
  99+ 8E04 21 73 84                             ld      hl,Hyp_charging
 100+ 8E07                                      HalfLengthHL
 100+ 8E07 06 00       >                        ld      b,0
 100+ 8E09 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 8E0A FE 00       >                        cp      0
 100+ 8E0C 28 04       >                        jr      z,.DoneCount
 100+ 8E0E 04          >                        inc     b
 100+ 8E0F 23          >                        inc     hl
 100+ 8E10 18 F7       >                        jr      .CountLenLoop
 100+ 8E12 3E 20       >.DoneCount:             ld      a,32
 100+ 8E14 90          >                        sub     b
 100+ 8E15 CB 2F       >                        sra     a
 101+ 8E17 21 C1 84                             ld      hl,Hyp_centeredCharging
 102+ 8E1A                                      ldClearTextLoop 32
 102+ 8E1A 47          >                        ld      b,a
 102+ 8E1B 3E 20       >                        ld      a,32
 102+ 8E1D 77          >.ClearLoop:             ld      (hl),a
 102+ 8E1E 23          >                        inc     hl
 102+ 8E1F 10 FC       >                        djnz    .ClearLoop
 103+ 8E21 EB                                   ex      de,hl
 104+ 8E22 21 73 84                             ld      hl,Hyp_charging
 105+ 8E25                                      ldCopyTextAtHLtoDE
 105+ 8E25 7E          >.CopyLoop:              ld      a,(hl)
 105+ 8E26 12          >                        ld      (de),a
 105+ 8E27 FE 00       >                        cp      0
 105+ 8E29 C8          >                        ret     z
 105+ 8E2A 23          >                        inc     hl
 105+ 8E2B 13          >                        inc     de
 105+ 8E2C 18 F7       >                        jr      .CopyLoop
 106+ 8E2E AF                                   xor     a
 107+ 8E2F 32 E1 84                             ld      (Hyp_centeredEol2),a
 108+ 8E32 2A F1 96     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 8E35 2D                                   dec     l
 110+ 8E36 20 24                                jr      nz,.decHyperInnerOnly
 111+ 8E38 25                                   dec     h
 112+ 8E39 F8                                   ret     m
 113+ 8E3A 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 8E3C E5                                   push    hl
 115+ 8E3D 16 0C                                ld      d,12
 116+ 8E3F 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 8E41 CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 8E44 16 60                                ld      d,12 * 8
 119+ 8E46 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 8E49 11 00 60                             ld      de,$6000
 121+ 8E4C 21 80 84                             ld      hl,Hyp_centeredTarget
 122+ 8E4F CD C8 E0                             call    l1_print_at
 123+ 8E52 11 00 68                             ld      de,$6800
 124+ 8E55 21 C1 84                             ld      hl,Hyp_centeredCharging
 125+ 8E58 CD C8 E0                             call    l1_print_at
 126+ 8E5B E1                                   pop     hl
 127+ 8E5C 22 F1 96     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 8E5F C9                                   ret
 129+ 8E60 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 8E63 22 F1 96                             ld      (InnerHyperCount),hl
 131+ 8E66 16 0C                                ld      d,12
 132+ 8E68 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 8E6A CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 8E6D 16 60                                ld      d,12 * 8
 135+ 8E6F CD 74 E0                             call    l1_cls_2_lines_d
 136+ 8E72                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 8E72 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 8E74 32 E3 86    >                        ld      (ScreenTransitionForced), a
 137+ 8E77 C9                                   ret
 138+ 8E78
# file closed: ./Tables/message_queue.asm
 929  8E78                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 8E78 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 8E79 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 8E7D 13 0A 2A 0B
   3+ 8E81              ShipPackTableSize       EQU $ - ShipPackList
   4+ 8E81 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 8E85              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 8E85
# file closed: ./Tables/ShipClassTable.asm
 930  8E85
 931  8E85
 932  8E85
 933  8E85              ;.absXhi:
 934  8E85              ;                        ld      a,ScannerX
 935  8E85              ;                        JumpOnBitSet d,7,ScannerNegX
 936  8E85              ;                        add     a,e
 937  8E85              ;                        jp      ScannerZCoord
 938  8E85              ;ScannerNegX:            sub     e
 939  8E85              ;ScannerZCoord:          ld      e,a
 940  8E85              ;                        srl     c
 941  8E85              ;                        srl     c
 942  8E85              ;                        ld      a,ScannerY
 943  8E85              ;                        JumpOnBitSet b,7,ScannerNegZ
 944  8E85              ;                        sub     c
 945  8E85              ;                        jp      ScannerYCoord
 946  8E85              ;ScannerNegZ:            add     a,c
 947  8E85              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 948  8E85              ;                        JumpOnBitSet h,7,ScannerStickDown
 949  8E85              ;                        sub     l                       ; a already holds actual Y
 950  8E85              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 951  8E85              ;                        ld      a,128
 952  8E85              ;                        jp      ScannerHeightDone
 953  8E85              ;ScannerStickDown:       add     a,l
 954  8E85              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 955  8E85              ;                        ld      a,191
 956  8E85              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 957  8E85              ;                        ld      b,d
 958  8E85              ;                        ld      d,a
 959  8E85              ;                        cp      b
 960  8E85              ;                        jp      z,Scanner0Height
 961  8E85              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 962  8E85              ;                        push    bc
 963  8E85              ;                        push    de
 964  8E85              ;                        MMUSelectLayer2
 965  8E85              ;                        call    l2_draw_vert_line_to
 966  8E85              ;                        pop     de
 967  8E85              ;                        pop     bc
 968  8E85              ;Scanner0Height:         ld      b,d
 969  8E85              ;                       push    bc
 970  8E85              ;                       ld      a,255
 971  8E85              ;                       MMUSelectLayer2
 972  8E85              ;                       call    l2_plot_pixel
 973  8E85              ;                       pop     bc
 974  8E85              ;                       inc     c
 975  8E85              ;                       ld      a,255
 976  8E85              ;                       MMUSelectLayer2
 977  8E85              ;                       call    l2_plot_pixel
 978  8E85 C9                                   ret
 979  8E86
 980  8E86
 981  8E86 AF           SeedGalaxy0:            xor     a
 982  8E87                                      MMUSelectGalaxyA
 982  8E87 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 983  8E8A DD 21 16 E0                          ld      ix,galaxy_data
 984  8E8E AF                                   xor		a
 985  8E8F 32 E8 97                             ld		(XSAV),a
 986  8E92 CD AE 9C                             call    copy_galaxy_to_system
 987  8E95 DD E5        SeedGalaxy0Loop:        push    ix
 988  8E97 D1                                   pop     de
 989  8E98 21 CF 97                             ld      hl,SystemSeed
 990  8E9B CD B4 9C                             call    copy_seed
 991  8E9E DD E5                                push    ix
 992  8EA0 E1                                   pop     hl
 993  8EA1 ED 34 08 00                          add     hl,8
 994  8EA5 E5                                   push    hl
 995  8EA6 DD E1                                pop     ix
 996  8EA8 CD E9 9C                             call    next_system_seed
 997  8EAB 3A E8 97                             ld		a,(XSAV)
 998  8EAE 3D                                   dec		a
 999  8EAF FE 00                                cp		0
1000  8EB1 C8                                   ret		z
1001  8EB2 32 E8 97                             ld		(XSAV),a
1002  8EB5 20 DE                                jr      nz,SeedGalaxy0Loop
1003  8EB7 C9                                   ret
1004  8EB8
1005  8EB8
1006  8EB8
1007  8EB8
1008  8EB8                  ;include "./ModelRender/testdrawing.asm"
1009  8EB8 00 00        XX12PVarQ			DW 0
1010  8EBA 00 00        XX12PVarR			DW 0
1011  8EBC 00 00        XX12PVarS			DW 0
1012  8EBE 00 00        XX12PVarResult1		DW 0
1013  8EC0 00 00        XX12PVarResult2		DW 0
1014  8EC2 00 00        XX12PVarResult3		DW 0
1015  8EC4 00           XX12PVarSign2		DB 0
1016  8EC5 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1017  8EC6 00           XX12PVarSign3		DB 0
1018  8EC7
1019  8EC7                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 8EC7              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 8EC7              ; so xx12 = XX15 * XX16 row
   3+ 8EC7              XX12ProcessOneRow:
   4+ 8EC7              XX12CalcXCell:
   5+ 8EC7 ED 4B 82 C0          ld		bc,(UBnkXScaled)
   6+ 8ECB 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 8ECC 23           		inc		hl
   8+ 8ECD 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 8ECE 7A           		ld		a,d
  10+ 8ECF A8                   xor     b
  11+ 8ED0 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 8ED2 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 8ED4 78           		ld		a,b                                     ; now make bc abs bc
  14+ 8ED5 E6 7F        		and		SignMask8Bit
  15+ 8ED7 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 8ED8 E5           		push	hl
  17+ 8ED9 16 00                ld      d,0                                     ; d = value
  18+ 8EDB 60           		ld		h,b
  19+ 8EDC 69           		ld		l,c
  20+ 8EDD CD 74 A8     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 8EE0 22 BE 8E     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 8EE3 DD 7C        		ld		a,ixh
  23+ 8EE5 32 C5 8E     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 8EE8 E1           		pop		hl
  25+ 8EE9              XX12CalcYCell:
  26+ 8EE9 ED 4B 84 C0          ld		bc,(UBnkYScaled)
  27+ 8EED 23           		inc		hl
  28+ 8EEE 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 8EEF 23           		inc		hl
  30+ 8EF0 56           		ld		d,(hl)
  31+ 8EF1 7A           		ld		a,d
  32+ 8EF2 A8                   xor     b
  33+ 8EF3 E6 80        		and		SignOnly8Bit
  34+ 8EF5 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 8EF7 78           		ld		a,b                                     ; now make bc abs bc
  36+ 8EF8 E6 7F        		and		SignMask8Bit
  37+ 8EFA 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 8EFB E5           		push	hl
  39+ 8EFC 16 00                ld      d,0                                     ; d = value
  40+ 8EFE 60           		ld		h,b
  41+ 8EFF 69           		ld		l,c
  42+ 8F00 CD 74 A8     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 8F03 22 C0 8E     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 8F06 DD 7C        		ld		a,ixh
  45+ 8F08 32 C4 8E     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 8F0B E1           		pop		hl
  47+ 8F0C              XX12CalcZCell:
  48+ 8F0C ED 4B 86 C0          ld		bc,(UBnkZScaled)
  49+ 8F10 23           		inc		hl
  50+ 8F11 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 8F12 23           		inc		hl
  52+ 8F13 56           		ld		d,(hl)
  53+ 8F14 7A           		ld		a,d
  54+ 8F15 A8                   xor     b
  55+ 8F16 E6 80        		and		SignOnly8Bit
  56+ 8F18 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 8F1A 78           		ld		a,b                                     ; now make bc abs bc
  58+ 8F1B E6 7F        		and		SignMask8Bit
  59+ 8F1D 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 8F1E 16 00                ld      d,0                                     ; d = value
  61+ 8F20 60           		ld		h,b
  62+ 8F21 69           		ld		l,c
  63+ 8F22 CD 74 A8     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 8F25 22 C2 8E     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 8F28 DD 7C        		ld		a,ixh
  66+ 8F2A 32 C6 8E     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 8F2D              XX12CalcCellResult:
  68+ 8F2D 2A BE 8E     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 8F30 ED 5B C0 8E  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 8F34 ED 4B C4 8E  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 8F38              XX12MSBOnly:
  72+ 8F38 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 8F39 5A           		ld		e,d									    ; for both results
  74+ 8F3A AF           		xor		a									    ;
  75+ 8F3B 67           		ld		h,a									    ;
  76+ 8F3C 57           		ld		d,a									    ; so set high byte to 0
  77+ 8F3D CD F5 AD     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 8F40 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 8F41 3A C6 8E     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 8F44 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 8F45 ED 5B C2 8E  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 8F49 5A           		ld		e,d                                     ; d = result /256
  83+ 8F4A 16 00        		ld		d,0									    ; and only us high byte
  84+ 8F4C CD F5 AD     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 8F4F C9           		ret											    ; hl = result, a = sign
  86+ 8F50              								    ; hl = result, a = sign
  87+ 8F50
  88+ 8F50              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 8F50              ;...X cell
  90+ 8F50 21 55 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 8F53 CD C7 8E             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 8F56 47           		ld		b,a                                 ; b = sign
  93+ 8F57 7C           		ld		a,h                                 ; a = high byte
  94+ 8F58 B0           		or		b
  95+ 8F59 32 89 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 8F5C 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 8F5D 32 88 C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 8F60              ;...Y cell
  99+ 8F60 21 5D C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 8F63 CD C7 8E             call    XX12ProcessOneRow
 101+ 8F66 47           		ld		b,a
 102+ 8F67 7C           		ld		a,h
 103+ 8F68              ;		ld		a,l
 104+ 8F68 B0           		or		b
 105+ 8F69 32 8B C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 8F6C 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 8F6D 32 8A C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 8F70              ;...Z cell
 109+ 8F70 21 65 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 8F73 CD C7 8E             call    XX12ProcessOneRow
 111+ 8F76 47           		ld		b,a
 112+ 8F77 7C                   ld		a,h
 113+ 8F78              ;		ld		a,l
 114+ 8F78 B0           		or		b
 115+ 8F79 32 8D C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 8F7C 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 8F7D 32 8C C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 8F80 C9                   ret
 119+ 8F81
 120+ 8F81              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 8F81              ;...X cell
 122+ 8F81 21 55 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 8F84 CD C7 8E             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 8F87 47           		ld		b,a                                 ; b = sign
 125+ 8F88 7C           		ld		a,h                                 ; a = high byte
 126+ 8F89 B0           		or		b
 127+ 8F8A 32 89 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 8F8D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 8F8E 32 88 C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 8F91              ;...Y cell
 131+ 8F91 21 5D C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 8F94 CD C7 8E             call    XX12ProcessOneRow
 133+ 8F97 47           		ld		b,a
 134+ 8F98 7C           		ld		a,h
 135+ 8F99              ;		ld		a,l
 136+ 8F99 B0           		or		b
 137+ 8F9A 32 8B C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 8F9D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 8F9E 32 8A C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 8FA1              ;...Z cell
 141+ 8FA1 21 65 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 8FA4 CD C7 8E             call    XX12ProcessOneRow
 143+ 8FA7 47           		ld		b,a
 144+ 8FA8 7C                   ld		a,h
 145+ 8FA9              ;		ld		a,l
 146+ 8FA9 B0           		or		b
 147+ 8FAA 32 8D C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 8FAD 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 8FAE 32 8C C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 8FB1 C9                   ret
 151+ 8FB2
 152+ 8FB2              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 8FB2              ;...X cell
 154+ 8FB2 21 3D C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 8FB5 CD C7 8E             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 8FB8 47           		ld		b,a                                 ; b = sign
 157+ 8FB9 7C           		ld		a,h                                 ; a = high byte
 158+ 8FBA B0           		or		b
 159+ 8FBB 32 89 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 8FBE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 8FBF 32 88 C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 8FC2              ;...Y cell
 163+ 8FC2 21 43 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 8FC5 CD C7 8E             call    XX12ProcessOneRow
 165+ 8FC8 47           		ld		b,a
 166+ 8FC9 7C           		ld		a,h
 167+ 8FCA              ;		ld		a,l
 168+ 8FCA B0           		or		b
 169+ 8FCB 32 8B C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 8FCE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 8FCF 32 8A C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 8FD2              ;...Z cell
 173+ 8FD2 21 49 C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 8FD5 CD C7 8E             call    XX12ProcessOneRow
 175+ 8FD8 47           		ld		b,a
 176+ 8FD9 7C                   ld		a,h
 177+ 8FDA              ;		ld		a,l
 178+ 8FDA B0           		or		b
 179+ 8FDB 32 8D C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 8FDE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 8FDF 32 8C C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 8FE2 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1020  8FE3                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 8FE3 21 88 C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 8FE6 11 82 C0                             ld      de,XX15
   3+ 8FE9 01 06 00                             ld      bc,6
   4+ 8FEC ED B0                                ldir
   5+ 8FEE C9                                   ret
   6+ 8FEF
   7+ 8FEF 21 88 C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 8FF2 11 8E C0                             ld      de,XX12Save
   9+ 8FF5 01 06 00                             ld      bc,6
  10+ 8FF8 ED B0                                ldir
  11+ 8FFA C9                                   ret
  12+ 8FFB
  13+ 8FFB 21 8E C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 8FFE 11 88 C0                             ld      de,XX12
  15+ 9001 01 06 00                             ld      bc,6
  16+ 9004 ED B0                                ldir
  17+ 9006 C9                                   ret
  18+ 9007
  19+ 9007 21 88 C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 900A 11 94 C0                             ld      de,XX12Save2
  21+ 900D 01 06 00                             ld      bc,6
  22+ 9010 ED B0                                ldir
  23+ 9012 C9                                   ret
  24+ 9013
  25+ 9013 21 94 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 9016 11 88 C0                             ld      de,XX12
  27+ 9019 01 06 00                             ld      bc,6
  28+ 901C ED B0                                ldir
  29+ 901E C9                                   ret
  30+ 901F
# file closed: ./ModelRender/CopyXX12ToXX15.asm
1021  901F                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 901F 21 82 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 9022 11 88 C0                             ld      de,XX12
   3+ 9025 01 06 00                             ld      bc,6
   4+ 9028 ED B0                                ldir
   5+ 902A C9                                   ret
   6+ 902B
   7+ 902B
   8+ 902B
   9+ 902B 21 82 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 902E 11 9E C0                             ld      de,XX15Save
  11+ 9031 01 06 00                             ld      bc,6
  12+ 9034 ED B0                                ldir
  13+ 9036 C9                                   ret
  14+ 9037
  15+ 9037 21 9E C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 903A 11 82 C0                             ld      de,XX15
  17+ 903D 01 06 00                             ld      bc,6
  18+ 9040 ED B0                                ldir
  19+ 9042 C9                                   ret
  20+ 9043
  21+ 9043 21 82 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 9046 11 A6 C0                             ld      de,XX15Save2
  23+ 9049 01 06 00                             ld      bc,6
  24+ 904C ED B0                                ldir
  25+ 904E C9                                   ret
  26+ 904F
  27+ 904F 21 A6 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 9052 11 82 C0                             ld      de,XX15
  29+ 9055 01 06 00                             ld      bc,6
  30+ 9058 ED B0                                ldir
  31+ 905A C9                                   ret
  32+ 905B
# file closed: ./ModelRender/CopyXX15ToXX12.asm
1022  905B                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 905B 06 09        ScaleXX16Matrix197:     ld		b,9                 ; Interate though all 9 matrix elements
   2+ 905D 0E C5                                ld		c,ConstNorm         ; c = 197
   3+ 905F 21 3D C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   4+ 9062 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
   5+ 9063 5F                                   ld		e,a                 ;
   6+ 9064 23                                   inc		hl                  ;
   7+ 9065 7E                                   ld		a,(hl)              ;
   8+ 9066 57                                   ld		d,a                 ;
   9+ 9067 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  10+ 9069 DD 6F                                ld		ixl,a				; retain for sign bit
  11+ 906B                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  11+ 906B CB 23       >			   sla e
  11+ 906D CB 12       >			   rl  d
  12+ 906F 7A                                   ld      a,d                 ; a = high byte after x 2
  13+ 9070 C5                                   push	bc                  ; save BC  counter and constant 197
  14+ 9071 E5                                   push	hl                  ; save HL
  15+ 9072 CD F4 A9                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  16+ 9075 E1                                   pop		hl
  17+ 9076 2B                                   dec     hl                  ; move back to low byte
  18+ 9077 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  19+ 9078 23                                   inc     hl                  ; move back to high byte
  20+ 9079                                  ;    ld      a,(hl)
  21+ 9079                                  ;    and     $80
  22+ 9079 DD 7D                                ld      a,ixl
  23+ 907B 77                                   ld      (hl),a              ; write back just sign bit
  24+ 907C C1                                   pop		bc                  ; retrieve both counter and constant 197
  25+ 907D 23                                   inc     hl                  ; no to next vertex value
  26+ 907E 10 E2                                djnz	.ScaleXX16Loop
  27+ 9080 C9                                   ret
  28+ 9081
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1023  9081
1024  9081                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 9081              ;note: DIV16Amul256dCUNDOC as per
   2+ 9081              ;                                   BC = A0
   3+ 9081              ;                                   DE = 0C
   4+ 9081              ;                                   so BC = a * 256 / C
   5+ 9081
   6+ 9081              ; We can cheat here, Speed is always 0 or positive
   7+ 9081              ; z postion will always be positive if we can see it
   8+ 9081
   9+ 9081 EB           InitStarAtHL:           ex      de,hl
  10+ 9082 CD 72 9C                             call    doRND
  11+ 9085 EB                                   ex      de,hl
  12+ 9086 F6 08                                or      8
  13+ 9088 77                                   ld      (hl),a
  14+ 9089 E6 7F                                and     $7F
  15+ 908B 23                                   inc     hl
  16+ 908C 77                                   ld      (hl),a
  17+ 908D EB                                   ex      de,hl
  18+ 908E CD 72 9C                             call    doRND
  19+ 9091 EB                                   ex      de,hl
  20+ 9092 0F                                   rrca
  21+ 9093 E6 80                                and     $80
  22+ 9095 B6                                   or      (hl)
  23+ 9096 77                                   ld      (hl),a
  24+ 9097 23                                   inc     hl
  25+ 9098 EB                                   ex      de,hl
  26+ 9099 CD 72 9C                             call    doRND
  27+ 909C EB                                   ex      de,hl
  28+ 909D F6 04                                or      4
  29+ 909F 77                                   ld      (hl),a
  30+ 90A0 23                                   inc     hl
  31+ 90A1 E6 7F                                and     $7F
  32+ 90A3 77                                   ld      (hl),a
  33+ 90A4 EB                                   ex      de,hl
  34+ 90A5 CD 72 9C                             call    doRND
  35+ 90A8 EB                                   ex      de,hl
  36+ 90A9 0F                                   rrca
  37+ 90AA E6 80                                and     $80
  38+ 90AC B6                                   or      (hl)
  39+ 90AD 77                                   ld      (hl),a
  40+ 90AE 23                                   inc     hl
  41+ 90AF EB                                   ex      de,hl
  42+ 90B0 CD 72 9C                             call    doRND
  43+ 90B3 EB                                   ex      de,hl
  44+ 90B4 F6 90                                or      144
  45+ 90B6 77                                   ld      (hl),a
  46+ 90B7 23                                   inc     hl
  47+ 90B8 F6 70                                or      %01110000
  48+ 90BA E6 7F                                and     $7f     ; bodge
  49+ 90BC 77                                   ld      (hl),a
  50+ 90BD 23                                   inc     hl
  51+ 90BE C9                                   ret
  52+ 90BF
  53+ 90BF EB           InitHyperStarAtHL:      ex      de,hl
  54+ 90C0 CD 72 9C                             call    doRND
  55+ 90C3 CB 27                                sla     a
  56+ 90C5 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 90C7 EB                                   ex      de,hl
  58+ 90C8 E6 F8                                and     %11111000
  59+ 90CA 77                                   ld      (hl),a
  60+ 90CB E6 7F                                and     $7F
  61+ 90CD 23                                   inc     hl
  62+ 90CE 77                                   ld      (hl),a
  63+ 90CF EB                                   ex      de,hl
  64+ 90D0 CD 72 9C                             call    doRND
  65+ 90D3 EB                                   ex      de,hl
  66+ 90D4 0F                                   rrca
  67+ 90D5 E6 80                                and     $80
  68+ 90D7 B6                                   or      (hl)
  69+ 90D8 77                                   ld      (hl),a
  70+ 90D9 23                                   inc     hl
  71+ 90DA EB                                   ex      de,hl
  72+ 90DB CD 72 9C                             call    doRND
  73+ 90DE CB 27                                sla     a
  74+ 90E0 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 90E2 EB                                   ex      de,hl
  76+ 90E3 E6 F8                                and     %11111000
  77+ 90E5 77                                   ld      (hl),a
  78+ 90E6 23                                   inc     hl
  79+ 90E7 E6 7F                                and     $7F
  80+ 90E9 77                                   ld      (hl),a
  81+ 90EA EB                                   ex      de,hl
  82+ 90EB CD 72 9C                             call    doRND
  83+ 90EE EB                                   ex      de,hl
  84+ 90EF 0F                                   rrca
  85+ 90F0 E6 80                                and     $80
  86+ 90F2 B6                                   or      (hl)
  87+ 90F3 77                                   ld      (hl),a
  88+ 90F4 23                                   inc     hl
  89+ 90F5 EB                                   ex      de,hl
  90+ 90F6 CD 72 9C                             call    doRND
  91+ 90F9 EB                                   ex      de,hl
  92+ 90FA F6 5F                                or      95
  93+ 90FC 77                                   ld      (hl),a
  94+ 90FD 23                                   inc     hl
  95+ 90FE F6 70                                or      %01110000
  96+ 9100 E6 7F                                and     $7f     ; bodge
  97+ 9102 77                                   ld      (hl),a
  98+ 9103 23                                   inc     hl
  99+ 9104 C9                                   ret
 100+ 9105
 101+ 9105              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 9105 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 9106 E6 80                                and     SignOnly8Bit
 104+ 9108 47                                   ld      b,a                         ;save sign bit in b
 105+ 9109 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 910A                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 910A FA 38 91    >                        jp		m, .SUBHLDEOppSGN
 107+ 910D 78           .SUBHLDESameSigns:      ld      a,b
 108+ 910E B2                                   or      d
 109+ 910F                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 910F FA 19 91    >                        jp		m, .SUBHLDESameNeg
 110+ 9112 B7                                   or      a
 111+ 9113 ED 52                                sbc     hl,de
 112+ 9115                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 9115 FA 2C 91    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 9118 C9                                   ret
 114+ 9119 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 911A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 911C 67                                   ld      h,a
 117+ 911D 7A                                   ld      a,d
 118+ 911E E6 7F                                and     SignMask8Bit
 119+ 9120 57                                   ld      d,a
 120+ 9121 B7                                   or      a
 121+ 9122 ED 52                                sbc     hl,de
 122+ 9124                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 9124 FA 2C 91    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 9127 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 9128 F6 80                                or      SignOnly8Bit
 125+ 912A 67                                   ld      h,a
 126+ 912B C9                                   ret
 127+ 912C              .SUBHLDESameOvrFlw:     NegHL
 127+ 912C AF          >                    xor a
 127+ 912D 95          >                    sub l
 127+ 912E 6F          >                    ld l,a
 127+ 912F 9F          >                    sbc a,a
 127+ 9130 94          >                    sub h
 127+ 9131 67          >                    ld h,a
 128+ 9132 78                                   ld      a,b
 129+ 9133 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 9135 B4                                   or      h
 131+ 9136 67                                   ld      h,a                         ; recover sign
 132+ 9137 C9                                   ret
 133+ 9138 B7           .SUBHLDEOppSGN:         or      a
 134+ 9139 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 913A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 913C 67                                   ld      h,a
 137+ 913D 7A                                   ld      a,d
 138+ 913E E6 7F                                and     SignMask8Bit
 139+ 9140 57                                   ld      d,a
 140+ 9141 19                                   add     hl,de
 141+ 9142 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 9143 B4                                   or      h
 143+ 9144 67                                   ld      h,a                         ; set the previou sign value
 144+ 9145 C9                                   ret
 145+ 9146
 146+ 9146 7C           StarsADDHLDESigned:     ld      a,h
 147+ 9147 E6 80                                and     SignOnly8Bit
 148+ 9149 47                                   ld      b,a                         ;save sign bit in b
 149+ 914A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 914B                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 914B FA 63 91    >                        jp		m, .ADDHLDEOppSGN
 151+ 914E 78           .ADDHLDESameSigns:      ld      a,b
 152+ 914F B2                                   or      d
 153+ 9150                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 9150 FA 55 91    >                        jp		m, .ADDHLDESameNeg
 154+ 9153 19                                   add     hl,de
 155+ 9154 C9                                   ret
 156+ 9155 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 9156 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 9158 67                                   ld      h,a
 159+ 9159 7A                                   ld      a,d
 160+ 915A E6 7F                                and     SignMask8Bit
 161+ 915C 57                                   ld      d,a
 162+ 915D 19                                   add     hl,de
 163+ 915E 3E 80                                ld      a,SignOnly8Bit
 164+ 9160 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 9161 67                                   ld      h,a
 166+ 9162 C9                                   ret
 167+ 9163 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 9164 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 9166 67                                   ld      h,a
 170+ 9167 7A                                   ld      a,d
 171+ 9168 E6 7F                                and     SignMask8Bit
 172+ 916A 57                                   ld      d,a
 173+ 916B B7                                   or      a
 174+ 916C ED 52                                sbc     hl,de
 175+ 916E 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 9170 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 9171 B4                                   or      h
 178+ 9172 67                                   ld      h,a                         ; set the previou sign value
 179+ 9173 C9                                   ret
 180+ 9174              .ADDHLDEOppInvert:      NegHL
 180+ 9174 AF          >                    xor a
 180+ 9175 95          >                    sub l
 180+ 9176 6F          >                    ld l,a
 180+ 9177 9F          >                    sbc a,a
 180+ 9178 94          >                    sub h
 180+ 9179 67          >                    ld h,a
 181+ 917A 78                                   ld      a,b
 182+ 917B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 917D B4                                   or      h
 184+ 917E 67                                   ld      h,a                         ; recover sign
 185+ 917F C9                                   ret
 186+ 9180              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 9180 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 9182 78                                   ld      a,b
 189+ 9183 32 E8 98                             ld      (NumberOfStarsNOSTM),a
 190+ 9186 21 35 9A                             ld      hl,varDust
 191+ 9189 CD 81 90     .InitStarsLoop:         call    InitStarAtHL
 192+ 918C 10 FB                                djnz    .InitStarsLoop
 193+ 918E C9                                   ret
 194+ 918F              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ 918F 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 196+ 9191 78                                   ld      a,b
 197+ 9192 32 E8 98                             ld      (NumberOfStarsNOSTM),a
 198+ 9195 21 35 9A                             ld      hl,varDust
 199+ 9198 CD BF 90     .InitStarsLoop:         call    InitHyperStarAtHL
 200+ 919B 10 FB                                djnz    .InitStarsLoop
 201+ 919D C9                                   ret
 202+ 919E              ;----------------------------------------------------------------------------------------------------------------------------------
 203+ 919E              DustForward:            ; break
 204+ 919E 3A E8 98                             ld      a,(NumberOfStarsNOSTM)
 205+ 91A1 47                                   ld      b,a                                 ; get the number of stars to process
 206+ 91A2 FD 21 35 9A                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 207+ 91A6 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 208+ 91A7 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 209+ 91AA 5F                                   ld      e,a
 210+ 91AB 16 00                                ld      d,0                                 ; de = zhi/256
 211+ 91AD 3A DF 97                             ld      a,(DELTA)
 212+ 91B0 FE 00                                cp      0
 213+ 91B2 20 01                                jr      nz,.NormalSpeed
 214+ 91B4 3C                                   inc     a                                   ; so the is at lest some dust movement
 215+ 91B5 47           .NormalSpeed:           ld      b,a
 216+ 91B6 0E 00                                ld      c,0                                 ; bc = delta * 256
 217+ 91B8 CD 68 AA                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 218+ 91BB                                      ShiftHLRight1
 218+ 91BB CB 3C       >			   srl h
 218+ 91BD CB 1D       >			   rr  l
 219+ 91BF                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 219+ 91BF CB 3C       >			   srl h
 219+ 91C1 CB 1D       >			   rr  l
 220+ 91C3 7D                                   ld      a,l                                 ;
 221+ 91C4 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 222+ 91C6 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 223+ 91C8 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 223+ 91CC 66 05
 224+ 91CE ED 5B E0 97                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 225+ 91D2 CD 05 91                             call    StarsSUBHLDESigned
 226+ 91D5                                      JumpOnBitSet h,7,ResetStar
 226+ 91D5 CB 7C       >                        bit 	7,h
 226+ 91D7 C2 2C 93    >                        jp      nz,ResetStar
 227+ 91DA FD 75 04 FD                          ld      (iy+4),hl
 227+ 91DE 74 05
 228+ 91E0 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 228+ 91E4 66 01
 229+ 91E6 7C                                   ld      a,h                                 ;
 230+ 91E7 E6 7F                                and     $7F                                 ;
 231+ 91E9 57                                   ld      d,a                                 ; d = abs(x hi)
 232+ 91EA DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 233+ 91EC ED 30                                mul                                         ; de =  abs(x hi) * Q
 234+ 91EE 7C                                   ld      a,h                                 ;
 235+ 91EF E6 80                                and     $80                                 ;
 236+ 91F1 B2                                   or      d                                   ; set sign bit in d
 237+ 91F2 57                                   ld      d,a                                 ;
 238+ 91F3 CD 46 91                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 239+ 91F6 7C                                   ld      a,h
 240+ 91F7 E6 7F                                and     $7F
 241+ 91F9                                      JumpIfAGTENusng $70, ResetStar
 241+ 91F9 FE 70       >                        cp     $70
 241+ 91FB D2 2C 93    >                        jp		nc,ResetStar
 242+ 91FE FD 75 00 FD                          ld      (iy+0),hl                           ;
 242+ 9202 74 01
 243+ 9204 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 243+ 9208 66 03
 244+ 920A 7C                                   ld      a,h                                 ;
 245+ 920B E6 7F                                and     $7F                                 ;
 246+ 920D 57                                   ld      d,a                                 ; d = abs(y hi)
 247+ 920E DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 248+ 9210 ED 30                                mul                                         ; de =  abs(y hi) * Q
 249+ 9212 7C                                   ld      a,h                                 ;
 250+ 9213 E6 80                                and     $80                                 ;
 251+ 9215 B2                                   or      d                                   ; set sign bit in d
 252+ 9216 57                                   ld      d,a                                 ;
 253+ 9217 CD 46 91                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 254+ 921A 7C                                   ld      a,h
 255+ 921B E6 7F                                and     $7F
 256+ 921D                                      JumpIfAGTENusng $60, ResetStar
 256+ 921D FE 60       >                        cp     $60
 256+ 921F D2 2C 93    >                        jp		nc,ResetStar
 257+ 9222 7C                                   ld      a,h
 258+ 9223 E6 80                                and     $80
 259+ 9225 20 06                                jr      nz,.NoSecondCheck
 260+ 9227 7C                                   ld      a,h
 261+ 9228                                      JumpIfAGTENusng $20, ResetStar
 261+ 9228 FE 20       >                        cp     $20
 261+ 922A D2 2C 93    >                        jp		nc,ResetStar
 262+ 922D FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 262+ 9231 74 03
 263+ 9233              ; Now roll
 264+ 9233              ;  6. x = x - alpha * y / 256
 265+ 9233 2A FA 96     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 266+ 9236 7D                                   ld      a,l
 267+ 9237 FE 00                                cp      0
 268+ 9239 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 269+ 923B                                      ;break
 270+ 923B                                      ;ld      a,$80
 271+ 923B                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 272+ 923B E5                                   push    hl
 273+ 923C 7C                                   ld      a,h
 274+ 923D E6 80                                and     $80
 275+ 923F 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 276+ 9240 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 277+ 9241 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 278+ 9244 5F                                   ld      e,a
 279+ 9245 E6 80                                and     $80
 280+ 9247 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 281+ 9248 7B           .rxEEquABSignX:         ld      a,e
 282+ 9249 E6 7F                                and     $7F
 283+ 924B 5F                                   ld      e,a                                 ; save abs x hi in e
 284+ 924C ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 285+ 924E 79                                   ld      a,c
 286+ 924F A8                                   xor     b                                   ; handle muliple sign bits
 287+ 9250 B2                                   or      d
 288+ 9251 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 289+ 9252 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 289+ 9256 66 01
 290+ 9258 CD 05 91                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 291+ 925B FD 75 00 FD                          ld      (iy+0),hl
 291+ 925F 74 01
 292+ 9261              ;  5. y = y + alpha * x / 256
 293+ 9261              .YRoll:                 ;break
 294+ 9261 E1                                   pop     hl                                  ; h = sign, l = magnitude
 295+ 9262 7C                                   ld      a,h
 296+ 9263 E6 80                                and     $80
 297+ 9265 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 298+ 9266 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 299+ 9267 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 300+ 926A 5F                                   ld      e,a
 301+ 926B E6 80                                and     $80
 302+ 926D 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 303+ 926E 7B           .ryEEquABSignX:         ld      a,e
 304+ 926F E6 7F                                and     $7F
 305+ 9271 5F                                   ld      e,a                                 ; save abs x hi in e
 306+ 9272 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 307+ 9274 79                                   ld      a,c
 308+ 9275 A8                                   xor     b                                   ; handle muliple sign bits
 309+ 9276 B2                                   or      d
 310+ 9277 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 311+ 9278 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 311+ 927C 66 03
 312+ 927E CD 46 91                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 313+ 9281 FD 75 02 FD                          ld      (iy+2),hl
 313+ 9285 74 03
 314+ 9287 3A EA 96     .NoRoll:                ld      a,(BET1)
 315+ 928A FE 00                                cp      0
 316+ 928C 28 22                                jr      z,.NoPitch
 317+ 928E              ;  8. y = y - beta * 256
 318+ 928E 57           .YPitch:                ld      d,a                                 ; d = BET1
 319+ 928F FD 7E 02                             ld      a,(iy+2)
 320+ 9292 5F                                   ld      e,a                                 ; e = Y HI
 321+ 9293 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 322+ 9295 5F                                   ld      e,a
 323+ 9296 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 324+ 9298                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 324+ 9298 CB 23       >			   sla e
 324+ 929A CB 12       >			   rl  d
 325+ 929C 3A EC 96                             ld      a,(BET2FLIP)                        ; get inverted Sign
 326+ 929F B2                                   or      d
 327+ 92A0 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 328+ 92A1 FD 6E 02 FD                          ld      hl,(iy+2)
 328+ 92A5 66 03
 329+ 92A7 CD 46 91                             call    StarsADDHLDESigned
 330+ 92AA FD 75 02 FD                          ld      (iy+2),hl
 330+ 92AE 74 03
 331+ 92B0              ; now work out screen pos
 332+ 92B0              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 333+ 92B0              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 334+ 92B0              ;        pop     de
 335+ 92B0               ;       call    ProjectStarXToScreen
 336+ 92B0                                      ;pop     de
 337+ 92B0              .NoPitch:
 338+ 92B0 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 339+ 92B3 6F                                   ld      l,a
 340+ 92B4 E6 7F                                and     $7F
 341+ 92B6                                      JumpOnBitSet l,7,StarNegXPt
 341+ 92B6 CB 7D       >                        bit 	7,l
 341+ 92B8 C2 C1 92    >                        jp      nz,StarNegXPt
 342+ 92BB C6 80                                add     a,$80
 343+ 92BD 4F                                   ld      c,a
 344+ 92BE C3 C6 92                             jp      StarDoneX
 345+ 92C1 47           StarNegXPt:             ld      b,a
 346+ 92C2 3E 80                                ld      a,$80
 347+ 92C4 90                                   sub     b
 348+ 92C5 4F                                   ld      c,a
 349+ 92C6 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 350+ 92C9 6F                                   ld      l,a
 351+ 92CA E6 7F                                and     $7F
 352+ 92CC                                      JumpOnBitSet l,7,StarNegYPt
 352+ 92CC CB 7D       >                        bit 	7,l
 352+ 92CE C2 D7 92    >                        jp      nz,StarNegYPt
 353+ 92D1 C6 60                                add     a,$60
 354+ 92D3 47                                   ld      b,a
 355+ 92D4 C3 DC 92                             jp      StarDoneY
 356+ 92D7 47           StarNegYPt:             ld      b,a
 357+ 92D8 3E 60                                ld      a,$60
 358+ 92DA 90                                   sub     b
 359+ 92DB 47                                   ld      b,a
 360+ 92DC 3E 92        StarDoneY:              ld      a,L2DustColour
 361+ 92DE C5                                   push    bc
 362+ 92DF              .DrawStar:              MMUSelectLayer2
 362+ 92DF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 92E3 CD FF E0                             call    l2_plot_pixel
 364+ 92E6 FD 7E 05                             ld      a,(iy+5)
 365+ 92E9 C1                                   pop    bc
 366+ 92EA                                      JumpIfAGTENusng $60,EndofStarsLoop
 366+ 92EA FE 60       >                        cp     $60
 366+ 92EC D2 1C 93    >                        jp		nc,EndofStarsLoop
 367+ 92EF 3E 92                                ld      a,L2DustColour
 368+ 92F1 0C                                   inc     c
 369+ 92F2 C5                                   push    bc
 370+ 92F3                                      MMUSelectLayer2
 370+ 92F3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 371+ 92F7 CD FF E0                             call    l2_plot_pixel
 372+ 92FA FD 7E 05                             ld      a,(iy+5)
 373+ 92FD C1                                   pop    bc
 374+ 92FE                                      JumpIfAGTENusng $37,EndofStarsLoop
 374+ 92FE FE 37       >                        cp     $37
 374+ 9300 D2 1C 93    >                        jp		nc,EndofStarsLoop
 375+ 9303 3E 92                                ld      a,L2DustColour
 376+ 9305 04                                   inc     b
 377+ 9306 C5                                   push    bc
 378+ 9307                                      MMUSelectLayer2
 378+ 9307 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 379+ 930B CD FF E0                             call    l2_plot_pixel
 380+ 930E FD 7E 05                             ld      a,(iy+5)
 381+ 9311 C1                                   pop    bc
 382+ 9312 3E 92                                ld      a,L2DustColour
 383+ 9314 0D                                   dec     c
 384+ 9315                                      MMUSelectLayer2
 384+ 9315 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 385+ 9319 CD FF E0                             call    l2_plot_pixel
 386+ 931C C1           EndofStarsLoop:         pop     bc                                      ;  0
 387+ 931D FD E5                                push    iy                                      ; +1
 388+ 931F E1                                   pop     hl                                      ;  0
 389+ 9320 ED 34 06 00                          add     hl,6
 390+ 9324 E5           NextStarLoop2:          push    hl                                      ; +1
 391+ 9325 FD E1                                pop     iy                                      ;  0
 392+ 9327 05                                   dec     b
 393+ 9328 C2 A6 91                             jp      nz,StarProcessLoop
 394+ 932B C9                                   ret
 395+ 932C              ResetStar:              ;break
 396+ 932C                                      ;pop     de
 397+ 932C C1                                   pop     bc                                      ; 0
 398+ 932D 3A E8 98                             ld      a,(NumberOfStarsNOSTM)
 399+ 9330 90                                   sub     b
 400+ 9331 57                                   ld      d,a
 401+ 9332 1E 06                                ld      e,6
 402+ 9334 ED 30                                mul
 403+ 9336 21 35 9A                             ld      hl,varDust
 404+ 9339 19                                   add     hl,de
 405+ 933A CD 81 90                             call    InitStarAtHL
 406+ 933D C3 24 93                             jp      NextStarLoop2
 407+ 9340              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ 9340 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 409+ 9343 FD 7E 01                             ld      a,(iy+1)
 410+ 9346 6F                                   ld      l,a
 411+ 9347 E6 7F                                and     $7F
 412+ 9349 47                                   ld      b,a
 413+ 934A CD 0B AA                             call    DIV16BCDivDEUNDOC
 414+ 934D 7D                                   ld      a,l
 415+ 934E                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 415+ 934E CB 7F       >                        bit 	7,a
 415+ 9350 C2 5B 93    >                        jp      nz,StarXNegativePoint
 416+ 9353              ;StarXPositivePoint:									; x was positive result
 417+ 9353 2E 80                                ld          l,ScreenCenterX						;
 418+ 9355 26 00                                ld          h,0
 419+ 9357 09                                   add         hl,bc								; hl = Screen Centre + X
 420+ 9358 C3 62 93                             jp          StarStoreXPoint
 421+ 935B              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 422+ 935B 2E 80                                ld          l,ScreenCenterX
 423+ 935D 26 00                                ld          h,0
 424+ 935F                                      ClearCarryFlag
 424+ 935F B7          >                        or a
 425+ 9360 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 426+ 9362              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 427+ 9362 7D                                   ld          a,l
 428+ 9363 32 8D 9A                             ld          (varStarX),a
 429+ 9366 C9                                   ret
 430+ 9367
 431+ 9367 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 432+ 936A FD 7E 03                             ld          a,(iy+3)
 433+ 936D 6F                                   ld          l,a
 434+ 936E E6 7F                                and         $7F
 435+ 9370 47                                   ld          b,a
 436+ 9371 CD 0B AA                             call        DIV16BCDivDEUNDOC
 437+ 9374 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 438+ 9375                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 438+ 9375 CB 7F       >                        bit 	7,a
 438+ 9377 C2 82 93    >                        jp      nz,StarNegativeYPoint
 439+ 937A                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 440+ 937A 2E 60                               ld          l,ScreenCenterY
 441+ 937C                                      ClearCarryFlag
 441+ 937C B7          >                        or a
 442+ 937D ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 443+ 937F C3 87 93                             jp          StarStoreYPoint
 444+ 9382              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 445+ 9382 2E 60                                ld          l,ScreenCenterY
 446+ 9384 26 00                                ld          h,0
 447+ 9386 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 448+ 9387              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 449+ 9387 7D                                   ld          a,l
 450+ 9388 32 8E 9A                             ld          (varStarY),a
 451+ 938B C9                                   ret
 452+ 938C
 453+ 938C
# file closed: ./Universe/StarDust/StarRoutines.asm
1025  938C              ;    include "Universe/move_object-MVEIT.asm"
1026  938C              ;    include "./ModelRender/draw_object.asm"
1027  938C              ;    include "./ModelRender/draw_ship_point.asm"
1028  938C              ;    include "./ModelRender/drawforwards-LL17.asm"
1029  938C
1030  938C                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 938C
   2+ 938C 00           memfillvalue		DB 0
   3+ 938D 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 9391 7D
   4+ 9392 8C 93        memfill_astrt  		DW memfillvalue
   5+ 9394 00 40        memfill_length 		DB $00,$40
   6+ 9396 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 9399 00 00        memfill_bstrt  		DB $00,$00
   8+ 939B 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 939F              memfill_cmd_len	  	EQU $ - memfill
  10+ 939F
  11+ 939F              memfill_dma:
  12+ 939F              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 939F              .set_fill_value:
  14+ 939F 32 8C 93     	ld 		(memfillvalue),a
  15+ 93A2              .set_target:
  16+ 93A2 22 99 93     	ld		(memfill_bstrt),hl
  17+ 93A5              .set_length:
  18+ 93A5 ED 53 94 93  	ld		(memfill_length),de
  19+ 93A9              .write_dma:
  20+ 93A9 21 8D 93     	ld 		hl, memfill
  21+ 93AC 06 12        	ld 		b, memfill_cmd_len
  22+ 93AE 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 93B0 ED B3        	otir
  24+ 93B2 C9           	ret
  25+ 93B3
# file closed: ./Hardware/memfill_dma.asm
1031  93B3                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 93B3
   2+ 93B3 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 93B7 7D
   3+ 93B8 00 00        memcopy_astrt  		DB $00,$00
   4+ 93BA 00 40        memcopy_length 		DB $00,$40
   5+ 93BC 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 93BF 00 00        memcopy_bstrt  		DB $00,$00
   7+ 93C1 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 93C5              memcopy_cmd_len	  	equ $ - memcopy
   9+ 93C5
  10+ 93C5              memcopy_dma:
  11+ 93C5              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 93C5              .set_target:
  13+ 93C5 22 BF 93     	ld		(memcopy_bstrt),hl
  14+ 93C8              .set_source:
  15+ 93C8 ED 53 B8 93  	ld		(memcopy_astrt),de
  16+ 93CC              .set_length:
  17+ 93CC ED 43 BA 93  	ld		(memcopy_length),bc
  18+ 93D0              .write_dma:
  19+ 93D0 21 B3 93     	ld 		hl, memcopy
  20+ 93D3 06 12        	ld 		b, memcopy_cmd_len
  21+ 93D5 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 93D7 ED B3        	otir
  23+ 93D9 C9           	ret
  24+ 93DA
# file closed: ./Hardware/memcopy_dma.asm
1032  93DA                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 93DA              ;
   2+ 93DA              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 93DA              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 93DA              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 93DA              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 93DA              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 93DA              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 93DA              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 93DA              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 93DA              ;
  11+ 93DA              ; Keyboard
  12+ 93DA              ;
  13+ 93DA              ;   0      1       2       3       4       5        6       7       8       9
  14+ 93DA              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 93DA              ;   10     11      12      13      14      15       16      17      18      19
  16+ 93DA              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 93DA              ;   20     21      22      23      24      25       26      27      28      29
  18+ 93DA              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 93DA              ;   30     31      32      33      34      35       36      37      38      39
  20+ 93DA              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 93DA              ;
  22+ 93DA              ; Default map
  23+ 93DA              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 93DA              ;   0          1           2             3              4           5           6           7           8           9
  25+ 93DA              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 93DA              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 93DA              ;                                                                                                       Find System
  28+ 93DA              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 93DA              ;   10         11          12            13             14          15          16          17          18          19
  30+ 93DA              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 93DA              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 93DA              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 93DA              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 93DA              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 93DA              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 93DA              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 93DA              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 93DA              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 93DA              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 93DA              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 93DA              ;              ResumeGame
  42+ 93DA
  43+ 93DA              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 93DA
  45+ 93DA              c_Pressed_Front         equ 0  * 2
  46+ 93DA              c_Pressed_Aft           equ 1  * 2
  47+ 93DA              c_Pressed_Left          equ 2  * 2
  48+ 93DA              c_Pressed_Right         equ 3  * 2
  49+ 93DA              c_Pressed_RollLeft      equ 4  * 2
  50+ 93DA              c_Pressed_RollRight     equ 5  * 2
  51+ 93DA              c_Pressed_Dive          equ 6  * 2
  52+ 93DA              c_Pressed_Climb         equ 7  * 2
  53+ 93DA              c_Pressed_Accellerate   equ 8  * 2
  54+ 93DA              c_Pressed_Decellerate   equ 9  * 2
  55+ 93DA              c_Pressed_FireLaser     equ 10 * 2
  56+ 93DA              c_Pressed_TargetMissle  equ 11 * 2
  57+ 93DA              c_Pressed_FireMissile   equ 12 * 2
  58+ 93DA              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 93DA              c_Pressed_ECM           equ 14 * 2
  60+ 93DA              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 93DA              c_Pressed_EscapePod     equ 16 * 2
  62+ 93DA              c_Pressed_DockingComp   equ 17 * 2
  63+ 93DA              c_Pressed_Hyperspace    equ 18 * 2
  64+ 93DA              c_Pressed_Distance      equ 19 * 2
  65+ 93DA              c_Pressed_HomeCursor    equ 20 * 2
  66+ 93DA              c_Pressed_Launch        equ 21 * 2
  67+ 93DA              c_Pressed_BuyCargo      equ 22 * 2
  68+ 93DA              c_Pressed_SellCargo     equ 23 * 2
  69+ 93DA              c_Pressed_Equip         equ 24 * 2
  70+ 93DA              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 93DA              c_Pressed_LocalChart    equ 26 * 2
  72+ 93DA              c_Pressed_MarketPrices  equ 27 * 2
  73+ 93DA              c_Pressed_Status        equ 28 * 2
  74+ 93DA              c_Pressed_Inventory     equ 29 * 2
  75+ 93DA              c_Pressed_GameSkip      equ 30 * 2
  76+ 93DA              c_Pressed_Save          equ 31 * 2
  77+ 93DA              c_Pressed_Freeze        equ 32 * 2
  78+ 93DA              c_Pressed_Resume        equ 33 * 2
  79+ 93DA              c_Pressed_Recentre      equ 34 * 2
  80+ 93DA              c_Pressed_Quit          equ 35 * 2
  81+ 93DA              c_Pressed_PlanetData    equ 36 * 2
  82+ 93DA              c_Pressed_CursorUp      equ 37 * 2
  83+ 93DA              c_Pressed_CursorDown    equ 38 * 2
  84+ 93DA              c_Pressed_Find          equ 39 * 2
  85+ 93DA
  86+ 93DA              ; half row 1
  87+ 93DA              VK_CAPS  				equ 0
  88+ 93DA              VK_Z  					equ 1
  89+ 93DA              VK_X  					equ 2
  90+ 93DA              VK_C  					equ 3
  91+ 93DA              VK_V  					equ 4
  92+ 93DA              ; half row 2
  93+ 93DA              VK_A  					equ 5
  94+ 93DA              VK_S  					equ 6
  95+ 93DA              VK_D  					equ 7
  96+ 93DA              VK_F  					equ 8
  97+ 93DA              VK_G  					equ 9
  98+ 93DA              ; half row 3
  99+ 93DA              VK_Q  					equ 10
 100+ 93DA              VK_W  					equ 11
 101+ 93DA              VK_E  					equ 12
 102+ 93DA              VK_R  					equ 13
 103+ 93DA              VK_T  					equ 14
 104+ 93DA              ; half row 4
 105+ 93DA              VK_1  					equ 15
 106+ 93DA              VK_2  					equ 16
 107+ 93DA              VK_3  					equ 17
 108+ 93DA              VK_4  					equ 18
 109+ 93DA              VK_5  					equ 19
 110+ 93DA              ; half row 5
 111+ 93DA              VK_0 					equ 20
 112+ 93DA              VK_9 					equ 21
 113+ 93DA              VK_8 					equ 22
 114+ 93DA              VK_7 					equ 23
 115+ 93DA              VK_6 					equ 24
 116+ 93DA              ; half row 6
 117+ 93DA              VK_P  					equ 25
 118+ 93DA              VK_O  					equ 26
 119+ 93DA              VK_I  					equ 27
 120+ 93DA              VK_U  					equ 28
 121+ 93DA              VK_Y  					equ 29
 122+ 93DA              ; half row 7
 123+ 93DA              VK_ENTER 				equ 30
 124+ 93DA              VK_L  					equ 31
 125+ 93DA              VK_K  					equ 32
 126+ 93DA              VK_J  					equ 33
 127+ 93DA              VK_H  					equ 34
 128+ 93DA              ; half row 8
 129+ 93DA              VK_SPACE 				equ 35
 130+ 93DA              VK_SYM  				equ 36
 131+ 93DA              VK_M  					equ 37
 132+ 93DA              VK_N  					equ 38
 133+ 93DA              VK_B  					equ 39
 134+ 93DA
 135+ 93DA              ;KeyboardMapping
 136+ 93DA              KeyCode_Front        	equ VK_1
 137+ 93DA              KeyCode_Aft          	equ VK_2
 138+ 93DA              KeyCode_Left         	equ VK_3
 139+ 93DA              KeyCode_Right        	equ VK_4
 140+ 93DA              KeyCode_RollLeft     	equ VK_O
 141+ 93DA              KeyCode_RollRight    	equ VK_P
 142+ 93DA              KeyCode_Dive         	equ VK_Q
 143+ 93DA              KeyCode_Climb        	equ VK_A
 144+ 93DA              KeyCode_Accellerate  	equ VK_W
 145+ 93DA              KeyCode_Decellerate  	equ VK_S
 146+ 93DA              KeyCode_FireLaser    	equ VK_SPACE
 147+ 93DA              KeyCode_TargetMissle 	equ VK_T
 148+ 93DA              KeyCode_FireMissile  	equ VK_F
 149+ 93DA              KeyCode_Find        	equ VK_F
 150+ 93DA              KeyCode_UnarmMissile 	equ VK_R
 151+ 93DA              KeyCode_ECM          	equ VK_E
 152+ 93DA              KeyCode_EnergyBomb   	equ VK_U
 153+ 93DA              KeyCode_EscapePod    	equ VK_CAPS
 154+ 93DA              KeyCode_DockingComp  	equ VK_N
 155+ 93DA              KeyCode_Hyperspace   	equ VK_H
 156+ 93DA              KeyCode_Distance     	equ VK_J
 157+ 93DA              KeyCode_HomeCursor   	equ VK_G
 158+ 93DA              KeyCode_Launch       	equ VK_L
 159+ 93DA              KeyCode_BuyCargo     	equ VK_B
 160+ 93DA              KeyCode_SellCargo    	equ VK_V
 161+ 93DA              KeyCode_Equip        	equ VK_C
 162+ 93DA              KeyCode_GalacticChrt 	equ VK_5
 163+ 93DA              KeyCode_LocalChart   	equ VK_6
 164+ 93DA              KeyCode_MarketPrices 	equ VK_7
 165+ 93DA              KeyCode_Status       	equ VK_8
 166+ 93DA              KeyCode_Inventory    	equ VK_9
 167+ 93DA              KeyCode_GameSkip     	equ VK_Z
 168+ 93DA              KeyCode_Save         	equ VK_O
 169+ 93DA              KeyCode_Freeze       	equ VK_B
 170+ 93DA              KeyCode_Resume       	equ VK_L
 171+ 93DA              KeyCode_Recentre     	equ VK_D
 172+ 93DA              KeyCode_Quit         	equ VK_Y
 173+ 93DA              KeyCode_PlanetData   	equ VK_0
 174+ 93DA              KeyCode_CursorUp        equ VK_Q
 175+ 93DA              KeyCode_CursorDown      equ VK_A
 176+ 93DA
 177+ 93DA 00 00 00...  Keys					DS	40
 178+ 9402              c_KeyBoardLen 			equ $ - Keys
 179+ 9402 00 00 00...  RawKeys					DS	8
 180+ 940A FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 940E FE FB FE F7
 180+ 9412 FE EF FE DF
 180+ 9416 FE BF FE 7F
 181+ 941A              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 941A              ; of updating this table with the respective location to look up
 183+ 941A              ; key list sequence is in table above
 184+ 941A E9 93 EA 93  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 941E EB 93 EC 93
 184+ 9422 F4 93
 185+ 9424 F3 93 E4 93                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 9428 DF 93 E5 93
 185+ 942C E0 93
 186+ 942E FD 93 E8 93                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 9432 E2 93 E7 93
 186+ 9436 E6 93
 187+ 9438 F6 93 DA 93                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 943C 00 94 FC 93
 187+ 9440 FB 93
 188+ 9442 E3 93 F9 93                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 9446 01 94 DE 93
 188+ 944A DD 93
 189+ 944C ED 93 F2 93                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 9450 F1 93 F0 93
 189+ 9454 EF 93
 190+ 9456 DB 93 F4 93                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 945A 01 94 F9 93
 190+ 945E E1 93
 191+ 9460 F7 93 EE 93                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 9464 E4 93 DF 93
 191+ 9468 E2 93
 192+ 946A
 193+ 946A 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 193+ 946E 56
 194+ 946F 41 53 44 46                          DB "A","S","D","F","G"
 194+ 9473 47
 195+ 9474 51 57 45 52                          DB "Q","W","E","R","T"
 195+ 9478 54
 196+ 9479 31 32 33 34                          DB "1","2","3","4","5"
 196+ 947D 35
 197+ 947E 30 39 38 37                          DB "0","9","8","7","6"
 197+ 9482 36
 198+ 9483 50 4F 49 55                          DB "P","O","I","U","Y"
 198+ 9487 59
 199+ 9488 3E 4C 4B 4A                          DB ">","L","K","J","H"
 199+ 948C 48
 200+ 948D 20 5E 4D 4E                          DB " ","^","M","N","B"
 200+ 9491 42
 201+ 9492
 202+ 9492
 203+ 9492              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 9492              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 9492              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 9492              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 9492              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 9492              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 9492              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 9492              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 9492              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 9492              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 9492              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 9492              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 9492              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 9492              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 9492              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 9492              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 9492              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 9492              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 9492              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 9492              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 9492              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 9492              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 9492              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 9492              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 9492              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 9492              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 9492              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 9492              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 9492              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 9492              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 9492              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 9492              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 9492              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 9492              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 9492              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 9492              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 9492              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 9492              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 9492              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 9492              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 9492
 244+ 9492
 245+ 9492              MIsKeyPressed:      MACRO   keyaddress, misstarget
 246+ 9492 ~                                ld      hl,(keyaddress)
 247+ 9492 ~                                ld      a,(hl)
 248+ 9492 ~                                JumpIfAIsZero   misstarget
 249+ 9492                                  ENDM
 250+ 9492
 251+ 9492 21 DA 93     init_keyboard:      ld		hl,Keys
 252+ 9495 11 28 00                         ld		de, c_KeyBoardLen
 253+ 9498 3E 00                            ld		a,0
 254+ 949A CD 9F 93                         call	memfill_dma
 255+ 949D C9                               ret
 256+ 949E
 257+ 949E 21 02 94     scan_keyboard:      ld		hl,RawKeys
 258+ 94A1 11 0A 94                         ld		de,KeyAddrTab
 259+ 94A4 AF                               xor		a
 260+ 94A5 FD 2E 08                         ld		iyl,8
 261+ 94A8 DD 21 DA 93                      ld      ix,Keys
 262+ 94AC 1A           .PortReadLoop:      ld		a,(de)							; Set up BC as port to read
 263+ 94AD 4F                               ld		c,a
 264+ 94AE 13                               inc		de
 265+ 94AF 1A                               ld      a,(de)
 266+ 94B0 47                               ld		b,a
 267+ 94B1 13                               inc		de
 268+ 94B2 ED 78                            in		a,(c)							; read port to a
 269+ 94B4 77                               ld		(hl),a							; set raw keys to value
 270+ 94B5 23                               inc		hl								; and ready for next element
 271+ 94B6 06 05                            ld		b,5								; loop all bits (there are only 5 keys to a group)
 272+ 94B8 CB 47        .ProcessBitsLoop:   bit		0,a								; is bit set
 273+ 94BA 28 07                            jr      z,.SetKeyPressed
 274+ 94BC 08                               ex      af,af'
 275+ 94BD AF                               xor     a
 276+ 94BE C3 CA 94                         jp      .SetKey
 277+ 94C1 20 0B                            jr		nz,.SkipKeySet
 278+ 94C3 08           .SetKeyPressed:	    ex		af,af'
 279+ 94C4 DD 7E 00                         ld      a,(ix+0)
 280+ 94C7 3C                               inc     a
 281+ 94C8 E6 03                            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 282+ 94CA DD 77 00     .SetKey:            ld		(ix+0),a							; Key Pressed
 283+ 94CD 08                               ex		af,af'
 284+ 94CE DD 23        .SkipKeySet:	    inc		ix								; move to next key
 285+ 94D0 CB 3F                            srl		a								; move next key into bit 0
 286+ 94D2 10 E4                            djnz	.ProcessBitsLoop				; Process all key group bits
 287+ 94D4 FD 2D                            dec     iyl
 288+ 94D6 20 D4                            jr      nz,.PortReadLoop				; Read next input port
 289+ 94D8 C9                               ret
 290+ 94D9
 291+ 94D9              GetKeyStateAddressDE: MACRO
 292+ 94D9 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 293+ 94D9 ~                                  add     hl,a
 294+ 94D9 ~                                  ld      a,(hl)
 295+ 94D9 ~                                  ld      e,a
 296+ 94D9 ~                                  inc     hl
 297+ 94D9 ~                                  ld      a,(hl)
 298+ 94D9 ~                                  ld      d,a                             ; now de = address in keypress list
 299+ 94D9                                    ENDM
 300+ 94D9
 301+ 94D9
 302+ 94D9              ; call with a = c_Pressed key, will then read mapping
 303+ 94D9              wait_for_key_a_press:       GetKeyStateAddressDE
 303+ 94D9 21 1A 94    >                      ld      hl,KeyboardMap                  ; work our address to read from
 303+ 94DC ED 31       >                      add     hl,a
 303+ 94DE 7E          >                      ld      a,(hl)
 303+ 94DF 5F          >                      ld      e,a
 303+ 94E0 23          >                      inc     hl
 303+ 94E1 7E          >                      ld      a,(hl)
 303+ 94E2 57          >                      ld      d,a                             ; now de = address in keypress list
 304+ 94E3 D5                                       push    de
 305+ 94E4 CD 9E 94     wait_for_key_press_loop:    call    scan_keyboard
 306+ 94E7 E1                                       pop     hl                              ; get key address into hl
 307+ 94E8 E5                                       push    hl
 308+ 94E9 7E                                       ld      a,(hl)
 309+ 94EA                                          JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 309+ 94EA FE 01       >                        cp     1
 309+ 94EC C2 E4 94    >                        jp      nz,wait_for_key_press_loop
 310+ 94EF E1                                       pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 311+ 94F0 C9                                       ret
 312+ 94F1
 313+ 94F1              wait_for_key_a_held:        GetKeyStateAddressDE
 313+ 94F1 21 1A 94    >                      ld      hl,KeyboardMap                  ; work our address to read from
 313+ 94F4 ED 31       >                      add     hl,a
 313+ 94F6 7E          >                      ld      a,(hl)
 313+ 94F7 5F          >                      ld      e,a
 313+ 94F8 23          >                      inc     hl
 313+ 94F9 7E          >                      ld      a,(hl)
 313+ 94FA 57          >                      ld      d,a                             ; now de = address in keypress list
 314+ 94FB D5                                       push    de
 315+ 94FC CD 9E 94     wait_for_key_a_held_loop:   call    scan_keyboard
 316+ 94FF E1                                       pop     hl
 317+ 9500 E5                                       push    hl
 318+ 9501 7E                                       ld      a,(hl)
 319+ 9502                                          JumpIfALTNusng  2,wait_for_key_a_held_loop
 319+ 9502 FE 02       >                        cp      2
 319+ 9504 DA FC 94    >                        jp		c, wait_for_key_a_held_loop
 320+ 9507 E1                                       pop     hl
 321+ 9508 C9                                       ret
 322+ 9509
 323+ 9509              get_key_a_state:            GetKeyStateAddressDE                 ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 323+ 9509 21 1A 94    >                      ld      hl,KeyboardMap                  ; work our address to read from
 323+ 950C ED 31       >                      add     hl,a
 323+ 950E 7E          >                      ld      a,(hl)
 323+ 950F 5F          >                      ld      e,a
 323+ 9510 23          >                      inc     hl
 323+ 9511 7E          >                      ld      a,(hl)
 323+ 9512 57          >                      ld      d,a                             ; now de = address in keypress list
 324+ 9513 EB                                       ex      de,hl
 325+ 9514 7E                                       ld      a,(hl)                        ; a = keystate
 326+ 9515 C9                                       ret
 327+ 9516
 328+ 9516              force_key_press:            GetKeyStateAddressDE
 328+ 9516 21 1A 94    >                      ld      hl,KeyboardMap                  ; work our address to read from
 328+ 9519 ED 31       >                      add     hl,a
 328+ 951B 7E          >                      ld      a,(hl)
 328+ 951C 5F          >                      ld      e,a
 328+ 951D 23          >                      inc     hl
 328+ 951E 7E          >                      ld      a,(hl)
 328+ 951F 57          >                      ld      d,a                             ; now de = address in keypress list
 329+ 9520 EB                                       ex      de,hl
 330+ 9521 3E 01                                    ld      a,1
 331+ 9523 77                                       ld      (hl),a
 332+ 9524 C9                                       ret
 333+ 9525
 334+ 9525              ; returns z is set if c_ key is pressed
 335+ 9525              is_key_pressed:             GetKeyStateAddressDE
 335+ 9525 21 1A 94    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 9528 ED 31       >                      add     hl,a
 335+ 952A 7E          >                      ld      a,(hl)
 335+ 952B 5F          >                      ld      e,a
 335+ 952C 23          >                      inc     hl
 335+ 952D 7E          >                      ld      a,(hl)
 335+ 952E 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 952F EB                                       ex      de,hl
 337+ 9530 7E                                       ld      a,(hl)                          ; a = keystate
 338+ 9531 FE 01                                    cp      1
 339+ 9533 C9                                       ret
 340+ 9534
 341+ 9534              ; returns z is set if c_ key is held
 342+ 9534              is_key_held:                GetKeyStateAddressDE
 342+ 9534 21 1A 94    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 9537 ED 31       >                      add     hl,a
 342+ 9539 7E          >                      ld      a,(hl)
 342+ 953A 5F          >                      ld      e,a
 342+ 953B 23          >                      inc     hl
 342+ 953C 7E          >                      ld      a,(hl)
 342+ 953D 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 953E EB                                       ex      de,hl
 344+ 953F 7E                                       ld      a,(hl)                          ; a = keystate
 345+ 9540 E6 02                                    and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 346+ 9542 FE 02                                    cp      2
 347+ 9544 C9                                       ret
 348+ 9545
 349+ 9545              is_any_key_pressed:
 350+ 9545 21 DA 93         ld      hl,Keys
 351+ 9548 06 28            ld      b,40
 352+ 954A 0E 00            ld      c,0
 353+ 954C              .KeyReadLoop:
 354+ 954C 7E               ld      a,(hl)
 355+ 954D FE 01            cp      1
 356+ 954F CA 59 95         jp      z,.KeyPressed
 357+ 9552 23               inc     hl
 358+ 9553 0C               inc     c
 359+ 9554 10 F6            djnz    .KeyReadLoop
 360+ 9556                  SetAFalse
 360+ 9556 3E FF       >                        ld      a,$FF
 361+ 9558 C9               ret
 362+ 9559              .KeyPressed:
 363+ 9559 79               ld      a,c
 364+ 955A C9               ret
 365+ 955B
 366+ 955B              is_any_key_held:
 367+ 955B 21 DA 93         ld      hl,Keys
 368+ 955E 06 28            ld      b,40
 369+ 9560 0E 00            ld      c,0
 370+ 9562              .KeyReadLoop:
 371+ 9562 7E               ld      a,(hl)
 372+ 9563 E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 373+ 9565 FE 02            cp      2
 374+ 9567 CA 71 95         jp      z,.KeyPressed
 375+ 956A 23               inc     hl
 376+ 956B 0C               inc     c
 377+ 956C 10 F4            djnz    .KeyReadLoop
 378+ 956E                  SetAFalse
 378+ 956E 3E FF       >                        ld      a,$FF
 379+ 9570 C9               ret
 380+ 9571              .KeyPressed:
 381+ 9571 79               ld      a,c
 382+ 9572 C9               ret
 383+ 9573
 384+ 9573
 385+ 9573 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 386+ 9591 00                                   DB  0               ; end of string marker as a safety
 387+ 9592 00           InputCursor             DB  0
 388+ 9593 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 389+ 9594 00           InputChanged            DB  0
 390+ 9595              InputLimit              EQU 20
 391+ 9595
 392+ 9595              keyboard_copy_input_to_de:
 393+ 9595 21 73 95         ld      hl,InputString
 394+ 9598 3A 92 95         ld      a,(InputCursor)
 395+ 959B FE 00            cp      0
 396+ 959D 28 05            jr      z,.NoString
 397+ 959F 4F               ld      c,a
 398+ 95A0 06 00            ld      b,0
 399+ 95A2 ED B0            ldir
 400+ 95A4              .NoString
 401+ 95A4 3E 00            ld      a,0
 402+ 95A6 12               ld      (de),a
 403+ 95A7 C9               ret
 404+ 95A8
 405+ 95A8              initInputText:
 406+ 95A8 AF               xor     a
 407+ 95A9 32 92 95         ld      (InputCursor),a
 408+ 95AC 32 93 95         ld      (EnterPressed),a
 409+ 95AF 32 94 95         ld      (InputChanged),a
 410+ 95B2 21 73 95         ld      hl,InputString
 411+ 95B5 06 1E            ld      b,30
 412+ 95B7              .wipeloop:
 413+ 95B7 77               ld      (hl),a
 414+ 95B8 23               inc     hl
 415+ 95B9 10 FC            djnz    .wipeloop
 416+ 95BB C9               ret
 417+ 95BC
 418+ 95BC AF           InputName:              xor     a
 419+ 95BD 32 94 95                             ld      (InputChanged),a
 420+ 95C0 CD 45 95                             call    is_any_key_pressed
 421+ 95C3 FE FF                                cp      $FF
 422+ 95C5 C8                                   ret     z
 423+ 95C6 4F           .KeyPressed:            ld      c,a
 424+ 95C7 3A 92 95                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 425+ 95CA FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 426+ 95CC 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 427+ 95CE 21 6A 94                             ld      hl,ASCII_Map
 428+ 95D1 79                                   ld      a,c
 429+ 95D2 ED 31                                add     hl,a
 430+ 95D4 7E                                   ld      a,(hl)
 431+ 95D5 FE 41                                cp      "A"
 432+ 95D7 30 15                                jr      nc,.AlphaPressed
 433+ 95D9              ; CAPS and Symbol act as delete for now
 434+ 95D9 FE 30        .DeleteOrEnterOnly      cp      "0"                             ; if 0 was preseed check caps shift too
 435+ 95DB 28 3B                                jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 436+ 95DD FE 3E                                cp      ">"         ; ENTER
 437+ 95DF 28 24                                jr      z,.EnterPressed
 438+ 95E1 FE 23                                cp      "#"         ; CAPS
 439+ 95E3 28 33                                jr      z,.CapsPressed
 440+ 95E5 FE 5E                                cp      "^"         ; SYMBOLSHIFT
 441+ 95E7 28 2F                                jr      z,.SymbolPressed
 442+ 95E9 FE 20                                cp      " "         ; space
 443+ 95EB 28 2B                                jr      z,.SpacePressed
 444+ 95ED C9                                   ret
 445+ 95EE 47           .AlphaPressed:          ld      b,a
 446+ 95EF 3A 92 95                             ld      a,(InputCursor)
 447+ 95F2 4F                                   ld      c,a
 448+ 95F3 21 73 95                             ld      hl,InputString
 449+ 95F6 ED 31                                add     hl,a
 450+ 95F8 78                                   ld      a,b
 451+ 95F9 70                                   ld      (hl),b
 452+ 95FA 79                                   ld      a,c
 453+ 95FB 21 92 95                             ld      hl,InputCursor
 454+ 95FE 34                                   inc     (hl)
 455+ 95FF                                      SetMemFalse InputChanged
 455+ 95FF 3E FF       >                        ld      a,$FF
 455+ 9601 32 94 95    >                        ld      (InputChanged),a
 456+ 9604 C9                                   ret
 457+ 9605 3A 92 95     .EnterPressed:          ld      a,(InputCursor)
 458+ 9608 3C                                   inc     a
 459+ 9609 21 73 95                             ld      hl,InputString
 460+ 960C ED 31                                add     hl,a
 461+ 960E AF                                   xor     a
 462+ 960F 77                                   ld      (hl),a
 463+ 9610 3D                                   dec     a
 464+ 9611 32 93 95                             ld      (EnterPressed),a
 465+ 9614 32 94 95                             ld      (InputChanged),a
 466+ 9617 C9                                   ret
 467+ 9618              .CheckShiftDelete:
 468+ 9618              .CapsPressed:                               ; act as a delete key for now
 469+ 9618              .SymbolPressed:
 470+ 9618 3A 92 95     .SpacePressed:          ld      a,(InputCursor)
 471+ 961B FE 00                                cp      0
 472+ 961D C8                                   ret     z
 473+ 961E 3D                                   dec     a
 474+ 961F 32 92 95                             ld      (InputCursor),a
 475+ 9622 21 73 95                             ld      hl,InputString
 476+ 9625 ED 31                                add     hl,a
 477+ 9627 AF                                   xor     a
 478+ 9628 77                                   ld      (hl),a
 479+ 9629                                      SetMemFalse InputChanged
 479+ 9629 3E FF       >                        ld      a,$FF
 479+ 962B 32 94 95    >                        ld      (InputChanged),a
 480+ 962E C9                                   ret
 481+ 962F
 482+ 962F AF           MovementKeyTest:        xor     a
 483+ 9630 32 ED 97                             ld      (CursorKeysPressed),a
 484+ 9633 3A EF 97                             ld      a,(MenuIdMax)
 485+ 9636 E6 FC                                and     $FC
 486+ 9638 20 26                                jr      nz,CursorKeys
 487+ 963A 2A 28 94     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)
 488+ 963D 7E                                   ld      a,(hl)
 489+ 963E                                      JumpIfAIsZero ScanDiveKey
 489+ 963E A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 489+ 963F CA 4D 96    >                        jp	z, ScanDiveKey
 490+ 9642 3A ED 97                             ld      a,(CursorKeysPressed)
 491+ 9645 F6 80                                or      $80
 492+ 9647 32 ED 97                             ld      (CursorKeysPressed),a
 493+ 964A C3 83 96                             jp      ScanLeftKey
 494+ 964D 2A 26 94     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)
 495+ 9650 7E                                   ld      a,(hl)
 496+ 9651                                      JumpIfAIsZero ScanLeftKey
 496+ 9651 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 496+ 9652 CA 83 96    >                        jp	z, ScanLeftKey
 497+ 9655 3A ED 97                             ld      a,(CursorKeysPressed)
 498+ 9658 F6 40                                or      $40
 499+ 965A 32 ED 97                             ld      (CursorKeysPressed),a
 500+ 965D C3 83 96                             jp      ScanLeftKey
 501+ 9660 2A 64 94     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)
 502+ 9663 7E                                   ld      a,(hl)
 503+ 9664                                      JumpIfAIsZero ScanCursorDownKey
 503+ 9664 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 503+ 9665 CA 73 96    >                        jp	z, ScanCursorDownKey
 504+ 9668 3A ED 97                             ld      a,(CursorKeysPressed)
 505+ 966B F6 80                                or      $80
 506+ 966D 32 ED 97                             ld      (CursorKeysPressed),a
 507+ 9670 C3 83 96                             jp      ScanLeftKey
 508+ 9673 2A 66 94     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 509+ 9676 7E                                   ld      a,(hl)
 510+ 9677                                      JumpIfAIsZero ScanLeftKey
 510+ 9677 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 510+ 9678 CA 83 96    >                        jp	z, ScanLeftKey
 511+ 967B 3A ED 97                             ld      a,(CursorKeysPressed)
 512+ 967E F6 40                                or      $40
 513+ 9680 32 ED 97                             ld      (CursorKeysPressed),a
 514+ 9683 2A 22 94     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 515+ 9686 7E                                   ld      a,(hl)
 516+ 9687                                      JumpIfAIsZero ScanRightKey
 516+ 9687 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 516+ 9688 CA 94 96    >                        jp	z, ScanRightKey
 517+ 968B 3A ED 97                             ld      a,(CursorKeysPressed)
 518+ 968E F6 20                                or      $20
 519+ 9690 32 ED 97                             ld      (CursorKeysPressed),a
 520+ 9693 C9                                   ret
 521+ 9694 2A 24 94     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 522+ 9697 7E                                   ld      a,(hl)
 523+ 9698                                      JumpIfAIsZero ScanHomeKey
 523+ 9698 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 523+ 9699 CA A5 96    >                        jp	z, ScanHomeKey
 524+ 969C 3A ED 97                             ld      a,(CursorKeysPressed)
 525+ 969F F6 10                                or      $10
 526+ 96A1 32 ED 97                             ld      (CursorKeysPressed),a
 527+ 96A4 C9                                   ret
 528+ 96A5 2A 42 94     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 529+ 96A8 7E                                   ld      a,(hl)
 530+ 96A9                                      JumpIfAIsZero ScanRecentreKey
 530+ 96A9 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 530+ 96AA CA B6 96    >                        jp	z, ScanRecentreKey
 531+ 96AD 3A ED 97                             ld      a,(CursorKeysPressed)
 532+ 96B0 F6 08                                or      $08
 533+ 96B2 32 ED 97                             ld      (CursorKeysPressed),a
 534+ 96B5 C9                                   ret
 535+ 96B6 2A 5E 94     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 536+ 96B9 7E                                   ld      a,(hl)
 537+ 96BA                                      ReturnIfAIsZero
 537+ 96BA A7          >                        and     a
 537+ 96BB C8          >                        ret     z
 538+ 96BC 3A ED 97                             ld      a,(CursorKeysPressed)
 539+ 96BF F6 04                                or      $04
 540+ 96C1 32 ED 97                             ld      (CursorKeysPressed),a
 541+ 96C4 C9                                   ret
 542+ 96C5
 543+ 96C5
# file closed: ./Hardware/keyboard.asm
1033  96C5
1034  96C5                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 96C5              ;Contants
   2+ 96C5
   3+ 96C5              SignMask8Bit		equ %01111111
   4+ 96C5              SignMask16Bit		equ %0111111111111111
   5+ 96C5              SignOnly8Bit		equ $80
   6+ 96C5              SignOnly16Bit		equ $8000
   7+ 96C5
   8+ 96C5              Bit7Only            equ %10000000
   9+ 96C5              Bit6Only            equ %01000000
  10+ 96C5              Bit5Only            equ %00100000
  11+ 96C5              Bit4Only            equ %00010000
  12+ 96C5              Bit3Only            equ %00001000
  13+ 96C5              Bit2Only            equ %00000100
  14+ 96C5              Bit1Only            equ %00000010
  15+ 96C5              Bit0Only            equ %00000001
  16+ 96C5              Bit7Clear           equ %01111111
  17+ 96C5
  18+ 96C5              ConstPi				equ $80
  19+ 96C5              ConstNorm           equ 197
  20+ 96C5
  21+ 96C5              ;Text Tokens
  22+ 96C5              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  23+ 96C5              BrabenBellToken 	equ $0D
  24+ 96C5              AcorToken			equ $0C
  25+ 96C5
  26+ 96C5              ; Intro Screen
  27+ 96C5              TitleShip			equ	$8C
  28+ 96C5              RotationUnity		equ $60
  29+ 96C5              DBCheckCode			equ $DB
  30+ 96C5              MaxVisibility		equ $1F
  31+ 96C5              FarInFront			equ $C0
  32+ 96C5
  33+ 96C5              ; Universe Managment
  34+ 96C5              ShipTypeJunk        equ 3
  35+ 96C5              ShipTypeStation     equ 2
  36+ 96C5              ShipTypeMissile     equ 1
  37+ 96C5              ShipTypeNormal      equ 0
  38+ 96C5              ShipTypeEmpty       equ 255
  39+ 96C5              ; TacticsControl
  40+ 96C5              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  41+ 96C5              ShipIsBountyHunter  equ Bit1Only   ;
  42+ 96C5              ShipIsHostile       equ Bit2Only   ;
  43+ 96C5              ShipIsPirate        equ Bit3Only   ;
  44+ 96C5              ShipIsDocking       equ Bit4Only   ;
  45+ 96C5              ShipIsBystander     equ Bit5Only   ;
  46+ 96C5              ShipIsCop           equ Bit6Only   ;
  47+ 96C5              ShipIsScoopDockEsc  equ Bit7Only   ;
  48+ 96C5              ShipAIEnabled       equ Bit7Only   ;
  49+ 96C5              ShipExploding       equ Bit5Only
  50+ 96C5              ShipKilled          equ Bit7Clear
  51+ 96C5
  52+ 96C5              ; UniverseAIControl
  53+ 96C5              ShipCanAnger        equ %00000001
  54+ 96C5
  55+ 96C5
  56+ 96C5              ShipMaxDistance     equ 192
  57+ 96C5              HyperSpaceTimers    equ $0B0B
  58+ 96C5
  59+ 96C5
  60+ 96C5              MaxNumberOfStars	equ 11
  61+ 96C5
  62+ 96C5              ShipTypeSize		equ	32 			;??????? just a guess for now
  63+ 96C5              ShipSST				equ 4			; its a space station
  64+ 96C5              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  65+ 96C5              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  66+ 96C5              ShipCountMax		equ	2			; For now just 2 ships to debug
  67+ 96C5              LineLimitPerShip	equ 70			; Max lines per ship
  68+ 96C5              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  69+ 96C5              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  70+ 96C5              PlayerDocked		equ	$FF
  71+ 96C5
  72+ 96C5              ; Memory page managment	(Refers to a memory slot as a place to access data)
  73+ 96C5              ShipDataSlot		equ	6			; this may move into rom swap out space later
  74+ 96C5              UniverseObjectSlot	equ	7
  75+ 96C5
  76+ 96C5              KeyForwardsView		equ	$20
  77+ 96C5              ; Game specific equates
  78+ 96C5              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
  79+ 96C5
  80+ 96C5              ;...Game Colour Mapping
  81+ 96C5              L2DustColour        equ L2ColourGREY_1
  82+ 96C5              L2SunScannerBright  equ 252
  83+ 96C5              L2SunScanner        equ 180
  84+ 96C5
  85+ 96C5
  86+ 96C5              ; Ship Data
  87+ 96C5              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  88+ 96C5              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  89+ 96C5              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  90+ 96C5              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  91+ 96C5              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  92+ 96C5              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  93+ 96C5              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  94+ 96C5              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  95+ 96C5              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  96+ 96C5              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  97+ 96C5              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  98+ 96C5              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  99+ 96C5              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 100+ 96C5              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 101+ 96C5              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 102+ 96C5              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 103+ 96C5              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 104+ 96C5              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 105+ 96C5              ;;;;00 00			 EQUW 0     \ type 18 is
 106+ 96C5              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 107+ 96C5              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 108+ 96C5              ;;;;00 00			 EQUW 0     \ type 21 is
 109+ 96C5              ;;;;00 00			 EQUW 0     \ type 22 is
 110+ 96C5              ;;;;00 00			 EQUW 0     \ type 23 is
 111+ 96C5              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 112+ 96C5              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 113+ 96C5              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 114+ 96C5              ;;;;00 00			 EQUW 0     \ type 27 is
 115+ 96C5              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 116+ 96C5              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 117+ 96C5              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 118+ 96C5              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 119+ 96C5              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 120+ 96C5              ;;;;			\ NEWB examples
 121+ 96C5              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 122+ 96C5              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 123+ 96C5              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 124+ 96C5              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 125+ 96C5              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 126+ 96C5
# file closed: ./Variables/constant_equates.asm
1035  96C5                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 96C5
   2+ 96C5
   3+ 96C5 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 96C7 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 96C9              ; Variables to simulate 6502 registers until code fixed
   6+ 96C9              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 96C9 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 96CA 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 96CB 00           regA		DB	0
  10+ 96CC
  11+ 96CC
  12+ 96CC 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 96CD 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 96CF 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 96D1
  16+ 96D1
  17+ 96D1
  18+ 96D1              ;XX16		DS	16				; 16 byte Matrix
  19+ 96D1
  20+ 96D1              P0INWK							; page 0 & 46
  21+ 96D1              p0INWK31						; page 0 & 65
  22+ 96D1              P0INWK36						; PAGE 0 &6A
  23+ 96D1
  24+ 96D1 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 96D2              LastNormalVisible	equ	XX4
  26+ 96D2              varXX4              equ XX4
  27+ 96D2
  28+ 96D2
  29+ 96D2
  30+ 96D2 00           PATG		DB	0				; 6502 &03C9
  31+ 96D3 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 96D5
  33+ 96D5
  34+ 96D5              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 96D5              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 96D5
  37+ 96D5              ; Present System Variables
  38+ 96D5
  39+ 96D5 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
  40+ 96D6 20           RandomSeed1				DB	32	; 01
  41+ 96D7 0C           RandomSeed2				DB	12			; 02
  42+ 96D8 42           RandomSeed3				DB	66			; 03
  43+ 96D9
  44+ 96D9 00           varT1					DB	0				; 06
  45+ 96DA 00           SClo					DB 0				; 07
  46+ 96DB 00           SChi					DB 0				; 08
  47+ 96DC 00           varP					DB 0 				; 10	XX16+7
  48+ 96DD 00           varPhi					DB 0 				; 11	XX16+8
  49+ 96DE 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 96DF              varPp1                  equ varPhi
  51+ 96DF              varPp2                  equ varPhi2
  52+ 96DF 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 96E0 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 96E1              UnivPointer				equ	UnivPointerLo
  55+ 96E1 00           varV					DB 0				; 22                          XX0+4
  56+ 96E2 00           varVHi					DB 0				; 23                          XX0+5
  57+ 96E3 00           varXXlo                 DB 0                ; 24
  58+ 96E4 00           varXXHi                 DB 0                ; 25
  59+ 96E5              varXX					equ	varXXlo
  60+ 96E5 00           YYlo                    DB 0                ; 26
  61+ 96E6 00           YYHi                    DB 0                ; 27
  62+ 96E7              varYY					equ	YYlo
  63+ 96E7              											;	28
  64+ 96E7              											;	29
  65+ 96E7              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 96E7 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
  67+ 96E8 00           BETA 					DB	0               ; 2A        (pitch done)
  68+ 96E9 00           JSTY                    DB  0               ; Joystick analog
  69+ 96EA 00           BET1 					DB	0               ; 2B        lower7 magnitude
  70+ 96EB 00           BET2                    DB  0               ;            climb sign
  71+ 96EC 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  72+ 96ED 1F           BET1MAXC                DB  31              ; max climb
  73+ 96EE E1           BET1MAXD                DB  -31             ; max dive
  74+ 96EF 00           XC						DB	0               ; 2C
  75+ 96F0 00           YC						DB 	0               ; 2D
  76+ 96F1 00           InnerHyperCount			DB 	0				; 2F QQ22+1
  77+ 96F2 00           OuterHyperCount			DB 	0				; 2E QQ22
  78+ 96F3 00           HyperCircle             DB  0
  79+ 96F4              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  80+ 96F4 00           ECMActive				DB 	0				; 30		ECM Active flag
  81+ 96F5 00           ECMLoopA                DB  0
  82+ 96F6 00           ECMLoopB                DB  0
  83+ 96F7 00 00        JSTX                    DW  0               ;           Joystick analog value
  84+ 96F9 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  85+ 96FA 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  86+ 96FB 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  87+ 96FC 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  88+ 96FD 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  89+ 96FE E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  90+ 96FF
  91+ 96FF
  92+ 96FF
  93+ 96FF              MAXMESSAGES             EQU 5
  94+ 96FF              MESSAGETIMELIMIT        EQU 20
  95+ 96FF              MESSAGESIZE             EQU 33
  96+ 96FF              MESSAGELINE             EQU $0001
  97+ 96FF
  98+ 96FF 00           MessageCount            DB  0                ; used for enquing messages later
  99+ 9700 00           MessageCurrent          DB  0
 100+ 9701 05 00        MessageIndex            DW  MAXMESSAGES
 101+ 9703 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 102+ 97A8 05           MessageTimeout          DB  MAXMESSAGES
 103+ 97A9 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 104+ 97CE
 105+ 97CE              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 106+ 97CE              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 107+ 97CE              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 108+ 97CE 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 109+ 97CF              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 110+ 97CF
 111+ 97CF
 112+ 97CF 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 113+ 97D4              											;	6D		QQ15+1
 114+ 97D4              											;	6E		QQ15+2
 115+ 97D4              											;	6F		QQ15+3
 116+ 97D4              											;	70		QQ15+4
 117+ 97D4              											;	71		QQ15+5
 118+ 97D4 00           QQ17					DB	0				;   72
 119+ 97D5 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 120+ 97D6 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 121+ 97D7 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 122+ 97D8 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 123+ 97D9 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 124+ 97DA 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 125+ 97DB 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 126+ 97DC 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 127+ 97DD 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 128+ 97DE
 129+ 97DE 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 130+ 97DF 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 131+ 97E0 00           DELT4Lo					DB 	0				; 7E
 132+ 97E1 00           DELT4Hi					DB 	0				; 7F
 133+ 97E2              DELTA4                  equ                 DELT4Lo
 134+ 97E2
 135+ 97E2
 136+ 97E2              ; Not thise must be in this order else 16 bit fetches will fail
 137+ 97E2 00           varU                    DB  0               ;   80
 138+ 97E3 00           varQ					DB  0 				;	81
 139+ 97E4 00           varR					DB  0 				;	82
 140+ 97E5 00           varS					DB  0 				;	83
 141+ 97E6              varRS                   equ varR
 142+ 97E6
 143+ 97E6 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 144+ 97E8
 145+ 97E8 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 146+ 97E9 00           YSAV                    DB  0               ; 85
 147+ 97EA 00           XX17					DB	0				; 86
 148+ 97EB              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 149+ 97EB              varXX17                 equ  XX17
 150+ 97EB 00           ScreenChanged           DB  0
 151+ 97EC 00           ScreenIndex             DB  0
 152+ 97ED 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 153+ 97EE                                                          ; 7    6    5    4     3    2        1    0
 154+ 97EE                                                          ; Up   Down Left Right Home Recentre
 155+ 97EE 00           InvertedYAxis           DB  0
 156+ 97EF 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 157+ 97F0              											; Bit 7 Set  ShortRangeChart    $80
 158+ 97F0              											; Bit 6 Set  Galactic Chart     $40
 159+ 97F0              											; Bit 5 Set  Market Place       $20
 160+ 97F0              											; Bit 4 Set  Status Screen      $10
 161+ 97F0              											; Bit 3 Set  Display Inventory  $08
 162+ 97F0                                                          ; Bit 2 Set  Planet Data        $04
 163+ 97F0                                                          ; View bit combinations if the ones above not matched
 164+ 97F0                                                          ; bits 1 0
 165+ 97F0                                                          ;      1 1  Front view , i.e. $03
 166+ 97F0                                                          ;      1 0  Aft View          $02
 167+ 97F0                                                          ;      0 1  Left View         $01
 168+ 97F0                                                          ;      0 0  Right view        $00
 169+ 97F0              											; Bit 0 Set  Data On System
 170+ 97F0              											; 0  Space View (Not a menu)
 171+ 97F0 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 172+ 97F1 00           XX13                    DB  0               ;   89
 173+ 97F2 00           TYPE					DB	0				; 8C used for ship type in drawing
 174+ 97F3              ;Docked flag = 00 = in free space
 175+ 97F3              ;              FF = Docked
 176+ 97F3              ;              FE = transition
 177+ 97F3              ;              FD = Setup open space and transition to not docked
 178+ 97F3              ;              FC = Hyperspace manimation
 179+ 97F3              ;              FB = Hyperspace complete
 180+ 97F3 00           DockedFlag				DB	0				; 8E -
 181+ 97F4 00           GamePaused              DB  0
 182+ 97F5 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 183+ 97F6 00           varCNT                  DB  0               ; 93
 184+ 97F7
 185+ 97F7 00           varK					DB	0				; 40
 186+ 97F8 00           varKp1					DB	0				; 41
 187+ 97F9 00           varKp2					DB	0				; 42
 188+ 97FA 00           varKp3					DB	0				; 43
 189+ 97FB
 190+ 97FB 00           varK2                   DB  0               ; 9B
 191+ 97FC 00           varK2p1                 DB  0               ; 9C K2 plus 1
 192+ 97FD 00           varK2p2                 DB  0               ; 9D K2 plus 2
 193+ 97FE 00           varK2p3                 DB  0               ; 9E K2 plus 3
 194+ 97FF
 195+ 97FF 00           Point                   DB  0               ; 9F      POINT
 196+ 9800
 197+ 9800 00           varT					DB	0				; D1
 198+ 9801
 199+ 9801 00 00 00...  varVector9ByteWork      DS  9
 200+ 980A
 201+ 980A 00 00 00 00  varK3					DS	4				; D2
 202+ 980E 00           varK3p2					DB	0				; 42
 203+ 980F 00           varK3p3					DB	0				; 43
 204+ 9810              varK3p1					equ varK3+1			; D3
 205+ 9810 00 00 00 00  varK4					DS	4				; E0
 206+ 9814              varK4p1					equ varK4+1			; D3
 207+ 9814
 208+ 9814
 209+ 9814              ;Heap
 210+ 9814
 211+ 9814 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 212+ 9816 00 00 00...  HeapData				DS	50
 213+ 9848              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 214+ 9848              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 215+ 9848              ; i.e. a list of programmed missiles in universe slot list code
 216+ 9848 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 217+ 984F              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 218+ 984F              ;  #&5 Does J reverse both joystick channels
 219+ 984F              ;  #&4 Does Y reverse joystick Y channel			03CB
 220+ 984F              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 221+ 984F              ;  #&3 Does F toggle flashing information			03CA
 222+ 984F              ;  #&1 Does A toggle keyboard auto-recentering ?
 223+ 984F              ;  #&0 Caps-lock toggles keyboard flight damping
 224+ 984F 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 225+ 9850 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 226+ 9851 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 227+ 9861 00           AlienItemsAvaliability  DB	0				; 039D
 228+ 9862 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 229+ 9863 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 230+ 9865 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 231+ 9866              											;
 232+ 9866 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 233+ 9867 00           MarketPrice				DB	0				; 03AA QQ24
 234+ 9868 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 235+ 9869 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 236+ 986A 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 237+ 986B 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 238+ 986D              											; this is ship lines stack pointer so may be redundant with paging
 239+ 986D              											; LS = line stack so we will have one for now to remove later
 240+ 986D 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 241+ 986E 00           DisplayEcononmy			DB	0				; 03B8
 242+ 986F 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 243+ 9870 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 244+ 9871 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 245+ 9873 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 246+ 9875 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 247+ 9877 00 00        DisplayRadius			DW	0
 248+ 9879              ; --- Used in creation of sun and planet----;
 249+ 9879 00           PlanetXPos              DS  1
 250+ 987A 00           PlanetYPos              DS  1
 251+ 987B 00           PlanetZPos              DS  1
 252+ 987C 00           PlanetType              DS  1
 253+ 987D 00           SunXPos                 DS  1
 254+ 987E 00           SunYPos                 DS  1
 255+ 987F 00           SunZPos                 DS  1
 256+ 9880              ; -- Current Missile Runbtime data
 257+ 9880 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 258+ 9881 00 00        MissileXPos             DW      0
 259+ 9883 00           MissileXSgn             DB      0
 260+ 9884 00 00        MissileYPos             DW      0
 261+ 9886 00           MissileYSgn             DB      0
 262+ 9887 00 00        MissileZPos             DW      0
 263+ 9889 00           MissileZSgn             DB      0
 264+ 988A 00 00        CurrentTargetXpos       DS      2
 265+ 988C 00 00        CurrentTargetXsgn       DS      2
 266+ 988E 00 00        CurrentTargetYpos       DS      2
 267+ 9890 00 00        CurrentTargetYsgn       DS      2
 268+ 9892 00 00        CurrentTargetZpos       DS      2
 269+ 9894 00 00        CurrentTargetZsgn       DS      2
 270+ 9896 00 00        TargetVectorXpos        DS      2
 271+ 9898 00 00        TargetVectorXsgn        DS      2
 272+ 989A 00 00        TargetVectorYpos        DS      2
 273+ 989C 00 00        TargetVectorYsgn        DS      2
 274+ 989E 00 00        TargetVectorZpos        DS      2
 275+ 98A0 00 00        TargetVectorZsgn        DS      2
 276+ 98A2 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 277+ 98A3 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 278+ 98A4 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 279+ 98A5 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 280+ 98A6
 281+ 98A6              ; --- Main Loop Data -----------------------;
 282+ 98A6 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 283+ 98A7 00           SelectedUniverseSlot    DB  0
 284+ 98A8 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
 285+ 98A9 00           ShipBlastCheckCounter   DB  0
 286+ 98AA 00           EventCounter    		DB 	0				; 8A
 287+ 98AB 00           MissJumpFlag            DB  0
 288+ 98AC 00           ExtraVesselsCounter     DB  0
 289+ 98AD 00           JunkCount				DB  0				; $033E
 290+ 98AE 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 291+ 98AF 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 292+ 98B0 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 293+ 98B1 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 294+ 98B2 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 295+ 98B3 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 296+ 98B4              UniverseSlotListSize    equ	12
 297+ 98B4 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 298+ 98C0 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 299+ 98CC              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 300+ 98CC 00           TransporterCount        DB  0
 301+ 98CD 00           CopCount                DB  0
 302+ 98CE 00           PirateCount             DB  0
 303+ 98CF
 304+ 98CF              ; --- Galaxy Data --------------------------;
 305+ 98CF 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 306+ 98D0 00 00 00...  WorkingSeeds			DS	6
 307+ 98D6 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 308+ 98DC 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 309+ 98E2 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 310+ 98E3 00           PresentSystemY			DB  0
 311+ 98E4 00           TargetPlanetX			DB	0               ; 03C1
 312+ 98E5 00           TargetPlanetY			DB	0               ; 03C2
 313+ 98E6 00           GovPresentSystem		DB	0				; 03AE Govenment
 314+ 98E7 00           TekPresentSystem		DB	0				; 03AF Technology
 315+ 98E8              ;SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 316+ 98E8              ;SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 317+ 98E8 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 318+ 98E9
 319+ 98E9 00           CompassColor			DB	0				; 03C5
 320+ 98EA 00           SoundToggle				DB	0				; 03C6
 321+ 98EB 00           KeyboardRecenterToggle	DB	0				; 03C8
 322+ 98EC 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 323+ 98ED 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 324+ 98EE 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 325+ 98EF 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 326+ 98F0 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 327+ 98F1 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 328+ 98F2
 329+ 98F2              ; Working Data
 330+ 98F2
 331+ 98F2              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 332+ 98F2              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 333+ 98F2              ; $0925 =	EQUW page9+37* 1
 334+ 98F2              ; $094A =	EQUW page9+37* 2
 335+ 98F2              ; $096F =	EQUW page9+37* 3
 336+ 98F2              ; $0994 =	EQUW page9+37* 4
 337+ 98F2              ; $09B9 =	EQUW page9+37* 5
 338+ 98F2              ; $09DE =	EQUW page9+37* 6
 339+ 98F2              ; $0A03 =	EQUW page9+37* 7
 340+ 98F2              ; $0A28 =	EQUW page9+37* 8
 341+ 98F2              ; $0A4D =	EQUW page9+37* 9
 342+ 98F2              ; $0A72 =	EQUW page9+37*10
 343+ 98F2              ; $0A97 =	EQUW page9+37*11
 344+ 98F2              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 345+ 98F2
 346+ 98F2
 347+ 98F2
 348+ 98F2              ; 0b00 is start address of data to save
 349+ 98F2              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 350+ 98F2              											; Bit mask XXXX10XX - Thargoid plan mission
 351+ 98F2
 352+ 98F2 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 353+ 98F3
 354+ 98F3 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 355+ 98F5 00 00        CommanderLoadAddress	DW	0				;0C03
 356+ 98F7 00 00        LengthOfFile			DW	0				;0C0B
 357+ 98F9 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 358+ 98FB
 359+ 98FB 00 00 00...  EdgesBuffer				DS 50
 360+ 992D              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 361+ 992D              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 362+ 992D
 363+ 992D 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 364+ 9973              ShipLineStackTop		equ $ - ShipLineStack
 365+ 9973
 366+ 9973 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 367+ 9A33              ; LSX vector overlaps with LSO
 368+ 9A33 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 369+ 9A34 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 370+ 9A35
 371+ 9A35              ; Star Positions are 16 bit 3d coordinates
 372+ 9A35 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 373+ 9A77 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 374+ 9A8D 00           varStarX                DB  0
 375+ 9A8E 00           varStarY                DB  0
 376+ 9A8F 00 00 00...  varDustX                DS MaxNumberOfStars *2
 377+ 9AA5 00 00 00...  varDustY                DS MaxNumberOfStars *2
 378+ 9ABB 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 379+ 9AD1              ; -- Player Runtime Data
 380+ 9AD1 00           GunTemperature          DB  0
 381+ 9AD2 00           CabinTemperature        DB  0
 382+ 9AD3 00           PlayerForwardSheild0	DB	0 ; ?????
 383+ 9AD4 00           PlayerForwardSheild1    DB	0
 384+ 9AD5 00           PlayerForwardSheild2    DB	0
 385+ 9AD6 00           ForeShield				DB	0				; 03A5
 386+ 9AD7 00           AftShield				DB	0				; 03A6
 387+ 9AD8 00           PlayerEnergy			DB	0				; 03A7
 388+ 9AD9 00           CompassX				DB	0				; 03A8
 389+ 9ADA 00           CompassY				DB	0				; 03A9
 390+ 9ADB 00           MissileTarget			DB  0				; 45
 391+ 9ADC 00           MissileLaunchFlag       DB  0
 392+ 9ADD 00 00 00...  CommanderName           DS  15
 393+ 9AEC 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 394+ 9AED 00           BadnessStatus           DB  0
 395+ 9AEE              ; -- Input variables
 396+ 9AEE 00           JoystickX				DB	0				; 034C JSTX
 397+ 9AEF 00           JoystickY				DB	0				; 034D JSTY
 398+ 9AF0 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 399+ 9AF1 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 400+ 9AF2
 401+ 9AF2              ; -- Console drawing data
 402+ 9AF2              FShieldStart            equ $8410
 403+ 9AF2              AShieldStart            equ $8D10
 404+ 9AF2              FuelStart               equ $9410
 405+ 9AF2
 406+ 9AF2              EnergyBar4Start         equ $A5D5
 407+ 9AF2              EnergyBar3Start         equ $ADD5
 408+ 9AF2              EnergyBar2Start         equ $B5D5
 409+ 9AF2              EnergyBar1Start         equ $BDD5
 410+ 9AF2              ; 70 /2 = 35 values
 411+ 9AF2              ;                            0                             1                             2                             3
 412+ 9AF2              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 413+ 9AF2 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 413+ 9AF6 04 04 05 06
 413+ 9AFA 06 07 08 09
 413+ 9AFE 0A 0A 0B 0C
 413+ 9B02 0D 0E 0E 0F
 413+ 9B06 10 10 11 13
 413+ 9B0A 14 15 15 16
 413+ 9B0E 17 18 19 1A
 413+ 9B12 1B 1C 1E 1F
 413+ 9B16 1F
 414+ 9B17              SpeedoStart             equ $84D1
 415+ 9B17              ;                            0                             1                             2                             3                             4
 416+ 9B17              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 417+ 9B17 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 417+ 9B1B 04 04 05 06
 417+ 9B1F 06 07 08 09
 417+ 9B23 0A 0A 0B 0C
 417+ 9B27 0D 0E 0E 0F
 417+ 9B2B 10 10 11 12
 417+ 9B2F 13 14 14 15
 417+ 9B33 16 17 18 18
 417+ 9B37 19 1A 1A 1B
 417+ 9B3B 1C 1C 1D 1E
 417+ 9B3F 1F
 418+ 9B40
 419+ 9B40              DialMiddleXPos          equ $E1
 420+ 9B40              RollMiddle              equ $8CE0
 421+ 9B40              PitchMiddle             equ $94E0
 422+ 9B40
 423+ 9B40
 424+ 9B40              ResetPlayerShip:        ZeroThrottle
 424+ 9B40 AF          >                        xor     a
 424+ 9B41 32 DF 97    >                        ld      (DELTA),a
 424+ 9B44 32 E0 97    >                        ld      (DELT4Lo),a
 424+ 9B47 32 E1 97    >                        ld      (DELT4Lo+1),a
 425+ 9B4A                                      ZeroPitch
 425+ 9B4A AF          >                        xor     a
 425+ 9B4B 32 EB 96    >                        ld      (BET2),a
 425+ 9B4E 32 EC 96    >                        ld      (BET2FLIP),a
 425+ 9B51 32 E9 96    >                        ld      (JSTY),a
 425+ 9B54 32 E8 96    >                        ld      (BETA),a
 426+ 9B57                                      ZeroRoll
 426+ 9B57 AF          >                        xor     a                              ; zero roll and climb
 426+ 9B58 32 FB 96    >                        ld      (ALP2),a
 426+ 9B5B 32 FC 96    >                        ld      (ALP2FLIP),a
 426+ 9B5E 32 F7 96    >                        ld      (JSTX),a
 426+ 9B61 32 F9 96    >                        ld      (ALPHA),a
 427+ 9B64                                      ClearMissileTarget
 427+ 9B64 AF          >                        xor     a                           ; Set missile target to FF
 427+ 9B65 3D          >                        dec     a
 427+ 9B66 32 DB 9A    >                        ld      (MissileTarget),a
 427+ 9B69             >                        SetMemFalse MissileLaunchFlag
 427+ 9B69 3E FF       >                        ld      a,$FF
 427+ 9B6B 32 DC 9A    >                        ld      (MissileLaunchFlag),a
 428+ 9B6E                                      ClearECM
 428+ 9B6E AF          >                        xor     a
 428+ 9B6F 32 F5 96    >                        ld      (ECMLoopA),a
 428+ 9B72 32 F6 96    >                        ld      (ECMLoopB),a
 429+ 9B75                                      ChargeEnergyAndShields
 429+ 9B75 3E FF       >                        ld      a,$FF
 429+ 9B77 32 D8 9A    >                        ld      (PlayerEnergy),a
 429+ 9B7A 32 D6 9A    >                        ld      (ForeShield),a
 429+ 9B7D 32 D7 9A    >                        ld      (AftShield),a
 430+ 9B80 C9                                   ret
 431+ 9B81
# file closed: ./Variables/general_variables.asm
1036  9B81
1037  9B81                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9B81 AF           ClearSlotCount:         xor     a
   2+ 9B82 21 B4 98                             ld      hl,UniverseSlotList
   3+ 9B85 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   4+ 9B87 77           .fillLoop:              ld      (hl),a
   5+ 9B88 23                                   inc     hl
   6+ 9B89 10 FC                                djnz    .fillLoop
   7+ 9B8B C9                                   ret
   8+ 9B8C
   9+ 9B8C              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 9B8C              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 9B8C              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  12+ 9B8C              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  13+ 9B8C              ; DOE NOT WORK                         ld      de,UniverseSlotList
  14+ 9B8C              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  15+ 9B8C              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  16+ 9B8C              ; DOE NOT WORK                         cp      $FF
  17+ 9B8C              ; DOE NOT WORK                         jr      z,.SkipSlot
  18+ 9B8C              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  19+ 9B8C              ; DOE NOT WORK                         inc     hl
  20+ 9B8C              ; DOE NOT WORK                         ld      (hl),1
  21+ 9B8C              ; DOE NOT WORK                         inc     hl
  22+ 9B8C              ; DOE NOT WORK                         inc     hl
  23+ 9B8C              ; DOE NOT WORK .SkipSlot               inc     de
  24+ 9B8C              ; DOE NOT WORK                         djnz    .fillLoop
  25+ 9B8C C9                                   ret
  26+ 9B8D              ; Wipe all items
  27+ 9B8D 3E FF        ClearUnivSlotList:      ld      a,$FF
  28+ 9B8F 21 B4 98                             ld      hl,UniverseSlotList
  29+ 9B92 06 18                                ld      b, UniverseSlotListSize * 2
  30+ 9B94 77           .fillLoop:              ld      (hl),a
  31+ 9B95 23                                   inc     hl
  32+ 9B96 10 FC                                djnz    .fillLoop
  33+ 9B98 C9                                   ret
  34+ 9B99
  35+ 9B99 21 B4 98     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  36+ 9B9C 36 02                                ld      (hl),ShipTypeStation
  37+ 9B9E 21 C0 98                             ld      hl,UniverseSlotType
  38+ 9BA1 36 02                                ld      (hl),ShipTypeStation
  39+ 9BA3 C9                                   ret
  40+ 9BA4
  41+ 9BA4 21 B4 98     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  42+ 9BA7 ED 31                                add     hl,a
  43+ 9BA9 70                                   ld      (hl),b
  44+ 9BAA C9                                   ret
  45+ 9BAB
  46+ 9BAB 21 C0 98     SetSlotAToClassB:       ld      hl,UniverseSlotType
  47+ 9BAE ED 31                                add     hl,a
  48+ 9BB0 70                                   ld      (hl),b
  49+ 9BB1 C9                                   ret
  50+ 9BB2
  51+ 9BB2              ; Clears all except slot A, used when say restarting a space station post launch
  52+ 9BB2 57           ClearFreeSlotListSaveA: ld      d,a
  53+ 9BB3 0E 00                                ld      c,0
  54+ 9BB5 21 B4 98                             ld      hl,UniverseSlotList
  55+ 9BB8 06 18                                ld      b, UniverseSlotListSize * 2
  56+ 9BBA 79           .fillLoop:              ld      a,c
  57+ 9BBB BA                                   cp      d
  58+ 9BBC 28 03                                jr      z,.SkipSlot
  59+ 9BBE 3E FF                                ld      a,$FF
  60+ 9BC0 77                                   ld      (hl),a
  61+ 9BC1 23           .SkipSlot:              inc     hl
  62+ 9BC2 23                                   inc     hl
  63+ 9BC3 10 F5                                djnz    .fillLoop
  64+ 9BC5 C9                                   ret
  65+ 9BC6
  66+ 9BC6 21 B4 98     ClearSlotA:             ld      hl,UniverseSlotList
  67+ 9BC9 ED 31                                add     hl,a
  68+ 9BCB 36 FF                                ld      (hl),$FF
  69+ 9BCD 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  70+ 9BCF ED 31                                add     hl,a
  71+ 9BD1 36 FF                                ld      (hl),$FF
  72+ 9BD3 C9                                   ret
  73+ 9BD4              ; Space Station will always be slot 0
  74+ 9BD4
  75+ 9BD4 21 C1 98     AreShipsPresent:        ld      hl,UniverseSlotType+1
  76+ 9BD7 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  77+ 9BD9 7E           .NextShip:              ld      a,(hl)
  78+ 9BDA FE 00                                cp      ShipTypeNormal
  79+ 9BDC                                      ClearCarryFlag
  79+ 9BDC B7          >                        or a
  80+ 9BDD C8                                   ret     z
  81+ 9BDE 23                                   inc     hl
  82+ 9BDF 10 F8                                djnz    .NextShip
  83+ 9BE1                                      SetCarryFlag
  83+ 9BE1 37          >                        scf
  84+ 9BE2 C9                                   ret
  85+ 9BE3
  86+ 9BE3 21 B4 98     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  87+ 9BE6                                      ClearCarryFlag
  87+ 9BE6 B7          >                        or a
  88+ 9BE7 7E           .SearchLoop:            ld      a,(hl)
  89+ 9BE8                                      ReturnIfAEqNusng ShipTypeStation
  89+ 9BE8 FE 02       >                        cp      ShipTypeStation
  89+ 9BEA C8          >                        ret     z
  90+ 9BEB                                      SetCarryFlag
  90+ 9BEB 37          >                        scf
  91+ 9BEC C9                                   ret
  92+ 9BED
  93+ 9BED 21 B4 98     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  94+ 9BF0 ED 31                                add     hl,a
  95+ 9BF2 7E                                   ld      a,(hl)
  96+ 9BF3 C9                                   ret
  97+ 9BF4
  98+ 9BF4 21 B5 98     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
  99+ 9BF7 7E                                   ld      a,(hl)
 100+ 9BF8 C9                                   ret
 101+ 9BF9
 102+ 9BF9 21 B4 98     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 103+ 9BFC 06 0C                                ld      b, UniverseSlotListSize
 104+ 9BFE 0E 00                                ld      c, 0
 105+ 9C00 7E           .SearchLoop:            ld      a,(hl)
 106+ 9C01                                      JumpIfAEqNusng $FF, .FoundSlot
 106+ 9C01 FE FF       >                        cp     $FF
 106+ 9C03 CA 0C 9C    >                        jp      z,.FoundSlot
 107+ 9C06 0C                                   inc     c
 108+ 9C07 23                                   inc     hl
 109+ 9C08 10 F6                                djnz    .SearchLoop
 110+ 9C0A                                      SetCarryFlag
 110+ 9C0A 37          >                        scf
 111+ 9C0B C9                                   ret
 112+ 9C0C              .FoundSlot:             ClearCarryFlag
 112+ 9C0C B7          >                        or a
 113+ 9C0D C9                                   ret
 114+ 9C0E
 115+ 9C0E CD F9 9B     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 116+ 9C11 79                                   ld      a,c
 117+ 9C12 C9                                   ret
 118+ 9C13
# file closed: ./Variables/UniverseSlotRoutines.asm
1038  9C13
1039  9C13                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 9C13 00           AutoDocking				DB	0				; $033F
   2+ 9C14 00           PlayerECM				DB	0				; $0340
   3+ 9C15 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 9C16 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 9C17 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 9C1B 19           Fuel					DB	25				; 0365  QQ14
   7+ 9C1C 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 9C20 46           CargoBaySize			DB	70				; 036E
   9+ 9C21 00           CargoRunningLoad        DB  0
  10+ 9C22 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 9C26 00 00 00 00
  10+ 9C2A 00 00 00 00
  10+ 9C2E 00 00 00 00
  11+ 9C32              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 9C32              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 9C32              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 9C32              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 9C32              ; For each view laser a localised copy of the stats
  16+ 9C32              ; TODO - need to add code to maintain on load/save/equipment transactions
  17+ 9C32 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  18+ 9C36 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  19+ 9C3A 00 00 00 00  LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  20+ 9C3E 00 00 00 00  LaserPulseDuration      DS  4               ; time laser is on per shot
  21+ 9C42 00 00 00 00  LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  22+ 9C46 00 00 00 00  LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  23+ 9C4A 00 00 00 00  LaserHeat               DS  4               ; amount of heat generated
  24+ 9C4E 00 00 00 00  LaserDurability         DS  4               ; probabability out of 255 that a hit on unshielded will add random amount of damage
  25+ 9C52 00 00 00 00  LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  26+ 9C56
  27+ 9C56
  28+ 9C56              QQ20                    equ CargoTonnes
  29+ 9C56 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  30+ 9C70              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  31+ 9C70              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  32+ 9C70              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  33+ 9C70              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  34+ 9C70              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  35+ 9C70              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  36+ 9C70 01           FuelScoopsBarrelStatus	DB	1				; 0381
  37+ 9C71
# file closed: ./Variables/EquipmentVariables.asm
1040  9C71
1041  9C71                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 9C71              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 9C71              doRND2:
   3+ 9C71 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 9C72              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 9C72              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 9C72 3A D5 96     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9C75 CB 17                                rl		a								; Rotate L including carry
   8+ 9C77 4F                                   ld		c,a								; c =  double lo
   9+ 9C78 21 D7 96     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9C7B 8E                                   adc		a,(hl)							; RAND+2
  11+ 9C7C 32 D5 96     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9C7F 08           .SaveBtoSeed2:          ex		af,af'
  13+ 9C80 79                                   ld		a,c
  14+ 9C81 32 D7 96                             ld		(RandomSeed2),a
  15+ 9C84 08                                   ex		af,af'
  16+ 9C85 3A D6 96                             ld		a,(RandomSeed1)
  17+ 9C88 4F                                   ld		c,a								; C = Seed1
  18+ 9C89 21 D8 96     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9C8C 8E                                   adc		a,(hl)
  20+ 9C8D 32 D6 96                             ld		(RandomSeed1),a
  21+ 9C90 08                                   ex		af,af'
  22+ 9C91 79                                   ld		a,c
  23+ 9C92 32 D8 96                             ld		(RandomSeed3),a
  24+ 9C95 08                                   ex		af,af'
  25+ 9C96 C9                                   ret
  26+ 9C97
  27+ 9C97              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9C97 06 04        	ld		b,4
  29+ 9C99 21 0D C2     	ld		hl,UbnkLineArray				; line data
  30+ 9C9C              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9C9C              EE55:
  32+ 9C9C CD 72 9C     	call	doRND							; get random
  33+ 9C9F 77           	ld		(hl),a							; (XX19),Y
  34+ 9CA0 23           	inc		hl
  35+ 9CA1 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9CA3 C9               ret
  37+ 9CA4
# file closed: ./Variables/random_number.asm
1042  9CA4                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9CA4 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9CA8 58 59 53 45
   1+ 9CAC 45 44
   2+ 9CAE 21 DC 98     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 9CB1 11 CF 97                             ld		de,SystemSeed
   4+ 9CB4 ED A0        copy_seed:		        ldi
   5+ 9CB6 ED A0                                ldi
   6+ 9CB8 ED A0                                ldi
   7+ 9CBA ED A0                                ldi
   8+ 9CBC ED A0                                ldi
   9+ 9CBE ED A0                                ldi
  10+ 9CC0 C9                                   ret
  11+ 9CC1
  12+ 9CC1 21 CF 97     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 9CC4 11 DC 98                             ld		de,GalaxySeeds
  14+ 9CC7 18 EB                                jr		copy_seed
  15+ 9CC9
  16+ 9CC9 21 DC 98     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9CCC 11 D0 98                             ld		de,WorkingSeeds
  18+ 9CCF 18 E3                                jr		copy_seed
  19+ 9CD1
  20+ 9CD1 21 D0 98     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 9CD4 11 DC 98                             ld		de,GalaxySeeds
  22+ 9CD7 18 DB                                jr		copy_seed
  23+ 9CD9
  24+ 9CD9 21 D0 98     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9CDC 11 CF 97                             ld		de,SystemSeed
  26+ 9CDF 18 D3                                jr		copy_seed
  27+ 9CE1
  28+ 9CE1 21 CF 97     copy_system_to_working: ld		hl,SystemSeed
  29+ 9CE4 11 D0 98                             ld		de,WorkingSeeds
  30+ 9CE7 18 CB                                jr		copy_seed
  31+ 9CE9
  32+ 9CE9              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 9CE9 CD EC 9C     		call	.NextStep					; This logic means we hard code x4
  34+ 9CEC              .NextStep:
  35+ 9CEC CD EF 9C     		call	process_seed				; This logic means we hard code x2
  36+ 9CEF              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 9CEF 3A CF 97     		ld		a,(SystemSeed)				; QQ15
  38+ 9CF2 B7           		or		a							; clear carry flag
  39+ 9CF3 21 D1 97     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 9CF6 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 9CF7 47           		ld		b,a							; partial sum lo
  42+ 9CF8 3A D0 97     		ld		a,(SystemSeed+1)
  43+ 9CFB 21 D2 97     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 9CFE 8E           		adc		a,(hl)						; note add with carry
  45+ 9CFF 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 9D00 3A D1 97     		ld		a,(SystemSeed+2)
  47+ 9D03 32 CF 97     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 9D06 3A D2 97     		ld		a,(SystemSeed+3)
  49+ 9D09 32 D0 97     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 9D0C 3A D4 97     		ld		a,(SystemSeed+5)
  51+ 9D0F 32 D2 97     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 9D12 3A D3 97     		ld		a,(SystemSeed+4)
  53+ 9D15 32 D1 97     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 9D18 B7           		or		a
  55+ 9D19 78           		ld		a,b
  56+ 9D1A 21 D1 97     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 9D1D 86           		add	    a,(hl)
  58+ 9D1E 32 D3 97     		ld		(SystemSeed+4),a
  59+ 9D21 79           		ld		a,c
  60+ 9D22 21 D2 97     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 9D25 8E           		adc		a,(hl)
  62+ 9D26 32 D4 97     		ld		(SystemSeed+5),a
  63+ 9D29 C9           		ret
  64+ 9D2A
  65+ 9D2A              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 9D2A CD 2D 9D     		call	.NextStep					; This logic means we hard code x4
  67+ 9D2D              .NextStep:
  68+ 9D2D CD 30 9D     		call	working_seed				; This logic means we hard code x2
  69+ 9D30              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 9D30              ; x = a + c
  71+ 9D30 3A D0 98     		ld		a,(WorkingSeeds)			; QQ15
  72+ 9D33 B7           		or		a							; clear carry flag
  73+ 9D34 21 D2 98     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 9D37 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 9D38 47           		ld		b,a							; partial sum lo [x]
  76+ 9D39              ; y = b + d	+ carry
  77+ 9D39 3A D1 98     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 9D3C 21 D3 98     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 9D3F 8E           		adc		a,(hl)						; note add with carry
  80+ 9D40 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 9D41 3A D2 98     		ld		a,(WorkingSeeds+2)
  82+ 9D44 32 D0 98     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9D47 3A D3 98     		ld		a,(WorkingSeeds+3)
  84+ 9D4A 32 D1 98     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 9D4D 3A D5 98     		ld		a,(WorkingSeeds+5)
  86+ 9D50 32 D3 98     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 9D53 3A D4 98     		ld		a,(WorkingSeeds+4)
  88+ 9D56 32 D2 98     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9D59 B7           		or		a
  90+ 9D5A 78           		ld		a,b
  91+ 9D5B 21 D2 98     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 9D5E 86           		add	    a,(hl)
  93+ 9D5F 32 D4 98     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 9D62 79           		ld		a,c
  95+ 9D63 21 D3 98     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9D66 8E           		adc		a,(hl)
  97+ 9D67 32 D5 98     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9D6A C9           		ret
  99+ 9D6B
 100+ 9D6B 32           working_distX	DB 50
 101+ 9D6C 32           working_distY	DB 50
 102+ 9D6D 00           current_distY	DB 0
 103+ 9D6E
 104+ 9D6E AF           find_present_system:    xor		a
 105+ 9D6F 32 E8 97                             ld		(XSAV),a
 106+ 9D72 3A D0 97     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 9D75 4F                                   ld		c,a
 108+ 9D76 3A E3 98     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 9D79 47                                   ld		b,a								; so b holds Y ccord
 110+ 9D7A 79                                   ld		a,c
 111+ 9D7B 90                                   sub		b
 112+ 9D7C CB 7F                                bit		7,a
 113+ 9D7E 28 02                                jr		z,.positivedy
 114+ 9D80 ED 44        .negativedy:            neg
 115+ 9D82 32 6D 9D     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 9D85 ED 5B 6B 9D                          ld		de,(working_distX)
 117+ 9D89 BA                                   cp		d
 118+ 9D8A 30 24                                jr		nc,.toofar
 119+ 9D8C 3A D2 97     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 9D8F 4F                                   ld		c,a
 121+ 9D90 3A E2 98                             ld		a,(PresentSystemX)
 122+ 9D93 47                                   ld		b,a								; so b holds Y ccord
 123+ 9D94 79                                   ld		a,c
 124+ 9D95 90                                   sub		b
 125+ 9D96 CB 7F                                bit		7,a
 126+ 9D98 28 02                                jr		z,.positivedx
 127+ 9D9A ED 44        .negativedx:            neg
 128+ 9D9C 4F           .positivedx:            ld		c,a
 129+ 9D9D BB                                   cp		e
 130+ 9D9E 30 10                                jr		nc,.toofar
 131+ 9DA0 3A 6D 9D     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 9DA3 47                                   ld		b,a								; we have c to recall Y into b
 133+ 9DA4 ED 43 6B 9D                          ld		(working_distX),bc
 134+ 9DA8 C5                                   push	bc
 135+ 9DA9 CD E1 9C                             call 	copy_system_to_working
 136+ 9DAC C1                                   pop		bc
 137+ 9DAD 78                                   ld		a,b								;
 138+ 9DAE B1                                   or		c								;
 139+ 9DAF C8                                   ret		z								; if we have distance 0 then bang on
 140+ 9DB0 CD E9 9C     .toofar:                call	next_system_seed
 141+ 9DB3 3A E8 97                             ld		a,(XSAV)
 142+ 9DB6 3D                                   dec		a
 143+ 9DB7 FE 00                                cp		0
 144+ 9DB9 C8                                   ret		z
 145+ 9DBA 32 E8 97                             ld		(XSAV),a
 146+ 9DBD 18 B3                                jr		.CounterLoop
 147+ 9DBF
 148+ 9DBF              get_planet_data_working_seed:
 149+ 9DBF 3A D1 98     		ld		a, (WorkingSeeds+1)
 150+ 9DC2 E6 07        		and		7
 151+ 9DC4 32 6E 98     		ld		(DisplayEcononmy),a
 152+ 9DC7 3A D2 98     		ld		a, (WorkingSeeds+2)
 153+ 9DCA CB 3F        		srl	a
 154+ 9DCC CB 3F        		srl	a
 155+ 9DCE CB 3F        		srl	a
 156+ 9DD0 CB 3F        		srl	a								; c/8
 157+ 9DD2 E6 07        		and		7
 158+ 9DD4 32 6F 98     		ld		(DisplayGovernment),a
 159+ 9DD7 CB 3F        		srl	a
 160+ 9DD9 FE 00        		cp		0
 161+ 9DDB 20 08        		jr		nz,.CanBeRich
 162+ 9DDD              .Fedual:
 163+ 9DDD 3A 6E 98     		ld		a,(DisplayEcononmy)
 164+ 9DE0 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 9DE2 32 6E 98     		ld		(DisplayEcononmy),a
 166+ 9DE5              .CanBeRich:
 167+ 9DE5 3A 6E 98     		ld		a,(DisplayEcononmy)
 168+ 9DE8 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 9DEA 32 70 98     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 9DED 47           		ld		b,a
 171+ 9DEE 3A D3 98     		ld		a,(WorkingSeeds+3)
 172+ 9DF1 E6 03        		and		3
 173+ 9DF3 80           		add		a,b
 174+ 9DF4 32 70 98     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 9DF7 3A 6F 98     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 9DFA CB 3F        		srl		a 							; gov/2
 177+ 9DFC 47           		ld		b,a
 178+ 9DFD 3A 70 98     		ld		a,(DisplayTekLevel)
 179+ 9E00 80           		add		a,b
 180+ 9E01 32 70 98     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 9E04 CB 27        		sla		a
 182+ 9E06 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 9E08 47           		ld		b,a
 184+ 9E09 3A 6E 98     		ld		a,(DisplayEcononmy)
 185+ 9E0C 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 9E0D 47           		ld		b,a
 187+ 9E0E 3A 6F 98     		ld		a,(DisplayGovernment)
 188+ 9E11 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 9E12 32 71 98     		ld		(DisplayPopulation),a
 190+ 9E15 3A 6E 98     		ld		a,(DisplayEcononmy)
 191+ 9E18 EE 07        		xor		7							; Onto productivity
 192+ 9E1A C6 03        		add		3							;  (Flipped eco +3)
 193+ 9E1C 57           		ld		d,a
 194+ 9E1D 3A 6F 98     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 9E20 C6 04        		add		4
 196+ 9E22 5F           		ld		e,a
 197+ 9E23 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 9E25 3A 71 98     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 9E28 57           		ld		d,a
 200+ 9E29 ED 30        		mul
 201+ 9E2B CB 23        		sla		e
 202+ 9E2D CB 1A        		rr		d
 203+ 9E2F CB 23        		sla		e
 204+ 9E31 CB 1A        		rr		d
 205+ 9E33 CB 23        		sla		e
 206+ 9E35 CB 1A        		rr		d							; de * 8
 207+ 9E37 ED 53 73 98  		ld		(DisplayProductivity),de
 208+ 9E3B              .DoRadius:
 209+ 9E3B 3A D3 98     		ld		a,(WorkingSeeds+3)
 210+ 9E3E 4F           		ld		c,a
 211+ 9E3F 3A D5 98     		ld		a,(WorkingSeeds+5)
 212+ 9E42 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 9E44 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 9E46 47           		ld		b,a							;
 215+ 9E47 ED 43 77 98  		ld		(DisplayRadius),bc
 216+ 9E4B C9           		ret
 217+ 9E4C
# file closed: ./Variables/galaxy_seed.asm
1043  9E4C                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 9E4C 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 9E50 65 00
   2+ 9E52 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9E56 00
   3+ 9E57 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9E5B 74 61 72 79
   3+ 9E5F 00
   4+ 9E60 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 9E64 6E 67 00
   5+ 9E67 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9E6B 6F 6D 00
   6+ 9E6E
   7+ 9E6E 4C 9E 52 9E  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 9E72 57 9E 60 9E
   7+ 9E76 67 9E
   8+ 9E78              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9E78
  10+ 9E78 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9E7C 65 64 00
  11+ 9E7F 47 72 65 65  ConditionName2		DB "Green",0
  11+ 9E83 6E 00
  12+ 9E85 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9E89 6F 77 00
  13+ 9E8C 52 65 64 00  ConditionName4		DB "Red",0
  14+ 9E90
  15+ 9E90 78 9E 7F 9E  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 9E94 85 9E 8C 9E
  16+ 9E98              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9E98
  18+ 9E98 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9E9C 53 45 49 54
  18+ 9EA0 49 4C 45 54
  18+ 9EA4 53 54 4F 4E
  18+ 9EA8 4C 4F 4E 55
  18+ 9EAC 54 48 4E 4F
  18+ 9EB0 41 4C 4C 45
  18+ 9EB4 58 45 47 45
  18+ 9EB8 5A 41 43 45
  18+ 9EBC 42 49 53 4F
  18+ 9EC0 55 53 45 53
  18+ 9EC4 41 52 4D 41
  18+ 9EC8 49 4E 44 49
  18+ 9ECC 52 45 41 3F
  18+ 9ED0 45 52 41 54
  18+ 9ED4 45 4E 42 45
  18+ 9ED8 52 41 4C 41
  18+ 9EDC 56 45 54 49
  18+ 9EE0 45 44 4F 52
  18+ 9EE4 51 55 41 4E
  18+ 9EE8 54 45 49 53
  18+ 9EEC 52 49 4F 4E
  18+ 9EF0 00
  19+ 9EF1
  20+ 9EF1 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 9EF5 10 00 20 00
  20+ 9EF9 40 00 80 00
  20+ 9EFD 00 02 00 0A
  20+ 9F01 00 19 00 49
  20+ 9F05 FF FF
  21+ 9F07
  22+ 9F07 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 9F0B 6C 65 73 73
  22+ 9F0F 00
  23+ 9F10 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 9F14 6C 79 20 48
  23+ 9F18 61 72 6D 6C
  23+ 9F1C 65 73 73 00
  24+ 9F20 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 9F24 00
  25+ 9F25 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 9F29 61 67 65 00
  26+ 9F2D 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9F31 65 20 41 76
  26+ 9F35 65 72 61 67
  26+ 9F39 65 00
  27+ 9F3B 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 9F3F 65 74 65 6E
  27+ 9F43 74 00
  28+ 9F45 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 9F49 65 72 6F 75
  28+ 9F4D 73 00
  29+ 9F4F 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9F53 6C 79 00
  30+ 9F56 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9F5A 20 45 20 4C
  30+ 9F5E 20 49 20 54
  30+ 9F62 20 45 20 2D
  30+ 9F66 2D 2D 00
  31+ 9F69 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9F6D 6C 6F 62 73
  31+ 9F71 67 6F 64 00
  32+ 9F75 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9F79 65 72 00
  33+ 9F7C
  34+ 9F7C 07 9F 10 9F  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9F80 20 9F 25 9F
  34+ 9F84 2D 9F 3B 9F
  34+ 9F88 45 9F 4F 9F
  34+ 9F8C 56 9F 69 9F
  34+ 9F90 75 9F
  35+ 9F92              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9F92
  37+ 9F92
  38+ 9F92              getTableText:
  39+ 9F92              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9F92              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9F92 D5           	push	de								; save DE as we will likley need it in caller
  42+ 9F93 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9F95 ED 31        	add		hl,a
  44+ 9F97 5E           	ld		e,(hl)
  45+ 9F98 23           	inc		hl
  46+ 9F99 56           	ld		d,(hl)							; de = indexed address
  47+ 9F9A EB           	ex		de,hl							; flip it to hl
  48+ 9F9B D1           	pop		de								; retrieve de
  49+ 9F9C C9           	ret										; return with hl as start entry
  50+ 9F9D
  51+ 9F9D
  52+ 9F9D              ;               CF      ZF      Result
  53+ 9F9D              ;               -----------------------------------
  54+ 9F9D              ;               0       0       HL > DE
  55+ 9F9D              ;               0       1       HL == DE
  56+ 9F9D              ;               1       0       HL < DE
  57+ 9F9D              ;               1       1       Impossible
  58+ 9F9D              getRankIndex:
  59+ 9F9D              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9F9D              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9F9D 7A           	ld		a,d
  62+ 9F9E B3           	or		e
  63+ 9F9F FE 00        	cp		0
  64+ 9FA1 C8           	ret		z								; quicks skip for 0 kills
  65+ 9FA2 AF           	xor 	a
  66+ 9FA3 21 F1 9E     	ld		hl,RankingTable
  67+ 9FA6              .testLoop:
  68+ 9FA6 4E           	ld		c,(hl)
  69+ 9FA7 23           	inc		hl
  70+ 9FA8 46           	ld		b,(hl)							; bc = ranking
  71+ 9FA9 E5           	push	hl
  72+ 9FAA 60           	ld		h,b
  73+ 9FAB 69           	ld		l,c
  74+ 9FAC CD AC AB     	call	compare16HLDE
  75+ 9FAF 38 06        	jr		c,.HLLTDE
  76+ 9FB1              .HLGTEDE									; Found the correct rank
  77+ 9FB1 E1           	pop		hl
  78+ 9FB2 23           	inc		hl								; move to next value
  79+ 9FB3 23           	inc		hl
  80+ 9FB4 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9FB5 18 EF        	jr		.testLoop
  82+ 9FB7              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9FB7 E1           	pop		hl
  84+ 9FB8 C9           	ret
  85+ 9FB9
# file closed: ./Tables/text_tables.asm
1044  9FB9                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9FB9 58 00        WordDummy					DB  "X",0
   2+ 9FBB 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9FBF 74 00
   3+ 9FC1 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9FC5 74 00
   4+ 9FC7 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9FCB 00
   5+ 9FCC 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9FD0 00
   6+ 9FD1 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9FD5 65 00
   7+ 9FD7 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9FDB 70 65 00
   8+ 9FDE 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9FE2 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9FE6 6F 00
  10+ 9FE8 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9FEC 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9FF0 00
  12+ 9FF1 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9FF5 70 73 00
  13+ 9FF8 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 9FFC 4D 2E 00
  14+ 9FFF 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ A003 65 6D 00
  15+ A006 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ A00A 67 79 00
  16+ A00D 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ A011 00
  17+ A012 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ A016 72 00
  18+ A018 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ A01C 65 00
  19+ A01E 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ A022 00
  20+ A023 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ A027 61 72 79 00
  21+ A02B 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ A02F 6E 67 00
  22+ A032 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ A036 6F 6D 00
  23+ A039 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ A03D 00
  24+ A03E 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ A042 6C 64 00
  25+ A045 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ A049 69 6E 67 00
  26+ A04D 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ A051 75 74 65 72
  26+ A055 73 00
  27+ A057 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ A05B 72 73 70 61
  27+ A05F 63 65 00
  28+ A062 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ A066 63 74 69 63
  28+ A06A 00
  29+ A06B 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ A06F 61 00
  30+ A071 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ A075 6E 00
  31+ A077 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ A07B 6E 64 65 72
  31+ A07F 00
  32+ A080 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ A084 74 69 76 65
  32+ A088 00
  33+ A089 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ A08D 00
  34+ A08E 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ A092 69 6C 65 73
  34+ A096 00
  35+ A097 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ A09B 6F 61 63 74
  35+ A09F 69 76 65 73
  35+ A0A3 00
  36+ A0A4 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ A0A8 65 73 00
  37+ A0AB 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ A0AF 6F 72 2F 57
  37+ A0B3 69 6E 65 73
  37+ A0B7 00
  38+ A0B8 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ A0BC 72 69 65 73
  38+ A0C0 00
  39+ A0C1 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ A0C5 6F 74 69 63
  39+ A0C9 73 00
  40+ A0CB 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ A0CF 69 6E 65 72
  40+ A0D3 79 00
  41+ A0D5 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ A0D9 79 73 00
  42+ A0DC 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ A0E0 61 72 6D 73
  42+ A0E4 00
  43+ A0E5 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ A0E9 00
  44+ A0EA 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ A0EE 72 61 6C 73
  44+ A0F2 00
  45+ A0F3 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ A0F7 00
  46+ A0F8 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ A0FC 69 6E 75 6D
  46+ A100 00
  47+ A101 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ A105 53 74 6F 6E
  47+ A109 65 73 00
  48+ A10C 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ A110 6E 20 49 74
  48+ A114 65 6D 73 00
  49+ A118 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ A11C 65 73 00
  50+ A11F 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ A123 67 72 61 6D
  50+ A127 73 00
  51+ A129 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ A12D 73 00
  52+ A12F 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ A133 74 00
  53+ A135 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ A139 65 00
  54+ A13B 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ A13F 74 00
  55+ A141 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ A145 00
  56+ A146 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ A149 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ A14D 61 6E 63 65
  57+ A151 00
  58+ A152 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ A156 6F 6D 79 00
  59+ A15A 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ A15E 72 6E 6D 65
  59+ A162 6E 74 00
  60+ A165 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ A169 4C 65 76 65
  60+ A16D 6C 00
  61+ A16F 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ A173 6C 61 74 69
  61+ A177 6F 6E 00
  62+ A17A 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ A17E 69 6F 6E 00
  63+ A182 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ A186 69 6F 6E 00
  64+ A18A 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ A18E 73 00
  65+ A190 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ A194 75 63 74 69
  65+ A198 76 69 74 79
  65+ A19C 00
  66+ A19D 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ A1A1 61 67 65 00
  67+ A1A5 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ A1A9 75 73 00
  68+ A1AC 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ A1AF 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ A1B3 00
  70+ A1B4 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ A1B8 00
  71+ A1B9 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ A1BD 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ A1C1 6C 79 00
  73+ A1C4 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ A1C8 00
  74+ A1C9 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ A1CD 73 74 72 69
  74+ A1D1 61 6C 00
  75+ A1D4 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ A1D8 63 75 6C 74
  75+ A1DC 75 72 61 6C
  75+ A1E0 00
  76+ A1E1 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ A1E5 63 68 79 00
  77+ A1E9 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ A1ED 61 6C 00
  78+ A1F0 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ A1F4 69 2D 47 6F
  78+ A1F8 76 65 72 6E
  78+ A1FC 6D 65 6E 74
  78+ A200 00
  79+ A201 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ A205 61 74 6F 72
  79+ A209 73 68 69 70
  79+ A20D 00
  80+ A20E 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ A212 75 6E 69 73
  80+ A216 74 00
  81+ A218 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ A21C 65 64 65 72
  81+ A220 61 63 79 00
  82+ A224 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ A228 63 72 61 63
  82+ A22C 79 00
  83+ A22E 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ A232 6F 72 61 74
  83+ A236 65 20 53 74
  83+ A23A 61 74 65 00
  84+ A23E 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ A242 65 00
  85+ A244 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ A248 74 00
  86+ A24A 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ A24E 73 00
  87+ A250 30 00        Word0						DB  "0",0				   ;86
  88+ A252 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ A256 65 74 00
  89+ A259 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ A25D 65 73 00
  90+ A260 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ A264 75 63 74 00
  91+ A268 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ A26C 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ A270 65 00
  93+ A272 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ A276 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ A27A 00
  95+ A27B 74 00        Wordt						DB  "t",0                  ;94
  96+ A27D 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ A280 67 00        Wordg						DB  "g",0                  ;96
  98+ A282 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ A286 69 74 69 74
  98+ A28A 79 00
  99+ A28C 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ A290 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ A294 6B 00
 101+ A296 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ A29A 70 00
 102+ A29C 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ A2A0 00
 103+ A2A1 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ A2A5 69 6C 65 00
 104+ A2A9 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ A2AD 72 64 72 69
 104+ A2B1 76 65 00
 105+ A2B4 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ A2B8 74 61 72 79
 105+ A2BC 00
 106+ A2BD
 107+ A2BD B9 9F BB 9F  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ A2C1 C1 9F C7 9F
 108+ A2C5 CC 9F D1 9F  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ A2C9 D7 9F DE 9F
 109+ A2CD E2 9F E8 9F  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ A2D1 EC 9F F1 9F
 110+ A2D5 F8 9F FF 9F  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ A2D9 06 A0 0D A0
 111+ A2DD 12 A0 18 A0  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ A2E1 1E A0 23 A0
 112+ A2E5 2B A0 32 A0  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ A2E9 39 A0 3E A0
 113+ A2ED 45 A0 4D A0  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ A2F1 57 A0 62 A0
 114+ A2F5 6B A0 71 A0  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ A2F9 77 A0 80 A0
 115+ A2FD 89 A0 8E A0  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ A301 97 A0 A4 A0
 116+ A305 AB A0 B8 A0  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ A309 C1 A0 CB A0
 117+ A30D D5 A0 DC A0  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ A311 E5 A0 EA A0
 118+ A315 F3 A0 F8 A0  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ A319 01 A1 0C A1
 119+ A31D 18 A1 1F A1  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ A321 29 A1 2F A1
 120+ A325 35 A1 3B A1  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ A329 41 A1 46 A1
 121+ A32D 49 A1 52 A1  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ A331 5A A1 65 A1
 122+ A335 6F A1 7A A1  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ A339 82 A1 8A A1
 123+ A33D 90 A1 9D A1  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ A341 A5 A1 AC A1
 124+ A345 AF A1        					DW  WordMCR																	;68
 125+ A347 B4 A1 B9 A1  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ A34B BD A1 C4 A1
 126+ A34F C9 A1 D4 A1                      DW  WordIndustrial,     WordAgricultural									;73
 127+ A353 E1 A1 E9 A1  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ A357 F0 A1 01 A2
 128+ A35B 0E A2 18 A2                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ A35F 24 A2 2E A2
 129+ A363 3E A2 44 A2  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ A367 4A A2 50 A2
 130+ A36B 52 A2 59 A2  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ A36F 60 A2 68 A2
 131+ A373 6C A2 72 A2                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ A377 76 A2
 132+ A379 7B A2 7D A2  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ A37D 80 A2
 133+ A37F 82 A2 8C A2  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ A383 90 A2 96 A2
 134+ A387 9C A2 A1 A2                      DW  WordShip,           WordMissile       ; 101
 135+ A38B
 136+ A38B              ; Phrases
 137+ A38B 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ A38F 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ A392 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ A395 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ A398 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ A39B 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ A39E 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ A3A1 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ A3A4 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ A3A8 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ A3AC 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ A3B0 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ A3B4 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ A3B8 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ A3BB 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ A3BE 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ A3C1 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ A3C4 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ A3C7 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ A3CA 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ A3CD 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ A3D0 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ A3D3 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ A3D6 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ A3D9 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ A3DD 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ A3E0 64 65        TextEquipShip               DB  100,101          ;26
 164+ A3E2
 165+ A3E2 00           TextDummy					DB  0
 166+ A3E3
 167+ A3E3 8B A3 8F A3  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ A3E7 92 A3
 168+ A3E9 95 A3 98 A3  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ A3ED 9B A3
 169+ A3EF 9E A3 A1 A3  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ A3F3 A4 A3 A8 A3  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ A3F7 AC A3 B0 A3
 171+ A3FB B4 A3 B8 A3  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ A3FF BB A3
 172+ A401 BE A3 C1 A3  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ A405 C7 A3 C4 A3
 172+ A409 D0 A3 CA A3
 172+ A40D CD A3 D3 A3
 173+ A411 D6 A3        					DW  TextLightYears		                                            ; 21 23
 174+ A413 D9 A3 DD A3  					DW  Text0LightYears, TextMarketPrices
 175+ A417 E2 A3        					DW  TextDummy;  25
 176+ A419 00 00 00...  TextBuffer			DS	33
 177+ A43A
 178+ A43A              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ A43A              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ A43A
 181+ A43A              CapitaliseString:
 182+ A43A              ; ">CapitaliseString hl = address"
 183+ A43A              .CapLoop:
 184+ A43A 23           	inc		hl
 185+ A43B 7E           	ld		a,(hl)
 186+ A43C FE 00        	cp		0
 187+ A43E C8           	ret		z
 188+ A43F FE 5B        	cp		'Z'+1
 189+ A441 30 F7        	jr		nc,.CapLoop
 190+ A443 FE 41        	cp		'A'
 191+ A445 38 F3        	jr		c,.CapLoop
 192+ A447              .LowerCase:
 193+ A447 C6 20        	add		a,'a'-'A'
 194+ A449 77           	ld		(hl),a
 195+ A44A 18 EE        	jr		.CapLoop
 196+ A44C
 197+ A44C              WordIndexToAddress:
 198+ A44C 21 BD A2     	ld		hl,WordIdx
 199+ A44F ED 31        	add		hl,a
 200+ A451 ED 31        	add		hl,a
 201+ A453 D5           	push	de
 202+ A454 5E           	ld		e,(hl)
 203+ A455 23           	inc		hl
 204+ A456 56           	ld		d,(hl)
 205+ A457 EB           	ex		de,hl
 206+ A458 D1           	pop		de
 207+ A459 C9           	ret
 208+ A45A
 209+ A45A
 210+ A45A              expandTokenToString:
 211+ A45A              ; ">expandTokenToString a = texttoken"
 212+ A45A 21 E3 A3     	ld		hl,TextTokens
 213+ A45D CD 92 9F     	call	getTableText
 214+ A460 11 19 A4     	ld		de,TextBuffer
 215+ A463              .ReadLoop:
 216+ A463 7E           	ld		a,(hl)
 217+ A464 FE 00        	cp		0
 218+ A466 28 1B        	jr		z,.ReadDone
 219+ A468 E5           	push	hl
 220+ A469 D5           	push	de
 221+ A46A 21 BD A2     	ld		hl,WordIdx
 222+ A46D CD 92 9F     	call	getTableText
 223+ A470 D1           	pop		de
 224+ A471              .WordExpandLoop:
 225+ A471 7E           	ld		a,(hl)
 226+ A472 FE 00        	cp		0
 227+ A474 28 05        	jr		z,.AddSpace
 228+ A476              ;.GetChar:
 229+ A476 12           	ld		(de),a
 230+ A477 13           	inc		de
 231+ A478 23           	inc		hl
 232+ A479 18 F6        	jr		.WordExpandLoop
 233+ A47B              .AddSpace:
 234+ A47B 3E 20        	ld		a,' '
 235+ A47D 12           	ld		(de),a
 236+ A47E 13           	inc		de
 237+ A47F E1           	pop		hl
 238+ A480 23           	inc		hl
 239+ A481 18 E0        	jr		.ReadLoop
 240+ A483              .ReadDone:
 241+ A483 1B           	dec		de
 242+ A484 AF           	xor		a
 243+ A485 12           	ld		(de),a
 244+ A486 C9           	ret
 245+ A487
# file closed: ./Tables/dictionary.asm
1045  A487                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ A487 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ A48B 53 45 49 54
   1+ A48F 49 4C 45 54
   1+ A493 53 54 4F 4E
   1+ A497 4C 4F 4E 55
   1+ A49B 54 48 4E 4F
   2+ A49F 41 4C 4C     name_digrams2   DB "ALL"
   3+ A4A2 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ A4A6 45 5A 41 43
   3+ A4AA 45 42 49 53
   3+ A4AE 4F 55 53 45
   3+ A4B2 53 41 52 4D
   3+ A4B6 41 49 4E 44
   3+ A4BA 49 52 45 41
   4+ A4BE 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ A4C2 54 45 4E 42
   4+ A4C6 45 52 41 4C
   4+ A4CA 41 56 45 54
   4+ A4CE 49 45 44 4F
   4+ A4D2 52 51 55 41
   4+ A4D6 4E 54 45 49
   4+ A4DA 53 52 49 4F
   4+ A4DE 4E
   5+ A4DF
   6+ A4DF              ; TODO Moveinto galaxy data module
   7+ A4DF 00 00 00...  name_expanded	DS 32
   8+ A4FF 00           				DB 0
   9+ A500
  10+ A500
  11+ A500
  12+ A500              NamingLoop:
  13+ A500 3A D5 98     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ A503 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ A505 FE 00        	cp		0					; 0 = skip 2 chars
  16+ A507 28 12        	jr		z,.SkipPhrase
  17+ A509 C6 0C        	add		a,12
  18+ A50B CB 27        	sla		a					; phrase = (a+12)*2
  19+ A50D 21 87 A4     	ld		hl,name_digrams
  20+ A510 ED 31        	add		hl,a
  21+ A512 ED A0        	ldi
  22+ A514 7E           	ld		a,(hl)
  23+ A515 FE 3F        	cp		'?'
  24+ A517 28 02        	jr		z,.SkipPhrase
  25+ A519              .AddExtra:
  26+ A519 ED A0        	ldi
  27+ A51B              .SkipPhrase:
  28+ A51B D5           	push	de
  29+ A51C CD 30 9D     	call	working_seed
  30+ A51F D1           	pop		de
  31+ A520 C9           	ret
  32+ A521
  33+ A521              ;GetDigramGalaxySeed:
  34+ A521              ;	call	copy_galaxy_to_working
  35+ A521              ;	jr		GetDigramWorkingSeed
  36+ A521              ;GetDigramSystemSeed:
  37+ A521              ;	call	copy_system_to_working
  38+ A521              ;GetDigramWorkingSeed:
  39+ A521              ;; ">GetDigram a = digram seed"
  40+ A521              ;	ld		de,name_expanded
  41+ A521              ;	ld		b,3
  42+ A521              ;	ld		a,(WorkingSeeds)
  43+ A521              ;	and		$40
  44+ A521              ;	jr		z,.SmallSizeName
  45+ A521              ;.LargeSizeName:
  46+ A521              ;	call	NamingLoop
  47+ A521              ;.SmallSizeName:
  48+ A521              ;	call	NamingLoop
  49+ A521              ;	call	NamingLoop
  50+ A521              ;	call	NamingLoop
  51+ A521              ;.DoneName:
  52+ A521              ;	ex		de,hl
  53+ A521              ;	ld		(hl),0
  54+ A521              ;	ex		de,hl
  55+ A521              ;	ret
  56+ A521
  57+ A521
  58+ A521
  59+ A521              ;GetDigramWorkingSeed:
  60+ A521              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ A521              ;	ld		b,5					; working seed
  62+ A521              ;	ld		de,name_expanded
  63+ A521              ;.ExpansionLoop:
  64+ A521              ;	push	bc
  65+ A521              ;	ld		hl,WorkingSeeds
  66+ A521              ;	ld		a,b
  67+ A521              ;	add		hl,a
  68+ A521              ;	ld		a,(hl)	; a = first byte of name seed
  69+ A521              ;	and 	$1F					; Keep bottom 5 bits only
  70+ A521              ;	cp		0					; 0 = skip 2 chars
  71+ A521              ;	jr		z,.SkipPhrase
  72+ A521              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ A521              ;	call	TT27
  74+ A521              ;.SkipPhrase:
  75+ A521              ;	push	de
  76+ A521              ;	call	next_working_seed
  77+ A521              ;	pop		de
  78+ A521              ;	pop		bc
  79+ A521              ;	djnz	GetDigramWorkingSeed
  80+ A521              ;.DoneName:
  81+ A521              ;	ex		de,hl
  82+ A521              ;	ld		(hl),0
  83+ A521              ;	ex		de,hl
  84+ A521              ;	ret
  85+ A521              ;
  86+ A521              ;ExpandToken:
  87+ A521              ;	DE = target
  88+ A521              ;	a = token
  89+ A521              ;
  90+ A521              ;PlanetDigram:
  91+ A521              ;	cp		&A0							; >- 160
  92+ A521              ;	jr		c,MorePage4
  93+ A521              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ A521              ;	asl		2							; Multiply by 2
  95+ A521              ;	ld		hl, name_digrams2
  96+ A521              ;	add		hl,a
  97+ A521              ;	ld		a,(hl)
  98+ A521              ;	call	ProcessTextToken
  99+ A521              ;	inc		hl
 100+ A521              ;	ld		a,(hl)
 101+ A521              ;	cp		'?'
 102+ A521              ;	ret		z
 103+ A521              ;	call	ProcessTextToken
 104+ A521              ;	ret
 105+ A521              ;MorePage4:
 106+ A521              ;	sub		$A0
 107+ A521              ;ExtraTokenCheck:
 108+ A521              ;	push	de							; save target address
 109+ A521              ;	push	bc
 110+ A521              ;	ld		b,a
 111+ A521              ;	ld		hl,varV
 112+ A521              ;	ld		(VarV),0400
 113+ A521              ;	ld		(varV),a
 114+ A521              ;	ld
 115+ A521              ;
 116+ A521              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ A521              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ A521              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ A521              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ A521              ;0A                      ASL A		      \ *= 2
 121+ A521              ;A8                      TAY 		      \ digram index = 0to62
 122+ A521              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ A521              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ A521              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ A521              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ A521              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ A521              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ A521              ;
 129+ A521              ;	.TT47	\ more page4, subtract #160
 130+ A521              ;E9 A0                   SBC #&A0	\ -= 160
 131+ A521              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ A521              ;AA                      TAX 		\ copy of word index
 133+ A521              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ A521              ;85 22                   STA &22		\ V
 135+ A521              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ A521              ;85 23                   STA &23		\ V+1
 137+ A521              ;A0 00                   LDY #0
 138+ A521              ;8A                      TXA 		\ token = word index
 139+ A521              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ A521              ;	.TT51	\ counters Y letter, X token
 141+ A521              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ A521              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ A521              ;C8                      INY 		\ letter count
 144+ A521              ;D0 F9                   BNE TT51	\ loop Y
 145+ A521              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ A521              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ A521              ;	.TT49	\ word ended
 148+ A521              ;C8                      INY
 149+ A521              ;D0 02                   BNE TT59    	\ next word
 150+ A521              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ A521              ;	.TT59	\ next word
 152+ A521              ;CA                      DEX 		\ token count
 153+ A521              ;D0 ED                   BNE TT51	\ loop X token
 154+ A521              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ A521              ;98                      TYA
 156+ A521              ;48                      PHA 		\ store Yindex
 157+ A521              ;A5 23                   LDA &23		\ V+1
 158+ A521              ;48                      PHA 		\ correct pointer hi
 159+ A521              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ A521              ;49 23                   EOR #&23	\ decode '#'
 161+ A521              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ A521              ;68                      PLA 		\ restore this depth's Vhi
 163+ A521              ;85 23                   STA &23		\ V+1
 164+ A521              ;68                      PLA
 165+ A521              ;A8                      TAY 		\ restore this depth's Yindex
 166+ A521              ;C8                      INY 		\ next letter
 167+ A521              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ A521              ;E6 23                   INC &23		\ V+1
 169+ A521              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ A521              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ A521              ;	.TT48 	\ rts
 172+ A521              ;60                      RTS 		\ end of flight token printing TT27
 173+ A521              ;
 174+ A521              ;
 175+ A521              ;
 176+ A521              ;
 177+ A521              ;
 178+ A521              ;
 179+ A521              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ A521              ;;AA                      TAX		\ copy token to count down
 181+ A521              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ A521              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ A521              ;CA                      DEX
 184+ A521              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ A521              ;CA                      DEX
 186+ A521              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ A521              ;CA                      DEX
 188+ A521              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ A521              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ A521              ;CA                      DEX
 191+ A521              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ A521              ;CA                      DEX
 193+ A521              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ A521              ;CA                      DEX
 195+ A521              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ A521              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ A521              ;85 72                   STA &72	 	\ QQ17
 198+ A521              ;60                      RTS
 199+ A521              ;CA                      DEX 		\ skip Acc ==7
 200+ A521              ;CA                      DEX
 201+ A521              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ A521              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ A521              ;60                      RTS
 204+ A521              ;CA                      DEX 		\ continue 9to127 tokens
 205+ A521              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ A521              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ A521              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ A521              ;C9 0E                   CMP #14		\ < 14 ?
 209+ A521              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ A521              ;C9 20                   CMP #32		\ < 32 ?
 211+ A521              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ A521              ;		\ Token  < 14 or > 31
 213+ A521              ;A6 72                   LDX &72	 	\ QQ17
 214+ A521              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ A521              ;30 11                   BMI TT41 	\ if bit7 set
 216+ A521              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ A521              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ A521              ;	.TT42	\ Uppercase to lowercase
 219+ A521              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ A521              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ A521              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ A521              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ A521              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ A521              ;	.TT44	\ print character as is with TT26
 225+ A521              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ A521              ;
 227+ A521              ;	.TT41	\ QQ17 bit7 set
 228+ A521              ;24 72                   BIT &72		\ QQ17
 229+ A521              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ A521              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ A521              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ A521              ;48                      PHA 		\ else store token Acc
 233+ A521              ;8A                      TXA 		\ QQ17 copy
 234+ A521              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ A521              ;85 72                   STA &72	 	\ QQ17
 236+ A521              ;68                      PLA 		\ restore token
 237+ A521              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ A521              ;
 239+ A521              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ A521              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ A521              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ A521              ;
 243+ A521              ;	.crlf	\ Acc == 9,  colon on right
 244+ A521              ;A9 15                   LDA #21		\ on right
 245+ A521              ;85 2C                   STA &2C		\ XC
 246+ A521              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ A521              ;
 248+ A521              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ A521              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ A521              ;F0 63                   BEQ TT48	\ rts
 251+ A521              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ A521              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ A521              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ A521              ;48                      PHA 		\ push token
 255+ A521              ;8A                      TXA 		\ QQ17 copy
 256+ A521              ;29 BF                   AND #&BF	\ clear bit6
 257+ A521              ;85 72                   STA &72	 	\ QQ17
 258+ A521              ;68                      PLA 		\ pull token
 259+ A521              ;	.TT74	\ TT26, print character.
 260+ A521              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ A521              ;
 262+ A521              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ A521              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ A521              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ A521              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ A521              ;0A                      ASL A		      \ *= 2
 267+ A521              ;A8                      TAY 		      \ digram index = 0to62
 268+ A521              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ A521              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ A521              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ A521              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ A521              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ A521              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ A521              ;
 275+ A521              ;	.TT47	\ more page4, subtract #160
 276+ A521              ;E9 A0                   SBC #&A0	\ -= 160
 277+ A521              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ A521              ;AA                      TAX 		\ copy of word index
 279+ A521              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ A521              ;85 22                   STA &22		\ V
 281+ A521              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ A521              ;85 23                   STA &23		\ V+1
 283+ A521              ;A0 00                   LDY #0
 284+ A521              ;8A                      TXA 		\ token = word index
 285+ A521              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ A521              ;	.TT51	\ counters Y letter, X token
 287+ A521              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ A521              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ A521              ;C8                      INY 		\ letter count
 290+ A521              ;D0 F9                   BNE TT51	\ loop Y
 291+ A521              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ A521              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ A521              ;	.TT49	\ word ended
 294+ A521              ;C8                      INY
 295+ A521              ;D0 02                   BNE TT59    	\ next word
 296+ A521              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ A521              ;	.TT59	\ next word
 298+ A521              ;CA                      DEX 		\ token count
 299+ A521              ;D0 ED                   BNE TT51	\ loop X token
 300+ A521              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ A521              ;98                      TYA
 302+ A521              ;48                      PHA 		\ store Yindex
 303+ A521              ;A5 23                   LDA &23		\ V+1
 304+ A521              ;48                      PHA 		\ correct pointer hi
 305+ A521              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ A521              ;49 23                   EOR #&23	\ decode '#'
 307+ A521              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ A521              ;68                      PLA 		\ restore this depth's Vhi
 309+ A521              ;85 23                   STA &23		\ V+1
 310+ A521              ;68                      PLA
 311+ A521              ;A8                      TAY 		\ restore this depth's Yindex
 312+ A521              ;C8                      INY 		\ next letter
 313+ A521              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ A521              ;E6 23                   INC &23		\ V+1
 315+ A521              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ A521              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ A521              ;	.TT48 	\ rts
 318+ A521              ;60                      RTS 		\ end of flight token printing TT27
 319+ A521              ;
 320+ A521              ;
 321+ A521              ;
# file closed: ./Tables/name_digrams.asm
1046  A521              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1047  A521
1048  A521              ; Include all maths libraries to test assembly
1049  A521
1050  A521                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ A521 CB 7C        addhldesigned:          bit     7,h
   2+ A523 20 03                                jr      nz,.noneghl
   3+ A525 CD C2 AB                             call    negate16hl
   4+ A528 CB 7A        .noneghl:               bit     7,d
   5+ A52A 20 03                                jr      nz,.nonegde
   6+ A52C CD C9 AB                             call    negate16de
   7+ A52F 19           .nonegde:               add     hl,de                       ; do 2'd c add
   8+ A530 AF                                   xor     a                           ; assume positive
   9+ A531 CB 7C                                bit     7,h
  10+ A533 C8                                   ret     z                           ; if not set then can exit early
  11+ A534 CD C2 AB                             call    negate16hl
  12+ A537 3E FF                                ld      a,$FF
  13+ A539 C9                                   ret
  14+ A53A
# file closed: ./Maths/addhldesigned.asm
1051  A53A                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ A53A              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
   2+ A53A 57           AddAusngToHLsng:        ld      d,a
   3+ A53B 5C                                   ld      e,h
   4+ A53C 7C                                   ld      a,h
   5+ A53D E6 7F                                and     SignMask8Bit
   6+ A53F 67                                   ld      h,a
   7+ A540 7A                                   ld      a,d
   8+ A541 ED 31                                add     hl,a
   9+ A543 7B                                   ld      a,e
  10+ A544 E6 80                                and     SignOnly8Bit
  11+ A546 B4                                   or      h
  12+ A547 C9                                   ret
  13+ A548              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
  14+ A548 44           HLEequAusngMinusHLsng:  ld      b,h
  15+ A549 4F                                   ld      c,a
  16+ A54A 78                                   ld      a,b
  17+ A54B E6 80                                and     SignOnly8Bit
  18+ A54D 20 08                                jr      nz,.DoAdd
  19+ A54F EB           .DoSubtract:            ex      de,hl               ; move hl into de
  20+ A550 26 00                                ld      h,0                 ; hl = a
  21+ A552 69                                   ld      l,c
  22+ A553                                      ClearCarryFlag
  22+ A553 B7          >                        or a
  23+ A554 ED 52                                sbc     hl,de               ; hl = a - hl
  24+ A556 C9                                   ret
  25+ A557 79           .DoAdd:                 ld      a,c
  26+ A558 ED 31                                add hl,a
  27+ A55A C9                                   ret
  28+ A55B
  29+ A55B              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
  30+ A55B 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
  31+ A55C AA                                   xor     d                   ; .
  32+ A55D E6 80                                and     SignOnly8Bit        ; .
  33+ A55F 20 19                                jr      nz,.SignDifferent   ; .
  34+ A561 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
  35+ A562 E6 80                                and     SignOnly8Bit        ; so store it in iyh
  36+ A564 FD 67                                ld      iyh,a               ;
  37+ A566 78                                   ld      a,b                 ; bch = abs bch
  38+ A567 E6 7F                                and     SignMask8Bit        ; .
  39+ A569 47                                   ld      b,a                 ; .
  40+ A56A 7A                                   ld      a,d                 ; del = abs del
  41+ A56B E6 7F                                and     SignMask8Bit        ; .
  42+ A56D 57                                   ld      d,a                 ; .
  43+ A56E 7C                                   ld      a,h                 ; l = h + l
  44+ A56F 85                                   add     l                   ; .
  45+ A570 6F                                   ld      l,a                 ; .
  46+ A571 79                                   ld      a,c                 ; e = e + c + carry
  47+ A572 8B                                   adc     e                   ; .
  48+ A573 5F                                   ld      e,a                 ; .
  49+ A574 78                                   ld      a,b                 ; d = b + d + carry (signed)
  50+ A575 8A                                   adc     d                   ;
  51+ A576 FD B4                                or      iyh                 ; d = or back in sign bit
  52+ A578 57                                   ld      d,a                 ;
  53+ A579 C9                                   ret                         ; done
  54+ A57A 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
  55+ A57B FD 67                                ld      iyh,a               ; iyh = b sign
  56+ A57D E6 7F                                and     SignMask8Bit        ; .
  57+ A57F 47                                   ld      b,a                 ; .
  58+ A580 7A                                   ld      a,d                 ; del = abs del
  59+ A581 FD 6F                                ld      iyl,a               ; iyl = d sign
  60+ A583 E6 7F                                and     SignMask8Bit        ; .
  61+ A585 57                                   ld      d,a                 ; .
  62+ A586 E5                                   push    hl                  ; hl = bc - de
  63+ A587 60 69                                ld      hl,bc               ; if bc < de then there is a carry
  64+ A589 ED 52                                sbc     hl,de               ;
  65+ A58B E1                                   pop     hl                  ;
  66+ A58C 38 0E                                jr      c,.BCHltDEL
  67+ A58E 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
  68+ A590 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
  69+ A591                                      JumpIfALTNusng l,.BCHltDEL
  69+ A591 BD          >                        cp      l
  69+ A592 DA 9C A5    >                        jp		c, .BCHltDEL
  70+ A595 20 15                                jr      nz,.DELltBCH
  71+ A597              ; The same so its just zero
  72+ A597 AF           .BCHeqDEL:              xor     a                  ; its just zero
  73+ A598 57                                   ld      d,a                ; .
  74+ A599 5F                                   ld      e,a                ; .
  75+ A59A 6F                                   ld      l,a                ; .
  76+ A59B C9                                   ret                        ; .
  77+ A59C              ;BCH is less than DEL so its DEL - BCH the sort out sign
  78+ A59C 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
  79+ A59D 94                                   sub     h                  ; .                              ;   01D70F DEL
  80+ A59E 6F                                   ld      l,a                ; .                              ;  -000028 BCH
  81+ A59F 7B                                   ld      a,e                ; e = e - c - carry              ;1.
  82+ A5A0 99                                   sbc     c                  ; .                              ;
  83+ A5A1 5F                                   ld      e,a                ; .                              ;
  84+ A5A2 7A                                   ld      a,d                ; d = d - b - carry              ;
  85+ A5A3 98                                   sbc     b                  ; .                              ;
  86+ A5A4 57                                   ld      d,a                ; .                              ;
  87+ A5A5 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
  88+ A5A7 E6 80                                and     SignOnly8Bit       ;
  89+ A5A9 B2                                   or      d                  ;
  90+ A5AA 57                                   ld      d,a                ;
  91+ A5AB C9                                   ret
  92+ A5AC 7C           .DELltBCH:              ld      a,h                ; l = h - l
  93+ A5AD 95                                   sub     l                  ;
  94+ A5AE 6F                                   ld      l,a                ;
  95+ A5AF 79                                   ld      a,c                ; e = c - e - carry
  96+ A5B0 9B                                   sbc     e                  ;
  97+ A5B1 5F                                   ld      e,a                ;
  98+ A5B2 78                                   ld      a,b                ; d = b - d - carry
  99+ A5B3 9A                                   sbc     d                  ;
 100+ A5B4 57                                   ld      d,a                ;
 101+ A5B5 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 102+ A5B7 E6 80                                and     SignOnly8Bit       ;
 103+ A5B9 B2                                   or      d                  ;
 104+ A5BA 57                                   ld      d,a                ;
 105+ A5BB C9                                   ret
 106+ A5BC
 107+ A5BC
 108+ A5BC              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 109+ A5BC 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 110+ A5BD 4A                                   ld      c,d                     ; .
 111+ A5BE A9                                   xor     c                       ; A = A xor C
 112+ A5BF CB BA                                res     7,d                     ; clear sign bit of D
 113+ A5C1 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 114+ A5C3 19                                   add     hl,de                   ; HL = HL + DE
 115+ A5C4 C9                                   ret                             ; return
 116+ A5C5 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 117+ A5C7 D0                                   ret     nc                      ; if no carry return
 118+ A5C8 19                                   add     hl,de                   ; else HL = HL + DE
 119+ A5C9 EB                                   ex      de,hl                   ;      swap HL and DE
 120+ A5CA A7                                   and     a                       ;      reset carry
 121+ A5CB ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 122+ A5CD 41                                   ld      b,c                     ;      B = sign of C
 123+ A5CE C9                                   ret                             ;      ret
 124+ A5CF
 125+ A5CF
 126+ A5CF
 127+ A5CF              ; a = value to add
 128+ A5CF              ; b = offset (equivalent to regX)
 129+ A5CF              ; returns INWK [x] set to new value
 130+ A5CF              addINWKbasigned:
 131+ A5CF 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 132+ A5D2 4F           		ld      c,a                         ; preserve a
 133+ A5D3 78           		ld		a,b
 134+ A5D4 ED 31        		add		hl,a                        ; hl = INWK[x]
 135+ A5D6 79                   ld      a,c                         ; get back a value
 136+ A5D7 E6 80                and     $80                         ; get sign bit from a
 137+ A5D9 47                   ld      b,a                         ; now b = sign bit of a
 138+ A5DA 79                   ld      a,c                         ; a = original value
 139+ A5DB E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 140+ A5DD              ; hl = unsigned version of INWK0[b]
 141+ A5DD              ; a = value to add, also in c which will optimise later code
 142+ A5DD              ; b = sign bit of a ( in old code was varT)
 143+ A5DD              addhlcsigned:
 144+ A5DD 5E                   ld      e,(hl)                      ; de = INKK value
 145+ A5DE 23                   inc     hl
 146+ A5DF 56                   ld      d,(hl)
 147+ A5E0 23                   inc     hl                          ; now pointing a sign
 148+ A5E1 7E                   ld      a,(hl)                      ; a = sign bit
 149+ A5E2 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 150+ A5E3 A8                   xor     b                           ; a = resultant sign
 151+ A5E4 CB 7F                bit     7,a                         ; is it negative?
 152+ A5E6 28 28                jr      z,.postivecalc
 153+ A5E8              .negativecalc:
 154+ A5E8 7C                   ld      a,h
 155+ A5E9 E6 7F                and     SignMask8Bit
 156+ A5EB 67                   ld      h,a                         ; strip high bit
 157+ A5EC DD 68                ld      ixl,b                       ; save sign bit from b into d
 158+ A5EE 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 159+ A5F0 ED 42                sbc     hl,bc
 160+ A5F2 DD 45                ld      b,ixl                       ; get sign back
 161+ A5F4 EB                   ex      de,hl                       ; de = value hl = pointer to sign
 162+ A5F5 7E                   ld      a,(hl)                      ;
 163+ A5F6 E6 7F                and     SignMask8Bit
 164+ A5F8 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 165+ A5FA F6 80                or      $80                         ; set bit 0
 166+ A5FC A8                   xor     b                           ; flip bit on sign (var T)
 167+ A5FD 77                   ld      (hl),a
 168+ A5FE 2B                   dec     hl
 169+ A5FF 72                   ld      (hl),d
 170+ A600 2B                   dec     hl
 171+ A601 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 172+ A602 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 173+ A603 D8                   ret     c                           ; if carry was set then we can exit now
 174+ A604              .nocarry:
 175+ A604 CD C2 AB             call    negate16hl                  ; get hl back to positive, a is still inkw+2
 176+ A607 B0                   or      b                           ; b is still varT
 177+ A608 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 178+ A609 73                   ld      (hl),e
 179+ A60A 23                   inc     hl
 180+ A60B 72                   ld      (hl),d
 181+ A60C 23                   inc     hl
 182+ A60D 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 183+ A60E EB                   ex      de,hl                       ; hl = value de = pointer to sign
 184+ A60F C9                   ret
 185+ A610              .postivecalc:
 186+ A610 DD 68                ld      ixl,b
 187+ A612 06 00                ld      b,0
 188+ A614 19                   add     hl,de
 189+ A615 EB                   ex      de,hl
 190+ A616 DD B5                or      ixl                         ; we don;t need to recover b here
 191+ A618 77                   ld      (hl),a                      ; push sign into INWK[x]
 192+ A619 2B                   dec     hl
 193+ A61A 72                   ld      (hl),d
 194+ A61B 2B                   dec     hl
 195+ A61C 73                   ld      (hl),e
 196+ A61D C9                   ret
 197+ A61E
 198+ A61E              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 199+ A61E              ;MVT1
 200+ A61E              ;    S = bits 6 to 0 of A
 201+ A61E              ;    A = sign bit => T
 202+ A61E              ;    xor sign bit with ink[x] Sign
 203+ A61E              ;    if negative thn its not an add
 204+ A61E              ;
 205+ A61E              ;        and h, 7F
 206+ A61E              ;        b = 0
 207+ A61E              ;        c = varS
 208+ A61E              ;        subtract INW[X]hilo, bc
 209+ A61E              ;        retain carry
 210+ A61E              ;        get INKW[x]Sign
 211+ A61E              ;        and 7F
 212+ A61E              ;        subtract carry (so will go negtive if negative)
 213+ A61E              ;        xor bit 7 of h with T to flip bit
 214+ A61E              ;        write to INKW[x]Sign
 215+ A61E              ;
 216+ A61E              ;    else
 217+ A61E              ;MV10.
 218+ A61E              ;        add INWK[x]hi,lo, varS
 219+ A61E              ;        or      sign bit
 220+ A61E
 221+ A61E
# file closed: ./Maths/addhlasigned.asm
1052  A61E                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ A61E              ; Note its big endian
   2+ A61E 2A 17 9C     addDEtoCash:            ld      hl,(Cash)
   3+ A621 19                                   add     hl,de
   4+ A622 22 17 9C                             ld      (Cash),hl
   5+ A625 11 00 00                             ld      de,0
   6+ A628 2A 19 9C                             ld      hl,(Cash+2)
   7+ A62B ED 5A                                adc     hl,de
   8+ A62D 22 19 9C                             ld      (Cash+2),hl
   9+ A630 C9                                   ret
  10+ A631
  11+ A631 2A 17 9C     subDEfromCash:          ld      hl,(Cash)
  12+ A634 7C                                   ld      a,h
  13+ A635 B5                                   or      l
  14+ A636 2A 19 9C                             ld      hl,(Cash+2)
  15+ A639 B4                                   or      h
  16+ A63A B5                                   or      l
  17+ A63B C8                                   ret     z               ; No cash return
  18+ A63C B7                                   or      a
  19+ A63D 2A 17 9C                             ld      hl,(Cash)
  20+ A640 ED 52                                sbc     hl,de
  21+ A642 22 17 9C                             ld      (Cash),hl
  22+ A645 11 00 00                             ld      de,0
  23+ A648 2A 19 9C                             ld      hl,(Cash+2)
  24+ A64B ED 52                                sbc     hl,de
  25+ A64D 22 19 9C                             ld      (Cash+2),hl
  26+ A650                                      JumpOnBitSet h,7,.ZeroCash
  26+ A650 CB 7C       >                        bit 	7,h
  26+ A652 C2 56 A6    >                        jp      nz,.ZeroCash
  27+ A655 C9                                   ret
  28+ A656 21 00 00     .ZeroCash:              ld      hl,0
  29+ A659 22 17 9C                             ld      (Cash),hl
  30+ A65C 22 19 9C                             ld      (Cash+2),hl
  31+ A65F C9                                   ret
  32+ A660
# file closed: ./Maths/Utilities/AddDEToCash.asm
1053  A660                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ A660              ;INPUTS: ahl = dividend cde = divisor
   2+ A660              ;OUTPUTS: cde = quotient ahl = remainder
   3+ A660 47           Div24by24:              ld b,a
   4+ A661 E5                                   push hl
   5+ A662 DD E1                                pop ix
   6+ A664 2E 18                                ld l,24
   7+ A666 E5                                   push hl
   8+ A667 AF                                   xor a
   9+ A668 67                                   ld h,a
  10+ A669 6F                                   ld l,a
  11+ A66A DD 29        .Div24by24loop:         add ix,ix
  12+ A66C CB 10                                rl b
  13+ A66E ED 6A                                adc hl,hl
  14+ A670 17                                   rla
  15+ A671 B9                                   cp c
  16+ A672 38 0C                                jr c,.Div24by24skip
  17+ A674 20 05                                jr nz,.Div24by24setbit
  18+ A676 ED 52                                sbc hl,de
  19+ A678 19                                   add hl,de
  20+ A679 38 05                                jr c,.Div24by24skip
  21+ A67B ED 52        .Div24by24setbit:       sbc hl,de
  22+ A67D 99                                   sbc a,c
  23+ A67E DD 23                                inc ix
  24+ A680 E3           .Div24by24skip:         ex (sp),hl
  25+ A681 2D                                   dec l
  26+ A682 E3                                   ex (sp),hl
  27+ A683 20 E5                                jr nz,.Div24by24loop
  28+ A685 D1                                   pop de
  29+ A686 48                                   ld c,b
  30+ A687 DD E5                                push ix
  31+ A689 D1                                   pop de
  32+ A68A C9                                   ret
  33+ A68B
  34+ A68B FD 67        Div24by24ASigned:       ld      iyh,a
  35+ A68D E6 7F                                and     SignMask8Bit
  36+ A68F CD 60 A6                             call    Div24by24
  37+ A692 F5                                   push    af
  38+ A693 FD 7C                                ld      a,iyh
  39+ A695 E6 80                                and     SignOnly8Bit
  40+ A697 B1                                   or      c
  41+ A698 4F                                   ld      c,a
  42+ A699 F1                                   pop     af
  43+ A69A C9                                   ret
  44+ A69B
  45+ A69B
  46+ A69B FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ A69D A9                                   xor     c               ; flip sign if negative
  48+ A69E E6 80                                and     SignOnly8Bit    ; .
  49+ A6A0 FD 6F                                ld      iyl,a           ; .
  50+ A6A2 79                                   ld      a,c             ; make both values ABS
  51+ A6A3 E6 7F                                and     SignMask8Bit    ; .
  52+ A6A5 4F                                   ld      c,a             ; .
  53+ A6A6 FD 7C                                ld      a,iyh           ; .
  54+ A6A8 E6 7F                                and     SignMask8Bit    ; .
  55+ A6AA CD 60 A6                             call    Div24by24       ; do abs divide
  56+ A6AD FD B5                                or      iyl             ; bring in sign bit
  57+ A6AF FD 67                                ld      iyh,a           ; save a
  58+ A6B1 79                                   ld      a,c             ; sort sign for c
  59+ A6B2 FD B5                                or      iyl             ;
  60+ A6B4 4F                                   ld      c,a             ;
  61+ A6B5 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ A6B7 C9                                   ret
  63+ A6B8
  64+ A6B8              ; --------------------------------------------------------------
  65+ A6B8              ;divdide by 16 using undocumented instrunctions
  66+ A6B8              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ A6B8              ;Output: BC = Quotient, HL = Remainder
  68+ A6B8 47           PROJ256mulAdivQ:        ld      b,a
  69+ A6B9 0E 00                                ld      c,0
  70+ A6BB 16 00                                ld      d,0
  71+ A6BD 3A E3 97                             ld      a,(varQ)
  72+ A6C0 5F                                   ld      e,a
  73+ A6C1 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ A6C4 78                                   ld      a,b
  75+ A6C5 06 10                                ld      b,16
  76+ A6C7 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ A6C9 17                                   rla             ; ...
  78+ A6CA ED 6A                                adc     hl,hl       ; ...
  79+ A6CC ED 52                                sbc     hl,de       ; ...
  80+ A6CE 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ A6D0 19                                   add     hl,de       ; ...
  82+ A6D1 0D                                   dec     c       ; ...
  83+ A6D2 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ A6D4 79                                   ld      a,c
  85+ A6D5 32 E4 97                             ld      (varR),a
  86+ A6D8 C9                                   ret
  87+ A6D9
  88+ A6D9              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
  89+ A6D9              ;OUTPUTS:   cahl = quotient cde = divisor
  90+ A6D9 32 DE 96     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
  91+ A6DC                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
  91+ A6DC 2A 12 C0    >                        ld       hl,(UBnKzlo)
  91+ A6DF 22 E3 97    >                        ld       (varQ),hl
  92+ A6E2 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
  93+ A6E5 32 E5 97                             ld      (varS),a                        ; S = inkw z sign
  94+ A6E8 ED 5B DC 96  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
  95+ A6EC 7B                                   ld      a,e                             ; num lo
  96+ A6ED F6 01                                or      1                               ; must be at least 1
  97+ A6EF 32 DC 96                             ld      (varP),a                        ; store
  98+ A6F2 5F                                   ld      e,a                             ; update DE too
  99+ A6F3 3A DE 96                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 100+ A6F6 21 E5 97                             ld      hl,varS                         ; hl = address of VarS
 101+ A6F9 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 102+ A6FA E6 80                                and     $80                             ;
 103+ A6FC 32 00 98                             ld      (varT),a                        ; T = Sign bit of A
 104+ A6FF FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 105+ A702 3A DE 96                             ld      a,(varPhi2)                     ;
 106+ A705 E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 107+ A707              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 107+ A707 FE 40       >                        cp     $40
 107+ A709 D2 17 A7    >                        jp		nc,DV14
 108+ A70C                                      ShiftDELeft1                            ; de (or P,P1) > 1
 108+ A70C CB 23       >			   sla e
 108+ A70E CB 12       >			   rl  d
 109+ A710 CB 17                                rl      a                               ; and accumulator as 3rd byte
 110+ A712 FD 2C                                inc     iyl
 111+ A714 C2 07 A7                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 112+ A717 32 DE 96     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 113+ A71A ED 53 DC 96                          ld      (varP),de                       ; store off the value so far
 114+ A71E 3A E5 97                             ld      a,(varS)                        ; zsign
 115+ A721 E6 7F                                and     $7F                             ; denom sg7
 116+ A723                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 117+ A723 2A E3 97                             ld      hl,(varQ)                       ; demon lo
 118+ A726 FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 119+ A728                                      ShiftHLLeft1
 119+ A728 CB 25       >			   sla l
 119+ A72A CB 14       >			   rl  h
 120+ A72C CB 17                                rl      a                               ; mulitply QRS by 2
 121+ A72E F2 26 A7                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 122+ A731 22 E3 97     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 123+ A734 32 E3 97                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 124+ A737 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 125+ A739 32 E4 97                             ld      (varR),a                        ;  R
 126+ A73C 3A DE 96                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 127+ A73F CD B8 A6                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 128+ A742 3E 00                                ld      a,0
 129+ A744 32 F8 97                             ld      (varKp1),a
 130+ A747 32 F9 97                             ld      (varKp2),a
 131+ A74A 32 FA 97                             ld      (varKp3),a                      ; clear out K+1 to K+3
 132+ A74D FD 7D                                ld      a,iyl                           ; Y counter for scale
 133+ A74F                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 133+ A74F CB 7F       >                        bit 	7,a
 133+ A751 CA 7C A7    >                        jp      z,DV12
 134+ A754 3A E4 97                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 135+ A757 ED 5B F7 97                          ld      de,(varK)                       ; d= k1
 136+ A75B 2A FB 97                             ld      hl,(varK2)                      ; h = k3, l = k2
 137+ A75E 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 138+ A75F CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 139+ A761 CB 12                                rl      d                               ; k1
 140+ A763 CB 15                                rl      l                               ; k2
 141+ A765 CB 14                                rl      h                               ; k3
 142+ A767 FD 2C                                inc     iyl
 143+ A769 20 F4                                jr      nz,DVL8                         ;
 144+ A76B ED 53 F7 97  DVL8Save:               ld      (varK),de
 145+ A76F 22 FB 97                             ld      (varK2),hl                      ; save back K0 to k3
 146+ A772 3A 00 98                             ld      a,(varT)
 147+ A775 4F                                   ld      c,a                             ; get varT into c reg
 148+ A776 7C                                   ld      a,h                             ; a= k3 (sign)
 149+ A777 B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 150+ A778 32 0A 98                             ld      (varK3),a                       ; load sign bit back into K3
 151+ A77B C9                                   ret
 152+ A77C              DV12:                   JumpIfAIsZero   DV13                    ; Y Count zerp, go to DV13
 152+ A77C A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 152+ A77D CA 94 A7    >                        jp	z, DV13
 153+ A780 3A E4 97                             ld      a,(varR)                        ; Reduce Remainder
 154+ A783 CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 155+ A785 FD 2D                                dec     iyl
 156+ A787 C2 83 A7                             jp      nz,DVL10                        ; loop y reduce until y is zero
 157+ A78A 32 F7 97                             ld      (varK),a                        ; k Lo
 158+ A78D                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 158+ A78D 3A 00 98    >                        ld       a,(varT)
 158+ A790 32 FA 97    >                        ld       (varKp3),a
 159+ A793 C9                                   ret
 160+ A794              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 160+ A794 3A E4 97    >                        ld       a,(varR)
 160+ A797 32 F7 97    >                        ld       (varK),a
 161+ A79A                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 161+ A79A 3A 00 98    >                        ld       a,(varT)
 161+ A79D 32 FA 97    >                        ld       (varKp3),a
 162+ A7A0 C9                                   ret
 163+ A7A1
 164+ A7A1
 165+ A7A1 CD D9 A6     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 166+ A7A4 3A FA 97                             ld      a,(varKp3)
 167+ A7A7 E6 7F                                and     $7F
 168+ A7A9 21 F9 97                             ld      hl,varKp2
 169+ A7AC B6                                   or      (hl)
 170+ A7AD C2 C2 A7                             jp      nz,PL44TooBig
 171+ A7B0 3A F8 97                             ld      a,(varKp1)
 172+ A7B3 FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 173+ A7B5 30 0B                                jr      nc,PL44TooBig
 174+ A7B7                                      ClearCarryFlag                          ; we have a good result regardless
 174+ A7B7 B7          >                        or a
 175+ A7B8 2A F7 97                             ld      hl,(varK)                       ; get K (0 1)
 176+ A7BB 3A FA 97                             ld      a,(varKp3)                      ; if sign bit high?
 177+ A7BE CB 7F                                bit     7,a
 178+ A7C0 C8                                   ret     z                               ; no so we can just return
 179+ A7C1 C9           PL44:                   ret
 180+ A7C2 37           PL44TooBig:             scf
 181+ A7C3 C9                                   ret
 182+ A7C4
# file closed: ./Maths/DIVD3B2.asm
1054  A7C4                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A7C4              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A7C4 2A E4 97                             ld  hl,(varRS)
   3+ A7C7 3A E3 97                             ld  a,(varQ)
   4+ A7CA C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A7CC 11 00 00                             ld  de,0        ; de = XY
   6+ A7CF 47                                   ld  b,a         ; b = Q
   7+ A7D0                                      ShiftHLRight1
   7+ A7D0 CB 3C       >			   srl h
   7+ A7D2 CB 1D       >			   rr  l
   8+ A7D4 CB 20                                sla b
   9+ A7D6 30 03                                jr  nc,.LL126
  10+ A7D8 EB           .LL125:                 ex de,hl
  11+ A7D9 19                                   add hl,de
  12+ A7DA EB                                   ex  de,hl       ; de = de + rs
  13+ A7DB              .LL126:                 ShiftHLRight1
  13+ A7DB CB 3C       >			   srl h
  13+ A7DD CB 1D       >			   rr  l
  14+ A7DF CB 20                                sla b
  15+ A7E1 38 F5                                jr      c,.LL125
  16+ A7E3 20 F6                                jr      nz,.LL126
  17+ A7E5 EB                                   ex      de,hl   ; hl = result
  18+ A7E6 D1 C1                                pop     bc,,de
  19+ A7E8 C9                                   ret
  20+ A7E9
  21+ A7E9
  22+ A7E9              MacroDEEquQmulASigned:  MACRO
  23+ A7E9 ~                                    ld      d,a                         ; save a into d
  24+ A7E9 ~                                    ld      a,(varQ)
  25+ A7E9 ~                                    ld      e,a
  26+ A7E9 ~                                    xor     d                           ; a = a xor var Q
  27+ A7E9 ~                                    and     SignOnly8Bit
  28+ A7E9 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A7E9 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A7E9 ~                                    and     SignMask8Bit
  31+ A7E9 ~                                    ld      d,a
  32+ A7E9 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A7E9 ~                                    and     SignMask8Bit
  34+ A7E9 ~                                    ld      e,a
  35+ A7E9 ~                                    mul                                 ; de = a * Q
  36+ A7E9 ~                                    ld      a,d
  37+ A7E9 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A7E9 ~                                    ld      d,a
  39+ A7E9                                      ENDM
  40+ A7E9
  41+ A7E9
  42+ A7E9
  43+ A7E9                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A7E9              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A7E9 57          >                        ld      d,a                         ; save a into d
  44+ A7EA 3A E3 97    >                        ld      a,(varQ)
  44+ A7ED 5F          >                        ld      e,a
  44+ A7EE AA          >                        xor     d                           ; a = a xor var Q
  44+ A7EF E6 80       >                        and     SignOnly8Bit
  44+ A7F1 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A7F2 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A7F3 E6 7F       >                        and     SignMask8Bit
  44+ A7F5 57          >                        ld      d,a
  44+ A7F6 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A7F7 E6 7F       >                        and     SignMask8Bit
  44+ A7F9 5F          >                        ld      e,a
  44+ A7FA ED 30       >                        mul                                 ; de = a * Q
  44+ A7FC 7A          >                        ld      a,d
  44+ A7FD B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A7FE 57          >                        ld      d,a
  45+ A7FF 2A E4 97     madDEaddRS:             ld		hl,(varR)
  46+ A802 CD 0B A8                             call	madXAAddHLDESigned
  47+ A805 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A806                                      ClearCarryFlag
  48+ A806 B7          >                        or a
  49+ A807 DD 6B                                ld      ixl,e
  50+ A809 7A                                   ld      a,d
  51+ A80A C9                                   ret
  52+ A80B
  53+ A80B
  54+ A80B 7C           madXAAddHLDESigned:     ld      a,h
  55+ A80C E6 80                                and     SignOnly8Bit
  56+ A80E 47                                   ld      b,a                         ;save sign bit in b
  57+ A80F AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A810                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A810 FA 28 A8    >                        jp		m, .ADDHLDEOppSGN
  59+ A813 78           .ADDHLDESameSigns:       ld      a,b
  60+ A814 B2                                   or      d
  61+ A815                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A815 FA 1A A8    >                        jp		m, .ADDHLDESameNeg
  62+ A818 19                                   add     hl,de
  63+ A819 C9                                   ret
  64+ A81A 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A81B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A81D 67                                   ld      h,a
  67+ A81E 7A                                   ld      a,d
  68+ A81F E6 7F                                and     SignMask8Bit
  69+ A821 57                                   ld      d,a
  70+ A822 19                                   add     hl,de
  71+ A823 3E 80                                ld      a,SignOnly8Bit
  72+ A825 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A826 67                                   ld      h,a
  74+ A827 C9                                   ret
  75+ A828 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A829 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A82B 67                                   ld      h,a
  78+ A82C 7A                                   ld      a,d
  79+ A82D E6 7F                                and     SignMask8Bit
  80+ A82F 57                                   ld      d,a
  81+ A830 B7                                   or      a
  82+ A831 ED 52                                sbc     hl,de
  83+ A833 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A835 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A836 B4                                   or      h
  86+ A837 67                                   ld      h,a                         ; set the previou sign value
  87+ A838 C9                                   ret
  88+ A839              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A839 AF          >                    xor a
  88+ A83A 95          >                    sub l
  88+ A83B 6F          >                    ld l,a
  88+ A83C 9F          >                    sbc a,a
  88+ A83D 94          >                    sub h
  88+ A83E 67          >                    ld h,a
  89+ A83F 78                                   ld      a,b
  90+ A840 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A842 B4                                   or      h
  92+ A843 67                                   ld      h,a                         ; recover sign
  93+ A844 C9                                   ret
  94+ A845
  95+ A845
  96+ A845                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A845                  ;
  98+ A845                  ; enter : hl = 16-bit multiplier   = x
  99+ A845                  ;          e =  8-bit multiplicand = y
 100+ A845                  ;
 101+ A845                  ; exit  : ahl = 24-bit product
 102+ A845                  ;         carry reset
 103+ A845                  ;
 104+ A845                  ; uses  : af, de, hl
 105+ A845 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A846 63                                   ld h,e                      ; yl
 107+ A847 ED 30                                mul de                      ; xh*yl
 108+ A849 EB                                   ex de,hl
 109+ A84A ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A84C
 111+ A84C 7A                                   ld  a,d                     ; sum products
 112+ A84D 85                                   add a,l
 113+ A84E 57                                   ld  d,a
 114+ A84F EB                                   ex de,hl
 115+ A850
 116+ A850 7A                                   ld  a,d
 117+ A851 CE 00                                adc a,0
 118+ A853 C9                                   ret
 119+ A854
 120+ A854
 121+ A854
 122+ A854                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A854                 ;
 124+ A854                 ; enter : de = 16-bit multiplicand = y
 125+ A854                 ;         hl = 16-bit multiplicand = x
 126+ A854                 ;
 127+ A854                 ; exit  : dehl = 32-bit product
 128+ A854                 ;         carry reset
 129+ A854                 ;
 130+ A854                 ; uses  : af, bc, de, hl
 131+ A854
 132+ A854
 133+ A854
 134+ A854 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A855 4B                                   ld c,e                      ; y0
 136+ A856 5D                                   ld e,l                      ; x0
 137+ A857 6A                                   ld l,d
 138+ A858 E5                                   push hl                     ; x1 y1
 139+ A859 69                                   ld l,c                      ; y0
 140+ A85A              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A85A ED 30                                mul de                      ; y1*x0
 142+ A85C EB                                   ex de,hl
 143+ A85D ED 30                                mul de                      ; x1*y0
 144+ A85F
 145+ A85F AF                                   xor a                       ; zero A
 146+ A860 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A861 8F                                   adc a,a                     ; capture carry p3
 148+ A862
 149+ A862 59                                   ld e,c                      ; x0
 150+ A863 50                                   ld d,b                      ; y0
 151+ A864 ED 30                                mul de                      ; y0*x0
 152+ A866
 153+ A866 47                                   ld b,a                      ; carry from cross products
 154+ A867 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A868
 156+ A868 7A                                   ld a,d
 157+ A869 85                                   add a,l
 158+ A86A 67                                   ld h,a
 159+ A86B 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A86C
 161+ A86C D1                                   pop de
 162+ A86D ED 30                                mul de                      ; x1*y1
 163+ A86F
 164+ A86F EB                                   ex de,hl
 165+ A870 ED 4A                                adc hl,bc
 166+ A872 EB                                   ex de,hl                    ; de = final MSW
 167+ A873
 168+ A873 C9                                   ret
 169+ A874
 170+ A874              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A874              ; enter : de = 16-bit multiplicand
 172+ A874              ;         hl = 16-bit multiplicand
 173+ A874              ; exit  : hl = 16-bit product
 174+ A874              ;         carry reset
 175+ A874              ; maths is
 176+ A874              ;        hl = y , de= x
 177+ A874              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A874              ;        hl = yhih & xlo + x
 179+ A874              ;
 180+ A874              ;
 181+ A874              ; uses  : af, bc, de, hl
 182+ A874 C5           mulDEbyHL:              push    bc
 183+ A875 7A                                   ld a,d                      ; a = xh
 184+ A876 54                                   ld d,h                      ; d = yh
 185+ A877 67                                   ld h,a                      ; h = xh
 186+ A878 4B                                   ld c,e                      ; c = xl
 187+ A879 45                                   ld b,l                      ; b = yl
 188+ A87A ED 30                                mul                         ; yh * yl
 189+ A87C EB                                   ex de,hl
 190+ A87D ED 30                                mul                         ; xh * yl
 191+ A87F 19                                   add hl,de                   ; add cross products
 192+ A880 59                                   ld e,c
 193+ A881 50                                   ld d,b
 194+ A882 ED 30                                mul                         ; yl * xl
 195+ A884 7D                                   ld a,l                      ; cross products lsb
 196+ A885 82                                   add a,d                     ; add to msb final
 197+ A886 67                                   ld h,a
 198+ A887 6B                                   ld l,e                      ; hl = final
 199+ A888                                      ; 83 cycles, 19 bytes
 200+ A888 AF                                   xor a                       ; reset carry
 201+ A889 C1                                   pop     bc
 202+ A88A C9                                   ret
 203+ A88B
 204+ A88B              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 205+ A88B 7A           mulHLEbyDSigned:        ld      a,d
 206+ A88C AC                                   xor     h
 207+ A88D E6 80                                and     SignOnly8Bit
 208+ A88F FD 67                                ld      iyh,a               ; iyh = copy of sign
 209+ A891 7C                                   ld      a,h
 210+ A892 E6 7F                                and     SignMask8Bit
 211+ A894 67                                   ld      h,a                 ; hle = abs (hle)
 212+ A895 7A                                   ld      a,d
 213+ A896 E6 7F                                and     SignMask8Bit
 214+ A898 57                                   ld      d,a                 ; now also d = abs d
 215+ A899 ED 30        .PerformMultiply:       mul                         ; de = E*A
 216+ A89B 4B                                   ld      c,e                 ; c = low E*A
 217+ A89C 5D                                   ld      e,l                 ;
 218+ A89D 6F                                   ld      l,a                 ; hl = H,A
 219+ A89E 7A                                   ld      a,d                 ; a = (E*A)/256
 220+ A89F 55                                   ld      d,l                 ; de = A,L
 221+ A8A0 ED 30                                mul                         ; de = E*A (high) + E*A/256(low)
 222+ A8A2 ED 32                                add     de,a                ; .
 223+ A8A4 7A                                   ld      a,d                 ; hl = E*A (high) + E*A/256(low)
 224+ A8A5 EB                                   ex      de,hl               ; A =  E*A, de = HA
 225+ A8A6 ED 30                                mul
 226+ A8A8 ED 32                                add     de,a                ;
 227+ A8AA 7A                                   ld      a,d
 228+ A8AB FD B4                                or      iyh                 ; recover sign
 229+ A8AD 57                                   ld      d,a                 ; sign back on d
 230+ A8AE C9                                   ret
 231+ A8AF
 232+ A8AF
 233+ A8AF              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 234+ A8AF              ; enter : de = 16-bit multiplicand
 235+ A8AF              ;         hl = 16-bit multiplicand
 236+ A8AF              ; exit  : hl = 16-bit product
 237+ A8AF              ;         carry reset
 238+ A8AF              ;
 239+ A8AF              ; uses  : af, bc, de, hl
 240+ A8AF 00           mulDEbyHLSignByte       DB      0
 241+ A8B0 AF           mulDEbyHLSgnTo2c:       xor     a
 242+ A8B1 32 AF A8                             ld      (mulDEbyHLSignByte),a
 243+ A8B4 7A           .SignDE:                ld      a,d
 244+ A8B5 ED 27 80                             test    $80
 245+ A8B8 28 08                                jr      z,.SignHL
 246+ A8BA E6 7F        .NegativeDE:            and     $7F
 247+ A8BC 57                                   ld      d,a
 248+ A8BD 3E 80                                ld      a,$80
 249+ A8BF 32 AF A8                             ld      (mulDEbyHLSignByte),a
 250+ A8C2 7C           .SignHL:                ld      a,h
 251+ A8C3 ED 27 80                             test    $80
 252+ A8C6 28 0B                                jr      z,.AbsoluteMultiply
 253+ A8C8 E6 7F        .NegativeHL:            and     $7F
 254+ A8CA 67                                   ld      h,a
 255+ A8CB 3A AF A8                             ld      a,(mulDEbyHLSignByte)
 256+ A8CE EE 80                                xor     $80
 257+ A8D0 32 AF A8                             ld      (mulDEbyHLSignByte),a
 258+ A8D3 CD 74 A8     .AbsoluteMultiply:      call    mulDEbyHL
 259+ A8D6 3A AF A8     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 260+ A8D9 ED 27 80                             test    $80
 261+ A8DC C8                                   ret     z
 262+ A8DD AF           .Negateghl: 			xor 	a
 263+ A8DE 95                                   sub 	l
 264+ A8DF 6F                                   ld 		l,a
 265+ A8E0 9F                                   sbc 	a,a
 266+ A8E1 94                                   sub 	h
 267+ A8E2 67                                   ld 		h,a
 268+ A8E3 C9                                   ret
 269+ A8E4
 270+ A8E4 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 271+ A8E5 32 AF A8                             ld      (mulDEbyHLSignByte),a
 272+ A8E8 7A           .SignDE:                ld      a,d
 273+ A8E9 ED 27 80                             test    $80
 274+ A8EC 28 08                                jr      z,.AbsoluteMultiply
 275+ A8EE E6 7F        .NegativeDE:            and     $7F
 276+ A8F0 57                                   ld      d,a
 277+ A8F1 3E 80                                ld      a,$80
 278+ A8F3 32 AF A8                             ld      (mulDEbyHLSignByte),a
 279+ A8F6 CD 74 A8     .AbsoluteMultiply:      call    mulDEbyHL
 280+ A8F9 3A AF A8     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 281+ A8FC ED 27 80                             test    $80
 282+ A8FF C8                                   ret     z
 283+ A900 AF           .Negateghl:             xor 	a
 284+ A901 95                                   sub 	l
 285+ A902 6F                                   ld 		l,a
 286+ A903 9F                                   sbc 	a,a
 287+ A904 94                                   sub 	h
 288+ A905 67                                   ld 		h,a
 289+ A906 C9                                   ret
 290+ A907
 291+ A907
# file closed: ./Maths/multiply.asm
1055  A907                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A907              ; "ASM_SQUA : TESTGOOD"
   2+ A907              ; "AP = A^2 A = low,P = hi"
   3+ A907
   4+ A907              inline_squde: MACRO
   5+ A907 ~            			ld	e,a
   6+ A907 ~            			ld  d,a
   7+ A907 ~            			mul
   8+ A907              			ENDM
   9+ A907
  10+ A907              inline_squa: MACRO
  11+ A907 ~            			ld	e,a
  12+ A907 ~            			ld  d,a
  13+ A907 ~            			mul
  14+ A907 ~            			ld	a,e
  15+ A907              			ENDM
  16+ A907
  17+ A907
  18+ A907              asm_squa:
  19+ A907 E6 7F        	and SignMask8Bit
  20+ A909              ; "ASM SQUA2 : TESTGOOD"
  21+ A909              ; "AP = A^2 A = low,P = hi singed"
  22+ A909              asm_squa2:
  23+ A909 5F           	ld e, a
  24+ A90A 57           	ld d,a
  25+ A90B ED 30        	mul
  26+ A90D ED 53 DC 96  	ld (varP),de
  27+ A911 7B           	ld a,e
  28+ A912 C9           	ret
# file closed: ./Maths/asm_square.asm
1056  A913                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A913              ; "ASM SQRT : TESTGOOD"
   2+ A913              ; "16-bit integer square root"
   3+ A913              ; "call with de = number to square root"
   4+ A913              ; "returns   hl = square root"
   5+ A913              ; "corrupts  bc, de"
   6+ A913              asm_sqrt:
   7+ A913 01 00 80     	ld bc,$8000
   8+ A916 61           	ld h,c
   9+ A917 69           	ld l,c
  10+ A918              .sqrloop:
  11+ A918 CB 38        	srl b
  12+ A91A CB 19        	rr c
  13+ A91C 09           	add hl,bc
  14+ A91D EB           	ex de,hl
  15+ A91E ED 52        	sbc hl,de
  16+ A920 38 04        	jr c,.sqrbit
  17+ A922 EB           	ex de,hl
  18+ A923 09           	add hl,bc
  19+ A924 18 05        	jr .sqrfi
  20+ A926              .sqrbit:
  21+ A926 19           	add hl,de
  22+ A927 EB           	ex de,hl
  23+ A928 B7           	or a
  24+ A929 ED 42        	sbc hl,bc
  25+ A92B              .sqrfi:
  26+ A92B CB 3C        	srl h
  27+ A92D CB 1D        	rr l
  28+ A92F CB 38        	srl b
  29+ A931 CB 19        	rr c
  30+ A933 30 E3        	jr nc,.sqrloop
  31+ A935 C9           	ret
  32+ A936
  33+ A936
  34+ A936              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A936 3A E3 97     	ld		a,(varQ)
  36+ A939 5F           	ld		e,a
  37+ A93A 3A E4 97     	ld		a,(varR)
  38+ A93D 57           	ld		d,a
  39+ A93E CD 13 A9     	call	asm_sqrt
  40+ A941 7D               ld      a,l
  41+ A942 32 E3 97     	ld		(varQ),a
  42+ A945 C9           	ret
  43+ A946
# file closed: ./Maths/asm_sqrt.asm
1057  A946                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A946              ;
   2+ A946              ;   Set flags E to 11111110
   3+ A946              ;   Loop:   A << 2
   4+ A946              ;           if carry was 0
   5+ A946              ;               if a >= D
   6+ A946              ;                   A = A - D
   7+ A946              ;                   clear carry (probably irrelevant really)
   8+ A946              ;           else
   9+ A946
  10+ A946              ;               sla flags << bringing in carry of 1
  11+ A946              ;               if bit 7 of flag was set then loop
  12+ A946              ;                                        elase a = e and exit
  13+ A946              ;
  14+ A946              ;
  15+ A946              ;
  16+ A946
  17+ A946              AEquAmul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
  17+ A946 BA          >                        cp     d
  17+ A947 D2 65 A9    >                        jp		nc,.Ll28Exit255
  18+ A94A 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
  19+ A94C CB 27        .DivideLoop:            sla     a
  20+ A94E 38 0D                                jr      c,.LL29
  21+ A950                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
  21+ A950 BA          >                        cp      d
  21+ A951 DA 56 A9    >                        jp		c, .SkipSub
  22+ A954 92                                   sub     d
  23+ A955                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
  23+ A955 B7          >                        or a
  24+ A956              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
  24+ A956 3F          >                        ccf
  25+ A957 CB 13                                rl      e
  26+ A959 38 F1                                jr      c,.DivideLoop
  27+ A95B 7B                                   ld      a,e
  28+ A95C C9                                   ret
  29+ A95D 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  30+ A95E                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
  30+ A95E 37          >                        scf
  31+ A95F CB 13                                rl      e                           ; rotate counter e left
  32+ A961 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
  33+ A963 7B                                   ld      a,e                         ; stick result in a
  34+ A964 C9                                   ret
  35+ A965 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  36+ A967 C9                                   ret
  37+ A968
  38+ A968
  39+ A968              ; Divide 8-bit values
  40+ A968              ; In: Divide E by divider C
  41+ A968              ; Out: A = result, B = rest
  42+ A968              ;
  43+ A968              ;;;Div8:
  44+ A968              ;;;    xor a
  45+ A968              ;;;    ld b,8
  46+ A968              ;;;Div8_Loop:
  47+ A968              ;;;    rl e
  48+ A968              ;;;    rla
  49+ A968              ;;;    sub c
  50+ A968              ;;;    jr nc,Div8_NoAdd
  51+ A968              ;;;    add a,c
  52+ A968              ;;;Div8_NoAdd:
  53+ A968              ;;;    djnz Div8_Loop
  54+ A968              ;;;    ld b,a0
  55+ A968              ;;;    ld a,e
  56+ A968              ;;;    rla
  57+ A968              ;;;    cpl
  58+ A968              ;;;    ret
  59+ A968
  60+ A968              ;;Inputs: DE is the numerator, BC is the divisor
  61+ A968              ;;Outputs: DE is the result
  62+ A968              ;;         A is a copy of E
  63+ A968              ;;         HL is the remainder
  64+ A968              ;;         BC is not changed
  65+ A968              ;; so DE = DE /BC
  66+ A968              ;140 bytes
  67+ A968              ;145cc
  68+ A968
  69+ A968              MacroDEDivBC:       MACRO
  70+ A968 ~                                rla
  71+ A968 ~                                adc     hl,hl
  72+ A968 ~                                sbc     hl,bc
  73+ A968 ~                                jr      nc,$+3
  74+ A968 ~                                add     hl,bc
  75+ A968                                  ENDM
  76+ A968
  77+ A968              DEequDEDivBC:
  78+ A968 AF               xor a
  79+ A969 ED 62            sbc hl,hl
  80+ A96B 7A               ld a,d
  81+ A96C                  MacroDEDivBC
  81+ A96C 17          >                    rla
  81+ A96D ED 6A       >                    adc     hl,hl
  81+ A96F ED 42       >                    sbc     hl,bc
  81+ A971 30 01       >                    jr      nc,$+3
  81+ A973 09          >                    add     hl,bc
  82+ A974                  MacroDEDivBC
  82+ A974 17          >                    rla
  82+ A975 ED 6A       >                    adc     hl,hl
  82+ A977 ED 42       >                    sbc     hl,bc
  82+ A979 30 01       >                    jr      nc,$+3
  82+ A97B 09          >                    add     hl,bc
  83+ A97C                  MacroDEDivBC
  83+ A97C 17          >                    rla
  83+ A97D ED 6A       >                    adc     hl,hl
  83+ A97F ED 42       >                    sbc     hl,bc
  83+ A981 30 01       >                    jr      nc,$+3
  83+ A983 09          >                    add     hl,bc
  84+ A984                  MacroDEDivBC
  84+ A984 17          >                    rla
  84+ A985 ED 6A       >                    adc     hl,hl
  84+ A987 ED 42       >                    sbc     hl,bc
  84+ A989 30 01       >                    jr      nc,$+3
  84+ A98B 09          >                    add     hl,bc
  85+ A98C                  MacroDEDivBC
  85+ A98C 17          >                    rla
  85+ A98D ED 6A       >                    adc     hl,hl
  85+ A98F ED 42       >                    sbc     hl,bc
  85+ A991 30 01       >                    jr      nc,$+3
  85+ A993 09          >                    add     hl,bc
  86+ A994                  MacroDEDivBC
  86+ A994 17          >                    rla
  86+ A995 ED 6A       >                    adc     hl,hl
  86+ A997 ED 42       >                    sbc     hl,bc
  86+ A999 30 01       >                    jr      nc,$+3
  86+ A99B 09          >                    add     hl,bc
  87+ A99C                  MacroDEDivBC
  87+ A99C 17          >                    rla
  87+ A99D ED 6A       >                    adc     hl,hl
  87+ A99F ED 42       >                    sbc     hl,bc
  87+ A9A1 30 01       >                    jr      nc,$+3
  87+ A9A3 09          >                    add     hl,bc
  88+ A9A4                  MacroDEDivBC
  88+ A9A4 17          >                    rla
  88+ A9A5 ED 6A       >                    adc     hl,hl
  88+ A9A7 ED 42       >                    sbc     hl,bc
  88+ A9A9 30 01       >                    jr      nc,$+3
  88+ A9AB 09          >                    add     hl,bc
  89+ A9AC 17               rla
  90+ A9AD 2F               cpl
  91+ A9AE 57               ld d,a
  92+ A9AF
  93+ A9AF 7B               ld a,e
  94+ A9B0                  MacroDEDivBC
  94+ A9B0 17          >                    rla
  94+ A9B1 ED 6A       >                    adc     hl,hl
  94+ A9B3 ED 42       >                    sbc     hl,bc
  94+ A9B5 30 01       >                    jr      nc,$+3
  94+ A9B7 09          >                    add     hl,bc
  95+ A9B8                  MacroDEDivBC
  95+ A9B8 17          >                    rla
  95+ A9B9 ED 6A       >                    adc     hl,hl
  95+ A9BB ED 42       >                    sbc     hl,bc
  95+ A9BD 30 01       >                    jr      nc,$+3
  95+ A9BF 09          >                    add     hl,bc
  96+ A9C0                  MacroDEDivBC
  96+ A9C0 17          >                    rla
  96+ A9C1 ED 6A       >                    adc     hl,hl
  96+ A9C3 ED 42       >                    sbc     hl,bc
  96+ A9C5 30 01       >                    jr      nc,$+3
  96+ A9C7 09          >                    add     hl,bc
  97+ A9C8                  MacroDEDivBC
  97+ A9C8 17          >                    rla
  97+ A9C9 ED 6A       >                    adc     hl,hl
  97+ A9CB ED 42       >                    sbc     hl,bc
  97+ A9CD 30 01       >                    jr      nc,$+3
  97+ A9CF 09          >                    add     hl,bc
  98+ A9D0                  MacroDEDivBC
  98+ A9D0 17          >                    rla
  98+ A9D1 ED 6A       >                    adc     hl,hl
  98+ A9D3 ED 42       >                    sbc     hl,bc
  98+ A9D5 30 01       >                    jr      nc,$+3
  98+ A9D7 09          >                    add     hl,bc
  99+ A9D8                  MacroDEDivBC
  99+ A9D8 17          >                    rla
  99+ A9D9 ED 6A       >                    adc     hl,hl
  99+ A9DB ED 42       >                    sbc     hl,bc
  99+ A9DD 30 01       >                    jr      nc,$+3
  99+ A9DF 09          >                    add     hl,bc
 100+ A9E0                  MacroDEDivBC
 100+ A9E0 17          >                    rla
 100+ A9E1 ED 6A       >                    adc     hl,hl
 100+ A9E3 ED 42       >                    sbc     hl,bc
 100+ A9E5 30 01       >                    jr      nc,$+3
 100+ A9E7 09          >                    add     hl,bc
 101+ A9E8                  MacroDEDivBC
 101+ A9E8 17          >                    rla
 101+ A9E9 ED 6A       >                    adc     hl,hl
 101+ A9EB ED 42       >                    sbc     hl,bc
 101+ A9ED 30 01       >                    jr      nc,$+3
 101+ A9EF 09          >                    add     hl,bc
 102+ A9F0 17               rla
 103+ A9F1 2F               cpl
 104+ A9F2 5F               ld e,a
 105+ A9F3 C9               ret
 106+ A9F4
 107+ A9F4
 108+ A9F4
 109+ A9F4              ;divdide by 16 using undocumented instrunctions
 110+ A9F4              ;Input: BC = Dividend, DE = Divisor, HL = 0
 111+ A9F4              ;Output: BC = Quotient, HL = Remainder
 112+ A9F4              ; Our use
 113+ A9F4              ; BC = A0
 114+ A9F4              ; DE = 0C
 115+ A9F4              ; so BC = a * 256 / C
 116+ A9F4              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 116+ A9F4 B9          >                        cp     c
 116+ A9F5 D2 20 AA    >                        jp		nc,DEV16ATooLarge
 117+ A9F8 47                                   ld      b,a
 118+ A9F9 59                                   ld      e,c
 119+ A9FA 0E 00                                ld      c,0
 120+ A9FC 16 00                                ld      d,0
 121+ A9FE C3 0B AA                             jp      DIV16UNDOC
 122+ AA01 47           DIV16Amul256dQUNDOC:    ld      b,a
 123+ AA02 0E 00                                ld      c,0
 124+ AA04 21 E3 97                             ld      hl,varQ
 125+ AA07 7E                                   ld      a,(hl)
 126+ AA08 16 00                                ld      d,0
 127+ AA0A 5F                                   ld      e,a
 128+ AA0B              DIV16BCDivDEUNDOC:
 129+ AA0B 21 00 00     DIV16UNDOC:             ld      hl,0
 130+ AA0E 78                                   ld      a,b
 131+ AA0F 06 10                                ld      b,16
 132+ AA11 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 133+ AA13 17                                   rla			; ...
 134+ AA14 ED 6A                                adc	hl,hl		; ...
 135+ AA16 ED 52                                sbc	hl,de		; ...
 136+ AA18 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 137+ AA1A 19                                   add	hl,de		; ...
 138+ AA1B 0D                                   dec	c		; ...
 139+ AA1C 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 140+ AA1E 47                                   ld   b,a
 141+ AA1F C9                                   ret
 142+ AA20 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 143+ AA23 C9                                   ret
 144+ AA24
 145+ AA24              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 146+ AA24 06 08        asm_div8:               ld b,8
 147+ AA26 AF                                   xor a
 148+ AA27 CB 21        .div8_loop:	            sla c
 149+ AA29 17                                   rla
 150+ AA2A BA                                   cp d
 151+ AA2B 38 02                                jr c,.div8_skip
 151+ AA2D
 152+ AA2D 0C                                   inc c
 153+ AA2E 92                                   sub d
 154+ AA2F 10 F6        .div8_skip:	            djnz .div8_loop
 155+ AA31 C9                                   ret
 156+ AA32              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 157+ AA32 06 10        asm_div16:              ld b,16
 158+ AA34 AF                                   xor a
 159+ AA35 CB 25        div16_loop:	            sla l
 160+ AA37 CB 14                                rl	h
 161+ AA39              ;    add hl,hl
 162+ AA39 17                                   rla
 163+ AA3A B9                                   cp c
 164+ AA3B 38 02                                jr c,div16_skip
 165+ AA3D 2C                                   inc l
 166+ AA3E 91                                   sub c
 167+ AA3F 10 F4        div16_skip:		        djnz div16_loop
 168+ AA41 C9                                   ret
 169+ AA42              ;
 170+ AA42              ; Divide 16-bit values (with 16-bit result)
 171+ AA42              ; In: Divide BC by divider DE
 172+ AA42              ; Out: BC = result, HL = rest
 173+ AA42              ;
 174+ AA42              HLDivC_Iteration: 	MACRO
 175+ AA42 ~            					add	hl,hl		; unroll 16 times
 176+ AA42 ~            					rla				; ...
 177+ AA42 ~            					cp	c			; ...
 178+ AA42 ~            					jr	1F
 179+ AA42 ~            					sub	c			; ...
 180+ AA42 ~            1:
 181+ AA42 ~            					inc	l			; ...
 182+ AA42              					ENDM
 183+ AA42
 184+ AA42
 185+ AA42
 186+ AA42              ; ">div1616: BC = BC / DE. HL = remainder"
 187+ AA42 21 00 00     Div1616:            ld hl,0
 188+ AA45 78                               ld a,b
 189+ AA46 06 08                            ld b,8
 190+ AA48 17           .Div16_Loop1:       rla
 191+ AA49 ED 6A                            adc hl,hl
 192+ AA4B ED 52                            sbc hl,de
 193+ AA4D 30 01                            jr nc,.Div16_NoAdd1
 194+ AA4F 19                               add hl,de
 195+ AA50 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 196+ AA52 17                               rla
 197+ AA53 2F                               cpl
 198+ AA54 47                               ld b,a
 199+ AA55 79                               ld a,c
 200+ AA56 48                               ld c,b
 201+ AA57 06 08                            ld b,8
 202+ AA59 17           .Div16_Loop2:       rla
 203+ AA5A ED 6A                            adc hl,hl
 204+ AA5C ED 52                            sbc hl,de
 205+ AA5E 30 01                            jr nc,.Div16_NoAdd2
 206+ AA60 19                               add hl,de
 207+ AA61 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 208+ AA63 17                               rla
 209+ AA64 2F                               cpl
 210+ AA65 41                               ld b,c
 211+ AA66 4F                               ld c,a
 212+ AA67 C9                               ret
 213+ AA68
 214+ AA68
 215+ AA68
 216+ AA68              BCDIVDE_Iteration: MACRO
 217+ AA68 ~            				   rla
 218+ AA68 ~            				   adc	hl,hl
 219+ AA68 ~            				   add	hl,de
 220+ AA68 ~            				   jr	c,1F
 221+ AA68 ~            				   sbc	hl,de
 222+ AA68 ~            1:
 223+ AA68              				   ENDM
 224+ AA68
 225+ AA68
 226+ AA68              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 227+ AA68              ;BC/DE ==> BC, remainder in HL
 228+ AA68              ;NOTE: BC/0 returns 0 as the quotient.
 229+ AA68              ;min: 738cc
 230+ AA68              ;max: 898cc
 231+ AA68              ;avg: 818cc
 232+ AA68              ;144 bytes
 233+ AA68 AF           BC_Div_DE:              xor a
 234+ AA69 67                                   ld h,a
 235+ AA6A 6F                                   ld l,a
 236+ AA6B 93                                   sub e
 237+ AA6C 5F                                   ld e,a
 238+ AA6D 9F                                   sbc a,a
 239+ AA6E 92                                   sub d
 240+ AA6F 57                                   ld d,a
 241+ AA70 78                                   ld a,b
 242+ AA71                                      BCDIVDE_Iteration
 242+ AA71 17          >				   rla
 242+ AA72 ED 6A       >				   adc	hl,hl
 242+ AA74 19          >				   add	hl,de
 242+ AA75 38 02       >				   jr	c,1F
 242+ AA77 ED 52       >				   sbc	hl,de
 242+ AA79             >1:
 243+ AA79                                      BCDIVDE_Iteration
 243+ AA79 17          >				   rla
 243+ AA7A ED 6A       >				   adc	hl,hl
 243+ AA7C 19          >				   add	hl,de
 243+ AA7D 38 02       >				   jr	c,1F
 243+ AA7F ED 52       >				   sbc	hl,de
 243+ AA81             >1:
 244+ AA81                                      BCDIVDE_Iteration
 244+ AA81 17          >				   rla
 244+ AA82 ED 6A       >				   adc	hl,hl
 244+ AA84 19          >				   add	hl,de
 244+ AA85 38 02       >				   jr	c,1F
 244+ AA87 ED 52       >				   sbc	hl,de
 244+ AA89             >1:
 245+ AA89                                      BCDIVDE_Iteration
 245+ AA89 17          >				   rla
 245+ AA8A ED 6A       >				   adc	hl,hl
 245+ AA8C 19          >				   add	hl,de
 245+ AA8D 38 02       >				   jr	c,1F
 245+ AA8F ED 52       >				   sbc	hl,de
 245+ AA91             >1:
 246+ AA91                                      BCDIVDE_Iteration
 246+ AA91 17          >				   rla
 246+ AA92 ED 6A       >				   adc	hl,hl
 246+ AA94 19          >				   add	hl,de
 246+ AA95 38 02       >				   jr	c,1F
 246+ AA97 ED 52       >				   sbc	hl,de
 246+ AA99             >1:
 247+ AA99                                      BCDIVDE_Iteration
 247+ AA99 17          >				   rla
 247+ AA9A ED 6A       >				   adc	hl,hl
 247+ AA9C 19          >				   add	hl,de
 247+ AA9D 38 02       >				   jr	c,1F
 247+ AA9F ED 52       >				   sbc	hl,de
 247+ AAA1             >1:
 248+ AAA1                                      BCDIVDE_Iteration
 248+ AAA1 17          >				   rla
 248+ AAA2 ED 6A       >				   adc	hl,hl
 248+ AAA4 19          >				   add	hl,de
 248+ AAA5 38 02       >				   jr	c,1F
 248+ AAA7 ED 52       >				   sbc	hl,de
 248+ AAA9             >1:
 249+ AAA9                                      BCDIVDE_Iteration
 249+ AAA9 17          >				   rla
 249+ AAAA ED 6A       >				   adc	hl,hl
 249+ AAAC 19          >				   add	hl,de
 249+ AAAD 38 02       >				   jr	c,1F
 249+ AAAF ED 52       >				   sbc	hl,de
 249+ AAB1             >1:
 250+ AAB1 17                                   rla
 251+ AAB2 47                                   ld b,a
 252+ AAB3
 253+ AAB3 79                                   ld a,c
 254+ AAB4                                      BCDIVDE_Iteration
 254+ AAB4 17          >				   rla
 254+ AAB5 ED 6A       >				   adc	hl,hl
 254+ AAB7 19          >				   add	hl,de
 254+ AAB8 38 02       >				   jr	c,1F
 254+ AABA ED 52       >				   sbc	hl,de
 254+ AABC             >1:
 255+ AABC                                      BCDIVDE_Iteration
 255+ AABC 17          >				   rla
 255+ AABD ED 6A       >				   adc	hl,hl
 255+ AABF 19          >				   add	hl,de
 255+ AAC0 38 02       >				   jr	c,1F
 255+ AAC2 ED 52       >				   sbc	hl,de
 255+ AAC4             >1:
 256+ AAC4                                      BCDIVDE_Iteration
 256+ AAC4 17          >				   rla
 256+ AAC5 ED 6A       >				   adc	hl,hl
 256+ AAC7 19          >				   add	hl,de
 256+ AAC8 38 02       >				   jr	c,1F
 256+ AACA ED 52       >				   sbc	hl,de
 256+ AACC             >1:
 257+ AACC                                      BCDIVDE_Iteration
 257+ AACC 17          >				   rla
 257+ AACD ED 6A       >				   adc	hl,hl
 257+ AACF 19          >				   add	hl,de
 257+ AAD0 38 02       >				   jr	c,1F
 257+ AAD2 ED 52       >				   sbc	hl,de
 257+ AAD4             >1:
 258+ AAD4                                      BCDIVDE_Iteration
 258+ AAD4 17          >				   rla
 258+ AAD5 ED 6A       >				   adc	hl,hl
 258+ AAD7 19          >				   add	hl,de
 258+ AAD8 38 02       >				   jr	c,1F
 258+ AADA ED 52       >				   sbc	hl,de
 258+ AADC             >1:
 259+ AADC                                      BCDIVDE_Iteration
 259+ AADC 17          >				   rla
 259+ AADD ED 6A       >				   adc	hl,hl
 259+ AADF 19          >				   add	hl,de
 259+ AAE0 38 02       >				   jr	c,1F
 259+ AAE2 ED 52       >				   sbc	hl,de
 259+ AAE4             >1:
 260+ AAE4                                      BCDIVDE_Iteration
 260+ AAE4 17          >				   rla
 260+ AAE5 ED 6A       >				   adc	hl,hl
 260+ AAE7 19          >				   add	hl,de
 260+ AAE8 38 02       >				   jr	c,1F
 260+ AAEA ED 52       >				   sbc	hl,de
 260+ AAEC             >1:
 261+ AAEC                                      BCDIVDE_Iteration
 261+ AAEC 17          >				   rla
 261+ AAED ED 6A       >				   adc	hl,hl
 261+ AAEF 19          >				   add	hl,de
 261+ AAF0 38 02       >				   jr	c,1F
 261+ AAF2 ED 52       >				   sbc	hl,de
 261+ AAF4             >1:
 262+ AAF4 17                                   rla
 263+ AAF5 4F                                   ld c,a
 264+ AAF6 C9                                   ret
 265+ AAF7
 266+ AAF7              ;Inputs:
 267+ AAF7              ;     DE,BC are 8.8 Fixed Point numbers
 268+ AAF7              ;Outputs:
 269+ AAF7              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 270+ AAF7              ;if DE is 0 : 122cc or 136cc if BC is negative
 271+ AAF7              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 272+ AAF7              ;Otherwise:
 273+ AAF7              ;min: 1107cc
 274+ AAF7              ;max: 1319cc
 275+ AAF7              ;avg: 1201cc
 276+ AAF7 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 277+ AAF8 AA                                   xor d
 278+ AAF9 F5                                   push af   ;sign bit is the result sign bit
 279+ AAFA              ; Now make sure the inputs are positive
 280+ AAFA A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 281+ AAFB F2 04 AB                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 282+ AAFE AF                                   xor a
 283+ AAFF 91                                   sub c
 284+ AB00 4F                                   ld c,a
 285+ AB01 9F                                   sbc a,a
 286+ AB02 90                                   sub b
 287+ AB03 47                                   ld b,a
 288+ AB04 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 289+ AB05 B2                                   or d
 290+ AB06 FA 0F AB                             jp m,BC_Div_DE_88_lbl2
 291+ AB09 AF                                   xor a
 292+ AB0A 93                                   sub e
 293+ AB0B 5F                                   ld e,a
 294+ AB0C 9F                                   sbc a,a
 295+ AB0D 92                                   sub d
 296+ AB0E 57                                   ld d,a
 297+ AB0F B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 298+ AB10 28 1D                                jr z,div_fixed88_overflow
 299+ AB12 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 300+ AB14 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 301+ AB15 83                                   add a,e
 302+ AB16 7A                                   ld a,d
 303+ AB17 8C                                   adc a,h
 304+ AB18 38 15                                jr c,div_fixed88_overflow
 305+ AB1A 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 306+ AB1B 79                                   ld a,c
 307+ AB1C CD 37 AB                             call div_fixed88_sub
 308+ AB1F 4F                                   ld c,a
 309+ AB20 78                                   ld a,b      ;A is now 0
 310+ AB21 CD 37 AB                             call div_fixed88_sub
 311+ AB24 51                                   ld d,c
 312+ AB25 5F                                   ld e,a
 313+ AB26 F1                                   pop af
 314+ AB27 F0                                   ret p
 315+ AB28 AF                                   xor a
 316+ AB29 93                                   sub e
 317+ AB2A 5F                                   ld e,a
 318+ AB2B 9F                                   sbc a,a
 319+ AB2C 92                                   sub d
 320+ AB2D 57                                   ld d,a
 321+ AB2E C9                                   ret
 322+ AB2F
 323+ AB2F 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 324+ AB32 F1                                   pop af
 325+ AB33 F0                                   ret p
 326+ AB34 13                                   inc de
 327+ AB35 1C                                   inc e
 328+ AB36 C9                                   ret
 329+ AB37
 330+ AB37              ;min: 456cc
 331+ AB37              ;max: 536cc
 332+ AB37              ;avg: 496cc
 333+ AB37 06 08        div_fixed88_sub:        ld b,8
 334+ AB39 17           BC_Div_DE_88_lbl3:      rla
 335+ AB3A ED 6A                                adc hl,hl
 336+ AB3C 19                                   add hl,de
 337+ AB3D 38 02                                jr c,$+4
 338+ AB3F ED 52                                sbc hl,de
 339+ AB41 10 F6                                djnz BC_Div_DE_88_lbl3
 340+ AB43 8F                                   adc a,a
 341+ AB44 C9                                   ret
 342+ AB45
# file closed: ./Maths/asm_divide.asm
1058  AB45                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ AB45              asm_tis2:
   2+ AB45              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ AB45              ; ">DOES NOT DO SIGNED YET"
   4+ AB45 F5           	push af
   5+ AB46 E6 7F            and SignMask8Bit
   6+ AB48 57           	ld d,a				;; d = A
   7+ AB49 3A E3 97     	ld a,(varQ)
   8+ AB4C 5F           	ld e,a
   9+ AB4D 7A           	ld a,d
  10+ AB4E BB           	cp e
  11+ AB4F 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ AB51 1E 60        	ld e, 96
  13+ AB53 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ AB55 EB           	ex de,hl
  15+ AB56 3A E3 97     	ld a,(varQ)
  16+ AB59 4F           	ld c,a
  17+ AB5A CD 32 AA     	call asm_div16
  18+ AB5D F1           	pop af
  19+ AB5E E6 80        	and $80
  20+ AB60 B5           	or l
  21+ AB61 C9           	ret
  22+ AB62              .tis2_set96:
  23+ AB62 F1           	pop af
  24+ AB63 E6 80        	and $80
  25+ AB65 F6 96        	or $96
  26+ AB67 C9           	ret
  27+ AB68
  28+ AB68
  29+ AB68              asm_unit_vector:
  30+ AB68              squareregfx:
  31+ AB68 3A 82 C0     	ld a,(UBnkXScaled)
  32+ AB6B 57           	ld d,a
  33+ AB6C 5F           	ld e,a
  34+ AB6D ED 30        	mul
  35+ AB6F EB           	ex de,hl
  36+ AB70              squareregfy:
  37+ AB70 3A 84 C0     	ld a, (UBnkYScaled)
  38+ AB73 57           	ld d,a
  39+ AB74 5F           	ld e,a
  40+ AB75 ED 30        	mul
  41+ AB77 19           	add hl,de
  42+ AB78              squareregfz:
  43+ AB78 3A 86 C0     	ld a, (UBnkZScaled)
  44+ AB7B 57           	ld d,a
  45+ AB7C 5F           	ld e,a
  46+ AB7D ED 30        	mul
  47+ AB7F 19           	add hl,de
  48+ AB80 EB           	ex de,hl			; de de to number to root
  49+ AB81              hlequsquareroot:
  50+ AB81 CD 13 A9     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ AB84 E5           	push hl				; save it for work 3 copies
  52+ AB85 E5           	push hl				; save it for work
  53+ AB86 E5           	push hl				; save it for work
  54+ AB87              normfx:
  55+ AB87 3A 82 C0     	ld a,(UBnkXScaled)
  56+ AB8A E1           	pop hl				; get copy #1
  57+ AB8B 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ AB8C 4F           	ld c,a
  59+ AB8D CD 45 AB     	call asm_tis2
  60+ AB90 32 82 C0     	ld (UBnkXScaled),a
  61+ AB93              normfy:
  62+ AB93 3A 84 C0     	ld a,(UBnkYScaled)
  63+ AB96 E1           	pop hl				; get copy #2
  64+ AB97 7D           	ld a,l
  65+ AB98 4F           	ld c,a
  66+ AB99 CD 45 AB     	call asm_tis2
  67+ AB9C 32 84 C0     	ld (UBnkYScaled),a
  68+ AB9F              normfz:
  69+ AB9F 3A 86 C0     	ld a,(UBnkZScaled)
  70+ ABA2 E1           	pop hl				; get copy #2
  71+ ABA3 7D           	ld a,l
  72+ ABA4 4F           	ld c,a
  73+ ABA5 CD 45 AB     	call asm_tis2
  74+ ABA8 32 86 C0     	ld (UBnkZScaled),a
  75+ ABAB              asm_unit_vector_end:
  76+ ABAB C9           	ret
  77+ ABAC
# file closed: ./Maths/asm_unitvector.asm
1059  ABAC                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ ABAC              ; Input:
   2+ ABAC              ;       HL = 1st value
   3+ ABAC              ;       DE = 2nd value
   4+ ABAC              ; Output:
   5+ ABAC              ;       CF, ZF = results of comparison:
   6+ ABAC              ;
   7+ ABAC              ;               CF      ZF      Result
   8+ ABAC              ;               -----------------------------------
   9+ ABAC              ;               0       0       HL > DE
  10+ ABAC              ;               0       1       HL == DE
  11+ ABAC              ;               1       0       HL < DE
  12+ ABAC              ;               1       1       Impossible
  13+ ABAC              ;
  14+ ABAC
  15+ ABAC E5           compare16HLDE:      push    hl
  16+ ABAD A7                               and     a
  17+ ABAE ED 52                            sbc     hl,de
  18+ ABB0 E1                               pop     hl
  19+ ABB1 C9                               ret
  20+ ABB2
  21+ ABB2              ; With compare signed we do ABS comparison
  22+ ABB2              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ ABB2
  24+ ABB2 E5 D5        compare16HLDEABS:   push    hl,,de
  25+ ABB4 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ ABB5 E6 7F                            and     SignMask8Bit
  27+ ABB7 67                               ld      h,a
  28+ ABB8 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ ABB9 E6 7F                            and     SignMask8Bit
  30+ ABBB 57                               ld      d,a
  31+ ABBC A7                               and     a
  32+ ABBD ED 52                            sbc     hl,de
  33+ ABBF D1 E1                            pop     hl,,de
  34+ ABC1 C9                               ret
  35+ ABC2
  36+ ABC2
# file closed: ./Maths/compare16.asm
1060  ABC2                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ ABC2              ;;----------------------------------------------------------------------------------------------------------------------
   2+ ABC2              ;; 16-bit negate
   3+ ABC2              negate16:
   4+ ABC2              negate16hl:
   5+ ABC2                      ; Input:
   6+ ABC2                      ;       HL = value
   7+ ABC2                      ; Output:
   8+ ABC2                      ;       HL = -value
   9+ ABC2                      ; Destroys:
  10+ ABC2                      ;       AF
  11+ ABC2                      ;
  12+ ABC2 AF           	xor 	a
  13+ ABC3 95           	sub 	l
  14+ ABC4 6F           	ld 		l,a
  15+ ABC5 9F           	sbc 	a,a
  16+ ABC6 94           	sub 	h
  17+ ABC7 67           	ld 		h,a
  18+ ABC8 C9           	ret
  19+ ABC9
  20+ ABC9              negate16de:
  21+ ABC9 AF           	xor 	a
  22+ ABCA 93           	sub 	e
  23+ ABCB 5F           	ld 		e,a
  24+ ABCC 9F           	sbc 	a,a
  25+ ABCD 92           	sub 	d
  26+ ABCE 57           	ld 		d,a
  27+ ABCF C9           	ret
  28+ ABD0
  29+ ABD0              negate16bc:
  30+ ABD0 AF           	xor 	a
  31+ ABD1 91           	sub 	c
  32+ ABD2 4F           	ld 		c,a
  33+ ABD3 9F           	sbc 	a,a
  34+ ABD4 90           	sub 	b
  35+ ABD5 47           	ld 		b,a
  36+ ABD6 C9           	ret
  37+ ABD7
  38+ ABD7
  39+ ABD7              macronegate16hl:	MACRO
  40+ ABD7 ~            					xor 	a
  41+ ABD7 ~            					sub 	l
  42+ ABD7 ~            					ld 		l,a
  43+ ABD7 ~            					sbc 	a,a
  44+ ABD7 ~            					sub 	h
  45+ ABD7 ~            					ld 		h,a
  46+ ABD7              					ENDM
  47+ ABD7
  48+ ABD7              macronegate16de:	MACRO
  49+ ABD7 ~            					xor 	a
  50+ ABD7 ~                                sub 	e
  51+ ABD7 ~                                ld 		e,a
  52+ ABD7 ~                                sbc 	a,a
  53+ ABD7 ~                                sub 	d
  54+ ABD7 ~                                ld 		d,a
  55+ ABD7              					ENDM
  56+ ABD7              macronegate16bc:	MACRO
  57+ ABD7 ~            					xor 	a
  58+ ABD7 ~                                sub 	c
  59+ ABD7 ~                                ld 		c,a
  60+ ABD7 ~                                sbc 	a,a
  61+ ABD7 ~                                sub 	b
  62+ ABD7 ~                                ld 		b,a
  63+ ABD7              					ENDM
  64+ ABD7
  65+ ABD7              macronegate16ix:	MACRO
  66+ ABD7 ~            					xor 	a
  67+ ABD7 ~                                sub 	ixl
  68+ ABD7 ~                                ld 		ixl,a
  69+ ABD7 ~                                sbc 	a,a
  70+ ABD7 ~                                sub 	ixh
  71+ ABD7 ~                                ld 		ixh,a
  72+ ABD7              					ENDM
# file closed: ./Maths/negate16.asm
1061  ABD7                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ ABD7 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ ABD9                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ ABD9 BA          >                        cp     d
   2+ ABDA D2 EF AB    >                        jp		nc,TISXAccGTEQ
   3+ ABDD 4F                                   ld			c,a
   4+ ABDE CD 24 AA                             call		asm_div8
   5+ ABE1 79                                   ld			a,c							; a = result
   6+ ABE2 CB 3F                                srl			a							; result / 4
   7+ ABE4 47                                   ld			b,a							; t = t /4
   8+ ABE5 CB 3F                                srl			a							; result / 8
   9+ ABE7 80                                   add			a,b							; result /8 + result /4
  10+ ABE8 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ ABE9 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ ABEB E6 80                                and			$80							; recover sign only
  13+ ABED B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ ABEE C9                                   ret
  15+ ABEF              TISXAccGTEQ:
  16+ ABEF              ;TI4:										;\ clean to +/- unity
  17+ ABEF DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ ABF1 E6 80                                and			$80							; copy of Acc
  19+ ABF3 F6 60                                or			$60							; unity
  20+ ABF5 C9                                   ret
  21+ ABF6
  22+ ABF6
  23+ ABF6
  24+ ABF6
  25+ ABF6              normaliseXX1596fast:
  26+ ABF6                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ ABF6 3A 82 C0     	ld		a,(XX15)		    ; XX15+0
  28+ ABF9 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ ABFB E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ ABFD              N96SQX:
  31+ ABFD              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ ABFD 5F          >			ld	e,a
  31+ ABFE 57          >			ld  d,a
  31+ ABFF ED 30       >			mul
  32+ AC01 62           	ld		h,d					; h == varR d = varO e= varA
  33+ AC02 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ AC03              N96SQY:
  35+ AC03 3A 83 C0     	ld		a,(XX15+1)
  36+ AC06 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ AC08 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ AC0A              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ AC0A 5F          >			ld	e,a
  38+ AC0B 57          >			ld  d,a
  38+ AC0C ED 30       >			mul
  39+ AC0E 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ AC0F              N96SQZ:
  41+ AC0F 3A 84 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ AC12 FD 67        	ld		iyh,a               ; iyh = signed
  43+ AC14 E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ AC16              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ AC16 5F          >			ld	e,a
  44+ AC17 57          >			ld  d,a
  44+ AC18 ED 30       >			mul
  45+ AC1A              N96SQADD:
  46+ AC1A 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ AC1B EB           	ex		de,hl				; hl => de ready for square root
  48+ AC1C              N96SQRT:
  49+ AC1C CD 13 A9     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ AC1F              N96NORMX:
  51+ AC1F 3A 82 C0     	ld		a,(XX15+0)
  52+ AC22 E6 7F        	and		SignMask8Bit
  53+ AC24 4F           	ld		c,a
  54+ AC25 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ AC26 CD 4D AE     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ AC29 47           	ld		b,a				;++SGN
  57+ AC2A DD 7C        	ld		a,ixh			;++SGN
  58+ AC2C E6 80        	and		$80				;++SGN
  59+ AC2E B0           	or		b				;++SGN
  60+ AC2F 32 82 C0     	ld		(XX15+0),a
  61+ AC32              N96NORMY:
  62+ AC32 3A 83 C0     	ld		a,(XX15+1)
  63+ AC35 E6 7F        	and		SignMask8Bit
  64+ AC37 4F           	ld		c,a
  65+ AC38 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ AC39 CD 4D AE     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ AC3C 47           	ld		b,a				;++SGN
  68+ AC3D DD 7D        	ld		a,ixl			;++SGN
  69+ AC3F E6 80        	and		$80				;++SGN
  70+ AC41 B0           	or		b				;++SGN
  71+ AC42 32 83 C0     	ld		(XX15+1),a
  72+ AC45              N96NORMZ:
  73+ AC45 3A 84 C0     	ld		a,(XX15+2)
  74+ AC48 E6 7F        	and		SignMask8Bit
  75+ AC4A 4F           	ld		c,a
  76+ AC4B 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ AC4C CD 4D AE     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ AC4F 47           	ld		b,a				;++SGN
  79+ AC50 FD 7C        	ld		a,iyh			;++SGN
  80+ AC52 E6 80        	and		$80				;++SGN
  81+ AC54 B0           	or		b				;++SGN
  82+ AC55 32 84 C0     	ld		(XX15+2),a
  83+ AC58 C9           	ret
  84+ AC59
  85+ AC59              ; Normalise vector
  86+ AC59              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  87+ AC59              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  88+ AC59              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  89+ AC59              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  90+ AC59              ;
  91+ AC59              ;
  92+ AC59              ;
  93+ AC59
  94+ AC59              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  95+ AC59 3A 82 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  96+ AC5C                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ AC5C 5F          >			ld	e,a
  96+ AC5D 57          >			ld  d,a
  96+ AC5E ED 30       >			mul
  97+ AC60 7A                                   ld		a,d
  98+ AC61 32 E4 97                             ld		(varR),a			; R	 \ hi sum later use b
  99+ AC64 7B                                   ld		a,e
 100+ AC65 32 E3 97                             ld		(varQ),a			; Q	 \ lo sum later use c
 101+ AC68 32 DC 96                             ld		(varP),a			; P	 \ lo sum later just drop
 102+ AC6B 3A 83 C0                             ld		a,(XX15+1)
 103+ AC6E                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 103+ AC6E 5F          >			ld	e,a
 103+ AC6F 57          >			ld  d,a
 103+ AC70 ED 30       >			mul
 104+ AC72 7A                                   ld		a,d
 105+ AC73 32 00 98                             ld		(varT),a			; T	 \ hi sum
 106+ AC76 7B                                   ld		a,e
 107+ AC77 32 DC 96                             ld		(varP),a			; P	 \ lo sum
 108+ AC7A 21 E3 97                             ld		hl,varQ
 109+ AC7D 8E                                   adc		a,(hl)				; +Q
 110+ AC7E 32 E3 97                             ld		(varQ),a			; =>Q
 111+ AC81 3A 00 98                             ld		a,(varT)			;
 112+ AC84 21 E4 97                             ld		hl,varR
 113+ AC87 8E                                   adc		a,(hl)				;  R
 114+ AC88 32 E4 97                             ld		(varR),a			; R
 115+ AC8B 3A 84 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 116+ AC8E                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 116+ AC8E 5F          >			ld	e,a
 116+ AC8F 57          >			ld  d,a
 116+ AC90 ED 30       >			mul
 117+ AC92 7A                                   ld		a,d
 118+ AC93 32 00 98                             ld		(varT),a			; T	 \ hi sum
 119+ AC96 7B                                   ld		a,e
 120+ AC97 32 DC 96                             ld		(varP),a			; P	 \ lo sum
 121+ AC9A 21 E3 97                             ld		hl,varQ
 122+ AC9D 8E                                   adc		a,(hl)				; +Q
 123+ AC9E 32 E3 97                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 124+ ACA1 3A 00 98                             ld		a,(varT)			; T temp Hi
 125+ ACA4 21 E4 97                             ld		hl,varR
 126+ ACA7 8E                                   adc		a,(hl)				; +R
 127+ ACA8 32 E4 97                             ld		(varR),a			; R
 128+ ACAB CD 36 A9                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 129+ ACAE 3A 82 C0                             ld		a,(XX15+0)
 130+ ACB1 CD 47 AE                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ ACB4 32 82 C0                             ld		(XX15+0),a
 132+ ACB7 3A 83 C0                             ld		a,(XX15+1)
 133+ ACBA CD 47 AE                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ ACBD 32 83 C0                             ld		(XX15+1),a
 135+ ACC0 3A 83 C0                             ld		a,(XX15+1)
 136+ ACC3 CD 47 AE                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 137+ ACC6 32 83 C0                             ld		(XX15+1),a
 138+ ACC9 C9                                   ret
 139+ ACCA
 140+ ACCA
# file closed: ./Maths/normalise96.asm
1062  ACCA                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ ACCA              ;Number in hl to decimal ASCII
   2+ ACCA              ;Thanks to z80 Bits
   3+ ACCA              ;inputs:	hl = number to ASCII
   4+ ACCA              ;example: hl=300 outputs '00300'
   5+ ACCA              ;destroys: af, bc, hl, de used
   6+ ACCA              DispHLtoDE:
   7+ ACCA              ; "DispHL, writes HL to DE address"
   8+ ACCA 01 F0 D8     	ld	bc,-10000
   9+ ACCD CD E3 AC     	call	Num1
  10+ ACD0 01 18 FC     	ld	bc,-1000
  11+ ACD3 CD E3 AC     	call	Num1
  12+ ACD6 01 9C FF     	ld	bc,-100
  13+ ACD9 CD E3 AC     	call	Num1
  14+ ACDC 0E F6        	ld	c,-10
  15+ ACDE CD E3 AC     	call	Num1
  16+ ACE1 0E FF        	ld	c,-1
  17+ ACE3              Num1:
  18+ ACE3 3E 2F        	ld	a,'0'-1
  19+ ACE5              .Num2:
  20+ ACE5 3C           	inc	a
  21+ ACE6 09           	add	hl,bc
  22+ ACE7 38 FC        	jr	c,.Num2
  23+ ACE9 ED 42        	sbc	hl,bc
  24+ ACEB 12           	ld	(de),a
  25+ ACEC 13           	inc	de
  26+ ACED C9           	ret
  27+ ACEE
  28+ ACEE              DispAtoDE:
  29+ ACEE 26 00        	ld h,0
  30+ ACF0 6F           	ld l,a
  31+ ACF1 C3 CA AC     	jp DispHLtoDE
  32+ ACF4
  33+ ACF4              DispPriceAtoDE:
  34+ ACF4 26 00        	ld h,0
  35+ ACF6 6F           	ld l,a
  36+ ACF7 01 9C FF     	ld	bc,-100
  37+ ACFA CD 0A AD     	call	.NumLeadBlank1
  38+ ACFD 0E F6        	ld	c,-10
  39+ ACFF CD E3 AC     	call	Num1
  40+ AD02 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ AD04 12           	ld		(de),a					; we can optimse that later TODO
  42+ AD05 13           	inc		de						; with just an inc De
  43+ AD06 0E FF        	ld	c,-1
  44+ AD08 18 D9        	jr		Num1
  45+ AD0A              .NumLeadBlank1:
  46+ AD0A 3E 2F        	ld	a,'0'-1
  47+ AD0C              .NumLeadBlank2:
  48+ AD0C 3C           	inc	a
  49+ AD0D 09           	add	hl,bc
  50+ AD0E 38 FC        	jr	c,.NumLeadBlank2
  51+ AD10 FE 30        	cp	'0'
  52+ AD12 20 02        	jr	nz,.DontBlank
  53+ AD14              .Blank:
  54+ AD14 3E 20        	ld	a,' '
  55+ AD16              .DontBlank:
  56+ AD16 ED 42        	sbc	hl,bc
  57+ AD18 12           	ld	(de),a
  58+ AD19 13           	inc	de
  59+ AD1A C9           	ret
  60+ AD1B
  61+ AD1B              DispQtyAtoDE:
  62+ AD1B FE 00        	cp	0
  63+ AD1D 28 23        	jr	z,.NoStock
  64+ AD1F 26 00        	ld h,0
  65+ AD21 6F           	ld l,a
  66+ AD22 01 9C FF     	ld	bc,-100
  67+ AD25 CD 31 AD     	call	.NumLeadBlank1
  68+ AD28 0E F6        	ld	c,-10
  69+ AD2A CD 31 AD     	call	.NumLeadBlank1
  70+ AD2D 0E FF        	ld	c,-1
  71+ AD2F 18 B2        	jr		Num1
  72+ AD31              .NumLeadBlank1:
  73+ AD31 3E 2F        	ld	a,'0'-1
  74+ AD33              .NumLeadBlank2:
  75+ AD33 3C           	inc	a
  76+ AD34 09           	add	hl,bc
  77+ AD35 38 FC        	jr	c,.NumLeadBlank2
  78+ AD37 FE 30        	cp	'0'
  79+ AD39 20 02        	jr	nz,.DontBlank
  80+ AD3B              .Blank:
  81+ AD3B 3E 20        	ld	a,' '
  82+ AD3D              .DontBlank:
  83+ AD3D ED 42        	sbc	hl,bc
  84+ AD3F 12           	ld	(de),a
  85+ AD40 13           	inc	de
  86+ AD41 C9           	ret
  87+ AD42              .NoStock:
  88+ AD42 3E 20        	ld	a,' '
  89+ AD44 12           	ld	(de),a
  90+ AD45 13           	inc	de
  91+ AD46 12           	ld	(de),a
  92+ AD47 13           	inc	de
  93+ AD48 3E 2D        	ld	a,'-'
  94+ AD4A 12           	ld	(de),a
  95+ AD4B 13           	inc de
  96+ AD4C C9           	ret
  97+ AD4D
  98+ AD4D
  99+ AD4D              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ AD4D              ;### Input      DE,IX=32bit value, IY=destination address
 101+ AD4D              ;### Output     IY=last char in destination string
 102+ AD4D              ;### Destroyed AF,BC,DE,HL,IX
 103+ AD4D 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ AD51 0A 00 00 00
 103+ AD55 64 00 00 00
 103+ AD59 E8 03 00 00
 103+ AD5D 10 27 00 00
 104+ AD61 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ AD65 40 42 0F 00
 104+ AD69 80 96 98 00
 104+ AD6D 00 E1 F5 05
 104+ AD71 00 CA 9A 3B
 105+ AD75 00 00 00 00  clcn32z ds 4
 106+ AD79
 107+ AD79              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ AD79 CD 88 AD     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ AD7C FD 7E 00                             ld      a,(IY+0)
 110+ AD7F FD 77 01                             ld      (IY+1),a
 111+ AD82 3E 2E                                ld      a,"."
 112+ AD84 FD 77 00                             ld      (IY+0),a
 113+ AD87 C9                                   ret
 114+ AD88
 115+ AD88 DD 22 75 AD  DispDEIXtoIY:           ld (clcn32z),ix
 116+ AD8C ED 53 77 AD                          ld (clcn32z+2),de
 117+ AD90 DD 21 71 AD                          ld ix,clcn32t+36
 118+ AD94 06 09                                ld b,9
 119+ AD96 0E 00                                ld c,0
 120+ AD98 3E 30        .clcn321:               ld a,'0'
 121+ AD9A B7                                   or a
 122+ AD9B DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ AD9E DD 56 01                             ld d,(ix+1)
 124+ ADA1 2A 75 AD                             ld hl,(clcn32z)
 125+ ADA4 ED 52                                sbc hl,de
 126+ ADA6 22 75 AD                             ld (clcn32z),hl
 127+ ADA9 DD 5E 02                             ld e,(ix+2)
 128+ ADAC DD 56 03                             ld d,(ix+3)
 129+ ADAF 2A 77 AD                             ld hl,(clcn32z+2)
 130+ ADB2 ED 52                                sbc hl,de
 131+ ADB4 22 77 AD                             ld (clcn32z+2),hl
 132+ ADB7 38 04                                jr c,.clcn325
 133+ ADB9 0C                                   inc c
 134+ ADBA 3C                                   inc a
 135+ ADBB 18 DE                                jr .clcn322
 136+ ADBD DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ ADC0 DD 56 01                             ld d,(ix+1)
 138+ ADC3 2A 75 AD                             ld hl,(clcn32z)
 139+ ADC6 19                                   add hl,de
 140+ ADC7 22 75 AD                             ld (clcn32z),hl
 141+ ADCA DD 5E 02                             ld e,(ix+2)
 142+ ADCD DD 56 03                             ld d,(ix+3)
 143+ ADD0 2A 77 AD                             ld hl,(clcn32z+2)
 144+ ADD3 ED 5A                                adc hl,de
 145+ ADD5 22 77 AD                             ld (clcn32z+2),hl
 146+ ADD8 11 FC FF                             ld de,-4
 147+ ADDB DD 19                                add ix,de
 148+ ADDD 0C                                   inc c
 149+ ADDE 0D                                   dec c
 150+ ADDF 28 05                                jr z,.clcn323
 151+ ADE1 FD 77 00                             ld (iy+0),a
 152+ ADE4 FD 23                                inc iy
 153+ ADE6 10 B0        .clcn323:               djnz .clcn321
 154+ ADE8 3A 75 AD                             ld a,(clcn32z)
 155+ ADEB C6 30                                add A,'0'
 156+ ADED FD 77 00                             ld (iy+0),a
 157+ ADF0 FD 36 01 00                          ld (iy+1),0
 158+ ADF4 C9                                   ret
 159+ ADF5
# file closed: ./Maths/binary_to_decimal.asm
1063  ADF5                  include "./Maths/ADDHLDESignBC.asm"
# file opened: ./Maths/ADDHLDESignBC.asm
   1+ ADF5              ;; calcs HLB + DEC where B and C are signs
   2+ ADF5              ;; result HL with A as sign
   3+ ADF5              ;; special handling if result is zero forcign sign bit to be zero
   4+ ADF5 78           ADDHLDESignBC:          ld      a,b
   5+ ADF6 E6 80                                and     SignOnly8Bit
   6+ ADF8 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7+ ADF9                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7+ ADF9 FA 07 AE    >                        jp		m, ADDHLDEsBCOppSGN
   8+ ADFC 78           ADDHLDEsBCSameSigns:    ld      a,b
   9+ ADFD B1                                   or      c
  10+ ADFE                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10+ ADFE FA 03 AE    >                        jp		m, ADDHLDEsBCSameNeg
  11+ AE01 19                                   add     hl,de                       ; both positive so a will already be zero
  12+ AE02 C9                                   ret
  13+ AE03 19           ADDHLDEsBCSameNeg:      add     hl,de
  14+ AE04 78                                   ld      a,b
  15+ AE05 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16+ AE06 C9                                   ret
  17+ AE07 B7           ADDHLDEsBCOppSGN:       or      a
  18+ AE08 ED 52                                sbc     hl,de
  19+ AE0A 38 02                                jr      c,ADDHLDEsBCOppInvert
  20+ AE0C 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21+ AE0D C9                                   ret
  22+ AE0E              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22+ AE0E AF          >                    xor a
  22+ AE0F 95          >                    sub l
  22+ AE10 6F          >                    ld l,a
  22+ AE11 9F          >                    sbc a,a
  22+ AE12 94          >                    sub h
  22+ AE13 67          >                    ld h,a
  23+ AE14 78                                   ld      a,b
  24+ AE15 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25+ AE17 C9                                   ret
  26+ AE18
# file closed: ./Maths/ADDHLDESignBC.asm
1064  AE18              ;INCLUDE "badd_ll38.asm"
1065  AE18              ;;INCLUDE "XX12equXX15byXX16.asm"
1066  AE18                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ AE18              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ AE18 BA          >                        cp     d
   1+ AE19 D2 34 AE    >                        jp		nc,.TIS2AccGTEQ
   2+ AE1C 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ AE1E CB 27        .TIS2RollTLoop:			sla			a
   4+ AE20                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ AE20 BA          >                        cp      d
   4+ AE21 DA 37 AE    >                        jp		c, .TIS2SkipSub
   5+ AE24 9A                                   sbc			a,d							; do subtraction with carry
   6+ AE25 37                                   scf
   7+ AE26 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ AE28 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ AE2A 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ AE2B CB 3F                                srl			a							; result / 2
  11+ AE2D CB 3F                                srl			a							; result / 4
  12+ AE2F 47                                   ld			b,a							; t = t /4
  13+ AE30 CB 3F                                srl			a							; result / 8
  14+ AE32 80                                   add			a,b							; result /8 + result /4
  15+ AE33 C9                                   ret
  16+ AE34 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ AE36 C9                                   ret
  18+ AE37 B7           .TIS2SkipSub:           or			a
  19+ AE38 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ AE3A 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ AE3C C3 2A AE                             jp			.TIS2SKIPCont
  22+ AE3F
  23+ AE3F
  24+ AE3F              ; USES 			A DE BC
  25+ AE3F              ; DOES NOT USE 	HL
  26+ AE3F              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ AE3F CB 7F        	bit			7,a
  28+ AE41 28 04        	jr			z,AequAdivQmul96
  29+ AE43 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ AE45 CB FF        	set			7,a
  31+ AE47              ; Note negative numbers are bit 7 set not 2's compliment
  32+ AE47              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ AE47              TIS2:
  34+ AE47 4F           	ld			c,a							; copy of Acc
  35+ AE48 3A E3 97     	ld			a,(varQ)
  36+ AE4B 57           	ld			d,a							; d = varQ
  37+ AE4C 79           	ld			a,c							; recover a
  38+ AE4D              AequAdivDmul96:
  39+ AE4D 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ AE4E E6 7F        	and			SignMask8Bit				; ignore sign
  41+ AE50              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ AE50 BA          >                        cp     d
  41+ AE51 D2 71 AE    >                        jp		nc,.TIS2AccGTEQ
  42+ AE54 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ AE56              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ AE56 CB 27        	sla			a
  45+ AE58              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ AE58 BA          >                        cp      d
  45+ AE59 DA 77 AE    >                        jp		c, .TIS2SkipSub
  46+ AE5C 9A           	sbc			a,d							; do subtraction with carry
  47+ AE5D 37           	scf
  48+ AE5E CB 10        	rl			b							; T rolled left to push bit out the end
  49+ AE60 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ AE62              .TIS2SKIPCont:
  51+ AE62 78           	ld			a,b							; T
  52+ AE63 CB 3F        	srl			a							; result / 2
  53+ AE65 CB 3F        	srl			a							; result / 4
  54+ AE67 47           	ld			b,a							; t = t /4
  55+ AE68 CB 3F        	srl			a							; result / 8
  56+ AE6A 80           	add			a,b							; result /8 + result /4
  57+ AE6B 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ AE6C 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ AE6D E6 80        	and			$80							; recover sign only
  60+ AE6F B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ AE70 C9           	ret
  62+ AE71              .TIS2AccGTEQ:
  63+ AE71              ;TI4:										;\ clean to +/- unity
  64+ AE71 79           	ld			a,c
  65+ AE72 E6 80        	and			$80							; copy of Acc
  66+ AE74 F6 60        	or			$60							; unity
  67+ AE76 C9           	ret
  68+ AE77              .TIS2SkipSub:
  69+ AE77 B7           	or			a
  70+ AE78 CB 10        	rl			b							; T rolled left to push bit out the end
  71+ AE7A 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ AE7C C3 62 AE     	jp			.TIS2SKIPCont
  73+ AE7F
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1067  AE7F                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ AE7F              fmltu:
   2+ AE7F              AequAmulQdiv256:
   3+ AE7F              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ AE7F 57           	ld	d,a
   5+ AE80 3A E3 97     	ld	a,(varQ)
   6+ AE83 5F           	ld	e,a
   7+ AE84 ED 30        	mul
   8+ AE86 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ AE87 C9           	ret
  10+ AE88
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1068  AE88                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ AE88              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ AE88              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ AE88 21 BB 9A     		ld		hl,varDustZ
   4+ AE8B FD 7D        		ld		a,iyl
   5+ AE8D ED 31        		add		hl,a
   6+ AE8F 7E           		ld		a,(hl)
   7+ AE90 C3 9C AE     		jp		DV41
   8+ AE93              DV42:										; travel step of dust particle front/rear
   9+ AE93 21 BB 9A     		ld		hl,varDustZ
  10+ AE96 3A CA 96     		ld		a,(regY)
  11+ AE99 ED 31        		add		hl,a
  12+ AE9B 7E           		ld		a,(hl)						; a = SZ[y]
  13+ AE9C              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ AE9C 5F           		ld		e,a							; using E as Q var replacement
  15+ AE9D 3A DF 97     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ AEA0              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ AEA0 06 08        		ld		b,8							; counter
  18+ AEA2 CB 27        		sla		a							;
  19+ AEA4 57           		ld		d,a							; use d for - p = delta * 2
  20+ AEA5 AF           		xor		a
  21+ AEA6              DVL4:										; counter x loop (b reg)
  22+ AEA6 CB 17        		rl		a							; a = a * 2
  23+ AEA8 38 03        		jr		c,DV8						; jump on carry
  24+ AEAA BB           		cp		e							; var Q
  25+ AEAB 38 02        		jr		c,DV5						; skip subtraction
  26+ AEAD              DV8:
  27+ AEAD 9B           		sbc		a,e							; a = a - q (with carry)
  28+ AEAE 37           		scf									;  carry gets set
  29+ AEAF              DV5:										; skipped subtraction
  30+ AEAF CB 12        		rl		d							; d (P hi)
  31+ AEB1 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ AEB3              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ AEB3              ; Note we are not going to call LL28+4 but inline code here:
  34+ AEB3 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ AEB5 4F           		ld		c,a							; use c as R var
  36+ AEB6              .RollRemainder:
  37+ AEB6 CB 27        		sla		a
  38+ AEB8 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ AEBA B8           		cp		b							; a < q?
  40+ AEBB 30 01        		jr		nc,.DontSBC
  41+ AEBD              .DoSBC:										; a is < q
  42+ AEBD 98           		sbc		a,b							; 	a -= q
  43+ AEBE              .DontSBC:
  44+ AEBE CB 11        		rl		c							; r << 1
  45+ AEC0 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ AEC2 79           		ld		a,c
  47+ AEC3 32 E4 97     		ld		(varR),a					; for backwards compat
  48+ AEC6 7A           		ld		a,d
  49+ AEC7 32 DC 96     		ld		(varP),a
  50+ AECA C9           		ret									; R (c) left with remainder
  51+ AECB              .Reduce:									; a geneated a carry
  52+ AECB 98           		sbc		a,b							; a = a - (q +1)
  53+ AECC 37           		scf									; set carry flag for rl
  54+ AECD CB 11        		rl		c							; r << 1 briging in carry
  55+ AECF 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ AED1 79           		ld		a,c
  57+ AED2 32 E4 97     		ld		(varR),a					; for backwards compat
  58+ AED5 7A           		ld		a,d
  59+ AED6 32 DC 96     		ld		(varP),a
  60+ AED9 C9           		ret
  61+ AEDA              .AnswerTooBig:
  62+ AEDA 0E FF        		ld		c,$FF						; arse its too big
  63+ AEDC 79           		ld		a,c
  64+ AEDD 32 E4 97     		ld		(varR),a					; for backwards compat
  65+ AEE0 7A           		ld		a,d
  66+ AEE1 32 DC 96     		ld		(varP),a
  67+ AEE4 C9           		ret
  68+ AEE5
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1069  AEE5                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ AEE5
   2+ AEE5              asm_defmutl:
   3+ AEE5              AequDmulEdiv256usgn:
   4+ AEE5              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ AEE5 ED 30        	mul
   6+ AEE7 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ AEE8 C9           	ret
   8+ AEE9
   9+ AEE9
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
1070  AEE9              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
1071  AEE9              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
1072  AEE9              ;INCLUDE "APequPmulX-MU11.asm"
1073  AEE9                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ AEE9              APequQmulA:
   2+ AEE9              asm_mult1:
   3+ AEE9              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ AEE9 FE 00        	cp	0
   5+ AEEB 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ AEED 5F           	ld	e,a
   7+ AEEE 3A E3 97     	ld	a,(varQ)
   8+ AEF1 57           	ld	d,a
   9+ AEF2 FE 00        	cp	0				; compare a
  10+ AEF4 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ AEF6 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ AEF7 E6 80        	and $80				; get the resultant sign and save into b
  13+ AEF9 47           	ld	b,a
  14+ AEFA 7A           	ld	a,d
  15+ AEFB E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ AEFD 57           	ld	d,a
  17+ AEFE 7B           	ld	a,e
  18+ AEFF E6 7F        	and SignMask8Bit
  19+ AF01 5F           	ld	e,a
  20+ AF02 ED 30        	mul					; zxn de = d * e
  21+ AF04 7B           	ld	a,e
  22+ AF05 32 DC 96     	ld	(varP),a		; p = lo
  23+ AF08 7A           	ld	a,d				; a = hi
  24+ AF09 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ AF0A 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ AF0B C9           	ret
  27+ AF0C              .mul0:
  28+ AF0C AF           	xor	a
  29+ AF0D 32 DC 96     	ld	(varP),a
  30+ AF10 57           	ld	d,a
  31+ AF11 5F           	ld  e,a
  32+ AF12 C9           	ret
  33+ AF13
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1074  AF13                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ AF13              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ AF13              SAEquSRPlusAQ:
   3+ AF13              ; Calculate the following between sign-magnitude numbers:
   4+ AF13              ;   (S A) = (S R) + (A Q)
   5+ AF13              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ AF13              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ AF13              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ AF13              LL38:
   9+ AF13              ;	ld		d,a
  10+ AF13              ;	ld		a,(varQ)
  11+ AF13              ;	ld		e,a
  12+ AF13              ;	ld		a,(varS)
  13+ AF13              ;	ld		h,a
  14+ AF13              ;	ld		a,(varR)
  15+ AF13              ;	ld		l,a
  16+ AF13              ;	call	ADDHLDESignedv3
  17+ AF13              ;	ld		a,h
  18+ AF13              ;	ld		(varS),a
  19+ AF13              ;	ld		a,l
  20+ AF13              ;	ret
  21+ AF13              ; calculation table
  22+ AF13              ;   R     Q    Op            Sign calc
  23+ AF13              ;	10    5    Add           +    sign same add R sign
  24+ AF13              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ AF13              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ AF13              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ AF13              ;   5    10    Add           +    sign same add R sign
  28+ AF13              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ AF13              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ AF13              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ AF13
  32+ AF13              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ AF13              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ AF13              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ AF13              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ AF13
  37+ AF13
  38+ AF13              ; Calculate sign for Q from A and varS
  39+ AF13 21 E5 97     	ld		hl,varS							;
  40+ AF16 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ AF17 FA 22 AF     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ AF1A 3A E3 97     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ AF1D 21 E4 97     	ld		hl,varR
  44+ AF20 86           	add		a,(hl)							; a = Q + R
  45+ AF21 C9           	ret										; Done carry set if overflow
  46+ AF22              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ AF22 3A E4 97     	ld		a,(varR)						; a = R
  48+ AF25 21 E3 97     	ld		hl,varQ                         ; Q
  49+ AF28              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ AF28              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ AF28 B7          >                        or a
  51+ AF29 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ AF2A 38 01            jr      c,.LL39SignCorrection
  53+ AF2C              ;--    jr      a,.LL39ResultZero
  54+ AF2C              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ AF2C              ;--	or		a								; Clear carry flag to say result is correct
  56+ AF2C C9           	ret
  57+ AF2D              .LL39SignCorrection:
  58+ AF2D FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ AF2F 28 0E            jr      z,.LL39ResultZero
  60+ AF31 ED 44            neg                                     ; flip A 2'c value to positive
  61+ AF33 08           	ex		af,af'							; save A temporarily
  62+ AF34 3A E5 97     	ld		a,(varS)						; Flip Sign bit in varS
  63+ AF37 EE 80        	xor		$80							    ;
  64+ AF39 32 E5 97     	ld		(varS),a                        ; flip sign bit of a
  65+ AF3C 08           	ex		af,af'                          ; get back a which is the result
  66+ AF3D                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ AF3D B7          >                        or a
  67+ AF3E C9           	ret
  68+ AF3F              .LL39ResultZero:
  69+ AF3F 32 E5 97         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ AF42                  ClearCarryFlag                          ; clear carry
  70+ AF42 B7          >                        or a
  71+ AF43 C9               ret
  72+ AF44              ;--LL39SwapSubtraction:
  73+ AF44              ;--	push	bc
  74+ AF44              ;--	ld		b,a
  75+ AF44              ;--	ld		a,(hl)
  76+ AF44              ;--	sub		b
  77+ AF44              ;--	pop		bc
  78+ AF44              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ AF44              ;--	ld		a,(varS)
  80+ AF44              ;--	xor		$80
  81+ AF44              ;--	ld		(varS),a
  82+ AF44              ;--	ex		af,af'
  83+ AF44              ;--	ret
  84+ AF44
  85+ AF44              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ AF44              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ AF44              ;;;;;   (S A) = (S R) + (A Q)
  88+ AF44              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ AF44              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ AF44              ;;;;LL38:
  91+ AF44              ;;;;; Calculate sign for Q from A and varS
  92+ AF44              ;;;;	ld		hl,varS							;
  93+ AF44              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ AF44              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ AF44              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ AF44              ;;;;	ld		hl,varR
  97+ AF44              ;;;;	add		a,(hl)							; a = Q + R
  98+ AF44              ;;;;	ret										; Done
  99+ AF44              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ AF44              ;;;;	ld		hl,varQ                         ;
 101+ AF44              ;;;;	ld		a,(hl)
 102+ AF44              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ AF44              ;;;;	ld		a,(varR)						;
 104+ AF44              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ AF44              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ AF44              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ AF44              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ AF44              ;;;;	ret
 109+ AF44              ;;;;.SignCorrection:
 110+ AF44              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ AF44              ;;;;	ex		af,af'							; save A temporarily
 112+ AF44              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ AF44              ;;;;	xor		$80							    ;
 114+ AF44              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ AF44              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ AF44              ;;;;	ret
 117+ AF44              ;;;;LL39Sub16Bit:
 118+ AF44              ;;;;	ld		e,a
 119+ AF44              ;;;;	ld		d,0
 120+ AF44              ;;;;	ld		a,(varR)
 121+ AF44              ;;;;	ld		l,a
 122+ AF44              ;;;;	ld		h,0
 123+ AF44              ;;;;	ClearCarryFlag
 124+ AF44              ;;;;	sbc		hl,de
 125+ AF44              ;;;;	jr		c,.SignCorrection16bit
 126+ AF44              ;;;;	bit		7,h
 127+ AF44              ;;;;	jr		z,.GoodToReturn
 128+ AF44              ;;;;.Needtonegate:
 129+ AF44              ;;;;	macronegate16hl
 130+ AF44              ;;;;.GoodToReturn
 131+ AF44              ;;;;	ld		a,l
 132+ AF44              ;;;;	or		a
 133+ AF44              ;;;;	ret
 134+ AF44              ;;;;.SignCorrection16bit:
 135+ AF44              ;;;;	macronegate16hl
 136+ AF44              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ AF44              ;;;;	xor		$80							    ;
 138+ AF44              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ AF44              ;;;;	ld		a,l
 140+ AF44              ;;;;	ret
 141+ AF44
 142+ AF44
# file closed: ./Maths/Utilities/badd_ll38.asm
1075  AF44                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ AF44              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ AF44              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ AF44              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ AF44
   5+ AF44
   6+ AF44              moveship4Yreg:
   7+ AF44 3A CA 96     		ld		a,(regY)
   8+ AF47 47           		ld		b,a
   9+ AF48              moveship4breg:
  10+ AF48              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ AF48              MVS4PitchAlphaRollBeta:
  12+ AF48              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ AF48 3A F9 96     		ld		a,(ALPHA)					;  ALPHA
  14+ AF4B 32 E3 97     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ AF4E 21 0E C0     		ld		hl,UBnKxsgn
  16+ AF51 78           		ld		a,b							; from
  17+ AF52 ED 31        		add		hl,a
  18+ AF54 7E           		ld		a,(hl)						; INWK+2,Y
  19+ AF55 32 E4 97     		ld		(varR),a					; R  \ lo
  20+ AF58 23           		inc		hl
  21+ AF59 7E           		ld		a,(hl)						; INWK+3,Y
  22+ AF5A 32 E5 97     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ AF5D 2B           		dec		hl
  24+ AF5E 2B           		dec		hl
  25+ AF5F 2B           		dec		hl							;
  26+ AF60 7E           		ld		a,(hl)						; INWK+0,Y
  27+ AF61 32 DC 96     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ AF64 23           		inc		hl
  29+ AF65 7E           		ld		a,(hl)						; INWK+1,Y
  30+ AF66 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ AF68 CD E9 A7     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ AF6B 23                   inc     hl
  33+ AF6C 23                   inc     hl
  34+ AF6D 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ AF6E 2B                   dec     hl
  36+ AF6F 3A C9 96             ld      a,(regX)
  37+ AF72 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ AF73 32 DC 96             ld      (varP),a                    ;  P
  39+ AF76 2B                   dec     hl
  40+ AF77 2B                   dec     hl
  41+ AF78 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ AF79 32 E4 97             ld      (varR),a                    ;  R	\ lo
  43+ AF7C 23                   inc     hl
  44+ AF7D 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ AF7E 32 E5 97             ld      (varS),a                    ; S	\ hi
  46+ AF81 23                   inc     hl
  47+ AF82 23                   inc     hl
  48+ AF83 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ AF84 CD E9 A7             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ AF87 2B                   dec     hl
  51+ AF88 2B                   dec     hl
  52+ AF89 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ AF8A 3A C9 96             ld      a,(regX)
  54+ AF8D 2B                   dec     hl
  55+ AF8E 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ AF8F 32 DC 96             ld      (varP),a                    ; P
  57+ AF92 3A E8 96             ld      a,(BETA)                    ; BETA
  58+ AF95 32 E3 97             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ AF98 23                   inc     hl
  60+ AF99 23                   inc     hl
  61+ AF9A 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ AF9B 32 E4 97             ld      (varR),a                    ; R	\ lo
  63+ AF9E 23                   inc     hl
  64+ AF9F 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ AFA0 32 E5 97             ld      (varS),a                    ; S	\ hi
  66+ AFA3 23                   inc     hl
  67+ AFA4 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ AFA5 32 DC 96             ld      (varP),a                    ; P	\ lo
  69+ AFA8 23                   inc     hl
  70+ AFA9 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ AFAA EE 80                xor     $80                         ; flip sign hi
  72+ AFAC CD E9 A7             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ AFAF 2B                   dec     hl
  74+ AFB0 2B                   dec     hl
  75+ AFB1 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ AFB2 3A C9 96             ld      a,(regX)
  77+ AFB5 2B                   dec     hl
  78+ AFB6 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ AFB7 32 DC 96             ld      (varP),a                    ; P
  80+ AFBA 23                   inc     hl
  81+ AFBB 23                   inc     hl
  82+ AFBC 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ AFBD 32 E4 97             ld      (varR),a                    ; R	\ lo
  84+ AFC0 23                   inc     hl
  85+ AFC1 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ AFC2 32 E5 97             ld      (varS),a                    ; S	\ hi
  87+ AFC5 2B                   dec     hl
  88+ AFC6 2B                   dec     hl
  89+ AFC7 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ AFC8 CD E9 A7             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ AFCB 23                   inc     hl
  92+ AFCC 23                   inc     hl
  93+ AFCD 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ AFCE 3A C9 96             ld      a,(regX)
  95+ AFD1 2B                   dec     hl
  96+ AFD2 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ AFD3 C9                   ret
  98+ AFD4
  99+ AFD4
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
1076  AFD4              ;INCLUDE "MoveShip5-MVS5.asm"
1077  AFD4              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
1078  AFD4              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
1079  AFD4              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
1080  AFD4                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ AFD4              ;;;LL28:
   2+ AFD4              ;;;    ld      c,a                         ;
   3+ AFD4              ;;;    ld      a,(varQ)                    ;
   4+ AFD4              ;;;    ld      b,a                         ;
   5+ AFD4              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ AFD4              ;;;RequAmul256divB:                        ;
   7+ AFD4              ;;;LL28Breg:
   8+ AFD4              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ AFD4              ;;;	cp		b							; Check A >= Q
  10+ AFD4              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ AFD4              ;;;.CalcRemainder:
  12+ AFD4              ;;;	ld		c, 	$FE						; set R to $FE
  13+ AFD4              ;;;.RollRemainder:
  14+ AFD4              ;;;	sla		a
  15+ AFD4              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ AFD4              ;;;	cp		b							; a < q?
  17+ AFD4              ;;;	jr		nc,.DontSBC
  18+ AFD4              ;;;.DoSBC:									; a is < q
  19+ AFD4              ;;;	sbc		a,b							; 	a -= q
  20+ AFD4              ;;;.DontSBC:
  21+ AFD4              ;;;	rl		c							; r << 1
  22+ AFD4              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ AFD4              ;;;    ld      a,c
  24+ AFD4              ;;;    ld      (varR),a
  25+ AFD4              ;;;	ret									; R (c) left with remainder
  26+ AFD4              ;;;.Reduce:								; a geneated a carry
  27+ AFD4              ;;;	sbc		a,b							; a = a - (q +1)
  28+ AFD4              ;;;	scf									; set carry flag for rl
  29+ AFD4              ;;;	rl		c							; r << 1 briging in carry
  30+ AFD4              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ AFD4              ;;;    ld      a,c
  32+ AFD4              ;;;    ld      (varR),a
  33+ AFD4              ;;;	ret
  34+ AFD4              ;;;.AnswerTooBig:
  35+ AFD4              ;;;	ld	    c,$FF							; arse its too big
  36+ AFD4              ;;;    ld      a,c
  37+ AFD4              ;;;    ld      (varR),a
  38+ AFD4              ;;;	ret
  39+ AFD4
  40+ AFD4              BCequAmul256DivC:
  41+ AFD4 59             ld    e,c
  42+ AFD5 67             ld    h,a
  43+ AFD6 2E 00          ld    l,0
  44+ AFD8              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ AFD8 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ AFD9 B7             or a                                   ; from this time on the carry is cleared
  47+ AFDA C8             ret z
  48+ AFDB 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ AFDE 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ AFE0              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ AFE0 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ AFE2 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ AFE3 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ AFE5 C9             ret
  55+ AFE6
  56+ AFE6              HL_Div_C:
  57+ AFE6              ; Integer divides HL by C
  58+ AFE6              ; Result in HL, remainder in A
  59+ AFE6              ; Clobbers F, B
  60+ AFE6 06 10                ld b,16
  61+ AFE8 AF                   xor a
  62+ AFE9              HL_Div_C_Loop:
  63+ AFE9 29                   add hl,hl
  64+ AFEA 17                   rla
  65+ AFEB B9                   cp c
  66+ AFEC 38 02                jr c,HL_DivC_Skip
  67+ AFEE 91                   sub c
  68+ AFEF 2C                   inc l
  69+ AFF0              HL_DivC_Skip:
  70+ AFF0 10 F7                djnz HL_Div_C_Loop
  71+ AFF2 7D                   ld   a,l
  72+ AFF3 32 E4 97             ld  (varR),a
  73+ AFF6 C9                   ret
  74+ AFF7
  75+ AFF7
  76+ AFF7
  77+ AFF7              ; Entry point if varQ is populated with demoninator
  78+ AFF7              RequAmul256divQ:
  79+ AFF7              BFRDIV:
  80+ AFF7 F5           		push	af
  81+ AFF8 3A E3 97     		ld		a,(varQ)
  82+ AFFB 4F           		ld		c,a
  83+ AFFC F1           		pop		af
  84+ AFFD FE 00        		cp		0
  85+ AFFF CA 16 B0     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ B002              RequAmul256divC:
  87+ B002 2E 00        		ld		l,0
  88+ B004 67           		ld		h,a
  89+ B005              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ B005 06 10        		ld b,16
  91+ B007 AF           		xor a
  92+ B008              LOOPPOINT:
  93+ B008 29           		add hl,hl
  94+ B009 17           		rla
  95+ B00A B9           		cp c
  96+ B00B 38 02        		jr c,SKIPINCSUB
  97+ B00D 2C           		inc l
  98+ B00E 91           		sub c
  99+ B00F              SKIPINCSUB:
 100+ B00F 10 F7        		djnz LOOPPOINT
 101+ B011 7D           		ld		a,l
 102+ B012 32 E4 97     		ld 		(varR),a
 103+ B015 C9           		ret
 104+ B016              HLDIVC_0_BY:
 105+ B016 32 E4 97     		ld		(varR),a
 106+ B019 C9           		ret
 107+ B01A              ;	push	af
 108+ B01A              ;	ld		a,b
 109+ B01A              ;	ld		(varQ),a
 110+ B01A              ;	pop		af
 111+ B01A              ;RequAmul256divQ:
 112+ B01A              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ B01A              ;	ld		hl,varQ
 114+ B01A              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ B01A              ;	ld		b,$FE						; b = X
 116+ B01A              ;	ld		c,a							; c = R	div roll counter
 117+ B01A              ;LL31:									; roll R
 118+ B01A              ;	sla		a
 119+ B01A              ;	jr		c,LL29						; hop to Reduce
 120+ B01A              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ B01A              ;	sbc		a,(hl)						; a = a - Q
 122+ B01A              ;	rl		c							; rotate R left
 123+ B01A              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ B01A              ;	jr		LL2Good
 125+ B01A              ;LL29:									; Reduce
 126+ B01A              ;	sbc		a,(hl)
 127+ B01A              ;	scf
 128+ B01A              ;	rl		c							; roll a carry flag into R
 129+ B01A              ;	jr		c,LL31						;  loop R
 130+ B01A              ;	jr		LL2Good
 131+ B01A              ;LL2:
 132+ B01A              ;	ld		c,$FF
 133+ B01A              ;LL2Good:
 134+ B01A              ;	ld		a,c
 135+ B01A              ;	ld		(varR),a
 136+ B01A              ;	ret
 137+ B01A
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1081  B01A                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ B01A              RequAdivQ:
   2+ B01A              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ B01A              LL61:										; Handling division R=A/Q for case further down
   4+ B01A 4F           	ld		c,a								; c = A
   5+ B01B 3A E3 97     	ld		a,(varQ)						; test for divide by 0
   6+ B01E FE 00        	cp		0
   7+ B020 28 16        	jr		z,LL84							; divide by zero error
   8+ B022 57           	ld		d,a								; now we can do C/D
   9+ B023 06 08            ld b,8
  10+ B025 AF               xor a
  11+ B026              LL63:										; roll divide loop
  12+ B026 CB 21            sla c
  13+ B028 17               rla
  14+ B029 BA               cp d
  15+ B02A 38 02            jr c,LL64
  16+ B02C 0C               inc c
  17+ B02D 92               sub d
  18+ B02E              LL64:
  19+ B02E 10 F6            djnz LL63
  20+ B030 32 E2 97     	ld	(varU),a							; store remainder in U
  21+ B033 79           	ld	a,c
  22+ B034 32 E4 97     	ld	(varR),a							; store remainder in R
  23+ B037 C9               ret
  24+ B038              LL84:										; div error  R=U=#5
  25+ B038 3E 32        	ld		a,50
  26+ B03A 32 E4 97     	ld		(varR),a
  27+ B03D 32 E2 97     	ld		(varU),a
  28+ B040 C9           	ret
  29+ B041
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1082  B041              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1083  B041                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ B041              asm_mult12:
   2+ B041              RSequQmulA:
   3+ B041              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ B041 CD E9 AE     	call APequQmulA
   5+ B044 08           	ex 	af,af'
   6+ B045 7A           	ld	a,d
   7+ B046 32 E5 97     	ld	(varS),a
   8+ B049 7B           	ld	a,e
   9+ B04A 32 E4 97     	ld	(varR),a
  10+ B04D 08           	ex 	af,af'
  11+ B04E C9           	ret
  12+ B04F
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1084  B04F              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1085  B04F                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ B04F              ;rotmap0xLo: DB	0				; INWK +9
   2+ B04F              ;rotmap0xHi: DB	0				; INWK +10
   3+ B04F              ;rotmat0yLo: DB	0				; INWK +11
   4+ B04F              ;rotmat0yHi: DB	0				; INWK +12
   5+ B04F              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ B04F              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ B04F              ;rotmap1xLo: DB	0				; INWK +15
   8+ B04F              ;rotmap1xHi:	DB	0				; INWK +16
   9+ B04F              ;rotmat1yLo:	DB	0				; INWK +17
  10+ B04F              ;rotmat1yHi:	DB	0				; INWK +18
  11+ B04F              ;rotmat1zLo:	DB	0				; INWK +19
  12+ B04F              ;rotmat1zHi:	DB	0				; INWK +20
  13+ B04F              ;rotmat2xLo: DB	0				; INWK +21
  14+ B04F              ;rotmat2xHi:	DB	0				; INWK +22
  15+ B04F              ;rotmat2yLo:	DB	0				; INWK +23
  16+ B04F              ;rotmat2yHi:	DB	0				; INWK +24
  17+ B04F              ;rotmat2zLo:	DB	0				; INWK +25
  18+ B04F              ;rotmat2zHi:	DB	0				; INWK +26
  19+ B04F              ;
  20+ B04F              ;rotmatFx	equ	rotmat0xHi
  21+ B04F              ;rotmatFy	equ	rotmat0yHi
  22+ B04F              ;rotmatFz	equ	rotmat0zHi
  23+ B04F              ;rotmatUx	equ	rotmat1xHi
  24+ B04F              ;rotmatUy	equ	rotmat1yHi
  25+ B04F              ;rotmatUz	equ	rotmat1zHi
  26+ B04F              ;
  27+ B04F              ;inwkarray			equ		INWK+10
  28+ B04F
  29+ B04F                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++B04F              CopyRotMatNoseVtoXX15:
   2++B04F                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++B04F 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++B052 32 82 C0    >                        ld       (XX15VecX),a
   3++B055                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++B055 3A 37 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++B058 32 83 C0    >                        ld       (XX15VecY),a
   4++B05B                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++B05B 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++B05E 32 84 C0    >                        ld       (XX15VecZ),a
   5++B061 C9                   ret
   6++B062
   7++B062              CopyRotMatRoofVtoXX15:
   8++B062                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++B062 3A 2F C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++B065 32 82 C0    >                        ld       (XX15VecX),a
   9++B068                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++B068 3A 31 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++B06B 32 83 C0    >                        ld       (XX15VecY),a
  10++B06E                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++B06E 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++B071 32 84 C0    >                        ld       (XX15VecZ),a
  11++B074 C9                   ret
  12++B075
  13++B075              CopyRotMatSideVtoXX15:
  14++B075                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++B075 3A 29 C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++B078 32 82 C0    >                        ld       (XX15VecX),a
  15++B07B                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++B07B 3A 2B C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++B07E 32 83 C0    >                        ld       (XX15VecY),a
  16++B081                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++B081 3A 2D C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++B084 32 84 C0    >                        ld       (XX15VecZ),a
  17++B087 C9                   ret
  18++B088
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ B088
  31+ B088                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++B088              CopyXX15toRotMatNoseV:
   2++B088                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++B088 3A 82 C0    >                        ld       a,(XX15VecX)
   2++B08B 32 35 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++B08E                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++B08E 3A 83 C0    >                        ld       a,(XX15VecY)
   3++B091 32 37 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++B094                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++B094 3A 84 C0    >                        ld       a,(XX15VecZ)
   4++B097 32 39 C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++B09A C9                   ret
   6++B09B
   7++B09B              CopyXX15toRotMatRoofV:
   8++B09B                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++B09B 3A 82 C0    >                        ld       a,(XX15VecX)
   8++B09E 32 2F C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++B0A1                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++B0A1 3A 83 C0    >                        ld       a,(XX15VecY)
   9++B0A4 32 31 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++B0A7                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++B0A7 3A 84 C0    >                        ld       a,(XX15VecZ)
  10++B0AA 32 33 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++B0AD C9                   ret
  12++B0AE
  13++B0AE              CopyXX15toRotMatSideV:
  14++B0AE                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++B0AE 3A 82 C0    >                        ld       a,(XX15VecX)
  14++B0B1 32 29 C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++B0B4                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++B0B4 3A 83 C0    >                        ld       a,(XX15VecY)
  15++B0B7 32 2B C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++B0BA                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++B0BA 3A 84 C0    >                        ld       a,(XX15VecZ)
  16++B0BD 32 2D C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++B0C0 C9                   ret
  18++B0C1
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ B0C1
  33+ B0C1              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ B0C1              		; b = regX on entry
  35+ B0C1              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ B0C1 08           		ex		af,af'
  37+ B0C2 78           		ld		a,b
  38+ B0C3 32 E3 97     		ld		(varQ),a
  39+ B0C6 08           		ex		af,af'
  40+ B0C7 EE 80        		xor		$80							;	 flip sign of Acc
  41+ B0C9 CD E9 A7     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ B0CC              ; USES 				A BC E
  43+ B0CC              ; DOES NOT USE		D HL
  44+ B0CC              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ B0CC 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ B0CD E6 80        		and		SignOnly8Bit						; ..
  47+ B0CF 5F           		ld		e,a							; ..
  48+ B0D0 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ B0D1 E6 7F        		and		SignMask8Bit							; ..
  50+ B0D3 06 FE        		ld		b,$FE						; slide counter T1
  51+ B0D5              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ B0D5 CB 27        		sla		a
  53+ B0D7              		JumpIfALTNusng $60, TIS1SkipSub
  53+ B0D7 FE 60       >                        cp      $60
  53+ B0D9 DA E6 B0    >                        jp		c, TIS1SkipSub
  54+ B0DC DE 60        		sbc		a,$60							; subtract 96
  55+ B0DE 37           		scf
  56+ B0DF CB 10        		rl		b							;  T1
  57+ B0E1 38 F2        		jr		c,TIS1RollTLoop
  58+ B0E3              TIS1KIPCont:
  59+ B0E3 78           		ld		a,b							;   T1
  60+ B0E4 B3           		or		e							;   restore T sign
  61+ B0E5 C9           		ret
  62+ B0E6              TIS1SkipSub:
  63+ B0E6 B7           	or			a
  64+ B0E7 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ B0E9 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ B0EB C3 E3 B0     	jp			TIS1KIPCont
  67+ B0EE
  68+ B0EE              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ B0EE              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ B0EE
  71+ B0EE
  72+ B0EE
  73+ B0EE
  74+ B0EE              TidyRotYSmall:
  75+ B0EE CD 19 B2     		call	CalcRoofvZ
  76+ B0F1 32 33 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ B0F4 C3 2A B1     		jp		NormaliseRoofV
  78+ B0F7
  79+ B0F7              TidyRotXSmall:
  80+ B0F7 AF           		xor		a
  81+ B0F8 47           		ld		b,a
  82+ B0F9 3A 37 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ B0FC E6 60        		and		%01100000
  84+ B0FE CA EE B0     		jp		z,TidyRotYSmall
  85+ B101 3A 39 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ B104 47           		ld		b,a							; b = regX for now
  87+ B105 3A 31 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ B108 CD DF B1     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ B10B 32 31 C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ B10E C3 2A B1     		jp		NormaliseRoofV
  91+ B111              ; TIDY is broken
  92+ B111              TIDY:
  93+ B111 DD 01                break
  94+ B113              ORTHOGALISE:
  95+ B113              ;-- NormaliseNosev
  96+ B113 CD 4F B0     		call	CopyRotMatNoseVtoXX15
  97+ B116 CD F6 AB     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ B119 CD 88 B0     		call	CopyXX15toRotMatNoseV
  99+ B11C              .CheckNXSmall:
 100+ B11C 3A 35 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ B11F E6 60        		and		%01100000					; check top two magnitude bits
 102+ B121 CA F7 B0     		jp		z,TidyRotXSmall
 103+ B124              .RotXIsBig:
 104+ B124 CD A5 B1             call	CalcRoofvX
 105+ B127 32 2F C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ B12A              NormaliseRoofV:
 107+ B12A CD 62 B0     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ B12D CD F6 AB     		call	normaliseXX1596fast			; normalise roof
 109+ B130              ;calc sidev x
 110+ B130 CD 9B B0     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ B133 3A 35 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ B136 32 E3 97     		ld		(varQ),a					; q = nosev_y
 113+ B139 3A 33 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ B13C CD 41 B0     		call	RSequQmulA
 115+ B13F 3A 39 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ B142 47           		ld		b,a							; b = regX for now
 117+ B143 3A 31 C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ B146 CD C1 B0     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ B149                      JumpIfAIsZero NormSideXNoNeg
 119+ B149 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ B14A CA 4F B1    >                        jp	z, NormSideXNoNeg
 120+ B14D EE 80        		xor		$80							; flip a to get -sidev_x
 121+ B14F              NormSideXNoNeg:
 122+ B14F 32 29 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ B152              ;calc sidev y
 124+ B152 3A 39 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ B155 32 E3 97     		ld		(varQ),a
 126+ B158 3A 2F C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ B15B CD 41 B0     		call	RSequQmulA
 128+ B15E 3A 35 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ B161 47           		ld		b,a							; b = regX for now
 130+ B162 3A 33 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ B165 CD C1 B0     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ B168                      JumpIfAIsZero NormSideYNoNeg
 132+ B168 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ B169 CA 6E B1    >                        jp	z, NormSideYNoNeg
 133+ B16C EE 80        		xor		$80							; flip a to get -sidev_y
 134+ B16E              NormSideYNoNeg:
 135+ B16E 32 37 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ B171              ;calc sidev z
 137+ B171 3A 35 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ B174 32 E3 97     		ld		(varQ),a
 139+ B177 3A 31 C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ B17A CD 41 B0     		call	RSequQmulA
 141+ B17D 3A 37 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ B180 47           		ld		b,a							; b = regX for now
 143+ B181 3A 2F C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ B184 CD C1 B0     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ B187                      JumpIfAIsZero NormSideZNoNeg
 145+ B187 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ B188 CA 8D B1    >                        jp	z, NormSideZNoNeg
 146+ B18B EE 80        		xor		$80							; flip a to get -sidev_y
 147+ B18D              NormSideZNoNeg:
 148+ B18D 32 2B C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ B190              .ClearLoBytes:
 150+ B190 21 34 C0     		ld		hl,UBnkrotmatNosevX
 151+ B193 06 09        		ld		b,9
 152+ B195 AF                   xor     a
 153+ B196              .ClearLoLoop:
 154+ B196 77           		ld		(hl),a						; zero out lo bytes
 155+ B197 23           		inc		hl
 156+ B198 23           		inc		hl
 157+ B199 10 FB        		djnz	.ClearLoLoop
 158+ B19B CD 75 B0     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ B19E CD F6 AB     		call	normaliseXX1596fast			; normalise roof
 160+ B1A1              ;calc sidev x
 161+ B1A1 CD AE B0     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ B1A4
 163+ B1A4 C9           		ret
 164+ B1A5
 165+ B1A5
 166+ B1A5
 167+ B1A5              ;;;;;;;;.CheckNYSmall:
 168+ B1A5              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ B1A5              ;;;;;;;;		and		$7F
 170+ B1A5              ;;;;;;;;		cp		0
 171+ B1A5              ;;;;;;;;		jp		z,Tidy1RZ
 172+ B1A5              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ B1A5              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ B1A5              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ B1A5              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ B1A5              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ B1A5              ;;;;;;;;.DoNZ:
 178+ B1A5              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ B1A5              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ B1A5              ;;;;;;;;NormaliseRoofv:
 181+ B1A5              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ B1A5              ;;;;;;;;		push	bc
 183+ B1A5              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ B1A5              ;;;;;;;;		pop		bc
 185+ B1A5              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ B1A5              ;;;;;;;;ProcessSidev:
 187+ B1A5              ;;;;;;;;; -- SIDEV X
 188+ B1A5              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ B1A5              ;;;;;;;;		push	bc
 191+ B1A5              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ B1A5              ;;;;;;;;		pop		bc
 193+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ B1A5              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ B1A5              ;;;;;;;;		push	bc
 197+ B1A5              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ B1A5              ;;;;;;;;		pop		bc
 199+ B1A5              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ B1A5              ;;;;;;;;; -- SIDEV Y
 201+ B1A5              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ B1A5              ;;;;;;;;		push	bc
 204+ B1A5              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ B1A5              ;;;;;;;;		pop		bc
 206+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ B1A5              ;;;;;;;;		ld		b,a
 208+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ B1A5              ;;;;;;;;		push	bc
 210+ B1A5              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ B1A5              ;;;;;;;;		pop		bc
 212+ B1A5              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ B1A5              ;;;;;;;;		push	bc
 215+ B1A5              ;;;;;;;;; -- SIDEV Z
 216+ B1A5              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ B1A5              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ B1A5              ;;;;;;;;		pop		bc
 220+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ B1A5              ;;;;;;;;		ld		b,a
 222+ B1A5              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ B1A5              ;;;;;;;;		push	bc
 224+ B1A5              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ B1A5              ;;;;;;;;		pop		bc
 226+ B1A5              ;;;;;;;;		ld		(sidev_z+1),a
 227+ B1A5              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ B1A5              ;;;;;;;;		ld		hl,sidev_z
 229+ B1A5              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ B1A5              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ B1A5              ;;;;;;;;NormaliseSideV:
 232+ B1A5              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ B1A5              ;;;;;;;;		push	bc
 234+ B1A5              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ B1A5              ;;;;;;;;		pop		bc
 236+ B1A5              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ B1A5              ;;;;;;;;
 238+ B1A5
 239+ B1A5
 240+ B1A5              CalcRoofvX:
 241+ B1A5              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ B1A5              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ B1A5 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ B1A8 32 E3 97    >                        ld       (varQ),a
 243+ B1AB 3A 33 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ B1AE CD 41 B0     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ B1B1              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ B1B1 3A 37 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ B1B4 32 E3 97    >                        ld       (varQ),a
 246+ B1B7 3A 31 C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ B1BA CD E9 A7     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ B1BD 7A           		ld		a,d
 249+ B1BE E6 80        		and 	$80
 250+ B1C0 FD 67        		ld		iyh,a
 251+ B1C2              ;DEBUG		ld		c,a
 252+ B1C2 3A 35 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ B1C5 4F           		ld		c,a								; temp save
 254+ B1C6 E6 80        		and		$80
 255+ B1C8 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ B1CA FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ B1CC 79           		ld		a,c								; recover a
 258+ B1CD E6 7F        		and		$7F								; a is unsigned nosev x
 259+ B1CF 42           		ld		b,d
 260+ B1D0 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ B1D1 57           		ld		d,a								; de = nosev x hi
 262+ B1D2 1E 00        		ld		e,0
 263+ B1D4 CD 68 AA     		call	BC_Div_DE
 264+ B1D7 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ B1D9 EE 80        		xor		$80								; flip sign
 266+ B1DB E6 80        		and		$80								; keep sign bit only
 267+ B1DD B0           		or		b
 268+ B1DE C9           		ret
 269+ B1DF
 270+ B1DF
 271+ B1DF              CalcRoofvY:
 272+ B1DF              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ B1DF              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ B1DF 3A 39 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ B1E2 32 E3 97    >                        ld       (varQ),a
 274+ B1E5 3A 33 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ B1E8 CD 41 B0     		call	RSequQmulA
 276+ B1EB              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ B1EB 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ B1EE 32 E3 97    >                        ld       (varQ),a
 277+ B1F1 3A 2F C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ B1F4 CD E9 A7     		call	madXAequQmulAaddRS
 279+ B1F7 7A           		ld		a,d
 280+ B1F8 E6 80        		and 	$80
 281+ B1FA FD 67        		ld		iyh,a
 282+ B1FC 3A 37 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ B1FF 4F           		ld		c,a								; temp save
 284+ B200 E6 80        		and		$80
 285+ B202 FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ B204 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ B206 79           		ld		a,c								; recover a
 288+ B207 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ B209 42           		ld		b,d
 290+ B20A 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ B20B 57           		ld		d,a								; de = nosev x hi
 292+ B20C 1E 00        		ld		e,0
 293+ B20E CD 68 AA     		call	BC_Div_DE
 294+ B211 FD 7C        		ld		a,iyh
 295+ B213 EE 80        		xor		$80
 296+ B215 E6 80        		and		$80
 297+ B217 B0           		or		b
 298+ B218 C9           		ret
 299+ B219
 300+ B219              CalcRoofvZ:
 301+ B219              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ B219              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ B219 3A 37 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ B21C 32 E3 97    >                        ld       (varQ),a
 303+ B21F 3A 31 C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ B222 CD 41 B0     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ B225              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ B225 3A 35 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ B228 32 E3 97    >                        ld       (varQ),a
 306+ B22B 3A 2F C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ B22E CD E9 A7     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ B231 7A           		ld		a,d
 309+ B232 E6 80        		and 	$80
 310+ B234 FD 67        		ld		iyh,a
 311+ B236 3A 39 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ B239 4F           		ld		c,a								; temp save
 313+ B23A E6 80        		and		$80
 314+ B23C FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ B23E FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ B240 79           		ld		a,c								; recover a
 317+ B241 E6 7F        		and		$7F								; a is unsigned nosev x
 318+ B243 42           		ld		b,d
 319+ B244 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ B245 57           		ld		d,a								; de = nosev x hi
 321+ B246 1E 00        		ld		e,0
 322+ B248 CD 68 AA     		call	BC_Div_DE
 323+ B24B FD 7C        		ld		a,iyh
 324+ B24D EE 80        		xor		$80
 325+ B24F E6 80        		and		$80
 326+ B251 B0           		or		b
 327+ B252 C9           		ret
 328+ B253
 329+ B253
 330+ B253
 331+ B253              ;;ProcessSidev:
 332+ B253              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ B253              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ B253              ;;		push	bc
 335+ B253              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ B253              ;;		pop		bc
 337+ B253              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ B253              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ B253              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ B253              ;;		push	bc
 341+ B253              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ B253              ;;		pop		bc
 343+ B253              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ B253              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ B253              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ B253              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ B253              ;;		push	bc
 348+ B253              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ B253              ;;		pop		bc
 350+ B253              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ B253              ;;		ld		b,a
 352+ B253              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ B253              ;;		push	bc
 354+ B253              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ B253              ;;		pop		bc
 356+ B253              ;;		xor		$80							; a *= -1
 357+ B253              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ B253              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ B253              ;;		push	bc
 360+ B253              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ B253              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ B253              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ B253              ;;		pop		bc
 364+ B253              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ B253              ;;		ld		b,a
 366+ B253              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ B253              ;;		push	bc
 368+ B253              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ B253              ;;		pop		bc
 370+ B253              ;;		xor		$80
 371+ B253              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ B253              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ B253              ;;		ld		hl,UBnkrotmatSidevZ
 374+ B253              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ B253              ;;		ld		hl,UBnkrotmatNosevX
 376+ B253
 377+ B253
 378+ B253
 379+ B253
 380+ B253
 381+ B253
 382+ B253              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ B253              ;;;;;;;;.ProcessRoofv:
 384+ B253              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ B253              ;;;;;;;;		push	bc
 386+ B253              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ B253              ;;;;;;;;		pop		bc
 388+ B253              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ B253              ;;;;;;;;.ProcessSidev:
 390+ B253              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ B253              ;;;;;;;;		push	bc
 392+ B253              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ B253              ;;;;;;;;		pop		bc
 394+ B253              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ B253
# file closed: ./Maths/Utilities/tidy.asm
1086  B253                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ B253
   2+ B253              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ B253 BA          >                        cp     d
   2+ B254 D2 72 B2    >                        jp		nc,.Ll28Exit255
   3+ B257 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ B259 CB 27        .LL31:                  sla     a
   5+ B25B 38 0D                                jr      c,.LL29
   6+ B25D                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ B25D BA          >                        cp      d
   6+ B25E DA 63 B2    >                        jp		c, .SkipSub
   7+ B261 92                                   sub     d
   8+ B262                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ B262 B7          >                        or a
   9+ B263 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ B264 CB 13                                rl      e
  11+ B266 38 F1                                jr      c,.LL31
  12+ B268 7B                                   ld      a,e
  13+ B269 C9                                   ret
  14+ B26A 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ B26B 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ B26C CB 13                                rl      e                           ; rotate counter e left
  17+ B26E 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ B270 7B                                   ld      a,e                         ; stick result in a
  19+ B271 C9                                   ret
  20+ B272 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ B274 C9                                   ret
  22+ B275
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1087  B275                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ B275              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ B275              TIS1:
   3+ B275 08           		ex		af,af'
   4+ B276 3A C9 96     		ld		a,(regX)
   5+ B279 47           		ld		b,a
   6+ B27A 08           		ex		af,af'
   7+ B27B              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ B27B 08           		ex		af,af'
   9+ B27C 78           		ld		a,b
  10+ B27D 32 E3 97     		ld		(varQ),a
  11+ B280 08           		ex		af,af'
  12+ B281 EE 80        		xor		$80							;	 flip sign of Acc
  13+ B283 CD E9 A7     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ B286              ; USES 				A BC E
  15+ B286              ; DOES NOT USE		D HL
  16+ B286              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ B286 47           		ld		b,a
  18+ B287 E6 80        		and		$80							;	hi sign
  19+ B289 5F           		ld		e,a							;   e = varT
  20+ B28A 78           		ld		a,b
  21+ B28B E6 7F        		and		$7F							;	hi A7
  22+ B28D 06 FE        		ld		b,$FE						;   slide counter
  23+ B28F 48           		ld		c,b							;   c == T1 ::  T1
  24+ B290              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ B290 CB 27        		sla		a
  26+ B292 FE 60        		cp		$60							; max 96
  27+ B294 30 02        		jr		nc,.DV4
  28+ B296 DE 60        		sbc		a,$60							;  SBC #&60
  29+ B298              .DV4:										; skip subtraction
  30+ B298 CB 11        		rl		c							;  T1
  31+ B29A 38 F4        		jr		c,.DVL3
  32+ B29C 79           		ld		a,c							;   T1
  33+ B29D B3           		or		e							;   restore T sign
  34+ B29E C9           		ret
  35+ B29F
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1088  B29F              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1089  B29F              ;INCLUDE "XHiYLoequPA-gc3.asm"
1090  B29F              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1091  B29F              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1092  B29F              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1093  B29F                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1094  B29F
1095  B29F                  INCLUDE "./Tactics.asm"
# file opened: ./Tactics.asm
   1+ B29F              ;Ship Tactics
   2+ B29F              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
   3+ B29F
   4+ B29F 21 22 C3     ForceAngryDirect:       ld      hl,ShipNewBitsAddr
   5+ B2A2 CB E6                                set     ShipIsHostile, (hl)
   6+ B2A4 C9                                   ret
   7+ B2A5
   8+ B2A5              ; set angry if possible, if its an innocent then flag the space station to get angry
   9+ B2A5 3A 22 C3     MakeAngry:              ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
  10+ B2A8 47                                   ld      b,a                                     ; copy to b in case we want it later
  11+ B2A9                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbAngry
  11+ B2A9 3A 21 C3    >                        ld  a,(ShipTypeAddr)
  11+ B2AC FE 02       >                        cp  ShipTypeStation
  11+ B2AE CA D1 B2    >                        jp  z,.SetNewbAngry
  12+ B2B1 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
  13+ B2B3 C4 DA B2                             call    nz, SetStationAngry                     ; Set Space Station if present, Angry
  14+ B2B6 3A 24 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  15+ B2B9                                      ReturnIfAIsZero                                 ; if 0 then no AI attached
  15+ B2B9 A7          >                        and     a
  15+ B2BA C8          >                        ret     z
  16+ B2BB F6 80                                or      ShipAIEnabled                           ; set AI Enabled set to ensure its set
  17+ B2BD 32 24 C0                             ld      (UBnkaiatkecm),a                        ; .
  18+ B2C0 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  19+ B2C1                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  19+ B2C1 3E 02       >                        ld      a,2
  19+ B2C3 32 20 C0    >                        ld      (UBnKAccel),a
  20+ B2C6 CB 27                                sla     a                                       ; set pitch to 4
  21+ B2C8 32 22 C0                             ld      (UBnKRotZCounter),a                     ; .
  22+ B2CB 3A 23 C3                             ld      a,(ShipAIFlagsAddr)
  23+ B2CE                                      ReturnIfBitMaskClear ShipCanAnger
  23+ B2CE E6 01       >                        and     ShipCanAnger
  23+ B2D0 C8          >                        ret     z
  24+ B2D1 78           .SetNewbAngry:          ld      a,b
  25+ B2D2 F6 04                                or      ShipIsHostile
  26+ B2D4 32 22 C3                             ld      (ShipNewBitsAddr),a
  27+ B2D7 C9                                   ret
  28+ B2D8
  29+ B2D8 C9           MissileDidHitUs:        ret ; TODO
  30+ B2D9
  31+ B2D9 C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
  32+ B2DA
  33+ B2DA CD E3 9B     SetStationAngry:        call    IsSpaceStationPresent                   ; only if present
  34+ B2DD D8                                   ret     c
  35+ B2DE 3A 1A C0                             ld      a,(UbnKShipBankNbr)                     ; save current bank
  36+ B2E1 FD 67                                ld      iyh,a
  37+ B2E3                                      MMUSelectUniverseN 0                            ; space station is always 0
  37+ B2E3 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  38+ B2E7 3A 22 C3                             ld      a,(ShipNewBitsAddr)                     ; get station new bits
  39+ B2EA F6 04                                or      ShipIsHostile                           ; and mark hostile
  40+ B2EC 32 22 C3                             ld      (ShipNewBitsAddr),a                     ; .
  41+ B2EF FD 7C                                ld      a,iyh                                   ; get prev bank back
  42+ B2F1                                      MMUSelectUniverseA                              ;
  42+ B2F1 C6 46       >                     add    a,BankUNIVDATA0
  42+ B2F3 ED 92 56    >                     nextreg UniverseMMU,       a
  43+ B2F6 C9                                   ret
  44+ B2F7
  45+ B2F7              CheckMissileBlastInit:  ZeroA
  45+ B2F7 AF          >                        xor a
  46+ B2F8 32 B2 98                             ld      (CurrentMissileCheck),a
  47+ B2FB 21 0C C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
  48+ B2FE 01 0C 00                             ld      bc,12                           ; and Damage stats
  49+ B301 11 81 98                             ld      de,MissileXPos
  50+ B304 ED B0                                ldir
  51+ B306                                      ZeroA                                   ; we have processd enque request
  51+ B306 AF          >                        xor a
  52+ B307 32 1D C0                             ld      (UBnKMissleHitToProcess),a      ;
  53+ B30A CD C7 B3                             call    CheckIfBlastHitUs               ; If we are in Range
  54+ B30D DC D8 B2                             call    c, MissileDidHitUs              ; Then we get hit
  55+ B310 C9                                   ret
  56+ B311
  57+ B311              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
  58+ B311 ~                                    ld      a,(MissilePos)                      ; check X Coord
  59+ B311 ~                                    ld      hl,(ShipSign)
  60+ B311 ~                                    xor     (hl)
  61+ B311 ~                                    and     SignOnly8Bit
  62+ B311 ~                                    ld      hl,(ShipPos)
  63+ B311 ~                                    ld      de,(MissilePos)
  64+ B311 ~                                    jr      z,.SignsDiffernt
  65+ B311 ~            .XSame:                 and     a
  66+ B311 ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
  67+ B311 ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
  68+ B311 ~                                    NegHL
  69+ B311 ~                                    jp      .CheckDiff
  70+ B311 ~            .SignsDiffernt:         add     hl,de
  71+ B311 ~                                    ReturnIfNegative                            ; if we overflowed then return
  72+ B311 ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  73+ B311 ~                                    ReturnIfANotZero
  74+ B311 ~                                    ld      a,l
  75+ B311 ~                                    and     a
  76+ B311 ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
  77+ B311                                      ENDM
  78+ B311              ;...................................................................
  79+ B311              ; We only do one test per loop for spreading the load of work
  80+ B311 3A B2 98     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
  81+ B314                                      ReturnIfAGTENusng   UniverseSlotListSize
  81+ B314 FE 0C       >                        cp    UniverseSlotListSize
  81+ B316 D0          >                        ret	 nc
  82+ B317 FD 6F                                ld      iyl,a
  83+ B319 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
  84+ B31A 32 B2 98                             ld      (CurrentMissileCheck),a
  85+ B31D                                      ReturnIfSlotAEmpty
  85+ B31D 21 B4 98    >                        ld      hl,UniverseSlotList
  85+ B320 ED 31       >                        add     hl,a
  85+ B322 7E          >                        ld      a,(hl)
  85+ B323 3C          >                        inc     a
  85+ B324 C8          >                        ret     z           ; if slot was ff inc would make it 0
  85+ B325 3D          >                        dec     a           ; get original value back for later
  86+ B326 CD E3 9B                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
  87+ B329 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
  88+ B32A 3A 23 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
  89+ B32D E6 20                                and     ShipExploding                       ;
  90+ B32F                                      ReturnIfNotZero                             ;
  90+ B32F C0          >                        ret     nz
  91+ B330 3A A2 98                             ld      a,(CurrentMissileBlastRange)
  92+ B333 FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
  93+ B335 FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
  94+ B337                                      MMUSelectUniverseA
  94+ B337 C6 46       >                     add    a,BankUNIVDATA0
  94+ B339 ED 92 56    >                     nextreg UniverseMMU,       a
  95+ B33C                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
  95+ B33C 3A 81 98    >                        ld      a,(MissileXPos)                      ; check X Coord
  95+ B33F 2A 0E C0    >                        ld      hl,(UBnKxsgn)
  95+ B342 AE          >                        xor     (hl)
  95+ B343 E6 80       >                        and     SignOnly8Bit
  95+ B345 2A 0C C0    >                        ld      hl,(UBnKxlo)
  95+ B348 ED 5B 81 98 >                        ld      de,(MissileXPos)
  95+ B34C 28 0F       >                        jr      z,.SignsDiffernt
  95+ B34E A7          >.XSame:                 and     a
  95+ B34F ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  95+ B351             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  95+ B351 F2 5F B3    >                        jp		p, .CheckDiff
  95+ B354             >                        NegHL
  95+ B354 AF          >                    xor a
  95+ B355 95          >                    sub l
  95+ B356 6F          >                    ld l,a
  95+ B357 9F          >                    sbc a,a
  95+ B358 94          >                    sub h
  95+ B359 67          >                    ld h,a
  95+ B35A C3 5F B3    >                        jp      .CheckDiff
  95+ B35D 19          >.SignsDiffernt:         add     hl,de
  95+ B35E             >                        ReturnIfNegative                            ; if we overflowed then return
  95+ B35E F8          >                        ret     m
  95+ B35F 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  95+ B360             >                        ReturnIfANotZero
  95+ B360 A7          >                        and     a
  95+ B361 C0          >                        ret     nz
  95+ B362 7D          >                        ld      a,l
  95+ B363 A7          >                        and     a
  95+ B364             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  95+ B364 21 A2 98    >                        ld      hl,CurrentMissileBlastRange
  95+ B367 BE          >                        cp      (hl)
  95+ B368 D0          >                        ret	    nc
  96+ B369                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
  96+ B369 3A 84 98    >                        ld      a,(MissileYPos)                      ; check X Coord
  96+ B36C 2A 11 C0    >                        ld      hl,(UBnKysgn)
  96+ B36F AE          >                        xor     (hl)
  96+ B370 E6 80       >                        and     SignOnly8Bit
  96+ B372 2A 0F C0    >                        ld      hl,(UBnKylo)
  96+ B375 ED 5B 84 98 >                        ld      de,(MissileYPos)
  96+ B379 28 0F       >                        jr      z,.SignsDiffernt
  96+ B37B A7          >.XSame:                 and     a
  96+ B37C ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  96+ B37E             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  96+ B37E F2 8C B3    >                        jp		p, .CheckDiff
  96+ B381             >                        NegHL
  96+ B381 AF          >                    xor a
  96+ B382 95          >                    sub l
  96+ B383 6F          >                    ld l,a
  96+ B384 9F          >                    sbc a,a
  96+ B385 94          >                    sub h
  96+ B386 67          >                    ld h,a
  96+ B387 C3 8C B3    >                        jp      .CheckDiff
  96+ B38A 19          >.SignsDiffernt:         add     hl,de
  96+ B38B             >                        ReturnIfNegative                            ; if we overflowed then return
  96+ B38B F8          >                        ret     m
  96+ B38C 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  96+ B38D             >                        ReturnIfANotZero
  96+ B38D A7          >                        and     a
  96+ B38E C0          >                        ret     nz
  96+ B38F 7D          >                        ld      a,l
  96+ B390 A7          >                        and     a
  96+ B391             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  96+ B391 21 A2 98    >                        ld      hl,CurrentMissileBlastRange
  96+ B394 BE          >                        cp      (hl)
  96+ B395 D0          >                        ret	    nc
  97+ B396                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
  97+ B396 3A 87 98    >                        ld      a,(MissileZPos)                      ; check X Coord
  97+ B399 2A 14 C0    >                        ld      hl,(UBnKzsgn)
  97+ B39C AE          >                        xor     (hl)
  97+ B39D E6 80       >                        and     SignOnly8Bit
  97+ B39F 2A 12 C0    >                        ld      hl,(UBnKzlo)
  97+ B3A2 ED 5B 87 98 >                        ld      de,(MissileZPos)
  97+ B3A6 28 0F       >                        jr      z,.SignsDiffernt
  97+ B3A8 A7          >.XSame:                 and     a
  97+ B3A9 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  97+ B3AB             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  97+ B3AB F2 B9 B3    >                        jp		p, .CheckDiff
  97+ B3AE             >                        NegHL
  97+ B3AE AF          >                    xor a
  97+ B3AF 95          >                    sub l
  97+ B3B0 6F          >                    ld l,a
  97+ B3B1 9F          >                    sbc a,a
  97+ B3B2 94          >                    sub h
  97+ B3B3 67          >                    ld h,a
  97+ B3B4 C3 B9 B3    >                        jp      .CheckDiff
  97+ B3B7 19          >.SignsDiffernt:         add     hl,de
  97+ B3B8             >                        ReturnIfNegative                            ; if we overflowed then return
  97+ B3B8 F8          >                        ret     m
  97+ B3B9 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  97+ B3BA             >                        ReturnIfANotZero
  97+ B3BA A7          >                        and     a
  97+ B3BB C0          >                        ret     nz
  97+ B3BC 7D          >                        ld      a,l
  97+ B3BD A7          >                        and     a
  97+ B3BE             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  97+ B3BE 21 A2 98    >                        ld      hl,CurrentMissileBlastRange
  97+ B3C1 BE          >                        cp      (hl)
  97+ B3C2 D0          >                        ret	    nc
  98+ B3C3 CD 59 C5                             call    ShipMissileBlast                    ; Ship hit by missile blast
  99+ B3C6 C9                                   ret                                         ; we are done
 100+ B3C7              ;...................................................................
 101+ B3C7 3A 15 C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 102+ B3CA 4F                                   ld      c,a
 103+ B3CB C3 D2 B3                             jp      MissileHitUsCheckPos
 104+ B3CE              ;...................................................................
 105+ B3CE 3A 17 C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 106+ B3D1 4F                                   ld      c,a
 107+ B3D2              ;...................................................................
 108+ B3D2 2A 0C C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 109+ B3D5                                      ZeroA
 109+ B3D5 AF          >                        xor a
 110+ B3D6 B4                                   or      h
 111+ B3D7                                      ClearCarryFlag
 111+ B3D7 B7          >                        or a
 112+ B3D8                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 112+ B3D8 C0          >                        ret     nz
 113+ B3D9 7D                                   ld      a,l
 114+ B3DA                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 114+ B3DA B9          >                        cp    c
 114+ B3DB D0          >                        ret	 nc
 115+ B3DC 2A 0F C0     .CheckY:                ld      hl,(UBnKylo)
 116+ B3DF                                      ZeroA
 116+ B3DF AF          >                        xor a
 117+ B3E0 B5                                   or      l
 118+ B3E1                                      ClearCarryFlag
 118+ B3E1 B7          >                        or a
 119+ B3E2                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 119+ B3E2 C0          >                        ret     nz
 120+ B3E3 7D                                   ld      a,l
 121+ B3E4                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 121+ B3E4 B9          >                        cp    c
 121+ B3E5 D0          >                        ret	 nc
 122+ B3E6 2A 12 C0     .CheckZ:                ld      hl,(UBnKzlo)
 123+ B3E9                                      ZeroA
 123+ B3E9 AF          >                        xor a
 124+ B3EA B5                                   or      l
 125+ B3EB                                      ClearCarryFlag
 125+ B3EB B7          >                        or a
 126+ B3EC                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 126+ B3EC C0          >                        ret     nz
 127+ B3ED 7D                                   ld      a,l
 128+ B3EE                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 128+ B3EE B9          >                        cp    c
 128+ B3EF D0          >                        ret	 nc
 129+ B3F0              .ItsAHit:               SetCarryFlag
 129+ B3F0 37          >                        scf
 129+ B3F1                                              ; So must have hit
 130+ B3F1 C9                                   ret
 131+ B3F2
 132+ B3F2              ;...................................................................
 133+ B3F2              ;... Now the tactics if current ship is the missile
 134+ B3F2              MissileLogic:           JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
 134+ B3F2 3A 1D C0    >                        ld      a,(UBnKMissleHitToProcess)
 134+ B3F5 A7          >                        and     a
 134+ B3F6 CA 4F B4    >                        jp      z, .ProcessMissileHit
 135+ B3F9              .CheckForECM:           JumpIfMemTrue ECMActive,.ECMIsActive
 135+ B3F9 3A F4 96    >                        ld      a,(ECMActive)
 135+ B3FC A7          >                        and     a
 135+ B3FD CA 58 B4    >                        jp      z, .ECMIsActive
 136+ B400 3A 22 C3     .IsMissileHostile:      ld      a,(ShipNewBitsAddr)                 ; is missle attacking us?
 137+ B403 E6 04                                and     ShipIsHostile
 138+ B405                                      JumpIfNotZero .MissileTargetingShip
 138+ B405 C2 1C B4    >                        jp	nz,.MissileTargetingShip
 139+ B408 2A 0C C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
 140+ B40B 3A 17 C0                             ld      a,(UBnKMissileDetonateRange)
 141+ B40E 4F                                   ld      c,a                                 ; c holds detonation range
 142+ B40F CD D2 B3                             call    MissileHitUsCheckPos
 143+ B412 D2 1B B4     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
 144+ B415 CD D9 B2     .MissleHitUs:           call    PlayerHitByMissile
 145+ B418 C3 58 B4                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
 146+ B41B C9           .UpdateTargetingUsPos:  ret                         //TODO
 147+ B41C 3A 1E C0     .MissileTargetingShip:  ld      a,(UBnKMissileTarget)
 148+ B41F              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
 148+ B41F 21 B4 98    >                        ld      hl,UniverseSlotList
 148+ B422 ED 31       >                        add     hl,a
 148+ B424 7E          >                        ld      a,(hl)
 148+ B425 3C          >                        inc     a
 148+ B426 CA 58 B4    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
 148+ B429 3D          >                        dec     a           ; get original value back for later
 149+ B42A              ;... Note we don't have to check for impact as we already have a loop doing that
 150+ B42A FD 6F        .SelectTargetShip:      ld      iyl,a
 151+ B42C                                      MMUSelectUniverseA
 151+ B42C C6 46       >                     add    a,BankUNIVDATA0
 151+ B42E ED 92 56    >                     nextreg UniverseMMU,       a
 152+ B431 3A 24 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)
 153+ B434 E6 20                                and     ShipExploding
 154+ B436 20 0A                                jr      nz,.UpdateTargetingShipPos
 155+ B438 FD 7D        .ShipIsExploding:       ld      a,iyl                               ; get missile back into memory
 156+ B43A                                      MMUSelectUniverseA
 156+ B43A C6 46       >                     add    a,BankUNIVDATA0
 156+ B43C ED 92 56    >                     nextreg UniverseMMU,       a
 157+ B43F C3 58 B4                             jp      .ECMIsActive
 158+ B442 21 0C C0     .UpdateTargetingShipPos:ld      hl,UBnKxlo                          ; get missile target pos top temp while
 159+ B445 11 8A 98                             ld      de,CurrentTargetXpos
 160+ B448 01 09 00                             ld      bc,3*3
 161+ B44B ED B0                                ldir
 162+ B44D FD 7D                                ld a,iyl
 163+ B44F              .CalculateMissileVector:;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 164+ B44F              ;;TODO                        check range
 165+ B44F              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 166+ B44F              ;;TODO                        else
 167+ B44F              ;;TODO                            normalise teh vector for direction
 168+ B44F              ;;TODO                            dot product = missile nosev . normalised vector
 169+ B44F              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 170+ B44F              ;;TODO                            negate normalised vector so its opposite product
 171+ B44F              ;;TODO                            invert sign of cnt
 172+ B44F              ;;TODO                            AK = roovf . XX15
 173+ B44F              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 174+ B44F              ;;TODO                            if pitch * 2 < 32 then
 175+ B44F              ;;TODO                                ax = sidev . xx15
 176+ B44F              ;;TODO                                    a = x xort current pitch direction
 177+ B44F              ;;TODO                                    shipts roll = nroll
 178+ B44F              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 179+ B44F
 180+ B44F              ;;TODO
 181+ B44F              ;;TODO
 182+ B44F              ;;TODO
 183+ B44F              ;;TODOget the targetted ship inbto bank
 184+ B44F              ;;TODO                        check range as per player
 185+ B44F              ;;TODO                        handle explosion enc
 186+ B44F
 187+ B44F              ;                    else see how close it is to target
 188+ B44F              ;                         if close to target
 189+ B44F              ;                            then explodes destroy missile
 190+ B44F              ;                                 if ship is not station
 191+ B44F              ;                                    then set up signal target ship hit my missile flag
 192+ B44F              ;                                         set blastcheckcounter to slotlist length  (12)
 193+ B44F              ;                                 end if
 194+ B44F              ;                                 if we are in range of missle blast
 195+ B44F              ;                                    cause blast damage to our ship (this will signal death is needed)
 196+ B44F              ;                                 end if
 197+ B44F              ;                                 return
 198+ B44F              ;                         end if
 199+ B44F              ;                 end if
 200+ B44F              ;         end if
 201+ B44F 3A B2 98     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 202+ B452                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 202+ B452 FE 0C       >                        cp    UniverseSlotListSize
 202+ B454 D0          >                        ret	 nc
 203+ B455 C3 F7 B2     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 204+ B458                                      ; DUMMY RET get a free return by using jp
 205+ B458 CD 6A C5     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 206+ B45B                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 206+ B45B AF          >                        xor     a
 206+ B45C 32 1D C0    >                        ld      (UBnKMissleHitToProcess),a
 207+ B45F C3 4F B4                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 208+ B462                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 209+ B462
 210+ B462
 211+ B462
 212+ B462                          ;            else if ship is angry at us
 213+ B462              ;
 214+ B462
 215+ B462              ; Part 1 - if type is missile and enquing a missile blast and slot free
 216+ B462              ;             then enqueue missile blast details
 217+ B462              ;                  mark as exploded
 218+ B462              ;                  remove missile from universe slot list
 219+ B462
 220+ B462              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 221+ B462              ; also for future ship vs ship combat
 222+ B462              ;... Tactics........................................................................
 223+ B462              ;.PART 1
 224+ B462              ; if shiphitbymissleflag <> false
 225+ B462              ;    then dec blast check counter
 226+ B462              ;         if blast check counter = 0
 227+ B462              ;            then set shiphitbymissileflag to FF
 228+ B462              ;    else if SetShipHitByMissileFlag = current ship number
 229+ B462              ;            then cause damage to ship
 230+ B462              ;         else if ship is in range and ship is not a station
 231+ B462              ;                  then cause blast damage to ship
 232+ B462              ;         if destroyed
 233+ B462              ;            then explode ship
 234+ B462              ;                 return
 235+ B462              ; end if
 236+ B462              ; if ship is a missle (I think we allow missile on missle action)
 237+ B462              ;    then if ecm is active
 238+ B462              ;            then destroy missile and return
 239+ B462              ;            else if ship is angry at us
 240+ B462              ;                    then if ship is close to us
 241+ B462              ;                            then explodes causing damage to our ship
 242+ B462              ;                                 enque missile blast
 243+ B462              ;                                 destroy missile
 244+ B462              ;                                 set blastcheckcounter to slotlist length
 245+ B462              ;                                 set shiphitbymissileflag to FE (general blast)
 246+ B462              ;                                 return
 247+ B462              ;                            else jump to part 3 to do updates
 248+ B462              ;                         end if
 249+ B462              ;                    else see how close it is to target
 250+ B462              ;                         if close to target
 251+ B462              ;                            then
 252+ B462              ;                                 enque missile blast
 253+ B462              ;                                 destroy missile
 254+ B462              ;                                 if ship is not station
 255+ B462              ;                                    then set up signal target ship hit my missile flag
 256+ B462              ;                                         set blastcheckcounter to slotlist length  (12)
 257+ B462              ;                                 end if
 258+ B462              ;                                 if we are in range of missle blast
 259+ B462              ;                                    cause blast damage to our ship (this will signal death is needed)
 260+ B462              ;                                 end if
 261+ B462              ;                                 return
 262+ B462              ;                         end if
 263+ B462              ;                 end if
 264+ B462              ;         end if
 265+ B462              ;.PART 2A ** adding in a collision logic
 266+ B462              ;    else if ship is close to another ship
 267+ B462              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 268+ B462              ;                    then if aligned correctly
 269+ B462              ;                         then remove ship as docked
 270+ B462              ;                              return
 271+ B462              ;         else
 272+ B462              ;            call collision route and determine daamage based on sizes and bounce vectors
 273+ B462              ;            return
 274+ B462              ;.PART 2 ** Need to check if ship has AI flag
 275+ B462              ;    else if not hostile
 276+ B462              ;            then if not docking or station not present
 277+ B462              ;                    then calculate vector to planet
 278+ B462              ;                         jump to part 7
 279+ B462              ;                    else calculate verctor to docking slot
 280+ B462              ;                         call caluclate vector to docking slot (DOCKIT)
 281+ B462              ;                         jump to part 7
 282+ B462              ;                 end if
 283+ B462              ;            else case ship type
 284+ B462              ;                      >>escape pod>> point at planet and jump to step 7
 285+ B462              ;                      >>space station>> if hostile
 286+ B462              ;                                           then if cop counter < 7 and 6.2% chance
 287+ B462              ;                                                   then spawm hostile cop
 288+ B462              ;                                                end if
 289+ B462              ;                                           else
 290+ B462              ;                                                if 0.8% change and transporter count = 0
 291+ B462              ;                                                   then if 50% chance
 292+ B462              ;                                                           then spawn transporter
 293+ B462              ;                                                           else spawn shuttle
 294+ B462              ;                                                        end if
 295+ B462              ;                                                end if
 296+ B462              ;                                        end if
 297+ B462              ;                                        return
 298+ B462              ;                      >>targoid and no mother ship in slot list>> set random drift
 299+ B462              ;                                                                  return
 300+ B462              ;                      >>if bounty hunter flag>> if ship not hostile
 301+ B462              ;                                                   then if trader flag clear or 20% chance
 302+ B462              ;                                                        then if fugitive or offender
 303+ B462              ;                                                                then set hosile
 304+ B462              ;                                                end if
 305+ B462              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 306+ B462              ;                                         then spawn agressive hosting one of types carried
 307+ B462              ;                                              reduce ships in hanger by 1
 308+ B462              ;                                              return
 309+ B462              ;                      >>rock hermit>> if 22% chance
 310+ B462              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 311+ B462              ;                                              return
 312+ B462              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 313+ B462              ;                 end case
 314+ B462              ;         end if
 315+ B462              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 316+ B462              ; .PART 3
 317+ B462              ;         calulcate dot product of ship nose to us
 318+ B462              ; .PART 4
 319+ B462              ;         2.5% change ship rill roll a noticable amount
 320+ B462              ;         if ship has > 50% energy jump to part 6
 321+ B462              ;         if ship > 1/8th energy jump to part 5
 322+ B462              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 323+ B462              ;            then launch escape pod
 324+ B462              ;                 set AI to null
 325+ B462              ;                 set random pitch and roll
 326+ B462              ;                 set accelleation to 0
 327+ B462              ;         end if
 328+ B462              ; .PART 5
 329+ B462              ;         if ship does not have any missilesor ECM is firing to part 6
 330+ B462              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 331+ B462              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 332+ B462              ;                            then launch thargon
 333+ B462              ;                            else spawn angry missle under ship
 334+ B462              ;                         end if
 335+ B462              ;                 end if
 336+ B462              ;            else return
 337+ B462              ;         end if
 338+ B462              ; .PART 6
 339+ B462              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 340+ B462              ;            then jump to part 7
 341+ B462              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 342+ B462              ;                    then fire laser at us (which reduces energy)
 343+ B462              ;                         cause laser damage to our ship (this will signal death is needed)
 344+ B462              ;                         decellerate by half as ship has lock on
 345+ B462              ;                         return
 346+ B462              ;                    else fire laser into space (which reduces energy)
 347+ B462              ;                 end if
 348+ B462              ;         end if
 349+ B462              ; .PART 7#
 350+ B462              ;        if ship is a msile targetting us
 351+ B462              ;           then ship turns towards us some more
 352+ B462              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 353+ B462              ;                    then do random wiht bit 7 set
 354+ B462              ;                         if random < AI flag
 355+ B462              ;                            then   ship turned towards us
 356+ B462              ;                            else   ship turns away from us
 357+ B462              ;                         end if
 358+ B462              ;                end if
 359+ B462              ;           end if
 360+ B462              ;           calculate new roll, pitch and accelleration based on new targe vector
 361+ B462
 362+ B462
 363+ B462              ;        determine ship direction based on agression and type
 364+ B462              ;        set pitch and roll coutners
 365+ B462              ;        adjust speed depleding on relationship to us
 366+ B462              ; .PART 8 - new
 367+ B462              ;        if ship has ECM, another ECM is not active and missile targeted at it
 368+ B462              ;           if ship has enery of ECM energey cost + 1/8th total
 369+ B462              ;              if chance 25%
 370+ B462              ;                 then fire ECM
 371+ B462              ;
# file closed: ./Tactics.asm
1096  B462                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ B462              M_GETSETDRV             equ $89
   2+ B462              F_OPEN                  equ $9a
   3+ B462              F_CLOSE                 equ $9b
   4+ B462              F_READ                  equ $9d
   5+ B462              F_WRITE                 equ $9e
   6+ B462              F_SEEK                  equ $9f
   7+ B462
   8+ B462              FA_READ                 equ $01
   9+ B462              FA_APPEND               equ $06
  10+ B462              FA_OVERWRITE            equ $0C
  11+ B462
  12+ B462 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ B466 DD E5
  13+ B468 AF                                   xor	    a	; set drive. 0 is default
  14+ B469 CF                                   rst	    $08
  15+ B46A 89                                   db	    $89
  16+ B46B 32 75 B4                             ld	    (DefaultDrive),a
  17+ B46E DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ B472 C1 F1
  18+ B474 C9                                   ret
  19+ B475 00           DefaultDrive:	        db	0
  20+ B476
  21+ B476              ; *******************************************************************************************************
  22+ B476              ;	Function:	Open a file read for reading/writing
  23+ B476              ;	In:		ix = filename
  24+ B476              ;			b  = Open filemode
  25+ B476              ;	ret		a  = handle, 0 on error
  26+ B476              ; *******************************************************************************************************
  27+ B476 E5 DD E5     fOpen:	                push	hl,,ix
  28+ B479 DD E5                                push	ix
  29+ B47B 3A 75 B4                             ld	    a,(DefaultDrive)
  30+ B47E CF                                   rst	    $08
  31+ B47F 9A                                   db	    F_OPEN
  32+ B480 DD E1 E1                             pop	    hl,,ix
  33+ B483 C9                                   ret
  34+ B484
  35+ B484              ; *******************************************************************************************************
  36+ B484              ;	Function	Read bytes from the open file
  37+ B484              ;	In:		ix  = address to read into
  38+ B484              ;			bc  = amount to read
  39+ B484              ;	ret:		carry set = error
  40+ B484              ; *******************************************************************************************************
  41+ B484 B7           fRead:                  or   	a             ; is it zero?
  42+ B485 C8                                   ret  	z             ; if so return
  43+ B486 E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ B489 E1                                   pop		hl
  45+ B48A CF                                   rst	    $08
  46+ B48B 9D                                   db	    F_READ
  47+ B48C E1                                   pop	    hl
  48+ B48D C9                                   ret
  49+ B48E
  50+ B48E              ; *******************************************************************************************************
  51+ B48E              ;	Function	Read bytes from the open file
  52+ B48E              ;	In:		ix  = address to read into
  53+ B48E              ;			bc  = amount to read
  54+ B48E              ;	ret:		carry set = error
  55+ B48E              ; *******************************************************************************************************
  56+ B48E B7           fWrite:                 or   	a             ; is it zero?
  57+ B48F C8                                   ret  	z             ; if so return
  58+ B490 E5 DD E5                             push	hl,,ix
  59+ B493 E1                                   pop	    hl
  60+ B494 CF                                   rst	    $08
  61+ B495 9E                                   db	    F_WRITE
  62+ B496 E1                                   pop	    hl
  63+ B497 C9                                   ret
  64+ B498
  65+ B498              ; *******************************************************************************************************
  66+ B498              ;	Function:	Close open file
  67+ B498              ;	In:		a  = handle
  68+ B498              ;	ret		a  = handle, 0 on error
  69+ B498              ; *******************************************************************************************************
  70+ B498 B7           fClose:		            or   	a             ; is it zero?
  71+ B499 C8                                   ret  	z             ; if so return
  72+ B49A CF                                   rst	    $08
  73+ B49B 9B                                   db	    F_CLOSE
  74+ B49C C9                                   ret
  75+ B49D
  76+ B49D              ; *******************************************************************************************************
  77+ B49D              ;	Function	Read bytes from the open file
  78+ B49D              ;	In:		a   = file handle
  79+ B49D              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ B49D              ;			BCDE = bytes to seek
  81+ B49D              ;	ret:		BCDE = file pos from start
  82+ B49D              ; *******************************************************************************************************
  83+ B49D DD E5 E5     fSeek:                  push	ix,,hl
  84+ B4A0 CF                                   rst	    $08
  85+ B4A1 9F                                   db	    F_SEEK
  86+ B4A2 E1 DD E1                             pop	    ix,,hl
  87+ B4A5 C9                                   ret
  88+ B4A6
  89+ B4A6              ; *******************************************************************************************************
  90+ B4A6              ; Init the file system
  91+ B4A6              ; *******************************************************************************************************
  92+ B4A6 CD 62 B4     InitFileSystem:         call    GetDefaultDrive
  93+ B4A9 C9                                   ret
  94+ B4AA
  95+ B4AA              ; *******************************************************************************************************
  96+ B4AA              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ B4AA              ; In:		hl = file data pointer
  98+ B4AA              ;		ix = address to load to
  99+ B4AA              ; *******************************************************************************************************
 100+ B4AA CD 62 B4     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ B4AD C5 D5 F5                             push	bc,,de,,af
 102+ B4B0                                      ; get file size
 103+ B4B0 4E                                   ld	    c,(hl)
 104+ B4B1 2C                                   inc	    l
 105+ B4B2 46                                   ld	    b,(hl)
 106+ B4B3 2C                                   inc	    l
 107+ B4B4 C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ B4B7 E5                                   push	hl				; get name into ix
 109+ B4B8 DD E1                                pop	    ix
 110+ B4BA 06 01                                ld      b,FA_READ		; mode open for reading
 111+ B4BC CD 76 B4                             call    fOpen
 112+ B4BF 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ B4C1 FE 00                                cp	    0				; was file handle 0?
 114+ B4C3 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ B4C5 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ B4C8 F5                                   push	af				; remember handle
 117+ B4C9 CD 84 B4                             call	fRead			; read data from A to address IX of length BC
 118+ B4CC 38 0C                                jr	    c,.error_reading
 119+ B4CE F1                                   pop	    af			    ; get handle back
 120+ B4CF CD 98 B4                             call	fClose			; close file
 121+ B4D2 38 07                                jr	    c,.error_closing
 122+ B4D4 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ B4D7 C9                                   ret
 124+ B4D8              ;
 125+ B4D8              ; On error, display error code an lock up so we can see it
 126+ B4D8              ;
 127+ B4D8 DD E1        .error_opening:         pop	ix
 128+ B4DA C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ B4DB
 130+ B4DB              .error_closing:
 131+ B4DB C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ B4DC D1                                   pop	de
 133+ B4DD C1                                   pop	bc
 134+ B4DE C9                                   ret
 135+ B4DF
 136+ B4DF              ; *******************************************************************************************************
 137+ B4DF              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ B4DF              ; In:		hl = file data pointer
 139+ B4DF              ;		ix = address to save from
 140+ B4DF              ;		bc = size
 141+ B4DF              ; *******************************************************************************************************
 142+ B4DF CD 62 B4     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ B4E2 C5 E5                                push	bc,,hl   			; store size& save address
 144+ B4E4 E5                                   push	hl		        	; get name into ix
 145+ B4E5 DD E1                                pop	    ix
 146+ B4E7 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ B4E9 CD 76 B4                             call    fOpen
 148+ B4EC 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ B4EE FE 00                                cp	    0			        ; was file handle 0?
 150+ B4F0 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ B4F2 DD E1                                pop	    ix			        ; get save address back
 152+ B4F4 C1                                   pop	    bc			        ; get size back
 153+ B4F5 F5                                   push	af			        ; remember handle
 154+ B4F6 CD 8E B4                             call	fWrite			    ; read data from A to address IX of length BC
 155+ B4F9 38 04                                jr	c,.error
 156+ B4FB F1                                   pop	af			            ; get handle back
 157+ B4FC CD 98 B4                             call	fClose			    ; close file
 158+ B4FF C9           .error:                 ret
 159+ B500              ;
 160+ B500              ; On error, display error code an lock up so we can see it
 161+ B500              ;
 162+ B500 DD E1        .error_opening:         pop	ix
 163+ B502 C1                                   pop	bc	; don't pop a, need error code
 164+ B503 C9                                   ret
 165+ B504
# file closed: ./Drive/drive_access.asm
1097  B504
1098  B504                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ B504 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ B508 41 4E 44 45
   1+ B50C 52 00
   2+ B50E 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ B512 4E 54 4F 52
   2+ B516 59 00
   3+ B518 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ B51C 65 6E 74 20
   3+ B520 53 79 73 74
   3+ B524 65 6D 20 20
   3+ B528 20 3A 00
   4+ B52B 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ B52F 72 73 70 61
   4+ B533 63 65 20 53
   4+ B537 79 73 74 65
   4+ B53B 6D 3A 00
   5+ B53E 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ B542 69 74 69 6F
   5+ B546 6E 20 20 20
   5+ B54A 3A 00
   6+ B54C 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ B550 20 20 20 20
   6+ B554 20 20 20 20
   6+ B558 3A 00
   7+ B55A 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ B55E 20 20 20 20
   7+ B562 20 20 20 20
   7+ B566 3A 00
   8+ B568 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ B56C 6C 20 53 74
   8+ B570 61 74 75 73
   8+ B574 3A 00
   9+ B576 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ B57A 6E 67 20 20
   9+ B57E 20 20 20 20
   9+ B582 3A 00
  10+ B584 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ B588 50 4D 45 4E
  10+ B58C 54 3A 00
  11+ B58F
  12+ B58F 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ B593 20 4C 69 67
  12+ B597 68 74 20 59
  12+ B59B 65 61 72 73
  12+ B59F 00
  13+ B5A0 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ B5A4 58 58 58 58
  13+ B5A8 58 58 00
  14+ B5AB 2E           txt_cash_decimal        DB "."
  15+ B5AC 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ B5B0 00
  16+ B5B1
  17+ B5B1              txt_status_colour		equ $FF
  18+ B5B1
  19+ B5B1              print_boiler_text_l2:
  20+ B5B1              ; ">print_boilder_text hl = text structure, b = message count"
  21+ B5B1              BoilerTextLoop:
  22+ B5B1 C5           	push		bc			; Save Message Count loop value
  23+ B5B2 4E           	ld			c,(hl)		; Get Row into b
  24+ B5B3 23           	inc			hl
  25+ B5B4 46           	ld			b,(hl)		; Get Col into b
  26+ B5B5 23           	inc			hl
  27+ B5B6 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ B5B7 23           	inc			hl
  29+ B5B8 56           	ld			d,(hl)		; Get text address Hi into E
  30+ B5B9 23           	inc			hl
  31+ B5BA E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ B5BB EB           	ex			de,hl		; now hl = address of text data
  33+ B5BC 1E FF        	ld			e,txt_status_colour
  34+ B5BE                  MMUSelectLayer2
  34+ B5BE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ B5C2 CD C8 E0     	call		l1_print_at
  36+ B5C5 E1           	pop			hl
  37+ B5C6 C1           	pop			bc
  38+ B5C7 10 E8        	djnz		BoilerTextLoop
  39+ B5C9 C9           	ret
  40+ B5CA
  41+ B5CA
  42+ B5CA              print_boiler_text:
  43+ B5CA              ; ">print_boilder_text hl = text structure, b = message count"
  44+ B5CA              .BoilerTextLoop:
  45+ B5CA C5           	push		bc			; Save Message Count loop value
  46+ B5CB 4E           	ld			c,(hl)		; Get Row into b
  47+ B5CC 23           	inc			hl
  48+ B5CD 46           	ld			b,(hl)		; Get Col into b
  49+ B5CE 23           	inc			hl
  50+ B5CF 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ B5D0 23           	inc			hl
  52+ B5D1 56           	ld			d,(hl)		; Get text address Hi into E
  53+ B5D2 23           	inc			hl
  54+ B5D3 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ B5D4 EB           	ex			de,hl		; now hl = address of text data
  56+ B5D5 1E FF        	ld			e,txt_status_colour
  57+ B5D7 C5           	push		bc
  58+ B5D8 D1           	pop			de
  59+ B5D9 CD C8 E0     	call		l1_print_at
  60+ B5DC E1           	pop			hl
  61+ B5DD C1           	pop			bc
  62+ B5DE 10 EA        	djnz		.BoilerTextLoop
  63+ B5E0 C9           	ret
  64+ B5E1
  65+ B5E1              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++B5E1
   2++B5E1
   3++B5E1 3A 1B 9C     	ld		a,(Fuel)
   4++B5E4 11 8F B5     	ld		de,txt_fuel_level
   5++B5E7 0E 9C        	ld	c, -100
   6++B5E9 CD F3 B5     	call	.Num1
   7++B5EC 0E F6        	ld	c,-10
   8++B5EE CD F3 B5     	call	.Num1
   9++B5F1 0E FF        	ld	c,-1
  10++B5F3              .Num1:
  11++B5F3 06 2F        	ld	b,'0'-1
  12++B5F5              .Num2:
  13++B5F5 04           	inc		b
  14++B5F6 81           	add		a,c
  15++B5F7 38 FC        	jr		c,.Num2
  16++B5F9 91           	sub 	c
  17++B5FA C5           	push	bc
  18++B5FB F5           	push	af
  19++B5FC 79           	ld		a,c
  20++B5FD FE FF        	cp		-1
  21++B5FF CC 08 B6     	call	z,.InsertDot
  22++B602 78           	ld		a,b
  23++B603 12           	ld		(de),a
  24++B604 13           	inc		de
  25++B605 F1           	pop		af
  26++B606 C1           	pop		bc
  27++B607 C9           	ret
  28++B608              .InsertDot:
  29++B608 3E 2E        	ld		a,'.'
  30++B60A 12           	ld		(de),a
  31++B60B 13           	inc		de
  32++B60C C9           	ret
  33++B60D
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ B60D
  67+ B60D 2A 17 9C     GetCash:                ld      hl,(Cash)
  68+ B610 EB                                   ex      de,hl
  69+ B611 DD 2A 19 9C                          ld      ix,(Cash+2)
  70+ B615 FD 21 A0 B5                          ld		iy,txt_cash_amount
  71+ B619 CD 88 AD                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ B61C FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ B61F 32 AC B5                             ld		(txt_cash_fraction),a
  74+ B622 21 A1 B5     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ B625 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ B626 FE 00                                cp		0
  77+ B628 C8                                   ret		z
  78+ B629 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ B62D C9                                   ret
  80+ B62E
# file closed: ./Menus/common_menu.asm
1099  B62E              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1100  B62E              ;INCLUDE "./title_page.asm"
1101  B62E
1102  B62E              ; Blocks dependent on variables in Universe Banks
1103  B62E              ; Bank 49
1104  B62E              ;    SEG RESETUNIVSEG
1105  B62E              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1106  B62E              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1107  B62E
1108  B62E              ;	ORG ResetUniverseAddr
1109  B62E              ;INCLUDE "./GameEngine/resetUniverse.asm"
1110  B62E              ; Bank 50
1111  B62E
1112  B62E
1113  B62E
1114  B62E                  SLOT    MenuShrChtAddr
1115  B62E                  PAGE    BankMenuShrCht
1116  B62E              	ORG     MenuShrChtAddr,BankMenuShrCht
1117  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 19 A4  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B E2 98                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F2 E0                             call	sprite_local_cursor
  39+ C0EB 3A 1B 9C                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 56 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B E4 98                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B E2 98                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FA E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A CF 98     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B E4 98                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 DF A4                             ld		hl,name_expanded
  65+ C127 CD 3A A4                             call	CapitaliseString
  66+ C12A 21 DF A4                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B E4 98                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B E2 98                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD CD E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 60 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A CF 98     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B E4 98                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A CF 98     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B E2 98                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B E4 98                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 75 98                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 88 AD                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD AC AB                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD AC AB                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD AC AB                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD E1 9C     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A CF 98                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 DF A4                             ld		hl,name_expanded
 258+ C2C2 CD 3A A4                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 DF A4                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 DF A4                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 A9 97                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD E1 9C     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A CF 98     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 DF A4     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 3A A4                             call	CapitaliseString
 333+ C34C 21 DF A4     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 E8 97                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 9F 93                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A CF 98                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 CF 97                             ld      de,SystemSeed
 359+ C388 CD B4 9C                             call    copy_seed
 360+ C38B 3A D0 97                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A E3 98     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A D2 97     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A E2 98                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A D0 97     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 E3 98                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A D2 97                             ld		a,(SystemSeed+3)
 390+ C3C5 21 E2 98                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A D4 97                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 0F E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A E8 97                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 E8 97                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 80 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 9B E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 34 E4     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 EF 97                             ld      (MenuIdMax),a
 420+ C41E 2A E2 98                             ld		hl,(PresentSystemX)
 421+ C421 22 E4 98                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 60 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD 5A A4                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD AE 9C     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A ED 97     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A E5 98     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                        cp     1
 460+ C47E CA DA C4    >                        jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 E5 98                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A E5 98     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                        cp     255
 467+ C48E CA DA C4    >                        jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 E5 98                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A E4 98     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                        cp     2
 474+ C49E CA DA C4    >                        jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 E4 98                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A E4 98     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                        cp     253
 481+ C4AE CA DA C4    >                        jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 E4 98                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A E2 98     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 E4 98                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 DD 01        src_RecenterPressed:    break
 493+ C4C5 3A CF 98                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 494+ C4C8                                      MMUSelectGalaxyA
 494+ C4C8 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 495+ C4CB ED 4B E4 98                          ld      bc,(TargetPlanetX)
 496+ C4CF CD 60 FB                             call    find_nearest_to_bc
 497+ C4D2 ED 43 E4 98                          ld      (TargetPlanetX),bc
 498+ C4D6 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 499+ C4D9 C9                                   ret
 500+ C4DA              ;----------------------------------------------------------------------------------------------------------------------------------
 501+ C4DA AF           src_BoundsLimit:        xor     a
 502+ C4DB C9                                   ret
 503+ C4DC
# file closed: ./Menus/short_range_chart_menu.asm
1118  C4DC              ; Bank 51
1119  C4DC
1120  C4DC                  SLOT    MenuGalChtAddr
1121  C4DC                  PAGE    BankMenuGalCht
1122  C4DC              	ORG     MenuGalChtAddr
1123  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 19 A4  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B E2 98  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 8C E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A 1B 9C     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 56 E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B E4 98  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 98 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 E8 97     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A CF 98         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 CF 97         ld      de,SystemSeed
  66+ C0F0 CD B4 9C     	call    copy_seed
  67+ C0F3 3A D2 97     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A D0 97     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A D3 97     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A E8 97     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 E8 97     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 80 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 9B E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 34 E4     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 EF 97         ld      (MenuIdMax),a
 106+ C168 2A E2 98         ld      hl,(PresentSystemX)
 107+ C16B 22 E4 98         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 60 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD 5A A4     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A CF 98         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B E4 98      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD C8 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 95 95         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 92 95         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD C8 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD 25 95                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD A8 95                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD BC 95     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 94 95                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 93 95     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 93 95                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A CF 98                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 73 95                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 E4 98                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD C8 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD C8 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A ED 97                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A E5 98     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                        cp     1
 297+ C32F CA 89 C3    >                        jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 E5 98                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A E5 98     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                        cp     255
 304+ C33F CA 89 C3    >                        jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 E5 98                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A E4 98     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                        cp     2
 311+ C34F CA 89 C3    >                        jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 E4 98                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A E4 98     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                        cp     253
 318+ C35F CA 89 C3    >                        jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 E4 98                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A E2 98     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 E4 98                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A CF 98     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B E4 98                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 E4 98                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B E4 98  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD A4 E0                             call	sprite_ghc_move
 345+ C398 3A CF 98                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B E4 98                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 DF A4                             ld		hl,name_expanded
 356+ C3B5 CD 3A A4                             call	CapitaliseString
 357+ C3B8 21 DF A4                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 60 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A CF 98     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B E2 98                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B E4 98                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 75 98                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 88 AD                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD AC AB                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD AC AB                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD AC AB                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 E8 97                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A CF 98     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A E2 98                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 D6 98                             ld      de,PresentSystemSeeds
 442+ C479 CD B4 9C                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A E8 97                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 E8 97                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
1124  C495              ; Bank 52
1125  C495
1126  C495                  SLOT    MenuInventAddr
1127  C495                  PAGE    BankMenuInvent
1128  C495              	ORG     MenuInventAddr
1129  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 1B 9C     	ld		a,(Fuel)
   4++C136 11 8F B5     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 22 9C                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD 92 9F                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 BD A2                             ld		hl, WordIdx
 118+ C17A CD 92 9F                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD 92 9F                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 BD A2                             ld		hl,WordIdx
 148+ C1C1 CD 92 9F                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 19 9C     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 17 9C                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 80 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 9B E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 34 E4     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 EF 97                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 34 E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 60 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 8F B5                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1130  C281
1131  C281              ; Bank 53
1132  C281
1133  C281                  SLOT    MenuSystemAddr
1134  C281                  PAGE    BankMenuSystem
1135  C281              	ORG     MenuSystemAddr
1136  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 19 A4  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 DF A4  						DW $0280,name_expanded
   5+ C018 08 0B 49 A1  						DW $0B08,WordDistance
   6+ C01C 08 13 52 A1  						DW $1308,WordEconomy
   7+ C020 08 1B 5A A1  						DW $1B08,WordGovernment
   8+ C024 08 23 65 A1  						DW $2308,WordTechLevel
   9+ C028 08 2B 6F A1  						DW $2B08,WordPopulation
  10+ C02C 08 3B 8A A1  						DW $3B08,WordGross
  11+ C030 38 3B 90 A1  						DW $3B38,WordProductivity
  12+ C034 08 43 9D A1  						DW $4308,WordAverage
  13+ C038 48 43 A5 A1  						DW $4348,WordRadius
  14+ C03C 60 0B 19 A4  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 19 A4  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A CF 98     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B E2 98                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 80 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 9B E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 34 E4     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 EF 97                             ld		(MenuIdMax),a
 134+ C316 3A CF 98     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B E4 98  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B E2 98  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B E4 98  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A E2 98                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 D0 98     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 60 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 5A A4                             call	expandTokenToString
 170+ C37B 3A CF 98     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 DF A4                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 DF A4                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 75 98  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 79 AD                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 5A A4                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 5A A4                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 4C A4                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 79 AD                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A CF 98     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 88 AD                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A CF 98     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 88 AD                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A CF 98     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1137  C4F7
1138  C4F7              ; Bank 54
1139  C4F7
1140  C4F7                  SLOT    MenuMarketAddr
1141  C4F7                  PAGE    BankMenuMarket
1142  C4F7                  ORG     MenuMarketAddr
1143  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 19 A4  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 DF A4  						DW $0220,name_expanded
   4+ C018 80 0B 39 A0  						DW $0B80,WordUnit
   5+ C01C B0 0B 82 A2  						DW $0BB0,WordQuantity
   6+ C020 08 13 60 A2  						DW $1308,WordProduct
   7+ C024 60 13 68 A2  						DW $1360,WordUoM
   8+ C028 80 13 6C A2  						DW $1380,WordPrice
   9+ C02C B0 13 90 A2  						DW $13B0,WordStock
  10+ C030 E0 13 8C A2  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 19 9C     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 17 9C                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 21 9C                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 22 9C                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 BD A2                             ld		hl,WordIdx
 273+ C2C5 CD 92 9F                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 BD A2                             ld		hl,WordIdx
 281+ C2DF CD 92 9F                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 80 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 9B E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 34 E4     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 EF 97                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 60 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 60 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 60 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 60 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 60 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 60 E2                             call	l2_draw_horz_line
 340+ C3AA 3A CF 98     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 5A A4                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 25 95                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 25 95                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 25 95                             call    is_key_pressed
 384+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 25 95                             call    is_key_pressed
 387+ C417 CC 80 C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 401+ C42F FE 10                                cp      16
 402+ C431 C8                                   ret     z
 403+ C432 CD C3 C0                             call    mkt_lowlight_row
 404+ C435 21 74 C0                             ld      hl,mkt_selected_row
 405+ C438 34                                   inc     (hl)
 406+ C439 CD B3 C0                             call    mkt_highlight_row
 407+ C43C C9                                   ret
 408+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 409+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 410+ C440 21 22 9C                             ld      hl,CargoTonnes
 411+ C443 ED 31                                add     hl,a
 412+ C445 7E                                   ld      a,(hl)
 413+ C446 FE 00                                cp      0
 414+ C448 C8                                   ret     z
 415+ C449 35                                   dec     (hl)
 416+ C44A DD 21 00 E0                          ld      ix,StockFood
 417+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 418+ C451 16 08                                ld      d,8
 419+ C453 5F                                   ld      e,a
 420+ C454 ED 30                                mul
 421+ C456 DD 19                                add     ix,de
 422+ C458                                      MMUSelectStockTable
 422+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 423+ C45C DD 34 01                             inc     (ix+1)
 424+ C45F DD 7E 07                             ld      a,(ix+7)
 425+ C462 FE 30                                cp      48
 426+ C464 20 04                                jr      nz,.UnderATonne
 427+ C466 21 21 9C                             ld      hl,CargoRunningLoad
 428+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 429+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 430+ C46D 16 00                                ld      d,0
 431+ C46F 5F                                   ld      e,a
 432+ C470 CD 1E A6                             call    addDEtoCash
 433+ C473                                      ; DO ADD CASH
 434+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 435+ C476 CD 8B C2                             call    PrintMarketItem
 436+ C479 CD 69 C2                             call    MKT_DisplayCargo
 437+ C47C CD 7A C2                             call    MKT_DisplayCash
 438+ C47F C9                                   ret
 439+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 440+ C480              mkt_RightPressed:       MMUSelectStockTable
 440+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 441+ C484 DD 21 00 E0                          ld      ix,StockFood
 442+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 443+ C48B 16 08                                ld      d,8
 444+ C48D 5F                                   ld      e,a
 445+ C48E ED 30                                mul
 446+ C490 DD 19                                add     ix,de
 447+ C492 4F                                   ld      c,a
 448+ C493 DD 7E 01                             ld      a,(ix+1)
 449+ C496 FE 00                                cp      0
 450+ C498 C8                                   ret     z
 451+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 452+ C49C FE 30                                cp      48
 453+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 454+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 455+ C4A3 21 22 9C                             ld      hl,CargoTonnes
 456+ C4A6 ED 31                                add     hl,a
 457+ C4A8 7E                                   ld      a,(hl)
 458+ C4A9 FE C8                                cp      200
 459+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 460+ C4AC C3 B5 C4                             jp      .CheckCash
 461+ C4AF 2A 20 9C     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 462+ C4B2 7C                                   ld      a,h
 463+ C4B3 BD                                   cp      l
 464+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 465+ C4B5 2A 19 9C     .CheckCash:             ld      hl,(Cash+2)
 466+ C4B8 7C                                   ld      a,h
 467+ C4B9 B5                                   or      l
 468+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 469+ C4BC 2A 17 9C                             ld      hl,(Cash)
 470+ C4BF 7C                                   ld      a,h
 471+ C4C0 FE 00                                cp      0
 472+ C4C2 20 07                                jr      nz,.MoreThanRequired
 473+ C4C4 DD 7E 02                             ld      a,(ix+2)
 474+ C4C7 BD                                   cp      l
 475+ C4C8 30 01                                jr      nc,.MoreThanRequired
 476+ C4CA C9                                   ret                         ; Insufficient Funds
 477+ C4CB 19           .MoreThanRequired:      add     hl,de
 478+ C4CC 7C                                   ld      a,h
 479+ C4CD B3                                   or      e
 480+ C4CE                                      ; check cash can we buy, and cargo capacity
 481+ C4CE DD 35 01                             dec     (ix+1)
 482+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 483+ C4D4 21 22 9C                             ld      hl,CargoTonnes
 484+ C4D7 ED 31                                add     hl,a
 485+ C4D9 34                                   inc     (hl)
 486+ C4DA DD 7E 07                             ld      a,(ix+7)
 487+ C4DD 47                                   ld      b,a
 488+ C4DE FE 30                                cp      48
 489+ C4E0 20 05                                jr      nz,.UnderOneTonne
 490+ C4E2 78                                   ld      a,b
 491+ C4E3 21 21 9C                             ld      hl,CargoRunningLoad
 492+ C4E6 34                                   inc     (hl)
 493+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 494+ C4EA 16 00                                ld      d,0
 495+ C4EC 5F                                   ld      e,a
 496+ C4ED CD 31 A6                             call    subDEfromCash
 497+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 498+ C4F3 CD 8B C2                             call    PrintMarketItem
 499+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 500+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 501+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1144  C4FD
1145  C4FD              ; Bank 66
1146  C4FD
1147  C4FD                  SLOT    DispMarketAddr
1148  C4FD                  PAGE    BankDispMarket
1149  C4FD                  ORG     DispMarketAddr
1150  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 19 A4  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 DF A4  						DW $0220,name_expanded
   4+ C018 80 0B 39 A0  						DW $0B80,WordUnit
   5+ C01C B0 0B 82 A2  						DW $0BB0,WordQuantity
   6+ C020 08 13 60 A2  						DW $1308,WordProduct
   7+ C024 60 13 68 A2  						DW $1360,WordUoM
   8+ C028 80 13 6C A2  						DW $1380,WordPrice
   9+ C02C B0 13 90 A2  						DW $13B0,WordStock
  10+ C030 E0 13 8C A2  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 19 9C     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 17 9C                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 21 9C                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 22 9C                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 BD A2                             ld		hl,WordIdx
 256+ C2A5 CD 92 9F                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 BD A2                             ld		hl,WordIdx
 264+ C2BF CD 92 9F                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 80 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 9B E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 34 E4     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 EF 97                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 60 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 60 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 60 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 60 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 60 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 60 E2                             call	l2_draw_horz_line
 323+ C38A 3A CF 98     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 5A A4                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1151  C3D3
1152  C3D3              ; Bank 55
1153  C3D3
1154  C3D3                  SLOT    StockTableAddr
1155  C3D3                  PAGE    BankStockTable
1156  C3D3                  ORG     StockTableAddr
1157  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD AE 9C                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 62 98                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 6E 98                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 62 98                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 6E 98                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1158  E113
1159  E113              ; Bank 57
1160  E113
1161  E113                  SLOT    LAYER2Addr
1162  E113                  PAGE    BankLAYER2
1163  E113                  ORG     LAYER2Addr
1164  E000
1165  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1166  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
1167  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
1168  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1169  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1170  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
1171  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 60 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 60 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 60 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B1 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B1 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1172  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E23E 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E23F 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E241 ED 53 31 E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E245                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E245                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E245                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E245 ED 43 36 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E249 21 2A E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E24C 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E24E 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E250 ED B3                                otir                                                      ;
  30+ E252 C9                                   ret
  31+ E253
  32+ E253              ; "bc = left side row,col, d = length, e = color"
  33+ E253 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E254 C5                                   push 	bc							; save row col
  35+ E255 78                                   ld   	a,b
  36+ E256 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E259 C1                                   pop  	bc
  38+ E25A 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25B D1                                   pop  	de							; get length back
  40+ E25C CD 3A E2                             call    l2_draw_horz_dma
  41+ E25F C9                                   ret
  42+ E260
  43+ E260              ; "l2_draw_horz_line"
  44+ E260              ; "bc = left side row,col, d = length, e = color"
  45+ E260              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E260 7A           l2_draw_horz_line:      ld		a,d
  47+ E261 FE 00                                cp 		0							; if its zero length then just return
  48+ E263 C8           .zerolengthexit:        ret		z
  49+ E264 FE 01        .isitlen1:              cp 		1
  50+ E266 CA 88 E2                             jp 		z,.l2_draw_horz_line_1
  51+ E269 FE 0A        .longenoughtfordma:     cp  10
  52+ E26B C3 53 E2                             jp  l2_draw_horz_dma_bank
  53+ E26E D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E270 78                                   ld   	a,b
  55+ E271 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E274 C1                                   pop  	bc
  57+ E275 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E276 69                                   ld   	l,c
  59+ E277 D1                                   pop  	de							; get length back
  60+ E278 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E279 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27A 82                                   add  	a,d
  63+ E27B 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27D 3E FF        .clipat255:             ld   	a,$FF
  65+ E27F 91                                   sub  	c							; a holds clipped length
  66+ E280 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E281 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E283 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E284 23                                   inc hl
  70+ E285 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E287 C9                                   ret
  72+ E288 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E289 C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28C
  75+ E28C              ; "l2_draw_horz_line_to"
  76+ E28C              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28C 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28D B9                                   cp 		c
  79+ E28E 30 04                                jr		nc, .noswap
  80+ E290 28 07                                jr      z, .singlepixel
  81+ E292 51           .swap:                  ld		d,c
  82+ E293 4F                                   ld		c,a
  83+ E294 7A           .noswap:                ld		a,d
  84+ E295 91                                   sub		c
  85+ E296              ;                        dec		a							; so now its length not offset
  86+ E296 57                                   ld		d,a
  87+ E297 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E299 7B           .singlepixel:           ld		a,e
  89+ E29A C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29D
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1173  E29D                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29D              ; ">l2_draw_vert_segment"
   2+ E29D              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29D              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29D 7A           l2_draw_vert_segment:   ld		a,d
   5+ E29E FE 00        .emptylinecheck:	    cp 		0
   6+ E2A0 C8                                   ret		z
   7+ E2A1 FE 01        .justonepixel	        cp		1
   8+ E2A3 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A5 73                                   ld		(hl),e
  10+ E2A6 C9                                   ret
  11+ E2A7              .multiplepixelsLoop:
  12+ E2A7 7C           .endofbankcheck:        ld   	a,h
  13+ E2A8 FE 40                                cp   	64
  14+ E2AA D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AB 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AC 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AD 15                                   dec		d
  18+ E2AE C8                                   ret		z
  19+ E2AF 18 F6                                jr		.multiplepixelsLoop
  20+ E2B1
  21+ E2B1              ; ">l2_draw_vert_line"
  22+ E2B1              ; ">bc = row col d = length, e = color"
  23+ E2B1 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B2 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B4 D0                                   ret 	nc							; can't start off the screen
  26+ E2B5 7A           .emptylinecheck:        ld		a,d
  27+ E2B6 FE 00                                cp		0
  28+ E2B8 C8                                   ret		z
  29+ E2B9 FE 01                                cp		1
  30+ E2BB 20 04                                jr		nz,.multiplepixels
  31+ E2BD CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C0 C9                                   ret
  33+ E2C1              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C1 7A           .clipto192:             ld		a,d							; get length
  35+ E2C2 80                                   add		a,b							; a= row + length
  36+ E2C3 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C5 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C7 38 08                                jr		c, .noclipneeded
  39+ E2C9 78           .needtoclip             ld		a,b
  40+ E2CA 82                                   add		a,d
  41+ E2CB D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CD 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2CE 7A                                   ld		a,d
  44+ E2CF 94                                   sub		h
  45+ E2D0 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D1              ; so now BC = row col, d = length clipped, e = color
  47+ E2D1 78           .noclipneeded:          ld		a,b
  48+ E2D2 C5 D5                                push	bc,,de
  49+ E2D4 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D7               	 	; we now have poke address and a variable holding current bank number
  50+ E2D7 D1 C1                                pop		bc,,de
  51+ E2D9 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DA 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DB CD 9D E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2DE 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2DF FE 00                                cp		0
  56+ E2E1 28 27                                jr		z, .doneplotting
  57+ E2E3 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E6 3C                                   inc		a
  59+ E2E7 06 00                                ld		b,0
  60+ E2E9 C5 D5                                push	bc,,de
  61+ E2EB CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2EE D1 C1                                pop     bc,,de
  63+ E2F0 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F1 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F2 CD 9D E2                             call	l2_draw_vert_segment
  66+ E2F5 7A                                   ld		a,d
  67+ E2F6 FE 00                                cp		0
  68+ E2F8 28 10                                jr		z,.doneplotting
  69+ E2FA 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FD 3C                                   inc		a
  71+ E2FE 06 00                                ld		b,0
  72+ E300 C5 D5                                push	bc,,de
  73+ E302 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E305 D1                                   pop		de
  75+ E306 E1                                   pop		hl							; hl = bc
  76+ E307 CD 9D E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30A C9           .doneplotting:	        ret
  78+ E30B
  79+ E30B              ; ">l2_draw_vert_line_to"
  80+ E30B              ; ">bc = row col d = to position, e = color"
  81+ E30B 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30C BA                                   cp		d
  83+ E30D 38 02                                jr		c, .noyswap
  84+ E30F 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E310 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E311 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E312 90                                   sub		b
  88+ E313 3C                                   inc		a			; so now its length not offset
  89+ E314 57                                   ld		d,a
  90+ E315 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E317                                      ; no return needed
  92+ E317
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1174  E317                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E317
   2+ E317              l2_draw_box_to:
   3+ E317              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E317              ; ">NOT IMPLEMENTED YET"
   5+ E317 C9           	ret
   6+ E318
   7+ E318              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E318              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E318              l2decbstep	EQU $05
  10+ E318              l2incbstep	EQU	$04
  11+ E318              l2deccstep	EQU $0D
  12+ E318              l2inccstep	EQU	$0C
  13+ E318              		; l2 deltas are signed
  14+ E318 00 00        l2deltaY	DW	0
  15+ E31A 00 00        l2deltaX	DW	0
  16+ E31C 00           l2deltaYsq	db	0
  17+ E31D 00           l2deltaXsq	db	0
  18+ E31E 00           l2deltaYn	db	0
  19+ E31F 00           l2deltaXn	db	0
  20+ E320 00           l2deltaYsqn	db	0
  21+ E321 00           l2deltaXsqn	db	0
  22+ E322 00           l2linecolor	db	0
  23+ E323 00 00        l2fraction	dw	0
  24+ E325 00 00        l2e2		dw	0
  25+ E327 00           l2way		db	0
  26+ E328 00 00        l2targetPtr	dw	0
  27+ E32A              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32A 00 00 00...  l2targetArray1 ds	256
  29+ E42A 00 00 00...  l2targetArray2 ds	256
  30+ E52A              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52A              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52A              ;;    dx =  abs(x1-x0);
  33+ E52A              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52A              ;;    dy = -abs(y1-y0);
  35+ E52A              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52A              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52A              ;;    while (true)   /* loop */
  38+ E52A              ;;        plot(x0, y0);
  39+ E52A              ;;        if (x0==x1 && y0==y1) break;
  40+ E52A              ;;        e2 = 2*err;
  41+ E52A              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52A              ;;            err += dy;
  43+ E52A              ;;            x0 += sx;
  44+ E52A              ;;        end if
  45+ E52A              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52A              ;;            err += dx;
  47+ E52A              ;;            y0 += sy;
  48+ E52A              ;;        end if
  49+ E52A              ;;    end while
  50+ E52A              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52A              ; ">hl will be either l2targetArray1 or 2"
  52+ E52A              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52A FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52C 28 06                                jr		z,l2S_ItsArray1
  55+ E52E 21 2A E4                             ld		hl,l2targetArray2
  56+ E531 C3 37 E5                             jp		l2S_setTarget
  57+ E534 21 2A E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E537 22 28 E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53A              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53A 32 22 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53D 21 00 00                             ld		hl,0                            ;
  62+ E540 22 1A E3                             ld		(l2deltaX),hl                   ;
  63+ E543 22 18 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E546 78           l2S_preSort:            ld		a,b								;
  65+ E547                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E547 BA          >                        cp      d
  65+ E548 DA 50 E5    >                        jp		c, l2S_noYSort
  66+ E54B              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54B 60          >                        ld		h,b
  66+ E54C 69          >                        ld		l,c
  67+ E54D EB                                   ex		de,hl                           ;
  68+ E54E                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E54E 44          >                        ld		b,h
  68+ E54F 4D          >                        ld		c,l
  69+ E550 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E552 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E554 79           l2S_setXLen:            ld		a,c                             ;
  72+ E555                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E555 BB          >                        cp      e
  72+ E556 DA 62 E5    >                        jp		c, l2S_PosXLen
  73+ E559 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55A 93                                   sub     e                               ;
  75+ E55B 32 1A E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E55E 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E560 18 07                                jr		l2S_XINCDEC
  78+ E562 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E563 91                                   sub		c                               ;
  80+ E564 32 1A E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E567 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E569              l2S_XINCDEC:
  83+ E569 32 D5 E5     	ld		(l2S_adjustCol),a				;
  84+ E56C 32 05 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E56F              l2S_setYLen
  86+ E56F 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E570 90           	sub		b
  88+ E571 32 18 E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E574              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E574              ldS_FracDYltDX:								;
  91+ E574 2A 18 E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E577 ED 5B 1A E3  	ld		de,(l2deltaX)
  93+ E57B              	ClearCarryFlag
  93+ E57B B7          >                        or a
  94+ E57C ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E57E EB           	ex		de,hl
  96+ E57F FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E581 FD 6B        	ld		iyl,e
  98+ E583 F2 A8 E5     	jp		p,l2S_fracIsPositive
  99+ E586              l2S_fracIsNegative:
 100+ E586              	NegIY
 100+ E586 AF          >                    xor a
 100+ E587 FD 95       >                    sub iyl
 100+ E589 FD 6F       >                    ld iyl,a
 100+ E58B 9F          >                    sbc a,a
 100+ E58C FD 94       >                    sub iyh
 100+ E58E FD 67       >                    ld iyh,a
 101+ E590              	ShiftIYRight1
 101+ E590 FD 7C       >			   ld 	a,iyh
 101+ E592 CB 3F       >			   srl 	a
 101+ E594 FD 67       >			   ld	iyh,a
 101+ E596 FD 7D       >			   ld 	a,iyl
 101+ E598 1F          >			   rra
 101+ E599 FD 6F       >			   ld	iyl,a
 102+ E59B              	NegIY
 102+ E59B AF          >                    xor a
 102+ E59C FD 95       >                    sub iyl
 102+ E59E FD 6F       >                    ld iyl,a
 102+ E5A0 9F          >                    sbc a,a
 102+ E5A1 FD 94       >                    sub iyh
 102+ E5A3 FD 67       >                    ld iyh,a
 103+ E5A5 C3 B3 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5A8              l2S_fracIsPositive:
 105+ E5A8              	ShiftIYRight1
 105+ E5A8 FD 7C       >			   ld 	a,iyh
 105+ E5AA CB 3F       >			   srl 	a
 105+ E5AC FD 67       >			   ld	iyh,a
 105+ E5AE FD 7D       >			   ld 	a,iyl
 105+ E5B0 1F          >			   rra
 105+ E5B1 FD 6F       >			   ld	iyl,a
 106+ E5B3              l2S_SkipCalcInc:
 107+ E5B3              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B3 2A 28 E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B6 78           	ld		a,b
 110+ E5B7 ED 31        	add		hl,a
 111+ E5B9 71           	ld		(hl),c
 112+ E5BA              l2S_CheckIfEnd:
 113+ E5BA DD 7C        	ld		a,ixh
 114+ E5BC              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BC B8          >                        cp     b
 114+ E5BD D2 C3 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C0 C3 C7 E5     	jp		l2S_Continue
 116+ E5C3              l2S_CheckXPos:
 117+ E5C3 79           	ld		a,c
 118+ E5C4              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C4 DD BD       >                        cp    ixl
 118+ E5C6 D0          >                        ret	 nc
 119+ E5C7              l2S_Continue:
 120+ E5C7              l2S_HNegative:
 121+ E5C7 FD 7C        	ld		a,iyh
 122+ E5C9 CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CB 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CD              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CD 3A 18 E3     	ld		a,(l2deltaY)
 126+ E5D0 16 00        	ld		d,0
 127+ E5D2 5F           	ld		e,a
 128+ E5D3 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D5              l2S_adjustCol:
 130+ E5D5 00           	nop										; this is our inc/dec of X
 131+ E5D6 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5D8              l2S_ErrNotNegative:
 133+ E5D8 FD 7C        	ld		a,iyh
 134+ E5DA FD B5        	or		iyl
 135+ E5DC              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DC A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DD CA F6 E5    >                        jp	z, l2S_ErrZero
 136+ E5E0              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E0              	lddeiy
 137+ E5E0 FD 54       >                        ld		d,iyh
 137+ E5E2 FD 5D       >                        ld		e,iyl
 138+ E5E4 EB           	ex		de,hl
 139+ E5E5 16 00        	ld		d,0
 140+ E5E7 3A 1A E3     	ld		a,(l2deltaX)
 141+ E5EA 5F           	ld		e,a
 142+ E5EB              	ClearCarryFlag
 142+ E5EB B7          >                        or a
 143+ E5EC ED 52        	sbc		hl,de
 144+ E5EE EB           	ex		de,hl
 145+ E5EF              	ldiyde
 145+ E5EF FD 62       >                        ld		iyh,d
 145+ E5F1 FD 6B       >                        ld		iyl,e
 146+ E5F3              l2S_adjustRow:									; move Y down by one
 147+ E5F3 04           	inc		b
 148+ E5F4 18 BD        	jr		l2S_Loop
 149+ E5F6              l2S_ErrZero:
 150+ E5F6 2A 1A E3     	ld		hl,(l2deltaX)
 151+ E5F9 EB           	ex		de,hl
 152+ E5FA 2A 18 E3     	ld		hl,(l2deltaY)
 153+ E5FD              	ClearCarryFlag
 153+ E5FD B7          >                        or a
 154+ E5FE ED 52        	sbc		hl,de
 155+ E600 EB           	ex		de,hl
 156+ E601              	ldiyde
 156+ E601 FD 62       >                        ld		iyh,d
 156+ E603 FD 6B       >                        ld		iyl,e
 157+ E605              l2S_adjustCol2:
 158+ E605 00           	nop										; update X and Y
 159+ E606 04           	inc		b
 160+ E607 18 AA        	jr		l2S_Loop
 161+ E609
 162+ E609              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E609 32 22 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60C 21 00 00                             ld		hl,0                            ;
 165+ E60F 22 1A E3                             ld		(l2deltaX),hl                   ;
 166+ E612 22 18 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E615 78           l2D_preSort:            ld		a,b								;
 168+ E616                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E616 BA          >                        cp      d
 168+ E617 DA 1F E6    >                        jp		c, l2D_noYSort
 169+ E61A              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61A 60          >                        ld		h,b
 169+ E61B 69          >                        ld		l,c
 170+ E61C EB                                   ex		de,hl                           ;
 171+ E61D                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61D 44          >                        ld		b,h
 171+ E61E 4D          >                        ld		c,l
 172+ E61F DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E621 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E623 79           l2D_setXLen:            ld		a,c                             ;
 175+ E624                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E624 BB          >                        cp      e
 175+ E625 DA 31 E6    >                        jp		c, l2D_PosXLen
 176+ E628 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E629 93                                   sub     e                               ;
 178+ E62A 32 1A E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62D 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E62F 18 07                                jr		l2D_XINCDEC
 181+ E631 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E632 91                                   sub		c                               ;
 183+ E633 32 1A E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E636 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E638 32 A7 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63B 32 D7 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E63E 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E63F 90                                   sub		b
 189+ E640 32 18 E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E643              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E643 2A 18 E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E646 ED 5B 1A E3                          ld		de,(l2deltaX)
 193+ E64A                                      ClearCarryFlag
 193+ E64A B7          >                        or a
 194+ E64B ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64D EB                                   ex		de,hl
 196+ E64E FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E650 FD 6B                                ld		iyl,e
 198+ E652 F2 77 E6                             jp		p,l2D_fracIsPositive
 199+ E655              l2D_fracIsNegative:     NegIY
 199+ E655 AF          >                    xor a
 199+ E656 FD 95       >                    sub iyl
 199+ E658 FD 6F       >                    ld iyl,a
 199+ E65A 9F          >                    sbc a,a
 199+ E65B FD 94       >                    sub iyh
 199+ E65D FD 67       >                    ld iyh,a
 200+ E65F                                      ShiftIYRight1
 200+ E65F FD 7C       >			   ld 	a,iyh
 200+ E661 CB 3F       >			   srl 	a
 200+ E663 FD 67       >			   ld	iyh,a
 200+ E665 FD 7D       >			   ld 	a,iyl
 200+ E667 1F          >			   rra
 200+ E668 FD 6F       >			   ld	iyl,a
 201+ E66A                                      NegIY
 201+ E66A AF          >                    xor a
 201+ E66B FD 95       >                    sub iyl
 201+ E66D FD 6F       >                    ld iyl,a
 201+ E66F 9F          >                    sbc a,a
 201+ E670 FD 94       >                    sub iyh
 201+ E672 FD 67       >                    ld iyh,a
 202+ E674 C3 82 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E677              l2D_fracIsPositive:     ShiftIYRight1
 203+ E677 FD 7C       >			   ld 	a,iyh
 203+ E679 CB 3F       >			   srl 	a
 203+ E67B FD 67       >			   ld	iyh,a
 203+ E67D FD 7D       >			   ld 	a,iyl
 203+ E67F 1F          >			   rra
 203+ E680 FD 6F       >			   ld	iyl,a
 204+ E682              l2D_SkipCalcInc:
 205+ E682 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E684 3A 22 E3                             ld		a,(l2linecolor)     			;
 207+ E687 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68A D1 C1                                pop     bc,,de
 209+ E68C DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E68E                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E68E B8          >                        cp     b
 210+ E68F D2 95 E6    >                        jp		nc,l2D_CheckXPos
 211+ E692 C3 99 E6                             jp		l2D_Continue
 212+ E695 79           l2D_CheckXPos:          ld		a,c
 213+ E696                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E696 DD BD       >                        cp      ixl
 213+ E698 C8          >                        ret     z
 214+ E699              l2D_Continue:
 215+ E699 FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69B CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69D 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E69F 3A 18 E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A2 16 00                                ld		d,0
 220+ E6A4 5F                                   ld		e,a
 221+ E6A5 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A7 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6A8 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AA FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AC FD B5                                or		iyl
 226+ E6AE                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6AE A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6AF CA C8 E6    >                        jp	z, l2D_ErrZero
 227+ E6B2              l2D_ErrPositive:		lddeiy
 227+ E6B2 FD 54       >                        ld		d,iyh
 227+ E6B4 FD 5D       >                        ld		e,iyl
 228+ E6B6 EB                                   ex		de,hl
 229+ E6B7 16 00                                ld		d,0
 230+ E6B9 3A 1A E3                             ld		a,(l2deltaX)
 231+ E6BC 5F                                   ld		e,a
 232+ E6BD                                      ClearCarryFlag
 232+ E6BD B7          >                        or a
 233+ E6BE ED 52                                sbc		hl,de
 234+ E6C0 EB                                   ex		de,hl
 235+ E6C1                                      ldiyde
 235+ E6C1 FD 62       >                        ld		iyh,d
 235+ E6C3 FD 6B       >                        ld		iyl,e
 236+ E6C5 04           l2D_adjustRow:			inc		b
 237+ E6C6 18 BA                                jr		l2D_Loop
 238+ E6C8 2A 1A E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CB EB                                   ex		de,hl
 240+ E6CC 2A 18 E3                             ld		hl,(l2deltaY)
 241+ E6CF                                      ClearCarryFlag
 241+ E6CF B7          >                        or a
 242+ E6D0 ED 52                                sbc		hl,de
 243+ E6D2 EB                                   ex		de,hl
 244+ E6D3                                      ldiyde
 244+ E6D3 FD 62       >                        ld		iyh,d
 244+ E6D5 FD 6B       >                        ld		iyl,e
 245+ E6D7 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6D8 04                                   inc		b
 247+ E6D9 18 A7                                jr		l2D_Loop
 248+ E6DB              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DB
 250+ E6DB
 251+ E6DB
 252+ E6DB
 253+ E6DB              ;Loin:				; BBC version of line draw
 254+ E6DB              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DB              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DB              ;	ld		ixh,0							; ixh = s
 257+ E6DB              ;	ld		iyh,0							; iyh = swap
 258+ E6DB              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DB              ;LoinCalcDeltaX:
 260+ E6DB              ;	ld		a,e
 261+ E6DB              ;	sub		c								; a = deltaX
 262+ E6DB              ;	JumpIfPositive LoinPosDx
 263+ E6DB              ;LoinNegDx:
 264+ E6DB              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DB              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DB              ;LoinPosDx:
 267+ E6DB              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DB              ;LoinCalcDeltaY:
 269+ E6DB              ;	ld		a,d
 270+ E6DB              ;	sub		b								; a= deltaY
 271+ E6DB              ;	JumpIfPositive LoinPosDy
 272+ E6DB              ;LoinNegDy:
 273+ E6DB              ;	neg
 274+ E6DB              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DB              ;LoinPosDy:
 276+ E6DB              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DB              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DB              ;LoinSTPx:									; step along X
 279+ E6DB              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DB              ;LoinSTPxSwapCoords:
 281+ E6DB              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DB              ;	ld		a,l								; save l flags
 283+ E6DB              ;	ex		de,hl							; save de to hl
 284+ E6DB              ;	lddebc									; Point2 = point1
 285+ E6DB              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DB              ;	ld		l,a								; get back l flags
 287+ E6DB              ;LoinSTPxCorrectOrder:
 288+ E6DB              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DB              ;	ld		a,iyl							; get delta Y back
 290+ E6DB              ;	ld		iy1,$FE							; roll counter
 291+ E6DB              ;LionSTPxRollQ:
 292+ E6DB              ;	sla		a								; highest bit of delta-Y
 293+ E6DB              ;	jp		c,LoinSTPxSteep
 294+ E6DB              ;	cp		ixl								; compare with DeltaX
 295+ E6DB              ;	jp		cs,LoinSTPxShallow
 296+ E6DB              ;LoinSTPxSteep:								;; LI4
 297+ E6DB              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DB              ;	scf										; force carry flag set
 299+ E6DB              ;LoinSTPxShallow:							;; LI5
 300+ E6DB              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DB              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DB              ;	inc		ihl								; DeltaX += 1
 303+ E6DB              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DB              ;	ld		a,d
 305+ E6DB              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DB              ;	ld		a,iyh							; swap flag
 307+ E6DB              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DB              ;LoinSTPxX1Dec:
 309+ E6DB              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DB              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DB              ;	sub		b
 312+ E6DB              ;	if
 313+ E6DB              ;
 314+ E6DB              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DB              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DB              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DB              ;86 81                   STX &81		\ Q
 318+ E6DB              ;.LIL1	\ roll Q
 319+ E6DB              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DB              ;B0 04                   BCS LI4		\ steep
 321+ E6DB              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DB              ;90 03                   BCC LI5		\ shallow
 323+ E6DB              ;.LI4	\ steep
 324+ E6DB              ;E5 1B                   SBC &1B		\ P
 325+ E6DB              ;38                      SEC
 326+ E6DB              ;.LI5	\ shallow
 327+ E6DB              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DB              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DB              ;A6 1B                   LDX &1B		\ P
 330+ E6DB              ;E8                      INX 		\ Xreg is width
 331+ E6DB              ;A5 37                   LDA &37		\ Y2
 332+ E6DB              ;E5 35                   SBC &35		\ Y1
 333+ E6DB              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DB              ;A5 90                   LDA &90		\ SWAP
 335+ E6DB              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DB              ;CA                      DEX
 337+ E6DB              ;.LIL2	\ counter X width
 338+ E6DB              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DB              ;.LI6	\ Xreg correct
 342+ E6DB              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DB              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DB              ;66 82                   ROR &82		\ R
 345+ E6DB              ;A5 07                   LDA &07		\ SC
 346+ E6DB              ;69 08                   ADC #8		\ next column
 347+ E6DB              ;85 07                   STA &07		\ SC
 348+ E6DB              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DB              ;A5 83                   LDA &83		\ S
 350+ E6DB              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DB              ;85 83                   STA &83		\ S
 352+ E6DB              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DB              ;88                      DEY
 354+ E6DB              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DB              ;C6 08                   DEC &08		\ SC+1
 356+ E6DB              ;A0 07                   LDY #7
 357+ E6DB              ;.LIC2	\ skip Y adjustment
 358+ E6DB              ;CA                      DEX
 359+ E6DB              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DB              ;60                      RTS
 362+ E6DB              ;
 363+ E6DB              ;.DOWN	\ Line is going to the right and down
 364+ E6DB              ;A5 90                   LDA &90		\ SWAP
 365+ E6DB              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DB              ;CA                      DEX
 367+ E6DB              ;.LIL3	\ counter X width
 368+ E6DB              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DB              ;.LI9	\ no swap
 372+ E6DB              ;46 82                   LSR &82		\ R
 373+ E6DB              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DB              ;66 82                   ROR &82		\ R
 375+ E6DB              ;A5 07                   LDA &07		\ SC
 376+ E6DB              ;69 08                   ADC #8		\ next column
 377+ E6DB              ;85 07                   STA &07		\ SC
 378+ E6DB              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DB              ;A5 83                   LDA &83		\ S
 380+ E6DB              ;65 81                   ADC &81		\ Q
 381+ E6DB              ;85 83                   STA &83		\ S
 382+ E6DB              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DB              ;C8                      INY
 384+ E6DB              ;C0 08                   CPY #8
 385+ E6DB              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DB              ;E6 08                   INC &08		\ SC+1
 387+ E6DB              ;A0 00                   LDY #0
 388+ E6DB              ;.LIC3	\ skipped Y adjustment
 389+ E6DB              ;CA                      DEX
 390+ E6DB              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DB              ;60                      RTS
 393+ E6DB              ;
 394+ E6DB              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DB              ;A4 35                   LDY &35		\ Y1
 396+ E6DB              ;98                      TYA
 397+ E6DB              ;A6 34                   LDX &34		\ X1
 398+ E6DB              ;C4 37                   CPY &37		\ Y2
 399+ E6DB              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DB              ;C6 90                   DEC &90		\ SWAP
 401+ E6DB              ;A5 36                   LDA &36		\ X2
 402+ E6DB              ;85 34                   STA &34		\ X1
 403+ E6DB              ;86 36                   STX &36		\ X2
 404+ E6DB              ;AA                      TAX
 405+ E6DB              ;A5 37                   LDA &37		\ Y2
 406+ E6DB              ;85 35                   STA &35		\ Y1
 407+ E6DB              ;84 37                   STY &37		\ Y2
 408+ E6DB              ;A8                      TAY
 409+ E6DB              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DB              ;4A                      LSR A
 411+ E6DB              ;4A                      LSR A
 412+ E6DB              ;4A                      LSR A
 413+ E6DB              ;09 60                   ORA #&60
 414+ E6DB              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DB              ;8A                      TXA 		\ X1
 416+ E6DB              ;29 F8                   AND #&F8
 417+ E6DB              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DB              ;8A                      TXA
 419+ E6DB              ;29 07                   AND #7		\ mask index
 420+ E6DB              ;AA                      TAX
 421+ E6DB              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DB              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DB              ;A5 35                   LDA &35		\ Y1
 424+ E6DB              ;29 07                   AND #7
 425+ E6DB              ;A8                      TAY
 426+ E6DB              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DB              ;A2 01                   LDX #1		\ roll counter
 428+ E6DB              ;86 1B                   STX &1B	    	\ P
 429+ E6DB              ;.LIL4	\ roll P
 430+ E6DB              ;0A                      ASL A
 431+ E6DB              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DB              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DB              ;90 03                   BCC LI14	\ less than Q
 434+ E6DB              ;.LI13	\ do subtraction
 435+ E6DB              ;E5 81                   SBC &81		\ Q
 436+ E6DB              ;38                      SEC
 437+ E6DB              ;.LI14	\ less than Q
 438+ E6DB              ;26 1B                   ROL &1B		\ P
 439+ E6DB              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DB              ;A6 81                   LDX &81		\ Q
 441+ E6DB              ;E8                      INX 		\ adjust height
 442+ E6DB              ;A5 36                   LDA &36		\ X2
 443+ E6DB              ;E5 34                   SBC &34		\ X1
 444+ E6DB              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DB              ;18                      CLC
 446+ E6DB              ;A5 90                   LDA &90		\ SWAP
 447+ E6DB              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DB              ;CA                      DEX
 449+ E6DB              ;.LIL5	\ skipped first point, counter X
 450+ E6DB              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DB              ;.LI17	\ skipped first point
 454+ E6DB              ;88                      DEY
 455+ E6DB              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DB              ;C6 08                   DEC &08		\ SC+1
 457+ E6DB              ;A0 07                   LDY #7		\ new char
 458+ E6DB              ;	.LI16	\ skipped hi adjust
 459+ E6DB              ;A5 83                   LDA &83		\ S
 460+ E6DB              ;65 1B                   ADC &1B		\ P
 461+ E6DB              ;85 83                   STA &83		\ S
 462+ E6DB              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DB              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DB              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DB              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DB              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DB              ;69 08                   ADC #8		\ next char below
 468+ E6DB              ;85 07                   STA &07		\ SC
 469+ E6DB              ;.LIC5	\ same column
 470+ E6DB              ;CA                      DEX
 471+ E6DB              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DB              ;60                      RTS
 474+ E6DB              ;
 475+ E6DB              ;.LFT	\ going left
 476+ E6DB              ;A5 90                   LDA &90		\ SWAP
 477+ E6DB              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DB              ;CA                      DEX 		\ reduce height
 479+ E6DB              ;.LIL6	\ counter X height
 480+ E6DB              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DB              ;.LI18
 484+ E6DB              ;88                      DEY
 485+ E6DB              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DB              ;C6 08                   DEC &08		\ SC+1
 487+ E6DB              ;A0 07                   LDY #7		\ rest char row
 488+ E6DB              ;.LI19	\ skipped hi adjust
 489+ E6DB              ;A5 83                   LDA &83		\ S
 490+ E6DB              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DB              ;85 83                   STA &83		\ S
 492+ E6DB              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DB              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DB              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DB              ;26 82                   ROL &82		\ R
 496+ E6DB              ;A5 07                   LDA &07		\ SC
 497+ E6DB              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DB              ;85 07                   STA &07		\ SC
 499+ E6DB              ;18                      CLC
 500+ E6DB              ;.LIC6	\ no overflow
 501+ E6DB              ;CA                      DEX 		\ height
 502+ E6DB              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DB              ;.HL6
 505+ E6DB              ;60                      RTS 		\ end Line drawing
 506+ E6DB
 507+ E6DB
 508+ E6DB              ;;l2_draw_diagonalopt:
 509+ E6DB              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DB              ;;	push	af
 511+ E6DB              ;;	ld		a,b
 512+ E6DB              ;;	cp		d
 513+ E6DB              ;;	jr		z,.RegularDiagnonal
 514+ E6DB              ;;.CheckHorz:
 515+ E6DB              ;;	ld		a,c
 516+ E6DB              ;;	cp		e
 517+ E6DB              ;;	jr		z,.horizontalLine
 518+ E6DB              ;;.RegularDiagnonal:
 519+ E6DB              ;;	pop		af
 520+ E6DB              ;;	call diag
 521+ E6DB
 522+ E6DB
 523+ E6DB              ;;l2_signed_mul2a:
 524+ E6DB              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DB              ;;	TEST	$80
 526+ E6DB              ;;	jr		nz, .negativecalc
 527+ E6DB              ;;.positivecalc:
 528+ E6DB              ;;	ccf
 529+ E6DB              ;;	rla
 530+ E6DB              ;;	ret
 531+ E6DB              ;;.negativecalc:
 532+ E6DB              ;;	neg
 533+ E6DB              ;;	ccf
 534+ E6DB              ;;	rla
 535+ E6DB              ;;	neg
 536+ E6DB              ;;	ret
 537+ E6DB              ;;
 538+ E6DB              ;;l2_signed_mul2atohl:
 539+ E6DB              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DB              ;;	TEST	$80
 541+ E6DB              ;;	jr		nz, .negativecalc
 542+ E6DB              ;;.positivecalc:
 543+ E6DB              ;;	ld		hl,0
 544+ E6DB              ;;	ld		l,a
 545+ E6DB              ;;	add		hl,a
 546+ E6DB              ;;	ret
 547+ E6DB              ;;.negativecalc:
 548+ E6DB              ;;	neg
 549+ E6DB              ;;	ld		hl,0
 550+ E6DB              ;;	ld		l,a
 551+ E6DB              ;;	neghl
 552+ E6DB              ;;	ret
 553+ E6DB              ;;
 554+ E6DB              ;;l2_e2fractionby2:
 555+ E6DB              ;;	ld 		hl,(l2fraction)
 556+ E6DB              ;;	push	de
 557+ E6DB              ;;	ld		d,h
 558+ E6DB              ;;	ld		e,l
 559+ E6DB              ;;	add		hl,de
 560+ E6DB              ;;	pop		de
 561+ E6DB              ;;	ld		(l2e2),hl
 562+ E6DB              ;;	ret
 563+ E6DB
 564+ E6DB
 565+ E6DB
 566+ E6DB
 567+ E6DB
 568+ E6DB              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DB              ;;//.catchLoop:
 570+ E6DB              ;;//	jp .catchLoop
 571+ E6DB              ;;//.continue:
 572+ E6DB              ;;//    ld      A,D
 573+ E6DB              ;;//    sub     H
 574+ E6DB              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DB              ;;//.DXNegative:
 576+ E6DB              ;;//    neg
 577+ E6DB              ;;//.DXPositive:
 578+ E6DB              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DB              ;;//    ld      A,E
 580+ E6DB              ;;//    sub     L
 581+ E6DB              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DB              ;;//.DYNegative:
 583+ E6DB              ;;//    neg
 584+ E6DB              ;;//.DYPositive:
 585+ E6DB              ;;//    sub     B               ;|delta_y|
 586+ E6DB              ;;//	push	af
 587+ E6DB              ;;//	jr		c,.DeltaX
 588+ E6DB              ;;//.DeltaY
 589+ E6DB              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DB              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DB              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DB              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DB              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DB              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DB              ;;//.DeltaX:
 596+ E6DB              ;;//	ld		a,d
 597+ E6DB              ;;//	sub		h
 598+ E6DB              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DB              ;;//.TestDX:
 600+ E6DB              ;;//	ex		de,hl
 601+ E6DB              ;;//.TestDY:
 602+ E6DB              ;;//	ld		a,e
 603+ E6DB              ;;//	sub		l
 604+ E6DB              ;;//    ld      A,$01
 605+ E6DB              ;;//    jr      NC,.StoreA
 606+ E6DB              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DB              ;;//.StoreA:
 608+ E6DB              ;;//        ld      (l2way),A
 609+ E6DB              ;;//.InitLine:
 610+ E6DB              ;;//        ld      B,H
 611+ E6DB              ;;//        ld      C,L
 612+ E6DB              ;;//        ld      A,E
 613+ E6DB              ;;//        sub     L
 614+ E6DB              ;;//        jr      NC,.EndInit
 615+ E6DB              ;;//        ld      A,L
 616+ E6DB              ;;//        ld      L,E
 617+ E6DB              ;;//        ld      E,A
 618+ E6DB              ;;//.EndInit:
 619+ E6DB              ;;//        ld      A,E
 620+ E6DB              ;;//        sub     L
 621+ E6DB              ;;//        rla
 622+ E6DB              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DB              ;;//        add     A,H
 624+ E6DB              ;;//        sub     D
 625+ E6DB              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DB              ;;//        add     A,H
 627+ E6DB              ;;//        sub     D
 628+ E6DB              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DB              ;;//.Loop:
 630+ E6DB              ;;//        ld      A,B
 631+ E6DB              ;;//        sub     D
 632+ E6DB              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DB              ;;//        pop     AF
 634+ E6DB              ;;//        bit     7,A
 635+ E6DB              ;;//        push    AF
 636+ E6DB              ;;//        push    AF
 637+ E6DB              ;;//        push    BC
 638+ E6DB              ;;//        jr      Z,.DrawPoint
 639+ E6DB              ;;//        ld      A,B
 640+ E6DB              ;;//        ld      B,C
 641+ E6DB              ;;//        ld      C,A
 642+ E6DB              ;;//.DrawPoint:
 643+ E6DB              ;;//		push	hl
 644+ E6DB              ;;//		pushbcdeaf
 645+ E6DB              ;;//		ld		b,e
 646+ E6DB              ;;//		ld		c,d
 647+ E6DB              ;;//	ld 		a,(l2linecolor)
 648+ E6DB              ;;//	call	l2_plot_pixel
 649+ E6DB              ;;//		popafdebc
 650+ E6DB              ;;//		pop		hl
 651+ E6DB              ;;//        pop     BC
 652+ E6DB              ;;//        pop     AF
 653+ E6DB              ;;//.TestD:
 654+ E6DB              ;;//        bit     7,E
 655+ E6DB              ;;//        jr      NZ,.Case1
 656+ E6DB              ;;//.Case2:                          ;d >= 0
 657+ E6DB              ;;//        ld      A,E
 658+ E6DB              ;;//        add     A,H
 659+ E6DB              ;;//        ld      E,A
 660+ E6DB              ;;//        ld      A,(l2way)
 661+ E6DB              ;;//        add     A,C
 662+ E6DB              ;;//        ld      C,A
 663+ E6DB              ;;//        jr      .EndLoop
 664+ E6DB              ;;//.Case1:                          ;d < 0
 665+ E6DB              ;;//        ld      A,E
 666+ E6DB              ;;//        add     A,L
 667+ E6DB              ;;//        ld      E,A
 668+ E6DB              ;;//.EndLoop:
 669+ E6DB              ;;//        inc     B
 670+ E6DB              ;;//        jr      .Loop
 671+ E6DB              ;;//.EndLine:
 672+ E6DB              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DB              ;;//        pop     HL              ;can be removed
 674+ E6DB              ;;//        pop     DE              ;can be removed
 675+ E6DB              ;;//        ret
 676+ E6DB
 677+ E6DB              ;;	ld		(.l2yadjust),a
 678+ E6DB              ;;	call	calcdeltax:
 679+ E6DB              ;;	ld		(.l2xadjust),a
 680+ E6DB              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DB              ;;	push	hl
 682+ E6DB              ;;	push	de
 683+ E6DB              ;;	ld		hl,(l2deltaX)
 684+ E6DB              ;;	ld		de,(l2deltaY)
 685+ E6DB              ;;	add		hl,de
 686+ E6DB              ;;	ld		(l2fraction),hl
 687+ E6DB              ;;	pop		de
 688+ E6DB              ;;	pop		hl
 689+ E6DB              ;;.mainloop:
 690+ E6DB              ;;	push	bc
 691+ E6DB              ;;	push	de
 692+ E6DB              ;;	ld 		a,(l2linecolor)
 693+ E6DB              ;;	call	l2_plot_pixel
 694+ E6DB              ;;	pop		de
 695+ E6DB              ;;	pop		bc
 696+ E6DB              ;;.arewefinishedtest
 697+ E6DB              ;;	ld		a,b
 698+ E6DB              ;;	cp		d
 699+ E6DB              ;;	jr		nz,.notthereyet
 700+ E6DB              ;;	ld		a,c
 701+ E6DB              ;;	cp		e
 702+ E6DB              ;;	ret		z
 703+ E6DB              ;;.notthereyet:
 704+ E6DB              ;;	push	de
 705+ E6DB              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DB              ;;	pop		de
 707+ E6DB              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DB              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DB              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DB              ;;	or		a							;
 711+ E6DB              ;;	sbc		hl,de						;
 712+ E6DB              ;;	pop		de
 713+ E6DB              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DB              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DB              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DB              ;;.dodycalc:
 717+ E6DB              ;;	ld		hl,(l2fraction)
 718+ E6DB              ;;	push	de
 719+ E6DB              ;;	ld		de,(l2deltaY)
 720+ E6DB              ;;	add		hl,de
 721+ E6DB              ;;	ld		(l2fraction),de
 722+ E6DB              ;;	pop		de
 723+ E6DB              ;;.l2yadjust:
 724+ E6DB              ;;	nop
 725+ E6DB              ;;.skipdycalc:
 726+ E6DB              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DB              ;;	ld		hl,(l2e2)
 728+ E6DB              ;;	push	de							;
 729+ E6DB              ;;	ld		de,(l2deltaX)				;
 730+ E6DB              ;;	or		a							; clear carry flag
 731+ E6DB              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DB              ;;	pop		de
 733+ E6DB              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DB              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DB              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DB              ;;.dodxcalc:
 737+ E6DB              ;;	ld		hl,(l2fraction)
 738+ E6DB              ;;	push	de
 739+ E6DB              ;;	ld		de,(l2deltaX)
 740+ E6DB              ;;	add		hl,de
 741+ E6DB              ;;	ld		(l2fraction),de
 742+ E6DB              ;;	pop		de
 743+ E6DB              ;;.l2xadjust:
 744+ E6DB              ;;	nop
 745+ E6DB              ;;.skipdxcalc:
 746+ E6DB              ;;	jr 		.mainloop
 747+ E6DB
 748+ E6DB
 749+ E6DB              ;;/l2_draw_diagonalold:
 750+ E6DB              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DB              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DB              ;;/.sortycoords:
 753+ E6DB              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DB              ;;/	cp		d
 755+ E6DB              ;;/	jr		nc, .nocoordswap
 756+ E6DB              ;;/.swapcoords:
 757+ E6DB              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DB              ;;/	lddebc
 759+ E6DB              ;;/	ldbchl
 760+ E6DB              ;;/.nocoordswap:
 761+ E6DB              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DB              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DB              ;;/	ld		(l2deltaY),a
 764+ E6DB              ;;/	neg									; DEBUG
 765+ E6DB              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DB              ;;/	neg									; DEBUG
 767+ E6DB              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DB              ;;/    ld		a,c
 769+ E6DB              ;;/	cp		e
 770+ E6DB              ;;/	jr		c, .x1GTx0
 771+ E6DB              ;;/.x1LTx0
 772+ E6DB              ;;/	ld		a,c
 773+ E6DB              ;;/	sub		e
 774+ E6DB              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DB              ;;/	neg									; DEBUG
 776+ E6DB              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DB              ;;/	neg									; DEBUG
 778+ E6DB              ;;/	ld		a,l2incbstep
 779+ E6DB              ;;/	jr		.setlayershift0
 780+ E6DB              ;;/.x1GTx0:
 781+ E6DB              ;;/	ld		a,e
 782+ E6DB              ;;/	sub		c
 783+ E6DB              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DB              ;;/	neg									; DEBUG
 785+ E6DB              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DB              ;;/	neg									; DEBUG
 787+ E6DB              ;;/	ld		a,l2decbstep
 788+ E6DB              ;;/.setlayershift0:
 789+ E6DB              ;;/	ld		a,0
 790+ E6DB              ;;/	pushbcde
 791+ E6DB              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DB              ;;/	popdebc
 793+ E6DB              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DB              ;;/.dymuliplyby2:
 795+ E6DB              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DB              ;;/	call	l2_signed_mul2a
 797+ E6DB              ;;/	ld		(l2deltaYsq),a
 798+ E6DB              ;;/	neg									; DEBUG
 799+ E6DB              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DB              ;;/	neg									; DEBUG
 801+ E6DB              ;;/.dxmuliplyby2:
 802+ E6DB              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DB              ;;/	call	l2_signed_mul2a
 804+ E6DB              ;;/	ld		(l2deltaXsq),a
 805+ E6DB              ;;/	neg									; DEBUG
 806+ E6DB              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DB              ;;/	neg									; DEBUG
 808+ E6DB              ;;/.plotfirstpixel:
 809+ E6DB              ;;/	pushbcde
 810+ E6DB              ;;/	ld a,(l2linecolor)
 811+ E6DB              ;;/	call	l2_plot_pixel
 812+ E6DB              ;;/	popdebc
 813+ E6DB              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DB              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DB              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DB              ;;/	cp		(hl)
 817+ E6DB              ;;/	jp		m,	.signset
 818+ E6DB              ;;/.signclear:
 819+ E6DB              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DB              ;;/	jr		.dxGTdybranch
 821+ E6DB              ;;/.signset:
 822+ E6DB              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DB              ;;/.dxGTdybranch:
 824+ E6DB              ;;/	ld		a,(l2deltaYsq)
 825+ E6DB              ;;/	ld		hl,l2deltaX
 826+ E6DB              ;;/	sub		(hl)
 827+ E6DB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DB              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DB              ;;/	ld		a,c
 830+ E6DB              ;;/	cp		e
 831+ E6DB              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DB              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DB              ;;/	ld		a,(l2fraction)
 834+ E6DB              ;;/	TEST	$80
 835+ E6DB              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DB              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DB              ;;/	ld		hl,l2deltaXsq
 838+ E6DB              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DB              ;;/	ld		(l2fraction),a
 840+ E6DB              ;;/.BranchAskipYstep:
 841+ E6DB              ;;/.l2stepx1:
 842+ E6DB              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DB              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DB              ;;/	ld		hl,l2deltaYsq
 845+ E6DB              ;;/	add		a,(hl)
 846+ E6DB              ;;/	ld		(l2fraction),a
 847+ E6DB              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DB              ;;/	pushbcde
 849+ E6DB              ;;/	ld a,(l2linecolor)
 850+ E6DB              ;;/	call	l2_plot_pixel
 851+ E6DB              ;;/	popdebc
 852+ E6DB              ;;/.BranchAloop:
 853+ E6DB              ;;/	jr		.BranchAwhile
 854+ E6DB              ;;/.dxLTEdybranch:
 855+ E6DB              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DB              ;;/	ld		hl, l2deltaY
 857+ E6DB              ;;/	sub		(hl)
 858+ E6DB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DB              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DB              ;;/	ld		a,b
 861+ E6DB              ;;/	cp		d
 862+ E6DB              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DB              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DB              ;;/	ld		a,(l2fraction)
 865+ E6DB              ;;/	TEST	$80
 866+ E6DB              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DB              ;;/.l2stepx2
 868+ E6DB              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DB              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DB              ;;/	ld		hl,l2deltaYsq
 871+ E6DB              ;;/	sub		(hl)
 872+ E6DB              ;;/	ld		(l2fraction),a
 873+ E6DB              ;;/.BranchBskipYstep:
 874+ E6DB              ;;/	ld		hl, l2deltaYsq
 875+ E6DB              ;;/	add		a,(hl)
 876+ E6DB              ;;/	ld		(l2fraction),a
 877+ E6DB              ;;/	inc		b							; ++l2_vy0;
 878+ E6DB              ;;/.BranchBplotBCColA:
 879+ E6DB              ;;/	pushbcde
 880+ E6DB              ;;/	ld a,(l2linecolor)
 881+ E6DB              ;;/	call	l2_plot_pixel
 882+ E6DB              ;;/	popdebc
 883+ E6DB              ;;/.BranchBloop:
 884+ E6DB              ;;/	jr		.BranchBwhile
 885+ E6DB
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1175  E6DB                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DB
   2+ E6DB
   3+ E6DB
   4+ E6DB 00 00        l2trianglebc	        DW 0
   5+ E6DD 00 00        l2trianglede	        DW 0
   6+ E6DF 00 00        l2trianglehl	        DW 0
   7+ E6E1
   8+ E6E1              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E1 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E5 CD 09 E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6E8 F1                                   pop		af
  12+ E6E9 D1                                   pop		de						; swap DE and HL
  13+ E6EA E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6EB C1                                   pop		bc
  15+ E6EC D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6EE F5                                   push	af
  17+ E6EF CD 09 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F2 F1                                   pop		af
  19+ E6F3 C1                                   pop		bc						; Now bc = original de
  20+ E6F4 D1                                   pop		de						; de = original hl
  21+ E6F5 CD 09 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6F8 C9                                   ret
  23+ E6F9
  24+ E6F9
  25+ E6F9
  26+ E6F9
  27+ E6F9
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1176  E6F9                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6F9              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6F9              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6F9              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6F9 DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FB 7D                                   ld		a,l
   6+ E6FC 32 22 E3                             ld		(l2linecolor),a
   7+ E6FF 79                                   ld		a,c
   8+ E700 BB                                   cp		e
   9+ E701 30 08                                jr		nc, .x2gtex1
  10+ E703 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E706 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E709 18 06                                jr		.storepoints
  13+ E70B DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E70E DD 2E 01                             ld		ixl,1
  15+ E711 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E714 DD 7C                                ld		a,ixh
  17+ E716 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E717 54                                   ld		d,h
  19+ E718 CD 2A E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71B E1 D1 C1                             pop		bc,,de,,hl
  21+ E71E C5 E5                                push	bc,,hl
  22+ E720 54                                   ld		d,h                             ; now its bc -> he
  23+ E721 DD 7D                                ld		a,ixl
  24+ E723 CD 2A E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E726 E1 C1                                pop		bc,,hl
  26+ E728 50           .SaveForLoop:           ld		d,b
  27+ E729 5C                                   ld		e,h								; save loop counters
  28+ E72A D5                                   push	de								; de = y0ycommon
  29+ E72B 21 2A E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E72E 78                                   ld		a,b
  31+ E72F ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E731 7E                                   ld		a,(hl)							;
  33+ E732 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E733 21 2A E4                             ld      hl,l2targetArray2
  35+ E736 78                                   ld      a,b
  36+ E737 ED 31                                add     hl,a
  37+ E739              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E739 7E                                   ld		a,(hl)
  39+ E73A 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73B 3A 22 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E73E 5F                                   ld		e,a								; de = to colour
  42+ E73F C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E740 25                                   dec		h
  44+ E741 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E742 CD 8C E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E745 E1                                   pop		hl
  47+ E746 C1                                   pop		bc
  48+ E747 04                                   inc		b								; down a rowc
  49+ E748 D1                                   pop		de								; de = from to (and b also = current)
  50+ E749 14                                   inc		d
  51+ E74A 7B                                   ld		a,e								; while e >= d
  52+ E74B BA                                   cp		d
  53+ E74C 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E74E C9                                   ret
  55+ E74F
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1177  E74F                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E74F
   2+ E74F 00 00        l2_circle_pos		DW 0
   3+ E751 00           l2_circle_colour	DB 0
   4+ E752 00           l2_circle_radius	DB 0
   5+ E753 00           l2_circle_x			DB 0
   6+ E754 00           l2_circle_y			DB 0
   7+ E755 00           l2_circle_d			DB 0
   8+ E756
   9+ E756              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E756 7B           l2_draw_circle:     ld		a,e
  11+ E757 32 FD E7                         ld		(.PlotPixel+1),a
  12+ E75A 7A                               ld		a,d								; get radius
  13+ E75B A7                               and		a
  14+ E75C C8                               ret		z
  15+ E75D FE 01                            cp		1
  16+ E75F CA 08 E8                         jp		z,CircleSinglepixel
  17+ E762 ED 43 8C E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E766 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E768 DD 2E 00                         ld		ixl,0
  20+ E76B 26 00        .calcd:	            ld		h,0
  21+ E76D 6F                               ld		l,a
  22+ E76E 29                               add		hl,hl							; hl = r * 2
  23+ E76F EB                               ex		de,hl							; de = r * 2
  24+ E770 21 03 00                         ld		hl,3
  25+ E773 A7                               and		a
  26+ E774 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E776 44                               ld		b,h
  28+ E777 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E778 21 01 00     .calcdelta:         ld		hl,1
  30+ E77B 16 00                            ld		d,0
  31+ E77D DD 5D                            ld		e,ixl
  32+ E77F A7                               and		a
  33+ E780 ED 52                            sbc		hl,de
  34+ E782 11 01 00     .Setde1:            ld		de,1
  35+ E785 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E787 DD BD                            cp		ixl
  37+ E789 D8                               ret		c
  38+ E78A D9           .ProcessLoop:	    exx
  39+ E78B 11 00 00     .Plot1:             ld		de,0
  40+ E78E 7B                               ld		a,e
  41+ E78F DD 85                            add		a,ixl
  42+ E791 4F                               ld		c,a
  43+ E792 7A                               ld		a,d
  44+ E793 DD 84                            add		a,ixh
  45+ E795 47                               ld		b,a
  46+ E796 CD FC E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E799 7B           .Plot2:             ld 		a,e
  48+ E79A DD 95                            sub 	ixl
  49+ E79C 4F                               ld 		c,a
  50+ E79D 7A                               ld 		a,d
  51+ E79E DD 84                            add 	a,ixh
  52+ E7A0 47                               ld		b,a
  53+ E7A1 CD FC E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A4 7B           .Plot3:             ld 		a,e
  55+ E7A5 DD 85                            add		a,ixl
  56+ E7A7 4F                               ld 		c,a
  57+ E7A8 7A                               ld 		a,d
  58+ E7A9 DD 94                            sub 	ixh
  59+ E7AB 47                               ld 		b,a
  60+ E7AC CD FC E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7AF 7B           .Plot4:             ld 		a,e
  62+ E7B0 DD 95                            sub 	ixl
  63+ E7B2 4F                               ld 		c,a
  64+ E7B3 7A                               ld 		a,d
  65+ E7B4 DD 94                            sub 	ixh
  66+ E7B6 47                               ld 		b,a
  67+ E7B7 CD FC E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BA 7A           .Plot5:	            ld 		a,d
  69+ E7BB DD 85                            add 	a,ixl
  70+ E7BD 47                               ld 		b,a
  71+ E7BE 7B                               ld 		a,e
  72+ E7BF DD 84                            add 	a,ixh
  73+ E7C1 4F                               ld 		c,a
  74+ E7C2 CD FC E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C5 7A           .Plot6:	            ld 		a,d
  76+ E7C6 DD 95                            sub 	ixl
  77+ E7C8 47                               ld 		b,a
  78+ E7C9 7B                               ld 		a,e
  79+ E7CA DD 84                            add 	a,ixh
  80+ E7CC 4F                               ld 		c,a
  81+ E7CD CD FC E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D0 7A           .Plot7:	            ld 		a,d
  83+ E7D1 DD 85                            add 	a,ixl
  84+ E7D3 47                               ld 		b,a
  85+ E7D4 7B                               ld 		a,e
  86+ E7D5 DD 94                            sub 	ixh
  87+ E7D7 4F                               ld 		c,a
  88+ E7D8 CD FC E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DB 7A           .Plot8:	            ld 		a,d
  90+ E7DC DD 95                            sub 	ixl
  91+ E7DE 47                               ld		b,a
  92+ E7DF 7B                               ld 		a,e
  93+ E7E0 DD 94                            sub 	ixh
  94+ E7E2 4F                               ld 		c,a
  95+ E7E3 CD FC E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E6 D9                               exx
  97+ E7E7 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7E9 28 03                            jr z,   .draw_circle_1
  99+ E7EB 19                               add hl,de			; Delta=Delta+D1
 100+ E7EC 18 05                            jr      .draw_circle_2		;
 101+ E7EE 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7EF 03                               inc     bc
 103+ E7F0 03                               inc     bc				; D2=D2+2
 104+ E7F1 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F3 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F4 03                               inc bc
 107+ E7F5 13                               inc de				; D1=D1+2
 108+ E7F6 13                               inc de
 109+ E7F7 DD 2C                            inc ixl				; X=X+1
 110+ E7F9 C3 85 E7                         jp      .CircleLoop
 111+ E7FC 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E7FE D5 C5 E5                         push	de,,bc,,hl
 113+ E801 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E804 E1 C1 D1                         pop		de,,bc,,hl
 115+ E807 C9                               ret
 116+ E808 7B           CircleSinglepixel:  ld		a,e
 117+ E809 CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80C C9                               ret
 119+ E80D
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1178  E80D                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E80D
   2+ E80D 00           l2_circle_dblx		DB 0
   3+ E80E 00           l2_circle_dbly		DB 0
   4+ E80F
   5+ E80F              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E80F 7B           l2_draw_circle_fill:    ld		a,e
   7+ E810 32 A6 E8                             ld		(.LineColour+1),a
   8+ E813 7A                                   ld		a,d								; get radius
   9+ E814 A7                                   and		a
  10+ E815 C8                                   ret		z
  11+ E816 FE 01                                cp		1
  12+ E818 CA 08 E8                             jp		z,CircleSinglepixel
  13+ E81B ED 43 45 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E81F DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E821 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E824 26 00        .calcd:	                ld		h,0
  17+ E826 6F                                   ld		l,a
  18+ E827 29                                   add		hl,hl							; hl = r * 2
  19+ E828 EB                                   ex		de,hl							; de = r * 2
  20+ E829 21 03 00                             ld		hl,3
  21+ E82C A7                                   and		a
  22+ E82D ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E82F 44                                   ld		b,h
  24+ E830 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E831 21 01 00     .calcdelta              ld		hl,1
  26+ E834 16 00                                ld		d,0
  27+ E836 DD 5D                                ld		e,ixl
  28+ E838 A7                                   and		a
  29+ E839 ED 52                                sbc		hl,de
  30+ E83B 11 01 00     .Setde1	                ld		de,1
  31+ E83E DD 7C        .CircleLoop:            ld		a,ixh
  32+ E840 DD BD                                cp		ixl
  33+ E842 D8                                   ret		c
  34+ E843 D9           .ProcessLoop:	        exx
  35+ E844 11 00 00     .Line1:                 ld		de,0
  36+ E847 7B                                   ld 		a,e
  37+ E848 DD 95                                sub 	ixl
  38+ E84A 4F                                   ld 		c,a
  39+ E84B 7A                                   ld 		a,d
  40+ E84C DD 84                                add 	a,ixh
  41+ E84E 47                                   ld		b,a
  42+ E84F                                      ;; TODO ADD DOUBLE X CALC
  43+ E84F D5                                   push	de
  44+ E850 DD 55                                ld		d,ixl
  45+ E852 CB 22                                sla		d
  46+ E854 CD A1 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E857 D1                                   pop		de
  48+ E858 7B           .Line2:                 ld 		a,e
  49+ E859 DD 95                                sub		ixl
  50+ E85B 4F                                   ld 		c,a
  51+ E85C 7A                                   ld 		a,d
  52+ E85D DD 94                                sub 	ixh
  53+ E85F 47                                   ld 		b,a
  54+ E860                                      ;; TODO ADD DOUBLE X CALC
  55+ E860 D5                                   push	de
  56+ E861 DD 55                                ld		d,ixl
  57+ E863 CB 22                                sla		d
  58+ E865 CD A1 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E868 D1                                   pop		de
  60+ E869 7B           .Line3:	                ld 		a,e
  61+ E86A DD 94                                sub		ixh
  62+ E86C 4F                                   ld 		c,a
  63+ E86D 7A                                   ld 		a,d
  64+ E86E DD 85                                add 	a,ixl
  65+ E870 47                                   ld 		b,a
  66+ E871                                      ;; TODO ADD DOUBLE Y CALC
  67+ E871 D5                                   push	de
  68+ E872 DD 54                                ld		d,ixh
  69+ E874 CB 22                                sla		d
  70+ E876 CD A1 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E879 D1                                   pop		de
  72+ E87A 7B           .Line4:	                ld 		a,e
  73+ E87B DD 94                                sub		ixh
  74+ E87D 4F                                   ld 		c,a
  75+ E87E 7A                                   ld 		a,d
  76+ E87F DD 95                                sub 	ixl
  77+ E881 47                                   ld 		b,a
  78+ E882                                      ;; TODO ADD DOUBLE Y CALC
  79+ E882 D5                                   push	de
  80+ E883 DD 54                                ld		d,ixh
  81+ E885 CB 22                                sla		d
  82+ E887 CD A1 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88A D1                                   pop		de
  84+ E88B D9                                   exx
  85+ E88C CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E88E 28 03                                jr z,.draw_circle_1
  87+ E890 19                                   add hl,de			; Delta=Delta+D1
  88+ E891 18 05                                jr .draw_circle_2		;
  89+ E893 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E894 03                                   inc bc
  91+ E895 03                                   inc bc				; D2=D2+2
  92+ E896 DD 25                                dec ixh				; Y=Y-1
  93+ E898 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E899 03                                   inc bc
  95+ E89A 13                                   inc de				; D1=D1+2
  96+ E89B 13                                   inc de
  97+ E89C DD 2C                                inc ixl				; X=X+1
  98+ E89E C3 3E E8                             jp .CircleLoop
  99+ E8A1 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8A5 3E 00        .LineColour:	        ld		a,0         ; circle colur
 101+ E8A7 5F                                   ld      e,a
 102+ E8A8 CD 60 E2                             call 	l2_draw_horz_line
 103+ E8AB F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8AF C9                                   ret
 105+ E8B0
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1179  E8B0                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B0              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B0 08           l2_draw_any_line:       ex		af,af'
   3+ E8B1 79                                   ld		a,c
   4+ E8B2 BB                                   cp		e
   5+ E8B3 28 08                                jr		z,.HorizontalLine
   6+ E8B5 78                                   ld		a,b
   7+ E8B6 BA                                   cp		d
   8+ E8B7 28 0A                                jr		z,.VerticalLine
   9+ E8B9              ; use jp and get a free ret instruction optimisation
  10+ E8B9 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8BA C3 09 E6                             jp		l2_draw_diagonal
  12+ E8BD
  13+ E8BD 08           .HorizontalLine:        ex		af,af'
  14+ E8BE 53                                   ld		d,e				; set d as target right pixel
  15+ E8BF 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C0 C3 8C E2                             jp		l2_draw_horz_line_to
  17+ E8C3 08           .VerticalLine:          ex		af,af'
  18+ E8C4 5F                                   ld		e,a				; e holds colour on this call
  19+ E8C5 C3 0B E3                             jp		l2_draw_vert_line_to
  20+ E8C8
  21+ E8C8
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1180  E8C8                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8C8              ; ClearLines (LL155)
   2+ E8C8              ;   y = 0
   3+ E8C8              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8C8              ;   exit if XX20 < 4
   5+ E8C8              ;   ++y
   6+ E8C8              ;   do
   7+ E8C8              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8C8              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8C8              ;		++y
  10+ E8C8              ;	until Y > XX20
  11+ E8C8
  12+ E8C8              clearLines:
  13+ E8C8              layer2_clearLines:
  14+ E8C8 3A FF C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8CB 47                                   ld		b,a
  16+ E8CC 21 0D C2                             ld		hl,UbnkLineArray
  17+ E8CF C5           clearLinesLoop:         push	bc
  18+ E8D0 7E                                   ld		a,(hl)
  19+ E8D1 23                                   inc		hl
  20+ E8D2 4F                                   ld		c,a
  21+ E8D3 7E                                   ld		a,(hl)
  22+ E8D4 23                                   inc		hl
  23+ E8D5 47                                   ld		b,a
  24+ E8D6 7E                                   ld		a,(hl)
  25+ E8D7 23                                   inc		hl
  26+ E8D8 5F                                   ld		e,a
  27+ E8D9 7E                                   ld		a,(hl)
  28+ E8DA 23                                   inc		hl
  29+ E8DB 57                                   ld		d,a
  30+ E8DC 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8DE E5                                   push	hl
  32+ E8DF CD B0 E8                             call    l2_draw_any_line
  33+ E8E2 E1                                   pop		hl
  34+ E8E3 C1                                   pop		bc
  35+ E8E4 10 E9                                djnz	clearLinesLoop
  36+ E8E6 C9                                   ret
  37+ E8E7
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1181  E8E7                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8E7              ; ******************************************************************************
   2+ E8E7              ;
   3+ E8E7              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8E7              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8E7              ;
   6+ E8E7              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8E7              ;
   8+ E8E7              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8E7              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8E7              ;	before using line drawing.
  11+ E8E7              ;
  12+ E8E7              ;	The routine checks the range of specified coordinates which is the
  13+ E8E7              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8E7              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8E7              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8E7              ;	visible part will be drawn.
  17+ E8E7              ;
  18+ E8E7              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8E7              ;
  20+ E8E7              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8E7              ;
  22+ E8E7              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8E7              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8E7              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8E7              ;
  26+ E8E7              ;	OUT:	None.
  27+ E8E7              ;
  28+ E8E7              ;	Registers	used	by routine:
  29+ E8E7              ;		   N	:	B, loop counter
  30+ E8E7              ;		   i	:	line	balance variable
  31+ E8E7              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8E7              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8E7              ;	  (x0,y0)	:	(h,l)
  34+ E8E7              ;	  direc_x	:	d, horisontal step increment
  35+ E8E7              ;	  direc_y	:	e, vertical step increment
  36+ E8E7              ;		 ddx	:	b, horisontal step increment
  37+ E8E7              ;		 ddy	:	c, vertical step increment
  38+ E8E7              ;
  39+ E8E7              ;		DE, A work registers.
  40+ E8E7              ;
  41+ E8E7              ; The algorithm in pseudo-code:
  42+ E8E7              ;
  43+ E8E7              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8E7              ;	x = ABS x: y =	ABS y
  45+ E8E7              ;
  46+ E8E7              ;	if x	>= y
  47+ E8E7              ;		if x+y=0 then return
  48+ E8E7              ;		H = x
  49+ E8E7              ;		L = y
  50+ E8E7              ;		ddx = direc_x
  51+ E8E7              ;		ddy = 0
  52+ E8E7              ;	else
  53+ E8E7              ;		H = y
  54+ E8E7              ;		L = x
  55+ E8E7              ;		ddx = 0
  56+ E8E7              ;		ddy = direc_y
  57+ E8E7              ;	endif
  58+ E8E7              ;
  59+ E8E7              ;	B = H
  60+ E8E7              ;	i = INT(B/2)
  61+ E8E7              ;	FOR N=B TO 1 STEP -1
  62+ E8E7              ;		i = i + L
  63+ E8E7              ;		if i	< H
  64+ E8E7              ;			ix =	ddx
  65+ E8E7              ;			iy =	ddy
  66+ E8E7              ;		else
  67+ E8E7              ;			i = i - H
  68+ E8E7              ;			ix =	direc_x
  69+ E8E7              ;			iy =	direc_y
  70+ E8E7              ;		endif
  71+ E8E7              ;		x0 =	x0 +	ix
  72+ E8E7              ;		y0 =	y0 +	iy
  73+ E8E7              ;		plot	(x0,y0)
  74+ E8E7              ;	NEXT	N
  75+ E8E7              ;
  76+ E8E7              ;
  77+ E8E7              ;	Registers	changed after return:
  78+ E8E7              ;		..BCDEHL/IXIY/af......	same
  79+ E8E7              ;		AF....../..../..bcdehl	different
  80+ E8E7              ;
  81+ E8E7 DF           line_gfx_colour db $DF
  82+ E8E8 00 00        line_gfx_coords	dw 0
  83+ E8EA              LineHLtoDE:
  84+ E8EA 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8EB FE C0                                cp	192
  86+ E8ED 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8EF 7A                                   ld	a,d
  88+ E8F0 FE C0                                cp	192
  89+ E8F2 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8F4 22 E8 E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8F7 E5                                   push	hl
  92+ E8F8 D5                                   push	de
  93+ E8F9 6C                                   ld	l,h				; L = x0
  94+ E8FA 62                                   ld	h,d				; H = x1
  95+ E8FB 7C           distanceX:		        ld	a,h
  96+ E8FC 95                                   sub	l
  97+ E8FD 6F                                   ld	l,a
  98+ E8FE 26 00                                ld	h,0
  99+ E900 30 02                                jr	nc, distanceXDone
 100+ E902 26 FF                                ld	h,-1
 101+ E904 D1           distanceXDone:          pop	de
 102+ E905 E3                                   ex	(sp),hl			; L = y0
 103+ E906 63                                   ld	h,e				; H = y1
 104+ E907 7C           distanceY:		        ld	a,h
 105+ E908 95                                   sub	l
 106+ E909 6F                                   ld	l,a
 107+ E90A 26 00                                ld	h,0
 108+ E90C 30 02                                jr	nc, distanceYDone
 109+ E90E 26 FF                                ld	h,-1
 110+ E910 D1           distanceYDone:          pop	de
 111+ E911 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E912 CD 16 E9                             call	DrawLineRelative			; draw line...
 113+ E915 C9           exit_line:              ret
 114+ E916
 115+ E916              ; ***************************************************************************
 116+ E916              ;
 117+ E916              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E916              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E916              ;
 120+ E916              ; OUT: h - l distance in	HL
 121+ E916              ;
 122+ E916
 123+ E916 D5           DrawLineRelative:       push	de
 124+ E917 E5                                   push	hl
 125+ E918 D9                                   exx
 126+ E919 E1                                   pop	hl					; get relative	horisontal movement
 127+ E91A CD 85 E9                             call	sgn
 128+ E91D 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E91E CD 92 E9                             call	absValue
 130+ E921 45                                   ld	b,l					; x = ABS(x)
 131+ E922 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E923 CD 85 E9                             call	sgn
 133+ E926 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E927 CD 92 E9                             call	absValue
 135+ E92A 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E92B              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E92B C5                                   push	bc
 138+ E92C D9                                   exx
 139+ E92D E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E92E 7C                                   ld	a,h
 141+ E92F BD                                   cp	l
 142+ E930 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E932 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E933 28 4F                                jr	z, exit_draw		;		return
 145+ E935 D9           y_lessorequal_x:        exx						;	else
 146+ E936 42                                   ld	b,d					;		ddx = direc_x
 147+ E937 0E 00                                ld	c,0					;		ddy = 0
 148+ E939 D9                                   exx
 149+ E93A 18 08                                jr	init_drawloop		; else
 150+ E93C 7C           x_smaller_y:	        ld	a,h
 151+ E93D 65                                   ld	h,l					;	H = y
 152+ E93E 6F                                   ld	l,a					;	L = x
 153+ E93F D9                                   exx
 154+ E940 06 00                                ld	b,0					;	ddx = 0
 155+ E942 4B                                   ld	c,e					;	ddy = direc_y
 156+ E943 D9                                   exx
 157+ E944 44           init_drawloop:	        ld	b,h
 158+ E945 4C                                   ld	c,h					; B = H
 159+ E946 CB 39                                srl	c					; i = INT(B/2)
 160+ E948              										; FOR N=B	TO 1	STEP	-1
 161+ E948 79           drawloop:		        ld	a,c
 162+ E949 85                                   add	a,l
 163+ E94A 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E94C BC                                   cp	h
 165+ E94D 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E94F 4F                                   ld	c,a					;		i = i + L
 167+ E950 D9                                   exx
 168+ E951 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E952 D9                                   exx
 170+ E953 18 05                                jr	check_plot			;	else
 171+ E955 94           i_greater:		        sub	h					;		i = i - H
 172+ E956 4F                                   ld	c,a
 173+ E957 D9                                   exx
 174+ E958 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E959 D9                                   exx						;	endif
 176+ E95A E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E95B EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E95C 2A E8 E8                             ld	hl,(line_gfx_coords)
 179+ E95F 7D                                   ld	a,l
 180+ E960 83                                   add	a,e					;
 181+ E961 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E962 7A                                   ld	a,d
 183+ E963 3C                                   inc	a
 184+ E964 84                                   add	a,h
 185+ E965 38 04                                jr	c, check_range		;	check out	of range
 186+ E967 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E969 18 02                                jr	plot_point
 188+ E96B 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E96D
 190+ E96D 3D           plot_point:             dec	a
 191+ E96E C5                                   push	bc
 192+ E96F F5                                   push	af
 193+ E970 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E971 4D                                   ld		c,l
 195+ E972 3A E7 E8                             ld		a,(line_gfx_colour)
 196+ E975 ED 43 E8 E8                          ld      (line_gfx_coords),bc
 197+ E979 CD FF E0                             call	l2_plot_pixel
 197+ E97C
 198+ E97C F1                                   pop		af
 199+ E97D C1                                   pop		bc
 200+ E97E E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E97F 10 C7                                djnz	drawloop		; NEXT N
 202+ E981 18 01                                jr	exit_draw
 203+ E983
 204+ E983 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E984 C9           exit_draw:		        ret
 206+ E985
 207+ E985
 208+ E985              ; ******************************************************************************
 209+ E985              ;
 210+ E985              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E985              ;
 212+ E985              ;	IN:		HL =	integer
 213+ E985              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E985              ;
 215+ E985              ;	Registers	changed after return:
 216+ E985              ;	..BCDEHL/IXIY	same
 217+ E985              ;	AF....../....	different
 218+ E985              ;
 219+ E985 7C           sgn:				    ld	a,h
 220+ E986 B5                                   or	l
 221+ E987 C8                                   ret	z				; integer	is zero, return 0...
 222+ E988 CB 7C                                bit	7,h
 223+ E98A 20 03                                jr	nz, negative_int
 224+ E98C 3E 01                                ld	a,1
 225+ E98E C9                                   ret
 226+ E98F 3E FF        negative_int:		    ld	a,-1
 227+ E991 C9                                   ret
 228+ E992
 229+ E992
 230+ E992              ; ******************************************************************************
 231+ E992              ;
 232+ E992              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E992              ;
 234+ E992              ;	IN:		HL =	integer
 235+ E992              ;	OUT:		HL =	converted	integer
 236+ E992              ;
 237+ E992              ;	Registers	changed after return:
 238+ E992              ;	A.BCDE../IXIY	same
 239+ E992              ;	.F....HL/....	different
 240+ E992              ;
 241+ E992 CB 7C        absValue:			    bit	7,h
 242+ E994 C8                                   ret	z				; integer	is positive...
 243+ E995 D5                                   push	de
 244+ E996 EB                                   ex	de,hl
 245+ E997 21 00 00                             ld	hl,0
 246+ E99A BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E99B ED 52                                sbc	hl,de			; convert	negative integer
 248+ E99D D1                                   pop	de
 249+ E99E C9                                   ret
 250+ E99F
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1182  E99F              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1183  E99F                  SLOT    CommanderAddr
1184  E99F                  PAGE    BankCommander
1185  E99F                  ORG     CommanderAddr, BankCommander
1186  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F              defaultHomeX	        equ $14
   6+ E02F              defaultHomeY	        equ $AD
   7+ E02F
   8+ E02F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E02F 11 DD 9A     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E032 21 10 E0                             ld		hl,defaultName
  11+ E035 01 08 00                             ld		bc,8
  12+ E038 ED B0                                ldir
  13+ E03A 11 DC 98                             ld		de,GalaxySeeds
  14+ E03D 21 29 E0                             ld		hl,defaultSeeds
  15+ E040 01 08 00                             ld		bc,8
  16+ E043 ED B0                                ldir
  17+ E045 3E 14                                ld		a,defaultHomeX
  18+ E047 32 E2 98                             ld		(PresentSystemX),a
  19+ E04A 32 E4 98                             ld		(TargetPlanetX),a
  20+ E04D 3E AD                                ld		a,defaultHomeY
  21+ E04F 32 E3 98                             ld		(PresentSystemY),a
  22+ E052 32 E5 98                             ld		(TargetPlanetY),a
  23+ E055              	; testing
  24+ E055 21 A9 97                             ld		hl,IndexedWork
  25+ E058 CD AE 9C                             call	copy_galaxy_to_system
  26+ E05B CD 6E 9D                             call	find_present_system
  27+ E05E CD D1 9C                             call	copy_working_to_galaxy
  28+ E061 01 60 EA                             ld      bc,60000
  29+ E064 ED 43 17 9C                          ld      (Cash),bc
  30+ E068 01 00 00                             ld		bc,0
  31+ E06B ED 43 19 9C                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E06F 3E 46                                ld		a,MaxFuelLevel
  33+ E071 32 1B 9C                             ld		(Fuel),a
  34+ E074 3E 5B                                ld      a,BankGalaxyData0
  35+ E076 32 CF 98                             ld		(Galaxy),a
  36+ E079 AF                                   xor		a
  37+ E07A 21 56 9C                             ld      hl,EquipmentFitted
  38+ E07D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E07F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E080 23                                   inc     hl
  41+ E081 10 FC                                djnz    .ClearFittedLooop
  42+ E083                                      SetAFalse
  42+ E083 3E FF       >                        ld      a,$FF
  43+ E085 32 60 9C                             ld      (EquipmentFitted+EQ_FRONT_PULSE),a
  44+ E088 32 F2 98                             ld		(MissionData),a						;The Plan/Mission
  45+ E08B AF                                   xor     a
  46+ E08C 32 1D 9C                             ld		(LaserList+1),a
  47+ E08F 32 1E 9C                             ld		(LaserList+2),a
  48+ E092 32 1F 9C                             ld		(LaserList+3),a
  49+ E095 3E 0A                                ld      a,EQ_FRONT_PULSE
  50+ E097 32 1C 9C                             ld		(LaserList),a
  51+ E09A AF                                   xor     a
  52+ E09B 32 59 9C                             ld		(ECMPresent),a
  53+ E09E 32 70 9C                             ld		(FuelScoopsBarrelStatus),a
  54+ E0A1 32 5C 9C                             ld		(EnergyBomb),a
  55+ E0A4 32 5D 9C                             ld		(ExtraEnergyUnit),a
  56+ E0A7 32 5E 9C                             ld		(DockingComputer),a
  57+ E0AA 32 5F 9C                             ld		(GalacticHyperDrive),a
  58+ E0AD 32 5B 9C                             ld		(EscapePod),a
  59+ E0B0 32 50 98                             ld      (FugitiveInnocentStatus),a
  60+ E0B3 32 63 98                             ld		(KillTally),a
  61+ E0B6 32 F2 96                             ld      (OuterHyperCount),a
  62+ E0B9 32 F1 96                             ld      (InnerHyperCount),a
  63+ E0BC 3D                                   dec		a								; now a = 255
  64+ E0BD 32 D6 9A                             ld		(ForeShield),a
  65+ E0C0 32 D7 9A                             ld		(AftShield),a
  66+ E0C3 32 D8 9A                             ld		(PlayerEnergy),a
  67+ E0C6 3E 14                                ld		a,20
  68+ E0C8 32 20 9C                             ld		(CargoBaySize),a
  69+ E0CB CD DF E0                             call	ZeroCargo						; Clear out cargo
  70+ E0CE                                      ; more to DO
  71+ E0CE C9                                   ret
  72+ E0CF
  73+ E0CF              ; Set a = 2 * (slaves + narcotics) + firearms
  74+ E0CF 3A 25 9C     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
  75+ E0D2 47                                   ld      b,a                             ; .
  76+ E0D3 3A 28 9C                             ld      a,(NarcoticsCargoTonnes)        ; .
  77+ E0D6 80                                   add     b                               ; .
  78+ E0D7 CB 27                                sla     a                               ; .
  79+ E0D9 47                                   ld      b,a                             ;
  80+ E0DA 3A 2C 9C                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
  81+ E0DD 80                                   add     b
  82+ E0DE C9                                   ret
  83+ E0DF
# file closed: ./Commander/commanderData.asm
1187  E0DF                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0DF              ZeroCargo:
   2+ E0DF AF           		xor		a							;zero-out cargo, including gems.
   3+ E0E0 06 10        		ld		b,16						;all the way up to alien items
   4+ E0E2 21 22 9C     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0E5              .ZeroLoop:
   6+ E0E5 77                   ld      (hl),a
   7+ E0E6 23           		inc		hl
   8+ E0E7 10 FC        		djnz	.ZeroLoop
   9+ E0E9 C9           		ret
  10+ E0EA
# file closed: ./Commander/zero_player_cargo.asm
1188  E0EA              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1189  E0EA                  SLOT    LAYER1Addr
1190  E0EA                  PAGE    BankLAYER1
1191  E0EA                  ORG     LAYER1Addr, BankLAYER1
1192  E000
1193  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 9F 93                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1194  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 9F 93                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 9F 93                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 9F 93                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 9F 93                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 9F 93                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 9F 93                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 9F 93                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 9F 93                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1195  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
1196  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1197  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1198  E130              ; as the is aligned and data tables are after that
1199  E130              ; need to make the ship index tables same size in each to simplify further
1200  E130                  SLOT    ShipModelsAddr
1201  E130                  PAGE    BankShipModels1
1202  E130              	ORG     ShipModelsAddr, BankShipModels1
1203  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1204  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1205  E00F              GetShipBankId:
1206  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1206  E00F 06 00       >                        ld      b,0
1206  E011 4F          >                        ld      c,a                                 ; c= original ship id
1206  E012 CB 3F       >.ShiftLoop:             srl     a
1206  E014 CB 3F       >                        srl     a
1206  E016 CB 3F       >                        srl     a
1206  E018 CB 3F       >                        srl     a                                   ; divide by 16
1206  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1206  E01B 79          >                        ld      a,c
1206  E01C 50          >                        ld      d,b
1206  E01D 1E 10       >                        ld      e,16
1206  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1206  E021 93          >                        sub     e                                   ; a= actual model id now
1206  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1206  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1206  E024 7A          >                        ld      a,d                                 ; a = bank number
1206  E025             >;.. Now b = bank and a = adjusted ship nbr
1206  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1206  E028 ED 31       >                        add     hl,a
1206  E02A ED 31       >                        add     hl,a
1206  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1206  E02D             >                        ClearCarryFlag
1206  E02D B7          >                        or a
1206  E02E C9          >                        ret
1207  E02F              CopyVertsToUniv:
1208  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1208  E02F 2A 1F C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1208  E032 11 24 C3    >                        ld          de,UBnkHullVerticies
1208  E035 06 00       >                        ld          b,0
1208  E037 3A 13 C3    >                        ld			a,(VertexCtX6Addr)
1208  E03A 4F          >                        ld          c,a
1208  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1208  E03C CD C5 93    >                        call        memcopy_dma
1208  E03F C9          >                        ret
1209  E040              CopyEdgesToUniv:
1210  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1210  E040 2A 0E C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1210  E043 11 14 C4    >                        ld          de,UBnkHullEdges
1210  E046 06 00       >                        ld          b,0
1210  E048 3A 10 C3    >                        ld			a,(LineX4Addr)
1210  E04B 4F          >                        ld          c,a
1210  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1210  E04D CD C5 93    >                        call        memcopy_dma
1210  E050 C9          >                        ret
1211  E051              CopyNormsToUniv:
1212  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1212  E051 2A 1B C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1212  E054 11 DC C4    >                        ld          de,UBnkHullNormals
1212  E057 06 00       >                        ld          b,0
1212  E059 3A 17 C3    >                        ld          a,(FaceCtX4Addr)
1212  E05C 4F          >                        ld          c,a
1212  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1212  E05E CD C5 93    >                        call        memcopy_dma
1212  E061 C9          >                        ret
1213  E062              ShipBankTable:
1214  E062              ShipBankTable1:         MShipBankTable
1214  E062 3B 00       >                        DW      BankShipModels1
1214  E064 43 00       >                        DW      BankShipModels2
1214  E066 44 00       >                        DW      BankShipModels3
1214  E068 45 00       >                        DW      BankShipModels4
1215  E06A              CopyShipToUniverse:
1216  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1216  E06A 21 1B C0    >                        ld          hl,UBnkShipModelBank
1216  E06D 36 3B       >                        ld          (hl),BankShipModels1
1216  E06F 32 1C C0    >                        ld          (UBnkShipModelNbr),a
1216  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1216  E075 ED 31       >                        add         hl,a
1216  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1216  E079 4E          >                        ld          c,(hl)
1216  E07A 23          >                        inc         hl
1216  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1216  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1216  E07F ED 31       >                        add         hl,a
1216  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1216  E083 7E          >                        ld          a,(hl)
1216  E084 23          >                        inc         hl
1216  E085 66          >                        ld          h,(hl)
1216  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1216  E087 11 0B C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1216  E08A 01 19 00    >                        ld          bc,ShipDataLength
1216  E08D ED B0       >                        ldir
1216  E08F CD 2F E0    >                        call        CopyVertsToUniv
1216  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1216  E095 CD 51 E0    >                        call        CopyNormsToUniv
1216  E098 C9          >                        ret
1217  E099              CopyBodyToUniverse:
1218  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1218  E099 3E 0D       >                        ld          a,13
1218  E09B CD 6A E0    >                        call        CopyShipToUniverse1
1218  E09E C9          >                        ret
1219  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00
   3+ E0A1 74 E2                                 DW Anaconda                                ;01
   4+ E0A3 7B E3                                 DW Asp_Mk_2                                ;02
   5+ E0A5 A6 E4                                 DW Boa                                     ;03
   6+ E0A7
   7+ E0A7 9D E5                                 DW CargoType5                              ;04
   8+ E0A9 4A E6                                 DW Boulder                                 ;05
   9+ E0AB F1 E6                                 DW Asteroid                                ;06
  10+ E0AD
  11+ E0AD CC E7                                 DW Bushmaster                              ;07
  12+ E0AF 9D E8                                 DW Chameleon                               ;08
  13+ E0B1 CA E9                                 DW CobraMk3                                ;09
  14+ E0B3 57 EB                                 DW Cobra_Mk_1                              ;10
  15+ E0B5 22 EC                                 DW Cobra_Mk_3_P                            ;11
  16+ E0B7 AF ED                                 DW Constrictor                             ;12
  17+ E0B9 B6 EE                                 DW Coriolis                                ;13
  18+ E0BB D7 EF                                 DW Cougar                                  ;14
  19+ E0BD DE F0                                 DW Dodo                                    ;15
  20+ E0BF              ShipVertexTable:
  21+ E0BF 58 E1        ShipVertexTable1:        DW AdderVertices
  22+ E0C1 8D E2                                 DW AnacondaVertices
  23+ E0C3 94 E3                                 DW Asp_Mk_2Vertices
  24+ E0C5 BF E4                                 DW BoaVertices
  25+ E0C7
  26+ E0C7 B6 E5                                 DW CargoType5Vertices
  27+ E0C9 63 E6                                 DW BoulderVertices
  28+ E0CB 0A E7                                 DW AsteroidVertices
  29+ E0CD
  30+ E0CD E5 E7                                 DW BushmasterVertices
  31+ E0CF B6 E8                                 DW ChameleonVertices
  32+ E0D1 E3 E9                                 DW CobraMk3Vertices
  33+ E0D3 70 EB                                 DW Cobra_Mk_1Vertices
  34+ E0D5 3B EC                                 DW Cobra_Mk_3_PVertices
  35+ E0D7 C8 ED                                 DW ConstrictorVertices
  36+ E0D9 CF EE                                 DW CoriolisVertices
  37+ E0DB F0 EF                                 DW CougarVertices
  38+ E0DD F7 F0                                 DW DodoVertices
  39+ E0DF              ShipEdgeTable:
  40+ E0DF C4 E1        ShipEdgeTable1:          DW AdderEdges
  41+ E0E1 E7 E2                                 DW AnacondaEdges
  42+ E0E3 06 E4                                 DW Asp_Mk_2Edges
  43+ E0E5 0D E5                                 DW BoaEdges
  44+ E0E7
  45+ E0E7 F2 E5                                 DW CargoType5Edges
  46+ E0E9 8D E6                                 DW BoulderEdges
  47+ E0EB 40 E7                                 DW AsteroidEdges
  48+ E0ED
  49+ E0ED 2D E8                                 DW BushmasterEdges
  50+ E0EF 22 E9                                 DW ChameleonEdges
  51+ E0F1 8B EA                                 DW CobraMk3Edges
  52+ E0F3 B2 EB                                 DW Cobra_Mk_1Edges
  53+ E0F5 E3 EC                                 DW Cobra_Mk_3_PEdges
  54+ E0F7 2E EE                                 DW ConstrictorEdges
  55+ E0F9 2F EF                                 DW CoriolisEdges
  56+ E0FB 62 F0                                 DW CougarEdges
  57+ E0FD 87 F1                                 DW DodoEdges
  58+ E0FF              ShipNormalTable:
  59+ E0FF 38 E2        ShipNormalTable1:        DW AdderNormals
  60+ E101 4B E3                                 DW AnacondaNormals
  61+ E103 76 E4                                 DW Asp_Mk_2Normals
  62+ E105 6D E5                                 DW BoaNormals
  63+ E107
  64+ E107 2E E6                                 DW CargoType5Normals
  65+ E109 C9 E6                                 DW BoulderNormals
  66+ E10B 94 E7                                 DW AsteroidNormals
  67+ E10D
  68+ E10D 79 E8                                 DW BushmasterNormals
  69+ E10F 96 E9                                 DW ChameleonNormals
  70+ E111 23 EB                                 DW CobraMk3Normals
  71+ E113 FA EB                                 DW Cobra_Mk_1Normals
  72+ E115 7B ED                                 DW Cobra_Mk_3_PNormals
  73+ E117 8E EE                                 DW ConstrictorNormals
  74+ E119 9F EF                                 DW CoriolisNormals
  75+ E11B C6 F0                                 DW CougarNormals
  76+ E11D 0F F2                                 DW DodoNormals
  77+ E11F              ShipModelSizeTable:
  78+ E11F 35 01        ShipModelSizeTable1:     DW AdderLen
  79+ E121 07 01                                 DW AnacondaLen
  80+ E123 2B 01                                 DW Asp_Mk_2Len
  81+ E125 F7 00                                 DW BoaLen
  82+ E127
  83+ E127 AD 00                                 DW CargoType5Len
  84+ E129 A7 00                                 DW BoulderLen
  85+ E12B DB 00                                 DW AsteroidLen
  86+ E12D
  87+ E12D D1 00                                 DW BushmasterLen
  88+ E12F 2D 01                                 DW ChameleonLen
  89+ E131 8D 01                                 DW CobraMk3Len
  90+ E133 CB 00                                 DW Cobra_Mk_1Len
  91+ E135 8D 01                                 DW Cobra_Mk_3_PLen
  92+ E137 07 01                                 DW ConstrictorLen
  93+ E139 21 01                                 DW CoriolisLen
  94+ E13B 07 01                                 DW CougarLen
  95+ E13D 61 01                                 DW DodoLen
  96+ E13F
  97+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E142 C4 E1                                DW AdderEdges
   3++E144 74                                   DB AdderEdgesSize
   4++E145 00 16                                DB $00, $16
   5++E147 6C                                   DB AdderVertSize
   6++E148 1D                                   DB AdderEdgesCnt
   7++E149 00 28                                DB $00, $28
   8++E14B 3C                                   DB AdderNormalsSize
   9++E14C 17 48 18                             DB $17, $48, $18
  10++E14F 38 E2                                DW AdderNormals
  11++E151 02 21                                DB $02, $21
  12++E153 58 E1                                DW AdderVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  15++E15C 01 BC
  16++E15E 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  16++E162 01 23
  17++E164 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  17++E168 23 45
  18++E16A 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  18++E16E 45 66
  19++E170 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  19++E174 56 7E
  20++E176 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  20++E17A 78 AE
  21++E17C 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  21++E180 89 AA
  22++E182 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  22++E186 9A BC
  23++E188 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  23++E18C 78 9D
  24++E18E 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  24++E192 46 7D
  25++E194 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  25++E198 09 BD
  26++E19A 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  26++E19E 02 4D
  27++E1A0 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  27++E1A4 1A CE
  28++E1A6 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  28++E1AA 13 5E
  29++E1AC 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  29++E1B0 00 00
  30++E1B2 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  30++E1B6 00 00
  31++E1B8 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  31++E1BC 00 00
  32++E1BE 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  32++E1C2 00 00
  33++E1C4              AdderVertSize:          equ $ - AdderVertices
  34++E1C4 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  35++E1C8 07 23 04 08                          DB $07, $23, $04, $08               ;02
  36++E1CC 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  37++E1D0 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  38++E1D4 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  39++E1D8 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  40++E1DC 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  41++E1E0 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  42++E1E4 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  43++E1E8 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  44++E1EC 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  45++E1F0 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  46++E1F4 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  47++E1F8 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  48++E1FC 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  49++E200 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  50++E204 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  51++E208 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  52++E20C 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  53++E210 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  54++E214 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  55++E218 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  56++E21C 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  57++E220 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  58++E224 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  59++E228 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  60++E22C 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  61++E230 04 00 40 44                          DB $04, $00, $40, $44               ;28
  62++E234 03 00 44 38                          DB $03, $00, $44, $38               ;29
  63++E238              AdderEdgesSize:         equ $ - AdderEdges
  64++E238              AdderEdgesCnt:          equ AdderEdgesSize/4
  65++E238 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  66++E23C 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  67++E240 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  68++E244 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  69++E248 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  70++E24C 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  71++E250 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  72++E254 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  73++E258 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  74++E25C 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  75++E260 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  76++E264 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  77++E268 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  78++E26C 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  79++E270 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  80++E274
  81++E274              AdderNormalsSize:       equ $ - AdderNormals
  82++E274              AdderLen:                equ $ - Adder
  83++E274
  84++E274
  85++E274
  86++E274
  87++E274
  88++E274
  89++E274
  90++E274
  91++E274
  92++E274
  93++E274
# file closed: ./Data/ships/Adder.asm
  98+ E274                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E274 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E277 E7 E2                                DW AnacondaEdges
   3++E279 64                                   DB AnacondaEdgesSize
   4++E27A 30 2E                                DB $30, $2E
   5++E27C 5A                                   DB AnacondaVertSize
   6++E27D 19                                   DB AnacondaEdgesCnt
   7++E27E 00 00                                DB $00, $00
   8++E280 30                                   DB AnacondaNormalsSize
   9++E281 24 FC 0E                             DB $24, $FC, $0E
  10++E284 4B E3                                DW AnacondaNormals
  11++E286 01 3F                                DB $01, $3F
  12++E288 8D E2                                DW AnacondaVertices
  13++E28A 00 00                                DB 0,0                      ; Type and Tactics
  14++E28C 01                                   DB ShipCanAnger
  15++E28D 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  15++E291 01 55
  16++E293 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  16++E297 01 22
  17++E299 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  17++E29D 02 33
  18++E29F 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  18++E2A3 03 44
  19++E2A5 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  19++E2A9 04 55
  20++E2AB 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  20++E2AF 15 66
  21++E2B1 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  21++E2B5 12 77
  22++E2B7 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  22++E2BB 23 88
  23++E2BD 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  23++E2C1 34 99
  24++E2C3 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  24++E2C7 45 AA
  25++E2C9 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  25++E2CD FF FF
  26++E2CF 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  26++E2D3 27 88
  27++E2D5 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  27++E2D9 FF FF
  28++E2DB 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  28++E2DF 49 AA
  29++E2E1 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  29++E2E5 FF FF
  30++E2E7              AnacondaVertSize:       equ $ - AnacondaVertices
  31++E2E7 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  32++E2EB 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  33++E2EF 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  34++E2F3 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  35++E2F7 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  36++E2FB 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  37++E2FF 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  38++E303 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  39++E307 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  40++E30B 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  41++E30F 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  42++E313 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  43++E317 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  44++E31B 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  45++E31F 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  46++E323 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  47++E327 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  48++E32B 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  49++E32F 1E 5A 24 38                          DB $1E, $5A, $24, $38
  50++E333 1E 56 14 38                          DB $1E, $56, $14, $38
  51++E337 1E 6B 28 38                          DB $1E, $6B, $28, $38
  52++E33B 1F 7B 28 30                          DB $1F, $7B, $28, $30
  53++E33F 1F 78 2C 30                          DB $1F, $78, $2C, $30
  54++E343 1F 9A 30 34                          DB $1F, $9A, $30, $34
  55++E347 1F AB 30 38                          DB $1F, $AB, $30, $38
  56++E34B              AnacondaEdgesSize:      equ $ - AnacondaEdges
  57++E34B              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  58++E34B 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  59++E34F BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  60++E353 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  61++E357 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  62++E35B 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  63++E35F 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  64++E363 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  65++E367 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  66++E36B DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  67++E36F 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  68++E373 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  69++E377 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  70++E37B              AnacondaNormalsSize:    equ $ - AnacondaNormals
  71++E37B              AnacondaLen:            equ $ - Anaconda
  72++E37B
  73++E37B
  74++E37B
  75++E37B
# file closed: ./Data/ships/Anaconda.asm
  99+ E37B                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E37B 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E37E 06 E4                                DW Asp_Mk_2Edges
   3++E380 70                                   DB Asp_Mk_2EdgesSize
   4++E381 20 1A                                DB $20, $1A
   5++E383 72                                   DB Asp_Mk_2VertSize
   6++E384 1C                                   DB Asp_Mk_2EdgesCnt
   7++E385 00 C8                                DB $00, $C8
   8++E387 30                                   DB Asp_Mk_2NormalsSize
   9++E388 28 96 28                             DB $28, $96, $28
  10++E38B 76 E4                                DW Asp_Mk_2Normals
  11++E38D 01 29                                DB $01, $29
  12++E38F 94 E3                                DW Asp_Mk_2Vertices
  13++E391 00 00                                DB 0,0                      ; Type and Tactics
  14++E393 01                                   DB ShipCanAnger
  15++E394 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  15++E398 01 22
  16++E39A 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  16++E39E 12 BB
  17++E3A0 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  17++E3A4 16 BB
  18++E3A6 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  18++E3AA 16 79
  19++E3AC 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  19++E3B0 01 77
  20++E3B2 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  20++E3B6 25 BB
  21++E3B8 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  21++E3BC 25 8A
  22++E3BE 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  22++E3C2 02 88
  23++E3C4 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  23++E3C8 04 79
  24++E3CA 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  24++E3CE 04 8A
  25++E3D0 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  25++E3D4 34 69
  26++E3D6 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  26++E3DA 34 5A
  27++E3DC 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  27++E3E0 35 6B
  28++E3E2 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  28++E3E6 BB BB
  29++E3E8 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  29++E3EC BB BB
  30++E3EE 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  30++E3F2 BB BB
  31++E3F4 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  31++E3F8 BB BB
  32++E3FA 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  32++E3FE 04 04
  33++E400 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  33++E404 04 04
  34++E406              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  35++E406 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  36++E40A 16 01 00 10                          DB $16, $01, $00, $10           ;02
  37++E40E 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  38++E412 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  39++E416 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  40++E41A 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  41++E41E 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  42++E422 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  43++E426 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  44++E42A 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  45++E42E 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  46++E432 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  47++E436 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  48++E43A 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  49++E43E 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  50++E442 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  51++E446 16 36 28 30                          DB $16, $36, $28, $30           ;17
  52++E44A 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  53++E44E 16 34 28 2C                          DB $16, $34, $28, $2C
  54++E452 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  55++E456 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  56++E45A 1F 69 0C 28                          DB $1F, $69, $0C, $28
  57++E45E 1F 49 20 28                          DB $1F, $49, $20, $28
  58++E462 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  59++E466 09 BB 3C 38                          DB $09, $BB, $3C, $38
  60++E46A 08 BB 38 40                          DB $08, $BB, $38, $40
  61++E46E 08 BB 40 34                          DB $08, $BB, $40, $34
  62++E472 0A 04 48 44                          DB $0A, $04, $48, $44
  63++E476              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  64++E476              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  65++E476 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  66++E47A 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  67++E47E FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  68++E482 36 00 18 01                          DB $36, $00, $18, $01           ;04
  69++E486 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  70++E48A BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  71++E48E 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  72++E492 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  73++E496 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  74++E49A 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  75++E49E 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  76++E4A2 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  77++E4A6              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  78++E4A6              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  79++E4A6
  80++E4A6
  81++E4A6
  82++E4A6
# file closed: ./Data/ships/Asp_Mk_2.asm
 100+ E4A6                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4A6 05 13 24     Boa:	                DB $05, $13, $24
   2++E4A9 0D E5                                DW BoaEdges
   3++E4AB 60                                   DB BoaEdgesSize
   4++E4AC 00 26                                DB $00, $26
   5++E4AE 4E                                   DB BoaVertSize
   6++E4AF 18                                   DB BoaEdgesCnt
   7++E4B0 00 00                                DB $00, $00
   8++E4B2 30                                   DB BoaNormalsSize
   9++E4B3 28 FA 18                             DB $28, $FA, $18
  10++E4B6 6D E5                                DW BoaNormals
  11++E4B8 00 1C                                DB $00, $1C
  12++E4BA BF E4                                DW BoaVertices
  13++E4BC 00 00                                DB 0,0                      ; Type and Tactics
  14++E4BE 01                                   DB ShipCanAnger
  15++E4BF 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  15++E4C3 FF FF
  16++E4C5 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  16++E4C9 02 33
  17++E4CB 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  17++E4CF 01 44
  18++E4D1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  18++E4D5 12 55
  19++E4D7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  19++E4DB 23 69
  20++E4DD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  20++E4E1 03 6B
  21++E4E3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  21++E4E7 04 8B
  22++E4E9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  22++E4ED 14 8A
  23++E4EF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  23++E4F3 15 7A
  24++E4F5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  24++E4F9 25 79
  25++E4FB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  25++E4FF 02 AA
  26++E501 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  26++E505 01 AA
  27++E507 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  27++E50B 12 CC
  28++E50D              BoaVertSize:            equ $ - BoaVertices
  29++E50D 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  30++E511 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  31++E515 1F 79 00 24                          DB $1F, $79, $00, $24
  32++E519 1D 69 00 10                          DB $1D, $69, $00, $10
  33++E51D 1D 8B 00 18                          DB $1D, $8B, $00, $18
  34++E521 1D 7A 00 20                          DB $1D, $7A, $00, $20
  35++E525 1F 36 10 14                          DB $1F, $36, $10, $14
  36++E529 1F 0B 14 18                          DB $1F, $0B, $14, $18
  37++E52D 1F 48 18 1C                          DB $1F, $48, $18, $1C
  38++E531 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  39++E535 1F 57 20 24                          DB $1F, $57, $20, $24
  40++E539 1F 29 10 24                          DB $1F, $29, $10, $24
  41++E53D 18 23 04 10                          DB $18, $23, $04, $10
  42++E541 18 03 04 14                          DB $18, $03, $04, $14
  43++E545 18 25 0C 24                          DB $18, $25, $0C, $24
  44++E549 18 15 0C 20                          DB $18, $15, $0C, $20
  45++E54D 18 04 08 18                          DB $18, $04, $08, $18
  46++E551 18 14 08 1C                          DB $18, $14, $08, $1C
  47++E555 16 02 04 28                          DB $16, $02, $04, $28
  48++E559 16 01 08 2C                          DB $16, $01, $08, $2C
  49++E55D 16 12 0C 30                          DB $16, $12, $0C, $30
  50++E561 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  51++E565 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  52++E569 0E 2C 30 28                          DB $0E, $2C, $30, $28
  53++E56D              BoaEdgesSize:           equ $ - BoaEdges
  54++E56D              BoaEdgesCnt:            equ BoaEdgesSize/4
  55++E56D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  56++E571 7F 00 2D 59                          DB $7F, $00, $2D, $59
  57++E575 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  58++E579 1F 00 28 00                          DB $1F, $00, $28, $00
  59++E57D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  60++E581 FF 3E 20 14                          DB $FF, $3E, $20, $14
  61++E585 1F 00 17 06                          DB $1F, $00, $17, $06
  62++E589 DF 17 0F 09                          DB $DF, $17, $0F, $09
  63++E58D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  64++E591 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  65++E595 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  66++E599 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  67++E59D              BoaNormalsSize:         equ $ - BoaNormals
  68++E59D              BoaLen:                 equ $ - Boa
  69++E59D
# file closed: ./Data/ships/Boa.asm
 101+ E59D
 102+ E59D                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E59D              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E59D              ; Corrected pointers
   3++E59D              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E59D              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E59D              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E59D              ;;;				 Example of cargo
   7++E59D              ;;;
   8++E59D              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E59D              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E59D              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E59D              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E59D              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E59D              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E59D              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E59D              ;;;		Edges
  16++E59D              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E59D              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E59D              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E59D              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E59D              ;;;	  	Normals (Faces)
  21++E59D              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E59D              ;;;		Byte 1 = X Lo
  23++E59D              ;;;		Byte 2 = Y Lo
  24++E59D              ;;;		Byte 3 = Z Lo
  25++E59D
  26++E59D 00 90 01     CargoType5              DB $00, $90, $01
  27++E5A0 F2 E5                                DW CargoType5Edges
  28++E5A2 3C                                   DB CargoType5EdgesSize
  29++E5A3 00 12                                DB $00,$12
  30++E5A5 3C                                   DB CargoType5VertSize
  31++E5A6 0F                                   DB CargoType5EdgesCnt
  32++E5A7 00 00                                DB $00,$00
  33++E5A9 1C                                   DB CargoType5NormalsSize
  34++E5AA 0C 11 0F                             DB $0C,$11,$0F
  35++E5AD 2E E6                                DW CargoType5Normals
  36++E5AF 02 00                                DB $02,$00
  37++E5B1 B6 E5                                DW CargoType5Vertices
  38++E5B3 03                                   DB ShipTypeJunk             ; Type
  39++E5B4 00                                   DB 0                        ; Tactics
  40++E5B5 00                                   DB 0
  41++E5B6              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  42++E5B6 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  42++E5BA 10 55
  43++E5BC 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  43++E5C0 10 22
  44++E5C2 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  44++E5C6 20 33
  45++E5C8 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  45++E5CC 30 44
  46++E5CE 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  46++E5D2 40 55
  47++E5D4 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  47++E5D8 51 66
  48++E5DA 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  48++E5DE 21 66
  49++E5E0 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  49++E5E4 32 66
  50++E5E6 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  50++E5EA 43 66
  51++E5EC 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  51++E5F0 54 66
  52++E5F2              CargoType5VertSize      equ $  - CargoType5Vertices
  53++E5F2 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  53++E5F6 1F 20 04 08
  54++E5FA 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  54++E5FE 1F 40 0C 10
  55++E602 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  55++E606 1F 51 00 14
  56++E60A 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  56++E60E 1F 32 08 1C
  57++E612 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  57++E616 1F 54 10 24
  58++E61A 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  58++E61E 1F 62 18 1C
  59++E622 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  59++E626 1F 64 20 24
  60++E62A 1F 65 24 14                          DB $1F,$65,$24,$14
  61++E62E              CargoType5EdgesSize     equ $  - CargoType5Edges
  62++E62E              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  63++E62E 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  64++E632 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  64++E636 5F 00 12 30
  65++E63A 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  65++E63E 7F 00 12 30
  66++E642 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  66++E646 9F 60 00 00
  67++E64A              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E64A              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
 103+ E64A                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E64A 00 03 84     Boulder:	            DB $00, $03, $84
   2++E64D 8D E6                                DW BoulderEdges
   3++E64F 3C                                   DB BoulderEdgesSize
   4++E650 00 0E                                DB $00, $0E
   5++E652 2A                                   DB BoulderVertSize
   6++E653 0F                                   DB BoulderEdgesCnt
   7++E654 00 01                                DB $00, $01
   8++E656 28                                   DB BoulderNormalsSize
   9++E657 14 14 1E                             DB $14, $14, $1E
  10++E65A C9 E6                                DW BoulderNormals
  11++E65C 02 00                                DB $02, $00
  12++E65E 63 E6                                DW BoulderVertices
  13++E660 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  14++E662 00                                   DB 0
  15++E663 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  15++E667 01 59
  16++E669 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  16++E66D 12 56
  17++E66F 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  17++E673 23 67
  18++E675 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  18++E679 34 78
  19++E67B 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  19++E67F 04 89
  20++E681 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  20++E685 FF FF
  21++E687 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  21++E68B FF FF
  22++E68D              BoulderVertSize:        equ $ - BoulderVertices
  23++E68D 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  24++E691 1F 26 04 08                          DB $1F, $26, $04, $08
  25++E695 1F 37 08 0C                          DB $1F, $37, $08, $0C
  26++E699 1F 48 0C 10                          DB $1F, $48, $0C, $10
  27++E69D 1F 09 10 00                          DB $1F, $09, $10, $00
  28++E6A1 1F 01 00 14                          DB $1F, $01, $00, $14
  29++E6A5 1F 12 04 14                          DB $1F, $12, $04, $14
  30++E6A9 1F 23 08 14                          DB $1F, $23, $08, $14
  31++E6AD 1F 34 0C 14                          DB $1F, $34, $0C, $14
  32++E6B1 1F 04 10 14                          DB $1F, $04, $10, $14
  33++E6B5 1F 59 00 18                          DB $1F, $59, $00, $18
  34++E6B9 1F 56 04 18                          DB $1F, $56, $04, $18
  35++E6BD 1F 67 08 18                          DB $1F, $67, $08, $18
  36++E6C1 1F 78 0C 18                          DB $1F, $78, $0C, $18
  37++E6C5 1F 89 10 18                          DB $1F, $89, $10, $18
  38++E6C9              BoulderEdgesSize:       equ $ - BoulderEdges
  39++E6C9              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  40++E6C9 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  41++E6CD 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  42++E6D1 5F 20 2F 18                          DB $5F, $20, $2F, $18
  43++E6D5 FF 03 27 07                          DB $FF, $03, $27, $07
  44++E6D9 FF 05 04 01                          DB $FF, $05, $04, $01
  45++E6DD 1F 31 54 08                          DB $1F, $31, $54, $08
  46++E6E1 3F 70 15 15                          DB $3F, $70, $15, $15
  47++E6E5 7F 4C 23 52                          DB $7F, $4C, $23, $52
  48++E6E9 3F 16 38 89                          DB $3F, $16, $38, $89
  49++E6ED 3F 28 6E 26                          DB $3F, $28, $6E, $26
  50++E6F1              BoulderNormalsSize:     equ $ - BoulderNormals
  51++E6F1              BoulderLen:             equ $ - Boulder
  52++E6F1
# file closed: ./Data/ships/Boulder.asm
 104+ E6F1                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6F1 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E6F4 40 E7                                DW AsteroidEdges
   3++E6F6 54                                   DB AsteroidEdgesSize
   4++E6F7 00 22                                DB $00, $22
   5++E6F9 36                                   DB AsteroidVertSize
   6++E6FA 15                                   DB AsteroidEdgesCnt
   7++E6FB 00 05                                DB $00, $05
   8++E6FD 38                                   DB AsteroidNormalsSize
   9++E6FE 32 3C 1E                             DB $32, $3C, $1E
  10++E701 94 E7                                DW AsteroidNormals
  11++E703 01 00                                DB $01, $00
  12++E705 0A E7                                DW AsteroidVertices
  13++E707 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  14++E709 00                                   DB 0
  15++E70A 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  15++E70E FF FF
  16++E710 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  16++E714 FF FF
  17++E716 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  17++E71A FF FF
  18++E71C 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  18++E720 FF FF
  19++E722 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  19++E726 65 DC
  20++E728 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  20++E72C FF FF
  21++E72E 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  21++E732 10 32
  22++E734 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  22++E738 FF FF
  23++E73A 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  23++E73E 98 BA
  24++E740              AsteroidVertSize:       equ $ - AsteroidVertices
  25++E740 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  26++E744 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  27++E748 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  28++E74C 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  29++E750 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  30++E754 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  31++E758 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  32++E75C 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  33++E760 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  34++E764 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  35++E768 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  36++E76C 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  37++E770 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  38++E774 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  39++E778 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  40++E77C 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  41++E780 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  42++E784 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  43++E788 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  44++E78C 1F BA 08 20                          DB $1F, $BA, $08, $20
  45++E790 1F 98 1C 20                          DB $1F, $98, $1C, $20
  46++E794
  47++E794              AsteroidEdgesSize:      equ $ - AsteroidEdges
  48++E794              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  49++E794 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  50++E798 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  51++E79C 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  52++E7A0 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  53++E7A4 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  54++E7A8 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  55++E7AC 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  56++E7B0 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  57++E7B4 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  58++E7B8 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  59++E7BC FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  60++E7C0 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  61++E7C4 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  62++E7C8 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  63++E7CC              AsteroidNormalsSize:    equ $ - AsteroidNormals
  64++E7CC              AsteroidLen:            equ $ - Asteroid
  65++E7CC
  66++E7CC
# file closed: ./Data/ships/Asteroid.asm
 105+ E7CC
 106+ E7CC                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7CC 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E7CF 2D E8                                DW BushmasterEdges
   3++E7D1 4C                                   DB BushmasterEdgesSize
   4++E7D2 00 1E                                DB $00, $1E
   5++E7D4 48                                   DB BushmasterVertSize
   6++E7D5 13                                   DB BushmasterEdgesCnt
   7++E7D6 00 96                                DB $00, $96
   8++E7D8 24                                   DB BushmasterNormalsSize
   9++E7D9 14 4A 23                             DB $14, $4A, $23
  10++E7DC 79 E8                                DW BushmasterNormals
  11++E7DE 02 21                                DB $02, $21
  12++E7E0 E5 E7                                DW BushmasterVertices
  13++E7E2 00 00                                DB 0,0                      ; Type and Tactics
  14++E7E4 01                                   DB ShipCanAnger
  15++E7E5 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  15++E7E9 23 01
  16++E7EB 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  16++E7EF 57 13
  17++E7F1 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  17++E7F5 46 02
  18++E7F7 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  18++E7FB 45 01
  19++E7FD 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  19++E801 FF FF
  20++E803 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  20++E807 88 45
  21++E809 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  21++E80D 88 57
  22++E80F 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  22++E813 88 46
  23++E815 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  23++E819 88 88
  24++E81B 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  24++E81F 88 88
  25++E821 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  25++E825 88 88
  26++E827 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  26++E82B 88 88
  27++E82D              BushmasterVertSize:     equ $ - BushmasterVertices
  28++E82D 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  29++E831 1F 02 00 08                          DB $1F, $02, $00, $08
  30++E835 1F 01 00 0C                          DB $1F, $01, $00, $0C
  31++E839 1F 23 00 10                          DB $1F, $23, $00, $10
  32++E83D 1F 45 0C 14                          DB $1F, $45, $0C, $14
  33++E841 1F 04 08 0C                          DB $1F, $04, $08, $0C
  34++E845 1F 15 04 0C                          DB $1F, $15, $04, $0C
  35++E849 1F 46 08 1C                          DB $1F, $46, $08, $1C
  36++E84D 1F 57 04 18                          DB $1F, $57, $04, $18
  37++E851 1F 26 08 10                          DB $1F, $26, $08, $10
  38++E855 1F 37 04 10                          DB $1F, $37, $04, $10
  39++E859 1F 48 14 1C                          DB $1F, $48, $14, $1C
  40++E85D 1F 58 14 18                          DB $1F, $58, $14, $18
  41++E861 1F 68 10 1C                          DB $1F, $68, $10, $1C
  42++E865 1F 78 10 18                          DB $1F, $78, $10, $18
  43++E869 0A 88 20 24                          DB $0A, $88, $20, $24
  44++E86D 0A 88 24 28                          DB $0A, $88, $24, $28
  45++E871 0A 88 28 2C                          DB $0A, $88, $28, $2C
  46++E875 0A 88 2C 20                          DB $0A, $88, $2C, $20
  47++E879              BushmasterEdgesSize:    equ $ - BushmasterEdges
  48++E879              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  49++E879 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  50++E87D 1F 17 58 1D                          DB $1F, $17, $58, $1D
  51++E881 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  52++E885 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  53++E889 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  54++E88D 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  55++E891 FF 2A 55 07                          DB $FF, $2A, $55, $07
  56++E895 7F 2A 55 07                          DB $7F, $2A, $55, $07
  57++E899 3F 00 00 60                          DB $3F, $00, $00, $60
  58++E89D              BushmasterNormalsSize:  equ $ - BushmasterNormals
  59++E89D              BushmasterLen:          equ $ - Bushmaster
  60++E89D
# file closed: ./Data/ships/Bushmaster.asm
 107+ E89D                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E89D 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E8A0 22 E9                                DW ChameleonEdges
   3++E8A2 74                                   DB ChameleonEdgesSize
   4++E8A3 00 1A                                DB $00, $1A
   5++E8A5 6C                                   DB ChameleonVertSize
   6++E8A6 1D                                   DB ChameleonEdgesCnt
   7++E8A7 00 C8                                DB $00, $C8
   8++E8A9 34                                   DB ChameleonNormalsSize
   9++E8AA 0A 64 1D                             DB $0A, $64, $1D
  10++E8AD 96 E9                                DW ChameleonNormals
  11++E8AF 01 23                                DB $01, $23
  12++E8B1 B6 E8                                DW ChameleonVertices
  13++E8B3 00 00                                DB 0,0                      ; Type and Tactics
  14++E8B5 01                                   DB ShipCanAnger
  15++E8B6 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  15++E8BA 25 01
  16++E8BC 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  16++E8C0 34 01
  17++E8C2 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  17++E8C6 8B 25
  18++E8C8 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  18++E8CC 68 22
  19++E8CE 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  19++E8D2 69 33
  20++E8D4 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  20++E8D8 9A 34
  21++E8DA 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  21++E8DE 7A 44
  22++E8E0 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  22++E8E4 7B 55
  23++E8E6 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  23++E8EA 36 02
  24++E8EC 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  24++E8F0 57 14
  25++E8F2 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  25++E8F6 BC 88
  26++E8F8 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  26++E8FC 9C 68
  27++E8FE 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  27++E902 AC 99
  28++E904 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  28++E908 BC 7A
  29++E90A 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  29++E90E CC CC
  30++E910 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  30++E914 CC CC
  31++E916 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  31++E91A CC CC
  32++E91C 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  32++E920 CC CC
  33++E922              ChameleonVertSize:      equ $ - ChameleonVertices
  34++E922 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  35++E926 1F 02 00 20                          DB $1F, $02, $00, $20
  36++E92A 1F 15 00 24                          DB $1F, $15, $00, $24
  37++E92E 1F 03 04 20                          DB $1F, $03, $04, $20
  38++E932 1F 14 04 24                          DB $1F, $14, $04, $24
  39++E936 1F 34 04 14                          DB $1F, $34, $04, $14
  40++E93A 1F 25 00 08                          DB $1F, $25, $00, $08
  41++E93E 1F 26 0C 20                          DB $1F, $26, $0C, $20
  42++E942 1F 36 10 20                          DB $1F, $36, $10, $20
  43++E946 1F 75 1C 24                          DB $1F, $75, $1C, $24
  44++E94A 1F 74 18 24                          DB $1F, $74, $18, $24
  45++E94E 1F 39 10 14                          DB $1F, $39, $10, $14
  46++E952 1F 4A 14 18                          DB $1F, $4A, $14, $18
  47++E956 1F 28 08 0C                          DB $1F, $28, $08, $0C
  48++E95A 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  49++E95E 1F 8B 08 28                          DB $1F, $8B, $08, $28
  50++E962 1F 9A 14 30                          DB $1F, $9A, $14, $30
  51++E966 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  52++E96A 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  53++E96E 1F 69 10 2C                          DB $1F, $69, $10, $2C
  54++E972 1F 7A 18 34                          DB $1F, $7A, $18, $34
  55++E976 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  56++E97A 1F BC 28 34                          DB $1F, $BC, $28, $34
  57++E97E 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  58++E982 1F AC 30 34                          DB $1F, $AC, $30, $34
  59++E986 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  60++E98A 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  61++E98E 0A CC 40 44                          DB $0A, $CC, $40, $44
  62++E992 0A CC 44 38                          DB $0A, $CC, $44, $38
  63++E996              ChameleonEdgesSize:     equ $ - ChameleonEdges
  64++E996              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  65++E996 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  66++E99A 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  67++E99E 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  68++E9A2 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  69++E9A6 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  70++E9AA DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  71++E9AE 1F 00 60 00                          DB $1F, $00, $60, $00
  72++E9B2 5F 00 60 00                          DB $5F, $00, $60, $00
  73++E9B6 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  74++E9BA 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  75++E9BE 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  76++E9C2 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  77++E9C6 3F 00 00 60                          DB $3F, $00, $00, $60
  78++E9CA              ChameleonNormalsSize:   equ $ - ChameleonNormals
  79++E9CA              ChameleonLen:           equ $ - Chameleon
  80++E9CA
# file closed: ./Data/ships/Chameleon.asm
 108+ E9CA                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9CA              ; Corrected pointers
   2++E9CA              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9CA              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9CA              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9CA 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9CD 8B EA                                DW CobraMk3Edges
   7++E9CF 98                                   DB CobraMkEdgesSize
   8++E9D0 54 2A                                DB $54,$2A
   9++E9D2 A8                                   DB CobraMkVertSize
  10++E9D3 26                                   DB CobraMkEdgesCnt
  11++E9D4 00 00                                DB $00,$00
  12++E9D6 34                                   DB CobraMk3NormalsSize
  13++E9D7 32 96 1C                             DB $32,$96,$1C
  14++E9DA 23 EB                                DW CobraMk3Normals
  15++E9DC 01 13                                DB $01,$13
  16++E9DE E3 E9                                DW CobraMk3Vertices
  17++E9E0 00 00                                DB 0,0                      ; Type and Tactics
  18++E9E2 01                                   DB ShipCanAnger
  19++E9E3                                  ; missiles = 3
  20++E9E3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  20++E9E7 FF FF
  21++E9E9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  21++E9ED FF FF
  22++E9EF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  22++E9F3 FF FF
  23++E9F5 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  23++E9F9 73 AA
  24++E9FB 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  24++E9FF 84 CC
  25++EA01 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  25++EA05 FF FF
  26++EA07 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  26++EA0B FF FF
  27++EA0D 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  27++EA11 98 CC
  28++EA13 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  28++EA17 97 AA
  29++EA19 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  29++EA1D 65 99
  30++EA1F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  30++EA23 A9 BB
  31++EA25 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  31++EA29 B9 CC
  32++EA2B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  32++EA2F 99 99
  33++EA31 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  33++EA35 99 99
  34++EA37 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  34++EA3B 99 99
  35++EA3D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  35++EA41 99 99
  36++EA43 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  36++EA47 99 99
  37++EA49 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  37++EA4D 99 99
  38++EA4F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  38++EA53 99 99
  39++EA55 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  39++EA59 99 99
  40++EA5B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  40++EA5F B0 BB
  41++EA61 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  41++EA65 B0 BB
  42++EA67 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  42++EA6B 99 99
  43++EA6D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  43++EA71 99 99
  44++EA73 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  44++EA77 99 99
  45++EA79 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  45++EA7D 99 99
  46++EA7F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  46++EA83 99 99
  47++EA85 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  47++EA89 99 99
  48++EA8B              CobraMkVertSize         equ $  - CobraMk3Vertices
  49++EA8B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  49++EA8F 1F C4 00 10
  50++EA93 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  50++EA97 1F A7 0C 20
  51++EA9B 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  51++EA9F 1F 98 18 1C
  52++EAA3 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  52++EAA7 1F 95 14 24
  53++EAAB 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  53++EAAF 1F 51 08 14
  54++EAB3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  54++EAB7 1F 73 0C 14
  55++EABB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  55++EABF 1F 10 04 08
  56++EAC3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  56++EAC7 1F A9 20 28
  57++EACB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  57++EACF 1F C9 1C 2C
  58++EAD3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  58++EAD7 1F CB 00 2C
  59++EADB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  59++EADF 1D 42 00 18
  60++EAE3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  60++EAE7 14 99 30 34
  61++EAEB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  61++EAEF 14 99 38 3C
  62++EAF3 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  62++EAF7 13 99 3C 40
  63++EAFB 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  63++EAFF 13 99 34 48
  64++EB03 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  64++EB07 1E 65 08 24
  65++EB0B 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  65++EB0F 06 99 5C 60
  66++EB13 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  66++EB17 06 99 64 68
  67++EB1B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  67++EB1F 08 99 64 6C
  68++EB23              CobraMkEdgesSize        equ $  - CobraMk3Edges
  69++EB23              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  70++EB23              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  71++EB23 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  72++EB27 9F 12 37 10                          DB $9F,$12,$37,$10
  73++EB2B 1F 12 37 10                          DB $1F,$12,$37,$10
  74++EB2F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  75++EB33 1F 10 34 0E                          DB $1F,$10,$34,$0E
  76++EB37 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  77++EB3B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  78++EB3F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  79++EB43 1F 3D 66 00                          DB $1F,$3D,$66,$00
  80++EB47 3F 00 00 50                          DB $3F,$00,$00,$50
  81++EB4B DF 07 2A 09                          DB $DF,$07,$2A,$09
  82++EB4F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  83++EB53 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  84++EB57              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  85++EB57              CobraMk3Len             equ $  - CobraMk3
  86++EB57
# file closed: ./Data/ships/CobraMk3.asm
 109+ EB57                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB57 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB5A B2 EB                                DW Cobra_Mk_1Edges
   3++EB5C 48                                   DB Cobra_Mk_1EdgesSize
   4++EB5D 28 1A                                DB $28, $1A
   5++EB5F 42                                   DB Cobra_Mk_1VertSize
   6++EB60 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB61 00 4B                                DB $00, $4B
   8++EB63 28                                   DB Cobra_Mk_1NormalsSize
   9++EB64 13 51 1A                             DB $13, $51, $1A
  10++EB67 FA EB                                DW Cobra_Mk_1Normals
  11++EB69 02 22                                DB $02, $22
  12++EB6B 70 EB                                DW Cobra_Mk_1Vertices
  13++EB6D 00 00                                DB 0,0                      ; Type and Tactics
  14++EB6F 01                                   DB ShipCanAnger
  15++EB70 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  15++EB74 01 23
  16++EB76 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  16++EB7A 01 45
  17++EB7C 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  17++EB80 23 88
  18++EB82 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  18++EB86 45 99
  19++EB88 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  19++EB8C 26 78
  20++EB8E 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  20++EB92 46 79
  21++EB94 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  21++EB98 13 78
  22++EB9A 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  22++EB9E 15 79
  23++EBA0 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  23++EBA4 02 46
  24++EBA6 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  24++EBAA 01 11
  25++EBAC 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  25++EBB0 01 11
  26++EBB2              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  27++EBB2 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  28++EBB6 1F 23 00 08                          DB $1F, $23, $00, $08
  29++EBBA 1F 38 08 18                          DB $1F, $38, $08, $18
  30++EBBE 1F 17 18 1C                          DB $1F, $17, $18, $1C
  31++EBC2 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  32++EBC6 1F 45 0C 04                          DB $1F, $45, $0C, $04
  33++EBCA 1F 28 08 10                          DB $1F, $28, $08, $10
  34++EBCE 1F 67 10 14                          DB $1F, $67, $10, $14
  35++EBD2 1F 49 14 0C                          DB $1F, $49, $14, $0C
  36++EBD6 14 02 00 20                          DB $14, $02, $00, $20
  37++EBDA 14 04 20 04                          DB $14, $04, $20, $04
  38++EBDE 10 26 10 20                          DB $10, $26, $10, $20
  39++EBE2 10 46 20 14                          DB $10, $46, $20, $14
  40++EBE6 1F 78 10 18                          DB $1F, $78, $10, $18
  41++EBEA 1F 79 14 1C                          DB $1F, $79, $14, $1C
  42++EBEE 14 13 00 18                          DB $14, $13, $00, $18
  43++EBF2 14 15 04 1C                          DB $14, $15, $04, $1C
  44++EBF6 02 01 28 24                          DB $02, $01, $28, $24
  45++EBFA              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  46++EBFA              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  47++EBFA 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  48++EBFE 5F 00 1B 03                          DB $5F, $00, $1B, $03
  49++EC02 9F 08 2E 08                          DB $9F, $08, $2E, $08
  50++EC06 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  51++EC0A 1F 08 2E 08                          DB $1F, $08, $2E, $08
  52++EC0E 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  53++EC12 1F 00 31 00                          DB $1F, $00, $31, $00
  54++EC16 3F 00 00 9A                          DB $3F, $00, $00, $9A
  55++EC1A BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  56++EC1E 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  57++EC22              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  58++EC22              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  59++EC22
# file closed: ./Data/ships/Cobra_Mk_1.asm
 110+ EC22                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC22 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC25 E3 EC                                DW Cobra_Mk_3_PEdges
   3++EC27 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC28 54 2A                                DB $54, $2A
   5++EC2A A8                                   DB Cobra_Mk_3_PVertSize
   6++EC2B 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC2C 00 AF                                DB $00, $AF
   8++EC2E 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC2F 32 96 1C                             DB $32, $96, $1C
  10++EC32 7B ED                                DW Cobra_Mk_3_PNormals
  11++EC34 01 12                                DB $01, $12
  12++EC36 3B EC                                DW Cobra_Mk_3_PVertices
  13++EC38 00 00                                DB 0,0                      ; Type and Tactics
  14++EC3A 01                                   DB ShipCanAnger
  15++EC3B 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  15++EC3F FF FF
  16++EC41 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  16++EC45 FF FF
  17++EC47 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  17++EC4B FF FF
  18++EC4D 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  18++EC51 73 AA
  19++EC53 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  19++EC57 84 CC
  20++EC59 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  20++EC5D FF FF
  21++EC5F 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  21++EC63 FF FF
  22++EC65 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  22++EC69 98 CC
  23++EC6B 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  23++EC6F 97 AA
  24++EC71 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  24++EC75 65 99
  25++EC77 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  25++EC7B A9 BB
  26++EC7D 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  26++EC81 B9 CC
  27++EC83 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  27++EC87 99 99
  28++EC89 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  28++EC8D 99 99
  29++EC8F 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  29++EC93 99 99
  30++EC95 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  30++EC99 99 99
  31++EC9B 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  31++EC9F 99 99
  32++ECA1 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  32++ECA5 99 99
  33++ECA7 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  33++ECAB 99 99
  34++ECAD 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  34++ECB1 99 99
  35++ECB3 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  35++ECB7 B0 BB
  36++ECB9 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  36++ECBD B0 BB
  37++ECBF 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  37++ECC3 99 99
  38++ECC5 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  38++ECC9 99 99
  39++ECCB 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  39++ECCF 99 99
  40++ECD1 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  40++ECD5 99 99
  41++ECD7 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  41++ECDB 99 99
  42++ECDD 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  42++ECE1 99 99
  43++ECE3              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  44++ECE3 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  45++ECE7 1F C4 00 10                          DB $1F, $C4, $00, $10
  46++ECEB 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  47++ECEF 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  48++ECF3 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  49++ECF7 1F 98 18 1C                          DB $1F, $98, $18, $1C
  50++ECFB 1F 96 18 24                          DB $1F, $96, $18, $24
  51++ECFF 1F 95 14 24                          DB $1F, $95, $14, $24
  52++ED03 1F 97 14 20                          DB $1F, $97, $14, $20
  53++ED07 1F 51 08 14                          DB $1F, $51, $08, $14
  54++ED0B 1F 62 08 18                          DB $1F, $62, $08, $18
  55++ED0F 1F 73 0C 14                          DB $1F, $73, $0C, $14
  56++ED13 1F 84 10 18                          DB $1F, $84, $10, $18
  57++ED17 1F 10 04 08                          DB $1F, $10, $04, $08
  58++ED1B 1F 20 00 08                          DB $1F, $20, $00, $08
  59++ED1F 1F A9 20 28                          DB $1F, $A9, $20, $28
  60++ED23 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  61++ED27 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  62++ED2B 1F BA 04 28                          DB $1F, $BA, $04, $28
  63++ED2F 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  64++ED33 1D 31 04 14                          DB $1D, $31, $04, $14
  65++ED37 1D 42 00 18                          DB $1D, $42, $00, $18
  66++ED3B 06 B0 50 54                          DB $06, $B0, $50, $54
  67++ED3F 14 99 30 34                          DB $14, $99, $30, $34
  68++ED43 14 99 48 4C                          DB $14, $99, $48, $4C
  69++ED47 14 99 38 3C                          DB $14, $99, $38, $3C
  70++ED4B 14 99 40 44                          DB $14, $99, $40, $44
  71++ED4F 13 99 3C 40                          DB $13, $99, $3C, $40
  72++ED53 11 99 38 44                          DB $11, $99, $38, $44
  73++ED57 13 99 34 48                          DB $13, $99, $34, $48
  74++ED5B 13 99 30 4C                          DB $13, $99, $30, $4C
  75++ED5F 1E 65 08 24                          DB $1E, $65, $08, $24
  76++ED63 06 99 58 60                          DB $06, $99, $58, $60
  77++ED67 06 99 5C 60                          DB $06, $99, $5C, $60
  78++ED6B 08 99 58 5C                          DB $08, $99, $58, $5C
  79++ED6F 06 99 64 68                          DB $06, $99, $64, $68
  80++ED73 06 99 68 6C                          DB $06, $99, $68, $6C
  81++ED77 08 99 64 6C                          DB $08, $99, $64, $6C
  82++ED7B              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  83++ED7B              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  84++ED7B 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  85++ED7F 9F 12 37 10                          DB $9F, $12, $37, $10
  86++ED83 1F 12 37 10                          DB $1F, $12, $37, $10
  87++ED87 9F 10 34 0E                          DB $9F, $10, $34, $0E
  88++ED8B 1F 10 34 0E                          DB $1F, $10, $34, $0E
  89++ED8F 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  90++ED93 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  91++ED97 9F 3D 66 00                          DB $9F, $3D, $66, $00
  92++ED9B 1F 3D 66 00                          DB $1F, $3D, $66, $00
  93++ED9F 3F 00 00 50                          DB $3F, $00, $00, $50
  94++EDA3 DF 07 2A 09                          DB $DF, $07, $2A, $09
  95++EDA7 5F 00 1E 06                          DB $5F, $00, $1E, $06
  96++EDAB 5F 07 2A 09                          DB $5F, $07, $2A, $09
  97++EDAF              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  98++EDAF              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  99++EDAF
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 111+ EDAF                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDAF              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDAF              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDAF              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDAF F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDB2 2E EE                                DW ConstrictorEdges
   6++EDB4 60                                   DB ConstrictorEdgesSize
   7++EDB5 00 2E                                DB $00,$2E
   8++EDB7 66                                   DB ConstrictorVertSize
   9++EDB8 18                                   DB ConstrictorEdgesCnt
  10++EDB9 18 00                                DB $18,$00
  11++EDBB 28                                   DB ConstrictorNormalsSize
  12++EDBC 2D C8 37                             DB $2D,$C8,$37
  13++EDBF 8E EE                                DW ConstrictorNormals
  14++EDC1 02 2F                                DB $02,$2F
  15++EDC3 C8 ED                                DW ConstrictorVertices
  16++EDC5 00 00                                DB 0,0                      ; Type and Tactics
  17++EDC7                                  ; missiles = 3
  18++EDC7 01                                   DB ShipCanAnger
  19++EDC8 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  19++EDCC 02 99
  20++EDCE 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  20++EDD2 01 99
  21++EDD4 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  21++EDD8 14 99
  22++EDDA 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  22++EDDE 45 89
  23++EDE0 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  23++EDE4 56 88
  24++EDE6 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  24++EDEA 67 88
  25++EDEC 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  25++EDF0 37 89
  26++EDF2 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  26++EDF6 23 99
  27++EDF8 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  27++EDFC FF FF
  28++EDFE 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  28++EE02 FF FF
  29++EE04 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  29++EE08 99 99
  30++EE0A 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  30++EE0E 99 99
  31++EE10 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  31++EE14 99 99
  32++EE16 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  32++EE1A 99 99
  33++EE1C 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  33++EE20 99 99
  34++EE22 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  34++EE26 99 99
  35++EE28 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  35++EE2C 9F 01
  36++EE2E              ConstrictorVertSize     equ $  - ConstrictorVertices
  37++EE2E 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  37++EE32 1F 19 04 08
  38++EE36 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  38++EE3A 1F 02 00 20
  39++EE3E 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  39++EE42 1F 23 1C 20
  40++EE46 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  40++EE4A 1F 49 08 0C
  41++EE4E 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  41++EE52 1F 37 18 20
  42++EE56 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  42++EE5A 1F 56 10 24
  43++EE5E 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  43++EE62 1F 58 0C 10
  44++EE66 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  44++EE6A 1F 78 14 18
  45++EE6E 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  45++EE72 1F 06 20 24
  46++EE76 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  46++EE7A 05 99 30 38
  47++EE7E 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  47++EE82 0A 99 2C 3C
  48++EE86 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  48++EE8A 12 99 2C 34
  49++EE8E              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  50++EE8E              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  51++EE8E 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  51++EE92 9F 18 4B 14
  52++EE96 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  52++EE9A 1F 2C 4B 00
  53++EE9E 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  53++EEA2 9F 2C 4B 00
  54++EEA6 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  54++EEAA 1F 2C 4B 00
  55++EEAE 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  55++EEB2 5F 00 1B 00
  56++EEB6              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  57++EEB6              ConstrictorLen          equ $  - Constrictor
  58++EEB6
# file closed: ./Data/ships/Constrictor.asm
 112+ EEB6                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEB6 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEB9 2F EF                                DW CoriolisEdges
   3++EEBB 70                                   DB CoriolisEdgesSize
   4++EEBC 00 36                                DB $00, $36
   5++EEBE 60                                   DB CoriolisVertSize
   6++EEBF 1C                                   DB CoriolisEdgesCnt
   7++EEC0 00 00                                DB $00, $00
   8++EEC2 38                                   DB CoriolisNormalsSize
   9++EEC3 78 F0 00                             DB $78, $F0, $00
  10++EEC6 9F EF                                DW CoriolisNormals
  11++EEC8 00 06                                DB $00, $06
  12++EECA CF EE                                DW CoriolisVertices
  13++EECC 02 00                                DB ShipTypeStation,0                        ; Type and Tactics
  14++EECE 00                                   DB 0                                        ; can't anger arbitrarily needs to see innocent bystander shot
  15++EECF A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  15++EED3 10 62
  16++EED5 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  16++EED9 20 83
  17++EEDB A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  17++EEDF 30 74
  18++EEE1 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  18++EEE5 10 54
  19++EEE7 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  19++EEEB 51 A6
  20++EEED A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  20++EEF1 62 B8
  21++EEF3 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  21++EEF7 73 C8
  22++EEF9 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  22++EEFD 54 97
  23++EEFF A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  23++EF03 A6 DB
  24++EF05 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  24++EF09 B8 DC
  25++EF0B A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  25++EF0F 97 DC
  26++EF11 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  26++EF15 95 DA
  27++EF17 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  27++EF1B 00 00
  28++EF1D 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  28++EF21 00 00
  29++EF23 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  29++EF27 00 00
  30++EF29 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  30++EF2D 00 00
  31++EF2F              CoriolisVertSize:       equ $ - CoriolisVertices
  32++EF2F 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  33++EF33 1F 20 00 04                          DB $1F, $20, $00, $04
  34++EF37 1F 30 04 08                          DB $1F, $30, $04, $08
  35++EF3B 1F 40 08 0C                          DB $1F, $40, $08, $0C
  36++EF3F 1F 51 0C 10                          DB $1F, $51, $0C, $10
  37++EF43 1F 61 00 10                          DB $1F, $61, $00, $10
  38++EF47 1F 62 00 14                          DB $1F, $62, $00, $14
  39++EF4B 1F 82 14 04                          DB $1F, $82, $14, $04
  40++EF4F 1F 83 04 18                          DB $1F, $83, $04, $18
  41++EF53 1F 73 08 18                          DB $1F, $73, $08, $18
  42++EF57 1F 74 08 1C                          DB $1F, $74, $08, $1C
  43++EF5B 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  44++EF5F 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  45++EF63 1F DB 20 24                          DB $1F, $DB, $20, $24
  46++EF67 1F DC 24 28                          DB $1F, $DC, $24, $28
  47++EF6B 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  48++EF6F 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  49++EF73 1F A6 10 20                          DB $1F, $A6, $10, $20
  50++EF77 1F B6 14 20                          DB $1F, $B6, $14, $20
  51++EF7B 1F B8 14 24                          DB $1F, $B8, $14, $24
  52++EF7F 1F C8 18 24                          DB $1F, $C8, $18, $24
  53++EF83 1F C7 18 28                          DB $1F, $C7, $18, $28
  54++EF87 1F 97 1C 28                          DB $1F, $97, $1C, $28
  55++EF8B 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  56++EF8F 1E 00 30 34                          DB $1E, $00, $30, $34
  57++EF93 1E 00 34 38                          DB $1E, $00, $34, $38
  58++EF97 1E 00 38 3C                          DB $1E, $00, $38, $3C
  59++EF9B 1E 00 3C 30                          DB $1E, $00, $3C, $30
  60++EF9F              CoriolisEdgesSize:      equ $ - CoriolisEdges
  61++EF9F              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  62++EF9F 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  63++EFA3 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  64++EFA7 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  65++EFAB 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  66++EFAF DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  67++EFB3 5F 00 A0 00                          DB $5F, $00, $A0, $00
  68++EFB7 1F A0 00 00                          DB $1F, $A0, $00, $00
  69++EFBB 9F A0 00 00                          DB $9F, $A0, $00, $00
  70++EFBF 1F 00 A0 00                          DB $1F, $00, $A0, $00
  71++EFC3 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  72++EFC7 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  73++EFCB 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  74++EFCF BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  75++EFD3 3F 00 00 A0                          DB $3F, $00, $00, $A0
  76++EFD7              CoriolisNormalsSize:    equ $ - CoriolisNormals
  77++EFD7              CoriolisLen:            equ $ - Coriolis
  78++EFD7
# file closed: ./Data/ships/Coriolis.asm
 113+ EFD7                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFD7 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFDA 62 F0                                DW CougarEdges
   3++EFDC 64                                   DB CougarEdgesSize
   4++EFDD 00 2A                                DB $00, $2A
   5++EFDF 72                                   DB CougarVertSize
   6++EFE0 19                                   DB CougarEdgesCnt
   7++EFE1 00 00                                DB $00, $00
   8++EFE3 18                                   DB CougarNormalsSize
   9++EFE4 22 FC 28                             DB $22, $FC, $28
  10++EFE7 C6 F0                                DW CougarNormals
  11++EFE9 02 34                                DB $02, $34
  12++EFEB F0 EF                                DW CougarVertices
  13++EFED 00 00                                DB 0,0                      ; Type and Tactics
  14++EFEF 01                                   DB ShipCanAnger
  15++EFF0 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  15++EFF4 02 44
  16++EFF6 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  16++EFFA 01 22
  17++EFFC 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  17++F000 01 55
  18++F002 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  18++F006 04 55
  19++F008 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  19++F00C 12 35
  20++F00E 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  20++F012 23 44
  21++F014 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  21++F018 34 55
  22++F01A 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  22++F01E 01 11
  23++F020 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  23++F024 01 11
  24++F026 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  24++F02A 34 44
  25++F02C 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  25++F030 34 44
  26++F032 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  26++F036 00 44
  27++F038 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  27++F03C 00 44
  28++F03E 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  28++F042 00 00
  29++F044 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  29++F048 44 44
  30++F04A 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  30++F04E 55 55
  31++F050 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  31++F054 55 55
  32++F056 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  32++F05A 55 55
  33++F05C 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  33++F060 55 55
  34++F062              CougarVertSize:         equ $ - CougarVertices
  35++F062 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  36++F066 1F 01 04 1C                          DB $1F, $01, $04, $1C
  37++F06A 1F 01 1C 20                          DB $1F, $01, $1C, $20
  38++F06E 1F 01 20 08                          DB $1F, $01, $20, $08
  39++F072 1E 05 08 0C                          DB $1E, $05, $08, $0C
  40++F076 1E 45 0C 18                          DB $1E, $45, $0C, $18
  41++F07A 1E 15 08 10                          DB $1E, $15, $08, $10
  42++F07E 1E 35 10 18                          DB $1E, $35, $10, $18
  43++F082 1F 34 18 28                          DB $1F, $34, $18, $28
  44++F086 1F 34 28 24                          DB $1F, $34, $28, $24
  45++F08A 1F 34 24 14                          DB $1F, $34, $24, $14
  46++F08E 1F 24 14 00                          DB $1F, $24, $14, $00
  47++F092 1B 04 00 0C                          DB $1B, $04, $00, $0C
  48++F096 1B 12 04 10                          DB $1B, $12, $04, $10
  49++F09A 1B 23 14 10                          DB $1B, $23, $14, $10
  50++F09E 1A 01 04 08                          DB $1A, $01, $04, $08
  51++F0A2 1A 34 14 18                          DB $1A, $34, $14, $18
  52++F0A6 14 00 30 34                          DB $14, $00, $30, $34
  53++F0AA 12 00 34 2C                          DB $12, $00, $34, $2C
  54++F0AE 12 44 2C 38                          DB $12, $44, $2C, $38
  55++F0B2 14 44 38 30                          DB $14, $44, $38, $30
  56++F0B6 12 55 3C 40                          DB $12, $55, $3C, $40
  57++F0BA 14 55 40 48                          DB $14, $55, $40, $48
  58++F0BE 12 55 48 44                          DB $12, $55, $48, $44
  59++F0C2 14 55 44 3C                          DB $14, $55, $44, $3C
  60++F0C6              CougarEdgesSize:        equ $ - CougarEdges
  61++F0C6              CougarEdgesCnt:         equ CougarEdgesSize/4
  62++F0C6 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  63++F0CA DF 10 2E 04                          DB $DF, $10, $2E, $04
  64++F0CE 5F 00 1B 05                          DB $5F, $00, $1B, $05
  65++F0D2 5F 10 2E 04                          DB $5F, $10, $2E, $04
  66++F0D6 1F 10 2E 04                          DB $1F, $10, $2E, $04
  67++F0DA 3E 00 00 A0                          DB $3E, $00, $00, $A0
  68++F0DE              CougarNormalsSize:      equ $ - CougarNormals
  69++F0DE              CougarLen:              equ $ - Cougar
  70++F0DE
# file closed: ./Data/ships/Cougar.asm
 114+ F0DE                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0DE 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0E1 87 F1                                DW DodoEdges
   3++F0E3 88                                   DB DodoEdgesSize
   4++F0E4 00 36                                DB $00, $36
   5++F0E6 90                                   DB DodoVertSize
   6++F0E7 22                                   DB DodoEdgesCnt
   7++F0E8 00 00                                DB $00, $00
   8++F0EA 30                                   DB DodoNormalsSize
   9++F0EB 7D F0 00                             DB $7D, $F0, $00
  10++F0EE 0F F2                                DW DodoNormals
  11++F0F0 00 00                                DB $00, $00
  12++F0F2 F7 F0                                DW DodoVertices
  13++F0F4 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0F6 00                                   DB 0
  15++F0F7 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  15++F0FB 01 55
  16++F0FD 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  16++F101 01 22
  17++F103 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  17++F107 02 33
  18++F109 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  18++F10D 03 44
  19++F10F 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  19++F113 04 55
  20++F115 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  20++F119 15 66
  21++F11B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  21++F11F 12 77
  22++F121 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  22++F125 23 88
  23++F127 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  23++F12B 34 99
  24++F12D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  24++F131 45 AA
  25++F133 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  25++F137 16 77
  26++F139 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  26++F13D 27 88
  27++F13F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  27++F143 38 99
  28++F145 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  28++F149 49 AA
  29++F14B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  29++F14F 56 AA
  30++F151 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  30++F155 67 BB
  31++F157 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  31++F15B 78 BB
  32++F15D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  32++F161 89 BB
  33++F163 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  33++F167 9A BB
  34++F169 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  34++F16D 6A BB
  35++F16F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  35++F173 00 00
  36++F175 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  36++F179 00 00
  37++F17B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  37++F17F 00 00
  38++F181 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  38++F185 00 00
  39++F187              DodoVertSize:           equ $ - DodoVertices
  40++F187 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  41++F18B 1F 02 04 08                          DB $1F, $02, $04, $08
  42++F18F 1F 03 08 0C                          DB $1F, $03, $08, $0C
  43++F193 1F 04 0C 10                          DB $1F, $04, $0C, $10
  44++F197 1F 05 10 00                          DB $1F, $05, $10, $00
  45++F19B 1F 16 14 28                          DB $1F, $16, $14, $28
  46++F19F 1F 17 28 18                          DB $1F, $17, $28, $18
  47++F1A3 1F 27 18 2C                          DB $1F, $27, $18, $2C
  48++F1A7 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  49++F1AB 1F 38 1C 30                          DB $1F, $38, $1C, $30
  50++F1AF 1F 39 30 20                          DB $1F, $39, $30, $20
  51++F1B3 1F 49 20 34                          DB $1F, $49, $20, $34
  52++F1B7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  53++F1BB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  54++F1BF 1F 56 38 14                          DB $1F, $56, $38, $14
  55++F1C3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  56++F1C7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  57++F1CB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  58++F1CF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  59++F1D3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  60++F1D7 1F 15 00 14                          DB $1F, $15, $00, $14
  61++F1DB 1F 12 04 18                          DB $1F, $12, $04, $18
  62++F1DF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  63++F1E3 1F 34 0C 20                          DB $1F, $34, $0C, $20
  64++F1E7 1F 45 10 24                          DB $1F, $45, $10, $24
  65++F1EB 1F 67 28 3C                          DB $1F, $67, $28, $3C
  66++F1EF 1F 78 2C 40                          DB $1F, $78, $2C, $40
  67++F1F3 1F 89 30 44                          DB $1F, $89, $30, $44
  68++F1F7 1F 9A 34 48                          DB $1F, $9A, $34, $48
  69++F1FB 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  70++F1FF 1E 00 50 54                          DB $1E, $00, $50, $54
  71++F203 14 00 54 5C                          DB $14, $00, $54, $5C
  72++F207 17 00 5C 58                          DB $17, $00, $5C, $58
  73++F20B 14 00 58 50                          DB $14, $00, $58, $50
  74++F20F              DodoEdgesSize:          equ $ - DodoEdges
  75++F20F              DodoEdgesCnt:           equ DodoEdgesSize/4
  76++F20F 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  77++F213 1F 67 8E 58                          DB $1F, $67, $8E, $58
  78++F217 5F A9 37 59                          DB $5F, $A9, $37, $59
  79++F21B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  80++F21F DF A9 37 59                          DB $DF, $A9, $37, $59
  81++F223 9F 67 8E 58                          DB $9F, $67, $8E, $58
  82++F227 3F 00 B0 58                          DB $3F, $00, $B0, $58
  83++F22B 3F A9 37 59                          DB $3F, $A9, $37, $59
  84++F22F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  85++F233 FF 67 8E 58                          DB $FF, $67, $8E, $58
  86++F237 BF A9 37 59                          DB $BF, $A9, $37, $59
  87++F23B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  88++F23F              DodoNormalsSize:        equ $ - DodoNormals
  89++F23F              DodoLen:                equ $ - Dodo
  90++F23F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1220  F23F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1221  F23F                  SLOT    ShipModelsAddr
1222  F23F                  PAGE    BankShipModels2
1223  F23F              	ORG     ShipModelsAddr, BankShipModels2
1224  E000
1225  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1226  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1226  E00F 06 00       >                        ld      b,0
1226  E011 4F          >                        ld      c,a                                 ; c= original ship id
1226  E012 CB 3F       >.ShiftLoop:             srl     a
1226  E014 CB 3F       >                        srl     a
1226  E016 CB 3F       >                        srl     a
1226  E018 CB 3F       >                        srl     a                                   ; divide by 16
1226  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1226  E01B 79          >                        ld      a,c
1226  E01C 50          >                        ld      d,b
1226  E01D 1E 10       >                        ld      e,16
1226  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1226  E021 93          >                        sub     e                                   ; a= actual model id now
1226  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1226  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1226  E024 7A          >                        ld      a,d                                 ; a = bank number
1226  E025             >;.. Now b = bank and a = adjusted ship nbr
1226  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1226  E028 ED 31       >                        add     hl,a
1226  E02A ED 31       >                        add     hl,a
1226  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1226  E02D             >                        ClearCarryFlag
1226  E02D B7          >                        or a
1226  E02E C9          >                        ret
1227  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1227  E02F 2A 1F C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1227  E032 11 24 C3    >                        ld          de,UBnkHullVerticies
1227  E035 06 00       >                        ld          b,0
1227  E037 3A 13 C3    >                        ld			a,(VertexCtX6Addr)
1227  E03A 4F          >                        ld          c,a
1227  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1227  E03C CD C5 93    >                        call        memcopy_dma
1227  E03F C9          >                        ret
1228  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1228  E040 2A 0E C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1228  E043 11 14 C4    >                        ld          de,UBnkHullEdges
1228  E046 06 00       >                        ld          b,0
1228  E048 3A 10 C3    >                        ld			a,(LineX4Addr)
1228  E04B 4F          >                        ld          c,a
1228  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1228  E04D CD C5 93    >                        call        memcopy_dma
1228  E050 C9          >                        ret
1229  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1229  E051 2A 1B C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1229  E054 11 DC C4    >                        ld          de,UBnkHullNormals
1229  E057 06 00       >                        ld          b,0
1229  E059 3A 17 C3    >                        ld          a,(FaceCtX4Addr)
1229  E05C 4F          >                        ld          c,a
1229  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1229  E05E CD C5 93    >                        call        memcopy_dma
1229  E061 C9          >                        ret
1230  E062              ShipBankTable2:         MShipBankTable
1230  E062 3B 00       >                        DW      BankShipModels1
1230  E064 43 00       >                        DW      BankShipModels2
1230  E066 44 00       >                        DW      BankShipModels3
1230  E068 45 00       >                        DW      BankShipModels4
1231  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1231  E06A 21 1B C0    >                        ld          hl,UBnkShipModelBank
1231  E06D 36 43       >                        ld          (hl),BankShipModels2
1231  E06F 32 1C C0    >                        ld          (UBnkShipModelNbr),a
1231  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1231  E075 ED 31       >                        add         hl,a
1231  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1231  E079 4E          >                        ld          c,(hl)
1231  E07A 23          >                        inc         hl
1231  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1231  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1231  E07F ED 31       >                        add         hl,a
1231  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1231  E083 7E          >                        ld          a,(hl)
1231  E084 23          >                        inc         hl
1231  E085 66          >                        ld          h,(hl)
1231  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1231  E087 11 0B C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1231  E08A 01 19 00    >                        ld          bc,ShipDataLength
1231  E08D ED B0       >                        ldir
1231  E08F CD 2F E0    >                        call        CopyVertsToUniv
1231  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1231  E095 CD 51 E0    >                        call        CopyNormsToUniv
1231  E098 C9          >                        ret
1232  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1232  E099 3E 0D       >                        ld          a,13
1232  E09B CD 6A E0    >                        call        CopyShipToUniverse2
1232  E09E C9          >                        ret
1233  E09F
1234  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16
   2+ E0A1 1A E2                                 DW Escape_Pod                              ;17
   3+ E0A3 73 E2                                 DW Fer_De_Lance                            ;18
   4+ E0A5 92 E3                                 DW Gecko                                   ;19
   5+ E0A7 5B E4                                 DW Ghavial                                 ;20
   6+ E0A9 44 E5                                 DW Iguana                                  ;21
   7+ E0AB 3B E6                                 DW Krait                                   ;22
   8+ E0AD 26 E7                                 DW Logo                                    ;23
   9+ E0AF E3 E8                                 DW Mamba                                   ;24
  10+ E0B1 16 EA                                 DW Missile                                 ;25
  11+ E0B3 19 EB                                 DW Monitor                                 ;26
  12+ E0B5 20 EC                                 DW Moray                                   ;27
  13+ E0B7 FD EC                                 DW Ophidian                                ;28
  14+ E0B9 36 EE                                 DW Plate                                   ;29
  15+ E0BB 75 EE                                 DW Python                                  ;30
  16+ E0BD 6C EF                                 DW Python_P                                ;31
  17+ E0BF 58 E1        ShipVertexTable2:        DW DragonVertices
  18+ E0C1 33 E2                                 DW Escape_PodVertices
  19+ E0C3 8C E2                                 DW Fer_De_LanceVertices
  20+ E0C5 AB E3                                 DW GeckoVertices
  21+ E0C7 74 E4                                 DW GhavialVertices
  22+ E0C9 5D E5                                 DW IguanaVertices
  23+ E0CB 54 E6                                 DW KraitVertices
  24+ E0CD 3F E7                                 DW LogoVertices
  25+ E0CF FC E8                                 DW MambaVertices
  26+ E0D1 2F EA                                 DW MissileVertices
  27+ E0D3 32 EB                                 DW MonitorVertices
  28+ E0D5 39 EC                                 DW MorayVertices
  29+ E0D7 16 ED                                 DW OphidianVertices
  30+ E0D9 4F EE                                 DW PlateVertices
  31+ E0DB 8E EE                                 DW PythonVertices
  32+ E0DD 85 EF                                 DW Python_PVertices
  33+ E0DF 8E E1        ShipEdgeTable2:          DW DragonEdges
  34+ E0E1 4B E2                                 DW Escape_PodEdges
  35+ E0E3 FE E2                                 DW Fer_De_LanceEdges
  36+ E0E5 F3 E3                                 DW GeckoEdges
  37+ E0E7 BC E4                                 DW GhavialEdges
  38+ E0E9 B7 E5                                 DW IguanaEdges
  39+ E0EB BA E6                                 DW KraitEdges
  40+ E0ED 3B E8                                 DW LogoEdges
  41+ E0EF 92 E9                                 DW MambaEdges
  42+ E0F1 95 EA                                 DW MissileEdges
  43+ E0F3 98 EB                                 DW MonitorEdges
  44+ E0F5 8D EC                                 DW MorayEdges
  45+ E0F7 8E ED                                 DW OphidianEdges
  46+ E0F9 61 EE                                 DW PlateEdges
  47+ E0FB D0 EE                                 DW PythonEdges
  48+ E0FD C7 EF                                 DW Python_PEdges
  49+ E0FF E2 E1        ShipNormalTable2:        DW DragonNormals
  50+ E101 63 E2                                 DW Escape_PodNormals
  51+ E103 6A E3                                 DW Fer_De_LanceNormals
  52+ E105 37 E4                                 DW GeckoNormals
  53+ E107 14 E5                                 DW GhavialNormals
  54+ E109 13 E6                                 DW IguanaNormals
  55+ E10B 0E E7                                 DW KraitNormals
  56+ E10D CF E8                                 DW LogoNormals
  57+ E10F 02 EA                                 DW MambaNormals
  58+ E111 F5 EA                                 DW MissileNormals
  59+ E113 F4 EB                                 DW MonitorNormals
  60+ E115 D9 EC                                 DW MorayNormals
  61+ E117 06 EE                                 DW OphidianNormals
  62+ E119 71 EE                                 DW PlateNormals
  63+ E11B 38 EF                                 DW PythonNormals
  64+ E11D 2F F0                                 DW Python_PNormals
  65+ E11F DB 00        ShipModelSizeTable2:     DW DragonLen
  66+ E121 59 00                                 DW Escape_PodLen
  67+ E123 1F 01                                 DW Fer_De_LanceLen
  68+ E125 C9 00                                 DW GeckoLen
  69+ E127 E9 00                                 DW GhavialLen
  70+ E129 F7 00                                 DW IguanaLen
  71+ E12B EB 00                                 DW KraitLen
  72+ E12D BD 01                                 DW LogoLen
  73+ E12F 33 01                                 DW MambaLen
  74+ E131 03 01                                 DW MissileLen
  75+ E133 07 01                                 DW MonitorLen
  76+ E135 DD 00                                 DW MorayLen
  77+ E137 39 01                                 DW OphidianLen
  78+ E139 3F 00                                 DW PlateLen
  79+ E13B F7 00                                 DW PythonLen
  80+ E13D F7 00                                 DW Python_PLen
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00 66 50     Dragon:	                DB $00, $66, $50
   2++E142 8E E1                                DW DragonEdges
   3++E144 54                                   DB DragonEdgesSize
   4++E145 00 3C                                DB $00, $3C
   5++E147 36                                   DB DragonVertSize
   6++E148 15                                   DB DragonEdgesCnt
   7++E149 00 00                                DB $00, $00
   8++E14B 38                                   DB DragonNormalsSize
   9++E14C 20 F7 14                             DB $20, $F7, $14
  10++E14F E2 E1                                DW DragonNormals
  11++E151 00 47                                DB $00, $47
  12++E153 58 E1                                DW DragonVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  15++E15C 6B 05
  16++E15E D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  16++E162 67 01
  17++E164 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  17++E168 78 12
  18++E16A 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  18++E16E CD 23
  19++E170 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  19++E174 CD 89
  20++E176 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  20++E17A 9A 34
  21++E17C D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  21++E180 AB 45
  22++E182 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  22++E186 FF FF
  23++E188 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  23++E18C FF FF
  24++E18E              DragonVertSize:         equ $ - DragonVertices
  25++E18E 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  26++E192 1F 12 08 1C                          DB $1F, $12, $08, $1C
  27++E196 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  28++E19A 1F 34 14 1C                          DB $1F, $34, $14, $1C
  29++E19E 1F 45 18 1C                          DB $1F, $45, $18, $1C
  30++E1A2 1F 50 00 1C                          DB $1F, $50, $00, $1C
  31++E1A6 1F 67 04 20                          DB $1F, $67, $04, $20
  32++E1AA 1F 78 08 20                          DB $1F, $78, $08, $20
  33++E1AE 1F 89 10 20                          DB $1F, $89, $10, $20
  34++E1B2 1F 9A 14 20                          DB $1F, $9A, $14, $20
  35++E1B6 1F AB 18 20                          DB $1F, $AB, $18, $20
  36++E1BA 1F B6 00 20                          DB $1F, $B6, $00, $20
  37++E1BE 1F 06 00 04                          DB $1F, $06, $00, $04
  38++E1C2 1F 17 04 08                          DB $1F, $17, $04, $08
  39++E1C6 1F 4A 14 18                          DB $1F, $4A, $14, $18
  40++E1CA 1F 5B 00 18                          DB $1F, $5B, $00, $18
  41++E1CE 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  42++E1D2 1F 8C 08 10                          DB $1F, $8C, $08, $10
  43++E1D6 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  44++E1DA 1F 9D 10 14                          DB $1F, $9D, $10, $14
  45++E1DE 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  46++E1E2              DragonEdgesSize:        equ $ - DragonEdges
  47++E1E2              DragonEdgesCnt:         equ DragonEdgesSize/4
  48++E1E2 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  49++E1E6 1F 21 5A 00                          DB $1F, $21, $5A, $00
  50++E1EA 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  51++E1EE BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  52++E1F2 9F 21 5A 00                          DB $9F, $21, $5A, $00
  53++E1F6 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  54++E1FA 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  55++E1FE 5F 21 5A 00                          DB $5F, $21, $5A, $00
  56++E202 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  57++E206 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  58++E20A DF 21 5A 00                          DB $DF, $21, $5A, $00
  59++E20E DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  60++E212 3F 30 00 52                          DB $3F, $30, $00, $52
  61++E216 BF 30 00 52                          DB $BF, $30, $00, $52
  62++E21A              DragonNormalsSize:      equ $ - DragonNormals
  63++E21A              DragonLen:              equ $ - Dragon
  64++E21A
# file closed: ./Data/ships/Dragon.asm
  83+ E21A                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E21A 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E21D 4B E2                                DW Escape_PodEdges
   3++E21F 18                                   DB Escape_PodEdgesSize
   4++E220 00 16                                DB $00, $16
   5++E222 18                                   DB Escape_PodVertSize
   6++E223 06                                   DB Escape_PodEdgesCnt
   7++E224 00 00                                DB $00, $00
   8++E226 10                                   DB Escape_PodNormalsSize
   9++E227 08 11 08                             DB $08, $11, $08
  10++E22A 63 E2                                DW Escape_PodNormals
  11++E22C 04 00                                DB $04, $00
  12++E22E 33 E2                                DW Escape_PodVertices
  13++E230 00 00                                DB 0,0                      ; Type and Tactics
  14++E232 00                                   DB 0
  15++E233 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  15++E237 12 33
  16++E239 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  16++E23D 02 33
  17++E23F 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  17++E243 01 33
  18++E245 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  18++E249 01 22
  19++E24B              Escape_PodVertSize:     equ $ - Escape_PodVertices
  20++E24B 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  21++E24F 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E253 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E257 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E25B 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E25F 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E263              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  27++E263              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  28++E263 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  29++E267 1F 27 67 1E                          DB $1F, $27, $67, $1E
  30++E26B 5F 27 67 1E                          DB $5F, $27, $67, $1E
  31++E26F 9F 70 00 00                          DB $9F, $70, $00, $00
  32++E273              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  33++E273              Escape_PodLen:          equ $ - Escape_Pod
  34++E273
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E273                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E273 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E276 FE E2                                DW Fer_De_LanceEdges
   3++E278 6C                                   DB Fer_De_LanceEdgesSize
   4++E279 00 1A                                DB $00, $1A
   5++E27B 72                                   DB Fer_De_LanceVertSize
   6++E27C 1B                                   DB Fer_De_LanceEdgesCnt
   7++E27D 00 00                                DB $00, $00
   8++E27F 28                                   DB Fer_De_LanceNormalsSize
   9++E280 28 A0 1E                             DB $28, $A0, $1E
  10++E283 6A E3                                DW Fer_De_LanceNormals
  11++E285 01 12                                DB $01, $12
  12++E287 8C E2                                DW Fer_De_LanceVertices
  13++E289 00 00                                DB 0,0                      ; Type and Tactics
  14++E28B 01                                   DB ShipCanAnger
  15++E28C 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  15++E290 01 59
  16++E292 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  16++E296 12 99
  17++E298 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  17++E29C 23 99
  18++E29E 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  18++E2A2 34 99
  19++E2A4 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  19++E2A8 45 99
  20++E2AA 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  20++E2AE 01 26
  21++E2B0 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  21++E2B4 23 67
  22++E2B6 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  22++E2BA 34 78
  23++E2BC 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  23++E2C0 04 58
  24++E2C2 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  24++E2C6 06 78
  25++E2C8 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  25++E2CC 00 00
  26++E2CE 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  26++E2D2 00 00
  27++E2D4 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  27++E2D8 00 00
  28++E2DA 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  28++E2DE 00 00
  29++E2E0 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  29++E2E4 00 00
  30++E2E6 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  30++E2EA 00 00
  31++E2EC 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  31++E2F0 99 99
  32++E2F2 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  32++E2F6 99 99
  33++E2F8 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  33++E2FC 99 99
  34++E2FE              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  35++E2FE 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  36++E302 1F 29 04 08                          DB $1F, $29, $04, $08
  37++E306 1F 39 08 0C                          DB $1F, $39, $08, $0C
  38++E30A 1F 49 0C 10                          DB $1F, $49, $0C, $10
  39++E30E 1F 59 00 10                          DB $1F, $59, $00, $10
  40++E312 1C 01 00 14                          DB $1C, $01, $00, $14
  41++E316 1C 26 14 18                          DB $1C, $26, $14, $18
  42++E31A 1C 37 18 1C                          DB $1C, $37, $18, $1C
  43++E31E 1C 48 1C 20                          DB $1C, $48, $1C, $20
  44++E322 1C 05 00 20                          DB $1C, $05, $00, $20
  45++E326 0F 06 14 24                          DB $0F, $06, $14, $24
  46++E32A 0B 67 18 24                          DB $0B, $67, $18, $24
  47++E32E 0B 78 1C 24                          DB $0B, $78, $1C, $24
  48++E332 0F 08 20 24                          DB $0F, $08, $20, $24
  49++E336 0E 12 04 14                          DB $0E, $12, $04, $14
  50++E33A 0E 23 08 18                          DB $0E, $23, $08, $18
  51++E33E 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  52++E342 0E 45 10 20                          DB $0E, $45, $10, $20
  53++E346 08 00 28 2C                          DB $08, $00, $28, $2C
  54++E34A 09 00 2C 30                          DB $09, $00, $2C, $30
  55++E34E 0B 00 28 30                          DB $0B, $00, $28, $30
  56++E352 08 00 34 38                          DB $08, $00, $34, $38
  57++E356 09 00 38 3C                          DB $09, $00, $38, $3C
  58++E35A 0B 00 34 3C                          DB $0B, $00, $34, $3C
  59++E35E 0C 99 40 44                          DB $0C, $99, $40, $44
  60++E362 0C 99 40 48                          DB $0C, $99, $40, $48
  61++E366 08 99 44 48                          DB $08, $99, $44, $48
  62++E36A              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  63++E36A              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  64++E36A 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  65++E36E 9F 44 00 18                          DB $9F, $44, $00, $18
  66++E372 BF 3F 00 25                          DB $BF, $3F, $00, $25
  67++E376 3F 00 00 68                          DB $3F, $00, $00, $68
  68++E37A 3F 3F 00 25                          DB $3F, $3F, $00, $25
  69++E37E 1F 44 00 18                          DB $1F, $44, $00, $18
  70++E382 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  71++E386 3C 00 2D 16                          DB $3C, $00, $2D, $16
  72++E38A 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  73++E38E 5F 00 1C 00                          DB $5F, $00, $1C, $00
  74++E392              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  75++E392              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  76++E392
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E392                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E392 00 26 49     Gecko:	                DB $00, $26, $49
   2++E395 F3 E3                                DW GeckoEdges
   3++E397 44                                   DB GeckoEdgesSize
   4++E398 00 1A                                DB $00, $1A
   5++E39A 48                                   DB GeckoVertSize
   6++E39B 11                                   DB GeckoEdgesCnt
   7++E39C 00 37                                DB $00, $37
   8++E39E 24                                   DB GeckoNormalsSize
   9++E39F 12 46 1E                             DB $12, $46, $1E
  10++E3A2 37 E4                                DW GeckoNormals
  11++E3A4 03 10                                DB $03, $10
  12++E3A6 AB E3                                DW GeckoVertices
  13++E3A8 00 00                                DB 0,0                      ; Type and Tactics
  14++E3AA 01                                   DB ShipCanAnger
  15++E3AB 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  15++E3AF 03 45
  16++E3B1 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  16++E3B5 01 23
  17++E3B7 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  17++E3BB 05 67
  18++E3BD 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  18++E3C1 01 78
  19++E3C3 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  19++E3C7 45 66
  20++E3C9 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  20++E3CD 12 88
  21++E3CF 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  21++E3D3 34 67
  22++E3D5 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  22++E3D9 23 78
  23++E3DB 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  23++E3DF 33 33
  24++E3E1 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  24++E3E5 33 33
  25++E3E7 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  25++E3EB 33 33
  26++E3ED 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  26++E3F1 33 33
  27++E3F3              GeckoVertSize:          equ $ - GeckoVertices
  28++E3F3 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  29++E3F7 1F 12 04 14                          DB $1F, $12, $04, $14
  30++E3FB 1F 18 14 0C                          DB $1F, $18, $14, $0C
  31++E3FF 1F 07 0C 08                          DB $1F, $07, $0C, $08
  32++E403 1F 56 08 10                          DB $1F, $56, $08, $10
  33++E407 1F 45 10 00                          DB $1F, $45, $10, $00
  34++E40B 1F 28 14 1C                          DB $1F, $28, $14, $1C
  35++E40F 1F 37 1C 18                          DB $1F, $37, $1C, $18
  36++E413 1F 46 18 10                          DB $1F, $46, $18, $10
  37++E417 1D 05 00 08                          DB $1D, $05, $00, $08
  38++E41B 1E 01 04 0C                          DB $1E, $01, $04, $0C
  39++E41F 1D 34 00 18                          DB $1D, $34, $00, $18
  40++E423 1E 23 04 1C                          DB $1E, $23, $04, $1C
  41++E427 14 67 08 18                          DB $14, $67, $08, $18
  42++E42B 14 78 0C 1C                          DB $14, $78, $0C, $1C
  43++E42F 10 33 20 28                          DB $10, $33, $20, $28
  44++E433 11 33 24 2C                          DB $11, $33, $24, $2C
  45++E437              GeckoEdgesSize:             equ $ - GeckoEdges
  46++E437              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  47++E437 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  48++E43B 1F 04 2D 08                          DB $1F, $04, $2D, $08
  49++E43F 5F 19 6C 13                          DB $5F, $19, $6C, $13
  50++E443 5F 00 54 0C                          DB $5F, $00, $54, $0C
  51++E447 DF 19 6C 13                          DB $DF, $19, $6C, $13
  52++E44B 9F 04 2D 08                          DB $9F, $04, $2D, $08
  53++E44F BF 58 10 D6                          DB $BF, $58, $10, $D6
  54++E453 3F 00 00 BB                          DB $3F, $00, $00, $BB
  55++E457 3F 58 10 D6                          DB $3F, $58, $10, $D6
  56++E45B              GeckoNormalsSize:       equ $ - GeckoNormals
  57++E45B              GeckoLen:               equ $ - Gecko
  58++E45B
# file closed: ./Data/ships/Gecko.asm
  86+ E45B                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E45B 03 26 00     Ghavial:	            DB $03, $26, $00
   2++E45E BC E4                                DW GhavialEdges
   3++E460 58                                   DB GhavialEdgesSize
   4++E461 00 22                                DB $00, $22
   5++E463 48                                   DB GhavialVertSize
   6++E464 16                                   DB GhavialEdgesCnt
   7++E465 00 64                                DB $00, $64
   8++E467 30                                   DB GhavialNormalsSize
   9++E468 0A 72 10                             DB $0A, $72, $10
  10++E46B 14 E5                                DW GhavialNormals
  11++E46D 00 27                                DB $00, $27
  12++E46F 74 E4                                DW GhavialVertices
  13++E471 00 00                                DB 0,0                      ; Type and Tactics
  14++E473 01                                   DB ShipCanAnger
  15++E474
  16++E474 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  16++E478 67 01
  17++E47A 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  17++E47E 6B 05
  18++E480 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  18++E484 23 01
  19++E486 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  19++E48A 45 03
  20++E48C 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  20++E490 78 12
  21++E492 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  21++E496 89 23
  22++E498 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  22++E49C AB 45
  23++E49E 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  23++E4A2 9A 34
  24++E4A4 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  24++E4A8 FF FF
  25++E4AA 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  25++E4AE 00 00
  26++E4B0 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  26++E4B4 00 00
  27++E4B6 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  27++E4BA 00 00
  28++E4BC
  29++E4BC              GhavialVertSize: equ $ - GhavialVertices
  30++E4BC
  31++E4BC
  32++E4BC 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  33++E4C0 1F 12 10 08  	DB $1F, $12, $10, $08
  34++E4C4 1F 23 14 08  	DB $1F, $23, $14, $08
  35++E4C8 1F 30 0C 08  	DB $1F, $30, $0C, $08
  36++E4CC 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  37++E4D0 1F 45 18 0C  	DB $1F, $45, $18, $0C
  38++E4D4 1F 50 0C 04  	DB $1F, $50, $0C, $04
  39++E4D8 1F 67 00 20  	DB $1F, $67, $00, $20
  40++E4DC 1F 78 10 20  	DB $1F, $78, $10, $20
  41++E4E0 1F 89 14 20  	DB $1F, $89, $14, $20
  42++E4E4 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  43++E4E8 1F AB 18 20  	DB $1F, $AB, $18, $20
  44++E4EC 1F B6 04 20  	DB $1F, $B6, $04, $20
  45++E4F0 1F 06 04 00  	DB $1F, $06, $04, $00
  46++E4F4 1F 17 00 10  	DB $1F, $17, $00, $10
  47++E4F8 1F 28 10 14  	DB $1F, $28, $10, $14
  48++E4FC 1F 39 14 1C  	DB $1F, $39, $14, $1C
  49++E500 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  50++E504 1F 5B 18 04  	DB $1F, $5B, $18, $04
  51++E508 09 00 24 28  	DB $09, $00, $24, $28
  52++E50C 09 00 28 2C  	DB $09, $00, $28, $2C
  53++E510 09 00 2C 24  	DB $09, $00, $2C, $24
  54++E514
  55++E514              GhavialEdgesSize: equ $ - GhavialEdges
  56++E514
  57++E514
  58++E514              GhavialEdgesCnt: equ GhavialEdgesSize/4
  59++E514
  60++E514
  61++E514 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  62++E518 1F 33 24 0C  	DB $1F, $33, $24, $0C
  63++E51C 3F 33 1C 19  	DB $3F, $33, $1C, $19
  64++E520 3F 00 30 2A  	DB $3F, $00, $30, $2A
  65++E524 BF 33 1C 19  	DB $BF, $33, $1C, $19
  66++E528 9F 33 24 0C  	DB $9F, $33, $24, $0C
  67++E52C 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  68++E530 5F 1C 38 07  	DB $5F, $1C, $38, $07
  69++E534 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  70++E538 7F 00 33 26  	DB $7F, $00, $33, $26
  71++E53C FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  72++E540 DF 1C 38 07  	DB $DF, $1C, $38, $07
  73++E544
  74++E544              GhavialNormalsSize: equ $ - GhavialNormals
  75++E544              GhavialLen: equ $ - Ghavial
  76++E544
# file closed: ./Data/ships/Ghavial.asm
  87+ E544                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E544 01 0D AC     Iguana:	                DB $01, $0D, $AC
   2++E547 B7 E5                                DW IguanaEdges
   3++E549 5C                                   DB IguanaEdgesSize
   4++E54A 00 1A                                DB $00, $1A
   5++E54C 5A                                   DB IguanaVertSize
   6++E54D 17                                   DB IguanaEdgesCnt
   7++E54E 00 96                                DB $00, $96
   8++E550 28                                   DB IguanaNormalsSize
   9++E551 0A 5A 21                             DB $0A, $5A, $21
  10++E554 13 E6                                DW IguanaNormals
  11++E556 01 23                                DB $01, $23
  12++E558 5D E5                                DW IguanaVertices
  13++E55A 00 00                                DB 0,0                      ; Type and Tactics
  14++E55C 01                                   DB ShipCanAnger
  15++E55D
  16++E55D
  17++E55D 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  17++E561 23 01
  18++E563 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  18++E567 46 02
  19++E569 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  19++E56D 45 01
  20++E56F 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  20++E573 57 13
  21++E575 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  21++E579 67 23
  22++E57B 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  22++E57F 89 46
  23++E581 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  23++E585 88 45
  24++E587 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  24++E58B 89 57
  25++E58D 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  25++E591 99 67
  26++E593 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  26++E597 11 00
  27++E599 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  27++E59D 33 22
  28++E59F 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  28++E5A3 99 88
  29++E5A5 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  29++E5A9 88 88
  30++E5AB 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  30++E5AF 99 88
  31++E5B1 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  31++E5B5 99 99
  32++E5B7
  33++E5B7              IguanaVertSize: equ $ - IguanaVertices
  34++E5B7
  35++E5B7
  36++E5B7
  37++E5B7 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  38++E5BB 1F 01 00 08  	DB $1F, $01, $00, $08
  39++E5BF 1F 13 00 0C  	DB $1F, $13, $00, $0C
  40++E5C3 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E5C7 1F 46 04 14  	DB $1F, $46, $04, $14
  42++E5CB 1F 45 08 18  	DB $1F, $45, $08, $18
  43++E5CF 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  44++E5D3 1F 67 10 20  	DB $1F, $67, $10, $20
  45++E5D7 1F 48 14 18  	DB $1F, $48, $14, $18
  46++E5DB 1F 58 18 1C  	DB $1F, $58, $18, $1C
  47++E5DF 1F 69 14 20  	DB $1F, $69, $14, $20
  48++E5E3 1F 79 1C 20  	DB $1F, $79, $1C, $20
  49++E5E7 1F 04 04 08  	DB $1F, $04, $04, $08
  50++E5EB 1F 15 08 0C  	DB $1F, $15, $08, $0C
  51++E5EF 1F 26 04 10  	DB $1F, $26, $04, $10
  52++E5F3 1F 37 0C 10  	DB $1F, $37, $0C, $10
  53++E5F7 1F 89 14 1C  	DB $1F, $89, $14, $1C
  54++E5FB 1E 01 08 24  	DB $1E, $01, $08, $24
  55++E5FF 1E 23 10 28  	DB $1E, $23, $10, $28
  56++E603 0A 88 2C 30  	DB $0A, $88, $2C, $30
  57++E607 0A 88 34 30  	DB $0A, $88, $34, $30
  58++E60B 0A 99 2C 38  	DB $0A, $99, $2C, $38
  59++E60F 0A 99 34 38  	DB $0A, $99, $34, $38
  60++E613
  61++E613              IguanaEdgesSize: equ $ - IguanaEdges
  62++E613
  63++E613
  64++E613              IguanaEdgesCnt: equ IguanaEdgesSize/4
  65++E613
  66++E613
  67++E613 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  68++E617 DF 33 4D 19  	DB $DF, $33, $4D, $19
  69++E61B 1F 33 4D 19  	DB $1F, $33, $4D, $19
  70++E61F 5F 33 4D 19  	DB $5F, $33, $4D, $19
  71++E623 9F 2A 55 00  	DB $9F, $2A, $55, $00
  72++E627 DF 2A 55 00  	DB $DF, $2A, $55, $00
  73++E62B 1F 2A 55 00  	DB $1F, $2A, $55, $00
  74++E62F 5F 2A 55 00  	DB $5F, $2A, $55, $00
  75++E633 BF 17 00 5D  	DB $BF, $17, $00, $5D
  76++E637 3F 17 00 5D  	DB $3F, $17, $00, $5D
  77++E63B
  78++E63B
  79++E63B              IguanaNormalsSize: equ $ - IguanaNormals
  80++E63B              IguanaLen: equ $ - Iguana
  81++E63B
# file closed: ./Data/ships/Iguana.asm
  88+ E63B                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E63B
   2++E63B 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E63E BA E6                                DW KraitEdges
   4++E640 54                                   DB KraitEdgesSize
   5++E641 00 12                                DB $00, $12
   6++E643 66                                   DB KraitVertSize
   7++E644 15                                   DB KraitEdgesCnt
   8++E645 64 00                                DB $64,$00
   9++E647 18                                   DB KraitNormalsSize
  10++E648 14 50 1E                             DB $14, $50, $1E
  11++E64B 0E E7                                DW KraitNormals
  12++E64D 02 10                                DB $02, $10
  13++E64F 54 E6                                DW KraitVertices
  14++E651 00 00                                DB 0,0                      ; Type and Tactics
  15++E653 01                                   DB ShipCanAnger
  16++E654 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  16++E658 01 23
  17++E65A 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  17++E65E 03 45
  18++E660 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  18++E664 12 45
  19++E666 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  19++E66A 01 44
  20++E66C 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  20++E670 23 55
  21++E672 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  21++E676 01 11
  22++E678 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  22++E67C 23 33
  23++E67E 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  23++E682 00 33
  24++E684 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  24++E688 00 33
  25++E68A 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  25++E68E 33 33
  26++E690 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  26++E694 00 00
  27++E696 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  27++E69A 44 44
  28++E69C 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  28++E6A0 44 44
  29++E6A2 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  29++E6A6 44 44
  30++E6A8 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  30++E6AC 55 55
  31++E6AE 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  31++E6B2 55 55
  32++E6B4 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  32++E6B8 55 55
  33++E6BA              KraitVertSize           equ $  - KraitVertices
  34++E6BA 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  34++E6BE 1F 12 00 08
  35++E6C2 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  35++E6C6 1F 23 00 10
  36++E6CA 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  36++E6CE 1F 25 10 08
  37++E6D2 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  37++E6D6 1F 04 0C 04
  38++E6DA 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  38++E6DE 1C 23 10 18
  39++E6E2 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  39++E6E6 09 00 1C 28
  40++E6EA 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  40++E6EE 09 33 1C 24
  41++E6F2 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  41++E6F6 08 44 2C 34
  42++E6FA 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  42++E6FE 07 44 30 2C
  43++E702 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  43++E706 08 55 3C 40
  44++E70A 08 55 40 38                          DB $08, $55, $40, $38
  45++E70E              KraitEdgesSize          equ $  - KraitEdges
  46++E70E              KraitEdgesCnt           equ KraitEdgesSize/4
  47++E70E 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  48++E712 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  48++E716 DF 07 30 06
  49++E71A 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  49++E71E 3F 4D 00 9A
  50++E722 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  51++E726              KraitNormalsSize        equ $  - KraitNormals
  52++E726              KraitLen                equ $  - Krait
  53++E726
# file closed: ./Data/ships/Krait.asm
  89+ E726                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E726 00 26 49     Logo:	                DB $00, $26, $49
   2++E729 3B E8                                DW LogoEdges
   3++E72B 94                                   DB LogoEdgesSize
   4++E72C 00 36                                DB $00, $36
   5++E72E FC                                   DB LogoVertSize
   6++E72F 25                                   DB LogoEdgesCnt
   7++E730 00 00                                DB $00, $00
   8++E732 14                                   DB LogoNormalsSize
   9++E733 63 FC 24                             DB $63, $FC, $24
  10++E736 CF E8                                DW LogoNormals
  11++E738 01 00                                DB $01, $00
  12++E73A 3F E7                                DW LogoVertices
  13++E73C 00 00                                DB 0,0                      ; Type and Tactics
  14++E73E 00                                   DB 0
  15++E73F
  16++E73F 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  16++E743 00 00
  17++E745 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  17++E749 00 00
  18++E74B 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  18++E74F 00 00
  19++E751 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  19++E755 00 00
  20++E757 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  20++E75B 00 00
  21++E75D 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  21++E761 00 00
  22++E763 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  22++E767 00 00
  23++E769 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  23++E76D 00 00
  24++E76F 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  24++E773 00 00
  25++E775 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  25++E779 00 00
  26++E77B 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  26++E77F 00 00
  27++E781 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  27++E785 00 00
  28++E787 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  28++E78B 02 33
  29++E78D 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  29++E791 02 44
  30++E793 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  30++E797 01 33
  31++E799 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  31++E79D 02 33
  32++E79F 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  32++E7A3 02 44
  33++E7A5 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  33++E7A9 01 44
  34++E7AB 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7AF 00 00
  35++E7B1 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7B5 00 00
  36++E7B7 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  36++E7BB 00 00
  37++E7BD 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  37++E7C1 00 00
  38++E7C3 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  38++E7C7 00 00
  39++E7C9 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  39++E7CD 00 00
  40++E7CF 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  40++E7D3 00 00
  41++E7D5 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  41++E7D9 00 00
  42++E7DB 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  42++E7DF 00 00
  43++E7E1 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  43++E7E5 00 00
  44++E7E7 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  44++E7EB 00 00
  45++E7ED 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  45++E7F1 00 00
  46++E7F3 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  46++E7F7 00 00
  47++E7F9 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  47++E7FD 00 00
  48++E7FF 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  48++E803 00 00
  49++E805 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  49++E809 00 00
  50++E80B 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  50++E80F 00 00
  51++E811 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  51++E815 00 00
  52++E817 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  52++E81B 00 00
  53++E81D 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  53++E821 00 00
  54++E823 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  54++E827 00 00
  55++E829 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  55++E82D 00 00
  56++E82F 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  56++E833 00 00
  57++E835 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  57++E839 00 00
  58++E83B
  59++E83B              LogoVertSize: equ $ - LogoVertices
  60++E83B
  61++E83B
  62++E83B
  63++E83B 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  64++E83F 1F 00 04 08  	DB $1F, $00, $04, $08
  65++E843 1F 00 08 0C  	DB $1F, $00, $08, $0C
  66++E847 1F 00 0C 10  	DB $1F, $00, $0C, $10
  67++E84B 1F 00 10 14  	DB $1F, $00, $10, $14
  68++E84F 1F 00 14 18  	DB $1F, $00, $14, $18
  69++E853 1F 00 18 1C  	DB $1F, $00, $18, $1C
  70++E857 1F 00 1C 20  	DB $1F, $00, $1C, $20
  71++E85B 1F 00 20 24  	DB $1F, $00, $20, $24
  72++E85F 1F 00 24 28  	DB $1F, $00, $24, $28
  73++E863 1F 00 28 2C  	DB $1F, $00, $28, $2C
  74++E867 1F 00 2C 00  	DB $1F, $00, $2C, $00
  75++E86B 1E 03 38 3C  	DB $1E, $03, $38, $3C
  76++E86F 1E 01 3C 40  	DB $1E, $01, $3C, $40
  77++E873 1E 04 40 44  	DB $1E, $04, $40, $44
  78++E877 1E 01 44 38  	DB $1E, $01, $44, $38
  79++E87B 1E 03 10 30  	DB $1E, $03, $10, $30
  80++E87F 1E 22 30 34  	DB $1E, $22, $30, $34
  81++E883 1E 04 34 20  	DB $1E, $04, $34, $20
  82++E887 1E 11 20 10  	DB $1E, $11, $20, $10
  83++E88B 1E 13 10 38  	DB $1E, $13, $10, $38
  84++E88F 1E 13 30 3C  	DB $1E, $13, $30, $3C
  85++E893 1E 24 34 40  	DB $1E, $24, $34, $40
  86++E897 1E 14 20 44  	DB $1E, $14, $20, $44
  87++E89B 1E 00 54 58  	DB $1E, $00, $54, $58
  88++E89F 1E 00 58 60  	DB $1E, $00, $58, $60
  89++E8A3 1E 00 60 64  	DB $1E, $00, $60, $64
  90++E8A7 1E 00 5C 68  	DB $1E, $00, $5C, $68
  91++E8AB 1E 00 6C 70  	DB $1E, $00, $6C, $70
  92++E8AF 1E 00 70 74  	DB $1E, $00, $70, $74
  93++E8B3 1E 00 78 7C  	DB $1E, $00, $78, $7C
  94++E8B7 1E 00 80 84  	DB $1E, $00, $80, $84
  95++E8BB 1E 00 88 8C  	DB $1E, $00, $88, $8C
  96++E8BF 1E 00 90 94  	DB $1E, $00, $90, $94
  97++E8C3 1E 00 94 9C  	DB $1E, $00, $94, $9C
  98++E8C7 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  99++E8CB 1E 00 A4 98  	DB $1E, $00, $A4, $98
 100++E8CF
 101++E8CF              LogoEdgesSize: equ $ - LogoEdges
 102++E8CF
 103++E8CF
 104++E8CF              LogoEdgesCnt: equ LogoEdgesSize/4
 105++E8CF
 106++E8CF
 107++E8CF 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 108++E8D3 1F 00 04 0F  	DB $1F, $00, $04, $0F
 109++E8D7 3F 00 0D 34  	DB $3F, $00, $0D, $34
 110++E8DB 9F 51 51 00  	DB $9F, $51, $51, $00
 111++E8DF 1F 51 51 00  	DB $1F, $51, $51, $00
 112++E8E3
 113++E8E3
 114++E8E3              LogoNormalsSize: equ $ - LogoNormals
 115++E8E3              LogoLen: equ $ - Logo
 116++E8E3
# file closed: ./Data/ships/Logo.asm
  90+ E8E3                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8E3 01 13 24     Mamba:	                DB $01, $13, $24
   2++E8E6 92 E9                                DW MambaEdges
   3++E8E8 70                                   DB MambaEdgesSize
   4++E8E9 00 22                                DB $00, $22
   5++E8EB 96                                   DB MambaVertSize
   6++E8EC 1C                                   DB MambaEdgesCnt
   7++E8ED 00 96                                DB $00, $96
   8++E8EF 14                                   DB MambaNormalsSize
   9++E8F0 19 5A 1E                             DB $19, $5A, $1E
  10++E8F3 02 EA                                DW MambaNormals
  11++E8F5 02 12                                DB $02, $12
  12++E8F7 FC E8                                DW MambaVertices
  13++E8F9 00 00                                DB 0,0                      ; Type and Tactics
  14++E8FB 01                                   DB ShipCanAnger
  15++E8FC
  16++E8FC 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  16++E900 10 32
  17++E902 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  17++E906 20 44
  18++E908 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  18++E90C 21 44
  19++E90E 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  19++E912 31 44
  20++E914 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  20++E918 30 44
  21++E91A 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  21++E91E 11 11
  22++E920 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  22++E924 11 11
  23++E926 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  23++E92A 11 11
  24++E92C 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  24++E930 11 11
  25++E932 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  25++E936 00 00
  26++E938 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  26++E93C 00 00
  27++E93E 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  27++E942 00 00
  28++E944 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  28++E948 00 00
  29++E94A 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  29++E94E 00 00
  30++E950 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  30++E954 00 00
  31++E956 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  31++E95A 44 44
  32++E95C 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  32++E960 44 44
  33++E962 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  33++E966 44 44
  34++E968 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  34++E96C 44 44
  35++E96E 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  35++E972 44 44
  36++E974 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  36++E978 44 44
  37++E97A 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  37++E97E 44 44
  38++E980 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  38++E984 44 44
  39++E986 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  39++E98A 44 44
  40++E98C 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  40++E990 44 44
  41++E992
  42++E992              MambaVertSize: equ $ - MambaVertices
  43++E992
  44++E992
  45++E992
  46++E992 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  47++E996 1F 30 00 10  	DB $1F, $30, $00, $10
  48++E99A 1F 40 04 10  	DB $1F, $40, $04, $10
  49++E99E 1E 42 04 08  	DB $1E, $42, $04, $08
  50++E9A2 1E 41 08 0C  	DB $1E, $41, $08, $0C
  51++E9A6 1E 43 0C 10  	DB $1E, $43, $0C, $10
  52++E9AA 0E 11 14 18  	DB $0E, $11, $14, $18
  53++E9AE 0C 11 18 1C  	DB $0C, $11, $18, $1C
  54++E9B2 0D 11 1C 20  	DB $0D, $11, $1C, $20
  55++E9B6 0C 11 14 20  	DB $0C, $11, $14, $20
  56++E9BA 14 00 24 2C  	DB $14, $00, $24, $2C
  57++E9BE 10 00 24 30  	DB $10, $00, $24, $30
  58++E9C2 10 00 28 34  	DB $10, $00, $28, $34
  59++E9C6 14 00 28 38  	DB $14, $00, $28, $38
  60++E9CA 0E 00 34 38  	DB $0E, $00, $34, $38
  61++E9CE 0E 00 2C 30  	DB $0E, $00, $2C, $30
  62++E9D2 0D 44 3C 40  	DB $0D, $44, $3C, $40
  63++E9D6 0E 44 44 48  	DB $0E, $44, $44, $48
  64++E9DA 0C 44 3C 48  	DB $0C, $44, $3C, $48
  65++E9DE 0C 44 40 44  	DB $0C, $44, $40, $44
  66++E9E2 07 44 50 54  	DB $07, $44, $50, $54
  67++E9E6 05 44 50 60  	DB $05, $44, $50, $60
  68++E9EA 05 44 54 60  	DB $05, $44, $54, $60
  69++E9EE 07 44 4C 58  	DB $07, $44, $4C, $58
  70++E9F2 05 44 4C 5C  	DB $05, $44, $4C, $5C
  71++E9F6 05 44 58 5C  	DB $05, $44, $58, $5C
  72++E9FA 1E 21 00 08  	DB $1E, $21, $00, $08
  73++E9FE 1E 31 00 0C  	DB $1E, $31, $00, $0C
  74++EA02
  75++EA02              MambaEdgesSize: equ $ - MambaEdges
  76++EA02
  77++EA02
  78++EA02              MambaEdgesCnt: equ MambaEdgesSize/4
  79++EA02
  80++EA02
  81++EA02 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  82++EA06 1E 00 18 02  	DB $1E, $00, $18, $02
  83++EA0A 9E 20 40 10  	DB $9E, $20, $40, $10
  84++EA0E 1E 20 40 10  	DB $1E, $20, $40, $10
  85++EA12 3E 00 00 7F  	DB $3E, $00, $00, $7F
  86++EA16
  87++EA16              MambaNormalsSize: equ $ - MambaNormals
  88++EA16              MambaLen: equ $ - Mamba
  89++EA16
# file closed: ./Data/ships/Mamba.asm
  91+ EA16                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA16 00 06 40     Missile:	            DB $00, $06, $40
   2++EA19 95 EA                                DW MissileEdges
   3++EA1B 60                                   DB MissileEdgesSize
   4++EA1C 00 0A                                DB $00, $0A
   5++EA1E 66                                   DB MissileVertSize
   6++EA1F 18                                   DB MissileEdgesCnt
   7++EA20 00 00                                DB $00, $00
   8++EA22 24                                   DB MissileNormalsSize
   9++EA23 0E 02 2C                             DB $0E, $02, $2C
  10++EA26 F5 EA                                DW MissileNormals
  11++EA28 02 00                                DB $02, $00
  12++EA2A 2F EA                                DW MissileVertices
  13++EA2C 01 00                                DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA2E 00                                   DB 0
  15++EA2F
  16++EA2F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  16++EA33 10 32
  17++EA35 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  17++EA39 21 54
  18++EA3B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  18++EA3F 32 74
  19++EA41 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  19++EA45 30 76
  20++EA47 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  20++EA4B 10 65
  21++EA4D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  21++EA51 74 88
  22++EA53 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  22++EA57 54 88
  23++EA59 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  23++EA5D 65 88
  24++EA5F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  24++EA63 76 88
  25++EA65 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  25++EA69 74 88
  26++EA6B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  26++EA6F 54 88
  27++EA71 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  27++EA75 65 88
  28++EA77 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  28++EA7B 76 88
  29++EA7D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  29++EA81 76 77
  30++EA83 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  30++EA87 65 66
  31++EA89 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  31++EA8D 74 77
  32++EA8F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  32++EA93 54 55
  33++EA95
  34++EA95              MissileVertSize: equ $ - MissileVertices
  35++EA95
  36++EA95
  37++EA95
  38++EA95 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  39++EA99 1F 32 00 08  	DB $1F, $32, $00, $08
  40++EA9D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  41++EAA1 1F 10 00 10  	DB $1F, $10, $00, $10
  42++EAA5 1F 24 04 08  	DB $1F, $24, $04, $08
  43++EAA9 1F 51 04 10  	DB $1F, $51, $04, $10
  44++EAAD 1F 60 0C 10  	DB $1F, $60, $0C, $10
  45++EAB1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  46++EAB5 1F 74 08 14  	DB $1F, $74, $08, $14
  47++EAB9 1F 54 04 18  	DB $1F, $54, $04, $18
  48++EABD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  49++EAC1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  50++EAC5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  51++EAC9 1F 87 14 20  	DB $1F, $87, $14, $20
  52++EACD 1F 84 14 18  	DB $1F, $84, $14, $18
  53++EAD1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  54++EAD5 08 85 18 28  	DB $08, $85, $18, $28
  55++EAD9 08 87 14 24  	DB $08, $87, $14, $24
  56++EADD 08 87 20 30  	DB $08, $87, $20, $30
  57++EAE1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  58++EAE5 08 74 24 3C  	DB $08, $74, $24, $3C
  59++EAE9 08 54 28 40  	DB $08, $54, $28, $40
  60++EAED 08 76 30 34  	DB $08, $76, $30, $34
  61++EAF1 08 65 2C 38  	DB $08, $65, $2C, $38
  62++EAF5
  63++EAF5              MissileEdgesSize: equ $ - MissileEdges
  64++EAF5
  65++EAF5
  66++EAF5              MissileEdgesCnt: equ MissileEdgesSize/4
  67++EAF5
  68++EAF5
  69++EAF5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  70++EAF9 5F 00 40 10  	DB $5F, $00, $40, $10
  71++EAFD 1F 40 00 10  	DB $1F, $40, $00, $10
  72++EB01 1F 00 40 10  	DB $1F, $00, $40, $10
  73++EB05 1F 20 00 00  	DB $1F, $20, $00, $00
  74++EB09 5F 00 20 00  	DB $5F, $00, $20, $00
  75++EB0D 9F 20 00 00  	DB $9F, $20, $00, $00
  76++EB11 1F 00 20 00  	DB $1F, $00, $20, $00
  77++EB15 3F 00 00 B0  	DB $3F, $00, $00, $B0
  78++EB19
  79++EB19
  80++EB19              MissileNormalsSize: equ $ - MissileNormals
  81++EB19              MissileLen: equ $ - Missile
  82++EB19
# file closed: ./Data/ships/Missile.asm
  92+ EB19                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB19 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB1C 98 EB                                DW MonitorEdges
   3++EB1E 5C                                   DB MonitorEdgesSize
   4++EB1F 00 2A                                DB $00, $2A
   5++EB21 66                                   DB MonitorVertSize
   6++EB22 17                                   DB MonitorEdgesCnt
   7++EB23 01 90                                DB $01, $90
   8++EB25 2C                                   DB MonitorNormalsSize
   9++EB26 28 84 10                             DB $28, $84, $10
  10++EB29 F4 EB                                DW MonitorNormals
  11++EB2B 00 37                                DB $00, $37
  12++EB2D 32 EB                                DW MonitorVertices
  13++EB2F 00 00                                DB 0,0                      ; Type and Tactics
  14++EB31 01                                   DB ShipCanAnger
  15++EB32
  16++EB32 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  16++EB36 FF FF
  17++EB38 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  17++EB3C 23 01
  18++EB3E 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  18++EB42 50 34
  19++EB44 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  19++EB48 78 12
  20++EB4A 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  20++EB4E 96 45
  21++EB50 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  21++EB54 AA 28
  22++EB56 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  22++EB5A AA 49
  23++EB5C 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  23++EB60 AA 23
  24++EB62 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  24++EB66 AA 34
  25++EB68 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  25++EB6C AA 89
  26++EB6E 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  26++EB72 89 67
  27++EB74 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  27++EB78 00 00
  28++EB7A 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  28++EB7E 00 00
  29++EB80 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  29++EB84 77 77
  30++EB86 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  30++EB8A 77 77
  31++EB8C 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  31++EB90 66 66
  32++EB92 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  32++EB96 66 66
  33++EB98              MonitorVertSize:        equ $ - MonitorVertices
  34++EB98 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  35++EB9C 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  36++EBA0 1F 23 04 1C                          DB $1F, $23, $04, $1C
  37++EBA4 1F 34 08 20                          DB $1F, $34, $08, $20
  38++EBA8 1F 45 08 10                          DB $1F, $45, $08, $10
  39++EBAC 1F 50 00 08                          DB $1F, $50, $00, $08
  40++EBB0 1F 03 04 08                          DB $1F, $03, $04, $08
  41++EBB4 1F 67 00 28                          DB $1F, $67, $00, $28
  42++EBB8 1F 78 0C 28                          DB $1F, $78, $0C, $28
  43++EBBC 1F 89 24 28                          DB $1F, $89, $24, $28
  44++EBC0 1F 96 10 28                          DB $1F, $96, $10, $28
  45++EBC4 1F 17 00 0C                          DB $1F, $17, $00, $0C
  46++EBC8 1F 28 0C 14                          DB $1F, $28, $0C, $14
  47++EBCC 1F 49 18 10                          DB $1F, $49, $18, $10
  48++EBD0 1F 56 10 00                          DB $1F, $56, $10, $00
  49++EBD4 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  50++EBD8 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  51++EBDC 1F 4A 20 18                          DB $1F, $4A, $20, $18
  52++EBE0 1F 8A 14 24                          DB $1F, $8A, $14, $24
  53++EBE4 1F 9A 18 24                          DB $1F, $9A, $18, $24
  54++EBE8 0A 00 2C 30                          DB $0A, $00, $2C, $30
  55++EBEC 0A 77 34 38                          DB $0A, $77, $34, $38
  56++EBF0 0A 66 3C 40                          DB $0A, $66, $3C, $40
  57++EBF4              MonitorEdgesSize:       equ $ - MonitorEdges
  58++EBF4              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  59++EBF4 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  60++EBF8 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  61++EBFC 3F 36 1C 10                          DB $3F, $36, $1C, $10
  62++EC00 3F 00 39 1C                          DB $3F, $00, $39, $1C
  63++EC04 BF 36 1C 10                          DB $BF, $36, $1C, $10
  64++EC08 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  65++EC0C DF 26 2F 12                          DB $DF, $26, $2F, $12
  66++EC10 5F 26 2F 12                          DB $5F, $26, $2F, $12
  67++EC14 7F 27 30 0D                          DB $7F, $27, $30, $0D
  68++EC18 FF 27 30 0D                          DB $FF, $27, $30, $0D
  69++EC1C 3F 00 00 40                          DB $3F, $00, $00, $40
  70++EC20              MonitorNormalsSize:     equ $ - MonitorNormals
  71++EC20              MonitorLen:             equ $ - Monitor
  72++EC20
# file closed: ./Data/ships/Monitor.asm
  93+ EC20                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC20 01 03 84     Moray:	                DB $01, $03, $84
   2++EC23 8D EC                                DW MorayEdges
   3++EC25 4C                                   DB MorayEdgesSize
   4++EC26 00 1A                                DB $00, $1A
   5++EC28 54                                   DB MorayVertSize
   6++EC29 13                                   DB MorayEdgesCnt
   7++EC2A 00 32                                DB $00, $32
   8++EC2C 24                                   DB MorayNormalsSize
   9++EC2D 28 59 19                             DB $28, $59, $19
  10++EC30 D9 EC                                DW MorayNormals
  11++EC32 02 2A                                DB $02, $2A
  12++EC34 39 EC                                DW MorayVertices
  13++EC36 00 00                                DB 0,0                      ; Type and Tactics
  14++EC38 01                                   DB ShipCanAnger
  15++EC39
  16++EC39 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  16++EC3D 02 78
  17++EC3F 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  17++EC43 01 67
  18++EC45 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  18++EC49 FF FF
  19++EC4B 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  19++EC4F 13 66
  20++EC51 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  20++EC55 25 88
  21++EC57 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  21++EC5B 45 78
  22++EC5D 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  22++EC61 34 67
  23++EC63 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  23++EC67 44 44
  24++EC69 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  24++EC6D 44 44
  25++EC6F 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  25++EC73 44 44
  26++EC75 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  26++EC79 00 00
  27++EC7B 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  27++EC7F 00 00
  28++EC81 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  28++EC85 00 00
  29++EC87 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  29++EC8B 00 00
  30++EC8D              MorayVertSize:          equ $ - MorayVertices
  31++EC8D 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  32++EC91 1F 16 04 0C                          DB $1F, $16, $04, $0C
  33++EC95 18 36 0C 18                          DB $18, $36, $0C, $18
  34++EC99 18 47 14 18                          DB $18, $47, $14, $18
  35++EC9D 18 58 10 14                          DB $18, $58, $10, $14
  36++ECA1 1F 28 00 10                          DB $1F, $28, $00, $10
  37++ECA5 0F 67 04 18                          DB $0F, $67, $04, $18
  38++ECA9 0F 78 00 14                          DB $0F, $78, $00, $14
  39++ECAD 0F 02 00 08                          DB $0F, $02, $00, $08
  40++ECB1 0F 01 04 08                          DB $0F, $01, $04, $08
  41++ECB5 11 13 08 0C                          DB $11, $13, $08, $0C
  42++ECB9 11 25 08 10                          DB $11, $25, $08, $10
  43++ECBD 0D 45 08 14                          DB $0D, $45, $08, $14
  44++ECC1 0D 34 08 18                          DB $0D, $34, $08, $18
  45++ECC5 05 44 1C 20                          DB $05, $44, $1C, $20
  46++ECC9 07 44 1C 24                          DB $07, $44, $1C, $24
  47++ECCD 07 44 20 24                          DB $07, $44, $20, $24
  48++ECD1 05 00 28 2C                          DB $05, $00, $28, $2C
  49++ECD5 05 00 30 34                          DB $05, $00, $30, $34
  50++ECD9              MorayEdgesSize:         equ $ - MorayEdges
  51++ECD9              MorayEdgesCnt:          equ MorayEdgesSize/4
  52++ECD9 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  53++ECDD 9F 0A 31 07                          DB $9F, $0A, $31, $07
  54++ECE1 1F 0A 31 07                          DB $1F, $0A, $31, $07
  55++ECE5 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  56++ECE9 78 00 34 4E                          DB $78, $00, $34, $4E
  57++ECED 78 3B 1C 65                          DB $78, $3B, $1C, $65
  58++ECF1 DF 48 63 32                          DB $DF, $48, $63, $32
  59++ECF5 5F 00 53 1E                          DB $5F, $00, $53, $1E
  60++ECF9 5F 48 63 32                          DB $5F, $48, $63, $32
  61++ECFD
  62++ECFD              MorayNormalsSize:       equ $ - MorayNormals
  63++ECFD              MorayLen:               equ $ - Moray
  64++ECFD
# file closed: ./Data/ships/Moray.asm
  94+ ECFD                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ECFD 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ED00 8E ED                                DW OphidianEdges
   3++ED02 78                                   DB OphidianEdgesSize
   4++ED03 00 3C                                DB $00, $3C
   5++ED05 78                                   DB OphidianVertSize
   6++ED06 1E                                   DB OphidianEdgesCnt
   7++ED07 00 32                                DB $00, $32
   8++ED09 30                                   DB OphidianNormalsSize
   9++ED0A 14 40 22                             DB $14, $40, $22
  10++ED0D 06 EE                                DW OphidianNormals
  11++ED0F 01 1A                                DB $01, $1A
  12++ED11 16 ED                                DW OphidianVertices
  13++ED13 00 00                                DB 0,0                      ; Type and Tactics
  14++ED15 01                                   DB ShipCanAnger
  15++ED16
  16++ED16 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  16++ED1A 68 02
  17++ED1C 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  17++ED20 67 01
  18++ED22 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  18++ED26 22 01
  19++ED28 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  19++ED2C 8A 24
  20++ED2E 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  20++ED32 79 13
  21++ED34 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  21++ED38 FF FF
  22++ED3A 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  22++ED3E 9B 35
  23++ED40 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  23++ED44 AB 45
  24++ED46 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  24++ED4A BB 4A
  25++ED4C 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  25++ED50 FF FF
  26++ED52 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  26++ED56 FF FF
  27++ED58 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  27++ED5C BB 39
  28++ED5E 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  28++ED62 FF FF
  29++ED64 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  29++ED68 FF FF
  30++ED6A 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  30++ED6E BB 9A
  31++ED70 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  31++ED74 FF FF
  32++ED76 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  32++ED7A BB BB
  33++ED7C 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  33++ED80 BB BB
  34++ED82 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  34++ED86 BB BB
  35++ED88 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  35++ED8C BB BB
  36++ED8E
  37++ED8E              OphidianVertSize:       equ $ - OphidianVertices
  38++ED8E 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  39++ED92 1F 01 04 08                          DB $1F, $01, $04, $08
  40++ED96 1F 02 00 08                          DB $1F, $02, $00, $08
  41++ED9A 1F 12 08 14                          DB $1F, $12, $08, $14
  42++ED9E 1F 13 10 14                          DB $1F, $13, $10, $14
  43++EDA2 1F 24 0C 14                          DB $1F, $24, $0C, $14
  44++EDA6 1F 35 14 18                          DB $1F, $35, $14, $18
  45++EDAA 1F 45 14 1C                          DB $1F, $45, $14, $1C
  46++EDAE 1F 28 00 0C                          DB $1F, $28, $00, $0C
  47++EDB2 1F 17 04 10                          DB $1F, $17, $04, $10
  48++EDB6 1F 39 10 2C                          DB $1F, $39, $10, $2C
  49++EDBA 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  50++EDBE 1F 67 04 3C                          DB $1F, $67, $04, $3C
  51++EDC2 1F 68 00 3C                          DB $1F, $68, $00, $3C
  52++EDC6 1F 79 10 3C                          DB $1F, $79, $10, $3C
  53++EDCA 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  54++EDCE 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  55++EDD2 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  56++EDD6 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  57++EDDA 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  58++EDDE 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  59++EDE2 1F AB 20 38                          DB $1F, $AB, $20, $38
  60++EDE6 10 BB 40 44                          DB $10, $BB, $40, $44
  61++EDEA 10 BB 44 48                          DB $10, $BB, $44, $48
  62++EDEE 10 BB 48 4C                          DB $10, $BB, $48, $4C
  63++EDF2 10 BB 4C 40                          DB $10, $BB, $4C, $40
  64++EDF6 10 39 30 34                          DB $10, $39, $30, $34
  65++EDFA 10 39 2C 30                          DB $10, $39, $2C, $30
  66++EDFE 10 4A 28 24                          DB $10, $4A, $28, $24
  67++EE02 10 4A 24 20                          DB $10, $4A, $24, $20
  68++EE06              OphidianEdgesSize:      equ $ - OphidianEdges
  69++EE06              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  70++EE06
  71++EE06 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  72++EE0A 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  73++EE0E 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  74++EE12 1F 10 22 02                          DB $1F, $10, $22, $02
  75++EE16 9F 10 22 02                          DB $9F, $10, $22, $02
  76++EE1A 3F 00 25 03                          DB $3F, $00, $25, $03
  77++EE1E 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  78++EE22 5F 0A 14 02                          DB $5F, $0A, $14, $02
  79++EE26 DF 0A 14 02                          DB $DF, $0A, $14, $02
  80++EE2A 7F 12 20 02                          DB $7F, $12, $20, $02
  81++EE2E FF 12 20 02                          DB $FF, $12, $20, $02
  82++EE32 3F 00 00 25                          DB $3F, $00, $00, $25
  83++EE36
  84++EE36              OphidianNormalsSize:    equ $ - OphidianNormals
  85++EE36              OphidianLen:            equ $ - Ophidian
  86++EE36
# file closed: ./Data/ships/Ophidian.asm
  95+ EE36                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE36 80 00 64     Plate:	                DB $80, $00, $64
   2++EE39 61 EE                                DW PlateEdges
   3++EE3B 10                                   DB PlateEdgesSize
   4++EE3C 00 0A                                DB $00, $0A
   5++EE3E 12                                   DB PlateVertSize
   6++EE3F 04                                   DB PlateEdgesCnt
   7++EE40 00 00                                DB $00, $00
   8++EE42 04                                   DB PlateNormalsSize
   9++EE43 05 10 10                             DB $05, $10, $10
  10++EE46 71 EE                                DW PlateNormals
  11++EE48 03 00                                DB $03, $00
  12++EE4A 4F EE                                DW PlateVertices
  13++EE4C 00 00                                DB 0,0                      ; Type and Tactics
  14++EE4E 01                                   DB ShipCanAnger
  15++EE4F
  16++EE4F
  17++EE4F 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  17++EE53 FF FF
  18++EE55 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  18++EE59 FF FF
  19++EE5B 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  19++EE5F FF FF
  20++EE61
  21++EE61              PlateVertSize: equ $ - PlateVertices
  22++EE61
  23++EE61
  24++EE61
  25++EE61 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  26++EE65 10 FF 04 08  	DB $10, $FF, $04, $08
  27++EE69 14 FF 08 0C  	DB $14, $FF, $08, $0C
  28++EE6D 10 FF 0C 00  	DB $10, $FF, $0C, $00
  29++EE71
  30++EE71              PlateEdgesSize: equ $ - PlateEdges
  31++EE71
  32++EE71
  33++EE71              PlateEdgesCnt: equ PlateEdgesSize/4
  34++EE71
  35++EE71
  36++EE71 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  37++EE75
  38++EE75
  39++EE75              PlateNormalsSize: equ $ - PlateNormals
  40++EE75              PlateLen: equ $ - Plate
  41++EE75
# file closed: ./Data/ships/Plate.asm
  96+ EE75                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE75              ;\ -> &5BA1 \ Python = Type 12
   2++EE75 05 00 19     Python:                 DB $05, $00, $19
   3++EE78 D0 EE                                DW PythonEdges
   4++EE7A 68                                   DB PythonEdgesSize
   5++EE7B 00 2A                                DB $00,$2A
   6++EE7D 42                                   DB PythonVertSize
   7++EE7E 1A                                   DB PythonEdgesCnt
   8++EE7F 00 00                                DB $00,$00
   9++EE81 34                                   DB PythonNormalsSize
  10++EE82 28 FA 14                             DB $28,$FA,$14
  11++EE85 38 EF                                DW PythonNormals
  12++EE87 00 1B                                DB $00, $1B
  13++EE89 8E EE                                DW PythonVertices
  14++EE8B 00 00                                DB 0,0                      ; Type and Tactics
  15++EE8D 01                                   DB ShipCanAnger
  16++EE8E
  17++EE8E 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  17++EE92 10 32
  18++EE94 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  18++EE98 10 54
  19++EE9A 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  19++EE9E FF FF
  20++EEA0 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  20++EEA4 FF FF
  21++EEA6 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  21++EEAA 54 98
  22++EEAC 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  22++EEB0 89 CC
  23++EEB2 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  23++EEB6 B8 CC
  24++EEB8 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  24++EEBC A9 CC
  25++EEBE 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  25++EEC2 32 76
  26++EEC4 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  26++EEC8 76 BA
  27++EECA 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  27++EECE BA CC
  28++EED0              PythonVertSize          equ $  - PythonVertices
  29++EED0 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  29++EED4 1F 20 00 0C
  30++EED8 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  30++EEDC 1E 10 00 04
  31++EEE0 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  31++EEE4 1D 51 04 08
  32++EEE8 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  32++EEEC 1D 40 04 0C
  33++EEF0 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  33++EEF4 1D A7 08 24
  34++EEF8 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  34++EEFC 1D B6 0C 24
  35++EF00 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  35++EF04 05 BB 0C 28
  36++EF08 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  36++EF0C 05 AA 08 28
  37++EF10 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  37++EF14 1F B8 0C 18
  38++EF18 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  38++EF1C 1F C9 14 1C
  39++EF20 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  39++EF24 1D CB 18 28
  40++EF28 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  40++EF2C 1D BA 24 28
  41++EF30 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  41++EF34 1D 76 20 24
  42++EF38              PythonEdgesSize         equ $  - PythonEdges
  43++EF38              PythonEdgesCnt          equ PythonEdgesSize/4
  44++EF38 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  44++EF3C 1E 1B 28 0B
  45++EF40 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  45++EF44 5E 1B 28 0B
  46++EF48 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  46++EF4C 1E 13 26 00
  47++EF50 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  47++EF54 5E 13 26 00
  48++EF58 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  48++EF5C 3E 19 25 0B
  49++EF60 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  49++EF64 FE 19 25 0B
  50++EF68 3E 00 00 70                          DB $3E, $00, $00, $70
  51++EF6C              PythonNormalsSize       equ $  - PythonNormals
  52++EF6C              PythonLen               equ $  - Python
  53++EF6C
# file closed: ./Data/ships/Python.asm
  97+ EF6C                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF6C 02 19 00     Python_P:	            DB $02, $19, $00
   2++EF6F C7 EF                                DW Python_PEdges
   3++EF71 68                                   DB Python_PEdgesSize
   4++EF72 00 2A                                DB $00, $2A
   5++EF74 42                                   DB Python_PVertSize
   6++EF75 1A                                   DB Python_PEdgesCnt
   7++EF76 00 C8                                DB $00, $C8
   8++EF78 34                                   DB Python_PNormalsSize
   9++EF79 28 FA 14                             DB $28, $FA, $14
  10++EF7C 2F F0                                DW Python_PNormals
  11++EF7E 00 1B                                DB $00, $1B
  12++EF80 85 EF                                DW Python_PVertices
  13++EF82 00 00                                DB 0,0                      ; Type and Tactics
  14++EF84 01                                   DB ShipCanAnger
  15++EF85
  16++EF85 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  16++EF89 10 32
  17++EF8B 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  17++EF8F 10 54
  18++EF91 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  18++EF95 FF FF
  19++EF97 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  19++EF9B FF FF
  20++EF9D 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  20++EFA1 54 98
  21++EFA3 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  21++EFA7 89 CC
  22++EFA9 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  22++EFAD B8 CC
  23++EFAF 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  23++EFB3 A9 CC
  24++EFB5 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  24++EFB9 32 76
  25++EFBB 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  25++EFBF 76 BA
  26++EFC1 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  26++EFC5 BA CC
  27++EFC7
  28++EFC7              Python_PVertSize: equ $ - Python_PVertices
  29++EFC7
  30++EFC7
  31++EFC7
  32++EFC7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  33++EFCB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  34++EFCF 1F 31 00 08  	DB $1F, $31, $00, $08
  35++EFD3 1F 10 00 04  	DB $1F, $10, $00, $04
  36++EFD7 1F 59 08 10  	DB $1F, $59, $08, $10
  37++EFDB 1F 51 04 08  	DB $1F, $51, $04, $08
  38++EFDF 1F 37 08 20  	DB $1F, $37, $08, $20
  39++EFE3 1F 40 04 0C  	DB $1F, $40, $04, $0C
  40++EFE7 1F 62 0C 20  	DB $1F, $62, $0C, $20
  41++EFEB 1F A7 08 24  	DB $1F, $A7, $08, $24
  42++EFEF 1F 84 0C 10  	DB $1F, $84, $0C, $10
  43++EFF3 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  44++EFF7 07 88 0C 14  	DB $07, $88, $0C, $14
  45++EFFB 07 BB 0C 28  	DB $07, $BB, $0C, $28
  46++EFFF 07 99 08 14  	DB $07, $99, $08, $14
  47++F003 07 AA 08 28  	DB $07, $AA, $08, $28
  48++F007 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  49++F00B 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  50++F00F 1F C8 14 18  	DB $1F, $C8, $14, $18
  51++F013 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  52++F017 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  53++F01B 1F CB 18 28  	DB $1F, $CB, $18, $28
  54++F01F 1F 98 10 14  	DB $1F, $98, $10, $14
  55++F023 1F BA 24 28  	DB $1F, $BA, $24, $28
  56++F027 1F 54 04 10  	DB $1F, $54, $04, $10
  57++F02B 1F 76 20 24  	DB $1F, $76, $20, $24
  58++F02F
  59++F02F              Python_PEdgesSize: equ $ - Python_PEdges
  60++F02F
  61++F02F
  62++F02F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  63++F02F
  64++F02F
  65++F02F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  66++F033 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  67++F037 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  68++F03B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  69++F03F 9F 13 26 00  	DB $9F, $13, $26, $00
  70++F043 1F 13 26 00  	DB $1F, $13, $26, $00
  71++F047 DF 13 26 00  	DB $DF, $13, $26, $00
  72++F04B 5F 13 26 00  	DB $5F, $13, $26, $00
  73++F04F BF 19 25 0B  	DB $BF, $19, $25, $0B
  74++F053 3F 19 25 0B  	DB $3F, $19, $25, $0B
  75++F057 7F 19 25 0B  	DB $7F, $19, $25, $0B
  76++F05B FF 19 25 0B  	DB $FF, $19, $25, $0B
  77++F05F 3F 00 00 70  	DB $3F, $00, $00, $70
  78++F063
  79++F063
  80++F063              Python_PNormalsSize: equ $ - Python_PNormals
  81++F063              Python_PLen: equ $ - Python_P
  82++F063
# file closed: ./Data/ships/Python_P.asm
  98+ F063
# file closed: ./Data/ShipModelMetaData2.asm
1235  F063              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1236  F063                  SLOT    ShipModelsAddr
1237  F063                  PAGE    BankShipModels3
1238  F063              	ORG     ShipModelsAddr, BankShipModels3
1239  E000
1240  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1241  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1241  E00F 06 00       >                        ld      b,0
1241  E011 4F          >                        ld      c,a                                 ; c= original ship id
1241  E012 CB 3F       >.ShiftLoop:             srl     a
1241  E014 CB 3F       >                        srl     a
1241  E016 CB 3F       >                        srl     a
1241  E018 CB 3F       >                        srl     a                                   ; divide by 16
1241  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1241  E01B 79          >                        ld      a,c
1241  E01C 50          >                        ld      d,b
1241  E01D 1E 10       >                        ld      e,16
1241  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1241  E021 93          >                        sub     e                                   ; a= actual model id now
1241  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1241  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1241  E024 7A          >                        ld      a,d                                 ; a = bank number
1241  E025             >;.. Now b = bank and a = adjusted ship nbr
1241  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1241  E028 ED 31       >                        add     hl,a
1241  E02A ED 31       >                        add     hl,a
1241  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1241  E02D             >                        ClearCarryFlag
1241  E02D B7          >                        or a
1241  E02E C9          >                        ret
1242  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1242  E02F 2A 1F C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1242  E032 11 24 C3    >                        ld          de,UBnkHullVerticies
1242  E035 06 00       >                        ld          b,0
1242  E037 3A 13 C3    >                        ld			a,(VertexCtX6Addr)
1242  E03A 4F          >                        ld          c,a
1242  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1242  E03C CD C5 93    >                        call        memcopy_dma
1242  E03F C9          >                        ret
1243  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1243  E040 2A 0E C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1243  E043 11 14 C4    >                        ld          de,UBnkHullEdges
1243  E046 06 00       >                        ld          b,0
1243  E048 3A 10 C3    >                        ld			a,(LineX4Addr)
1243  E04B 4F          >                        ld          c,a
1243  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1243  E04D CD C5 93    >                        call        memcopy_dma
1243  E050 C9          >                        ret
1244  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1244  E051 2A 1B C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1244  E054 11 DC C4    >                        ld          de,UBnkHullNormals
1244  E057 06 00       >                        ld          b,0
1244  E059 3A 17 C3    >                        ld          a,(FaceCtX4Addr)
1244  E05C 4F          >                        ld          c,a
1244  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1244  E05E CD C5 93    >                        call        memcopy_dma
1244  E061 C9          >                        ret
1245  E062              ShipBankTable3:         MShipBankTable
1245  E062 3B 00       >                        DW      BankShipModels1
1245  E064 43 00       >                        DW      BankShipModels2
1245  E066 44 00       >                        DW      BankShipModels3
1245  E068 45 00       >                        DW      BankShipModels4
1246  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1246  E06A 21 1B C0    >                        ld          hl,UBnkShipModelBank
1246  E06D 36 44       >                        ld          (hl),BankShipModels3
1246  E06F 32 1C C0    >                        ld          (UBnkShipModelNbr),a
1246  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1246  E075 ED 31       >                        add         hl,a
1246  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1246  E079 4E          >                        ld          c,(hl)
1246  E07A 23          >                        inc         hl
1246  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1246  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1246  E07F ED 31       >                        add         hl,a
1246  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1246  E083 7E          >                        ld          a,(hl)
1246  E084 23          >                        inc         hl
1246  E085 66          >                        ld          h,(hl)
1246  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1246  E087 11 0B C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1246  E08A 01 19 00    >                        ld          bc,ShipDataLength
1246  E08D ED B0       >                        ldir
1246  E08F CD 2F E0    >                        call        CopyVertsToUniv
1246  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1246  E095 CD 51 E0    >                        call        CopyNormsToUniv
1246  E098 C9          >                        ret
1247  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1247  E099 3E 0D       >                        ld          a,13
1247  E09B CD 6A E0    >                        call        CopyShipToUniverse3
1247  E09E C9          >                        ret
1248  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 1F E1        ShipModelTable3:         DW Rock_Hermit                             ;32
   2+ E0A1 FA E1                                 DW ShuttleType9                            ;33
   3+ E0A3 31 E3                                 DW Shuttle_Mk_2                            ;34
   4+ E0A5 54 E4                                 DW Sidewinder                              ;35
   5+ E0A7 01 E5                                 DW Splinter                                ;36
   6+ E0A9 5A E5                                 DW TestVector                              ;37
   7+ E0AB BD E5                                 DW Thargoid                                ;38
   8+ E0AD DE E6                                 DW Thargon                                 ;39
   9+ E0AF 8B E7                                 DW TransportType10                         ;40
  10+ E0B1 72 E9                                 DW Viper                                   ;41
  11+ E0B3 51 EA                                 DW Worm                                    ;42
  12+ E0B5 06 EB                                 DW Rattler                                 ;43
  13+ E0B7 00 00                                 DW 0                                       ;44
  14+ E0B9 00 00                                 DW 0                                       ;45
  15+ E0BB 00 00                                 DW 0                                       ;46
  16+ E0BD 00 00                                 DW 0                                       ;47
  17+ E0BF 38 E1        ShipVertexTable3:        DW Rock_HermitVertices
  18+ E0C1 13 E2                                 DW ShuttleType9Vertices
  19+ E0C3 4A E3                                 DW Shuttle_Mk_2Vertices
  20+ E0C5 6D E4                                 DW SidewinderVertices
  21+ E0C7 1A E5                                 DW SplinterVertices
  22+ E0C9 73 E5                                 DW TestVectorVertices
  23+ E0CB D6 E5                                 DW ThargoidVertices
  24+ E0CD F7 E6                                 DW ThargonVertices
  25+ E0CF A4 E7                                 DW TransportType10Vertices
  26+ E0D1 8B E9                                 DW ViperVertices
  27+ E0D3 6A EA                                 DW WormVertices
  28+ E0D5 1F EB                                 DW RattlerVertices
  29+ E0D7 6E E1        ShipEdgeTable3:          DW Rock_HermitEdges
  30+ E0D9 85 E2                                 DW ShuttleType9Edges
  31+ E0DB B0 E3                                 DW Shuttle_Mk_2Edges
  32+ E0DD A9 E4                                 DW SidewinderEdges
  33+ E0DF 32 E5                                 DW SplinterEdges
  34+ E0E1 9D E5                                 DW TestVectorEdges
  35+ E0E3 4E E6                                 DW ThargoidEdges
  36+ E0E5 33 E7                                 DW ThargonEdges
  37+ E0E7 82 E8                                 DW TransportType10Edges
  38+ E0E9 E5 E9                                 DW ViperEdges
  39+ E0EB A6 EA                                 DW WormEdges
  40+ E0ED 79 EB                                 DW RattlerEdges
  41+ E0EF C2 E1        ShipNormalTable3:        DW Rock_HermitNormals
  42+ E0F1 FD E2                                 DW ShuttleType9Normals
  43+ E0F3 20 E4                                 DW Shuttle_Mk_2Normals
  44+ E0F5 E5 E4                                 DW SidewinderNormals
  45+ E0F7 4A E5                                 DW SplinterNormals
  46+ E0F9 AD E5                                 DW TestVectorNormals
  47+ E0FB B6 E6                                 DW ThargoidNormals
  48+ E0FD 6F E7                                 DW ThargonNormals
  49+ E0FF 3A E9                                 DW TransportType10Normals
  50+ E101 35 EA                                 DW ViperNormals
  51+ E103 E6 EA                                 DW WormNormals
  52+ E105 79 EB                                 DW RattlerEdges
  53+ E107 DB 00        ShipModelSizeTable3:     DW Rock_HermitLen
  54+ E109 37 01                                 DW ShuttleType9Len
  55+ E10B 23 01                                 DW Shuttle_Mk_2Len
  56+ E10D AD 00                                 DW SidewinderLen
  57+ E10F 59 00                                 DW SplinterLen
  58+ E111 63 00                                 DW TestVectorLen
  59+ E113 21 01                                 DW ThargoidLen
  60+ E115 AD 00                                 DW ThargonLen
  61+ E117 E7 01                                 DW TransportType10Len
  62+ E119 DF 00                                 DW ViperLen
  63+ E11B B5 00                                 DW WormLen
  64+ E11D 0F 01                                 DW RattlerLen
  65+ E11F
  66+ E11F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E11F 07 19 00     Rock_Hermit:	        DB $07, $19, $00
   2++E122 6E E1                                DW Rock_HermitEdges
   3++E124 54                                   DB Rock_HermitEdgesSize
   4++E125 00 32                                DB $00, $32
   5++E127 36                                   DB Rock_HermitVertSize
   6++E128 15                                   DB Rock_HermitEdgesCnt
   7++E129 00 00                                DB $00, $00
   8++E12B 38                                   DB Rock_HermitNormalsSize
   9++E12C 32 B4 1E                             DB $32, $B4, $1E
  10++E12F C2 E1                                DW Rock_HermitNormals
  11++E131 01 02                                DB $01, $02
  12++E133 38 E1                                DW Rock_HermitVertices
  13++E135 00 00                                DB 0,0                      ; Type and Tactics
  14++E137 01                                   DB ShipCanAnger
  15++E138
  16++E138
  17++E138 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  17++E13C FF FF
  18++E13E 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  18++E142 FF FF
  19++E144 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  19++E148 FF FF
  20++E14A 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  20++E14E FF FF
  21++E150 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  21++E154 65 DC
  22++E156 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  22++E15A FF FF
  23++E15C 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  23++E160 10 32
  24++E162 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  24++E166 FF FF
  25++E168 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  25++E16C 98 BA
  26++E16E
  27++E16E
  28++E16E              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  29++E16E
  30++E16E
  31++E16E
  32++E16E 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  33++E172 1F D6 00 10  	DB $1F, $D6, $00, $10
  34++E176 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  35++E17A 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  36++E17E 1F A3 04 08  	DB $1F, $A3, $04, $08
  37++E182 1F 32 04 18  	DB $1F, $32, $04, $18
  38++E186 1F 31 08 18  	DB $1F, $31, $08, $18
  39++E18A 1F 41 08 14  	DB $1F, $41, $08, $14
  40++E18E 1F 10 14 18  	DB $1F, $10, $14, $18
  41++E192 1F 60 00 14  	DB $1F, $60, $00, $14
  42++E196 1F 54 0C 14  	DB $1F, $54, $0C, $14
  43++E19A 1F 20 00 18  	DB $1F, $20, $00, $18
  44++E19E 1F 65 10 14  	DB $1F, $65, $10, $14
  45++E1A2 1F A8 04 20  	DB $1F, $A8, $04, $20
  46++E1A6 1F 87 04 1C  	DB $1F, $87, $04, $1C
  47++E1AA 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  48++E1AE 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  49++E1B2 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  50++E1B6 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  51++E1BA 1F BA 08 20  	DB $1F, $BA, $08, $20
  52++E1BE 1F 98 1C 20  	DB $1F, $98, $1C, $20
  53++E1C2
  54++E1C2              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  55++E1C2
  56++E1C2
  57++E1C2              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  58++E1C2
  59++E1C2
  60++E1C2 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  61++E1C6 5F 09 42 51  	DB $5F, $09, $42, $51
  62++E1CA 9F 48 40 1F  	DB $9F, $48, $40, $1F
  63++E1CE DF 40 49 2F  	DB $DF, $40, $49, $2F
  64++E1D2 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  65++E1D6 1F 87 0F 23  	DB $1F, $87, $0F, $23
  66++E1DA 1F 26 4C 46  	DB $1F, $26, $4C, $46
  67++E1DE BF 42 3B 27  	DB $BF, $42, $3B, $27
  68++E1E2 FF 43 0F 50  	DB $FF, $43, $0F, $50
  69++E1E6 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  70++E1EA FF 46 50 28  	DB $FF, $46, $50, $28
  71++E1EE 7F 3A 66 33  	DB $7F, $3A, $66, $33
  72++E1F2 3F 51 09 43  	DB $3F, $51, $09, $43
  73++E1F6 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  74++E1FA
  75++E1FA
  76++E1FA              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  77++E1FA              Rock_HermitLen: equ $ - Rock_Hermit
  78++E1FA
# file closed: ./Data/ships/Rock_Hermit.asm
  67+ E1FA                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E1FA 0F 09 C4     ShuttleType9:	            DB $0F, $09, $C4
   2++E1FD 85 E2                                    DW ShuttleType9Edges
   3++E1FF 78                                       DB ShuttleType9EdgesSize
   4++E200 00 26                                    DB $00, $26
   5++E202 72                                       DB ShuttleType9VertSize
   6++E203 1E                                       DB ShuttleType9EdgesCnt
   7++E204 00 00                                    DB $00, $00
   8++E206 34                                       DB ShuttleType9NormalsSize
   9++E207 16 20 08                                 DB $16, $20, $08
  10++E20A FD E2                                    DW ShuttleType9Normals
  11++E20C 02 00                                    DB $02, $00
  12++E20E 13 E2                                    DW ShuttleType9Vertices
  13++E210 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E212 00                                       DB 0
  15++E213
  16++E213
  17++E213 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  17++E217 FF FF
  18++E219 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  18++E21D FF FF
  19++E21F 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  19++E223 FF FF
  20++E225 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  20++E229 FF FF
  21++E22B 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  21++E22F 12 39
  22++E231 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  22++E235 34 59
  23++E237 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  23++E23B 56 79
  24++E23D 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  24++E241 17 89
  25++E243 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  25++E247 99 99
  26++E249 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  26++E24D 99 99
  27++E24F 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  27++E253 99 99
  28++E255 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  28++E259 99 99
  29++E25B 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  29++E25F 0A BC
  30++E261 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  30++E265 FF 02
  31++E267 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  31++E26B 01 F4
  32++E26D 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  32++E271 A1 3F
  33++E273 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  33++E277 6B 23
  34++E279 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  34++E27D F8 C0
  35++E27F 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  35++E283 4F 18
  36++E285
  37++E285              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  38++E285
  39++E285
  40++E285
  41++E285 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  42++E289 1F 4A 04 08  	DB $1F, $4A, $04, $08
  43++E28D 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  44++E291 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  45++E295 1F 18 00 1C  	DB $1F, $18, $00, $1C
  46++E299 18 12 00 10  	DB $18, $12, $00, $10
  47++E29D 1F 23 04 10  	DB $1F, $23, $04, $10
  48++E2A1 18 34 04 14  	DB $18, $34, $04, $14
  49++E2A5 1F 45 08 14  	DB $1F, $45, $08, $14
  50++E2A9 0C 56 08 18  	DB $0C, $56, $08, $18
  51++E2AD 1F 67 0C 18  	DB $1F, $67, $0C, $18
  52++E2B1 18 78 0C 1C  	DB $18, $78, $0C, $1C
  53++E2B5 1F 39 10 14  	DB $1F, $39, $10, $14
  54++E2B9 1F 59 14 18  	DB $1F, $59, $14, $18
  55++E2BD 1F 79 18 1C  	DB $1F, $79, $18, $1C
  56++E2C1 1F 19 10 1C  	DB $1F, $19, $10, $1C
  57++E2C5 10 0C 00 30  	DB $10, $0C, $00, $30
  58++E2C9 10 0A 04 30  	DB $10, $0A, $04, $30
  59++E2CD 10 AB 08 30  	DB $10, $AB, $08, $30
  60++E2D1 10 BC 0C 30  	DB $10, $BC, $0C, $30
  61++E2D5 10 99 20 24  	DB $10, $99, $20, $24
  62++E2D9 07 99 24 28  	DB $07, $99, $24, $28
  63++E2DD 09 99 28 2C  	DB $09, $99, $28, $2C
  64++E2E1 07 99 20 2C  	DB $07, $99, $20, $2C
  65++E2E5 05 BB 34 38  	DB $05, $BB, $34, $38
  66++E2E9 08 BB 38 3C  	DB $08, $BB, $38, $3C
  67++E2ED 07 BB 34 3C  	DB $07, $BB, $34, $3C
  68++E2F1 05 AA 40 44  	DB $05, $AA, $40, $44
  69++E2F5 08 AA 44 48  	DB $08, $AA, $44, $48
  70++E2F9 07 AA 40 48  	DB $07, $AA, $40, $48
  71++E2FD              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  72++E2FD              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  73++E2FD
  74++E2FD DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  75++E301 5F 00 4A 04  	DB $5F, $00, $4A, $04
  76++E305 DF 33 33 17  	DB $DF, $33, $33, $17
  77++E309 9F 4A 00 04  	DB $9F, $4A, $00, $04
  78++E30D 9F 33 33 17  	DB $9F, $33, $33, $17
  79++E311 1F 00 4A 04  	DB $1F, $00, $4A, $04
  80++E315 1F 33 33 17  	DB $1F, $33, $33, $17
  81++E319 1F 4A 00 04  	DB $1F, $4A, $00, $04
  82++E31D 5F 33 33 17  	DB $5F, $33, $33, $17
  83++E321 3F 00 00 6B  	DB $3F, $00, $00, $6B
  84++E325 9F 29 29 5A  	DB $9F, $29, $29, $5A
  85++E329 1F 29 29 5A  	DB $1F, $29, $29, $5A
  86++E32D 5F 37 37 28  	DB $5F, $37, $37, $28
  87++E331
  88++E331
  89++E331              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  90++E331              ShuttleType9Len: equ $ - ShuttleType9
  91++E331
# file closed: ./Data/ships/ShuttleType9.asm
  68+ E331                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E331 0F 09 C4     Shuttle_Mk_2:	        DB $0F, $09, $C4
   2++E334 B0 E3                                DW Shuttle_Mk_2Edges
   3++E336 70                                   DB Shuttle_Mk_2EdgesSize
   4++E337 00 26                                DB $00, $26
   5++E339 66                                   DB Shuttle_Mk_2VertSize
   6++E33A 1C                                   DB Shuttle_Mk_2EdgesCnt
   7++E33B 00 00                                DB $00, $00
   8++E33D 34                                   DB Shuttle_Mk_2NormalsSize
   9++E33E 0A 20 09                             DB $0A, $20, $09
  10++E341 20 E4                                DW Shuttle_Mk_2Normals
  11++E343 02 00                                DB $02, $00
  12++E345 4A E3                                DW Shuttle_Mk_2Vertices
  13++E347 00 00                                DB 0,0                      ; Type and Tactics
  14++E349 00                                   DB 0
  15++E34A
  16++E34A
  17++E34A 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  17++E34E 23 01
  18++E350 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  18++E354 34 00
  19++E356 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  19++E35A 15 00
  20++E35C 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  20++E360 26 11
  21++E362 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  21++E366 37 22
  22++E368 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  22++E36C 58 04
  23++E36E 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  23++E372 69 15
  24++E374 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  24++E378 7A 26
  25++E37A 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  25++E37E 7B 34
  26++E380 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  26++E384 BC 48
  27++E386 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  27++E38A 9C 58
  28++E38C 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  28++E390 AC 69
  29++E392 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  29++E396 BC 7A
  30++E398 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  30++E39C CC CC
  31++E39E 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  31++E3A2 CC CC
  32++E3A4 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  32++E3A8 CC CC
  33++E3AA 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  33++E3AE CC CC
  34++E3B0
  35++E3B0              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  36++E3B0
  37++E3B0
  38++E3B0
  39++E3B0 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  40++E3B4 1F 12 00 0C  	DB $1F, $12, $00, $0C
  41++E3B8 1F 23 00 10  	DB $1F, $23, $00, $10
  42++E3BC 1F 30 00 04  	DB $1F, $30, $00, $04
  43++E3C0 1F 04 04 14  	DB $1F, $04, $04, $14
  44++E3C4 1F 05 08 14  	DB $1F, $05, $08, $14
  45++E3C8 1F 15 08 18  	DB $1F, $15, $08, $18
  46++E3CC 1F 16 0C 18  	DB $1F, $16, $0C, $18
  47++E3D0 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  48++E3D4 1F 27 10 1C  	DB $1F, $27, $10, $1C
  49++E3D8 1F 37 10 20  	DB $1F, $37, $10, $20
  50++E3DC 1F 34 04 20  	DB $1F, $34, $04, $20
  51++E3E0 1F 48 14 24  	DB $1F, $48, $14, $24
  52++E3E4 1F 58 14 28  	DB $1F, $58, $14, $28
  53++E3E8 1F 59 18 28  	DB $1F, $59, $18, $28
  54++E3EC 1F 69 18 2C  	DB $1F, $69, $18, $2C
  55++E3F0 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  56++E3F4 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  57++E3F8 1F 7B 20 30  	DB $1F, $7B, $20, $30
  58++E3FC 1F 4B 20 24  	DB $1F, $4B, $20, $24
  59++E400 1F 8C 24 28  	DB $1F, $8C, $24, $28
  60++E404 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  61++E408 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  62++E40C 1F BC 30 24  	DB $1F, $BC, $30, $24
  63++E410 0A CC 34 38  	DB $0A, $CC, $34, $38
  64++E414 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  65++E418 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  66++E41C 0A CC 40 34  	DB $0A, $CC, $40, $34
  67++E420
  68++E420              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  69++E420
  70++E420
  71++E420              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  72++E420
  73++E420
  74++E420 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  75++E424 DF 27 27 4E  	DB $DF, $27, $27, $4E
  76++E428 5F 27 27 4E  	DB $5F, $27, $27, $4E
  77++E42C 1F 27 27 4E  	DB $1F, $27, $27, $4E
  78++E430 1F 00 60 00  	DB $1F, $00, $60, $00
  79++E434 9F 60 00 00  	DB $9F, $60, $00, $00
  80++E438 5F 00 60 00  	DB $5F, $00, $60, $00
  81++E43C 1F 60 00 00  	DB $1F, $60, $00, $00
  82++E440 BF 42 42 16  	DB $BF, $42, $42, $16
  83++E444 FF 42 42 16  	DB $FF, $42, $42, $16
  84++E448 7F 42 42 16  	DB $7F, $42, $42, $16
  85++E44C 3F 42 42 16  	DB $3F, $42, $42, $16
  86++E450 3F 00 00 60  	DB $3F, $00, $00, $60
  87++E454
  88++E454
  89++E454              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  90++E454              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  91++E454
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  69+ E454                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E454 00 10 81     Sidewinder:	            DB $00, $10, $81
   2++E457 A9 E4                                DW SidewinderEdges
   3++E459 3C                                   DB SidewinderEdgesSize
   4++E45A 00 1E                                DB $00, $1E
   5++E45C 3C                                   DB SidewinderVertSize
   6++E45D 0F                                   DB SidewinderEdgesCnt
   7++E45E 00 32                                DB $00, $32
   8++E460 1C                                   DB SidewinderNormalsSize
   9++E461 14 46 25                             DB $14, $46, $25
  10++E464 E5 E4                                DW SidewinderNormals
  11++E466 02 10                                DB $02, $10
  12++E468 6D E4                                DW SidewinderVertices
  13++E46A 00 00                                DB 0,0                      ; Type and Tactics
  14++E46C 01                                   DB ShipCanAnger
  15++E46D
  16++E46D 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  16++E471 10 54
  17++E473 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  17++E477 20 65
  18++E479 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  18++E47D 32 66
  19++E47F 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  19++E483 31 44
  20++E485 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  20++E489 10 32
  21++E48B 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  21++E48F 43 65
  22++E491 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  22++E495 33 33
  23++E497 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  23++E49B 33 33
  24++E49D 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  24++E4A1 33 33
  25++E4A3 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  25++E4A7 33 33
  26++E4A9
  27++E4A9
  28++E4A9              SidewinderVertSize: equ $ - SidewinderVertices
  29++E4A9
  30++E4A9
  31++E4A9
  32++E4A9 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  33++E4AD 1F 62 04 08  	DB $1F, $62, $04, $08
  34++E4B1 1F 20 04 10  	DB $1F, $20, $04, $10
  35++E4B5 1F 10 00 10  	DB $1F, $10, $00, $10
  36++E4B9 1F 41 00 0C  	DB $1F, $41, $00, $0C
  37++E4BD 1F 31 0C 10  	DB $1F, $31, $0C, $10
  38++E4C1 1F 32 08 10  	DB $1F, $32, $08, $10
  39++E4C5 1F 43 0C 14  	DB $1F, $43, $0C, $14
  40++E4C9 1F 63 08 14  	DB $1F, $63, $08, $14
  41++E4CD 1F 65 04 14  	DB $1F, $65, $04, $14
  42++E4D1 1F 54 00 14  	DB $1F, $54, $00, $14
  43++E4D5 0F 33 18 1C  	DB $0F, $33, $18, $1C
  44++E4D9 0C 33 1C 20  	DB $0C, $33, $1C, $20
  45++E4DD 0C 33 18 24  	DB $0C, $33, $18, $24
  46++E4E1 0C 33 20 24  	DB $0C, $33, $20, $24
  47++E4E5
  48++E4E5              SidewinderEdgesSize: equ $ - SidewinderEdges
  49++E4E5
  50++E4E5
  51++E4E5              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  52++E4E5
  53++E4E5
  54++E4E5 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  55++E4E9 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  56++E4ED 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  57++E4F1 3F 00 00 70  	DB $3F, $00, $00, $70
  58++E4F5 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  59++E4F9 5F 00 20 08  	DB $5F, $00, $20, $08
  60++E4FD 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  61++E501
  62++E501
  63++E501              SidewinderNormalsSize: equ $ - SidewinderNormals
  64++E501              SidewinderLen: equ $ - Sidewinder
  65++E501
# file closed: ./Data/ships/Sidewinder.asm
  70+ E501                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E501 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E504 32 E5                                DW SplinterEdges
   3++E506 18                                   DB SplinterEdgesSize
   4++E507 00 16                                DB $00, $16
   5++E509 18                                   DB SplinterVertSize
   6++E50A 06                                   DB SplinterEdgesCnt
   7++E50B 00 00                                DB $00, $00
   8++E50D 10                                   DB SplinterNormalsSize
   9++E50E 08 14 0A                             DB $08, $14, $0A
  10++E511 4A E5                                DW SplinterNormals
  11++E513 05 00                                DB $05, $00
  12++E515 1A E5                                DW SplinterVertices
  13++E517 00 00                                DB 0,0                      ; Type and Tactics
  14++E519 00                                   DB 0
  15++E51A
  16++E51A 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  16++E51E 12 33
  17++E520 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  17++E524 02 33
  18++E526 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  18++E52A 01 33
  19++E52C 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  19++E530 01 22
  20++E532              SplinterVertSize:       equ $ - SplinterVertices
  21++E532 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  22++E536 1F 03 04 08                          DB $1F, $03, $04, $08
  23++E53A 1F 01 08 0C                          DB $1F, $01, $08, $0C
  24++E53E 1F 12 0C 00                          DB $1F, $12, $0C, $00
  25++E542 1F 13 00 08                          DB $1F, $13, $00, $08
  26++E546 1F 02 0C 04                          DB $1F, $02, $0C, $04
  27++E54A              SplinterEdgesSize:      equ $ - SplinterEdges
  28++E54A              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  29++E54A 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  30++E54E 1F 03 04 08                          DB $1F, $03, $04, $08
  31++E552 1F 01 08 0C                          DB $1F, $01, $08, $0C
  32++E556 1F 12 0C 00                          DB $1F, $12, $0C, $00
  33++E55A              SplinterNormalsSize:    equ $ - SplinterNormals
  34++E55A              SplinterLen:            equ $ - Splinter
  35++E55A
# file closed: ./Data/ships/Splinter.asm
  71+ E55A                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E55A 03 41 23     TestVector:             DB $03, $41, $23
   2++E55D 9D E5                                DW TestVectorEdges
   3++E55F 10                                   DB TestVectorEdgesSize
   4++E560 54 2A                                DB $54,$2A
   5++E562 2A                                   DB TestVectorVertSize
   6++E563 04                                   DB TestVectorEdgesCnt
   7++E564 00 00                                DB $00,$00
   8++E566 10                                   DB TestVectorNormalsSize
   9++E567 32 96 1C                             DB $32,$96,$1C
  10++E56A AD E5                                DW TestVectorNormals
  11++E56C 04 01                                DB $04,$01
  12++E56E 73 E5                                DW TestVectorVertices
  13++E570 00 00                                DB 0,0                      ; Type and Tactics
  14++E572 00                                   DB 0
  15++E573
  16++E573 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  16++E577 00 00
  17++E579 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  17++E57D 00 00
  18++E57F 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  18++E583 01 01
  19++E585 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  19++E589 01 01
  20++E58B 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  20++E58F 02 02
  21++E591 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  21++E595 02 02
  22++E597 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  22++E59B 03 03
  23++E59D              TestVectorVertSize      equ $  - TestVectorVertices
  24++E59D 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  25++E5A1 1F 00 08 0C                          DB $1F,$00,$08,$0C
  26++E5A5 1F 00 10 14                          DB $1F,$00,$10,$14
  27++E5A9 1F 00 18 18                          DB $1F,$00,$18,$18
  28++E5AD              TestVectorEdgesSize     equ $  - TestVectorEdges
  29++E5AD              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  30++E5AD              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  31++E5AD 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  32++E5B1 1F 10 00 00                          DB $1F,$10,$00,$00
  33++E5B5 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5B9 1F 00 00 10                          DB $1F,$00,$00,$10
  35++E5BD              TestVectorNormalsSize   equ $  - TestVectorNormals
  36++E5BD              TestVectorLen           equ $  - TestVector
  37++E5BD
# file closed: ./Data/ships/TestVector.asm
  72+ E5BD                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5BD 00 26 49     Thargoid:	            DB $00, $26, $49
   2++E5C0 4E E6                                DW ThargoidEdges
   3++E5C2 68                                   DB ThargoidEdgesSize
   4++E5C3 3C 26                                DB $3C, $26
   5++E5C5 78                                   DB ThargoidVertSize
   6++E5C6 1A                                   DB ThargoidEdgesCnt
   7++E5C7 01 F4                                DB $01, $F4
   8++E5C9 28                                   DB ThargoidNormalsSize
   9++E5CA 37 F0 27                             DB $37, $F0, $27
  10++E5CD B6 E6                                DW ThargoidNormals
  11++E5CF 02 16                                DB $02, $16
  12++E5D1 D6 E5                                DW ThargoidVertices
  13++E5D3 00 00                                DB 0,0                      ; Type and Tactics
  14++E5D5 01                                   DB ShipCanAnger
  15++E5D6
  16++E5D6 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88
  16++E5DA 40 88
  17++E5DC 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44
  17++E5E0 10 44
  18++E5E2 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44
  18++E5E6 21 44
  19++E5E8 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44
  19++E5EC 32 44
  20++E5EE 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55
  20++E5F2 43 55
  21++E5F4 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66
  21++E5F8 54 66
  22++E5FA 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77
  22++E5FE 64 77
  23++E600 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88
  23++E604 74 88
  24++E606 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99
  24++E60A 80 99
  25++E60C 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99
  25++E610 10 99
  26++E612 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99
  26++E616 21 99
  27++E618 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99
  27++E61C 32 99
  28++E61E 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99
  28++E622 53 99
  29++E624 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99
  29++E628 65 99
  30++E62A 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99
  30++E62E 76 99
  31++E630 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99
  31++E634 87 99
  32++E636 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99
  32++E63A 99 99
  33++E63C 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99
  33++E640 99 99
  34++E642 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99
  34++E646 99 99
  35++E648 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99
  35++E64C 99 99
  36++E64E
  37++E64E              ThargoidVertSize: equ $ - ThargoidVertices
  38++E64E
  39++E64E
  40++E64E
  41++E64E 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  42++E652 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  43++E656 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  44++E65A 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  45++E65E 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  46++E662 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  47++E666 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  48++E66A 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  49++E66E 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  50++E672 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  51++E676 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  52++E67A 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  53++E67E 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  54++E682 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  55++E686 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  56++E68A 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  57++E68E 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  58++E692 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  59++E696 1F 91 24 28                  DB $1F, $91, $24, $28
  60++E69A 1F 92 28 2C                  DB $1F, $92, $28, $2C
  61++E69E 1F 93 2C 30                  DB $1F, $93, $2C, $30
  62++E6A2 1F 95 30 34                  DB $1F, $95, $30, $34
  63++E6A6 1F 96 34 38                  DB $1F, $96, $34, $38
  64++E6AA 1F 97 38 3C                  DB $1F, $97, $38, $3C
  65++E6AE 1E 99 40 44                  DB $1E, $99, $40, $44
  66++E6B2 1E 99 48 4C                  DB $1E, $99, $48, $4C
  67++E6B6
  68++E6B6              ThargoidEdgesSize: equ $ - ThargoidEdges
  69++E6B6
  70++E6B6              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  71++E6B6
  72++E6B6 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  73++E6BA 7F 67 3C 19  	DB $7F, $67, $3C, $19
  74++E6BE 7F 67 19 3C  	DB $7F, $67, $19, $3C
  75++E6C2 3F 67 19 3C  	DB $3F, $67, $19, $3C
  76++E6C6 1F 40 00 00  	DB $1F, $40, $00, $00
  77++E6CA 3F 67 3C 19  	DB $3F, $67, $3C, $19
  78++E6CE 1F 67 3C 19  	DB $1F, $67, $3C, $19
  79++E6D2 1F 67 19 3C  	DB $1F, $67, $19, $3C
  80++E6D6 5F 67 19 3C  	DB $5F, $67, $19, $3C
  81++E6DA 9F 30 00 00  	DB $9F, $30, $00, $00
  82++E6DE
  83++E6DE
  84++E6DE              ThargoidNormalsSize: equ $ - ThargoidNormals
  85++E6DE              ThargoidLen: equ $ - Thargoid
  86++E6DE
# file closed: ./Data/ships/Thargoid.asm
  73+ E6DE                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E6DE F0 06 40     Thargon:	            DB $F0, $06, $40
   2++E6E1 33 E7                                DW ThargonEdges
   3++E6E3 3C                                   DB ThargonEdgesSize
   4++E6E4 00 12                                DB $00, $12
   5++E6E6 3C                                   DB ThargonVertSize
   6++E6E7 0F                                   DB ThargonEdgesCnt
   7++E6E8 00 32                                DB $00, $32
   8++E6EA 1C                                   DB ThargonNormalsSize
   9++E6EB 14 14 1E                             DB $14, $14, $1E
  10++E6EE 6F E7                                DW ThargonNormals
  11++E6F0 02 10                                DB $02, $10
  12++E6F2 F7 E6                                DW ThargonVertices
  13++E6F4 00 00                                DB 0,0                      ; Type and Tactics
  14++E6F6 01                                   DB ShipCanAnger
  15++E6F7
  16++E6F7
  17++E6F7 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  17++E6FB 01 55
  18++E6FD 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  18++E701 01 22
  19++E703 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  19++E707 02 33
  20++E709 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  20++E70D 03 44
  21++E70F 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  21++E713 04 55
  22++E715 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  22++E719 15 66
  23++E71B 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  23++E71F 12 66
  24++E721 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  24++E725 23 66
  25++E727 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  25++E72B 34 66
  26++E72D 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  26++E731 45 66
  27++E733
  28++E733              ThargonVertSize:        equ $ - ThargonVertices
  29++E733
  30++E733
  31++E733 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  32++E737 1F 20 04 08                          DB $1F, $20, $04, $08
  33++E73B 1F 30 08 0C                          DB $1F, $30, $08, $0C
  34++E73F 1F 40 0C 10                          DB $1F, $40, $0C, $10
  35++E743 1F 50 00 10                          DB $1F, $50, $00, $10
  36++E747 1F 51 00 14                          DB $1F, $51, $00, $14
  37++E74B 1F 21 04 18                          DB $1F, $21, $04, $18
  38++E74F 1F 32 08 1C                          DB $1F, $32, $08, $1C
  39++E753 1F 43 0C 20                          DB $1F, $43, $0C, $20
  40++E757 1F 54 10 24                          DB $1F, $54, $10, $24
  41++E75B 1F 61 14 18                          DB $1F, $61, $14, $18
  42++E75F 1F 62 18 1C                          DB $1F, $62, $18, $1C
  43++E763 1F 63 1C 20                          DB $1F, $63, $1C, $20
  44++E767 1F 64 20 24                          DB $1F, $64, $20, $24
  45++E76B 1F 65 24 14                          DB $1F, $65, $24, $14
  46++E76F
  47++E76F              ThargonEdgesSize:       equ $ - ThargonEdges
  48++E76F
  49++E76F
  50++E76F              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  51++E76F
  52++E76F
  53++E76F 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  54++E773 5F 14 05 07                          DB $5F, $14, $05, $07
  55++E777 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  56++E77B 3F 24 00 68                          DB $3F, $24, $00, $68
  57++E77F 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  58++E783 1F 14 05 07                          DB $1F, $14, $05, $07
  59++E787 1F 24 00 00                          DB $1F, $24, $00, $00
  60++E78B
  61++E78B
  62++E78B              ThargonNormalsSize:     equ $ - ThargonNormals
  63++E78B              ThargonLen:             equ $ - Thargon
  64++E78B
# file closed: ./Data/ships/Thargon.asm
  74+ E78B                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E78B 00 09 C4     TransportType10:	    DB $00, $09, $C4
   2++E78E 82 E8                                DW TransportType10Edges
   3++E790 B8                                   DB TransportType10EdgesSize
   4++E791 30 1A                                DB $30, $1A
   5++E793 DE                                   DB TransportType10VertSize
   6++E794 2E                                   DB TransportType10EdgesCnt
   7++E795 00 00                                DB $00, $00
   8++E797 38                                   DB TransportType10NormalsSize
   9++E798 10 20 0A                             DB $10, $20, $0A
  10++E79B 3A E9                                DW TransportType10Normals
  11++E79D 02 00                                DB $02, $00
  12++E79F A4 E7                                DW TransportType10Vertices
  13++E7A1 00 00                                DB 0,0                      ; Type and Tactics
  14++E7A3 00                                   DB 0
  15++E7A4
  16++E7A4 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  16++E7A8 06 77
  17++E7AA 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  17++E7AE 01 77
  18++E7B0 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  18++E7B4 01 22
  19++E7B6 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  19++E7BA 02 33
  20++E7BC 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  20++E7C0 03 44
  21++E7C2 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  21++E7C6 04 55
  22++E7C8 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  22++E7CC 05 66
  23++E7CE 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  23++E7D2 FF FF
  24++E7D4 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  24++E7D8 17 89
  25++E7DA 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  25++E7DE 12 39
  26++E7E0 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  26++E7E4 34 5A
  27++E7E6 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  27++E7EA 56 AB
  28++E7EC 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  28++E7F0 89 CD
  29++E7F2 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  29++E7F6 39 DD
  30++E7F8 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  30++E7FC 3A DD
  31++E7FE 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  31++E802 AB CD
  32++E804 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  32++E808 77 77
  33++E80A 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  33++E80E 77 77
  34++E810 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  34++E814 77 77
  35++E816 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  35++E81A 77 77
  36++E81C 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  36++E820 77 77
  37++E822 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  37++E826 77 77
  38++E828 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  38++E82C 66 66
  39++E82E 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  39++E832 66 66
  40++E834 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  40++E838 66 66
  41++E83A 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  41++E83E 66 66
  42++E840 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  42++E844 66 66
  43++E846 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  43++E84A 66 66
  44++E84C 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  44++E850 66 66
  45++E852 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  45++E856 33 33
  46++E858 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  46++E85C 33 33
  47++E85E 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  47++E862 33 33
  48++E864 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  48++E868 33 33
  49++E86A 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  49++E86E 00 00
  50++E870 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  50++E874 00 00
  51++E876 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  51++E87A 00 00
  52++E87C 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  52++E880 00 00
  53++E882
  54++E882              TransportType10VertSize: equ $ - TransportType10Vertices
  55++E882
  56++E882
  57++E882
  58++E882 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  59++E886 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  60++E88A 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  61++E88E 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  62++E892 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  63++E896 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  64++E89A 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  65++E89E 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  66++E8A2 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  67++E8A6 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  68++E8AA 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  69++E8AE 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  70++E8B2 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  71++E8B6 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  72++E8BA 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  73++E8BE 11 19 20 24                          DB $11, $19, $20, $24               ;16
  74++E8C2 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  75++E8C6 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  76++E8CA 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  77++E8CE 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  78++E8D2 10 89 20 30                          DB $10, $89, $20, $30               ;21
  79++E8D6 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  80++E8DA 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  81++E8DE 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  82++E8E2 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  83++E8E6 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  84++E8EA 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  85++E8EE 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  86++E8F2 07 77 40 44                          DB $07, $77, $40, $44               ;29
  87++E8F6 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  88++E8FA 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  89++E8FE 07 77 48 50                          DB $07, $77, $48, $50               ;32
  90++E902 07 77 50 54                          DB $07, $77, $50, $54               ;33
  91++E906 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
  92++E90A 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
  93++E90E 07 66 60 58                          DB $07, $66, $60, $58               ;36
  94++E912 07 66 64 68                          DB $07, $66, $64, $68               ;37
  95++E916 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
  96++E91A 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
  97++E91E 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
  98++E922 06 33 74 78                          DB $06, $33, $74, $78               ;41
  99++E926 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 100++E92A 08 00 84 88                          DB $08, $00, $84, $88               ;43
 101++E92E 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 102++E932 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 103++E936 05 00 90 84                          DB $05, $00, $90, $84               ;46
 104++E93A
 105++E93A              TransportType10EdgesSize: equ $ - TransportType10Edges
 106++E93A
 107++E93A
 108++E93A              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 109++E93A
 110++E93A
 111++E93A 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 112++E93E BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 113++E942 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 114++E946 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 115++E94A 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 116++E94E 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 117++E952 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 118++E956 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 119++E95A 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 120++E95E 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 121++E962 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 122++E966 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 123++E96A 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 124++E96E 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 125++E972
 126++E972
 127++E972              TransportType10NormalsSize: equ $ - TransportType10Normals
 128++E972              TransportType10Len: equ $ - TransportType10
 129++E972
# file closed: ./Data/ships/TransportType10.asm
  75+ E972                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E972              ; Mapping Orginal to new
   2++E972              ; 0    => 0
   3++E972              ; 1-2  => 1-2
   4++E972              ; 3    => EQU Edges
   5++E972              ; 4    => EQU Normals
   6++E972              ; 5    => EQU EdgesCnt
   7++E972              ; 6    => 6
   8++E972              ; 7    => 7
   9++E972              ; 8    => EQU VertSize
  10++E972              ; 9    => EQU EdgesCnt
  11++E972              ; 10-11=> 10-11
  12++E972              ; 12   => EQU  NormalsSize
  13++E972              ; 13   => 13
  14++E972              ; 14   => 14
  15++E972              ; 15   => 15
  16++E972              ; 16   => EQU Edges
  17++E972              ; 17   => EQU Normals
  18++E972              ; 18   => 18
  19++E972              ; 19   => 19
  20++E972              ;\ -> &5C93  \ Viper = Type 16
  21++E972 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E975 E5 E9                                DW ViperEdges
  23++E977 50                                   DB ViperEdgesSize
  24++E978 00 2A                                DB $00,$2A
  25++E97A 5A                                   DB ViperVertSize
  26++E97B 14                                   DB ViperEdgesCnt
  27++E97C 00 00                                DB $00,$00
  28++E97E 1C                                   DB ViperNormalsSize
  29++E97F 17 64 20                             DB $17, $64, $20
  30++E982 35 EA                                DW ViperNormals
  31++E984 01 11                                DB $01, $11
  32++E986 8B E9                                DW ViperVertices
  33++E988 00 00                                DB 0,0                      ; Type and Tactics
  34++E98A 01                                   DB ShipCanAnger
  35++E98B
  36++E98B 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  36++E98F 21 43
  37++E991 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  37++E995 10 22
  38++E997 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  38++E99B 43 55
  39++E99D 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  39++E9A1 42 66
  40++E9A3 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  40++E9A7 31 66
  41++E9A9 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  41++E9AD 54 66
  42++E9AF 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  42++E9B3 35 66
  43++E9B5 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  43++E9B9 20 66
  44++E9BB 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  44++E9BF 10 66
  45++E9C1 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  45++E9C5 66 66
  46++E9C7 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  46++E9CB 66 66
  47++E9CD 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  47++E9D1 66 66
  48++E9D3 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  48++E9D7 66 66
  49++E9D9 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  49++E9DD 66 66
  50++E9DF 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  50++E9E3 66 66
  51++E9E5              ViperVertSize           equ $  - ViperVertices
  52++E9E5 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  52++E9E9 1E 21 00 04
  53++E9ED 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  53++E9F1 1F 31 00 10
  54++E9F5 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  54++E9F9 1E 10 04 20
  55++E9FD 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  55++EA01 1E 53 08 18
  56++EA05 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  56++EA09 1E 65 14 18
  57++EA0D 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  57++EA11 1E 63 10 18
  58++EA15 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  58++EA19 1E 46 0C 14
  59++EA1D 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  59++EA21 12 66 24 34
  60++EA25 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  60++EA29 12 66 28 38
  61++EA2D 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  61++EA31 10 66 30 34
  62++EA35              ViperEdgesSize          equ $  - ViperEdges
  63++EA35              ViperEdgesCnt           equ ViperEdgesSize/4
  64++EA35 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  64++EA39 9F 16 21 0B
  65++EA3D 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  65++EA41 DF 16 21 0B
  66++EA45 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  66++EA49 5F 00 20 00
  67++EA4D 3F 00 00 30                          DB $3F, $00, $00, $30
  68++EA51              ViperNormalsSize        equ $  - ViperNormals
  69++EA51              ViperLen                equ $  - Viper
  70++EA51
# file closed: ./Data/ships/Viper.asm
  76+ EA51                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA51 00 26 49     Worm:	                DB $00, $26, $49
   2++EA54 A6 EA                                DW WormEdges
   3++EA56 40                                   DB WormEdgesSize
   4++EA57 00 12                                DB $00, $12
   5++EA59 3C                                   DB WormVertSize
   6++EA5A 10                                   DB WormEdgesCnt
   7++EA5B 00 00                                DB $00, $00
   8++EA5D 20                                   DB WormNormalsSize
   9++EA5E 13 1E 17                             DB $13, $1E, $17
  10++EA61 E6 EA                                DW WormNormals
  11++EA63 03 08                                DB $03, $08
  12++EA65 6A EA                                DW WormVertices
  13++EA67 00 00                                DB 0,0                      ; Type and Tactics
  14++EA69 01                                   DB ShipCanAnger
  15++EA6A 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  15++EA6E 02 77
  16++EA70 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  16++EA74 03 77
  17++EA76 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  17++EA7A 01 24
  18++EA7C 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  18++EA80 01 35
  19++EA82 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  19++EA86 24 77
  20++EA88 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  20++EA8C 35 77
  21++EA8E 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  21++EA92 46 77
  22++EA94 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  22++EA98 56 77
  23++EA9A 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  23++EA9E 14 66
  24++EAA0 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  24++EAA4 15 66
  25++EAA6
  26++EAA6              WormVertSize: equ $ - WormVertices
  27++EAA6
  28++EAA6
  29++EAA6 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  30++EAAA 1F 37 04 14                          DB $1F, $37, $04, $14
  31++EAAE 1F 57 14 1C                          DB $1F, $57, $14, $1C
  32++EAB2 1F 67 1C 18                          DB $1F, $67, $1C, $18
  33++EAB6 1F 47 18 10                          DB $1F, $47, $18, $10
  34++EABA 1F 27 10 00                          DB $1F, $27, $10, $00
  35++EABE 1F 02 00 08                          DB $1F, $02, $00, $08
  36++EAC2 1F 03 04 0C                          DB $1F, $03, $04, $0C
  37++EAC6 1F 24 10 08                          DB $1F, $24, $10, $08
  38++EACA 1F 35 14 0C                          DB $1F, $35, $14, $0C
  39++EACE 1F 14 08 20                          DB $1F, $14, $08, $20
  40++EAD2 1F 46 20 18                          DB $1F, $46, $20, $18
  41++EAD6 1F 15 0C 24                          DB $1F, $15, $0C, $24
  42++EADA 1F 56 24 1C                          DB $1F, $56, $24, $1C
  43++EADE 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++EAE2 1F 16 20 24                          DB $1F, $16, $20, $24
  45++EAE6
  46++EAE6              WormEdgesSize: equ $ - WormEdges
  47++EAE6
  48++EAE6
  49++EAE6              WormEdgesCnt: equ WormEdgesSize/4
  50++EAE6
  51++EAE6
  52++EAE6 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  53++EAEA 1F 00 45 0E                          DB $1F, $00, $45, $0E
  54++EAEE 1F 46 42 23                          DB $1F, $46, $42, $23
  55++EAF2 9F 46 42 23                          DB $9F, $46, $42, $23
  56++EAF6 1F 40 31 0E                          DB $1F, $40, $31, $0E
  57++EAFA 9F 40 31 0E                          DB $9F, $40, $31, $0E
  58++EAFE 3F 00 00 C8                          DB $3F, $00, $00, $C8
  59++EB02 5F 00 50 00                          DB $5F, $00, $50, $00
  60++EB06
  61++EB06
  62++EB06              WormNormalsSize: equ $ - WormNormals
  63++EB06              WormLen: equ $ - Worm
  64++EB06
# file closed: ./Data/ships/Worm.asm
  77+ EB06                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB06 02 17 70     Rattler:	            DB $02, $17, $70
   2++EB09 79 EB                                DW RattlerEdges
   3++EB0B 68                                   DB RattlerEdgesSize
   4++EB0C 00 2A                                DB $00, $2A
   5++EB0E 5A                                   DB RattlerVertSize
   6++EB0F 1A                                   DB RattlerEdgesCnt
   7++EB10 00 96                                DB $00, $96
   8++EB12 34                                   DB RattlerNormalsSize
   9++EB13 0A 71 1F                             DB $0A, $71, $1F
  10++EB16 E1 EB                                DW RattlerNormals
  11++EB18 01 22                                DB $01, $22
  12++EB1A 1F EB                                DW RattlerVertices
  13++EB1C 00 00                                DB 0,0                      ; Type and Tactics
  14++EB1E 01                                   DB ShipCanAnger
  15++EB1F
  16++EB1F
  17++EB1F 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  17++EB23 89 23
  18++EB25 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  18++EB29 9A 34
  19++EB2B 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  19++EB2F 78 12
  20++EB31 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  20++EB35 AB 45
  21++EB37 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  21++EB3B 67 01
  22++EB3D 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  22++EB41 CC 5B
  23++EB43 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  23++EB47 CC 06
  24++EB49 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  24++EB4D FF FF
  25++EB4F 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  25++EB53 FF FF
  26++EB55 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  26++EB59 CC CC
  27++EB5B 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  27++EB5F CC CC
  28++EB61 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  28++EB65 CC CC
  29++EB67 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  29++EB6B CC CC
  30++EB6D 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  30++EB71 CC CC
  31++EB73 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  31++EB77 CC CC
  32++EB79
  33++EB79              RattlerVertSize: equ $ - RattlerVertices
  34++EB79
  35++EB79
  36++EB79 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  37++EB7D 1F 17 08 10  	DB $1F, $17, $08, $10
  38++EB81 1F 28 00 08  	DB $1F, $28, $00, $08
  39++EB85 1F 39 00 04  	DB $1F, $39, $00, $04
  40++EB89 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  41++EB8D 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  42++EB91 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  43++EB95 1F 6C 18 20  	DB $1F, $6C, $18, $20
  44++EB99 1F 01 10 1C  	DB $1F, $01, $10, $1C
  45++EB9D 1F 67 10 20  	DB $1F, $67, $10, $20
  46++EBA1 1F 12 08 1C  	DB $1F, $12, $08, $1C
  47++EBA5 1F 78 08 20  	DB $1F, $78, $08, $20
  48++EBA9 1F 23 00 1C  	DB $1F, $23, $00, $1C
  49++EBAD 1F 89 00 20  	DB $1F, $89, $00, $20
  50++EBB1 1F 34 04 1C  	DB $1F, $34, $04, $1C
  51++EBB5 1F 9A 04 20  	DB $1F, $9A, $04, $20
  52++EBB9 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  53++EBBD 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  54++EBC1 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  55++EBC5 1F BC 14 20  	DB $1F, $BC, $14, $20
  56++EBC9 0A CC 24 28  	DB $0A, $CC, $24, $28
  57++EBCD 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  58++EBD1 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  59++EBD5 0A CC 30 34  	DB $0A, $CC, $30, $34
  60++EBD9 0A CC 34 38  	DB $0A, $CC, $34, $38
  61++EBDD 0A CC 38 30  	DB $0A, $CC, $38, $30
  62++EBE1
  63++EBE1              RattlerEdgesSize: equ $ - RattlerEdges
  64++EBE1
  65++EBE1
  66++EBE1              RattlerEdgesCnt: equ RattlerEdgesSize/4
  67++EBE1
  68++EBE1
  69++EBE1 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  70++EBE5 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  71++EBE9 9F 09 5D 12  	DB $9F, $09, $5D, $12
  72++EBED 1F 09 5D 12  	DB $1F, $09, $5D, $12
  73++EBF1 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  74++EBF5 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  75++EBF9 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  76++EBFD DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  77++EC01 DF 09 5D 12  	DB $DF, $09, $5D, $12
  78++EC05 5F 09 5D 12  	DB $5F, $09, $5D, $12
  79++EC09 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  80++EC0D 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  81++EC11 3F 00 00 60  	DB $3F, $00, $00, $60
  82++EC15
  83++EC15              RattlerNormalsSize: equ $ - RattlerNormals
  84++EC15              RattlerLen: equ $ - Rattler
  85++EC15
# file closed: ./Data/ships/Rattler.asm
  78+ EC15
# file closed: ./Data/ShipModelMetaData3.asm
1249  EC15              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1250  EC15              ;;Privisioned for more models     SLOT    ShipModelsAddr
1251  EC15              ;;Privisioned for more models     PAGE    BankShipModels4
1252  EC15              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1253  EC15
1254  EC15              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1255  EC15                  SLOT    SpritemembankAddr
1256  EC15                  PAGE    BankSPRITE
1257  EC15              	ORG     SpritemembankAddr, BankSPRITE
1258  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000
  40+ E000              compass_sun                         equ laser_sprite16   +1
  41+ E000              compass_station                     equ compass_sun      +1
  42+ E000
  43+ E000              glactic_pattern_1					equ 0
  44+ E000              glactic_hyper_pattern_1             equ 2
  45+ E000              local_pattern_1                     equ 4
  46+ E000              local_hyper_pattern_1               equ 6
  47+ E000              reticule_pattern_1                  equ 12
  48+ E000              reticule_pattern_2                  equ 13
  49+ E000              laser_pattern_1                     equ 14
  50+ E000              laser_pattern_2                     equ 15
  51+ E000              laser_pattern_3                     equ 16
  52+ E000              laser_pattern_4                     equ 17
  53+ E000              laser_pattern_5                     equ 18
  54+ E000
  55+ E000              compass_sun_infront                 equ 22
  56+ E000              compass_sun_behind                  equ 23
  57+ E000              compass_station_infront             equ 24
  58+ E000              compass_station_behind              equ 25
  59+ E000              spritecursoroffset					equ 17
  60+ E000
  61+ E000
  62+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  63+ E000              sprite_big:
  64+ E000              .SetAnchor:
  65+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  66+ E001 F5           	push	af									; save id for next few
  67+ E002 D5           	push	de
  68+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  69+ E006              ; write out X position bits 1 to 8
  70+ E006 79           	ld		a,c
  71+ E007 21 11 00         ld      hl,spritecursoroffset
  72+ E00A ED 31        	add		hl,a                                ; hl = full x position
  73+ E00C 7D           	ld		a,l
  74+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  75+ E010              ; write out Y position bits 1 to 8
  76+ E010 EB           	ex		de,hl								; de = full x position
  77+ E011 78           	ld		a,b
  78+ E012 21 11 00         ld      hl,spritecursoroffset
  79+ E015 ED 31        	add		hl,a
  80+ E017 7D           	ld		a,l                                 ; hl = full y position
  81+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  82+ E01B              ; write out MSB of X as its an anchor
  83+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  84+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  85+ E01F              ; write out sprite pattern
  86+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  87+ E020 7B           	ld		a,e
  88+ E021 F6 C0        	or		%11000000							;
  89+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  90+ E026              ; write out msb of y in h must be bit 0 only
  91+ E026 3E 00        	ld		a,%00000000							; big unified composite
  92+ E028 B4           	or		h									; MSB Y
  93+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  94+ E02C              .BigSprite1:
  95+ E02C F1           	pop		af
  96+ E02D 3C           	inc		a
  97+ E02E F5           	push	af
  98+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  99+ E032 3E 10        	ld		a,16
 100+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 101+ E037 AF           	xor 	a
 102+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 103+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 104+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 105+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 106+ E043 3E 41        	ld		a,%01000001							; big unified composite
 107+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 108+ E048              .BigSprite2:
 109+ E048 F1           	pop		af
 110+ E049 3C           	inc		a
 111+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
 112+ E04D AF           	xor		a
 113+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 114+ E051 3E 10        	ld		a,16
 115+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 116+ E056 AF           	xor		a
 117+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 118+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 119+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 120+ E05F 3E 41        	ld		a,%01000001							; big unified composite
 121+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 122+ E064 C9           	ret
 123+ E065
 124+ E065
 125+ E065 7A           single_sprite:          ld		a,d                                 ; a = sprite nbr, bug fix?
 126+ E066 F5                                   push	af									; save id for next few
 127+ E067 D5                                   push	de
 128+ E068 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 129+ E06B              ; write out X position bits 1 to 8
 130+ E06B 79                                   ld		a,c
 131+ E06C 21 11 00                             ld      hl,spritecursoroffset
 132+ E06F ED 31                                add		hl,a                                ; hl = full x position
 133+ E071 7D                                   ld		a,l
 134+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 135+ E075              ; write out Y position bits 1 to 8
 136+ E075 EB                                   ex		de,hl								; de = full x position
 137+ E076 78                                   ld		a,b
 138+ E077 21 11 00                             ld      hl,spritecursoroffset
 139+ E07A ED 31                                add		hl,a
 140+ E07C 7D                                   ld		a,l                                 ; hl = full y position
 141+ E07D ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 142+ E080              ; write out MSB of X as its an anchor
 143+ E080 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 144+ E081 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 145+ E084              ; write out sprite pattern
 146+ E084 D1                                   pop		de                                  ; de = pattern and sprite nbr
 147+ E085 7B                                   ld		a,e
 148+ E086 F6 80                                or		%10000000							;
 149+ E088 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 150+ E08B C9                                   ret
 151+ E08C
 152+ E08C              sprite_galactic_cursor:
 153+ E08C              ; ">sprite_galactic_cursor BC = rowcol"
 154+ E08C 16 00        	ld		d,galactic_cursor_sprite
 155+ E08E 1E 00        	ld		e,0
 156+ E090 78           	ld		a,b
 157+ E091 C6 18        	add		a,galactic_chart_y_offset
 158+ E093 47           	ld		b,a
 159+ E094 CD 00 E0     	call	sprite_big
 159+ E097
 160+ E097 C9           	ret
 161+ E098
 162+ E098              sprite_galactic_hyper_cursor:
 163+ E098              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 164+ E098 78           	ld		a,b
 165+ E099 C6 18        	add		a,galactic_chart_y_offset
 166+ E09B 47           	ld		b,a
 167+ E09C 16 04        	ld		d,galactic_hyper_sprite
 168+ E09E 1E 03        	ld		e,3
 169+ E0A0 CD 00 E0     	call	sprite_big
 169+ E0A3
 170+ E0A3 C9           	ret
 171+ E0A4
 172+ E0A4              sprite_ghc_move:
 173+ E0A4 3E 04        	ld		a,galactic_hyper_sprite
 174+ E0A6 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 175+ E0A9              ; write out X position bits 1 to 8
 176+ E0A9 79           	ld		a,c
 177+ E0AA 21 11 00         ld      hl,spritecursoroffset
 178+ E0AD ED 31        	add		hl,a                                ; hl = full x position
 179+ E0AF 7D           	ld		a,l
 180+ E0B0 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 181+ E0B3              ; write out Y position bits 1 to 8
 182+ E0B3 EB           	ex		de,hl								; de = full x position
 183+ E0B4 78               ld      a,b
 184+ E0B5 C6 18        	add		a,galactic_chart_y_offset
 185+ E0B7 47           	ld		b,a
 186+ E0B8 78           	ld		a,b
 187+ E0B9 21 11 00         ld      hl,spritecursoroffset
 188+ E0BC ED 31        	add		hl,a
 189+ E0BE 7D           	ld		a,l                                 ; hl = full y position
 190+ E0BF ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 191+ E0C2              ; write out MSB of X as its an anchor
 192+ E0C2 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 193+ E0C3 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 194+ E0C6              ; write out msb of y in h must be bit 0 only
 195+ E0C6 3E 00        	ld		a,%00000000							; big unified composite
 196+ E0C8 B2           	or		d									; MSB Y
 197+ E0C9 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 198+ E0CC C9               ret
 199+ E0CD
 200+ E0CD
 201+ E0CD              sprite_lhc_move:
 202+ E0CD 3E 0A        	ld		a,local_hyper_sprite
 203+ E0CF ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 204+ E0D2              ; write out X position bits 1 to 8
 205+ E0D2 79           	ld		a,c
 206+ E0D3 21 11 00         ld      hl,spritecursoroffset
 207+ E0D6 ED 31        	add		hl,a                                ; hl = full x position
 208+ E0D8 7D           	ld		a,l
 209+ E0D9 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 210+ E0DC              ; write out Y position bits 1 to 8
 211+ E0DC EB           	ex		de,hl								; de = full x position
 212+ E0DD 78           	ld		a,b
 213+ E0DE 21 11 00         ld      hl,spritecursoroffset
 214+ E0E1 ED 31        	add		hl,a
 215+ E0E3 7D           	ld		a,l                                 ; hl = full y position
 216+ E0E4 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 217+ E0E7              ; write out MSB of X as its an anchor
 218+ E0E7 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 219+ E0E8 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 220+ E0EB              ; write out msb of y in h must be bit 0 only
 221+ E0EB 3E 00        	ld		a,%00000000							; big unified composite
 222+ E0ED B2           	or		d									; MSB Y
 223+ E0EE ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 224+ E0F1 C9               ret
 225+ E0F2
 226+ E0F2              ; "sprite_local_cursor BC = rowcol"
 227+ E0F2 16 07        sprite_local_cursor:        ld		d,local_cursor_sprite
 228+ E0F4 1E 06                                    ld		e,6
 229+ E0F6 CD 00 E0                                 call	sprite_big
 230+ E0F9 C9                                       ret
 231+ E0FA
 232+ E0FA              ; "sprite_local_hyper_cursor BC = rowcol"
 233+ E0FA 16 0A        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 234+ E0FC 1E 09                                    ld		e,9
 235+ E0FE CD 00 E0                                 call	sprite_big
 236+ E101 C9                                       ret
 237+ E102
 238+ E102              compass_offset          equ 2
 239+ E102              ScannerX                equ 128
 240+ E102              ScannerY                equ 171
 241+ E102              SunScanCenterX          equ 92
 242+ E102              SunScanCenterY          equ 171
 243+ E102
 244+ E102 3E 22        compass_sun_move:       ld		a,compass_sun
 245+ E104 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 246+ E107              ; write out X position bits 1 to 8
 247+ E107 3E 5A                                ld      a, SunScanCenterX-compass_offset
 248+ E109 81                                   add     a,c
 249+ E10A ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 250+ E10D              ; write out Y position bits 1 to 8
 251+ E10D 3E A9                                ld      a, SunScanCenterY-compass_offset
 252+ E10F 80                                   add     a,b
 253+ E110 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 254+ E113 C9                                   ret
 255+ E114
 256+ E114 3E 23        compass_station_move:   ld		a,compass_station
 257+ E116 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 258+ E119              ; write out X position bits 1 to 8
 259+ E119 79                                   ld		a,c
 260+ E11A 21 02 00                             ld      hl,compass_offset
 261+ E11D ED 31                                add		hl,a                                ; hl = full x position
 262+ E11F 7D                                   ld		a,l
 263+ E120 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 264+ E123              ; write out Y position bits 1 to 8
 265+ E123 EB                                   ex		de,hl								; de = full x position
 266+ E124 78                                   ld		a,b
 267+ E125 21 02 00                             ld      hl,compass_offset
 268+ E128 ED 31                                add		hl,a
 269+ E12A 7D                                   ld		a,l                                 ; hl = full y position
 270+ E12B ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 271+ E12E              ; write out MSB of X as its an anchor
 272+ E12E 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 273+ E12F ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 274+ E132 C9                                   ret
 275+ E133
 276+ E133              ReticuleCentreX      EQU (256/2)+32 -1
 277+ E133              ReticuleCentreY      EQU (192/2)+32 -1
 278+ E133              ReticuleOffset       EQU 8
 279+ E133
 280+ E133 3E 0E        sprite_reticule:    ld      a,reticlule_sprite1                 ; LEFT ARM
 281+ E135 ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 282+ E138 3E 87                            ld      a,ReticuleCentreX -16 - ReticuleOffset
 283+ E13A ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 284+ E13D 3E 7F                            ld		a,ReticuleCentreY
 285+ E13F ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 286+ E142 AF                               xor     a
 287+ E143 ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 288+ E146 3E 8D                            ld      a,reticule_pattern_2 | %10000000
 289+ E148 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 290+ E14B 3E 0F        .rightReticule      ld      a,reticlule_sprite2                 ; RIGHT ARM
 291+ E14D ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 292+ E150 3E A7                            ld      a,ReticuleCentreX + ReticuleOffset
 293+ E152 ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 294+ E155 3E 7F                            ld		a,ReticuleCentreY
 295+ E157 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 296+ E15A 3E 08                            ld      a,%00001000
 297+ E15C ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 298+ E15F 3E 8D                            ld      a,reticule_pattern_2 | %10000000
 299+ E161 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 300+ E164 3E 10        .topReticule        ld      a,reticlule_sprite3
 301+ E166 ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 302+ E169 3E 9F                            ld      a,ReticuleCentreX
 303+ E16B ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 304+ E16E 3E 67                            ld		a,ReticuleCentreY-16 - ReticuleOffset
 305+ E170 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 306+ E173 AF                               xor     a
 307+ E174 ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 308+ E177 3E 8C                            ld      a,reticule_pattern_1 | %10000000
 309+ E179 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 310+ E17C 3E 11        .bottomReticule     ld      a,reticlule_sprite4
 311+ E17E ED 92 34                         nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 312+ E181 3E 9F                            ld      a,ReticuleCentreX
 313+ E183 ED 92 35                         nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 314+ E186 3E 87                            ld		a,ReticuleCentreY + ReticuleOffset
 315+ E188 ED 92 36                         nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 316+ E18B 3E 04                            ld      a,%00000100
 317+ E18D ED 92 37                         nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 318+ E190 3E 8C                            ld      a,reticule_pattern_1 | %10000000
 319+ E192 ED 92 38                         nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 320+ E195 C9                               ret
 321+ E196
 322+ E196              laserbasex          equ 6
 323+ E196              laserbasey          equ 14
 324+ E196
 325+ E196              ShowSprite          MACRO   spritenbr, patternnbr
 326+ E196 ~                                ld      a, spritenbr
 327+ E196 ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a
 328+ E196 ~                                ld      a,patternnbr | %10000000
 329+ E196 ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 330+ E196                                  ENDM
 331+ E196
 332+ E196              LeftLaser:          MACRO   xoffset, yoffset, spriteL, patternL
 333+ E196 ~                                ld      a, spriteL
 334+ E196 ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 335+ E196 ~                                ld      a,((laserbasex + xoffset) *8) + 32
 336+ E196 ~                                nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 337+ E196 ~                                ld		a,((laserbasey -yoffset) * 8) + 32 -1
 338+ E196 ~                                nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 339+ E196 ~                                xor     a
 340+ E196 ~                                nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 341+ E196 ~                                ld      a, patternL | %00000000             ; hidden by default
 342+ E196 ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 343+ E196                                  ENDM
 344+ E196
 345+ E196              RightLaser:         MACRO   xoffset, yoffset, spriteL, patternL
 346+ E196 ~                                ld      a, spriteL
 347+ E196 ~                                nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E196 ~                                ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 349+ E196 ~                                nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E196 ~                                ld		a,((laserbasey -yoffset) * 8) + 32 -1
 351+ E196 ~                                nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E196 ~                                ld      a,%00001000
 353+ E196 ~                                nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 354+ E196 ~                                ld      a, patternL | %00000000             ; hidden by default
 355+ E196 ~                                nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 356+ E196                                  ENDM
 357+ E196
 358+ E196
 359+ E196              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 359+ E196 3E 22       >                    ld      a, compass_sun
 359+ E198 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 359+ E19B 3E 96       >                    ld      a,compass_sun_infront | %10000000
 359+ E19D ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 360+ E1A0 C9                                    ret
 361+ E1A1
 362+ E1A1              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 362+ E1A1 3E 22       >                    ld      a, compass_sun
 362+ E1A3 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 362+ E1A6 3E 97       >                    ld      a,compass_sun_behind | %10000000
 362+ E1A8 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 363+ E1AB C9                                    ret
 364+ E1AC
 365+ E1AC              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 365+ E1AC 3E 23       >                    ld      a, compass_station
 365+ E1AE ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 365+ E1B1 3E 98       >                    ld      a,compass_station_infront | %10000000
 365+ E1B3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 366+ E1B6 C9                                    ret
 367+ E1B7
 368+ E1B7              show_compass_statin_behind:   ShowSprite  compass_station, compass_station_behind
 368+ E1B7 3E 23       >                    ld      a, compass_station
 368+ E1B9 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 368+ E1BC 3E 99       >                    ld      a,compass_station_behind | %10000000
 368+ E1BE ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 369+ E1C1 C9                                    ret
 370+ E1C2
 371+ E1C2
 372+ E1C2              sprite_laser:       LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 372+ E1C2 3E 12       >                    ld      a, laser_sprite1
 372+ E1C4 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 372+ E1C7 3E 50       >                    ld      a,((laserbasex + 0) *8) + 32
 372+ E1C9 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 372+ E1CC 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 372+ E1CE ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1D1 AF          >                    xor     a
 372+ E1D2 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 372+ E1D5 3E 0E       >                    ld      a, laser_pattern_1 | %00000000             ; hidden by default
 372+ E1D7 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 373+ E1DA                                  LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 373+ E1DA 3E 13       >                    ld      a, laser_sprite2
 373+ E1DC ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 373+ E1DF 3E 60       >                    ld      a,((laserbasex + 2) *8) + 32
 373+ E1E1 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 373+ E1E4 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 373+ E1E6 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 373+ E1E9 AF          >                    xor     a
 373+ E1EA ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 373+ E1ED 3E 0F       >                    ld      a, laser_pattern_2 | %00000000             ; hidden by default
 373+ E1EF ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 374+ E1F2                                  LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 374+ E1F2 3E 14       >                    ld      a, laser_sprite3
 374+ E1F4 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 374+ E1F7 3E 70       >                    ld      a,((laserbasex + 4) *8) + 32
 374+ E1F9 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 374+ E1FC 3E 87       >                    ld		a,((laserbasey -1) * 8) + 32 -1
 374+ E1FE ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 374+ E201 AF          >                    xor     a
 374+ E202 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 374+ E205 3E 10       >                    ld      a, laser_pattern_3 | %00000000             ; hidden by default
 374+ E207 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 375+ E20A                                  LeftLaser  6,2,laser_sprite4 ,laser_pattern_4
 375+ E20A 3E 15       >                    ld      a, laser_sprite4
 375+ E20C ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 375+ E20F 3E 80       >                    ld      a,((laserbasex + 6) *8) + 32
 375+ E211 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 375+ E214 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 375+ E216 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 375+ E219 AF          >                    xor     a
 375+ E21A ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 375+ E21D 3E 11       >                    ld      a, laser_pattern_4 | %00000000             ; hidden by default
 375+ E21F ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 376+ E222                                  LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 376+ E222 3E 16       >                    ld      a, laser_sprite5
 376+ E224 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 376+ E227 3E 90       >                    ld      a,((laserbasex + 8) *8) + 32
 376+ E229 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 376+ E22C 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 376+ E22E ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 376+ E231 AF          >                    xor     a
 376+ E232 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 376+ E235 3E 12       >                    ld      a, laser_pattern_5 | %00000000             ; hidden by default
 376+ E237 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 377+ E23A                                  RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 377+ E23A 3E 1A       >                    ld      a, laser_sprite9
 377+ E23C ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 377+ E23F 3E DE       >                    ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 377+ E241 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 377+ E244 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 377+ E246 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 377+ E249 3E 08       >                    ld      a,%00001000
 377+ E24B ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 377+ E24E 3E 0E       >                    ld      a, laser_pattern_1 | %00000000             ; hidden by default
 377+ E250 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 378+ E253                                  RightLaser 2,0,laser_sprite10,laser_pattern_2
 378+ E253 3E 1B       >                    ld      a, laser_sprite10
 378+ E255 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 378+ E258 3E CE       >                    ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 378+ E25A ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 378+ E25D 3E 8F       >                    ld		a,((laserbasey -0) * 8) + 32 -1
 378+ E25F ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 378+ E262 3E 08       >                    ld      a,%00001000
 378+ E264 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 378+ E267 3E 0F       >                    ld      a, laser_pattern_2 | %00000000             ; hidden by default
 378+ E269 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 379+ E26C                                  RightLaser 4,1,laser_sprite11,laser_pattern_3
 379+ E26C 3E 1C       >                    ld      a, laser_sprite11
 379+ E26E ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 379+ E271 3E BE       >                    ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 379+ E273 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 379+ E276 3E 87       >                    ld		a,((laserbasey -1) * 8) + 32 -1
 379+ E278 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 379+ E27B 3E 08       >                    ld      a,%00001000
 379+ E27D ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 379+ E280 3E 10       >                    ld      a, laser_pattern_3 | %00000000             ; hidden by default
 379+ E282 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 380+ E285                                  RightLaser 6,2,laser_sprite12,laser_pattern_4
 380+ E285 3E 1D       >                    ld      a, laser_sprite12
 380+ E287 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 380+ E28A 3E AE       >                    ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 380+ E28C ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 380+ E28F 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 380+ E291 ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 380+ E294 3E 08       >                    ld      a,%00001000
 380+ E296 ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 380+ E299 3E 11       >                    ld      a, laser_pattern_4 | %00000000             ; hidden by default
 380+ E29B ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 381+ E29E                                  RightLaser 8,2,laser_sprite13,laser_pattern_5
 381+ E29E 3E 1E       >                    ld      a, laser_sprite13
 381+ E2A0 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 381+ E2A3 3E 9E       >                    ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 381+ E2A5 ED 92 35    >                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 381+ E2A8 3E 7F       >                    ld		a,((laserbasey -2) * 8) + 32 -1
 381+ E2AA ED 92 36    >                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 381+ E2AD 3E 08       >                    ld      a,%00001000
 381+ E2AF ED 92 37    >                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 381+ E2B2 3E 12       >                    ld      a, laser_pattern_5 | %00000000             ; hidden by default
 381+ E2B4 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 382+ E2B7
 383+ E2B7
 384+ E2B7 C9                               ret
 385+ E2B8                                  ; Need simple show updates just to update the show attribute
 386+ E2B8
 387+ E2B8              sprite_laser_show: ShowSprite laser_sprite1 ,laser_pattern_1
 387+ E2B8 3E 12       >                    ld      a, laser_sprite1
 387+ E2BA ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 387+ E2BD 3E 8E       >                    ld      a,laser_pattern_1 | %10000000
 387+ E2BF ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 388+ E2C2                                 ShowSprite laser_sprite2 ,laser_pattern_2
 388+ E2C2 3E 13       >                    ld      a, laser_sprite2
 388+ E2C4 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 388+ E2C7 3E 8F       >                    ld      a,laser_pattern_2 | %10000000
 388+ E2C9 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 389+ E2CC                                 ShowSprite laser_sprite3 ,laser_pattern_3
 389+ E2CC 3E 14       >                    ld      a, laser_sprite3
 389+ E2CE ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 389+ E2D1 3E 90       >                    ld      a,laser_pattern_3 | %10000000
 389+ E2D3 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 390+ E2D6                                 ShowSprite laser_sprite4 ,laser_pattern_4
 390+ E2D6 3E 15       >                    ld      a, laser_sprite4
 390+ E2D8 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 390+ E2DB 3E 91       >                    ld      a,laser_pattern_4 | %10000000
 390+ E2DD ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 391+ E2E0                                 ShowSprite laser_sprite5 ,laser_pattern_5
 391+ E2E0 3E 16       >                    ld      a, laser_sprite5
 391+ E2E2 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 391+ E2E5 3E 92       >                    ld      a,laser_pattern_5 | %10000000
 391+ E2E7 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 392+ E2EA
 393+ E2EA
 394+ E2EA                                 ShowSprite laser_sprite9 ,laser_pattern_1
 394+ E2EA 3E 1A       >                    ld      a, laser_sprite9
 394+ E2EC ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 394+ E2EF 3E 8E       >                    ld      a,laser_pattern_1 | %10000000
 394+ E2F1 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 395+ E2F4                                 ShowSprite laser_sprite10,laser_pattern_2
 395+ E2F4 3E 1B       >                    ld      a, laser_sprite10
 395+ E2F6 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 395+ E2F9 3E 8F       >                    ld      a,laser_pattern_2 | %10000000
 395+ E2FB ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 396+ E2FE                                 ShowSprite laser_sprite11,laser_pattern_3
 396+ E2FE 3E 1C       >                    ld      a, laser_sprite11
 396+ E300 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 396+ E303 3E 90       >                    ld      a,laser_pattern_3 | %10000000
 396+ E305 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 397+ E308                                 ShowSprite laser_sprite12,laser_pattern_4
 397+ E308 3E 1D       >                    ld      a, laser_sprite12
 397+ E30A ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 397+ E30D 3E 91       >                    ld      a,laser_pattern_4 | %10000000
 397+ E30F ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 398+ E312                                 ShowSprite laser_sprite13,laser_pattern_5
 398+ E312 3E 1E       >                    ld      a, laser_sprite13
 398+ E314 ED 92 34    >                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 398+ E317 3E 92       >                    ld      a,laser_pattern_5 | %10000000
 398+ E319 ED 92 38    >                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 399+ E31C
 400+ E31C
 401+ E31C C9                              ret
 402+ E31D
 403+ E31D              sprite_galactic_hide:
 404+ E31D ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 405+ E321 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 406+ E325 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 407+ E329 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 408+ E32D ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 409+ E331 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 410+ E335 C9           	ret
 411+ E336
 412+ E336              sprite_galactic_hyper_hide:
 413+ E336 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 414+ E33A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 415+ E33E ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 416+ E342 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 417+ E346 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 418+ E34A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 419+ E34E C9           	ret
 420+ E34F
 421+ E34F              sprite_local_hide:
 422+ E34F ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 423+ E353 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 424+ E357 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 425+ E35B ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 426+ E35F ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 427+ E363 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 428+ E367 C9           	ret
 429+ E368
 430+ E368              sprite_local_hyper_hide:
 431+ E368 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 432+ E36C ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 433+ E370 ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 434+ E374 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 435+ E378 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 436+ E37C ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 437+ E380 C9           	ret
 438+ E381
 439+ E381
 440+ E381              sprite_reticule_hide:
 441+ E381 ED 91 34 0E  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 442+ E385 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 443+ E389 ED 91 34 0F  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 444+ E38D ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 445+ E391 ED 91 34 10  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 446+ E395 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 447+ E399 ED 91 34 11  	nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 448+ E39D ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 449+ E3A1 C9           	ret
 450+ E3A2
 451+ E3A2              sprite_laser_hide:
 452+ E3A2 ED 91 34 12  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 453+ E3A6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 454+ E3AA ED 91 34 13  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 455+ E3AE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 456+ E3B2 ED 91 34 14  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 457+ E3B6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 458+ E3BA ED 91 34 15  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 459+ E3BE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 460+ E3C2 ED 91 34 16  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 461+ E3C6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$0
 462+ E3CA ED 91 34 17  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 463+ E3CE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 464+ E3D2 ED 91 34 18  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 465+ E3D6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 466+ E3DA ED 91 34 19  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 467+ E3DE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 468+ E3E2 ED 91 34 1A      nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 469+ E3E6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 470+ E3EA ED 91 34 1B  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 471+ E3EE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3F2 ED 91 34 1C  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 473+ E3F6 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 474+ E3FA ED 91 34 1D  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 475+ E3FE ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 476+ E402 ED 91 34 1E      nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 477+ E406 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 478+ E40A ED 91 34 1F  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 479+ E40E ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E412 ED 91 34 20  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 481+ E416 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E41A ED 91 34 21  	nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 483+ E41E ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E422 C9               ret
 485+ E423
 486+ E423              sprite_compass_hide:
 487+ E423 ED 91 34 22  	nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 488+ E427 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E42B ED 91 34 23  	nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 490+ E42F ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E433 C9               ret
 492+ E434
 493+ E434              sprite_cls_cursors:
 494+ E434 CD 1D E3     	call	sprite_galactic_hide
 495+ E437 CD 36 E3     	call	sprite_galactic_hyper_hide
 496+ E43A CD 4F E3     	call	sprite_local_hide
 497+ E43D CD 68 E3     	call	sprite_local_hyper_hide
 498+ E440 CD 81 E3         call    sprite_reticule_hide
 499+ E443                  ;call    sprite_laser_hide
 500+ E443                  ;call    sprite_compass_hide
 501+ E443 C9           	ret
 502+ E444
 503+ E444              init_sprites:
 504+ E444 CD 34 E4     	call		sprite_cls_cursors
 505+ E447 ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 506+ E44B C9           	ret
 507+ E44C
# file closed: ./Layer3Sprites/sprite_routines.asm
1259  E44C                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E44C 01 3B 30     sprite_load_sprite_data:ld			bc, $303B; SPRITE_SLOT_PORT
   2+ E44F AF                                   xor			a
   3+ E450 ED 79                                out			(c),a							; Prime slot upload
   4+ E452 11 00 1A                             ld			de,26	* 256						; nbr of sprites to upload
   5+ E455 21 63 E4                             ld			hl,Sprite1						; sprites are stored contiguous
   6+ E458 01 5B 00     SpriteLoadLoop:	        ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   7+ E45B ED 90                                outinb											; do final 256th sprite
   8+ E45D 1B                                   dec			de
   9+ E45E 7A                                   ld			a,d
  10+ E45F B3                                   or			e
  11+ E460 20 F6                                jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  12+ E462 C9                                   ret
  13+ E463
# file closed: ./Layer3Sprites/sprite_load.asm
1260  E463                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E463              Sprite1:
   2+ E463 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E467 E3 E3 E3 E3
   2+ E46B E3 E3 E3 E3
   2+ E46F E3 E3 E3 E3
   3+ E473 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E477 E3 E3 E3 E3
   3+ E47B E3 E3 E3 E3
   3+ E47F E3 E3 E3 E3
   4+ E483 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E487 E3 E3 E3 E3
   4+ E48B E3 E3 E3 E3
   4+ E48F E3 E3 E3 E3
   5+ E493 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E497 E3 E3 E3 E3
   5+ E49B E3 E3 E3 E3
   5+ E49F E3 E3 E3 E3
   6+ E4A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E4A7 E3 E3 E3 E3
   6+ E4AB E3 E3 E3 E3
   6+ E4AF E3 E3 E3 E3
   7+ E4B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E4B7 E3 E3 E3 E3
   7+ E4BB E3 E3 E3 E3
   7+ E4BF E3 E3 E3 E3
   8+ E4C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E4C7 E3 E3 E3 E3
   8+ E4CB E3 E3 E3 E3
   8+ E4CF E3 E3 E3 E3
   9+ E4D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E4D7 E3 E3 E3 E3
   9+ E4DB E3 E3 E3 E3
   9+ E4DF E3 E3 E3 E3
  10+ E4E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E4E7 E3 E3 E3 E3
  10+ E4EB E3 E3 E3 E3
  10+ E4EF E3 E3 E3 90
  11+ E4F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E4F7 E3 E3 E3 E3
  11+ E4FB E3 E3 E3 E3
  11+ E4FF E3 E3 E3 B4
  12+ E503 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E507 E3 E3 E3 E3
  12+ E50B E3 E3 E3 E3
  12+ E50F E3 E3 E3 B4
  13+ E513 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E517 E3 E3 E3 E3
  13+ E51B E3 E3 E3 E3
  13+ E51F E3 E3 E3 D8
  14+ E523 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E527 E3 E3 E3 E3
  14+ E52B E3 E3 E3 E3
  14+ E52F E3 E3 E3 D8
  15+ E533 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E537 E3 E3 E3 E3
  15+ E53B E3 E3 E3 E3
  15+ E53F E3 E3 E3 FC
  16+ E543 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E547 E3 E3 E3 E3
  16+ E54B E3 E3 E3 E3
  16+ E54F E3 E3 E3 FC
  17+ E553 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E557 E3 E3 E3 E3
  17+ E55B 90 B4 B4 D8
  17+ E55F D8 FC FC E3
  18+ E563
  19+ E563
  20+ E563
  21+ E563              Sprite2:
  22+ E563 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E567 E3 E3 E3 E3
  22+ E56B E3 E3 E3 E3
  22+ E56F E3 E3 E3 E3
  23+ E573 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E577 E3 E3 E3 E3
  23+ E57B E3 E3 E3 E3
  23+ E57F E3 E3 E3 E3
  24+ E583 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E587 E3 E3 E3 E3
  24+ E58B E3 E3 E3 E3
  24+ E58F E3 E3 E3 E3
  25+ E593 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E597 E3 E3 E3 E3
  25+ E59B E3 E3 E3 E3
  25+ E59F E3 E3 E3 E3
  26+ E5A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E5A7 E3 E3 E3 E3
  26+ E5AB E3 E3 E3 E3
  26+ E5AF E3 E3 E3 E3
  27+ E5B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E5B7 E3 E3 E3 E3
  27+ E5BB E3 E3 E3 E3
  27+ E5BF E3 E3 E3 E3
  28+ E5C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E5C7 E3 E3 E3 E3
  28+ E5CB E3 E3 E3 E3
  28+ E5CF E3 E3 E3 E3
  29+ E5D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E5D7 E3 E3 E3 E3
  29+ E5DB E3 E3 E3 E3
  29+ E5DF E3 E3 E3 E3
  30+ E5E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E5E7 E3 E3 E3 E3
  30+ E5EB E3 E3 E3 E3
  30+ E5EF E3 E3 E3 E3
  31+ E5F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E5F7 E3 E3 E3 E3
  31+ E5FB E3 E3 E3 E3
  31+ E5FF E3 E3 E3 E3
  32+ E603 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E607 E3 E3 E3 E3
  32+ E60B E3 E3 E3 E3
  32+ E60F E3 E3 E3 E3
  33+ E613 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E617 E3 E3 E3 E3
  33+ E61B E3 E3 E3 E3
  33+ E61F E3 E3 E3 E3
  34+ E623 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E627 E3 E3 E3 E3
  34+ E62B E3 E3 E3 E3
  34+ E62F E3 E3 E3 E3
  35+ E633 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E637 E3 E3 E3 E3
  35+ E63B E3 E3 E3 E3
  35+ E63F E3 E3 E3 E3
  36+ E643 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E647 E3 E3 E3 E3
  36+ E64B E3 E3 E3 E3
  36+ E64F E3 E3 E3 E3
  37+ E653 FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E657 B4 B4 90 E3
  37+ E65B E3 E3 E3 E3
  37+ E65F E3 E3 E3 E3
  38+ E663
  39+ E663
  40+ E663
  41+ E663              Sprite3:
  42+ E663 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E667 E3 E3 E3 E3
  42+ E66B E3 E3 E3 E3
  42+ E66F E3 E3 E3 FC
  43+ E673 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E677 E3 E3 E3 E3
  43+ E67B E3 E3 E3 E3
  43+ E67F E3 E3 E3 FC
  44+ E683 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E687 E3 E3 E3 E3
  44+ E68B E3 E3 E3 E3
  44+ E68F E3 E3 E3 D8
  45+ E693 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E697 E3 E3 E3 E3
  45+ E69B E3 E3 E3 E3
  45+ E69F E3 E3 E3 D8
  46+ E6A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E6A7 E3 E3 E3 E3
  46+ E6AB E3 E3 E3 E3
  46+ E6AF E3 E3 E3 B4
  47+ E6B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E6B7 E3 E3 E3 E3
  47+ E6BB E3 E3 E3 E3
  47+ E6BF E3 E3 E3 B4
  48+ E6C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E6C7 E3 E3 E3 E3
  48+ E6CB E3 E3 E3 E3
  48+ E6CF E3 E3 E3 90
  49+ E6D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E6D7 E3 E3 E3 E3
  49+ E6DB E3 E3 E3 E3
  49+ E6DF E3 E3 E3 E3
  50+ E6E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E6E7 E3 E3 E3 E3
  50+ E6EB E3 E3 E3 E3
  50+ E6EF E3 E3 E3 E3
  51+ E6F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E6F7 E3 E3 E3 E3
  51+ E6FB E3 E3 E3 E3
  51+ E6FF E3 E3 E3 E3
  52+ E703 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E707 E3 E3 E3 E3
  52+ E70B E3 E3 E3 E3
  52+ E70F E3 E3 E3 E3
  53+ E713 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E717 E3 E3 E3 E3
  53+ E71B E3 E3 E3 E3
  53+ E71F E3 E3 E3 E3
  54+ E723 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E727 E3 E3 E3 E3
  54+ E72B E3 E3 E3 E3
  54+ E72F E3 E3 E3 E3
  55+ E733 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E737 E3 E3 E3 E3
  55+ E73B E3 E3 E3 E3
  55+ E73F E3 E3 E3 E3
  56+ E743 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E747 E3 E3 E3 E3
  56+ E74B E3 E3 E3 E3
  56+ E74F E3 E3 E3 E3
  57+ E753 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E757 E3 E3 E3 E3
  57+ E75B E3 E3 E3 E3
  57+ E75F E3 E3 E3 E3
  58+ E763
  59+ E763
  60+ E763
  61+ E763              Sprite4:
  62+ E763 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E767 E3 E3 E3 E3
  62+ E76B E3 E3 E3 E3
  62+ E76F E3 E3 E3 E3
  63+ E773 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E777 E3 E3 E3 E3
  63+ E77B E3 E3 E3 E3
  63+ E77F E3 E3 E3 E3
  64+ E783 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E787 E3 E3 E3 E3
  64+ E78B E3 E3 E3 E3
  64+ E78F E3 E3 E3 E3
  65+ E793 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E797 E3 E3 E3 E3
  65+ E79B E3 E3 E3 E3
  65+ E79F E3 E3 E3 E3
  66+ E7A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E7A7 E3 E3 E3 E3
  66+ E7AB E3 E3 E3 E3
  66+ E7AF E3 E3 E3 E3
  67+ E7B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E7B7 E3 E3 E3 E3
  67+ E7BB E3 E3 E3 E3
  67+ E7BF E3 E3 E3 E3
  68+ E7C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E7C7 E3 E3 E3 E3
  68+ E7CB E3 E3 E3 E3
  68+ E7CF E3 E3 E3 E3
  69+ E7D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E7D7 E3 E3 E3 E3
  69+ E7DB E3 E3 E3 E3
  69+ E7DF E3 E3 E3 E3
  70+ E7E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E7E7 E3 E3 E3 E3
  70+ E7EB E3 E3 E3 E3
  70+ E7EF E3 E3 E3 E3
  71+ E7F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E7F7 E3 E3 E3 E3
  71+ E7FB E3 E3 E3 E3
  71+ E7FF E3 E3 E3 E3
  72+ E803 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E807 E3 E3 E3 E3
  72+ E80B E3 E3 E3 E3
  72+ E80F E3 E3 E3 E3
  73+ E813 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E817 E3 E3 E3 E3
  73+ E81B E3 E3 E3 E3
  73+ E81F E3 E3 E3 12
  74+ E823 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E827 E3 E3 E3 E3
  74+ E82B E3 E3 E3 E3
  74+ E82F E3 E3 E3 16
  75+ E833 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E837 E3 E3 E3 E3
  75+ E83B E3 E3 E3 E3
  75+ E83F E3 E3 E3 1A
  76+ E843 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E847 E3 E3 E3 E3
  76+ E84B E3 E3 E3 E3
  76+ E84F E3 E3 E3 1F
  77+ E853 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E857 E3 E3 E3 E3
  77+ E85B E3 E3 E3 12
  77+ E85F 16 1A 1F E3
  78+ E863
  79+ E863
  80+ E863
  81+ E863              Sprite5:
  82+ E863 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E867 E3 E3 E3 E3
  82+ E86B E3 E3 E3 E3
  82+ E86F E3 E3 E3 E3
  83+ E873 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E877 E3 E3 E3 E3
  83+ E87B E3 E3 E3 E3
  83+ E87F E3 E3 E3 E3
  84+ E883 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E887 E3 E3 E3 E3
  84+ E88B E3 E3 E3 E3
  84+ E88F E3 E3 E3 E3
  85+ E893 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E897 E3 E3 E3 E3
  85+ E89B E3 E3 E3 E3
  85+ E89F E3 E3 E3 E3
  86+ E8A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E8A7 E3 E3 E3 E3
  86+ E8AB E3 E3 E3 E3
  86+ E8AF E3 E3 E3 E3
  87+ E8B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E8B7 E3 E3 E3 E3
  87+ E8BB E3 E3 E3 E3
  87+ E8BF E3 E3 E3 E3
  88+ E8C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E8C7 E3 E3 E3 E3
  88+ E8CB E3 E3 E3 E3
  88+ E8CF E3 E3 E3 E3
  89+ E8D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E8D7 E3 E3 E3 E3
  89+ E8DB E3 E3 E3 E3
  89+ E8DF E3 E3 E3 E3
  90+ E8E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E8E7 E3 E3 E3 E3
  90+ E8EB E3 E3 E3 E3
  90+ E8EF E3 E3 E3 E3
  91+ E8F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E8F7 E3 E3 E3 E3
  91+ E8FB E3 E3 E3 E3
  91+ E8FF E3 E3 E3 E3
  92+ E903 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E907 E3 E3 E3 E3
  92+ E90B E3 E3 E3 E3
  92+ E90F E3 E3 E3 E3
  93+ E913 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E917 E3 E3 E3 E3
  93+ E91B E3 E3 E3 E3
  93+ E91F E3 E3 E3 E3
  94+ E923 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E927 E3 E3 E3 E3
  94+ E92B E3 E3 E3 E3
  94+ E92F E3 E3 E3 E3
  95+ E933 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E937 E3 E3 E3 E3
  95+ E93B E3 E3 E3 E3
  95+ E93F E3 E3 E3 E3
  96+ E943 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E947 E3 E3 E3 E3
  96+ E94B E3 E3 E3 E3
  96+ E94F E3 E3 E3 E3
  97+ E953 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E957 E3 E3 E3 E3
  97+ E95B E3 E3 E3 E3
  97+ E95F E3 E3 E3 E3
  98+ E963
  99+ E963
 100+ E963
 101+ E963              Sprite6:
 102+ E963 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E967 E3 E3 E3 E3
 102+ E96B E3 E3 E3 E3
 102+ E96F E3 E3 E3 1F
 103+ E973 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E977 E3 E3 E3 E3
 103+ E97B E3 E3 E3 E3
 103+ E97F E3 E3 E3 1A
 104+ E983 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E987 E3 E3 E3 E3
 104+ E98B E3 E3 E3 E3
 104+ E98F E3 E3 E3 16
 105+ E993 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E997 E3 E3 E3 E3
 105+ E99B E3 E3 E3 E3
 105+ E99F E3 E3 E3 12
 106+ E9A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E9A7 E3 E3 E3 E3
 106+ E9AB E3 E3 E3 E3
 106+ E9AF E3 E3 E3 E3
 107+ E9B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E9B7 E3 E3 E3 E3
 107+ E9BB E3 E3 E3 E3
 107+ E9BF E3 E3 E3 E3
 108+ E9C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E9C7 E3 E3 E3 E3
 108+ E9CB E3 E3 E3 E3
 108+ E9CF E3 E3 E3 E3
 109+ E9D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E9D7 E3 E3 E3 E3
 109+ E9DB E3 E3 E3 E3
 109+ E9DF E3 E3 E3 E3
 110+ E9E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E9E7 E3 E3 E3 E3
 110+ E9EB E3 E3 E3 E3
 110+ E9EF E3 E3 E3 E3
 111+ E9F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E9F7 E3 E3 E3 E3
 111+ E9FB E3 E3 E3 E3
 111+ E9FF E3 E3 E3 E3
 112+ EA03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA07 E3 E3 E3 E3
 112+ EA0B E3 E3 E3 E3
 112+ EA0F E3 E3 E3 E3
 113+ EA13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA17 E3 E3 E3 E3
 113+ EA1B E3 E3 E3 E3
 113+ EA1F E3 E3 E3 E3
 114+ EA23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EA27 E3 E3 E3 E3
 114+ EA2B E3 E3 E3 E3
 114+ EA2F E3 E3 E3 E3
 115+ EA33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EA37 E3 E3 E3 E3
 115+ EA3B E3 E3 E3 E3
 115+ EA3F E3 E3 E3 E3
 116+ EA43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EA47 E3 E3 E3 E3
 116+ EA4B E3 E3 E3 E3
 116+ EA4F E3 E3 E3 E3
 117+ EA53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ EA57 E3 E3 E3 E3
 117+ EA5B E3 E3 E3 E3
 117+ EA5F E3 E3 E3 E3
 118+ EA63
 119+ EA63
 120+ EA63
 121+ EA63              Sprite7:
 122+ EA63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ EA67 E3 E3 E3 E3
 122+ EA6B E3 E3 E3 E3
 122+ EA6F E3 E3 E3 E3
 123+ EA73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ EA77 E3 E3 E3 E3
 123+ EA7B E3 E3 E3 E3
 123+ EA7F E3 E3 E3 09
 124+ EA83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ EA87 E3 E3 E3 E3
 124+ EA8B E3 E3 E3 E3
 124+ EA8F E3 E3 E3 09
 125+ EA93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ EA97 E3 E3 E3 E3
 125+ EA9B E3 E3 E3 E3
 125+ EA9F E3 E3 E3 2C
 126+ EAA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ EAA7 E3 E3 E3 E3
 126+ EAAB E3 E3 E3 E3
 126+ EAAF E3 E3 E3 2C
 127+ EAB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ EAB7 E3 E3 E3 E3
 127+ EABB E3 E3 E3 E3
 127+ EABF E3 E3 E3 50
 128+ EAC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ EAC7 E3 E3 E3 E3
 128+ EACB E3 E3 E3 E3
 128+ EACF E3 E3 E3 50
 129+ EAD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EAD7 E3 E3 E3 E3
 129+ EADB E3 E3 E3 E3
 129+ EADF E3 E3 E3 50
 130+ EAE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ EAE7 E3 E3 E3 E3
 130+ EAEB E3 E3 E3 E3
 130+ EAEF E3 E3 E3 15
 131+ EAF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ EAF7 E3 E3 E3 E3
 131+ EAFB E3 E3 E3 E3
 131+ EAFF E3 E3 E3 15
 132+ EB03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ EB07 E3 E3 E3 E3
 132+ EB0B E3 E3 E3 E3
 132+ EB0F E3 E3 E3 15
 133+ EB13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ EB17 E3 E3 E3 E3
 133+ EB1B E3 E3 E3 E3
 133+ EB1F E3 E3 E3 7C
 134+ EB23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ EB27 E3 E3 E3 E3
 134+ EB2B E3 E3 E3 E3
 134+ EB2F E3 E3 E3 7C
 135+ EB33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ EB37 E3 E3 E3 E3
 135+ EB3B E3 E3 E3 E3
 135+ EB3F E3 E3 E3 7C
 136+ EB43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ EB47 E3 E3 E3 E3
 136+ EB4B E3 E3 E3 E3
 136+ EB4F E3 E3 E3 7C
 137+ EB53 E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ EB57 2C 50 50 50
 137+ EB5B 15 15 15 7C
 137+ EB5F 7C 7C 7C E3
 138+ EB63
 139+ EB63
 140+ EB63
 141+ EB63              Sprite8:
 142+ EB63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EB67 E3 E3 E3 E3
 142+ EB6B E3 E3 E3 E3
 142+ EB6F E3 E3 E3 E3
 143+ EB73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ EB77 E3 E3 E3 E3
 143+ EB7B E3 E3 E3 E3
 143+ EB7F E3 E3 E3 E3
 144+ EB83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ EB87 E3 E3 E3 E3
 144+ EB8B E3 E3 E3 E3
 144+ EB8F E3 E3 E3 E3
 145+ EB93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ EB97 E3 E3 E3 E3
 145+ EB9B E3 E3 E3 E3
 145+ EB9F E3 E3 E3 E3
 146+ EBA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ EBA7 E3 E3 E3 E3
 146+ EBAB E3 E3 E3 E3
 146+ EBAF E3 E3 E3 E3
 147+ EBB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ EBB7 E3 E3 E3 E3
 147+ EBBB E3 E3 E3 E3
 147+ EBBF E3 E3 E3 E3
 148+ EBC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ EBC7 E3 E3 E3 E3
 148+ EBCB E3 E3 E3 E3
 148+ EBCF E3 E3 E3 E3
 149+ EBD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ EBD7 E3 E3 E3 E3
 149+ EBDB E3 E3 E3 E3
 149+ EBDF E3 E3 E3 E3
 150+ EBE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ EBE7 E3 E3 E3 E3
 150+ EBEB E3 E3 E3 E3
 150+ EBEF E3 E3 E3 E3
 151+ EBF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ EBF7 E3 E3 E3 E3
 151+ EBFB E3 E3 E3 E3
 151+ EBFF E3 E3 E3 E3
 152+ EC03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ EC07 E3 E3 E3 E3
 152+ EC0B E3 E3 E3 E3
 152+ EC0F E3 E3 E3 E3
 153+ EC13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ EC17 E3 E3 E3 E3
 153+ EC1B E3 E3 E3 E3
 153+ EC1F E3 E3 E3 E3
 154+ EC23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ EC27 E3 E3 E3 E3
 154+ EC2B E3 E3 E3 E3
 154+ EC2F E3 E3 E3 E3
 155+ EC33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ EC37 E3 E3 E3 E3
 155+ EC3B E3 E3 E3 E3
 155+ EC3F E3 E3 E3 E3
 156+ EC43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ EC47 E3 E3 E3 E3
 156+ EC4B E3 E3 E3 E3
 156+ EC4F E3 E3 E3 E3
 157+ EC53 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ EC57 15 15 15 50
 157+ EC5B 50 50 2C 2C
 157+ EC5F 09 09 E3 E3
 158+ EC63
 159+ EC63
 160+ EC63
 161+ EC63              Sprite9:
 162+ EC63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ EC67 E3 E3 E3 E3
 162+ EC6B E3 E3 E3 E3
 162+ EC6F E3 E3 E3 7C
 163+ EC73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ EC77 E3 E3 E3 E3
 163+ EC7B E3 E3 E3 E3
 163+ EC7F E3 E3 E3 7C
 164+ EC83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ EC87 E3 E3 E3 E3
 164+ EC8B E3 E3 E3 E3
 164+ EC8F E3 E3 E3 7C
 165+ EC93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ EC97 E3 E3 E3 E3
 165+ EC9B E3 E3 E3 E3
 165+ EC9F E3 E3 E3 7C
 166+ ECA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ ECA7 E3 E3 E3 E3
 166+ ECAB E3 E3 E3 E3
 166+ ECAF E3 E3 E3 15
 167+ ECB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ ECB7 E3 E3 E3 E3
 167+ ECBB E3 E3 E3 E3
 167+ ECBF E3 E3 E3 15
 168+ ECC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ ECC7 E3 E3 E3 E3
 168+ ECCB E3 E3 E3 E3
 168+ ECCF E3 E3 E3 15
 169+ ECD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ ECD7 E3 E3 E3 E3
 169+ ECDB E3 E3 E3 E3
 169+ ECDF E3 E3 E3 50
 170+ ECE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ ECE7 E3 E3 E3 E3
 170+ ECEB E3 E3 E3 E3
 170+ ECEF E3 E3 E3 50
 171+ ECF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ ECF7 E3 E3 E3 E3
 171+ ECFB E3 E3 E3 E3
 171+ ECFF E3 E3 E3 50
 172+ ED03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ ED07 E3 E3 E3 E3
 172+ ED0B E3 E3 E3 E3
 172+ ED0F E3 E3 E3 2C
 173+ ED13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ ED17 E3 E3 E3 E3
 173+ ED1B E3 E3 E3 E3
 173+ ED1F E3 E3 E3 2C
 174+ ED23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ ED27 E3 E3 E3 E3
 174+ ED2B E3 E3 E3 E3
 174+ ED2F E3 E3 E3 09
 175+ ED33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ ED37 E3 E3 E3 E3
 175+ ED3B E3 E3 E3 E3
 175+ ED3F E3 E3 E3 09
 176+ ED43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ ED47 E3 E3 E3 E3
 176+ ED4B E3 E3 E3 E3
 176+ ED4F E3 E3 E3 E3
 177+ ED53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ ED57 E3 E3 E3 E3
 177+ ED5B E3 E3 E3 E3
 177+ ED5F E3 E3 E3 E3
 178+ ED63
 179+ ED63
 180+ ED63
 181+ ED63              Sprite10:
 182+ ED63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ ED67 E3 E3 E3 E3
 182+ ED6B E3 E3 E3 E3
 182+ ED6F E3 E3 E3 E3
 183+ ED73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ ED77 E3 E3 E3 E3
 183+ ED7B E3 E3 E3 E3
 183+ ED7F E3 E3 E3 44
 184+ ED83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ ED87 E3 E3 E3 E3
 184+ ED8B E3 E3 E3 E3
 184+ ED8F E3 E3 E3 64
 185+ ED93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ ED97 E3 E3 E3 E3
 185+ ED9B E3 E3 E3 E3
 185+ ED9F E3 E3 E3 64
 186+ EDA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EDA7 E3 E3 E3 E3
 186+ EDAB E3 E3 E3 E3
 186+ EDAF E3 E3 E3 64
 187+ EDB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EDB7 E3 E3 E3 E3
 187+ EDBB E3 E3 E3 E3
 187+ EDBF E3 E3 E3 A8
 188+ EDC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EDC7 E3 E3 E3 E3
 188+ EDCB E3 E3 E3 E3
 188+ EDCF E3 E3 E3 A8
 189+ EDD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EDD7 E3 E3 E3 E3
 189+ EDDB E3 E3 E3 E3
 189+ EDDF E3 E3 E3 A8
 190+ EDE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EDE7 E3 E3 E3 E3
 190+ EDEB E3 E3 E3 E3
 190+ EDEF E3 E3 E3 CC
 191+ EDF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EDF7 E3 E3 E3 E3
 191+ EDFB E3 E3 E3 E3
 191+ EDFF E3 E3 E3 CC
 192+ EE03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EE07 E3 E3 E3 E3
 192+ EE0B E3 E3 E3 E3
 192+ EE0F E3 E3 E3 CC
 193+ EE13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EE17 E3 E3 E3 E3
 193+ EE1B E3 E3 E3 E3
 193+ EE1F E3 E3 E3 EC
 194+ EE23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EE27 E3 E3 E3 E3
 194+ EE2B E3 E3 E3 E3
 194+ EE2F E3 E3 E3 EC
 195+ EE33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EE37 E3 E3 E3 E3
 195+ EE3B E3 E3 E3 E3
 195+ EE3F E3 E3 E3 EC
 196+ EE43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EE47 E3 E3 E3 E3
 196+ EE4B E3 E3 E3 E3
 196+ EE4F E3 E3 E3 EC
 197+ EE53 E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EE57 64 A8 A8 A8
 197+ EE5B CC CC CC EC
 197+ EE5F EC EC EC E3
 198+ EE63
 199+ EE63
 200+ EE63
 201+ EE63              Sprite11:
 202+ EE63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EE67 E3 E3 E3 E3
 202+ EE6B E3 E3 E3 E3
 202+ EE6F E3 E3 E3 E3
 203+ EE73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EE77 E3 E3 E3 E3
 203+ EE7B E3 E3 E3 E3
 203+ EE7F E3 E3 E3 E3
 204+ EE83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EE87 E3 E3 E3 E3
 204+ EE8B E3 E3 E3 E3
 204+ EE8F E3 E3 E3 E3
 205+ EE93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EE97 E3 E3 E3 E3
 205+ EE9B E3 E3 E3 E3
 205+ EE9F E3 E3 E3 E3
 206+ EEA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EEA7 E3 E3 E3 E3
 206+ EEAB E3 E3 E3 E3
 206+ EEAF E3 E3 E3 E3
 207+ EEB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EEB7 E3 E3 E3 E3
 207+ EEBB E3 E3 E3 E3
 207+ EEBF E3 E3 E3 E3
 208+ EEC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EEC7 E3 E3 E3 E3
 208+ EECB E3 E3 E3 E3
 208+ EECF E3 E3 E3 E3
 209+ EED3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EED7 E3 E3 E3 E3
 209+ EEDB E3 E3 E3 E3
 209+ EEDF E3 E3 E3 E3
 210+ EEE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EEE7 E3 E3 E3 E3
 210+ EEEB E3 E3 E3 E3
 210+ EEEF E3 E3 E3 E3
 211+ EEF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EEF7 E3 E3 E3 E3
 211+ EEFB E3 E3 E3 E3
 211+ EEFF E3 E3 E3 E3
 212+ EF03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF07 E3 E3 E3 E3
 212+ EF0B E3 E3 E3 E3
 212+ EF0F E3 E3 E3 E3
 213+ EF13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF17 E3 E3 E3 E3
 213+ EF1B E3 E3 E3 E3
 213+ EF1F E3 E3 E3 E3
 214+ EF23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EF27 E3 E3 E3 E3
 214+ EF2B E3 E3 E3 E3
 214+ EF2F E3 E3 E3 E3
 215+ EF33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EF37 E3 E3 E3 E3
 215+ EF3B E3 E3 E3 E3
 215+ EF3F E3 E3 E3 E3
 216+ EF43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EF47 E3 E3 E3 E3
 216+ EF4B E3 E3 E3 E3
 216+ EF4F E3 E3 E3 E3
 217+ EF53 EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EF57 CC CC CC A8
 217+ EF5B A8 A8 64 64
 217+ EF5F 64 44 E3 E3
 218+ EF63
 219+ EF63
 220+ EF63
 221+ EF63              Sprite12:
 222+ EF63 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EF67 E3 E3 E3 E3
 222+ EF6B E3 E3 E3 E3
 222+ EF6F E3 E3 E3 EC
 223+ EF73 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EF77 E3 E3 E3 E3
 223+ EF7B E3 E3 E3 E3
 223+ EF7F E3 E3 E3 EC
 224+ EF83 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EF87 E3 E3 E3 E3
 224+ EF8B E3 E3 E3 E3
 224+ EF8F E3 E3 E3 EC
 225+ EF93 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EF97 E3 E3 E3 E3
 225+ EF9B E3 E3 E3 E3
 225+ EF9F E3 E3 E3 EC
 226+ EFA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ EFA7 E3 E3 E3 E3
 226+ EFAB E3 E3 E3 E3
 226+ EFAF E3 E3 E3 CC
 227+ EFB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ EFB7 E3 E3 E3 E3
 227+ EFBB E3 E3 E3 E3
 227+ EFBF E3 E3 E3 CC
 228+ EFC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ EFC7 E3 E3 E3 E3
 228+ EFCB E3 E3 E3 E3
 228+ EFCF E3 E3 E3 CC
 229+ EFD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ EFD7 E3 E3 E3 E3
 229+ EFDB E3 E3 E3 E3
 229+ EFDF E3 E3 E3 A8
 230+ EFE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ EFE7 E3 E3 E3 E3
 230+ EFEB E3 E3 E3 E3
 230+ EFEF E3 E3 E3 A8
 231+ EFF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ EFF7 E3 E3 E3 E3
 231+ EFFB E3 E3 E3 E3
 231+ EFFF E3 E3 E3 A8
 232+ F003 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ F007 E3 E3 E3 E3
 232+ F00B E3 E3 E3 E3
 232+ F00F E3 E3 E3 64
 233+ F013 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ F017 E3 E3 E3 E3
 233+ F01B E3 E3 E3 E3
 233+ F01F E3 E3 E3 64
 234+ F023 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ F027 E3 E3 E3 E3
 234+ F02B E3 E3 E3 E3
 234+ F02F E3 E3 E3 64
 235+ F033 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ F037 E3 E3 E3 E3
 235+ F03B E3 E3 E3 E3
 235+ F03F E3 E3 E3 44
 236+ F043 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F047 E3 E3 E3 E3
 236+ F04B E3 E3 E3 E3
 236+ F04F E3 E3 E3 E3
 237+ F053 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F057 E3 E3 E3 E3
 237+ F05B E3 E3 E3 E3
 237+ F05F E3 E3 E3 E3
 238+ F063
 239+ F063
 240+ F063
 241+ F063              Sprite13:
 242+ F063 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F067 E3 E3 E3 E3
 242+ F06B E3 E3 E3 E3
 242+ F06F E3 E3 E3 E3
 243+ F073 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F077 E3 E3 E3 E3
 243+ F07B E3 E3 E3 E3
 243+ F07F E3 E3 E3 E3
 244+ F083 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F087 E3 E3 E3 E3
 244+ F08B E3 E3 E3 E3
 244+ F08F E3 E3 E3 E3
 245+ F093 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F097 E3 E3 E3 E3
 245+ F09B E3 E3 E3 E3
 245+ F09F E3 E3 E3 E3
 246+ F0A3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F0A7 E3 E3 E3 E3
 246+ F0AB E3 E3 E3 E3
 246+ F0AF E3 E3 E3 E3
 247+ F0B3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F0B7 E3 E3 E3 E3
 247+ F0BB E3 E3 E3 E3
 247+ F0BF E3 E3 E3 E3
 248+ F0C3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F0C7 E3 E3 E3 E3
 248+ F0CB E3 E3 E3 E3
 248+ F0CF E3 E3 E3 E3
 249+ F0D3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F0D7 E3 E3 E3 E3
 249+ F0DB E3 E3 E3 E3
 249+ F0DF E3 E3 E3 E3
 250+ F0E3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F0E7 E3 E3 E3 E3
 250+ F0EB E3 E3 E3 E3
 250+ F0EF E3 E3 E3 E3
 251+ F0F3 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F0F7 E3 E3 E3 E3
 251+ F0FB E3 E3 E3 E3
 251+ F0FF E3 E3 E3 E3
 252+ F103 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F107 E3 E3 E3 E3
 252+ F10B E3 E3 E3 E3
 252+ F10F E3 E3 E3 E3
 253+ F113 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 253+ F117 E3 E3 E3 E3
 253+ F11B E3 E3 E3 E3
 253+ F11F E3 E3 E3 E3
 254+ F123 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 254+ F127 E3 E3 E3 E3
 254+ F12B E3 E3 E3 E3
 254+ F12F E3 E3 E3 E3
 255+ F133 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 255+ F137 E3 E3 E3 E3
 255+ F13B E3 E3 E3 E3
 255+ F13F E3 E3 E3 E3
 256+ F143 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 256+ F147 E3 E3 E3 E3
 256+ F14B E3 E3 E3 E3
 256+ F14F E3 E3 E3 E3
 257+ F153 FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 257+ F157 E3 E3 E3 E3
 257+ F15B E3 E3 E3 E3
 257+ F15F E3 E3 E3 E3
 258+ F163
 259+ F163
 260+ F163
 261+ F163              Sprite14:
 262+ F163 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 262+ F167 FF FF FF FF
 262+ F16B FF FF FF FF
 262+ F16F FF FF FF FF
 263+ F173 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F177 E3 E3 E3 E3
 263+ F17B E3 E3 E3 E3
 263+ F17F E3 E3 E3 E3
 264+ F183 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F187 E3 E3 E3 E3
 264+ F18B E3 E3 E3 E3
 264+ F18F E3 E3 E3 E3
 265+ F193 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F197 E3 E3 E3 E3
 265+ F19B E3 E3 E3 E3
 265+ F19F E3 E3 E3 E3
 266+ F1A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F1A7 E3 E3 E3 E3
 266+ F1AB E3 E3 E3 E3
 266+ F1AF E3 E3 E3 E3
 267+ F1B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 267+ F1B7 E3 E3 E3 E3
 267+ F1BB E3 E3 E3 E3
 267+ F1BF E3 E3 E3 E3
 268+ F1C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 268+ F1C7 E3 E3 E3 E3
 268+ F1CB E3 E3 E3 E3
 268+ F1CF E3 E3 E3 E3
 269+ F1D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 269+ F1D7 E3 E3 E3 E3
 269+ F1DB E3 E3 E3 E3
 269+ F1DF E3 E3 E3 E3
 270+ F1E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 270+ F1E7 E3 E3 E3 E3
 270+ F1EB E3 E3 E3 E3
 270+ F1EF E3 E3 E3 E3
 271+ F1F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 271+ F1F7 E3 E3 E3 E3
 271+ F1FB E3 E3 E3 E3
 271+ F1FF E3 E3 E3 E3
 272+ F203 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 272+ F207 E3 E3 E3 E3
 272+ F20B E3 E3 E3 E3
 272+ F20F E3 E3 E3 E3
 273+ F213 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F217 E3 E3 E3 E3
 273+ F21B E3 E3 E3 E3
 273+ F21F E3 E3 E3 E3
 274+ F223 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F227 E3 E3 E3 E3
 274+ F22B E3 E3 E3 E3
 274+ F22F E3 E3 E3 E3
 275+ F233 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F237 E3 E3 E3 E3
 275+ F23B E3 E3 E3 E3
 275+ F23F E3 E3 E3 E3
 276+ F243 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F247 E3 E3 E3 E3
 276+ F24B E3 E3 E3 E3
 276+ F24F E3 E3 E3 E3
 277+ F253 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F257 E3 E3 E3 E3
 277+ F25B E3 E3 E3 E3
 277+ F25F E3 E3 E3 E3
 278+ F263
 279+ F263
 280+ F263
 281+ F263              Sprite15:
 282+ F263 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F267 E3 E3 E3 E3
 282+ F26B E3 E3 E3 E3
 282+ F26F E3 E3 E3 E3
 283+ F273 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F277 E3 E3 E3 E3
 283+ F27B E3 E3 E3 E3
 283+ F27F E3 E3 E3 E3
 284+ F283 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F287 E3 E3 E3 E3
 284+ F28B E3 E3 E3 E3
 284+ F28F E3 E3 E3 E3
 285+ F293 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F297 E3 E3 E3 E3
 285+ F29B E3 E3 E3 E3
 285+ F29F E3 E3 E3 E3
 286+ F2A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 286+ F2A7 E3 E3 E3 E3
 286+ F2AB E3 E3 E3 E3
 286+ F2AF E3 E3 E3 E3
 287+ F2B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 287+ F2B7 E3 E3 E3 E3
 287+ F2BB E3 E3 E3 E3
 287+ F2BF E3 E3 E3 E3
 288+ F2C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 288+ F2C7 E3 E3 E3 E3
 288+ F2CB E3 E3 E3 E3
 288+ F2CF E3 E3 E3 E3
 289+ F2D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 289+ F2D7 E3 E3 E3 E3
 289+ F2DB E3 E3 E3 E3
 289+ F2DF E3 E3 E3 E3
 290+ F2E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 290+ F2E7 E3 E3 E3 E3
 290+ F2EB E3 E3 E3 E3
 290+ F2EF E3 E3 E3 E3
 291+ F2F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 291+ F2F7 E3 E3 E3 E3
 291+ F2FB E3 E3 E3 E3
 291+ F2FF E3 E3 E3 E3
 292+ F303 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 292+ F307 E3 E3 E3 E3
 292+ F30B E3 E3 E3 E3
 292+ F30F E3 E3 E3 18
 293+ F313 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C;
 293+ F317 E3 E3 E3 E3
 293+ F31B E3 E3 E3 E3
 293+ F31F 18 18 18 1C
 294+ F323 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C;
 294+ F327 E3 E3 E3 E3
 294+ F32B E3 E3 18 18
 294+ F32F 18 1C 1C 1C
 295+ F333 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C;
 295+ F337 E3 E3 E3 18
 295+ F33B 18 18 1C 1C
 295+ F33F 1C 1C 1C 1C
 296+ F343 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 296+ F347 18 18 18 18
 296+ F34B 1C 1C 1C 1C
 296+ F34F 1C 1C 1C 1C
 297+ F353 E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $18;
 297+ F357 1C 1C 1C 1C
 297+ F35B 1C 1C 1C 1C
 297+ F35F 1C 1C 1C 18
 298+ F363
 299+ F363
 300+ F363
 301+ F363              Sprite16:
 302+ F363 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 302+ F367 E3 E3 E3 E3
 302+ F36B E3 E3 E3 E3
 302+ F36F E3 E3 E3 E3
 303+ F373 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 303+ F377 E3 E3 E3 E3
 303+ F37B E3 E3 E3 E3
 303+ F37F E3 E3 E3 E3
 304+ F383 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 304+ F387 E3 E3 E3 E3
 304+ F38B E3 E3 E3 E3
 304+ F38F E3 E3 E3 E3
 305+ F393 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 305+ F397 E3 E3 E3 E3
 305+ F39B E3 E3 E3 E3
 305+ F39F E3 E3 E3 18
 306+ F3A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18;
 306+ F3A7 E3 E3 E3 E3
 306+ F3AB E3 E3 E3 E3
 306+ F3AF E3 18 18 18
 307+ F3B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C;
 307+ F3B7 E3 E3 E3 E3
 307+ F3BB E3 E3 E3 18
 307+ F3BF 18 18 18 1C
 308+ F3C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $18;
 308+ F3C7 E3 E3 E3 E3
 308+ F3CB 18 18 18 18
 308+ F3CF 18 1C 1C 18
 309+ F3D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $1C, $18, $18;
 309+ F3D7 E3 E3 18 18
 309+ F3DB 18 18 18 1C
 309+ F3DF 1C 1C 18 18
 310+ F3E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3;
 310+ F3E7 18 18 18 18
 310+ F3EB 1C 1C 1C 1C
 310+ F3EF 1C 18 18 E3
 311+ F3F3 E3 E3 18 18  	db  $E3, $E3, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3;
 311+ F3F7 18 18 1C 1C
 311+ F3FB 1C 1C 1C 18
 311+ F3FF 18 E3 E3 E3
 312+ F403 18 18 18 18  	db  $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3;
 312+ F407 1C 1C 1C 1C
 312+ F40B 1C 18 18 18
 312+ F40F E3 E3 E3 E3
 313+ F413 18 18 1C 1C  	db  $18, $18, $1C, $1C, $1C, $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F417 1C 18 18 18
 313+ F41B 18 18 E3 E3
 313+ F41F E3 E3 E3 E3
 314+ F423 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F427 18 18 18 18
 314+ F42B E3 E3 E3 E3
 314+ F42F E3 E3 E3 E3
 315+ F433 1C 1C 18 18  	db  $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F437 18 E3 E3 E3
 315+ F43B E3 E3 E3 E3
 315+ F43F E3 E3 E3 E3
 316+ F443 18 18 18 E3  	db  $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F447 E3 E3 E3 E3
 316+ F44B E3 E3 E3 E3
 316+ F44F E3 E3 E3 E3
 317+ F453 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F457 E3 E3 E3 E3
 317+ F45B E3 E3 E3 E3
 317+ F45F E3 E3 E3 E3
 318+ F463
 319+ F463
 320+ F463
 321+ F463              Sprite17:
 322+ F463 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F467 E3 E3 E3 E3
 322+ F46B E3 E3 E3 E3
 322+ F46F E3 E3 E3 E3
 323+ F473 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 323+ F477 E3 E3 E3 E3
 323+ F47B E3 E3 E3 E3
 323+ F47F E3 E3 E3 E3
 324+ F483 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 324+ F487 E3 E3 E3 E3
 324+ F48B E3 E3 E3 E3
 324+ F48F E3 E3 E3 E3
 325+ F493 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 325+ F497 E3 E3 E3 E3
 325+ F49B E3 E3 E3 E3
 325+ F49F E3 E3 E3 E3
 326+ F4A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F4A7 E3 E3 E3 E3
 326+ F4AB E3 E3 E3 E3
 326+ F4AF E3 E3 E3 E3
 327+ F4B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18;
 327+ F4B7 E3 E3 E3 E3
 327+ F4BB E3 E3 E3 E3
 327+ F4BF E3 18 18 18
 328+ F4C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $18;
 328+ F4C7 E3 E3 E3 E3
 328+ F4CB E3 E3 E3 18
 328+ F4CF 18 18 1C 18
 329+ F4D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $18;
 329+ F4D7 E3 E3 E3 E3
 329+ F4DB E3 18 18 18
 329+ F4DF 1C 1C 18 18
 330+ F4E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $18, $18, $18, $E3;
 330+ F4E7 E3 E3 18 18
 330+ F4EB 18 18 1C 1C
 330+ F4EF 18 18 18 E3
 331+ F4F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3;
 331+ F4F7 18 18 18 1C
 331+ F4FB 1C 1C 1C 18
 331+ F4FF 18 E3 E3 E3
 332+ F503 E3 E3 18 18  	db  $E3, $E3, $18, $18, $18, $1C, $1C, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3;
 332+ F507 18 1C 1C 18
 332+ F50B 18 18 18 E3
 332+ F50F E3 E3 E3 E3
 333+ F513 18 18 1C 18  	db  $18, $18, $1C, $18, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 333+ F517 1C 1C 18 18
 333+ F51B 18 E3 E3 E3
 333+ F51F E3 E3 E3 E3
 334+ F523 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 334+ F527 18 18 18 E3
 334+ F52B E3 E3 E3 E3
 334+ F52F E3 E3 E3 E3
 335+ F533 1C 18 18 18  	db  $1C, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 335+ F537 18 E3 E3 E3
 335+ F53B E3 E3 E3 E3
 335+ F53F E3 E3 E3 E3
 336+ F543 18 18 18 E3  	db  $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 336+ F547 E3 E3 E3 E3
 336+ F54B E3 E3 E3 E3
 336+ F54F E3 E3 E3 E3
 337+ F553 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 337+ F557 E3 E3 E3 E3
 337+ F55B E3 E3 E3 E3
 337+ F55F E3 E3 E3 E3
 338+ F563
 339+ F563
 340+ F563
 341+ F563              Sprite18:
 342+ F563 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F567 E3 E3 E3 E3
 342+ F56B E3 E3 E3 E3
 342+ F56F E3 E3 E3 E3
 343+ F573 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F577 E3 E3 E3 E3
 343+ F57B E3 E3 E3 E3
 343+ F57F E3 E3 E3 E3
 344+ F583 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F587 E3 E3 E3 E3
 344+ F58B E3 E3 E3 E3
 344+ F58F E3 E3 E3 E3
 345+ F593 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F597 E3 E3 E3 E3
 345+ F59B E3 E3 E3 E3
 345+ F59F E3 E3 E3 E3
 346+ F5A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F5A7 E3 E3 E3 E3
 346+ F5AB E3 E3 E3 E3
 346+ F5AF E3 E3 E3 E3
 347+ F5B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F5B7 E3 E3 E3 E3
 347+ F5BB E3 E3 E3 E3
 347+ F5BF E3 E3 E3 E3
 348+ F5C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 348+ F5C7 E3 E3 E3 E3
 348+ F5CB E3 E3 E3 E3
 348+ F5CF E3 E3 E3 18
 349+ F5D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C;
 349+ F5D7 E3 E3 E3 E3
 349+ F5DB E3 E3 E3 E3
 349+ F5DF E3 18 18 1C
 350+ F5E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18;
 350+ F5E7 E3 E3 E3 E3
 350+ F5EB E3 E3 E3 18
 350+ F5EF 18 1C 1C 18
 351+ F5F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $E3, $E3;
 351+ F5F7 E3 E3 E3 E3
 351+ F5FB 18 18 18 1C
 351+ F5FF 1C 18 E3 E3
 352+ F603 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $18, $E3, $E3, $E3, $E3;
 352+ F607 E3 18 18 18
 352+ F60B 1C 1C 1C 18
 352+ F60F E3 E3 E3 E3
 353+ F613 E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F617 18 1C 1C 1C
 353+ F61B 18 18 E3 E3
 353+ F61F E3 E3 E3 E3
 354+ F623 18 18 18 1C  	db  $18, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F627 1C 1C 18 18
 354+ F62B E3 E3 E3 E3
 354+ F62F E3 E3 E3 E3
 355+ F633 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F637 18 18 E3 E3
 355+ F63B E3 E3 E3 E3
 355+ F63F E3 E3 E3 E3
 356+ F643 1C 1C 18 E3  	db  $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F647 E3 E3 E3 E3
 356+ F64B E3 E3 E3 E3
 356+ F64F E3 E3 E3 E3
 357+ F653 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F657 E3 E3 E3 E3
 357+ F65B E3 E3 E3 E3
 357+ F65F E3 E3 E3 E3
 358+ F663
 359+ F663
 360+ F663
 361+ F663              Sprite19:
 362+ F663 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C;
 362+ F667 E3 E3 E3 E3
 362+ F66B E3 E3 E3 E3
 362+ F66F E3 E3 E3 1C
 363+ F673 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C, $1C, $1C, $E3;
 363+ F677 E3 E3 E3 E3
 363+ F67B E3 E3 E3 E3
 363+ F67F 1C 1C 1C E3
 364+ F683 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $E3, $E3, $E3;
 364+ F687 E3 E3 E3 E3
 364+ F68B E3 E3 18 18
 364+ F68F 1C E3 E3 E3
 365+ F693 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3;
 365+ F697 E3 E3 E3 18
 365+ F69B 18 18 18 E3
 365+ F69F E3 E3 E3 E3
 366+ F6A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F6A7 E3 18 18 18
 366+ F6AB 18 E3 E3 E3
 366+ F6AF E3 E3 E3 E3
 367+ F6B3 E3 E3 18 18  	db  $E3, $E3, $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F6B7 18 18 18 E3
 367+ F6BB E3 E3 E3 E3
 367+ F6BF E3 E3 E3 E3
 368+ F6C3 18 18 18 18  	db  $18, $18, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F6C7 18 E3 E3 E3
 368+ F6CB E3 E3 E3 E3
 368+ F6CF E3 E3 E3 E3
 369+ F6D3 18 18 18 E3  	db  $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F6D7 E3 E3 E3 E3
 369+ F6DB E3 E3 E3 E3
 369+ F6DF E3 E3 E3 E3
 370+ F6E3 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F6E7 E3 E3 E3 E3
 370+ F6EB E3 E3 E3 E3
 370+ F6EF E3 E3 E3 E3
 371+ F6F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F6F7 E3 E3 E3 E3
 371+ F6FB E3 E3 E3 E3
 371+ F6FF E3 E3 E3 E3
 372+ F703 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 372+ F707 E3 E3 E3 E3
 372+ F70B E3 E3 E3 E3
 372+ F70F E3 E3 E3 E3
 373+ F713 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 373+ F717 E3 E3 E3 E3
 373+ F71B E3 E3 E3 E3
 373+ F71F E3 E3 E3 E3
 374+ F723 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 374+ F727 E3 E3 E3 E3
 374+ F72B E3 E3 E3 E3
 374+ F72F E3 E3 E3 E3
 375+ F733 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 375+ F737 E3 E3 E3 E3
 375+ F73B E3 E3 E3 E3
 375+ F73F E3 E3 E3 E3
 376+ F743 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 376+ F747 E3 E3 E3 E3
 376+ F74B E3 E3 E3 E3
 376+ F74F E3 E3 E3 E3
 377+ F753 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 377+ F757 E3 E3 E3 E3
 377+ F75B E3 E3 E3 E3
 377+ F75F E3 E3 E3 E3
 378+ F763
 379+ F763
 380+ F763
 381+ F763              Sprite20:
 382+ F763 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 382+ F767 E3 E3 E3 E3
 382+ F76B E3 E3 E3 E3
 382+ F76F E3 E3 E3 E3
 383+ F773 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 383+ F777 E3 E3 E3 E3
 383+ F77B E3 E3 E3 E3
 383+ F77F E3 E3 E3 E3
 384+ F783 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 384+ F787 E3 E3 E3 E3
 384+ F78B E3 E3 E3 E3
 384+ F78F E3 E3 E3 E3
 385+ F793 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 385+ F797 E3 E3 E3 E3
 385+ F79B E3 E3 E3 E3
 385+ F79F E3 E3 E3 E3
 386+ F7A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 386+ F7A7 E3 E3 E3 E3
 386+ F7AB E3 E3 E3 E3
 386+ F7AF E3 E3 E3 E3
 387+ F7B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F7B7 E3 E3 E3 E3
 387+ F7BB E3 E3 E3 E3
 387+ F7BF E3 E3 E3 E3
 388+ F7C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F7C7 E3 E3 E3 E3
 388+ F7CB E3 E3 E3 E3
 388+ F7CF E3 E3 E3 E3
 389+ F7D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F7D7 E3 E3 E3 E3
 389+ F7DB E3 E3 E3 E3
 389+ F7DF E3 E3 E3 E3
 390+ F7E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F7E7 E3 E3 E3 E3
 390+ F7EB E3 E3 E3 E3
 390+ F7EF E3 E3 E3 E3
 391+ F7F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F7F7 E3 E3 E3 E3
 391+ F7FB E3 E3 E3 E3
 391+ F7FF E3 E3 E3 E3
 392+ F803 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F807 E3 E3 E3 E3
 392+ F80B E3 E3 E3 E3
 392+ F80F E3 E3 E3 E3
 393+ F813 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F817 E3 E3 E3 E3
 393+ F81B E3 E3 E3 E3
 393+ F81F E3 E3 E3 E3
 394+ F823 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F827 E3 E3 E3 E3
 394+ F82B E3 E3 E3 E3
 394+ F82F E3 E3 E3 E3
 395+ F833 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F837 E3 E3 E3 E3
 395+ F83B E3 E3 E3 E3
 395+ F83F E3 E3 E3 E3
 396+ F843 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F847 E3 E3 E3 E3
 396+ F84B E3 E3 E3 E3
 396+ F84F E3 E3 E3 E3
 397+ F853 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F857 E3 E3 E3 E3
 397+ F85B E3 E3 E3 E3
 397+ F85F E3 E3 E3 E3
 398+ F863
 399+ F863
 400+ F863
 401+ F863              Sprite21:
 402+ F863 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 402+ F867 E3 E3 E3 E3
 402+ F86B E3 E3 E3 E3
 402+ F86F E3 E3 E3 E3
 403+ F873 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F877 E3 E3 E3 E3
 403+ F87B E3 E3 E3 E3
 403+ F87F E3 E3 E3 E3
 404+ F883 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F887 E3 E3 E3 E3
 404+ F88B E3 E3 E3 E3
 404+ F88F E3 E3 E3 E3
 405+ F893 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F897 E3 E3 E3 E3
 405+ F89B E3 E3 E3 E3
 405+ F89F E3 E3 E3 E3
 406+ F8A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F8A7 E3 E3 E3 E3
 406+ F8AB E3 E3 E3 E3
 406+ F8AF E3 E3 E3 E3
 407+ F8B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F8B7 E3 E3 E3 E3
 407+ F8BB E3 E3 E3 E3
 407+ F8BF E3 E3 E3 E3
 408+ F8C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 408+ F8C7 E3 E3 E3 E3
 408+ F8CB E3 E3 E3 E3
 408+ F8CF E3 E3 E3 E3
 409+ F8D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 409+ F8D7 E3 E3 E3 E3
 409+ F8DB E3 E3 E3 E3
 409+ F8DF E3 E3 E3 E3
 410+ F8E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 410+ F8E7 E3 E3 E3 E3
 410+ F8EB E3 E3 E3 E3
 410+ F8EF E3 E3 E3 E3
 411+ F8F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 411+ F8F7 E3 E3 E3 E3
 411+ F8FB E3 E3 E3 E3
 411+ F8FF E3 E3 E3 E3
 412+ F903 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 412+ F907 E3 E3 E3 E3
 412+ F90B E3 E3 E3 E3
 412+ F90F E3 E3 E3 E3
 413+ F913 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 413+ F917 E3 E3 E3 E3
 413+ F91B E3 E3 E3 E3
 413+ F91F E3 E3 E3 E3
 414+ F923 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 414+ F927 E3 E3 E3 E3
 414+ F92B E3 E3 E3 E3
 414+ F92F E3 E3 E3 E3
 415+ F933 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F937 E3 E3 E3 E3
 415+ F93B E3 E3 E3 E3
 415+ F93F E3 E3 E3 E3
 416+ F943 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F947 E3 E3 E3 E3
 416+ F94B E3 E3 E3 E3
 416+ F94F E3 E3 E3 E3
 417+ F953 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F957 E3 E3 E3 E3
 417+ F95B E3 E3 E3 E3
 417+ F95F E3 E3 E3 E3
 418+ F963
 419+ F963
 420+ F963
 421+ F963              Sprite22:
 422+ F963 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 422+ F967 E3 E3 E3 E3
 422+ F96B E3 E3 E3 E3
 422+ F96F E3 E3 E3 E3
 423+ F973 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F977 E3 E3 E3 E3
 423+ F97B E3 E3 E3 E3
 423+ F97F E3 E3 E3 E3
 424+ F983 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F987 E3 E3 E3 E3
 424+ F98B E3 E3 E3 E3
 424+ F98F E3 E3 E3 E3
 425+ F993 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ F997 E3 E3 E3 E3
 425+ F99B E3 E3 E3 E3
 425+ F99F E3 E3 E3 E3
 426+ F9A3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ F9A7 E3 E3 E3 E3
 426+ F9AB E3 E3 E3 E3
 426+ F9AF E3 E3 E3 E3
 427+ F9B3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ F9B7 E3 E3 E3 E3
 427+ F9BB E3 E3 E3 E3
 427+ F9BF E3 E3 E3 E3
 428+ F9C3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ F9C7 E3 E3 E3 E3
 428+ F9CB E3 E3 E3 E3
 428+ F9CF E3 E3 E3 E3
 429+ F9D3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ F9D7 E3 E3 E3 E3
 429+ F9DB E3 E3 E3 E3
 429+ F9DF E3 E3 E3 E3
 430+ F9E3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ F9E7 E3 E3 E3 E3
 430+ F9EB E3 E3 E3 E3
 430+ F9EF E3 E3 E3 E3
 431+ F9F3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ F9F7 E3 E3 E3 E3
 431+ F9FB E3 E3 E3 E3
 431+ F9FF E3 E3 E3 E3
 432+ FA03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA07 E3 E3 E3 E3
 432+ FA0B E3 E3 E3 E3
 432+ FA0F E3 E3 E3 E3
 433+ FA13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA17 E3 E3 E3 E3
 433+ FA1B E3 E3 E3 E3
 433+ FA1F E3 E3 E3 E3
 434+ FA23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA27 E3 E3 E3 E3
 434+ FA2B E3 E3 E3 E3
 434+ FA2F E3 E3 E3 E3
 435+ FA33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FA37 E3 E3 E3 E3
 435+ FA3B E3 E3 E3 E3
 435+ FA3F E3 E3 E3 E3
 436+ FA43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FA47 E3 E3 E3 E3
 436+ FA4B E3 E3 E3 E3
 436+ FA4F E3 E3 E3 E3
 437+ FA53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FA57 E3 E3 E3 E3
 437+ FA5B E3 E3 E3 E3
 437+ FA5F E3 E3 E3 E3
 438+ FA63
 439+ FA63
 440+ FA63
 441+ FA63              Sprite23:
 442+ FA63 E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 442+ FA67 E3 E3 E3 E3
 442+ FA6B E3 E3 E3 E3
 442+ FA6F E3 E3 E3 E3
 443+ FA73 B4 FF FC D8  	db  $B4, $FF, $FC, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 443+ FA77 E3 E3 E3 E3
 443+ FA7B E3 E3 E3 E3
 443+ FA7F E3 E3 E3 E3
 444+ FA83 D8 FC B4 D8  	db  $D8, $FC, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 444+ FA87 E3 E3 E3 E3
 444+ FA8B E3 E3 E3 E3
 444+ FA8F E3 E3 E3 E3
 445+ FA93 E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 445+ FA97 E3 E3 E3 E3
 445+ FA9B E3 E3 E3 E3
 445+ FA9F E3 E3 E3 E3
 446+ FAA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 446+ FAA7 E3 E3 E3 E3
 446+ FAAB E3 E3 E3 E3
 446+ FAAF E3 E3 E3 E3
 447+ FAB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 447+ FAB7 E3 E3 E3 E3
 447+ FABB E3 E3 E3 E3
 447+ FABF E3 E3 E3 E3
 448+ FAC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 448+ FAC7 E3 E3 E3 E3
 448+ FACB E3 E3 E3 E3
 448+ FACF E3 E3 E3 E3
 449+ FAD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 449+ FAD7 E3 E3 E3 E3
 449+ FADB E3 E3 E3 E3
 449+ FADF E3 E3 E3 E3
 450+ FAE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 450+ FAE7 E3 E3 E3 E3
 450+ FAEB E3 E3 E3 E3
 450+ FAEF E3 E3 E3 E3
 451+ FAF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 451+ FAF7 E3 E3 E3 E3
 451+ FAFB E3 E3 E3 E3
 451+ FAFF E3 E3 E3 E3
 452+ FB03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 452+ FB07 E3 E3 E3 E3
 452+ FB0B E3 E3 E3 E3
 452+ FB0F E3 E3 E3 E3
 453+ FB13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 453+ FB17 E3 E3 E3 E3
 453+ FB1B E3 E3 E3 E3
 453+ FB1F E3 E3 E3 E3
 454+ FB23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 454+ FB27 E3 E3 E3 E3
 454+ FB2B E3 E3 E3 E3
 454+ FB2F E3 E3 E3 E3
 455+ FB33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 455+ FB37 E3 E3 E3 E3
 455+ FB3B E3 E3 E3 E3
 455+ FB3F E3 E3 E3 E3
 456+ FB43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 456+ FB47 E3 E3 E3 E3
 456+ FB4B E3 E3 E3 E3
 456+ FB4F E3 E3 E3 E3
 457+ FB53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 457+ FB57 E3 E3 E3 E3
 457+ FB5B E3 E3 E3 E3
 457+ FB5F E3 E3 E3 E3
 458+ FB63
 459+ FB63
 460+ FB63
 461+ FB63              Sprite24:
 462+ FB63 E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 462+ FB67 E3 E3 E3 E3
 462+ FB6B E3 E3 E3 E3
 462+ FB6F E3 E3 E3 E3
 463+ FB73 B4 E3 E3 D8  	db  $B4, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 463+ FB77 E3 E3 E3 E3
 463+ FB7B E3 E3 E3 E3
 463+ FB7F E3 E3 E3 E3
 464+ FB83 D8 E3 E3 D8  	db  $D8, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 464+ FB87 E3 E3 E3 E3
 464+ FB8B E3 E3 E3 E3
 464+ FB8F E3 E3 E3 E3
 465+ FB93 E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 465+ FB97 E3 E3 E3 E3
 465+ FB9B E3 E3 E3 E3
 465+ FB9F E3 E3 E3 E3
 466+ FBA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 466+ FBA7 E3 E3 E3 E3
 466+ FBAB E3 E3 E3 E3
 466+ FBAF E3 E3 E3 E3
 467+ FBB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 467+ FBB7 E3 E3 E3 E3
 467+ FBBB E3 E3 E3 E3
 467+ FBBF E3 E3 E3 E3
 468+ FBC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 468+ FBC7 E3 E3 E3 E3
 468+ FBCB E3 E3 E3 E3
 468+ FBCF E3 E3 E3 E3
 469+ FBD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 469+ FBD7 E3 E3 E3 E3
 469+ FBDB E3 E3 E3 E3
 469+ FBDF E3 E3 E3 E3
 470+ FBE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 470+ FBE7 E3 E3 E3 E3
 470+ FBEB E3 E3 E3 E3
 470+ FBEF E3 E3 E3 E3
 471+ FBF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 471+ FBF7 E3 E3 E3 E3
 471+ FBFB E3 E3 E3 E3
 471+ FBFF E3 E3 E3 E3
 472+ FC03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 472+ FC07 E3 E3 E3 E3
 472+ FC0B E3 E3 E3 E3
 472+ FC0F E3 E3 E3 E3
 473+ FC13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 473+ FC17 E3 E3 E3 E3
 473+ FC1B E3 E3 E3 E3
 473+ FC1F E3 E3 E3 E3
 474+ FC23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 474+ FC27 E3 E3 E3 E3
 474+ FC2B E3 E3 E3 E3
 474+ FC2F E3 E3 E3 E3
 475+ FC33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 475+ FC37 E3 E3 E3 E3
 475+ FC3B E3 E3 E3 E3
 475+ FC3F E3 E3 E3 E3
 476+ FC43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 476+ FC47 E3 E3 E3 E3
 476+ FC4B E3 E3 E3 E3
 476+ FC4F E3 E3 E3 E3
 477+ FC53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 477+ FC57 E3 E3 E3 E3
 477+ FC5B E3 E3 E3 E3
 477+ FC5F E3 E3 E3 E3
 478+ FC63
 479+ FC63
 480+ FC63
 481+ FC63              Sprite25:
 482+ FC63 E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 482+ FC67 E3 E3 E3 E3
 482+ FC6B E3 E3 E3 E3
 482+ FC6F E3 E3 E3 E3
 483+ FC73 12 1A 1F 16  	db  $12, $1A, $1F, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 483+ FC77 E3 E3 E3 E3
 483+ FC7B E3 E3 E3 E3
 483+ FC7F E3 E3 E3 E3
 484+ FC83 16 1F 1A 12  	db  $16, $1F, $1A, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 484+ FC87 E3 E3 E3 E3
 484+ FC8B E3 E3 E3 E3
 484+ FC8F E3 E3 E3 E3
 485+ FC93 E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 485+ FC97 E3 E3 E3 E3
 485+ FC9B E3 E3 E3 E3
 485+ FC9F E3 E3 E3 E3
 486+ FCA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 486+ FCA7 E3 E3 E3 E3
 486+ FCAB E3 E3 E3 E3
 486+ FCAF E3 E3 E3 E3
 487+ FCB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 487+ FCB7 E3 E3 E3 E3
 487+ FCBB E3 E3 E3 E3
 487+ FCBF E3 E3 E3 E3
 488+ FCC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 488+ FCC7 E3 E3 E3 E3
 488+ FCCB E3 E3 E3 E3
 488+ FCCF E3 E3 E3 E3
 489+ FCD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 489+ FCD7 E3 E3 E3 E3
 489+ FCDB E3 E3 E3 E3
 489+ FCDF E3 E3 E3 E3
 490+ FCE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 490+ FCE7 E3 E3 E3 E3
 490+ FCEB E3 E3 E3 E3
 490+ FCEF E3 E3 E3 E3
 491+ FCF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 491+ FCF7 E3 E3 E3 E3
 491+ FCFB E3 E3 E3 E3
 491+ FCFF E3 E3 E3 E3
 492+ FD03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 492+ FD07 E3 E3 E3 E3
 492+ FD0B E3 E3 E3 E3
 492+ FD0F E3 E3 E3 E3
 493+ FD13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 493+ FD17 E3 E3 E3 E3
 493+ FD1B E3 E3 E3 E3
 493+ FD1F E3 E3 E3 E3
 494+ FD23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 494+ FD27 E3 E3 E3 E3
 494+ FD2B E3 E3 E3 E3
 494+ FD2F E3 E3 E3 E3
 495+ FD33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 495+ FD37 E3 E3 E3 E3
 495+ FD3B E3 E3 E3 E3
 495+ FD3F E3 E3 E3 E3
 496+ FD43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 496+ FD47 E3 E3 E3 E3
 496+ FD4B E3 E3 E3 E3
 496+ FD4F E3 E3 E3 E3
 497+ FD53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 497+ FD57 E3 E3 E3 E3
 497+ FD5B E3 E3 E3 E3
 497+ FD5F E3 E3 E3 E3
 498+ FD63
 499+ FD63
 500+ FD63
 501+ FD63              Sprite26:
 502+ FD63 E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 502+ FD67 E3 E3 E3 E3
 502+ FD6B E3 E3 E3 E3
 502+ FD6F E3 E3 E3 E3
 503+ FD73 12 E3 E3 16  	db  $12, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 503+ FD77 E3 E3 E3 E3
 503+ FD7B E3 E3 E3 E3
 503+ FD7F E3 E3 E3 E3
 504+ FD83 16 E3 E3 12  	db  $16, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 504+ FD87 E3 E3 E3 E3
 504+ FD8B E3 E3 E3 E3
 504+ FD8F E3 E3 E3 E3
 505+ FD93 E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 505+ FD97 E3 E3 E3 E3
 505+ FD9B E3 E3 E3 E3
 505+ FD9F E3 E3 E3 E3
 506+ FDA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 506+ FDA7 E3 E3 E3 E3
 506+ FDAB E3 E3 E3 E3
 506+ FDAF E3 E3 E3 E3
 507+ FDB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 507+ FDB7 E3 E3 E3 E3
 507+ FDBB E3 E3 E3 E3
 507+ FDBF E3 E3 E3 E3
 508+ FDC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 508+ FDC7 E3 E3 E3 E3
 508+ FDCB E3 E3 E3 E3
 508+ FDCF E3 E3 E3 E3
 509+ FDD3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 509+ FDD7 E3 E3 E3 E3
 509+ FDDB E3 E3 E3 E3
 509+ FDDF E3 E3 E3 E3
 510+ FDE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 510+ FDE7 E3 E3 E3 E3
 510+ FDEB E3 E3 E3 E3
 510+ FDEF E3 E3 E3 E3
 511+ FDF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 511+ FDF7 E3 E3 E3 E3
 511+ FDFB E3 E3 E3 E3
 511+ FDFF E3 E3 E3 E3
 512+ FE03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 512+ FE07 E3 E3 E3 E3
 512+ FE0B E3 E3 E3 E3
 512+ FE0F E3 E3 E3 E3
 513+ FE13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 513+ FE17 E3 E3 E3 E3
 513+ FE1B E3 E3 E3 E3
 513+ FE1F E3 E3 E3 E3
 514+ FE23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 514+ FE27 E3 E3 E3 E3
 514+ FE2B E3 E3 E3 E3
 514+ FE2F E3 E3 E3 E3
 515+ FE33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 515+ FE37 E3 E3 E3 E3
 515+ FE3B E3 E3 E3 E3
 515+ FE3F E3 E3 E3 E3
 516+ FE43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 516+ FE47 E3 E3 E3 E3
 516+ FE4B E3 E3 E3 E3
 516+ FE4F E3 E3 E3 E3
 517+ FE53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 517+ FE57 E3 E3 E3 E3
 517+ FE5B E3 E3 E3 E3
 517+ FE5F E3 E3 E3 E3
 518+ FE63
 519+ FE63
 520+ FE63
 521+ FE63              Sprite27:
 522+ FE63 E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 522+ FE67 E3 E3 E3 E3
 522+ FE6B E3 E3 E3 E3
 522+ FE6F E3 E3 E3 E3
 523+ FE73 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 523+ FE77 E3 E3 E3 E3
 523+ FE7B E3 E3 E3 E3
 523+ FE7F E3 E3 E3 E3
 524+ FE83 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 524+ FE87 E3 E3 E3 E3
 524+ FE8B E3 E3 E3 E3
 524+ FE8F E3 E3 E3 E3
 525+ FE93 E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 525+ FE97 E3 E3 E3 E3
 525+ FE9B E3 E3 E3 E3
 525+ FE9F E3 E3 E3 E3
 526+ FEA3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 526+ FEA7 E3 E3 E3 E3
 526+ FEAB E3 E3 E3 E3
 526+ FEAF E3 E3 E3 E3
 527+ FEB3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 527+ FEB7 E3 E3 E3 E3
 527+ FEBB E3 E3 E3 E3
 527+ FEBF E3 E3 E3 E3
 528+ FEC3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 528+ FEC7 E3 E3 E3 E3
 528+ FECB E3 E3 E3 E3
 528+ FECF E3 E3 E3 E3
 529+ FED3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 529+ FED7 E3 E3 E3 E3
 529+ FEDB E3 E3 E3 E3
 529+ FEDF E3 E3 E3 E3
 530+ FEE3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 530+ FEE7 E3 E3 E3 E3
 530+ FEEB E3 E3 E3 E3
 530+ FEEF E3 E3 E3 E3
 531+ FEF3 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 531+ FEF7 E3 E3 E3 E3
 531+ FEFB E3 E3 E3 E3
 531+ FEFF E3 E3 E3 E3
 532+ FF03 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 532+ FF07 E3 E3 E3 E3
 532+ FF0B E3 E3 E3 E3
 532+ FF0F E3 E3 E3 E3
 533+ FF13 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 533+ FF17 E3 E3 E3 E3
 533+ FF1B E3 E3 E3 E3
 533+ FF1F E3 E3 E3 E3
 534+ FF23 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 534+ FF27 E3 E3 E3 E3
 534+ FF2B E3 E3 E3 E3
 534+ FF2F E3 E3 E3 E3
 535+ FF33 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 535+ FF37 E3 E3 E3 E3
 535+ FF3B E3 E3 E3 E3
 535+ FF3F E3 E3 E3 E3
 536+ FF43 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 536+ FF47 E3 E3 E3 E3
 536+ FF4B E3 E3 E3 E3
 536+ FF4F E3 E3 E3 E3
 537+ FF53 E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 537+ FF57 E3 E3 E3 E3
 537+ FF5B E3 E3 E3 E3
 537+ FF5F E3 E3 E3 E3
 538+ FF63
# file closed: ./Layer3Sprites/SpriteSheet.asm
1261  FF63              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1262  FF63                  SLOT    ConsoleImageAddr
1263  FF63                  PAGE    BankConsole
1264  FF63              	ORG     ConsoleImageAddr, BankConsole
1265  E000
1266  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1267  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1268  E900                  SLOT    ViewFrontAddr
1269  E900                  PAGE    BankFrontView
1270  E900                  ORG     ViewFrontAddr
1271  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 FB 96                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 FC 96                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A F7 96                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 FA 96     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 F9 96                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 73 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 EB 96                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 EC 96                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A E9 96                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 EA 96     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 E8 96                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 74 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 02 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 34 E4                             call    sprite_cls_cursors
  55+ C082 CD 33 E1                             call    sprite_reticule
  56+ C085 CD C2 E1                             call    sprite_laser
  57+ C088 CD B8 E2                             call    sprite_laser_show
  58+ C08B                                      MMUSelectConsoleBank
  58+ C08B ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  59+ C08F 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  60+ C092 11 00 E0                             ld          de,ConsoleImageData
  61+ C095 01 00 08                             ld          bc, ScreenL1BottomLen
  62+ C098 CD C5 93                             call        memcopy_dma
  63+ C09B 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  64+ C09E 11 00 E8                             ld          de,ConsoleAttributes
  65+ C0A1 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  66+ C0A4 CD C5 93                             call        memcopy_dma
  67+ C0A7 CD 80 91                             call        InitialiseStars
  68+ C0AA AF                                   xor         a
  69+ C0AB 32 F3 97                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  70+ C0AE C9                                   ret
  71+ C0AF
  72+ C0AF
  73+ C0AF
  74+ C0AF
  75+ C0AF                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  76+ C0AF                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  77+ C0AF 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
  77+ C0B3 FF 61 2A 4C
  77+ C0B7 23 1F 52 27
  77+ C0BB 4F 14 1A 4F
  77+ C0BF 1A 3A 12 16
  77+ C0C3 40 15 20 1A
  77+ C0C7 12 26 19 1E
  77+ C0CB 09 1A 23 14
  77+ C0CF 05 10 12 25
  77+ C0D3 15 00 00 12
  78+ C0D7 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
  78+ C0DB FF 89 2D A0
  78+ C0DF 23 1F 96 28
  78+ C0E3 9D 38 1A A0
  78+ C0E7 24 AF 0A 16
  78+ C0EB 9C 25 C4 28
  78+ C0EF 12 C5 29 DF
  78+ C0F3 21 1A DF 21
  78+ C0F7 F5 1E 12 DF
  78+ C0FB 20 FE 2F 12
  79+ C0FF 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
  79+ C103 FF 59 59 40
  79+ C107 62 1F 4F 5C
  79+ C10B 40 48 19 41
  79+ C10F 4B 1E 46 16
  79+ C113 23 47 26 40
  79+ C117 12 43 5F 15
  79+ C11B 63 1A 1F 61
  79+ C11F 00 50 12 1F
  79+ C123 61 15 6E 12
  80+ C127 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
  80+ C12B FF 62 6E 40
  80+ C12F 73 1F 46 73
  80+ C133 49 7F 19 47
  80+ C137 72 3C 70 16
  80+ C13B 1E 78 14 7E
  80+ C13F 12 46 72 32
  80+ C143 78 1A 32 78
  80+ C147 1B 77 12 14
  80+ C14B 7D 0A 78 12
  81+ C14F 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
  81+ C153 FF 83 51 91
  81+ C157 62 1F 91 61
  81+ C15B 85 67 19 91
  81+ C15F 62 96 6E 16
  81+ C163 96 6D 9A 69
  81+ C167 12 96 6E 92
  81+ C16B 78 1A 91 78
  81+ C16F 8C 7E 12 93
  81+ C173 78 9F 7E 12
  82+ C177 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
  82+ C17B FF A1 66 AB
  82+ C17F 6C 1F A0 66
  82+ C183 AF 7F 19 AF
  82+ C187 7C C8 7A 16
  82+ C18B C8 79 DF 78
  82+ C18F 12 E0 78 E1
  82+ C193 7F 1A E0 77
  82+ C197 F5 74 12 F6
  82+ C19B 75 FE 7B 12
  83+ C19F 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
  83+ C1A3 FF 91 49 9E
  83+ C1A7 48 1F 9F 48
  83+ C1AB B3 40 19 9F
  83+ C1AF 49 B9 55 16
  83+ C1B3 B6 54 C5 4C
  83+ C1B7 12 C3 4B CF
  83+ C1BB 4F 1A CE 4F
  83+ C1BF F5 3F 12 CE
  83+ C1C3 50 F5 69 12
  84+ C1C7
  85+ C1C7              ; Draw line at hl for b lines
  86+ C1C7 E5 C5        DrawLighningLine:       push    hl,,bc
  87+ C1C9 4E                                   ld      c,(hl)
  88+ C1CA 23                                   inc     hl
  89+ C1CB 46                                   ld      b,(hl)
  90+ C1CC 23                                   inc     hl
  91+ C1CD 5E                                   ld      e,(hl)
  92+ C1CE 23                                   inc     hl
  93+ C1CF 56                                   ld      d,(hl)
  94+ C1D0 23                                   inc     hl
  95+ C1D1 7E                                   ld      a,(hl)          ; colour
  96+ C1D2 CD 09 E6                             call    l2_draw_diagonal
  97+ C1D5 C1 E1                                pop     hl,,bc
  98+ C1D7 3E 05                                ld      a,5
  99+ C1D9 ED 31                                add     hl,a
 100+ C1DB 10 EA                                djnz    DrawLighningLine
 101+ C1DD C9                                   ret
 102+ C1DE
 103+ C1DE              ;Loop though all lines
 104+ C1DE              ;   60$% chance of drawing a line, call draw line
 105+ C1DE              ;   go to next line
 106+ C1DE              ;repeat
 107+ C1DE 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 108+ C1E0 21 AF C0                             ld      hl,LightningLines
 109+ C1E3                                      MMUSelectLayer2
 109+ C1E3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C1E7                                      ;break
 111+ C1E7              ; above here select which lines table we will use
 112+ C1E7 C5 E5        .LineLoop:              push    bc,,hl
 113+ C1E9 CD 72 9C                             call    doRandom
 114+ C1EC FE 1E                                cp      30
 115+ C1EE 30 0C                                jr      nc,.NextLine
 116+ C1F0 CD 72 9C                             call    doRandom
 117+ C1F3 E6 07                                and     $07
 118+ C1F5 3C                                   inc     a
 119+ C1F6 47                                   ld      b,a
 120+ C1F7 E1                                   pop     hl
 121+ C1F8 E5                                   push    hl
 122+ C1F9 CD C7 C1                             call    DrawLighningLine
 123+ C1FC E1 C1        .NextLine:              pop     bc,,hl
 124+ C1FE 16 08                                ld      d,8
 125+ C200 1E 05                                ld      e,5
 126+ C202 ED 30                                mul
 127+ C204 19                                   add     hl,de
 128+ C205 10 E0                                djnz    .LineLoop
 129+ C207 3A F3 96                             ld      a,(HyperCircle)
 130+ C20A 57                                   ld      d,a
 131+ C20B 01 80 40                             ld      bc, $4080
 132+ C20E                                      ;break
 133+ C20E 1E 00                                ld      e,$00
 134+ C210 CD 0F E8                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 135+ C213 01 80 40                             ld      bc, $4080
 136+ C216 3A F3 96                             ld      a,(HyperCircle)
 137+ C219 3C                                   inc     a
 138+ C21A 57                                   ld      d,a
 139+ C21B 1E FF                                ld      e,$FF
 140+ C21D CD 56 E7                             call    l2_draw_circle
 141+ C220 3A F3 96                             ld      a,(HyperCircle)
 142+ C223 3C                                   inc     a
 143+ C224 3C                                   inc     a
 144+ C225 FE 40                                cp      64
 145+ C227 D0                                   ret     nc
 146+ C228 32 F3 96                             ld      (HyperCircle),a
 147+ C22B                                      SetCarryFlag
 147+ C22B 37          >                        scf
 148+ C22C C9                                   ret
 149+ C22D
 150+ C22D
 151+ C22D              draw_hyperspace:        MMUSelectLayer1
 151+ C22D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C231 CD 80 E0                             call    l1_cls
 153+ C234 CD 9A E0                             call    l1_attr_cls
 154+ C237                                      MMUSelectLayer2
 154+ C237 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 155+ C23B CD 02 E0                             call     asm_l2_double_buffer_on
 156+ C23E                                      MMUSelectSpriteBank
 156+ C23E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 157+ C242 CD 34 E4                             call    sprite_cls_cursors
 158+ C245                                      MMUSelectConsoleBank
 158+ C245 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 159+ C249 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 160+ C24C 11 00 E0                             ld          de,ConsoleImageData
 161+ C24F 01 00 08                             ld          bc, ScreenL1BottomLen
 162+ C252 CD C5 93                             call        memcopy_dma
 163+ C255 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 164+ C258 11 00 E8                             ld          de,ConsoleAttributes
 165+ C25B 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 166+ C25E CD C5 93                             call        memcopy_dma
 167+ C261 CD 8F 91                             call        InitialiseHyperStars
 168+ C264 AF                                   xor         a
 169+ C265 32 F3 97                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 170+ C268 3E 02                                ld          a,2
 171+ C26A 32 F3 96                             ld          (HyperCircle),a
 172+ C26D 3E FC                                ld          a,$FC
 173+ C26F 32 F3 97                             ld          (DockedFlag),a
 174+ C272 C9                                   ret
 175+ C273
 176+ C273
 177+ C273              loop_hyperspace
 178+ C273
 179+ C273              dampenRate:             equ     $04
 180+ C273 04           dampenRcounter:         DB      dampenRate
 181+ C274 04           dampenPcounter:         DB      dampenRate
 182+ C275 AF           input_front_view:       xor         a
 183+ C276 2A 2A 94                             ld      hl,(addr_Pressed_Accellerate)
 184+ C279 7E                                   ld      a,(hl)
 185+ C27A                                      JumpIfAIsZero     TestDecellerate
 185+ C27A A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 185+ C27B CA 97 C2    >                        jp	z, TestDecellerate
 186+ C27E 3A DE 97                             ld      a,(SHIPMAXSPEED)
 187+ C281 57                                   ld      d,a
 188+ C282 3A DF 97                             ld      a,(DELTA)
 189+ C285                                      JumpIfAGTENusng d,TestDecellerate
 189+ C285 BA          >                        cp     d
 189+ C286 D2 97 C2    >                        jp		nc,TestDecellerate
 190+ C289 3C                                   inc     a
 191+ C28A 32 DF 97                             ld      (DELTA),a
 192+ C28D 2A E0 97                             ld      hl,(DELT4Lo)
 193+ C290 ED 34 04 00                          add     hl,4
 194+ C294 22 E0 97                             ld      (DELT4Lo),hl
 195+ C297 2A 2C 94     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
 196+ C29A 7E                                   ld      a,(hl)
 197+ C29B                                      JumpIfAIsZero   TestLeftPressed
 197+ C29B A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 197+ C29C CA B4 C2    >                        jp	z, TestLeftPressed
 198+ C29F 3A DF 97                             ld      a,(DELTA)
 199+ C2A2                                      JumpIfAIsZero   TestLeftPressed
 199+ C2A2 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 199+ C2A3 CA B4 C2    >                        jp	z, TestLeftPressed
 200+ C2A6 3D                                   dec     a
 201+ C2A7 32 DF 97                             ld      (DELTA),a
 202+ C2AA 2A E0 97                             ld      hl,(DELT4Lo)
 203+ C2AD 2B                                   dec     hl
 204+ C2AE 2B                                   dec     hl
 205+ C2AF 2B                                   dec     hl
 206+ C2B0 2B                                   dec     hl
 207+ C2B1 22 E0 97                             ld      (DELT4Lo),hl
 208+ C2B4 2A 22 94     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
 209+ C2B7 7E                                   ld      a,(hl)
 210+ C2B8                                      JumpIfAIsZero   TestRightPressed
 210+ C2B8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 210+ C2B9 CA CF C2    >                        jp	z, TestRightPressed
 211+ C2BC 3A F7 96                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 212+ C2BF 21 FE 96                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 213+ C2C2 BE                                   cp      (hl)
 214+ C2C3 28 0A                                jr      z,TestRightPressed
 215+ C2C5                                      ;break
 216+ C2C5 3D                                   dec     a                                   ; increase joystick roll
 217+ C2C6 32 F7 96                             ld      (JSTX),a
 218+ C2C9 CD 10 C0                             call    draw_front_calc_alpha
 219+ C2CC C3 04 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 220+ C2CF 2A 24 94     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 221+ C2D2 7E                                   ld      a,(hl)
 222+ C2D3                                      JumpIfAIsZero   .DampenRoll
 222+ C2D3 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 222+ C2D4 CA EA C2    >                        jp	z, .DampenRoll
 223+ C2D7 3A F7 96                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 224+ C2DA 21 FD 96                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 225+ C2DD BE                                   cp      (hl)
 226+ C2DE 28 24                                jr      z,TestDivePressed                   ; if its held then we don't dampen
 227+ C2E0                                      ;break
 228+ C2E0 3C                                   inc     a                                   ; increase joystick roll
 229+ C2E1 32 F7 96     .UpdateAlphRoll:        ld      (JSTX),a
 230+ C2E4 CD 10 C0                             call    draw_front_calc_alpha
 231+ C2E7 C3 04 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 232+ C2EA 21 73 C2     .DampenRoll:            ld      hl,dampenRcounter
 233+ C2ED 35                                   dec     (hl)
 234+ C2EE 20 14                                jr      nz,TestDivePressed
 235+ C2F0 3E 04                                ld      a,dampenRate
 236+ C2F2 77                                   ld      (hl),a
 237+ C2F3 3A F7 96                             ld      a,(JSTX)
 238+ C2F6 FE 00                                cp      0
 239+ C2F8 28 0A                                jr      z, TestDivePressed
 240+ C2FA CB 7F                                bit     7,a
 241+ C2FC 28 03                                jr      z,.PosRollDampen
 242+ C2FE 3C           .NegRollDampen:         inc     a
 243+ C2FF 18 01                                jr      .ApplyRollDampen
 244+ C301 3D           .PosRollDampen:         dec     a
 245+ C302 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 246+ C304              ; Dive and Climb input
 247+ C304 2A 26 94     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 248+ C307 7E                                   ld      a,(hl)
 249+ C308                                      JumpIfAIsZero   TestClimbPressed
 249+ C308 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C309 CA 1F C3    >                        jp	z, TestClimbPressed
 250+ C30C 3A E9 96                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 251+ C30F 21 EE 96                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 252+ C312 BE                                   cp      (hl)
 253+ C313 28 0A                                jr      z,TestClimbPressed
 254+ C315                                      ;break
 255+ C315 3D                                   dec     a                                   ; increase joystick roll
 256+ C316 32 E9 96                             ld      (JSTY),a
 257+ C319 CD 3D C0                             call    draw_front_calc_beta
 258+ C31C C3 54 C3                             jp      ForwardCursorKeysDone
 259+ C31F 2A 28 94     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 260+ C322 7E                                   ld      a,(hl)
 261+ C323                                      JumpIfAIsZero   .DampenPitch
 261+ C323 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C324 CA 3A C3    >                        jp	z, .DampenPitch
 262+ C327 3A E9 96                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 263+ C32A 21 ED 96                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 264+ C32D BE                                   cp      (hl)
 265+ C32E 28 24                                jr      z,ForwardCursorKeysDone
 266+ C330 3C                                   inc     a                                   ; increase joystick roll
 267+ C331 32 E9 96     .UpdateBetaPitch:       ld      (JSTY),a
 268+ C334 CD 3D C0                             call    draw_front_calc_beta
 269+ C337 C3 54 C3                             jp      ForwardCursorKeysDone
 270+ C33A 21 74 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 271+ C33D 35                                   dec     (hl)
 272+ C33E 20 14                                jr      nz,ForwardCursorKeysDone
 273+ C340 3E 04                                ld      a,dampenRate
 274+ C342 77                                   ld      (hl),a
 275+ C343 3A E9 96                             ld      a,(JSTY)
 276+ C346 FE 00                                cp      0
 277+ C348 28 0A                                jr      z,ForwardCursorKeysDone
 278+ C34A CB 7F                                bit     7,a
 279+ C34C 28 03                                jr      z,.PosPitchDampen
 280+ C34E 3C           .NegPitchDampen:        inc     a
 281+ C34F 18 01                                jr      .ApplyPitchDampen
 282+ C351 3D           .PosPitchDampen:        dec     a
 283+ C352 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 284+ C354              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 285+ C354              ; be in flight and they have to force a forward view when hyperspace is pressed
 286+ C354              ; We won't do galatic here, but for other views force to forward view
 287+ C354 3E 24        ForwardCursorKeysDone:  ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 288+ C356 CD 25 95                             call    is_key_pressed
 289+ C359 20 48                                jr      nz,.NotHyperspace
 290+ C35B              ; If we are in hyperspace countdown then test for hyperspace
 291+ C35B 2A F1 96                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 292+ C35E 7C                                   ld      a,h                                 ; hyperspace
 293+ C35F B5                                   or      l                                   ; .
 294+ C360 20 41                                jr      nz,.CancelHyperspace                ; .
 295+ C362              ; check selected target if we finf one then after gettting galaxy at bc a=0 if not found
 296+ C362 ED 5B E2 98                          ld      de,(PresentSystemX)
 297+ C366 2A E4 98                             ld      hl,(TargetPlanetX)
 298+ C369 CD AC AB                             call    compare16HLDE
 299+ C36C 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 300+ C36E 3A CF 98                             ld      a,(Galaxy)
 301+ C371                                      MMUSelectGalaxyA
 301+ C371 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C374 ED 4B E4 98                          ld      bc,(TargetPlanetX)
 303+ C378 CD B7 FA                             call    galaxy_name_at_bc
 304+ C37B FE 00                                cp      0
 305+ C37D 28 24                                jr      z,.NotHyperspace
 306+ C37F              ; check fuel is sufficient
 307+ C37F ED 4B E2 98                          ld      bc,(PresentSystemX)
 308+ C383 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 309+ C387 ED 4B E4 98                          ld      bc,(TargetPlanetX)
 310+ C38B ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 311+ C38F CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 312+ C392 7C                                   ld      a,h
 313+ C393 A7                                   and     a
 314+ C394 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 315+ C396 3A 1B 9C                             ld      a,(Fuel)
 316+ C399                                      JumpIfALTNusng    l, .InsufficientFuel
 316+ C399 BD          >                        cp      l
 316+ C39A DA A3 C3    >                        jp		c, .InsufficientFuel
 317+ C39D              ; set up timer countdown
 318+ C39D 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 319+ C3A0 22 F1 96                             ld      (InnerHyperCount),hl                ; .
 320+ C3A3              .CancelHyperspace
 321+ C3A3              .NoTargetSelected
 322+ C3A3              .InsufficientFuel
 323+ C3A3              .NotHyperspace:
 324+ C3A3 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 325+ C3A5 CD 25 95                             call    is_key_pressed
 326+ C3A8 20 1C                                jr      nz,.NotMissileLaunch
 327+ C3AA                                      AnyMissilesLeft
 327+ C3AA 3A 4F 98    >                        ld      a,(NbrMissiles)
 327+ C3AD A7          >                        and     a
 328+ C3AE 28 16                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 329+ C3B0                                      IsMissileLockedOn
 329+ C3B0 3A DB 9A    >                        ld      a,(MissileTarget)
 329+ C3B3 FE FF       >                        cp      $FF
 329+ C3B5 C8          >                        ret     z
 329+ C3B6             >                        ReturnIfSlotAEmpty                  ; if target slot is empty
 329+ C3B6 21 B4 98    >                        ld      hl,UniverseSlotList
 329+ C3B9 ED 31       >                        add     hl,a
 329+ C3BB 7E          >                        ld      a,(hl)
 329+ C3BC 3C          >                        inc     a
 329+ C3BD C8          >                        ret     z           ; if slot was ff inc would make it 0
 329+ C3BE 3D          >                        dec     a           ; get original value back for later
 329+ C3BF C9          >                        ret                                 ; will return as nz now
 330+ C3C0 28 04                                jr      z,.MissileNotLocked
 331+ C3C2              .MissileLaunch:         SetMemTrue  MissileLaunchFlag
 331+ C3C2 AF          >                        xor     a
 331+ C3C3 32 DC 9A    >                        ld      (MissileLaunchFlag),a
 332+ C3C6              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 333+ C3C6              .NotMissileLaunch:
 334+ C3C6 C9                                   ret
 335+ C3C7
 336+ C3C7
 337+ C3C7
 338+ C3C7
 339+ C3C7
 340+ C3C7
 341+ C3C7
# file closed: ./Views/Front_View.asm
1272  C3C7              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1273  C3C7                  SLOT    MenuStatusAddr
1274  C3C7                  PAGE    BankMenuStatus
1275  C3C7                  ORG     MenuStatusAddr
1276  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 04 B5  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 DD 9A  						DW $0290,CommanderName
   5+ C018 08 0B 18 B5  						DW $0B08,txt_present_system
   6+ C01C 08 13 2B B5  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 3E B5  						DW $1B08,txt_condition
   8+ C024 08 23 4C B5  						DW $2308,txt_fuel
   9+ C028 08 2B 5A B5  						DW $2B08,txt_cash
  10+ C02C 08 33 68 B5  						DW $3308,txt_legal_status
  11+ C030 08 3B 76 B5  						DW $3B08,txt_rating
  12+ C034 08 4B 84 B5  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/l2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/l2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/l2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A 19 9C     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A 17 9C                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A CF 98     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 9F 93                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 58 9C                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A CF 98     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B E2 98                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A CF 98     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B E4 98                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 90 9E                             ld		hl, ConditionNameIdx
 223+ CE45 CD 92 9F                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD E1 B5     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 8F B5                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 50 98     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 71 A0                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 80 A0     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 77 A0     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 63 98  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 9D 9F                             call	getRankIndex
 260+ CEA9 21 7C 9F                             ld		hl, RankingNameIdx
 261+ CEAC CD 92 9F                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 80 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c, .FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD C8 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A F3 97     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 18                                jr			z,.PlayerIsDocked
 304+ CEFF 3A E7 96     .PlayerNotDocked:	    ld          a,(SpaceStationSafeZone)
 305+ CF02 FE 00                                cp          0
 306+ CF04 C8                                   ret         z
 307+ CF05 CD D4 9B                             call        AreShipsPresent
 308+ CF08 38 03                                jr          c,.NoShipsAround
 309+ CF0A 3E 01                                ld          a,1
 310+ CF0C C9                                   ret
 311+ CF0D 3A D8 9A     .NoShipsAround:         ld			a,(PlayerEnergy)
 312+ CF10 FE 80                                cp			$80
 313+ CF12 3E 01                                ld          a,1
 314+ CF14 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 315+ CF16 C9                                   ret
 316+ CF17 AF           .PlayerIsDocked:        xor			a
 317+ CF18 C9                                   ret
 318+ CF19
 319+ CF19              ;;;PrintEquipment:         ld		a,(hl)
 320+ CF19              ;;;                        cp		0
 321+ CF19              ;;;                        ret		z
 322+ CF19              ;;;                        ld		a,b
 323+ CF19              ;;;PrintEquipmentDirect:	call	expandTokenToString
 324+ CF19              ;;;                        ld		hl,TextBuffer
 325+ CF19              ;;;                        ld		de,(equipment_cursor)
 326+ CF19              ;;;                        call	l1_print_at
 327+ CF19              ;;;                        ld		bc,(equipment_cursor)
 328+ CF19              ;;;                        ld		a,b
 329+ CF19              ;;;                        add		a,8
 330+ CF19              ;;;                        ld		b,a
 331+ CF19              ;;;                        ld		(equipment_cursor),bc
 332+ CF19              ;;;                        cp		equipmax_row
 333+ CF19              ;;;                        jr		c,.SkipColUpdate
 334+ CF19              ;;;.ColUpdate:             ld		hl,equipment_position2
 335+ CF19              ;;;                        ld		(equipment_cursor),hl
 336+ CF19              ;;;                        ret
 337+ CF19              ;;;.SkipColUpdate:	        ld		a,b
 338+ CF19              ;;;                        ld		(equipment_cursor+1), a
 339+ CF19              ;;;                        ret
 340+ CF19
 341+ CF19              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF19
   2++CF19                  MMUSelectLayer1
   2++CF19 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF1D CD 80 E0     	call	l1_cls
   4++CF20 3E 07        	ld		a,7
   5++CF22 CD 9B E0     	call	l1_attr_cls_to_a
   6++CF25                  MMUSelectLayer2
   6++CF25 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF29 CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF2C CD C9 E0     	call	l2_cls	; Get some space
   9++CF2F              	MMUSelectSpriteBank
   9++CF2F ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF33 CD 34 E4     	call    sprite_cls_cursors
  11++CF36
  12++CF36
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 342+ CF36 3E 08                                ld		a,8
 343+ CF38 32 EF 97                             ld		(MenuIdMax),a
 344+ CF3B 01 01 01     .Drawbox:               ld		bc,$0101
 345+ CF3E 11 FD BE                             ld		de,$BEFD
 346+ CF41 3E C0                                ld		a,$C0
 347+ CF43                                      MMUSelectLayer2
 347+ CF43 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 348+ CF47 CD F6 E1                             call	l2_draw_box
 349+ CF4A 01 01 0A                             ld		bc,$0A01
 350+ CF4D 11 C0 FE                             ld		de,$FEC0
 351+ CF50 CD 60 E2                             call	l2_draw_horz_line
 352+ CF53 CD 95 CD     .equipment              call    STAT_buffer_list
 353+ CF56 CD BC CE                             call    draw_STAT_items
 354+ CF59 CD F3 CD                             call    draw_STAT_maintext
 355+ CF5C C9                                   ret
 356+ CF5D
 357+ CF5D              ;----------------------------------------------------------------------------------------------------------------------------------
 358+ CF5D              ; Handles all the input whilst in the market menu
 359+ CF5D 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 360+ CF5F CD 25 95                             call    is_key_pressed
 361+ CF62 CC 6E CF                             call    z,STAT_UpPressed
 362+ CF65 3E 4C                                ld      a,c_Pressed_CursorDown
 363+ CF67 CD 25 95                             call    is_key_pressed
 364+ CF6A CC 80 CF                             call    z,STAT_DownPressed
 365+ CF6D C9                                   ret
 366+ CF6E
 367+ CF6E              ;----------------------------------------------------------------------------------------------------------------------------------
 368+ CF6E AF           STAT_UpPressed:         xor     a
 369+ CF6F 32 3A C0                             ld      (STAT_selected_row),a
 370+ CF72 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 371+ CF75 FE 00                                cp      0
 372+ CF77 C8                                   ret     z
 373+ CF78 3D                                   dec     a           ; chjange later to buffering step back 1
 374+ CF79 32 3B C0                             ld      (STAT_current_topItem),a
 375+ CF7C CD BC CE                             call    draw_STAT_items
 376+ CF7F C9                                   ret
 377+ CF80              ;----------------------------------------------------------------------------------------------------------------------------------
 378+ CF80 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 379+ CF82 32 3A C0                             ld      (STAT_selected_row),a
 380+ CF85 3A 3C C0                             ld      a,(STAT_current_end)
 381+ CF88 47                                   ld      b,a                             ; This check is if the current list is < one screen
 382+ CF89 05                                   dec     b
 383+ CF8A 3A 3A C0                             ld      a,(STAT_selected_row)
 384+ CF8D B8                                   cp      b
 385+ CF8E C8                                   ret     z
 386+ CF8F FE 09                                cp      STAT_eqip_window_len-1
 387+ CF91 28 05                                jr      z, .check_scroll_down
 388+ CF93 21 3A C0                             ld      hl,STAT_selected_row
 389+ CF96 34                                   inc     (hl)
 390+ CF97 C9                                   ret
 391+ CF98 47           .check_scroll_down:     ld      b,a
 392+ CF99 3A 3B C0                             ld      a,(STAT_current_topItem)
 393+ CF9C 80                                   add     b
 394+ CF9D 3C                                   inc     a
 395+ CF9E 21 3C C0                             ld      hl,STAT_current_end
 396+ CFA1                                      ReturnIfAGTEusng      (hl)
 396+ CFA1 BE          >                        cp    (hl)
 396+ CFA2 D0          >                        ret	 nc
 397+ CFA3 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 398+ CFA6 34                                   inc     (hl)
 399+ CFA7 CD BC CE                             call    draw_STAT_items
 400+ CFAA C9                                   ret
 401+ CFAB
# file closed: ./Menus/status_menu.asm
1277  CFAB
1278  CFAB              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1279  CFAB
1280  CFAB                  SLOT    MenuEquipSAddr
1281  CFAB                  PAGE    BankMenuEquipS
1282  CFAB                  ORG     MenuEquipSAddr
1283  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 DF A4  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 19 9C     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 17 9C                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 9F 93                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 80 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 9B E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 34 E4     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 EF 97                             ld      (MenuIdMax),a
 380+ D40C 3A CF 98     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B E2 98                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 60 E2                             call	l2_draw_horz_line
 398+ D441 3A CF 98     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 5A A4                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 25 95                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 25 95                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 25 95                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 25 95                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A CF 98     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 1E A6                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 56 9C                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 1C 9C     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 1E A6                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A CF 98     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 4F 98     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A 19 9C     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A 17 9C                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 56 9C     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 1B 9C    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 4F 98     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 1C 9C                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 1E A6                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 56 9C                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 56 9C     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 1C 9C                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 31 A6                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1284  D651
1285  D651
1286  D651                  SLOT    LaunchShipAddr
1287  D651                  PAGE    BankLaunchShip
1288  D651                  ORG     LaunchShipAddr
1289  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 53 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 53 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 09 E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 09 E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD C5 93                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD C5 93                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 34 E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A DE 97    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 DF 97    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 E0 97 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 DF 97    >                        ld      (DELTA),a
 160+ C1E9 32 E0 97    >                        ld      (DELT4Lo),a
 160+ C1EC 32 E1 97    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 F3 97                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 34 E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 02 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 72 E0                             ld      (l2_cls_byte),a
 176+ C212 CD 92 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 72 E0                             ld      (l2_cls_byte),a
 179+ C21A CD BE E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD DD E0                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 72 E0                             ld      (l2_cls_byte),a
 186+ C22F CD 92 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 72 E0                             ld      (l2_cls_byte),a
 189+ C237 CD BE E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 DF 97    >                        ld      (DELTA),a
 200+ C257 32 E0 97    >                        ld      (DELT4Lo),a
 200+ C25A 32 E1 97    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 F3 97                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 F3 97                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E6 E1                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F6 E1                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 E3 86    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1290  C2CD
1291  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1292  C2CD                  SLOT    UniverseBankAddr
1293  C2CD                  PAGE    BankUNIVDATA0
1294  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1295  C000                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  12++C015              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  13++C015 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  14++C016 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  15++C017 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  16++C018 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  17++C019              ; -- Metadata for ship to help with bank managment
  18++C019 00           UBnKShipType                DB  0
  19++C01A 00           UbnKShipBankNbr             DB  0
  20++C01B 00           UBnkShipModelBank           DB  0
  21++C01C 00           UBnkShipModelNbr            DB  0
  22++C01D              ; -- Ship AI data
  23++C01D 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  24++C01E 00           UBnKMissileTarget           DB  0                       ; This is the bank number for the target from 0 to n if the missile is not hostile to us
  25++C01F 00           UBnKspeed                   DB  0                       ; INWK +27
  26++C020 00           UBnKAccel                   DB  0                       ; INWK +28
  27++C021 00           UBnKRotXCounter             DB  0                       ; INWK +29
  28++C022 00           UBnKRotZCounter             DB  0                       ; INWK +30
  29++C023 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  30++C024              ; Flags work as follows:
  31++C024              ; 7 - Flag ship to be killed with debris
  32++C024              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  33++C024              ; 5 - Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  34++C024              ;     linger can be done by not erasing ship unit missile equeue handled
  35++C024              ; 4 -
  36++C024              ; 3 - Display state - Plot as a Dot
  37++C024              ; 2 - Nbr of Missiles bit 2
  38++C024              ; 1 - Nbr of Missiles bit 1
  39++C024              ; 0 - Nbr of Missiles bit 0
  40++C024 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  41++C025 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  42++C026 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  43++C027 00           UbnKEnergy                  DB  0                       ; INWK +35
  44++C028              UBnKRuntimeSize             EQU $-UBnKShipType
  45++C028              ; Flags work as follows:
  46++C028              ;Bit	Description
  47++C028              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  48++C028              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  49++C028              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  50++C028              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  51++C028              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  52++C028              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  53++C028              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  54++C028              ;                       Hostile ships will attack us on sight; there are quite a few of them
  55++C028              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  56++C028              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  57++C028              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  58++C028              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  59++C028              ;#4	Docking flag        * 0 = not docking * 1 = docking
  60++C028              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  61++C028              ;                       This flag is randomly set for traders when they are spawned
  62++C028              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  63++C028              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  64++C028              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  65++C028              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  66++C028              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  67++C028              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  68++C028              ;                       Ships that are cops: Viper, Transporter
  69++C028              ;#7	Scooped, docked, escape pod flag
  70++C028              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  71++C028              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  72++C028              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  73++C028              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  74++C028              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  75++C028 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  76++C02A              UBnkrotmatSidev             equ UBnkrotmatSidevX
  77++C02A 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  78++C02C 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  79++C02E 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  80++C030              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  81++C030 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  82++C032 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  83++C034 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  84++C036              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  85++C036 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  86++C038 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  87++C03A
# file closed: ././Universe/Ships/AIRuntimeData.asm
  20+ C03A              ; moved to runtime asm
  21+ C03A              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  22+ C03A              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  23+ C03A
  24+ C03A              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  25+ C03A              ;                    [roofv x y z ] roof vector (up)
  26+ C03A              ;                    [sidev x y z ] side vector (right)
  27+ C03A              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  28+ C03A              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  29+ C03A 00           univRAT      DB  0               ; 99
  30+ C03B 00           univRAT2     DB  0               ; 9A
  31+ C03C 00           univRAT2Val  DB  0               ; 9A
  32+ C03D
  33+ C03D                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C03D              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C03D 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C03F              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C03F 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C041 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C043 00 00        UBnkTransmatRoofvX          DW 0
   7++C045              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C045 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C047 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C049 00 00        UBnkTransmatNosevX          DW 0
  11++C04B              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C04B 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C04D 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C04F 00 00        UbnkTransmatTransX          DW 0
  15++C051 00 00        UbnkTransmatTransY          DW 0
  16++C053 00 00        UbnkTransmatTransZ          DW 0
  17++C055              XX16                        equ UBnkTransmatSidev
  18++C055              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C055 00 00        UbnkTransInvRow0x0          DW 0
  20++C057 00 00        UbnkTransInvRow0x1          DW 0
  21++C059 00 00        UbnkTransInvRow0x2          DW 0
  22++C05B 00 00        UbnkTransInvRow0x3          DW 0
  23++C05D 00 00        UbnkTransInvRow1y0          DW 0
  24++C05F 00 00        UbnkTransInvRow1y1          DW 0
  25++C061 00 00        UbnkTransInvRow1y2          DW 0
  26++C063 00 00        UbnkTransInvRow1y3          DW 0
  27++C065 00 00        UbnkTransInvRow2z0          DW 0
  28++C067 00 00        UbnkTransInvRow2z1          DW 0
  29++C069 00 00        UbnkTransInvRow2z2          DW 0
  30++C06B 00 00        UbnkTransInvRow2z3          DW 0
  31++C06D
  32++C06D              XX16Inv             equ UbnkTransInvRow0x0
  33++C06D
# file closed: ././Universe/Ships/XX16Vars.asm
  34+ C06D                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C06D              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           UbnkProjxLo                 DB  0
   3++C06E 00           UbnkProjxHi                 DB  0
   4++C06F 00           UbnkProjxSgn                DB  0
   5++C070              UbnkProjx                   EQU UbnkProjxLo
   6++C070 00           UbnkProjyLo                 DB  0
   7++C071 00           UbnkProjyHi                 DB  0
   8++C072 00           UbnkProjySgn                DB  0
   9++C073              UbnkProjy                   EQU UbnkProjyLo
  10++C073 00           UbnkProjzLo                 DB  0
  11++C074 00           UbnkProjzHi                 DB  0
  12++C075 00           UbnkProjzSgn                DB  0
  13++C076              UbnkProjz                   EQU UbnkProjzLo
  14++C076              XX25                        EQU UbnkProjxLo
  15++C076
# file closed: ././Universe/Ships/XX25Vars.asm
  35+ C076                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C076              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C076 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C077 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C078 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C079              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C079 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C07A 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C07B 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C07C              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C07C 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C07D 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C07E 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C07F              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C07F              XX18                        equ UBnkDrawCam0xLo
  15++C07F
# file closed: ././Universe/Ships/XX18Vars.asm
  36+ C07F
  37+ C07F              ; Used to make 16 bit reads a little cleaner in source code
  38+ C07F 00 00 00     UbnkZPoint                  DS  3
  39+ C082              UbnkZPointLo                equ UbnkZPoint
  40+ C082              UbnkZPointHi                equ UbnkZPoint+1
  41+ C082              UbnkZPointSign              equ UbnkZPoint+2
  42+ C082                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C082              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C082 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C083 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C084 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C085 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C086 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C087 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C088
   9++C088              XX15                        equ UBnkXScaled
  10++C088              XX15VecX                    equ XX15
  11++C088              XX15VecY                    equ XX15+1
  12++C088              XX15VecZ                    equ XX15+2
  13++C088              UbnkXPoint                  equ XX15
  14++C088              UbnkXPointLo                equ XX15+0
  15++C088              UbnkXPointHi                equ XX15+1
  16++C088              UbnkXPointSign              equ XX15+2
  17++C088              UbnkYPoint                  equ XX15+3
  18++C088              UbnkYPointLo                equ XX15+3
  19++C088              UbnkYPointHi                equ XX15+4
  20++C088              UbnkYPointSign              equ XX15+5
  21++C088              ; Repurposed XX15 pre clip plines
  22++C088              UbnkPreClipX1               equ XX15+0
  23++C088              UbnkPreClipY1               equ XX15+2
  24++C088              UbnkPreClipX2               equ XX15+4
  25++C088              UbnkPreClipY2               equ XX15+6
  26++C088              ; Repurposed XX15 post clip lines
  27++C088              UBnkNewX1                   equ XX15+0
  28++C088              UBnkNewY1                   equ XX15+1
  29++C088              UBnkNewX2                   equ XX15+2
  30++C088              UBnkNewY2                   equ XX15+3
  31++C088              ; Repurposed XX15
  32++C088              regXX15fx                   equ UBnkXScaled
  33++C088              regXX15fxSgn                equ UBnkXScaledSign
  34++C088              regXX15fy                   equ UBnkYScaled
  35++C088              regXX15fySgn                equ UBnkYScaledSign
  36++C088              regXX15fz                   equ UBnkZScaled
  37++C088              regXX15fzSgn                equ UBnkZScaledSign
  38++C088              ; Repurposed XX15
  39++C088              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C088              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C088              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C088              ; After clipping the coords are two 8 bit pairs
  43++C088              UBnkPoint1Clipped           equ UBnkXScaled
  44++C088              UBnkPoint2Clipped           equ UBnkYScaled
  45++C088              ; Repurposed XX15 when plotting lines
  46++C088              ; Repurposed XX15 before calling clip routine
  47++C088              UBnkX1                      equ XX15
  48++C088              UBnKx1Lo                    equ XX15
  49++C088              UBnKx1Hi                    equ XX15+1
  50++C088              UBnkY1                      equ XX15+2
  51++C088              UbnKy1Lo                    equ XX15+2
  52++C088              UBnkY1Hi                    equ XX15+3
  53++C088              UBnkX2                      equ XX15+4
  54++C088              UBnkX2Lo                    equ XX15+4
  55++C088              UBnkX2Hi                    equ XX15+5
  56++C088
# file closed: ././Universe/Ships/XX15Vars.asm
  43+ C088                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C088              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C088              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C088 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C089 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C08A 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C08B 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C08C 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C08D 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C08E 00 00 00...  XX12Save                    DS  6
  10++C094 00 00 00...  XX12Save2                   DS  6
  11++C09A              XX12                        equ UBnkXX12xLo
  12++C09A              varXX12                     equ UBnkXX12xLo
  13++C09A              ; Repurposed XX12 when plotting lines
  14++C09A              UBnkY2                      equ XX12+0
  15++C09A              UbnKy2Lo                    equ XX12+0
  16++C09A              UBnkY2Hi                    equ XX12+1
  17++C09A              UBnkDeltaXLo                equ XX12+2
  18++C09A              UBnkDeltaXHi                equ XX12+3
  19++C09A              UBnkDeltaYLo                equ XX12+4
  20++C09A              UBnkDeltaYHi                equ XX12+5
  21++C09A              UbnkGradient                equ XX12+2
  22++C09A              UBnkTemp1                   equ XX12+2
  23++C09A              UBnkTemp1Lo                 equ XX12+2
  24++C09A              UBnkTemp1Hi                 equ XX12+3
  25++C09A              UBnkTemp2                   equ XX12+3
  26++C09A              UBnkTemp2Lo                 equ XX12+3
  27++C09A              UBnkTemp2Hi                 equ XX12+4
  28++C09A
# file closed: ././Universe/Ships/XX12Vars.asm
  44+ C09A
  45+ C09A
  46+ C09A              ; Post clipping the results are now 8 bit
  47+ C09A 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  48+ C09B 00           UBnKDrawAsDot               DB  0               ; if 0 then OK, if 1 then just draw dot of line heap
  49+ C09C 00           UBnkProjectedY              DB  0
  50+ C09D 00           UBnkProjectedX              DB  0
  51+ C09E              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  52+ C09E 00 00 00...  XX15Save                    DS  8
  53+ C0A6 00 00 00...  XX15Save2                   DS  8
  54+ C0AE 00           VarBackface                 DB 0
  55+ C0AF              ; Heap (or array) information for lines and normals
  56+ C0AF              ; Coords are stored XY,XY,XY,XY
  57+ C0AF              ; Normals
  58+ C0AF              ; This needs re-oprganising now.
  59+ C0AF              ; Runtime Calculation Store
  60+ C0AF
  61+ C0AF              FaceArraySize               equ 30
  62+ C0AF              EdgeHeapSize                equ 40
  63+ C0AF              NodeArraySize               equ 40
  64+ C0AF              LineArraySize               equ 50
  65+ C0AF              ; Storage arrays for data
  66+ C0AF              ; Structure of arrays
  67+ C0AF              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  68+ C0AF              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  69+ C0AF              ; NodeArray         -  4 bytes per element      0           1            2          3
  70+ C0AF              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  71+ C0AF              ; Line Array        -  4 bytes per eleement     0           1            2          3
  72+ C0AF              ;                                               X1          Y1           X2         Y2
  73+ C0AF 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  74+ C0CD 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C16D 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  76+ C20D 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  77+ C2D5              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  78+ C2D5 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  79+ C2FD              ; Array current Lengths
  80+ C2FD 00           UbnkFaceVisArrayLen         DS 1
  81+ C2FE 00           UBnkNodeArrayLen            DS 1
  82+ C2FF 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  83+ C300 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  84+ C301              XX20                        equ UbnkLineArrayLen
  85+ C301              varXX20                     equ UbnkLineArrayLen
  86+ C301
  87+ C301 00           UbnkEdgeHeapSize            DS 1
  88+ C302 00           UbnkEdgeHeapBytes           DS 1
  89+ C303 00           UBnkLinesHeapLen            DS 1
  90+ C304 00           UbnKEdgeHeapCounter         DS 1
  91+ C305 00           UbnKEdgeRadius              DS 1
  92+ C306 00           UbnKEdgeShipType            DS 1
  93+ C307 00           UbnKEdgeExplosionType       DS 1
  94+ C308
  95+ C308              ; Node heap is used to write out transformed Vertexs
  96+ C308
  97+ C308              ; Lines
  98+ C308 00 00 00     UBnkXX19                    DS  3
  99+ C30B
 100+ C30B 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 101+ C324              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 102+ C324              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 103+ C324              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 104+ C324              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 105+ C324              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 106+ C324              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 107+ C324              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 108+ C324              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 109+ C324              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 110+ C324              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 111+ C324              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 112+ C324              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 113+ C324              DotAddr                     equ UBnkHullCopy + DotOffset
 114+ C324              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 115+ C324              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 116+ C324              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 117+ C324              QAddr                       equ UBnkHullCopy + QOffset
 118+ C324              LaserAddr                   equ UBnkHullCopy + LaserOffset
 119+ C324              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 120+ C324              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 121+ C324              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 122+ C324              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 123+ C324              ; Static Ship Data. This is copied in when creating the universe object
 124+ C324              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 125+ C324 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; Type 10 is 37 verts so 40 to be safe
 126+ C414 00 00 00...  UBnkHullEdges               DS  50 * 4              ; Type 10 is 46 edges sp 200 to be safe
 127+ C4DC 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C52C 0C           OrthagCountdown             DB  12
 129+ C52D
 130+ C52D              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 131+ C52D              UBnk_Data_len               EQU $ - StartOfUniv
 132+ C52D
 133+ C52D              ZeroUnivPitchAndRoll:   MACRO
 134+ C52D ~                                    xor     a
 135+ C52D ~                                    ld      (UBnKRotXCounter),a
 136+ C52D ~                                    ld      (UBnKRotZCounter),a
 137+ C52D                                      ENDM
 138+ C52D
 139+ C52D              MaxUnivPitchAndRoll:    MACRO
 140+ C52D ~                                    ld      a,127
 141+ C52D ~                                    ld      (UBnKRotXCounter),a
 142+ C52D ~                                    ld      (UBnKRotZCounter),a
 143+ C52D                                      ENDM
 144+ C52D
 145+ C52D              RandomUnivPitchAndRoll: MACRO
 146+ C52D ~                                    call    doRandom
 147+ C52D ~                                    or      %01101111
 148+ C52D ~                                    ld      (UBnKRotXCounter),a
 149+ C52D ~                                    call    doRandom
 150+ C52D ~                                    or      %01101111
 151+ C52D ~                                    ld      (UBnKRotZCounter),a
 152+ C52D                                      ENDM
 153+ C52D
 154+ C52D              RandomUnivSpeed:        MACRO
 155+ C52D ~                                    call    doRandom
 156+ C52D ~                                    and     31
 157+ C52D ~                                    ld      (UBnKspeed),a
 158+ C52D                                      ENDM
 159+ C52D
 160+ C52D              MaxUnivSpeed:           MACRO
 161+ C52D ~                                    ld      a,31
 162+ C52D ~                                    ld      (UBnKspeed),a
 163+ C52D                                      ENDM
 164+ C52D
 165+ C52D              ZeroUnivAccelleration:  MACRO
 166+ C52D ~                                    xor     a
 167+ C52D ~                                    ld      (UBnKAccel),a
 168+ C52D                                      ENDM
 169+ C52D
 170+ C52D              AequN1xorN2:            MACRO  param1,param2
 171+ C52D ~                                    ld      a,(param1)
 172+ C52D ~                                    xor     param2
 173+ C52D                                      ENDM
 174+ C52D
 175+ C52D              N0equN1byN2div256:      MACRO param1,param2,param3
 176+ C52D ~                                    ld      a,param3                        ;
 177+ C52D ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 178+ C52D ~                                    ld      a,param2                        ; A = XX16 element
 179+ C52D ~                                    ld      d,a
 180+ C52D ~                                    mul
 181+ C52D ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 182+ C52D ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 183+ C52D                                      ENDM
 184+ C52D
 185+ C52D              ; --------------------------------------------------------------
 186+ C52D 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 187+ C530 11 2D 05                             ld      de,UBnk_Data_len
 188+ C533 AF                                   xor     a
 189+ C534 CD 9F 93                             call    memfill_dma
 190+ C537 C9                                   ret
 191+ C538              ; --------------------------------------------------------------
 192+ C538 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 193+ C53B 06 09                                ld      b, 3*3
 194+ C53D AF                                   xor     a
 195+ C53E 77           .zeroLoop:              ld      (hl),a
 196+ C53F 23                                   inc     hl
 197+ C540 10 FC                                djnz    .zeroLoop
 198+ C542 C9                                   ret
 199+ C543
 200+ C543              ; --------------------------------------------------------------
 201+ C543              ; This sets the position of the current ship if its a player launched missile
 202+ C543 CD 70 C7     UnivSetPlayerMissile:   call    InitialiseOrientation           ; Player  facing
 203+ C546 CD 38 C5                             call    ResetUbnkPosition               ; home position
 204+ C549 3E 05                                ld      a,MissileDropHeight
 205+ C54B 32 0F C0                             ld      (UBnKylo),a
 206+ C54E 3E 80                                ld      a,$80
 207+ C550 32 11 C0                             ld      (UBnKysgn),a
 208+ C553                                      MaxUnivSpeed
 208+ C553 3E 1F       >                        ld      a,31
 208+ C555 32 1F C0    >                        ld      (UBnKspeed),a
 209+ C558 C9                                   ret
 210+ C559              ; --------------------------------------------------------------
 211+ C559              ; this applies blast damage to ship
 212+ C559 3A A3 98     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 213+ C55C 47                                   ld      b,a
 214+ C55D 3A 27 C0                             ld      a,(UbnKEnergy)                   ; Reduce Energy
 215+ C560 90                                   sub     b
 216+ C561 C3 6A C5                             jp      UnivExplodeShip
 217+ C564 18 04                                jr      UnivExplodeShip
 218+ C566 32 27 C0                             ld      (UbnKEnergy),a
 219+ C569 C9                                   ret
 220+ C56A              ; --------------------------------------------------------------
 221+ C56A              ; This sets the ship as a shower of explosiondwd
 222+ C56A 3A 24 C0     UnivExplodeShip:        ld      a,(UBnkaiatkecm)
 223+ C56D F6 20                                or      ShipExploding
 224+ C56F E6 7F                                and     Bit7Clear
 225+ C571 32 24 C0                             ld      (UBnkaiatkecm),a
 226+ C574 AF                                   xor     a
 227+ C575 32 27 C0                             ld      (UbnKEnergy),a
 228+ C578                                      ;TODO
 229+ C578 C9                                   ret
 230+ C579
 231+ C579              ; --------------------------------------------------------------
 232+ C579              ; This sets the position of the current ship randomly, called after spawing
 233+ C579 CD 70 C7     UnivSetSpawnPosition:   call    InitialiseOrientation
 234+ C57C                                      RandomUnivPitchAndRoll
 234+ C57C CD 72 9C    >                        call    doRandom
 234+ C57F F6 6F       >                        or      %01101111
 234+ C581 32 21 C0    >                        ld      (UBnKRotXCounter),a
 234+ C584 CD 72 9C    >                        call    doRandom
 234+ C587 F6 6F       >                        or      %01101111
 234+ C589 32 22 C0    >                        ld      (UBnKRotZCounter),a
 235+ C58C CD 72 9C                             call    doRandom                        ; set x lo and y lo to random
 236+ C58F 32 0C C0     .setXlo:                ld      (UBnKxlo),a
 237+ C592 32 0F C0     .setYlo:                ld      (UBnKylo),a
 238+ C595 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 239+ C596 47                                   ld      b,a
 240+ C597 E6 80                                and     SignOnly8Bit
 241+ C599 32 0E C0                             ld      (UBnKxsgn),a
 242+ C59C 78           .setYSign:              ld      a,b                             ; get random back again
 243+ C59D 0F                                   rrca                                    ; rotate by 1 bit right
 244+ C59E 47                                   ld      b,a
 245+ C59F E6 80                                and     SignOnly8Bit                    ; and set y sign
 246+ C5A1 32 11 C0                             ld      (UBnKysgn),a
 247+ C5A4 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 248+ C5A6 78                                   ld      a,b                             ;
 249+ C5A7 E6 1F                                and     31                              ; set y hi to random 0 to 31
 250+ C5A9 32 10 C0                             ld      (UBnKyhi),a                     ;
 251+ C5AC CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 252+ C5AE 78                                   ld      a,b
 253+ C5AF E6 1F                                and     31                              ; set x hi to random 0 to 31
 254+ C5B1 4F                                   ld      c,a                             ; save shifted into c as well
 255+ C5B2 32 0D C0                             ld      (UBnKxhi),a
 256+ C5B5 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 257+ C5B7 98                                   sbc     b
 258+ C5B8 99                                   sbc     c
 259+ C5B9 32 13 C0                             ld      (UBnKzhi),a
 260+ C5BC              .CheckIfBodyOrJunk:     ReturnIfMemEquN ShipTypeAddr, ShipTypeJunk
 260+ C5BC 3A 21 C3    >                        ld     a,(ShipTypeAddr)
 260+ C5BF FE 03       >                        cp     ShipTypeJunk
 260+ C5C1 C0          >                        ret    nz
 261+ C5C2 78                                   ld      a,b                             ; its not junk to set z sign
 262+ C5C3 0F                                   rrca                                    ; as it can jump in
 263+ C5C4 E6 80                                and     SignOnly8Bit
 264+ C5C6 32 14 C0                             ld      (UBnKzsgn),a
 265+ C5C9 C9                                   ret
 266+ C5CA
 267+ C5CA              ; --------------------------------------------------------------
 268+ C5CA              ; This sets current univrse object to space station
 269+ C5CA 3E 81        ResetStationLaunch:     ld  a,%10000001
 270+ C5CC 32 24 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 271+ C5CF AF                                   xor a
 272+ C5D0 32 22 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 273+ C5D3 32 22 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 274+ C5D6 3E FF                                ld      a,$FF
 275+ C5D8 32 21 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 276+ C5DB 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 277+ C5DE 22 0C C0                             ld      (UBnKxlo),hl
 278+ C5E1 21 00 00                             ld      hl,$0000
 279+ C5E4 22 0F C0                             ld      (UBnKylo),hl
 280+ C5E7 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 281+ C5EA 22 12 C0                             ld      (UBnKzlo),hl
 282+ C5ED AF                                   xor     a
 283+ C5EE 32 0E C0                             ld      (UBnKxsgn),a
 284+ C5F1 32 11 C0                             ld      (UBnKysgn),a
 285+ C5F4 3E 80                                ld      a,$80
 286+ C5F6 32 14 C0                             ld      (UBnKzsgn),a
 287+ C5F9 CD 95 C7     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 288+ C5FC C9                                   ret
 289+ C5FD                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 290+ C5FD              ;Output: BC = Quotient, HL = Remainder
 291+ C5FD
 292+ C5FD              ; Initialiase data, iyh must equal slot number
 293+ C5FD              ;                   iyl must be ship type
 294+ C5FD 32 1A C0     UnivInitRuntime:        ld      (UbnKShipBankNbr),a
 295+ C600 01 0F 00                             ld      bc,UBnKRuntimeSize
 296+ C603 21 19 C0                             ld      hl,UBnKShipType
 297+ C606                                      ZeroA
 297+ C606 AF          >                        xor a
 298+ C607 77           .InitLoop:              ld      (hl),a
 299+ C608 23                                   inc     hl
 300+ C609 10 FC                                djnz    .InitLoop
 301+ C60B FD 7C        .SetBankData:           ld      a,iyh
 302+ C60D 32 1A C0                             ld      (UbnKShipBankNbr),a
 303+ C610 FD 7D                                ld      a,iyl
 304+ C612 32 19 C0                             ld      (UBnKShipType),a
 305+ C615 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 306+ C618 32 1B C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 307+ C61B 78                                   ld      a,b                          ; this will mostly be debugging info
 308+ C61C 32 1C C0                             ld      (UBnkShipModelNbr),a         ; this will mostly be debugging info
 309+ C61F C9                                   ret
 310+ C620
 311+ C620
 312+ C620 7C           ADDHLDESignedv3:        ld      a,h
 313+ C621 E6 80                                and     SignOnly8Bit
 314+ C623 47                                   ld      b,a                         ;save sign bit in b
 315+ C624 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 316+ C625                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 316+ C625 FA 3D C6    >                        jp		m, ADDHLDEOppSGN
 317+ C628 78           ADDHLDESameSigns:       ld      a,b
 318+ C629 B2                                   or      d
 319+ C62A                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 319+ C62A FA 2F C6    >                        jp		m, ADDHLDESameNeg
 320+ C62D 19                                   add     hl,de
 321+ C62E C9                                   ret
 322+ C62F 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 323+ C630 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 324+ C632 67                                   ld      h,a
 325+ C633 7A                                   ld      a,d
 326+ C634 E6 7F                                and     SignMask8Bit
 327+ C636 57                                   ld      d,a
 328+ C637 19                                   add     hl,de
 329+ C638 3E 80                                ld      a,SignOnly8Bit
 330+ C63A B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 331+ C63B 67                                   ld      h,a
 332+ C63C C9                                   ret
 333+ C63D 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 334+ C63E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 335+ C640 67                                   ld      h,a
 336+ C641 7A                                   ld      a,d
 337+ C642 E6 7F                                and     SignMask8Bit
 338+ C644 57                                   ld      d,a
 339+ C645 B7                                   or      a
 340+ C646 ED 52                                sbc     hl,de
 341+ C648 38 04                                jr      c,ADDHLDEOppInvert
 342+ C64A 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 343+ C64B B4                                   or      h
 344+ C64C 67                                   ld      h,a                         ; set the previou sign value
 345+ C64D C9                                   ret
 346+ C64E              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 346+ C64E AF          >                    xor a
 346+ C64F 95          >                    sub l
 346+ C650 6F          >                    ld l,a
 346+ C651 9F          >                    sbc a,a
 346+ C652 94          >                    sub h
 346+ C653 67          >                    ld h,a
 347+ C654 78                                   ld      a,b
 348+ C655 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 349+ C657 B4                                   or      h
 350+ C658 67                                   ld      h,a                         ; recover sign
 351+ C659 C9                                   ret
 352+ C65A
 353+ C65A              ; we could cheat, flip the sign of DE and just add but its not very optimised
 354+ C65A 7C           SUBHLDESignedv3:        ld      a,h
 355+ C65B E6 80                                and     SignOnly8Bit
 356+ C65D 47                                   ld      b,a                         ;save sign bit in b
 357+ C65E AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 358+ C65F                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 358+ C65F FA 8D C6    >                        jp		m, SUBHLDEOppSGN
 359+ C662 78           SUBHLDESameSigns:       ld      a,b
 360+ C663 B2                                   or      d
 361+ C664                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 361+ C664 FA 6E C6    >                        jp		m, SUBHLDESameNeg
 362+ C667 B7                                   or      a
 363+ C668 ED 52                                sbc     hl,de
 364+ C66A                                      JumpIfNegative SUBHLDESameOvrFlw
 364+ C66A FA 81 C6    >                        jp		m, SUBHLDESameOvrFlw
 365+ C66D C9                                   ret
 366+ C66E 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 367+ C66F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 368+ C671 67                                   ld      h,a
 369+ C672 7A                                   ld      a,d
 370+ C673 E6 7F                                and     SignMask8Bit
 371+ C675 57                                   ld      d,a
 372+ C676 B7                                   or      a
 373+ C677 ED 52                                sbc     hl,de
 374+ C679                                      JumpIfNegative SUBHLDESameOvrFlw
 374+ C679 FA 81 C6    >                        jp		m, SUBHLDESameOvrFlw
 375+ C67C 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 376+ C67D F6 80                                or      SignOnly8Bit
 377+ C67F 67                                   ld      h,a
 378+ C680 C9                                   ret
 379+ C681              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 379+ C681 AF          >                    xor a
 379+ C682 95          >                    sub l
 379+ C683 6F          >                    ld l,a
 379+ C684 9F          >                    sbc a,a
 379+ C685 94          >                    sub h
 379+ C686 67          >                    ld h,a
 380+ C687 78                                   ld      a,b
 381+ C688 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 382+ C68A B4                                   or      h
 383+ C68B 67                                   ld      h,a                         ; recover sign
 384+ C68C C9                                   ret
 385+ C68D B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 386+ C68E 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 387+ C68F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 388+ C691 67                                   ld      h,a
 389+ C692 7A                                   ld      a,d
 390+ C693 E6 7F                                and     SignMask8Bit
 391+ C695 57                                   ld      d,a
 392+ C696 19                                   add     hl,de
 393+ C697 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 394+ C698 B4                                   or      h
 395+ C699 67                                   ld      h,a                         ; set the previou sign value
 396+ C69A C9                                   ret
 397+ C69B
 398+ C69B
 399+ C69B              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 399+ C69B CB 7C       >                        bit 	7,h
 399+ C69D C2 AE C6    >                        jp      nz,SBCHLDEhlNeg
 400+ C6A0              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 400+ C6A0 CB 7C       >                        bit 	7,h
 400+ C6A2 C2 AE C6    >                        jp      nz,SBCHLDEhlNeg
 401+ C6A5 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 402+ C6A7 C9                                   ret
 403+ C6A8 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 404+ C6AA 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 405+ C6AB CB FA                                set     7,d
 406+ C6AD C9                                   ret
 407+ C6AE CB BC        SBCHLDEhlNeg:           res     7,h
 408+ C6B0                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 408+ C6B0 CB 7A       >                        bit 	7,d
 408+ C6B2 C2 BA C6    >                        jp      nz,SBCHLDEhlNegdeNeg
 409+ C6B5 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 410+ C6B7 CB FC                                set     7,h
 411+ C6B9 C9                                   ret
 412+ C6BA CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 413+ C6BC 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 414+ C6BD CB FA                                set     7,d
 415+ C6BF CB FC                                set     7,h
 416+ C6C1 C9                                   ret
 417+ C6C2
 418+ C6C2              ; Roate around axis
 419+ C6C2              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 420+ C6C2              ; so the axis x1 points to roofv  x , y or z
 421+ C6C2              ;             x2           nosev or sidev  x, y or z
 422+ C6C2              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 423+ C6C2              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 424+ C6C2              ; var RAT2 gives direction
 425+ C6C2              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 426+ C6C2              ;-Set up S R -----------------------------------------
 427+ C6C2              ; optimised we don't deal with sign here just the value of roof axis / 512
 428+ C6C2 2A C5 96     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 429+ C6C5 5E                                   ld      e,(hl)
 430+ C6C6 23                                   inc     hl
 431+ C6C7 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 432+ C6C8 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 433+ C6C9 7C                                   ld      a,h
 434+ C6CA E6 80                                and     SignOnly8Bit
 435+ C6CC FD 67                                ld      iyh,a           ; iyh = sign Axis1
 436+ C6CE 7C                                   ld      a,h
 437+ C6CF E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 438+ C6D1 CB 3F                                srl     a               ; a = Axis1/2
 439+ C6D3 5F                                   ld      e,a             ;
 440+ C6D4 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 441+ C6D6 57                                   ld      d,a             ; de = signed Axis1 / 512
 442+ C6D7 B7                                   or      a               ; clear carry
 443+ C6D8 CD 5A C6                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 444+ C6DB              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 445+ C6DB E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 446+ C6DC 7D                                   ld      a,l
 447+ C6DD 32 E4 97                             ld      (varR),a
 448+ C6E0 7C                                   ld      a,h
 449+ C6E1 32 E5 97                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 450+ C6E4              ;-calculate roofv latter half of calc
 451+ C6E4 2A C7 96                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 452+ C6E7 5E                                   ld      e,(hl)
 453+ C6E8 23                                   inc     hl
 454+ C6E9 56                                   ld      d,(hl)          ; de = value of roof axis
 455+ C6EA 7A                                   ld      a,d
 456+ C6EB E6 80                                and     SignOnly8Bit
 457+ C6ED FD 67                                ld      iyh,a           ; save sign
 458+ C6EF 7A                                   ld      a,d
 459+ C6F0 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 460+ C6F2 57                                   ld      d,a             ; de = abs (nosev)
 461+ C6F3                                      ShiftDERight1
 461+ C6F3 CB 3A       >			   srl d
 461+ C6F5 CB 1B       >			   rr  e
 462+ C6F7                                      ShiftDERight1
 462+ C6F7 CB 3A       >			   srl d
 462+ C6F9 CB 1B       >			   rr  e
 463+ C6FB                                      ShiftDERight1
 463+ C6FB CB 3A       >			   srl d
 463+ C6FD CB 1B       >			   rr  e
 464+ C6FF                                      ShiftDERight1           ; de = nosev /16 unsigned
 464+ C6FF CB 3A       >			   srl d
 464+ C701 CB 1B       >			   rr  e
 465+ C703 3A 3B C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 466+ C706 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 467+ C708 E6 80                                and     SignOnly8Bit
 468+ C70A B2                                   or      d
 469+ C70B 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 470+ C70C              ;;; ld      a,e
 471+ C70C              ;;;     or      iyh
 472+ C70C              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 473+ C70C              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 474+ C70C E1                                   pop     hl              ; get back RS POP ID 1
 475+ C70D                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 476+ C70D              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 477+ C70D CD 20 C6                             call    ADDHLDESignedv3 ; do add using hl and de
 478+ C710 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 479+ C711              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 480+ C711              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 481+ C711 2A C7 96                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 482+ C714 5E                               ld      e,(hl)
 483+ C715 23                               inc     hl
 484+ C716 56                               ld      d,(hl)
 485+ C717 EB                               ex      de,hl
 486+ C718 7C                               ld      a,h
 487+ C719 E6 80                            and     $80
 488+ C71B FD 67                            ld      iyh,a
 489+ C71D 7C                               ld      a,h
 490+ C71E E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 491+ C720 CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 492+ C722 5F                               ld      e,a
 493+ C723 FD 7C                            ld      a,iyh
 494+ C725 57                               ld      d,a
 495+ C726 B7                               or      a               ; clear carry
 496+ C727 CD 5A C6                         call    SUBHLDESignedv3
 497+ C72A              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 498+ C72A E5                               push    hl              ; save hl on stack  PUSH ID 3
 499+ C72B 7D                               ld      a,l
 500+ C72C 32 DC 96                         ld      (varP),a        ; p = low of resuilt
 501+ C72F 7C                               ld      a,h
 502+ C730 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 503+ C732 32 00 98                         ld      (varT),a        ; t = high of result
 504+ C735              ;-- Set up TQ
 505+ C735 2A C5 96                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 506+ C738              ;   ld      hl,(varAxis2)   ; work on nosev again
 507+ C738 5E                               ld      e,(hl)
 508+ C739 23                               inc     hl
 509+ C73A 56                               ld      d,(hl)
 510+ C73B 7A                               ld      a,d
 511+ C73C E6 80                            and     $80
 512+ C73E FD 67                            ld      iyh,a           ; save sign
 513+ C740 7A                               ld      a,d
 514+ C741 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 515+ C743 57                               ld      d,a             ; de = abs (nosev)
 516+ C744                                  ShiftDERight1
 516+ C744 CB 3A       >			   srl d
 516+ C746 CB 1B       >			   rr  e
 517+ C748                                  ShiftDERight1
 517+ C748 CB 3A       >			   srl d
 517+ C74A CB 1B       >			   rr  e
 518+ C74C                                  ShiftDERight1
 518+ C74C CB 3A       >			   srl d
 518+ C74E CB 1B       >			   rr  e
 519+ C750                                  ShiftDERight1           ; de = nosev /16 unsigned
 519+ C750 CB 3A       >			   srl d
 519+ C752 CB 1B       >			   rr  e
 520+ C754 3A 3B C0                         ld      a,(univRAT2)
 521+ C757 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 522+ C759 E6 80                            and     $80
 523+ C75B B2                               or      d
 524+ C75C 57                               ld      d,a
 525+ C75D              ;;; ld      a,e
 526+ C75D              ;;;     or      iyh
 527+ C75D              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 528+ C75D E1                               pop     hl              ; get back RS   POP ID 3
 529+ C75E              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 530+ C75E CD 5A C6                         call    SUBHLDESignedv3 ; do add using hl and de
 531+ C761              ;-- Update nosev ---------------------------------------
 532+ C761 EB                               ex      de,hl           ; save hl to de
 533+ C762 2A C7 96                         ld      hl,(varAxis2)
 534+ C765 73                               ld      (hl),e
 535+ C766 23                               inc     hl
 536+ C767 72                               ld      (hl),d          ; copy result into nosev
 537+ C768              ;-- Update roofv ---------------------------------------
 538+ C768 D1                               pop     de              ; get calc saved on stack POP ID 2
 539+ C769 2A C5 96                         ld      hl,(varAxis1)
 540+ C76C 73                               ld      (hl),e
 541+ C76D 23                               inc     hl
 542+ C76E 72                               ld      (hl),d          ; copy result into nosev
 543+ C76F C9                               ret
 544+ C770
 545+ C770                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C770              InitialiseOrientation:
   2++C770              ZI1:
   3++C770              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++C770              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++C770              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++C770 21 00 00         ld      hl, 0
   7++C773 22 2A C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++C776 22 2C C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++C779 22 2E C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++C77C 22 32 C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++C77F 22 34 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++C782 22 36 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++C785 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++C788                  ;ld      hl,1
  15++C788 22 28 C0         ld      (UBnkrotmatSidevX),hl
  16++C78B 22 30 C0         ld      (UBnkrotmatRoofvY),hl
  17++C78E 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++C791 22 38 C0         ld      (UBnkrotmatNosevZ),hl
  19++C794 C9               ret
  20++C795
  21++C795              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++C795              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++C795              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++C795
  25++C795              LaunchedOrientation:
  26++C795 CD 70 C7         call    InitialiseOrientation
  27++C798                  FlipMemSign UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++C798 3A 35 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  27++C79B EE 80       >                        xor SignOnly8Bit
  27++C79D 32 35 C0    >                        ld  (UBnkrotmatNosevX+1),a
  28++C7A0                  FlipMemSign UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++C7A0 3A 37 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  28++C7A3 EE 80       >                        xor SignOnly8Bit
  28++C7A5 32 37 C0    >                        ld  (UBnkrotmatNosevY+1),a
  29++C7A8                  FlipMemSign UBnkrotmatNosevZ+1
  29++C7A8 3A 39 C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  29++C7AB EE 80       >                        xor SignOnly8Bit
  29++C7AD 32 39 C0    >                        ld  (UBnkrotmatNosevZ+1),a
  30++C7B0 C9               ret
  31++C7B1
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 546+ C7B1
 547+ C7B1              ;----------------------------------------------------------------------------------------------------------------------------------
 548+ C7B1              OrientateVertex:
 549+ C7B1
 550+ C7B1              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 551+ C7B1              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 552+ C7B1              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 553+ C7B1              ;
 554+ C7B1
 555+ C7B1              ;----------------------------------------------------------------------------------------------------------------------------------
 556+ C7B1              TransposeVertex:
 557+ C7B1              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 558+ C7B1              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 559+ C7B1              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 560+ C7B1              VectorToVertex:
 561+ C7B1              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 562+ C7B1              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 563+ C7B1              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 564+ C7B1
 565+ C7B1              Project:
 566+ C7B1 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 567+ C7B4 22 DC 96                             ld      (varP),hl
 568+ C7B7 3A 0E C0                             ld      a,(UBnKxsgn)
 569+ C7BA CD A1 A7                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 570+ C7BD D8                                   ret     c                               ; carry means don't print
 571+ C7BE 2A F7 97                             ld      hl,(varK)                       ; hl = k (0 1)
 572+ C7C1                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 573+ C7C1 3E 80                                ld      a,ViewCenterX
 574+ C7C3 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 575+ C7C5 22 0A 98                             ld      (varK3),hl                      ; K3 = X position on screen
 576+ C7C8 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 577+ C7CB 22 DC 96                             ld      (varP),hl
 578+ C7CE 3A 11 C0                             ld      a,(UBnKysgn)
 579+ C7D1 CD A1 A7                             call    PLS6
 580+ C7D4 D8                                   ret     c
 581+ C7D5 2A F7 97                             ld      hl,(varK)                       ; hl = k (0 1)
 582+ C7D8 3E 40                                ld      a,ViewCenterY
 583+ C7DA ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 584+ C7DC 22 10 98                             ld      (varK4),hl                      ; K3 = X position on screen
 585+ C7DF C9                                   ret
 586+ C7E0              ;--------------------------------------------------------------------------------------------------------
 587+ C7E0                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++C7E0              ;
   2++C7E0              ; EraseOldLines:
   3++C7E0              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++C7E0              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++C7E0              ;	 	loop + 4
   6++C7E0              ; Return
   7++C7E0
   8++C7E0              EraseOldLines:
   9++C7E0              EE51:										; if bit3 set draw lines in XX19 heap
  10++C7E0              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++C7E0 3A 23 C0    >                        ld     a,(UBnKexplDsp)
  10++C7E3 CB 5F       >                        bit 	3,a
  10++C7E5 C8          >                        ret		z
  11++C7E6 CB DF        	set		3,a
  12++C7E8 32 23 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++C7EB C3 C8 E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++C7EE              ; We use the ret from the clearLines so not needed here
  15++C7EE
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 588+ C7EE                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++C7EE              ;TrimToScreenGrad:
   2++C7EE              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++C7EE              ;ret
   4++C7EE              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++C7EE              ;TODO        bit     7,a
   6++C7EE              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++C7EE              ;TODO        ld      a,h
   8++C7EE              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++C7EE              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++C7EE              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++C7EE
  12++C7EE              ;18                      CLC
  13++C7EE              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++C7EE              ;85 36                   STA &36			 \ XX15+2
  15++C7EE              ;98                      TYA 			 \ step Y1 hi
  16++C7EE              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++C7EE              ;85 37                   STA &37			 \ XX15+3
  18++C7EE              ;A9 00                   LDA #0			 \ xleft min
  19++C7EE              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++C7EE              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++C7EE              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++C7EE              ;	.LL119	\ x1 hi +ve from LL118
  23++C7EE              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++C7EE              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++C7EE              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++C7EE              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++C7EE              ;8A                      TXA 			 \ step Y1 lo
  28++C7EE              ;18                      CLC
  29++C7EE              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++C7EE              ;85 36                   STA &36			 \ XX15+2
  31++C7EE              ;98                      TYA 			 \ step Y1 hi
  32++C7EE              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++C7EE              ;85 37                   STA &37			 \ XX15+3
  34++C7EE              ;A2 FF                   LDX #&FF		 \ xright max
  35++C7EE              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++C7EE              ;E8                      INX 			 \ X = 0
  37++C7EE              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++C7EE              ;	.LL134	\ Ytrim
  39++C7EE              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++C7EE              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++C7EE              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++C7EE              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++C7EE              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++C7EE              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++C7EE              ;8A                      TXA 			 \ step X1 lo
  46++C7EE              ;18                      CLC
  47++C7EE              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++C7EE              ;85 34                   STA &34			 \ XX15+0
  49++C7EE              ;98                      TYA 			 \ step X1 hi
  50++C7EE              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++C7EE              ;85 35                   STA &35			 \ XX15+1
  52++C7EE              ;A9 00                   LDA #0			 \ Y bottom min
  53++C7EE              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++C7EE              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++C7EE              ;	.LL135	\ y1 hi +ve from LL134
  56++C7EE              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++C7EE              ;38                      SEC
  58++C7EE              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++C7EE              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++C7EE              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++C7EE              ;E9 00                   SBC #0			 \ any hi
  62++C7EE              ;85 83                   STA &83			 \ S
  63++C7EE              ;90 16                   BCC LL136		 \ failed, rts
  64++C7EE              ;	.LL139
  65++C7EE              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++C7EE              ;8A                      TXA 			 \ step X1 lo
  67++C7EE              ;18                      CLC
  68++C7EE              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++C7EE              ;85 34                   STA &34			 \ XX15+0
  70++C7EE              ;98                      TYA 			 \ step X1 hi
  71++C7EE              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++C7EE              ;85 35                   STA &35			 \ XX15+1
  73++C7EE              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++C7EE              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++C7EE              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++C7EE              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++C7EE              ;	.LL136	\ rts
  78++C7EE              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++C7EE              ;
  80++C7EE
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 589+ C7EE                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C7EE              ;--------------------------------------------------------------------------------------------------------------------
   2++C7EE
   3++C7EE 00           clipDx                  DB      0           ; also XX12+2
   4++C7EF 00           clipDxHigh              DB      0           ; also XX12+3
   5++C7F0 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C7F1 00           clipDy                  DB      0           ; also XX12+4
   7++C7F2 00           clipDyHigh              DB      0           ; also XX12+5
   8++C7F3 00           clipGradient            DB      0
   9++C7F4 00           clipDxySign             DB      0
  10++C7F5              varX12p3                equ     clipDxySign
  11++C7F5 00           clipXGTY                DB      0
  12++C7F6 00           clipFlags               DB      0
  13++C7F7 00           SWAP                    DB      0
  14++C7F8 00 00        varYX                   DW      0
  15++C7FA              ;varRegX                 DB      0
  16++C7FA              ;varXX12p2               DB      0
  17++C7FA 00           clipXX13                 DB      0
  18++C7FB
  19++C7FB
  20++C7FB              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++C7FB              ;ClipXX15XX12Line:
  22++C7FB ED 4B 84 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++C7FF DD 2A 88 C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++C803 2A 82 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++C806 ED 5B 86 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++C80A AF                                   xor     a
  27++C80B 32 F7 C7                             ld      (SWAP),a                    ; SWAP = 0
  28++C80E 7A                                   ld      a,d                         ; A = X2Hi
  29++C80F FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++C812                                      ;       push    af
  31++C812                                      ;       ld      a,iyh
  32++C812                                      ;       ld      (regX),a
  33++C812                                      ;       pop     af
  34++C812 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++C814 20 0A                                jr      nz, .LL107
  36++C816 DD 7D                                ld      a,ixl
  37++C818 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++C81B 20 03                                jr      nz,.LL107
  39++C81D FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++C820                                      ;        push    af
  41++C820                                      ;        ld      a,iyh
  42++C820                                      ;        ld      (regX),a
  43++C820                                      ;        pop     af
  44++C820              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++C820              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++C820 FD 7C        .LL107                  ld      a,iyh
  47++C822 32 FA C7                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++C825 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++C826 B0                                   or      b                           ;
  50++C827 20 27                                jr      nz,.LL83                    ;
  51++C829 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++C82A ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++C82D 20 21                                jr      nz,.LL83
  54++C82F              ; If we get here, (x1, y1) is on-screen
  55++C82F FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++C831 FE 00                                cp      0
  57++C833 20 15                                jr      nz, .LL108
  58++C835              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++C835 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++C836 32 83 C0                             ld      (UBnkNewY1),a
  61++C839 DD 7D                                ld      a,ixl
  62++C83B 32 85 C0                             ld      (UBnkNewY2),a
  63++C83E 7D                                   ld      a,l
  64++C83F 32 82 C0                             ld      (UBnkNewX1),a
  65++C842 7B                                   ld      a,e
  66++C843 32 84 C0                             ld      (UBnkNewX2),a
  67++C846                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++C846 B7          >                        or a
  68++C847 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++C848              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++C848 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++C849 C9                                   ret
  72++C84A FD 7C        .LL108:                 ld      a,iyh
  73++C84C B7                                   or      a
  74++C84D 1F                                   rra
  75++C84E FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++C850                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++C850                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++C850                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++C850                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++C850 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++C852 ED 27 80                             test    $80                         ;
  82++C855 28 28                                jr      z, .LL115                   ;
  83++C857 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++C858 A2                                   and     d
  85++C859                                      JumpIfNegative  .PointsOutofBounds
  85++C859 FA 48 C8    >                        jp		m, .PointsOutofBounds
  86++C85C 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++C85D DD A4                                and     ixh
  88++C85F                                      JumpIfNegative  .PointsOutofBounds
  88++C85F FA 48 C8    >                        jp		m, .PointsOutofBounds
  89++C862 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++C863 3D                                   dec     a
  91++C864 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++C866                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++C866                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++C866                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++C866                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++C866 7A                                   ld      a,d                         ; a = x2 hi
  97++C867 3D                                   dec     a
  98++C868 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++C86A                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++C86A F2 48 C8    >                        jp		p, .PointsOutofBounds
 100++C86D              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++C86D DD 7C                                ld      a,ixh
 102++C86F 3D                                   dec     a
 103++C870 FD 6F                                ld      iyl,a
 104++C872 78                                   ld      a,b
 105++C873 3D                                   dec     a
 106++C874 FD B5                                or      iyl
 107++C876                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++C876 F2 48 C8    >                        jp		p, .PointsOutofBounds
 108++C879 79                                   ld      a,c
 109++C87A DD A5                                and     ixl
 110++C87C                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++C87C FA 48 C8    >                        jp		m, .PointsOutofBounds
 111++C87F              ; Clip line: calulate the line's gradient
 112++C87F              ; here as an optimisation we make sure X1 is always < X2  later on
 113++C87F              .LL115:                 ClearCarryFlag
 113++C87F B7          >                        or a
 114++C880 E5 D5        .CalcDX:                push    hl,,de
 115++C882 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++C883 ED 52                                sbc     hl,de
 117++C885                                     ; pop     de                          ; we need de back
 118++C885 22 EE C7                             ld      (clipDx),hl
 119++C888 7C                                   ld      a,h
 120++C889 32 F0 C7                             ld      (clipDxHighNonABS),a
 121++C88C                                     ; ld      a,e                         ;a = x2 lo
 122++C88C                                     ; sbc     a,l                         ;a= a - x1
 123++C88C                                     ; ld      (clipDx),a
 124++C88C                                     ; ld      a,d
 125++C88C                                     ; sbc     a,h
 126++C88C                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++C88C                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++C88C              .CalcDy:                ClearCarryFlag
 128++C88C B7          >                        or a
 129++C88D DD E5 E1                             ld      hl,ix
 130++C890 ED 42                                sbc     hl,bc
 131++C892 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++C894 22 F1 C7                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++C897 7C           .CalcQuadrant:          ld      a,h
 134++C898                                     ; ld      a,ixl
 135++C898                                     ; sbc     c
 136++C898                                     ; ld      (clipDy),a
 137++C898                                     ; ld      a,ixh
 138++C898                                     ; sbc     a,b
 139++C898                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++C898                                     ; pop     hl
 141++C898
 142++C898              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++C898                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++C898 21 EF C7                             ld      hl,clipDxHigh
 145++C89B AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++C89C 32 E5 97                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++C89F 32 F4 C7                             ld      (clipDxySign),a
 148++C8A2 3A F2 C7     .AbsDy:                 ld      a,(clipDyHigh)
 149++C8A5 ED 27 80                             test    $80
 150++C8A8 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++C8AA 2A F1 C7                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++C8AD                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++C8AD AF          >					xor 	a
 152++C8AE 93          >                    sub 	e
 152++C8AF 5F          >                    ld 		e,a
 152++C8B0 9F          >                    sbc 	a,a
 152++C8B1 92          >                    sub 	d
 152++C8B2 57          >                    ld 		d,a
 153++C8B3 22 F1 C7                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++C8B6 2A EE C7     .LL110:                 ld      hl,(clipDx)
 155++C8B9 3A EF C7                             ld      a,(clipDxHigh)
 156++C8BC ED 27 80                             test    $80                         ; is it a negative X
 157++C8BF 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++C8C1                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++C8C1                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++C8C1 AF          >					xor 	a
 159++C8C2 95          >					sub 	l
 159++C8C3 6F          >					ld 		l,a
 159++C8C4 9F          >					sbc 	a,a
 159++C8C5 94          >					sub 	h
 159++C8C6 67          >					ld 		h,a
 160++C8C7                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++C8C7              .LL111:               ;  push    de
 162++C8C7                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++C8C7                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++C8C7 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++C8C8 B2                                   or      d
 166++C8C9 28 0A                                jr      z,.CalculateDelta
 166++C8CB
 167++C8CB                                      ShiftDERight1
 167++C8CB CB 3A       >			   srl d
 167++C8CD CB 1B       >			   rr  e
 168++C8CF                                      ShiftHLRight1
 168++C8CF CB 3C       >			   srl h
 168++C8D1 CB 1D       >			   rr  l
 169++C8D3 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++C8D5              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++C8D5                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++C8D5              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++C8D5 AF           .LL113:                 xor     a
 174++C8D6 32 00 98                             ld      (varT),a                    ; t = 0
 175++C8D9 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++C8DA                                      JumpIfALTNusng  e, .LL114           ;
 176++C8DA BB          >                        cp      e
 176++C8DB DA EB C8    >                        jp		c, .LL114
 177++C8DE              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++C8DE 32 E3 97     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++C8E1 57                                   ld      d,a                         ; d = also Q for calc
 180++C8E2 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++C8E3 CD 46 A9                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++C8E6 32 E4 97                             ld      (varR),a                    ;
 183++C8E9 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++C8EB              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++C8EB 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++C8EC 57                                   ld      d,a
 187++C8ED 32 E3 97                             ld      (varQ),a
 188++C8F0 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++C8F1 CD 46 A9                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++C8F4 32 E4 97                             ld      (varR),a                    ;
 191++C8F7 21 00 98                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++C8FA 35                                   dec     (hl)
 193++C8FB D1           .LL116:                 pop     de                          ; get back X2
 194++C8FC E1                                   pop     hl                          ; get back X1 into hl,
 195++C8FD 3A E4 97                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++C900 32 F3 C7                             ld      (clipGradient),a
 197++C903 FD 6F                                ld      iyl,a
 198++C905                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++C905                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++C905                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++C905                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++C905 3A E5 97                             ld      a,(varS)
 203++C908 32 F4 C7                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++C90B                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++C90B FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++C90D FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++C90F 28 05                                jr      z,.LL138                    ;
 208++C911 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++C914 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++C916              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++C916 CD 3D C9     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++C919 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++C91B ED 27 80                             test    $80
 214++C91E 28 1A                                jr      z,.LL124
 215++C920              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++C920 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++C921 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++C922 C2 48 C8                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++C925 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++C926 FA 48 C8                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++C929              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++C929              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++C929 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++C92A DD E5                                push    ix                          ;  swap Y1 and Y2
 225++C92C C5                                   push    bc
 226++C92D DD E1                                pop     ix
 227++C92F C1                                   pop     bc
 228++C930 CD 3D C9                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++C933 3A F7 C7                             ld      a,(SWAP)
 230++C936 3D                                   dec     a
 231++C937 32 F7 C7                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++C93A C3 35 C8     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++C93D
 234++C93D              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++C93D              ; iyh still holds XX13 iyl still holds gradient
 236++C93D 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++C93E ED 27 80                             test    $80
 238++C941 28 17                                jr      z,.LL119
 239++C943 32 E5 97     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++C946 E5 D5 C5                             push    hl,,de,,bc
 241++C949 CD BF C9                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++C94C                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++C94C                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++C94C C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++C94F 2A F8 C7                             ld      hl,(varYX)
 246++C952              ;                        ex      hl,de
 247++C952                                  ;    ld      hl,bc
 248++C952 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++C953 44 4D                                ld      bc,hl
 250++C955 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++C958               ;                       pop     de
 252++C958 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++C95A FE 00        .LL119:                 cp      0
 254++C95C 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++C95E 3D                                   dec     a
 256++C95F 32 E5 97                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++C962 E5 D5 C5                             push    hl,,de,,bc
 258++C965 CD BF C9                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++C968                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++C968                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++C968 C1 D1 E1                             pop     hl,,de,,bc
 262++C96B                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++C96B 2A F8 C7                             ld      hl,(varYX)
 264++C96E                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++C96E 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++C96F 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++C971                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++C971                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++C971                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++C971 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++C974                                    ;  pop     de
 272++C974              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++C974 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++C975 ED 27 80                             test    $80                         ;
 275++C978 28 1A                                jr      z,.LL135                    ;
 276++C97A 32 E5 97                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++C97D 79                                   ld      a,c                         ; Set R = y1_lo
 278++C97E 32 E4 97                             ld      (varR),a                    ;
 279++C981 E5 D5 C5                             push    hl,,de,,bc
 280++C984 CD E6 C9                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++C987                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++C987                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++C987 C1 D1 E1                             pop     hl,,de,,bc
 284++C98A D5                                   push    de
 285++C98B EB                                   ex      hl,de                       ; de = x1
 286++C98C 2A F8 C7                             ld      hl,(varYX)                  ; hl = varYX
 287++C98F 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++C990 D1                                   pop     de                          ; de = x2 again
 289++C991 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++C994 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++C995 E6 80                                and     $80
 292++C997 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++C998 C8                                   ret     z
 294++C999 E5                                   push    hl
 295++C99A 60 69                                ld      hl,bc
 296++C99C 01 80 00                             ld      bc,128
 297++C99F B7                                   or      a
 298++C9A0 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++C9A2 22 E4 97                             ld      (varRS), hl                 ; and now RS (or SR)
 300++C9A5 7C                                   ld      a,h
 301++C9A6 E1                                   pop     hl
 302++C9A7 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++C9AA C0                                   ret     nz
 304++C9AB              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++C9AB E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++C9AE CD E6 C9                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++C9B1                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++C9B1                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++C9B1 C1 D1 E1                             pop     hl,,de,,bc
 310++C9B4 D5                                   push    de
 311++C9B5 EB                                   ex      hl,de
 312++C9B6 2A F8 C7                             ld      hl,(varYX)
 313++C9B9 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++C9BA 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++C9BD D1                                   pop     de
 316++C9BE C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++C9BF
 318++C9BF
 319++C9BF              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++C9BF              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++C9BF              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++C9BF              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++C9BF 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++C9C0 32 E4 97                             ld      (varR),a
 325++C9C3 CD 2E CA                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++C9C6 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++C9C7 C5                                   push    bc
 328++C9C8 47                                   ld      b,a
 329++C9C9 3A 00 98                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++C9CC FE 00                                cp      0
 331++C9CE 78                                   ld      a,b
 332++C9CF C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++C9D0 20 23                                jr      nz, LL121
 334++C9D2              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++C9D2 3A F3 C7     LL122:                  ld      a,(clipGradient)
 336++C9D5 32 E3 97                             ld      (varQ),a; optimise
 337++C9D8 CD C4 A7                             call    HLequSRmulQdiv256
 338++C9DB 22 F8 C7                             ld      (varYX),hl
 339++C9DE F1                                   pop     af
 340++C9DF ED 27 80                             test    $80
 341++C9E2 CA 21 CA                             jp      z,LL133
 342++C9E5 C9                                   ret
 343++C9E6              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++C9E6              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++C9E6              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++C9E6              ;
 347++C9E6              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++C9E6              ;                          LL133                Negate (Y X) and return from the subroutine
 349++C9E6              ;                          LL128                Contains an RTS
 350++C9E6 CD 2E CA     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++C9E9 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++C9EA C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++C9EB 47                                   ld      b,a
 354++C9EC 3A 00 98                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++C9EF FE 00                                cp      0
 356++C9F1 78                                   ld      a,b
 357++C9F2 C1                                   pop     bc
 358++C9F3 20 DD                                jr      nz, LL122
 359++C9F5              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++C9F5 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++C9F8 2A E4 97                             ld      hl,(varRS)                  ; hl = RS
 362++C9FB 3A E3 97                             ld      a,(varQ)
 363++C9FE 47                                   ld      b,a                         ; b = q
 364++C9FF              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++C9FF CB 25       >			   sla l
 364++CA01 CB 14       >			   rl  h
 365++CA03 7C                                   ld      a,h
 366++CA04 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CA06                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CA06 B8          >                        cp      b
 367++CA07 DA 12 CA    >                        jp		c, .LL132
 368++CA0A 3F           .LL131:                 ccf                                 ; compliment carry
 369++CA0B 98                                   sbc     a,b                         ; q
 370++CA0C 67                                   ld      h,a                         ; h (s)
 371++CA0D 7D                                   ld      a,l                         ; r
 372++CA0E DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CA10 37                                   scf                                 ; set carry for next rolls
 374++CA11 3F                                   ccf
 375++CA12              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CA12 CB 13       >               rl  e
 375++CA14 CB 12       >               rl  d
 376++CA16 38 E7                                jr      c,.LL130                    ;
 377++CA18 ED 53 F8 C7                          ld      (varYX),de
 378++CA1C F1                                   pop     af              ; get back sign
 379++CA1D ED 27 80                             test    $80
 380++CA20 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CA21 2A F8 C7     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CA24                                      NegHL
 382++CA24 AF          >                    xor a
 382++CA25 95          >                    sub l
 382++CA26 6F          >                    ld l,a
 382++CA27 9F          >                    sbc a,a
 382++CA28 94          >                    sub h
 382++CA29 67          >                    ld h,a
 383++CA2A 22 F8 C7                             ld      (varYX),hl
 384++CA2D C9           LL128:                  ret
 385++CA2E              ; Do the following, in this order:  Q = XX12+2
 386++CA2E              ;                                   A = S EOR XX12+3
 387++CA2E              ;                                   (S R) = |S R|
 388++CA2E              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CA2E 3A F3 C7     LL129:                  ld      a,(clipGradient)
 390++CA31 32 E3 97                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CA34 3A E5 97                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CA37 E5 F5                                push    hl,,af
 393++CA39 ED 27 80                             test    $80
 394++CA3C 28 0C                                jr      z,.LL127
 395++CA3E 2A E4 97                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CA41                                      NegHL
 396++CA41 AF          >                    xor a
 396++CA42 95          >                    sub l
 396++CA43 6F          >                    ld l,a
 396++CA44 9F          >                    sbc a,a
 396++CA45 94          >                    sub h
 396++CA46 67          >                    ld h,a
 397++CA47 22 E4 97                             ld      (varRS),hl
 398++CA4A 21 F4 C7     .LL127:                 ld      hl,clipDxySign
 399++CA4D F1                                   pop     af
 400++CA4E AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CA4F E1                                   pop     hl
 402++CA50 C9                                   ret
 403++CA51
# file closed: ././ModelRender/CLIP-LL145.asm
 590+ CA51              ;--------------------------------------------------------------------------------------------------------
 591+ CA51                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CA51              ; Set TransMatTo
   2++CA51              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CA51              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CA51              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CA51              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CA51              CopyRotmatToTransMat:                       ; Tested
   7++CA51 21 28 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++CA54
   9++CA54 11 3D C0                             ld      de,UBnkTransmatSidevX
  10++CA57                                      SixLDIInstrunctions
  10++CA57 ED A0       >                        ldi
  10++CA59 ED A0       >                        ldi
  10++CA5B ED A0       >                        ldi
  10++CA5D ED A0       >                        ldi
  10++CA5F ED A0       >                        ldi
  10++CA61 ED A0       >                        ldi
  11++CA63 21 2E C0                             ld      hl,UBnkrotmatRoofvX
  12++CA66 11 43 C0                             ld      de, UBnkTransmatRoofvX
  13++CA69                                      SixLDIInstrunctions
  13++CA69 ED A0       >                        ldi
  13++CA6B ED A0       >                        ldi
  13++CA6D ED A0       >                        ldi
  13++CA6F ED A0       >                        ldi
  13++CA71 ED A0       >                        ldi
  13++CA73 ED A0       >                        ldi
  14++CA75 21 34 C0                             ld      hl,UBnkrotmatNosevX
  15++CA78 11 49 C0                             ld      de, UBnkTransmatNosevX
  16++CA7B                                      SixLDIInstrunctions
  16++CA7B ED A0       >                        ldi
  16++CA7D ED A0       >                        ldi
  16++CA7F ED A0       >                        ldi
  16++CA81 ED A0       >                        ldi
  16++CA83 ED A0       >                        ldi
  16++CA85 ED A0       >                        ldi
  17++CA87 C9                                   ret
  18++CA88
  19++CA88              CopyRotToTransMacro:    MACRO
  20++CA88 ~                                    ld      hl,UBnkrotmatSidevX
  21++CA88 ~                                    ld      de,UBnkTransmatSidevX
  22++CA88 ~                                    SixLDIInstrunctions
  23++CA88 ~                                    SixLDIInstrunctions
  24++CA88 ~                                    SixLDIInstrunctions
  25++CA88                                      ENDM
  26++CA88
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 592+ CA88                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CA88              TransposeXX12ByShipToXX15:
   2++CA88 2A 88 C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CA8B 7C           		ld		a,h			                        ; get XX12 Sign
   4++CA8C E6 80        		and		$80									; check sign bit on high byte
   5++CA8E 47           		ld		b,a									; and put it in of 12xlo in b
   6++CA8F                      ;110921 debugld      h,0
   7++CA8F 7C                   ld      a,h
   8++CA90 E6 7F                and     $7F
   9++CA92 67                   ld      h,a
  10++CA93                      ;110921 debugld      h,0
  11++CA93 ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++CA97 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CA9A E6 80        		and		$80									; make sure we only have bit 7
  14++CA9C 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CA9D CD F5 AD     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CAA0 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CAA1 67           		ld		h,a
  18++CAA2 22 82 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CAA5              ; ..................................
  20++CAA5 2A 8A C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CAA8 7C           		ld		a,h
  22++CAA9 E6 80        		and		$80
  23++CAAB 47           		ld		b,a
  24++CAAC                      ;110921 debugld      h,0
  25++CAAC 7C                   ld      a,h
  26++CAAD E6 7F                and     $7F
  27++CAAF 67                   ld      h,a
  28++CAB0                      ;110921 debugld      h,0
  29++CAB0 ED 5B 0F C0  		ld		de,(UBnKylo)
  30++CAB4 3A 11 C0     		ld		a,(UBnKysgn)
  31++CAB7 E6 80        		and		$80									; make sure we only have bit 7
  32++CAB9 4F           		ld		c,a
  33++CABA CD F5 AD     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CABD B4           		or		h									; combine sign in A with H
  35++CABE 67           		ld		h,a
  36++CABF 22 84 C0     		ld		(UBnkYScaled),hl
  37++CAC2              ; ..................................
  38++CAC2 2A 8C C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CAC5 7C           		ld		a,h
  40++CAC6 E6 80        		and		$80
  41++CAC8 47           		ld		b,a
  42++CAC9                      ;110921 debugld      h,0
  43++CAC9 7C                   ld      a,h
  44++CACA E6 7F                and     $7F
  45++CACC 67                   ld      h,a
  46++CACD                      ;110921 debugld      h,0
  47++CACD ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++CAD1 3A 14 C0     		ld		a,(UBnKzsgn)
  49++CAD4 E6 80        		and		$80									; make sure we only have bit 7
  50++CAD6 4F           		ld		c,a
  51++CAD7 CD F5 AD     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CADA B4           		or		h									; combine sign in A with H
  53++CADB 67           		ld		h,a
  54++CADC CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CADE 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CAE0 E6 7F                and     $7F                                 ; a = value unsigned
  57++CAE2 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CAE4 7D                   ld      a,l                                 ; get low byte now
  59++CAE5              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CAE5 FE 04       >                        cp      4
  59++CAE7 DA F6 CA    >                        jp		c, ClampZto4
  60++CAEA              NoClampZto4:
  61++CAEA 22 86 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CAED 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CAEE 32 00 98             ld      (varT),a
  64++CAF1 7C           		ld		a,h
  65++CAF2 32 E2 97             ld      (varU),a
  66++CAF5 C9           		ret
  67++CAF6              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CAF6 21 04 00     		ld		hl,4
  69++CAF9 22 86 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CAFC 7D           		ld		a,l
  71++CAFD 32 00 98             ld      (varT),a                            ;                                                                           ;;;
  72++CB00 7C           		ld		a,h
  73++CB01 32 E2 97             ld      (varU),a 						; compatibility for now
  74++CB04 C9           		ret
  75++CB05
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 593+ CB05                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CB05              ScaleNodeTo8Bit:								; TODO make signed
   2++CB05 ED 4B 86 C0  	ld			bc,(UBnkZScaled)
   3++CB09 2A 82 C0     	ld			hl,(UBnkXScaled)
   4++CB0C ED 5B 84 C0  	ld			de,(UBnkYScaled)
   5++CB10              SetABSbc:
   6++CB10 78           	ld			a,b
   7++CB11 DD 67        	ld			ixh,a
   8++CB13 E6 7F        	and			SignMask8Bit
   9++CB15 47           	ld			b,a									; bc = ABS bc
  10++CB16              SetABShl:
  11++CB16 7C           	ld			a,h
  12++CB17 DD 6F        	ld			ixl,a
  13++CB19 E6 7F        	and			SignMask8Bit
  14++CB1B 67           	ld			h,a									; hl = ABS hl
  15++CB1C              SetABSde:
  16++CB1C 7A           	ld			a,d
  17++CB1D FD 67        	ld			iyh,a
  18++CB1F E6 7F        	and			SignMask8Bit
  19++CB21 57           	ld			d,a									; de = ABS de
  20++CB22              ScaleNodeTo8BitLoop:
  21++CB22 78               ld          a,b		                            ; U	\ z hi
  22++CB23 B4           	or			h                                   ; XX15+1	\ x hi
  23++CB24 B2           	or			d                                   ; XX15+4	\ y hi
  24++CB25 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CB27                  ShiftHLRight1
  25++CB27 CB 3C       >			   srl h
  25++CB29 CB 1D       >			   rr  l
  26++CB2B                  ShiftDERight1
  26++CB2B CB 3A       >			   srl d
  26++CB2D CB 1B       >			   rr  e
  27++CB2F              	ShiftBCRight1
  27++CB2F CB 38       >			   srl b
  27++CB31 CB 19       >			   rr  c
  28++CB33 C3 22 CB         jp          ScaleNodeTo8BitLoop
  29++CB36              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CB36 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CB38 E6 80        	and			SignOnly8Bit
  32++CB3A B0           	or			b
  33++CB3B 47           	ld			b,a
  34++CB3C              SignforHL:
  35++CB3C DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CB3E E6 80        	and			SignOnly8Bit
  37++CB40 B4           	or			h
  38++CB41 67           	ld			h,a
  39++CB42              SignforDE:
  40++CB42 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CB44 E6 80        	and			SignOnly8Bit
  42++CB46 B2           	or			d
  43++CB47 57           	ld			d,a
  44++CB48              SignsDoneSaveResult:
  45++CB48 ED 43 86 C0  	ld			(UBnkZScaled),bc
  46++CB4C 22 82 C0     	ld			(UBnkXScaled),hl
  47++CB4F ED 53 84 C0  	ld			(UBnkYScaled),de
  48++CB53 78           	ld			a,b
  49++CB54 32 E2 97     	ld			(varU),a
  50++CB57 79           	ld			a,c
  51++CB58 32 00 98     	ld			(varT),a
  52++CB5B C9           	ret
  53++CB5C
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 594+ CB5C
 595+ CB5C              ;--------------------------------------------------------------------------------------------------------
 596+ CB5C 21 AF C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 597+ CB5F ED 31                                add     hl,a
 598+ CB61 3E FF                                ld      a,$FF
 599+ CB63 77                                   ld      (hl),a
 600+ CB64 C9                                   ret
 601+ CB65              ;--------------------------------------------------------------------------------------------------------
 602+ CB65 21 AF C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 603+ CB68 ED 31                                add     hl,a
 604+ CB6A AF                                   xor     a
 605+ CB6B 77                                   ld      (hl),a
 606+ CB6C C9                                   ret
 607+ CB6D              ;--------------------------------------------------------------------------------------------------------
 608+ CB6D 3A 17 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 609+ CB70 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 610+ CB72 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 611+ CB74 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 612+ CB75 21 AF C0                             ld      hl,UbnkFaceVisArray
 613+ CB78 3E FF                                ld      a,$FF
 614+ CB7A              SetAllFacesVisibleLoop:
 615+ CB7A 77           EE30:                   ld      (hl),a
 616+ CB7B 23                                   inc     hl
 617+ CB7C 10 FC                                djnz    SetAllFacesVisibleLoop
 618+ CB7E C9                                   ret
 619+ CB7F              ;--------------------------------------------------------------------------------------------------------
 620+ CB7F 3A 17 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 621+ CB82 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 622+ CB84 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 623+ CB86 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 624+ CB87 06 10                                ld      b,16
 625+ CB89 21 AF C0                             ld      hl,UbnkFaceVisArray
 626+ CB8C 3E 00                                ld      a,$00
 627+ CB8E 77           SetAllFacesHiddenLoop:  ld      (hl),a
 628+ CB8F 23                                   inc     hl
 629+ CB90 10 FC                                djnz    SetAllFacesHiddenLoop
 630+ CB92 C9                                   ret
 631+ CB93
 632+ CB93              ;;;;X = normal scale
 633+ CB93              ;;;;ZtempHi = zhi
 634+ CB93              ;;;;......................................................
 635+ CB93              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 636+ CB93              ;;;;  Loop                                              ::LL90
 637+ CB93              ;;;;     inc X
 638+ CB93              ;;;;     divide X, Y & ZtempHiLo by 2
 639+ CB93              ;;;;  Until ZtempHi = 0
 640+ CB93              ;;;;......................................................
 641+ CB93              ;-LL21---------------------------------------------------------------------------------------------------
 642+ CB93                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CB93              ;divdide by 16 using undocumented instrunctions
   2++CB93              Norm256mulAdivQ:
   3++CB93 47               ld      b,a
   4++CB94 0E 00            ld      c,0
   5++CB96 16 00            ld      d,0
   6++CB98 3A E3 97         ld      a,(varQ)
   7++CB9B 5F               ld      e,a
   8++CB9C              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CB9C              ;Output: BC = Quotient, HL = Remainder
  10++CB9C              NormDIV16UNDOC:
  11++CB9C 21 00 00         ld      hl,0
  12++CB9F 78               ld      a,b
  13++CBA0 06 10            ld      b,16
  14++CBA2              NormDIV16UNDOCLOOP:
  15++CBA2 CB 31        	sll	    c		; unroll 16 times
  16++CBA4 17           	rla	    		; ...
  17++CBA5 ED 6A        	adc	    hl,hl		; ...
  18++CBA7 ED 52        	sbc	    hl,de		; ...
  19++CBA9 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CBAB 19           	add	    hl,de		; ...
  21++CBAC 0D           	dec	    c		; ...
  22++CBAD              NormDIV16UNDOCSKIP:
  23++CBAD 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CBAF 79               ld      a,c
  25++CBB0 32 E4 97         ld      (varR),a
  26++CBB3 C9               ret
  27++CBB4
  28++CBB4              ; Tested OK
  29++CBB4              NormaliseTransMat:
  30++CBB4              ;LL21
  31++CBB4 21 4E C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++CBB7 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++CBB9 79                   ld      a,c
  34++CBBA 32 E3 97             ld      (varQ),a                    ; set up varQ
  35++CBBD 06 09                ld      b,9                         ; total of 9 elements to transform
  36++CBBF              LL21Loop:
  37++CBBF 56                   ld      d,(hl)
  38++CBC0 2B                   dec     hl
  39++CBC1 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++CBC2                      ShiftDELeft1                        ; De = DE * 2
  40++CBC2 CB 23       >			   sla e
  40++CBC4 CB 12       >			   rl  d
  41++CBC6 7A                   ld      a,d                         ; a = hi byte after shifting
  42++CBC7 E5           		push	hl
  43++CBC8 C5           		push	bc
  44++CBC9 CD 93 CB             call    Norm256mulAdivQ
  45++CBCC              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++CBCC 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++CBCD C1           		pop		bc
  48++CBCE E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++CBCF 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++CBD0 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++CBD1 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++CBD3 C9                   ret
  53++CBD4
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 643+ CBD4              ;-LL91---------------------------------------------------------------------------------------------------
 644+ CBD4
 645+ CBD4              ; Now we have
 646+ CBD4              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 647+ CBD4              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 648+ CBD4              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 649+ CBD4              ;
 650+ CBD4              ;--------------------------------------------------------------------------------------------------------
 651+ CBD4                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CBD4              ; TESTEDOK
   2++CBD4
   3++CBD4              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CBD4              ;        ld      a,(XX17)
   5++CBD4              ;        ld      ixl,a
   6++CBD4              ;        ld      ixh,9
   7++CBD4              ;        ld      hl,UBnkTransInv0x
   8++CBD4              ;        ld      a,(hl)
   9++CBD4              ;ScaleNode:
  10++CBD4              ;        ld      b,ixl
  11++CBD4              ;ScaleNodeLoop:
  12++CBD4              ;        sla      a
  13++CBD4              ;        djnz    ScaleNodeLoop
  14++CBD4              ;        ld      (hl),a
  15++CBD4              ;        inc     hl
  16++CBD4              ;        inc     hl
  17++CBD4              ;        dec     ixh
  18++CBD4              ;        jr      nz,ScaleNode
  19++CBD4              ;        ret
  20++CBD4
  21++CBD4
  22++CBD4              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CBD4              ; we coudl combine this with move to transmat later as an optimisation
  24++CBD4              ; INPUT - All Scaled
  25++CBD4              ;  They transmat has already been put into side, roof nose order
  26++CBD4              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CBD4              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CBD4              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CBD4              ; OUTPUT
  30++CBD4              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CBD4              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CBD4              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CBD4              ; First all side values become compoment 0 of each vector
  34++CBD4 2A 3D C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CBD7 ED 5B 43 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CBDB ED 4B 49 C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CBDF 22 55 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CBE2 ED 53 57 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CBE6 ED 43 59 C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CBEA 2A 3F C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CBED ED 5B 45 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CBF1 ED 4B 4B C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CBF5 22 5D C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CBF8 ED 53 5F C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CBFC ED 43 61 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CC00 2A 41 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CC03 ED 5B 47 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CC07 ED 4B 4D C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CC0B 22 65 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CC0E ED 53 67 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CC12 ED 43 69 C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CC16 C9                   ret
  53++CC17
  54++CC17
# file closed: ./Universe/Ships/InverseXX16.asm
 652+ CC17              ;--------------------------------------------------------------------------------------------------------
 653+ CC17              ;--------------------------------------------------------------------------------------------------------
 654+ CC17              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 655+ CC17              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 656+ CC17              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 657+ CC17              ; Returns
 658+ CC17              ;
 659+ CC17              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 660+ CC17              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 661+ CC17              ;
 662+ CC17              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 663+ CC17              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 664+ CC17              ;
 665+ CC17              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 666+ CC17              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 667+ CC17              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 668+ CC17 ~                                    ld      c,0
 669+ CC17 ~                                    ld      a,param3                      ;
 670+ CC17 ~                                    bit     7,a
 671+ CC17 ~                                    jr      z,.val2Pos
 672+ CC17 ~            ;HandleSignebits
 673+ CC17 ~                                    neg
 674+ CC17 ~                                    ld      c,$80
 675+ CC17 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 676+ CC17 ~                                    ld      a,param2                        ; A = XX16 element
 677+ CC17 ~                                    bit     7,a
 678+ CC17 ~                                    jr      z,.val1Pos
 679+ CC17 ~            ;HandleSignebits
 680+ CC17 ~                                    neg
 681+ CC17 ~                                    ld      b,a
 682+ CC17 ~                                    ld      a,c
 683+ CC17 ~                                    xor     $80
 684+ CC17 ~                                    ld      c,a
 685+ CC17 ~                                    ld      a,b
 686+ CC17 ~            .val1Pos:               ld      d,a
 687+ CC17 ~            ;AequAmulQdiv256:
 688+ CC17 ~                                    mul
 689+ CC17 ~                                    ld      a,c
 690+ CC17 ~                                    bit     7,a
 691+ CC17 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 692+ CC17 ~                                    jr      z,.resultPos
 693+ CC17 ~                                    neg
 694+ CC17 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 695+ CC17                                      ENDM
 696+ CC17
 697+ CC17
 698+ CC17               ; TESTEDOK
 699+ CC17              XX12DotOneRow:
 700+ CC17              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 700+ CC17 3A 82 C0    >                        ld      a,(UBnkXScaled)                        ;
 700+ CC1A 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 700+ CC1B 7E          >                        ld      a,(hl)                        ; A = XX16 element
 700+ CC1C 57          >                        ld      d,a
 700+ CC1D ED 30       >                        mul
 700+ CC1F 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 700+ CC20 32 00 98    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 701+ CC23 23                                   inc     hl                                  ; move to sign byte
 702+ CC24              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 702+ CC24 3A 83 C0    >                        ld      a,(UBnkXScaledSign)
 702+ CC27 AE          >                        xor     (hl)
 703+ CC28 32 E5 97                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 704+ CC2B 23                                   inc     hl
 705+ CC2C              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 705+ CC2C 3A 84 C0    >                        ld      a,(UBnkYScaled)                        ;
 705+ CC2F 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 705+ CC30 7E          >                        ld      a,(hl)                        ; A = XX16 element
 705+ CC31 57          >                        ld      d,a
 705+ CC32 ED 30       >                        mul
 705+ CC34 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 705+ CC35 32 E3 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 706+ CC38                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 706+ CC38 3A 00 98    >                        ld       a,(varT)
 706+ CC3B 32 E4 97    >                        ld       (varR),a
 707+ CC3E 23                                   inc     hl
 708+ CC3F                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 708+ CC3F 3A 85 C0    >                        ld      a,(UBnkYScaledSign)
 708+ CC42 AE          >                        xor     (hl)
 709+ CC43              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 710+ CC43 E5           STequSRplusAQ           push    hl
 711+ CC44 CD 13 AF                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 712+ CC47 E1                                   pop     hl
 713+ CC48 32 00 98                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 714+ CC4B 23                                   inc     hl
 715+ CC4C              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 715+ CC4C 3A 86 C0    >                        ld      a,(UBnkZScaled)                        ;
 715+ CC4F 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 715+ CC50 7E          >                        ld      a,(hl)                        ; A = XX16 element
 715+ CC51 57          >                        ld      d,a
 715+ CC52 ED 30       >                        mul
 715+ CC54 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 715+ CC55 32 E3 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 716+ CC58                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 716+ CC58 3A 00 98    >                        ld       a,(varT)
 716+ CC5B 32 E4 97    >                        ld       (varR),a
 717+ CC5E 23                                   inc     hl
 718+ CC5F                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 718+ CC5F 3A 87 C0    >                        ld      a,(UBnkZScaledSign)
 718+ CC62 AE          >                        xor     (hl)
 719+ CC63              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 720+ CC63 CD 13 AF                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 721+ CC66              ; Now we exit with A = result S = Sign
 722+ CC66 C9                                   ret
 723+ CC67
 724+ CC67
 725+ CC67              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 726+ CC67              ;TESTED OK
 727+ CC67              XX12EquXX15DotProductXX16:
 728+ CC67              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 729+ CC67 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 730+ CC6A 21 3D C0                             ld      hl,UBnkTransmatSidevX
 731+ CC6D CD 17 CC                             call    XX12DotOneRow
 732+ CC70 32 88 C0                             ld      (UBnkXX12xLo),a
 733+ CC73 3A E5 97                             ld      a,(varS)
 734+ CC76 32 89 C0                             ld      (UBnkXX12xSign),a
 735+ CC79 21 43 C0                             ld      hl,UBnkTransmatRoofvX
 736+ CC7C CD 17 CC                             call    XX12DotOneRow
 737+ CC7F 32 8A C0                             ld      (UBnkXX12yLo),a
 738+ CC82 3A E5 97                             ld      a,(varS)
 739+ CC85 32 8B C0                             ld      (UBnkXX12ySign),a
 740+ CC88 21 49 C0                             ld      hl,UBnkTransmatNosevX
 741+ CC8B CD 17 CC                             call    XX12DotOneRow
 742+ CC8E 32 8C C0                             ld      (UBnkXX12zLo),a
 743+ CC91 3A E5 97                             ld      a,(varS)
 744+ CC94 32 8D C0                             ld      (UBnkXX12zSign),a
 745+ CC97 C9                                   ret
 746+ CC98              ;--------------------------------------------------------------------------------------------------------
 747+ CC98                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CC98              CopyXX12ScaledToXX18:
   2++CC98              CopyResultToDrawCam:
   3++CC98                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CC98 3A 88 C0    >                        ld       a,(XX12)
   3++CC9B 32 76 C0    >                        ld       (XX18),a
   4++CC9E                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CC9E 3A 89 C0    >                        ld       a,(XX12+1)
   4++CCA1 32 78 C0    >                        ld       (XX18+2),a
   5++CCA4                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CCA4 3A 8A C0    >                        ld       a,(XX12+2)
   5++CCA7 32 79 C0    >                        ld       (XX18+3),a
   6++CCAA                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CCAA 3A 8B C0    >                        ld       a,(XX12+3)
   6++CCAD 32 7B C0    >                        ld       (XX18+5),a
   7++CCB0                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CCB0 3A 8C C0    >                        ld       a,(XX12+4)
   7++CCB3 32 7C C0    >                        ld       (XX18+6),a
   8++CCB6                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CCB6 3A 8D C0    >                        ld       a,(XX12+5)
   8++CCB9 32 7E C0    >                        ld       (XX18+8),a
   9++CCBC C9                   ret
  10++CCBD
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 748+ CCBD                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CCBD              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CCBD 3A 88 C0    >                        ld       a,(UBnkXX12xLo)
   1++CCC0 32 82 C0    >                        ld       (UBnkXScaled),a
   2++CCC3                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CCC3 3A 89 C0    >                        ld       a,(UBnkXX12xSign)
   2++CCC6 32 83 C0    >                        ld       (UBnkXScaledSign),a
   3++CCC9                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CCC9 3A 8A C0    >                        ld       a,(UBnkXX12yLo)
   3++CCCC 32 84 C0    >                        ld       (UBnkYScaled),a
   4++CCCF                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CCCF 3A 8B C0    >                        ld       a,(UBnkXX12ySign)
   4++CCD2 32 85 C0    >                        ld       (UBnkYScaledSign),a
   5++CCD5                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CCD5 3A 8C C0    >                        ld       a,(UBnkXX12zLo)
   5++CCD8 32 86 C0    >                        ld       (UBnkZScaled),a
   6++CCDB                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CCDB 3A 8D C0    >                        ld       a,(UBnkXX12zSign)
   6++CCDE 32 87 C0    >                        ld       (UBnkZScaledSign),a
   7++CCE1 C9                                   ret
   8++CCE2
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 749+ CCE2                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CCE2              CopyXX18toXX15:
   2++CCE2              CopyDrawCamToScaled:
   3++CCE2                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CCE2 3A 76 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CCE5 32 82 C0    >                        ld       (UBnkXScaled),a
   4++CCE8                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CCE8 3A 78 C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CCEB 32 83 C0    >                        ld       (UBnkXScaledSign),a
   5++CCEE                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CCEE 3A 79 C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CCF1 32 84 C0    >                        ld       (UBnkYScaled),a
   6++CCF4                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CCF4 3A 7B C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CCF7 32 85 C0    >                        ld       (UBnkYScaledSign),a
   7++CCFA                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CCFA 3A 7C C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CCFD 32 86 C0    >                        ld       (UBnkZScaled),a
   8++CD00                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CD00 3A 7E C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CD03 32 87 C0    >                        ld       (UBnkZScaledSign),a
   9++CD06 C9                   ret
  10++CD07
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 750+ CD07                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CD07 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++CD0A 11 76 C0                             ld      de,UBnkDrawCam0xLo
   3++CD0D                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++CD0D ED A0       >		                ldi
   3++CD0F ED A0       >		                ldi
   3++CD11 ED A0       >		                ldi
   3++CD13 ED A0       >		                ldi
   3++CD15 ED A0       >		                ldi
   3++CD17 ED A0       >		                ldi
   3++CD19 ED A0       >		                ldi
   3++CD1B ED A0       >		                ldi
   3++CD1D ED A0       >		                ldi
   4++CD1F C9                                   ret
   5++CD20
   6++CD20              CopyCameraToXX15Signed:
   7++CD20 2A 76 C0             ld  hl,(UBnkDrawCam0xLo)
   8++CD23 3A 78 C0             ld  a,(UBnkDrawCam0xSgn)
   9++CD26 B4                   or  h
  10++CD27 67                   ld  h,a
  11++CD28 22 82 C0             ld  (UBnkXScaled),hl
  12++CD2B 2A 79 C0             ld  hl,(UBnkDrawCam0yLo)
  13++CD2E 3A 7B C0             ld  a,(UBnkDrawCam0ySgn)
  14++CD31 B4                   or  h
  15++CD32 67                   ld  h,a
  16++CD33 22 84 C0             ld  (UBnkYScaled),hl
  17++CD36 2A 7C C0             ld  hl,(UBnkDrawCam0zLo)
  18++CD39 3A 7E C0             ld  a,(UBnkDrawCam0zSgn)
  19++CD3C B4                   or  h
  20++CD3D 67                   ld  h,a
  21++CD3E 22 86 C0             ld  (UBnkZScaled),hl
  22++CD41 C9                   ret
  23++CD42
  24++CD42              CopyXX18ScaledToXX15:
  25++CD42              CopyDrawCamToScaledMatrix:
  26++CD42                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++CD42 3A 7E C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++CD45 32 87 C0    >                        ld       (UBnkZScaledSign),a
  27++CD48                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++CD48 3A 76 C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++CD4B 32 82 C0    >                        ld       (UBnkXScaled),a
  28++CD4E                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++CD4E 3A 78 C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++CD51 32 83 C0    >                        ld       (UBnkXScaledSign),a
  29++CD54                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++CD54 3A 79 C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++CD57 32 84 C0    >                        ld       (UBnkYScaled),a
  30++CD5A                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++CD5A 3A 7B C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++CD5D 32 85 C0    >                        ld       (UBnkYScaledSign),a
  31++CD60                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++CD60 3A 7C C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++CD63 32 86 C0    >                        ld       (UBnkZScaled),a
  32++CD66 C9                   ret
  33++CD67
  34++CD67              CopyXX15ToXX18Scaled:
  35++CD67              CopyScaledMatrixToDrawCam:
  36++CD67                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++CD67 3A 87 C0    >                        ld       a,(UBnkZScaledSign)
  36++CD6A 32 7E C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++CD6D                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++CD6D 3A 82 C0    >                        ld       a,(UBnkXScaled)
  37++CD70 32 76 C0    >                        ld       (UBnkDrawCam0xLo),a
  38++CD73                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++CD73 3A 83 C0    >                        ld       a,(UBnkXScaledSign)
  38++CD76 32 78 C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++CD79                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++CD79 3A 84 C0    >                        ld       a,(UBnkYScaled)
  39++CD7C 32 79 C0    >                        ld       (UBnkDrawCam0yLo),a
  40++CD7F                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++CD7F 3A 85 C0    >                        ld       a,(UBnkYScaledSign)
  40++CD82 32 7B C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++CD85                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++CD85 3A 86 C0    >                        ld       a,(UBnkZScaled)
  41++CD88 32 7C C0    >                        ld       (UBnkDrawCam0zLo),a
  42++CD8B C9                   ret
  43++CD8C
  44++CD8C
  45++CD8C              XX15EquXX15AddXX18:
  46++CD8C              LL94Z:
  47++CD8C 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++CD8E 16 00                ld      d,0                                                     ;
  49++CD90 3A 86 C0             ld      a,(UBnkZScaled)                                         ;
  50++CD93 6F                   ld      l,a                                                     ;
  51++CD94 3A 87 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++CD97 47                   ld      b,a                                                     ;
  53++CD98 3A 7C C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++CD9B 5F                   ld      e,a                                                     ;
  55++CD9C 3A 7E C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++CD9F 4F                   ld      c,a                                                     ;
  57++CDA0 CD F5 AD             call    ADDHLDESignBC                                           ;
  58++CDA3 47                   ld      b,a                                                     ;
  59++CDA4 7C                   ld      a,h                                                     ;
  60++CDA5 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++CDA6 32 87 C0             ld      (UBnkZScaledSign),a                                     ;
  62++CDA9 7D                   ld      a,l                                                     ;
  63++CDAA 32 86 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++CDAD              LL94X:
  65++CDAD 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++CDAF 16 00                ld      d,0                                                     ;
  67++CDB1 3A 82 C0             ld      a,(UBnkXScaled)                                         ;
  68++CDB4 6F                   ld      l,a                                                     ;
  69++CDB5 3A 83 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++CDB8 47                   ld      b,a                                                     ;
  71++CDB9 3A 76 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++CDBC 5F                   ld      e,a                                                     ;
  73++CDBD 3A 78 C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++CDC0 4F                   ld      c,a                                                     ;
  75++CDC1 CD F5 AD             call    ADDHLDESignBC                                           ;
  76++CDC4 47                   ld      b,a                                                     ;
  77++CDC5 7C                   ld      a,h                                                     ;
  78++CDC6 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++CDC7 32 83 C0             ld      (UBnkXScaledSign),a                                     ;
  80++CDCA 7D                   ld      a,l                                                     ;
  81++CDCB 32 82 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++CDCE              LL94Y:
  83++CDCE 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++CDD0 16 00                ld      d,0                                                     ;
  85++CDD2 3A 84 C0             ld      a,(UBnkYScaled)                                         ;
  86++CDD5 6F                   ld      l,a                                                     ;
  87++CDD6 3A 85 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++CDD9 47                   ld      b,a                                                     ;
  89++CDDA 3A 79 C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++CDDD 5F                   ld      e,a                                                     ;
  91++CDDE 3A 7B C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++CDE1 4F                   ld      c,a                                                     ;
  93++CDE2 CD F5 AD             call    ADDHLDESignBC                                           ;
  94++CDE5 47                   ld      b,a                                                     ;
  95++CDE6 7C                   ld      a,h                                                     ;
  96++CDE7 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++CDE8 32 85 C0             ld      (UBnkYScaledSign),a                                     ;
  98++CDEB 7D                   ld      a,l                                                     ;
  99++CDEC 32 84 C0             ld      (UBnkYScaled),a                                         ;
 100++CDEF C9                   ret
 101++CDF0
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 751+ CDF0                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++CDF0              CopyXX12ToScaled:
   2++CDF0              CopyResultToScaled:
   3++CDF0                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CDF0 3A 88 C0    >                        ld       a,(XX12+0)
   3++CDF3 32 82 C0    >                        ld       (UBnkXScaled),a
   4++CDF6                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CDF6 3A 8A C0    >                        ld       a,(XX12+2)
   4++CDF9 32 84 C0    >                        ld       (UBnkYScaled),a
   5++CDFC                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CDFC 3A 8C C0    >                        ld       a,(XX12+4)
   5++CDFF 32 86 C0    >                        ld       (UBnkZScaled),a
   6++CE02 C9                   ret
   7++CE03
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 752+ CE03              ;--------------------------------------------------------------------------------------------------------
 753+ CE03                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++CE03              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CE03              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CE03              ;;; S = XX12 XSign Xor XX15 XSign
   4++CE03              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CE03              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CE03              ;;; R = T
   7++CE03              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CE03              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CE03              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CE03              ;;; Q = A * Q /256 usigned (zdot)
  11++CE03              ;;; R = T
  12++CE03              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CE03
  14++CE03
  15++CE03
  16++CE03
  17++CE03
  18++CE03              MacroAequDxEdiv256usgn:	MACRO
  19++CE03 ~            						mul
  20++CE03 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CE03              						ENDM
  22++CE03              DotProductXX12XX15:
  23++CE03 3A 88 C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CE06                      JumpIfAIsZero dotxskipzero
  24++CE06 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CE07 CA 24 CE    >                        jp	z, dotxskipzero
  25++CE0A 5F                   ld          e,a
  26++CE0B 3A 82 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CE0E 57                   ld          d,a                     ; de = xx12 x signed
  28++CE0F                      JumpIfAIsZero dotxskipzero
  28++CE0F A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CE10 CA 24 CE    >                        jp	z, dotxskipzero
  29++CE13 ED 30        		mul
  30++CE15 42                   ld          b,d                     ; b = result
  31++CE16 3A 89 C0             ld          a,(UBnkXX12xSign)
  32++CE19 21 83 C0             ld          hl,UBnkXScaledSign
  33++CE1C AE                   xor         (hl)
  34++CE1D E6 80                and         $80                     ; so sign bit only
  35++CE1F FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CE21 C3 28 CE             jp          dotmuly
  37++CE24              dotxskipzero:
  38++CE24 AF                   xor         a
  39++CE25 47                   ld          b,a
  40++CE26 FD 67                ld          iyh,a
  41++CE28              dotmuly:
  42++CE28              ; now we have b = XX12 x &d  norm x signed
  43++CE28 3A 8A C0             ld          a,(UBnkXX12yLo)
  44++CE2B                      JumpIfAIsZero dotyskipzero
  44++CE2B A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++CE2C CA 4B CE    >                        jp	z, dotyskipzero
  45++CE2F 5F                   ld          e,a
  46++CE30 3A 84 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++CE33                      JumpIfAIsZero dotyskipzero
  47++CE33 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++CE34 CA 4B CE    >                        jp	z, dotyskipzero
  48++CE37 57                   ld          d,a                     ; de = xx12 x signed
  49++CE38 ED 30                mul
  50++CE3A 4A                   ld          c,d                     ; c = result
  51++CE3B DD 69                ld          ixl,c
  52++CE3D 3A 8B C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++CE40 21 85 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++CE43 AE                   xor         (hl)                    ; XX15+3
  55++CE44 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++CE46 DD 67                ld          ixh,a
  57++CE48 C3 4F CE             jp          dotaddxy
  58++CE4B              dotyskipzero:
  59++CE4B AF                   xor         a
  60++CE4C 4F                   ld          c,a
  61++CE4D DD 67                ld          ixh,a
  62++CE4F              dotaddxy:
  63++CE4F              ; Optimise later as this is 16 bit
  64++CE4F 26 00                ld          h,0                     ;
  65++CE51 68                   ld          l,b                     ; hl = xlo + x scaled
  66++CE52 16 00                ld          d,0                     ;
  67++CE54 59                   ld          e,c                     ; de = ylo + yscaled
  68++CE55 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++CE57 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++CE58 CD F5 AD             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++CE5B 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++CE5C 3A 8C C0             ld          a,(UBnkXX12zLo)         ;
  73++CE5F                      JumpIfAIsZero dotzskipzero
  73++CE5F A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++CE60 CA 85 CE    >                        jp	z, dotzskipzero
  74++CE63 5F                   ld          e,a                     ;
  75++CE64 3A 86 C0             ld          a,(UBnkZScaled)         ;
  76++CE67                      JumpIfAIsZero dotzskipzero
  76++CE67 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++CE68 CA 85 CE    >                        jp	z, dotzskipzero
  77++CE6B 57                   ld          d,a
  78++CE6C ED 30                mul
  79++CE6E E5                   push        hl                      ; save prev result
  80++CE6F 3A 87 C0             ld          a,(UBnkZScaledSign)
  81++CE72 21 8D C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++CE75 AE                   xor         (hl)                    ; hi sign
  83++CE76 E6 80                and         $80                     ; a = sign of multiply
  84++CE78 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++CE79 E1                   pop         hl
  86++CE7A 5A                   ld          e,d
  87++CE7B 16 00                ld          d,0
  88++CE7D CD F5 AD             call ADDHLDESignBC
  89++CE80 32 E5 97             ld          (varS),a
  90++CE83 7D                   ld          a,l
  91++CE84 C9                   ret                                 ; returns with A = value, varS = sign
  92++CE85              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++CE85 78                   ld          a,b
  94++CE86 32 E5 97             ld          (varS),a
  95++CE89 7D                   ld          a,l
  96++CE8A C9                   ret
  97++CE8B              ;;;;       DotProductXX12XX15:
  98++CE8B              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++CE8B              ;;;;       ld          e,a
 100++CE8B              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++CE8B              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++CE8B              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++CE8B              ;;;;		mul
 104++CE8B              ;;;;       ld          b,d                     ; b as var T
 105++CE8B              ;;;;       ld          a,(UBnkXX12xSign)
 106++CE8B              ;;;;       ld          hl,UBnkXScaledSign
 107++CE8B              ;;;;       xor         (hl)
 108++CE8B              ;;;;       and         $80                     ; so sign bit only
 109++CE8B              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++CE8B              ;;;; now we have b = XX12 x & norm x signed
 111++CE8B              ;;;; by here B = xlo & xscaled C = result sign
 112++CE8B              ;;;;       ld          a,(UBnkXX12yLo)
 113++CE8B              ;;;;       ld          e,a
 114++CE8B              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++CE8B              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++CE8B              ;;;;       mul
 117++CE8B              ;;;;       ld          a,d
 118++CE8B              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++CE8B              ;;;;       ld          a,b                     ; get back T from above held in b
 120++CE8B              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++CE8B              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++CE8B              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++CE8B              ;;;;       xor         (hl)                    ; XX15+3
 124++CE8B              ;;;;       and         $80
 125++CE8B              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++CE8B              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++CE8B              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++CE8B              ;;;;       ld          e,a                     ; use e as var Q
 129++CE8B              ;;;;       ld          a,(UBnkZScaled)         ;
 130++CE8B              ;;;;       ld          d,a
 131++CE8B              ;;;;       mul
 132++CE8B              ;;;;       ld          a,d
 133++CE8B              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++CE8B              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++CE8B              ;;;;       ld          a,(UBnkZScaledSign)
 136++CE8B              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++CE8B              ;;;;       xor         (hl)                    ; hi sign
 138++CE8B              ;;;;       and         $80
 139++CE8B              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++CE8B              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++CE8B
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 754+ CE8B              ;--------------------------------------------------------------------------------------------------------
 755+ CE8B              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 756+ CE8B                                      include "Universe/Ships/ScaleNormal.asm"
# file opened: ./Universe/Ships/ScaleNormal.asm
   1++CE8B              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++CE8B              ; returns with XX15 scaled by Q but also z scaled in a register
   3++CE8B              ScaleNormal:
   4++CE8B              LL93:
   5++CE8B 3A EA 97             ld      a,(XX17)                    ; scale--
   6++CE8E DD 6F        		ld		ixl,a
   7++CE90 3A 86 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++CE93 DD 2D        		dec		ixl
   9++CE95 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++CE96              ScaleLoop:
  11++CE96              LL933:
  12++CE96 21 82 C0             ld      hl,XX15
  13++CE99 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++CE9B 23                   inc     hl							; looking at XX15 x sign now
  15++CE9C 23                   inc     hl							; looking at XX15 y Lo now
  16++CE9D CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++CE9F 23           		inc		hl							; looking at XX15 y sign now
  18++CEA0 23           		inc		hl							; looking at XX15 z Lo now
  19++CEA1 CB 3E        		srl		(hl)
  20++CEA3 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++CEA4 DD 2D                dec     ixl                         ; reduce scale
  22++CEA6 F2 96 CE             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++CEA9 C9                   ret
  24++CEAA
# file closed: ./Universe/Ships/ScaleNormal.asm
 757+ CEAA              ;--------------------------------------------------------------------------------------------------------
 758+ CEAA                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++CEAA              ScaleObjectDistance:
   2++CEAA              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++CEAA 3A 1D C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++CEAD 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++CEAE              LL90:                                       ; scaling object distance
   6++CEAE 3A 7D C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++CEB1 47                   ld      b,a                         ; z_hi (yReg)
   8++CEB2                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++CEB2 A7          >                        and     a
   8++CEB3 C8          >                        ret     z
   9++CEB4              LL90Loop:
  10++CEB4              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++CEB4 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++CEB5                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++CEB5 2A 79 C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++CEB8 CB 3C       >                    srl   h
  12++CEBA CB 1D       >                    rr    l
  12++CEBC 22 79 C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++CEBF                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++CEBF 2A 76 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++CEC2 CB 3C       >                    srl   h
  13++CEC4 CB 1D       >                    rr    l
  13++CEC6 22 76 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++CEC9                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++CEC9 2A 7C C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++CECC CB 3C       >                    srl   h
  14++CECE CB 1D       >                    rr    l
  14++CED0 22 7C C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++CED3 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++CED4                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++CED4 FE 00       >                        cp	0
  16++CED6 C2 B4 CE    >                        jp	nz,LL90Loop
  17++CED9 C9                   ret
  18++CEDA
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 759+ CEDA              ;--------------------------------------------------------------------------------------------------------
 760+ CEDA
 761+ CEDA              ; Backface cull
 762+ CEDA              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 763+ CEDA              ; normal vector = cross product of ship ccordinates
 764+ CEDA              ;
 765+ CEDA
 766+ CEDA                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++CEDA 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CEDB 47                                   ld      b,a                                                    ;;;
   3++CEDC E6 80                                and     $80
   4++CEDE 32 83 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CEE1 78                                   ld      a,b
   6++CEE2 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CEE4 47                                   ld      b,a
   8++CEE5 E6 80                                and     $80
   9++CEE7 32 85 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++CEEA 78                                   ld      a,b
  11++CEEB CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CEED E6 80                                and     $80
  13++CEEF 32 87 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++CEF2 23                                   inc     hl                          ; move to X ccord
  15++CEF3 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CEF4 32 82 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++CEF7 23                                   inc     hl                                                                                                                 ;;;
  18++CEF8 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CEF9 32 84 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++CEFC 23                                   inc     hl                                                                                                                 ;;;
  21++CEFD 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CEFE 32 86 C0                             ld      (UBnkZScaled),a
  23++CF01 C9                                   ret
  24++CF02
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 767+ CF02                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++CF02 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CF03 47                                   ld      b,a                         ; save sign bits to b
   3++CF04 E6 80                                and     $80
   4++CF06 32 89 C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CF09 78                                   ld      a,b
   6++CF0A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CF0C 47                                   ld      b,a
   8++CF0D E6 80                                and     $80
   9++CF0F 32 8B C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++CF12 78                                   ld      a,b
  11++CF13 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CF15 E6 80                                and     $80
  13++CF17 32 8D C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++CF1A 23                                   inc     hl                          ; move to X ccord
  15++CF1B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CF1C 32 88 C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++CF1F 23                                   inc     hl                                                                                                                 ;;;
  18++CF20 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF21 32 8A C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++CF24 23                                   inc     hl                                                                                                                 ;;;
  21++CF25 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF26 32 8C C0                             ld      (UBnkXX12zLo),a
  23++CF29 C9                                   ret
  24++CF2A
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 768+ CF2A              ;--------------------------------------------------------------
 769+ CF2A              ; Original loginc in EE29 (LL9 4 of 12)
 770+ CF2A              ; Enters with XX4 = z distnace scaled to 1 .. 31
 771+ CF2A              ; get number of faces * 4      FaceCntX4
 772+ CF2A              ; return if no faces
 773+ CF2A              ; get Face Normal scale factor FaceScale (XX17)
 774+ CF2A              ; get ship pos z hi     (XX18)
 775+ CF2A              ; While Z hi <> 0
 776+ CF2A              ;    FaceScale = FaceScale + 1           (XX17)
 777+ CF2A              ;    Ship pos y = ship pos y / 2         (XX18)
 778+ CF2A              ;    ship pos x = ship pos x / 2         (XX18)
 779+ CF2A              ;    ship pos z = ship pos z / 2         (XX18)
 780+ CF2A              ; Loop
 781+ CF2A              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 782+ CF2A              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 783+ CF2A              ; Copy XX12 into XX18
 784+ CF2A              ; For each face
 785+ CF2A              ;     Get Face sign and visibility distance byte
 786+ CF2A              ;     if normal visibility range  < XX4
 787+ CF2A              ;        Get Face data into XX12
 788+ CF2A              ;        if FaceScale (XX17) >= 4
 789+ CF2A              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 790+ CF2A              ;        else
 791+ CF2A              ;           Copy FaceScale scaled to X  (XX17)
 792+ CF2A              ;LabelOverflowLoop:
 793+ CF2A              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 794+ CF2A              ;           While X >= 0
 795+ CF2A              ;              X--                                                                                                  ::LL93
 796+ CF2A              ;              if  x >= 0
 797+ CF2A              ;                  XX15x = XX15x / 2
 798+ CF2A              ;                  XX15y = XX15y / 2
 799+ CF2A              ;                  XX15y = XX15y / 2
 800+ CF2A              ;           loop
 801+ CF2A              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 802+ CF2A              ;           if A > 256 (i.e. was overflow)
 803+ CF2A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 804+ CF2A              ;               X = 1
 805+ CF2A              ;               Goto LabelOverflowLoop
 806+ CF2A              ;           else
 807+ CF2A              ;              Scaled (XX15) Z = AddZ
 808+ CF2A              ;           endif
 809+ CF2A              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 810+ CF2A              ;           if A > 256 (i.e. was overflow)
 811+ CF2A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 812+ CF2A              ;               X = 1
 813+ CF2A              ;               Goto LabelOverflowLoop
 814+ CF2A              ;           else
 815+ CF2A              ;              Scaled (XX15) X = AddX
 816+ CF2A              ;           endif
 817+ CF2A              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 818+ CF2A              ;           if A > 256 (i.e. was overflow)
 819+ CF2A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 820+ CF2A              ;               X = 1
 821+ CF2A              ;               Goto LabelOverflowLoop
 822+ CF2A              ;           else
 823+ CF2A              ;              Scaled (XX15) Y = AddY
 824+ CF2A              ;           endif
 825+ CF2A              ;        endif
 826+ CF2A              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 827+ CF2A              ;        if dot product < 0
 828+ CF2A              ;           set face visible
 829+ CF2A              ;        else
 830+ CF2A              ;           set face invisible
 831+ CF2A              ;        end if
 832+ CF2A              ;     else
 833+ CF2A              ;       Set FaceVisibility to true
 834+ CF2A              ;     end if
 835+ CF2A              ; Next Face
 836+ CF2A
 837+ CF2A DD 25        ScaleDownXX15byIXH:     dec     ixh
 838+ CF2C F8                                   ret     m
 839+ CF2D 21 82 C0                             ld      hl,UBnkXScaled
 840+ CF30 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 841+ CF32 23                                   inc     hl                          ; looking at XX15 x sign now
 842+ CF33 23                                   inc     hl                          ; looking at XX15 y Lo now
 843+ CF34 CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 844+ CF36 23                                   inc     hl                          ; looking at XX15 y sign now
 845+ CF37 23                                   inc     hl                          ; looking at XX15 z Lo now
 846+ CF38 CB 3E                                srl     (hl)
 847+ CF3A C3 2A CF                             jp      ScaleDownXX15byIXH
 848+ CF3D C9                                   ret
 849+ CF3E
 850+ CF3E 21 76 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 851+ CF41 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 852+ CF43 23                                   inc     hl                          ; looking at XX18 x sign now
 853+ CF44 23                                   inc     hl                          ; looking at XX18 y Lo now
 854+ CF45 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 855+ CF47 23                                   inc     hl                          ; looking at XX18 y sign now
 856+ CF48 23                                   inc     hl                          ; looking at XX18 z Lo now
 857+ CF49 CB 3E                                srl     (hl)
 858+ CF4B C9                                   ret
 859+ CF4C
 860+ CF4C              ;line of sight vector = [x y z] + face normal vector
 861+ CF4C
 862+ CF4C              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 863+ CF4C              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 864+ CF4C              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 865+ CF4C              ;
 866+ CF4C              ;--------------------------------------------------------------
 867+ CF4C              ; line of sight (eye outwards dot face normal vector < 0
 868+ CF4C              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 869+ CF4C              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 870+ CF4C              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 871+ CF4C
 872+ CF4C              RotateXX15ByTransMatXX16:
 873+ CF4C 21 3D C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 874+ CF4F CD C7 8E                             call    XX12ProcessOneRow
 875+ CF52 47                                   ld      b,a                                 ; get
 876+ CF53 7D                                   ld      a,l
 877+ CF54 B0                                   or      b
 878+ CF55 32 89 C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 879+ CF58 7D                                   ld      a,l
 880+ CF59 32 88 C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 881+ CF5C
 882+ CF5C 21 43 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 883+ CF5F CD C7 8E                             call    XX12ProcessOneRow
 884+ CF62 47                                   ld      b,a                                 ; get
 885+ CF63 7D                                   ld      a,l
 886+ CF64 B0                                   or      b
 887+ CF65 32 8B C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 888+ CF68 7D                                   ld      a,l
 889+ CF69 32 8A C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 890+ CF6C
 891+ CF6C 21 49 C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 892+ CF6F CD C7 8E                             call    XX12ProcessOneRow
 893+ CF72 47                                   ld      b,a                                 ; get
 894+ CF73 7D                                   ld      a,l
 895+ CF74 B0                                   or      b
 896+ CF75 32 8D C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 897+ CF78 7D                                   ld      a,l
 898+ CF79 32 8C C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 899+ CF7C C9                                   ret
 900+ CF7D
 901+ CF7D                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++CF7D 00           CurrentNormIdx  DB 0
   2++CF7E              ; SomeFacesVisible:
   3++CF7E              ; EE29:
   4++CF7E
   5++CF7E              ;   Backface cull logic  line of sight vector . face normal vector
   6++CF7E              ;       line of sight vector . face normal vector
   7++CF7E              ;       => line of sight vector = [x y z] + face normal vector
   8++CF7E              ;       Where [x y z] =
   9++CF7E              ;                                               [ [x y z] . sidev ]
  10++CF7E              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++CF7E              ;                                               [ [x y z] . nosev ]
  12++CF7E              ;
  13++CF7E              ;   so project the [x y z] vector into the face's normal space
  14++CF7E              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++CF7E              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++CF7E              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++CF7E              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++CF7E              ;
  19++CF7E              ;                         [ [x y z] . sidev + normal_x ]
  20++CF7E              ;                       = [ [x y z] . roofv + normal_y ]
  21++CF7E              ;                         [ [x y z] . nosev + normal_z ]
  22++CF7E              ;
  23++CF7E              ; so
  24++CF7E              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++CF7E              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++CF7E              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++CF7E              ;
  28++CF7E              ; where face is visible if visibility < 0
  29++CF7E              ;
  30++CF7E              ;   so we set XX15 to [x y z] . sidev
  31++CF7E              ;                     [x y z] . roofv
  32++CF7E              ;                     [x y z] . nosev
  33++CF7E              ;
  34++CF7E
  35++CF7E
  36++CF7E
  37++CF7E 3A 7D C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++CF81                                      JumpIfAIsZero .ScaleDone            ;
  38++CF81 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++CF82 CA AF CF    >                        jp	z, .ScaleDone
  39++CF85 2A 76 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++CF88 ED 5B 79 C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++CF8C ED 4B 7C C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++CF90 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++CF92                                      ShiftHLRight1                       ; divide cam position by 2
  43++CF92 CB 3C       >			   srl h
  43++CF94 CB 1D       >			   rr  l
  44++CF96                                      ShiftDERight1                       ;
  44++CF96 CB 3A       >			   srl d
  44++CF98 CB 1B       >			   rr  e
  45++CF9A                                      ShiftBCRight1                       ;
  45++CF9A CB 38       >			   srl b
  45++CF9C CB 19       >			   rr  c
  46++CF9E 78                                   ld      a,b                         ; loop if not scaled down
  47++CF9F                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  47++CF9F FE 00       >                        cp	0
  47++CFA1 C2 90 CF    >                        jp	nz,.ScaleNormalLoop
  48++CFA4 22 76 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++CFA7 ED 53 79 C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++CFAB ED 43 7C C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++CFAF FD 7D        .ScaleDone:             ld      a,iyl
  52++CFB1 32 EA 97                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++CFB4 C9                                   ret
  54++CFB5
  55++CFB5              ;;--BackFaceCull:
  56++CFB5              ;;--;debug:jp debug
  57++CFB5              ;;--; DEBUG  force for now
  58++CFB5              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++CFB5              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++CFB5              ;;--;
  61++CFB5              ;;--; DEBUG
  62++CFB5              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++CFB5              ;;--                       ; break
  64++CFB5              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++CFB5              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++CFB5              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++CFB5              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++CFB5              ;;--
  69++CFB5              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++CFB5              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++CFB5              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++CFB5              ;;--                        call    ScaleDrawcam
  73++CFB5              ;;--                        call    CopyDrawCamToScaled
  74++CFB5              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++CFB5              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++CFB5              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++CFB5              ;;--                        ld      (varV),hl
  78++CFB5              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++CFB5              ;;--                        srl     a                                                       ;
  80++CFB5              ;;--                        srl     a                                                       ;
  81++CFB5              ;;--                        ld      b,a                                                     ;
  82++CFB5              ;;--                        xor     a
  83++CFB5              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++CFB5              ;;--ProcessNormalsLoop:     push    hl
  85++CFB5              ;;--                        push    bc
  86++CFB5              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++CFB5              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++CFB5              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++CFB5              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++CFB5              ;;--                        jp      .FaceVisible
  91++CFB5              ;;--; This bit needs to be added to force face visible
  92++CFB5              ;;--.LL87:                  call    CopyFaceToXX12
  93++CFB5              ;;--                        ld      a,(XX17)
  94++CFB5              ;;--                        JumpIfALTNusng 4,.LL92
  95++CFB5              ;;--.LL143:                 call    CopyXX18toXX15
  96++CFB5              ;;--                        jp      .LL89
  97++CFB5              ;;--.Ovflw:                 ld      a,(XX18)
  98++CFB5              ;;--                        srl     a
  99++CFB5              ;;--                        ld      (XX18),a
 100++CFB5              ;;--                        ld      a,(XX18+6)
 101++CFB5              ;;--                        srl     a
 102++CFB5              ;;--                        ld      (XX18+6),a
 103++CFB5              ;;--                        ld      a,(XX18+3)
 104++CFB5              ;;--                        srl     a
 105++CFB5              ;;--                        ld      (XX18+3),a
 106++CFB5              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++CFB5              ;;--.LL92:                   ld      b,a
 108++CFB5              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++CFB5              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++CFB5              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++CFB5              ;;--.LL93                   dec     b
 112++CFB5              ;;--                        jp      m, .LL94
 113++CFB5              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++CFB5              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++CFB5              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++CFB5              ;;--                        dec     b
 117++CFB5              ;;--                        jp      p,.LL93Loop
 118++CFB5              ;;--; Add normal to XX15
 119++CFB5              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++CFB5              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++CFB5              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++CFB5              ;;--                        ld      a,(XX18+8)
 123++CFB5              ;;--                        call    SAEquSRPlusAQ
 124++CFB5              ;;--                        jp      c,.Ovflw
 125++CFB5              ;;--                        ld      (UBnkZScaled),a
 126++CFB5              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++CFB5              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++CFB5              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++CFB5              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++CFB5              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++CFB5              ;;--                        call    SAEquSRPlusAQ
 132++CFB5              ;;--                        jp      c,.Ovflw
 133++CFB5              ;;--                        ld      (UBnkXScaled),a
 134++CFB5              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++CFB5              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++CFB5              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++CFB5              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++CFB5              ;;--                        call    SAEquSRPlusAQ
 139++CFB5              ;;--                        jp      c,.Ovflw
 140++CFB5              ;;--                        ld      (UBnkYScaled),a
 141++CFB5              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++CFB5              ;;--; calculate dot product:
 143++CFB5              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++CFB5              ;;--                        ld      a,(UBnkXScaled)
 145++CFB5              ;;--                        call    AequAmulQdiv256
 146++CFB5              ;;--                        ld      (varT),a
 147++CFB5              ;;--                        ld      a,(UBnkXX12xSign)
 148++CFB5              ;;--                        ld      hl,UBnkXScaledSign
 149++CFB5              ;;--                        xor     (hl)
 150++CFB5              ;;--                        ld      (varS),a
 151++CFB5              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++CFB5              ;;--                        ld      a,(UBnkYScaled)
 153++CFB5              ;;--                        call    AequAmulQdiv256
 154++CFB5              ;;--                        ld      (varQ),a
 155++CFB5              ;;--                        ldCopyByte  varT,varR
 156++CFB5              ;;--                        ld      a,  (UBnkXX12ySign)
 157++CFB5              ;;--                        ld      hl, UBnkYScaledSign
 158++CFB5              ;;--                        xor     (hl)
 159++CFB5              ;;--                        call    SAEquSRPlusAQ
 160++CFB5              ;;--                        ld      (varT),a
 161++CFB5              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++CFB5              ;;--                        ld      a,  (UBnkZScaled)
 163++CFB5              ;;--                        call    AequAmulQdiv256
 164++CFB5              ;;--                        ld      (varQ),a
 165++CFB5              ;;--                        ldCopyByte  varT, varR
 166++CFB5              ;;--                        ld      a,  (UBnkZScaledSign)
 167++CFB5              ;;--                        ld      hl, UBnkXX12zSign
 168++CFB5              ;;--                        xor     (hl)
 169++CFB5              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++CFB5              ;;--                        test    $80
 171++CFB5              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++CFB5              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++CFB5              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++CFB5              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++CFB5              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++CFB5              ;;--                        call        SetFaceAVisible
 177++CFB5              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++CFB5              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++CFB5              ;;--                        pop         bc
 180++CFB5              ;;--                        pop         hl                      ; get normal data pointer back
 181++CFB5              ;;--                        ld          a,4
 182++CFB5              ;;--                        add         hl,a                    ; move to next normal entry
 183++CFB5              ;;--                        ld          (varV),hl               ; save as we need it again
 184++CFB5              ;;--                        dec         b
 185++CFB5              ;;--                        jp          nz,ProcessNormalsLoop
 186++CFB5              ;;--                        ret
 187++CFB5
 188++CFB5
 189++CFB5
 190++CFB5
 191++CFB5              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++CFB5              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++CFB5              ;;;;;                        call    XX12EquNodeDotOrientation
 194++CFB5              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++CFB5              ;;;;;                        test    $80
 196++CFB5              ;;;;;                        jp      nz, FaceVisible
 197++CFB5              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++CFB5              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++CFB5              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++CFB5              ;;;;;                        JumpIfAIsZero .ScaleDone            ;
 201++CFB5              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++CFB5              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++CFB5              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++CFB5              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++CFB5              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++CFB5              ;;;;;                        ShiftDERight1                       ;
 207++CFB5              ;;;;;                        ShiftBCRight1                       ;
 208++CFB5              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++CFB5              ;;;;;                        JumpIfAIsNotZero .ScaleNormalLoop     ;
 210++CFB5              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++CFB5              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++CFB5              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++CFB5              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++CFB5              ;;;;;.ScaleDone:             ld      a,iyl
 215++CFB5              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++CFB5              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++CFB5              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++CFB5              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++CFB5              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++CFB5              ;;;;;
 221++CFB5              ;;;;;
 222++CFB5              ;;;;;
 223++CFB5              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++CFB5              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++CFB5              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++CFB5              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++CFB5              ;;;;;                        ld      (varV),hl
 228++CFB5              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++CFB5              ;;;;;                        srl     a                                                       ;
 230++CFB5              ;;;;;                        srl     a                                                       ;
 231++CFB5              ;;;;;                        ld      b,a                                                     ;
 232++CFB5              ;;;;;                        xor     a
 233++CFB5              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++CFB5              ;;;;;.ProcessNormalsLoop:    push    hl
 235++CFB5              ;;;;;                        push    bc
 236++CFB5              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++CFB5              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++CFB5              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++CFB5              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++CFB5              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++CFB5              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++CFB5              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++CFB5              ;;;;;                        jp      .LL89
 244++CFB5              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++CFB5              ;;;;;                        srl     a
 246++CFB5              ;;;;;                        ld      (XX18),a
 247++CFB5              ;;;;;                        ld      a,(XX18+6)
 248++CFB5              ;;;;;                        srl     a
 249++CFB5              ;;;;;                        ld      (XX18+6),a
 250++CFB5              ;;;;;                        ld      a,(XX18+3)
 251++CFB5              ;;;;;                        srl     a
 252++CFB5              ;;;;;                        ld      (XX18+3),a
 253++CFB5              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++CFB5              ;;;;;.LL92:                  ld      b,a
 255++CFB5              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++CFB5              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++CFB5              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++CFB5              ;;;;;.LL93                   dec     b
 259++CFB5              ;;;;;                        jp      m, .LL94
 260++CFB5              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++CFB5              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++CFB5              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++CFB5              ;;;;;                        dec     b
 264++CFB5              ;;;;;                        jp      p,.LL93Loop
 265++CFB5              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++CFB5              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++CFB5              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++CFB5              ;;;;;                        ld      a,(XX18+8)
 269++CFB5              ;;;;;                        call    SAEquSRPlusAQ
 270++CFB5              ;;;;;                        jp      c,.Ovflw
 271++CFB5              ;;;;;                        ld      (UBnkZScaled),a
 272++CFB5              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++CFB5              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++CFB5              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++CFB5              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++CFB5              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++CFB5              ;;;;;                        call    SAEquSRPlusAQ
 278++CFB5              ;;;;;                        jp      c,.Ovflw
 279++CFB5              ;;;;;                        ld      (UBnkXScaled),a
 280++CFB5              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++CFB5              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++CFB5              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++CFB5              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++CFB5              ;;;;;                        call    SAEquSRPlusAQ
 285++CFB5              ;;;;;                        jp      c,.Ovflw
 286++CFB5              ;;;;;                        ld      (UBnkYScaled),a
 287++CFB5              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++CFB5              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++CFB5              ;;;;;                        ld      a,(UBnkXScaled)
 290++CFB5              ;;;;;                        call    AequAmulQdiv256
 291++CFB5              ;;;;;                        ld      (varT),a
 292++CFB5              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++CFB5              ;;;;;                        ld      hl,UBnkXScaledSign
 294++CFB5              ;;;;;                        xor     (hl)
 295++CFB5              ;;;;;                        ld      (varS),a
 296++CFB5              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++CFB5              ;;;;;                        ld      a,(UBnkYScaled)
 298++CFB5              ;;;;;                        call    AequAmulQdiv256
 299++CFB5              ;;;;;                        ld      (varQ),a
 300++CFB5              ;;;;;                        ldCopyByte  varT,varR
 301++CFB5              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++CFB5              ;;;;;                        ld      hl, UBnkYScaledSign
 303++CFB5              ;;;;;                        xor     (hl)
 304++CFB5              ;;;;;                        call    SAEquSRPlusAQ
 305++CFB5              ;;;;;                        ld      (varT),a
 306++CFB5              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++CFB5              ;;;;;                        ld      a,  (UBnkZScaled)
 308++CFB5              ;;;;;                        call    AequAmulQdiv256
 309++CFB5              ;;;;;                        ld      (varQ),a
 310++CFB5              ;;;;;                        ldCopyByte  varT, varR
 311++CFB5              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++CFB5              ;;;;;                        ld      hl, UBnkXX12zSign
 313++CFB5              ;;;;;                        xor     (hl)
 314++CFB5              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++CFB5              ;;;;;                        test    $80
 316++CFB5              ;;;;;                        jr      nz,.FaceVisible
 317++CFB5              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++CFB5              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++CFB5              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++CFB5              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++CFB5              ;;;;;                        call    SetFaceAVisible
 322++CFB5              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++CFB5              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++CFB5              ;;;;;                        pop         bc
 325++CFB5              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++CFB5              ;;;;;                        ld          a,4
 327++CFB5              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++CFB5              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++CFB5              ;;;;;                        dec         b
 330++CFB5              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++CFB5              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++CFB5              ;;;;;
 333++CFB5 00           XX4Distance             DB      0
 334++CFB6
 335++CFB6
 336++CFB6
 337++CFB6 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 338++CFB9 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
 339++CFBB 20 3E                                jr      nz,.ShipNoDraw               ; .
 340++CFBD 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
 341++CFC0 7C                                   ld      a,h
 342++CFC1                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 342++CFC1 FE C0       >                        cp     ShipMaxDistance
 342++CFC3 D2 FB CF    >                        jp		nc,.ShipNoDraw
 343++CFC6 ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
 344++CFCA CD AC AB                             call    compare16HLDE
 345++CFCD 38 2C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 346++CFCF ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
 347++CFD3 CD AC AB                             call    compare16HLDE
 348++CFD6 38 23                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 349++CFD8              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
 349++CFD8 CB 3C       >			   srl h
 349++CFDA CB 1D       >			   rr  l
 350++CFDC                                      ShiftHLRight1                       ; .
 350++CFDC CB 3C       >			   srl h
 350++CFDE CB 1D       >			   rr  l
 351++CFE0                                      ShiftHLRight1                       ; .
 351++CFE0 CB 3C       >			   srl h
 351++CFE2 CB 1D       >			   rr  l
 352++CFE4 7C                                   ld      a,h
 353++CFE5 CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 354++CFE7              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
 354++CFE7 C2 FD CF    >                        jp	nz,.ShipIsADot
 355++CFEA                                      ; Check visbility distance
 356++CFEA              .SetXX4Dist:            ;break
 357++CFEA 7D                                   ld      a,l
 358++CFEB 1F                                   rra                                 ; l may have had bit 0 of h carried in
 359++CFEC CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 360++CFEE CB 3F                                srl     a
 361++CFF0 CB 3F                                srl     a
 362++CFF2 32 B5 CF                             ld      (XX4Distance),a             ; XX4 = "all faces" distance
 363++CFF5                                      SetATrue
 363++CFF5 AF          >                        xor     a
 364++CFF6 32 9B C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 365++CFF9                                      ClearCarryFlag
 365++CFF9 B7          >                        or a
 366++CFFA C9                                   ret
 367++CFFB              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
 367++CFFB 37          >                        scf
 368++CFFC C9                                   ret
 369++CFFD              .ShipIsADot:            SetMemFalse UBnKDrawAsDot           ; use the same logic as process nodes to do 1 point
 369++CFFD 3E FF       >                        ld      a,$FF
 369++CFFF 32 9B C0    >                        ld      (UBnKDrawAsDot),a
 370++D002                                      ClearCarryFlag
 370++D002 B7          >                        or a
 371++D003 C9                                   ret
 372++D004
 373++D004
 374++D004              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 375++D004              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 375++D004 3A 17 C3    >                        ld   a,(FaceCtX4Addr)
 375++D007 A7          >                        and a
 375++D008 C8          >                        ret    z
 376++D009                                     ; break
 377++D009 CD 51 CA                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 378++D00C CD 5B 90                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 379++D00F CD 07 CD                             call    LoadCraftToCamera           ; XX18 = camera
 380++D012                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 381++D012 3A 1D C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 382++D015 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 383++D017              ; By this point XX18 = scaled draw cam and iyl = scale factor
 384++D017 CD 7E CF                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 385++D01A CD 20 CD                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 386++D01D CD B2 8F     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 387++D020 CD 98 CC                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 388++D023 21 DC C4     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 389++D026 22 E1 96                             ld      (varV),hl
 390++D029 3A 17 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 391++D02C CB 3F                                srl     a                                              ;
 392++D02E CB 3F                                srl     a                                              ;
 393++D030 47                                   ld      b,a                                            ;
 394++D031 AF                                   xor     a
 395++D032 32 7D CF                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 396++D035 E5           .ProcessNormalsLoop:    push    hl
 397++D036 C5                                   push    bc
 398++D037 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 399++D038 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 400++D03A E5                                   push    hl
 401++D03B 21 B5 CF                             ld      hl,XX4Distance
 402++D03E BE                                   cp      (hl)
 403++D03F E1                                   pop     hl
 404++D040 DA 85 D1                             jp      c,.FaceVisible              ; then we always draw
 405++D043              ; This bit needs to be added to force face visible
 406++D043 CD 02 CF     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 407++D046 3A EA 97                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 408++D049 47                                   ld      b,a
 409++D04A                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 409++D04A FE 04       >                        cp      4
 409++D04C DA 87 D0    >                        jp		c, .ScaleNormByXX17
 410++D04F CD E2 CC     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 411++D052 C3 16 D1                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 412++D055 3A 76 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 413++D058 CB 3F                                srl     a                           ; which is held in XX18
 414++D05A 32 76 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 415++D05D 3A 7C C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 416++D060 CB 3F                                srl     a                           ; .
 417++D062 32 7C C0                             ld      (UBnkDrawCam0zLo),a         ; .
 418++D065 3A 79 C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 419++D068 CB 3F                                srl     a                           ; .
 420++D06A 32 79 C0                             ld      (UBnkDrawCam0yLo),a        ; .
 421++D06D 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 422++D06F                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 422++D06F 3A 82 C0    >                    ld      a,(UBnkXScaled)
 422++D072 CB 3F       >                    srl     a
 422++D074 32 82 C0    >                    ld      (UBnkXScaled),a
 423++D077                                      ShiftMem8Right1 UBnkYScaled         ;
 423++D077 3A 84 C0    >                    ld      a,(UBnkYScaled)
 423++D07A CB 3F       >                    srl     a
 423++D07C 32 84 C0    >                    ld      (UBnkYScaled),a
 424++D07F                                      ShiftMem8Right1 UBnkZScaled         ;
 424++D07F 3A 86 C0    >                    ld      a,(UBnkZScaled)
 424++D082 CB 3F       >                    srl     a
 424++D084 32 86 C0    >                    ld      (UBnkZScaled),a
 425++D087              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 426++D087              .ScaleNormByXX17:       ;ld      b,a
 427++D087 CD BD CC                             call    CopyXX12toXX15
 428++D08A 05           .LL93                   dec     b
 429++D08B FA AA D0                             jp      m, .ScaledNorm
 430++D08E              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 430++D08E 3A 82 C0    >                    ld      a,(UBnkXScaled)
 430++D091 CB 3F       >                    srl     a
 430++D093 32 82 C0    >                    ld      (UBnkXScaled),a
 431++D096                                      ShiftMem8Right1 UBnkYScaled        ;
 431++D096 3A 84 C0    >                    ld      a,(UBnkYScaled)
 431++D099 CB 3F       >                    srl     a
 431++D09B 32 84 C0    >                    ld      (UBnkYScaled),a
 432++D09E                                      ShiftMem8Right1 UBnkZScaled        ;
 432++D09E 3A 86 C0    >                    ld      a,(UBnkZScaled)
 432++D0A1 CB 3F       >                    srl     a
 432++D0A3 32 86 C0    >                    ld      (UBnkZScaled),a
 433++D0A6 05                                   dec     b                          ;
 434++D0A7 F2 8E D0                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 435++D0AA              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 436++D0AA              ; Add normal to XX15
 437++D0AA              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 438++D0AA              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 439++D0AA              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 440++D0AA              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 441++D0AA              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 441++D0AA 3A 86 C0    >                        ld       a,(UBnkZScaled)
 441++D0AD 32 E4 97    >                        ld       (varR),a
 442++D0B0                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 442++D0B0 3A 8D C0    >                        ld       a,(UBnkXX12zSign)
 442++D0B3 32 E5 97    >                        ld       (varS),a
 443++D0B6                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 443++D0B6 3A 7C C0    >                        ld       a,(UBnkDrawCam0zLo)
 443++D0B9 32 E3 97    >                        ld       (varQ),a
 444++D0BC 3A 7E C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 445++D0BF CD 13 AF                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 446++D0C2 DA 55 D0                             jp      c,.Ovflw
 447++D0C5 32 86 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 448++D0C8                                      ldCopyByte  varS, UBnkZScaledSign   ;
 448++D0C8 3A E5 97    >                        ld       a,(varS)
 448++D0CB 32 87 C0    >                        ld       (UBnkZScaledSign),a
 449++D0CE                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 449++D0CE 3A 82 C0    >                        ld       a,(UBnkXScaled)
 449++D0D1 32 E4 97    >                        ld       (varR),a
 450++D0D4                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 450++D0D4 3A 89 C0    >                        ld       a,(UBnkXX12xSign)
 450++D0D7 32 E5 97    >                        ld       (varS),a
 451++D0DA                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 451++D0DA 3A 76 C0    >                        ld       a,(UBnkDrawCam0xLo)
 451++D0DD 32 E3 97    >                        ld       (varQ),a
 452++D0E0 3A 78 C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 453++D0E3 CD 13 AF                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 454++D0E6 DA 55 D0                             jp      c,.Ovflw
 455++D0E9 32 82 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 456++D0EC                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 456++D0EC 3A E5 97    >                        ld       a,(varS)
 456++D0EF 32 83 C0    >                        ld       (UBnkXScaledSign),a
 457++D0F2                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 457++D0F2 3A 84 C0    >                        ld       a,(UBnkYScaled)
 457++D0F5 32 E4 97    >                        ld       (varR),a
 458++D0F8                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 458++D0F8 3A 8B C0    >                        ld       a,(UBnkXX12ySign)
 458++D0FB 32 E5 97    >                        ld       (varS),a
 459++D0FE                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 459++D0FE 3A 79 C0    >                        ld       a,(UBnkDrawCam0yLo)
 459++D101 32 E3 97    >                        ld       (varQ),a
 460++D104 3A 7B C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 461++D107 CD 13 AF                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 462++D10A DA 55 D0                             jp      c,.Ovflw                    ; .
 463++D10D 32 84 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 464++D110                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 464++D110 3A E5 97    >                        ld       a,(varS)
 464++D113 32 85 C0    >                        ld       (UBnkYScaledSign),a
 465++D116              ; calculate dot product LL89
 466++D116              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 466++D116 3A 88 C0    >                        ld       a,(UBnkXX12xLo)
 466++D119 32 E3 97    >                        ld       (varQ),a
 467++D11C 3A 82 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 468++D11F CD 7F AE                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 469++D122 32 00 98                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 470++D125 3A 89 C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 471++D128 21 83 C0                             ld      hl,UBnkXScaledSign          ; .
 472++D12B AE                                   xor     (hl)                        ; .
 473++D12C 32 E5 97                             ld      (varS),a                    ; .
 474++D12F                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 474++D12F 3A 8A C0    >                        ld       a,(UBnkXX12yLo)
 474++D132 32 E3 97    >                        ld       (varQ),a
 475++D135 3A 84 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 476++D138 CD 7F AE                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 477++D13B 32 E3 97                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 478++D13E                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 478++D13E 3A 00 98    >                        ld       a,(varT)
 478++D141 32 E4 97    >                        ld       (varR),a
 479++D144 3A 8B C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 480++D147 21 85 C0                             ld      hl, UBnkYScaledSign         ; .
 481++D14A AE                                   xor     (hl)                        ; .
 482++D14B CD 13 AF                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 483++D14E 32 00 98                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 484++D151                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 484++D151 3A 8C C0    >                        ld       a,(UBnkXX12zLo)
 484++D154 32 E3 97    >                        ld       (varQ),a
 485++D157 3A 86 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 486++D15A CD 7F AE                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 487++D15D 32 E3 97                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 488++D160                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 488++D160 3A 00 98    >                        ld       a,(varT)
 488++D163 32 E4 97    >                        ld       (varR),a
 489++D166 3A 87 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 490++D169 21 8D C0                             ld      hl, UBnkXX12zSign           ; .
 491++D16C AE                                   xor     (hl)                        ; .
 492++D16D CD 13 AF                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 493++D170 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 494++D172 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 495++D174 3A E5 97                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 496++D177 ED 27 80                             test    $80                         ; this should test S not A
 497++D17A 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 498++D17C 3A 7D CF     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 499++D17F CD 65 CB                             call        SetFaceAHidden                                      ;           set face invisible
 500++D182 C3 8B D1                             jp          .ProcessNormalLoopEnd                                ;        end if
 501++D185 3A 7D CF     .FaceVisible:            ld          a,(CurrentNormIdx)
 502++D188 CD 5C CB                             call        SetFaceAVisible
 503++D18B 21 7D CF     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 504++D18E 34                                   inc         (hl)                    ; move index pointer up by one
 505++D18F C1                                   pop         bc
 506++D190 E1                                   pop         hl                      ; get normal data pointer back
 507++D191 3E 04                                ld          a,4
 508++D193 ED 31                                add         hl,a                    ; move to next normal entry
 509++D195 22 E1 96                             ld          (varV),hl               ; save as we need it again
 510++D198 05                                   dec         b
 511++D199 C2 35 D0                             jp          nz,.ProcessNormalsLoop
 512++D19C C9                                   ret
 513++D19D
# file closed: ././ModelRender/BackfaceCull.asm
 902+ D19D              ;--------------------------------------------------------------------------------------------------------
 903+ D19D              ; Process edges
 904+ D19D              ; .....................................................
 905+ D19D              TransposeNodeVal:   MACRO arg0?
 906+ D19D ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 907+ D19D ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 908+ D19D ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 909+ D19D ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 910+ D19D ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 911+ D19D ~            NodeXPositive\1
 911+ D19D ~
 912+ D19D ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 913+ D19D ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 914+ D19D ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 915+ D19D ~                    ld          h,0                                 ; but we don;t want the sign
 916+ D19D ~                    add         hl,bc                               ; its a 16 bit add
 917+ D19D ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 918+ D19D ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 919+ D19D ~                    ld          (UbnkXPointSign),a
 920+ D19D ~                    jp          FinishedThisNode\1
 921+ D19D ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 922+ D19D ~            NodeNegative\1
 922+ D19D ~
 923+ D19D ~            LL52\1
 923+ D19D ~                                                              ;
 924+ D19D ~                    ld          hl,(UBnK\0lo)                       ; Coord
 925+ D19D ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 926+ D19D ~                    ld          b,0                                 ; XX12 lo byte only
 927+ D19D ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 928+ D19D ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 929+ D19D ~            NodeXNegSignChange\1
 929+ D19D ~
 930+ D19D ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 931+ D19D ~                    call        negate16hl                          ; Convert back to positive and flip sign
 932+ D19D ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 933+ D19D ~                    xor         $80                                 ; Flip bit 7
 934+ D19D ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 935+ D19D ~            SetAndMop\1
 935+ D19D ~
 936+ D19D ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 937+ D19D ~            FinishedThisNode\1
 938+ D19D                                  ENDM
 939+ D19D
 940+ D19D              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 941+ D19D
 942+ D19D              TransposeXX12NodeToXX15:
 943+ D19D                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 943+ D19D 3A 0E C0    >                        ld       a,(UBnKxsgn)
 943+ D1A0 32 84 C0    >                        ld       (UbnkXPointSign),a
 944+ D1A3 ED 4B 88 C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 945+ D1A7 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 946+ D1A8 FA BE D1             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 947+ D1AB              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 948+ D1AB              NodeXPositiveX:
 949+ D1AB 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 950+ D1AC 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 951+ D1AE 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 952+ D1B1 26 00                ld          h,0                                 ; but we don;t want the sign
 953+ D1B3 09                   add         hl,bc                               ; its a 16 bit add
 954+ D1B4 22 82 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 955+ D1B7 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 956+ D1B8 32 84 C0             ld          (UbnkXPointSign),a
 957+ D1BB C3 DA D1             jp          FinishedThisNodeX
 958+ D1BE              ; If we get here then _sign and vertv_ have different signs so do subtract
 959+ D1BE              NodeNegativeX:
 960+ D1BE              LL52X:                                                 ;
 961+ D1BE 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
 962+ D1C1 ED 4B 88 C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 963+ D1C5 06 00                ld          b,0                                 ; XX12 lo byte only
 964+ D1C7 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 965+ D1C9 F2 D7 D1             jp          p,SetAndMopX                       ; if result is positive skip to write back
 966+ D1CC              NodeXNegSignChangeX:
 967+ D1CC              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 968+ D1CC CD C2 AB             call        negate16hl                          ; Convert back to positive and flip sign
 969+ D1CF 3A 84 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 970+ D1D2 EE 80                xor         $80                                 ; Flip bit 7
 971+ D1D4 32 84 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 972+ D1D7              SetAndMopX:
 973+ D1D7 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
 974+ D1DA              FinishedThisNodeX:
 975+ D1DA
 976+ D1DA              LL53:
 977+ D1DA
 978+ D1DA                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 978+ D1DA 3A 11 C0    >                        ld       a,(UBnKysgn)
 978+ D1DD 32 87 C0    >                        ld       (UbnkYPointSign),a
 979+ D1E0 ED 4B 8A C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 980+ D1E4 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 981+ D1E5 FA FB D1             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 982+ D1E8              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 983+ D1E8              NodeXPositiveY:
 984+ D1E8 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 985+ D1E9 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 986+ D1EB 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 987+ D1EE 26 00                ld          h,0                                 ; but we don;t want the sign
 988+ D1F0 09                   add         hl,bc                               ; its a 16 bit add
 989+ D1F1 22 85 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 990+ D1F4 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 991+ D1F5 32 84 C0             ld          (UbnkXPointSign),a
 992+ D1F8 C3 17 D2             jp          FinishedThisNodeY
 993+ D1FB              ; If we get here then _sign and vertv_ have different signs so do subtract
 994+ D1FB              NodeNegativeY:
 995+ D1FB              LL52Y:                                                 ;
 996+ D1FB 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
 997+ D1FE ED 4B 8A C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 998+ D202 06 00                ld          b,0                                 ; XX12 lo byte only
 999+ D204 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1000+ D206 F2 14 D2             jp          p,SetAndMopY                       ; if result is positive skip to write back
1001+ D209              NodeXNegSignChangeY:
1002+ D209              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1003+ D209 CD C2 AB             call        negate16hl                          ; Convert back to positive and flip sign
1004+ D20C 3A 87 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1005+ D20F EE 80                xor         $80                                 ; Flip bit 7
1006+ D211 32 87 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1007+ D214              SetAndMopY:
1008+ D214 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1009+ D217              FinishedThisNodeY:
1010+ D217
1011+ D217
1012+ D217              TransposeZ:
1013+ D217              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1014+ D217 3A 8D C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1015+ D21A                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1015+ D21A CB 7F       >                        bit 	7,a
1015+ D21C C2 30 D2    >                        jp      nz,NegativeNodeZ
1016+ D21F 3A 8C C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1017+ D222 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1018+ D225 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1019+ D227 7D                   ld          a,l
1020+ D228 32 00 98             ld          (varT),a                            ;                                                                           ;;;
1021+ D22B 7C                   ld          a,h
1022+ D22C 32 E2 97             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1023+ D22F C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1024+ D230              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1025+ D230              NegativeNodeZ:
1026+ D230              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1027+ D230 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1028+ D233 ED 4B 8C C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1029+ D237 06 00                ld          b,0                                 ; upper byte will be garbage
1030+ D239                      ClearCarryFlag
1030+ D239 B7          >                        or a
1031+ D23A ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1032+ D23C 7D                   ld          a,l
1033+ D23D 32 00 98             ld          (varT),a                            ; t = result low
1034+ D240 7C                   ld          a,h
1035+ D241 32 E2 97             ld          (varU),a                            ; u = result high
1036+ D244 E2 51 D2             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1037+ D247              LL56Overflow:
1038+ D247 FE 00                cp          0                                   ; is varU 0?
1039+ D249 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1040+ D24B 3A 00 98             ld          a,(varT)                            ; T \ restore z lo
1041+ D24E                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1041+ D24E FE 04       >                        cp    4
1041+ D250 D0          >                        ret	 nc
1042+ D251              MakeNodeClose:
1043+ D251              LL140:                                                  ; else make node close
1044+ D251 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1045+ D252 32 E2 97             ld          (varU),a                            ; U
1046+ D255 3E 04                ld          a,4                                 ; lo
1047+ D257 32 00 98             ld          (varT),a                            ; T
1048+ D25A C9                   ret
1049+ D25B              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1050+ D25B              ProcessVisibleNode:
1051+ D25B              RotateNode:                                                                                                                         ;;;
1052+ D25B CD 67 CC             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1053+ D25E              LL52LL53LL54LL55
1054+ D25E              TransposeNode:
1055+ D25E CD 9D D1             call        TransposeXX12NodeToXX15
1056+ D261
1057+ D261              ; ......................................................                                                         ;;;
1058+ D261              NodeAdditionsDone:
1059+ D261              Scale16BitTo8Bit:
1060+ D261              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1061+ D261 3A E2 97             ld          a,(varU)                            ; U \ z hi
1062+ D264 21 83 C0             ld          hl,UbnkXPointHi
1063+ D267 B6                   or          (hl)                                ; XX15+1    \ x hi
1064+ D268 21 86 C0             ld          hl,UbnkYPointHi
1065+ D26B B6                   or          (hl)                                ; XX15+4    \ y hi
1066+ D26C              AreXYZHiAllZero:
1067+ D26C 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1068+ D26E              DivideXYZBy2:
1069+ D26E                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1069+ D26E 2A 82 C0    >                    ld    hl,(UbnkXPoint)
1069+ D271 CB 3C       >                    srl   h
1069+ D273 CB 1D       >                    rr    l
1069+ D275 22 82 C0    >                    ld    (UbnkXPoint),hl
1070+ D278                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1070+ D278 2A 85 C0    >                    ld    hl,(UbnkYPoint)
1070+ D27B CB 3C       >                    srl   h
1070+ D27D CB 1D       >                    rr    l
1070+ D27F 22 85 C0    >                    ld    (UbnkYPoint),hl
1071+ D282 3A E2 97             ld          a,(varU)                            ; U \ z hi
1072+ D285 67                   ld          h,a
1073+ D286 3A 00 98             ld          a,(varT)                            ; T \ z lo
1074+ D289 6F                   ld          l,a
1075+ D28A                      ShiftHLRight1
1075+ D28A CB 3C       >			   srl h
1075+ D28C CB 1D       >			   rr  l
1076+ D28E 7C                   ld          a,h
1077+ D28F 32 E2 97             ld          (varU),a
1078+ D292 7D                   ld          a,l
1079+ D293 32 00 98             ld          (varT),a                            ; T \ z lo
1080+ D296 C3 61 D2             jp          Scale16BitTo8Bit                    ; loop U
1081+ D299              NodeScalingDone:
1082+ D299              LL60:                                                   ; hi U rolled to 0, exited loop above.
1083+ D299              ProjectNodeToScreen:
1084+ D299                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1084+ D299 3A 00 98    >                        ld       a,(varT)
1084+ D29C 32 E3 97    >                        ld       (varQ),a
1085+ D29F 3A 82 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1086+ D2A2 21 E3 97             ld          hl,varQ
1087+ D2A5 BE                   cp          (hl)                                ; Q
1088+ D2A6                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1088+ D2A6 DA AF D2    >                        jp		c,DoSmallAngle
1089+ D2A9 CD 1A B0             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1090+ D2AC C3 B7 D2             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1091+ D2AF              DoSmallAngle:                                           ; small x angle
1092+ D2AF              LL69:
1093+ D2AF              ; TODO check if we need to retain BC as this trashes it
1094+ D2AF              ;Input: BC = Dividend, DE = Divisor, HL = 0
1095+ D2AF              ;Output: BC = Quotient, HL = Remainder
1096+ D2AF 47                   ld      b,a
1097+ D2B0 CD 0B AA             call    DIV16UNDOC
1098+ D2B3 79                   ld      a,c
1099+ D2B4 32 E4 97             ld      (varR),a
1100+ D2B7               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1101+ D2B7              SkipSmallAngle:
1102+ D2B7              ScaleX:
1103+ D2B7              LL65:                                                   ; both continue for scaling based on z
1104+ D2B7 3A 84 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1105+ D2BA                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1105+ D2BA CB 7F       >                        bit 	7,a
1105+ D2BC C2 CF D2    >                        jp      nz,NegativeXPoint
1106+ D2BF              ; ......................................................
1107+ D2BF              PositiveXPoint:
1108+ D2BF 3A E4 97             ld          a,(varR)
1109+ D2C2 6F                   ld          l,a
1110+ D2C3 3A E2 97             ld          a,(varU)
1111+ D2C6 67                   ld          h,a
1112+ D2C7 3E 80                ld          a,ScreenCenterX
1113+ D2C9 ED 31                add         hl,a
1114+ D2CB EB                   ex          de,hl
1115+ D2CC C3 DF D2             jp          StoreXPoint
1116+ D2CF              NegativeXPoint:
1117+ D2CF              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1118+ D2CF 3A E4 97             ld          a,(varR)
1119+ D2D2 6F                   ld          l,a
1120+ D2D3 3A E2 97             ld          a,(varU)
1121+ D2D6 67                   ld          h,a
1122+ D2D7 0E 80                ld          c,ScreenCenterX
1123+ D2D9 06 00                ld          b,0
1124+ D2DB                      ClearCarryFlag
1124+ D2DB B7          >                        or a
1125+ D2DC ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1126+ D2DE EB                   ex          de,hl
1127+ D2DF              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1128+ D2DF FD 73 00             ld          (iy+0),e                            ; Update X Point
1129+ D2E2 FD 72 01             ld          (iy+1),d                            ; Update X Point
1130+ D2E5 FD 23                inc         iy
1131+ D2E7 FD 23                inc         iy
1132+ D2E9              ; ......................................................
1133+ D2E9              LL66:
1134+ D2E9              ProcessYPoint:
1135+ D2E9 AF                   xor         a                                   ; y hi = 0
1136+ D2EA 32 E2 97             ld          (varU),a                            ; U
1137+ D2ED                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1137+ D2ED 3A 00 98    >                        ld       a,(varT)
1137+ D2F0 32 E3 97    >                        ld       (varQ),a
1138+ D2F3 3A 85 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1139+ D2F6 21 E3 97             ld          hl,varQ
1140+ D2F9 BE                   cp          (hl)                                ; Q
1141+ D2FA                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1141+ D2FA DA 03 D3    >                        jp		c,SmallYHop
1142+ D2FD              SmallYPoint:
1143+ D2FD CD 1A B0             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1144+ D300 C3 06 D3             jp          SkipYScale                          ; LL68 hop over small y yangle
1145+ D303              SmallYHop:
1146+ D303              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1147+ D303 CD F7 AF             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1148+ D306              SkipYScale:
1149+ D306              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1150+ D306 3A 87 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1151+ D309 CB 7F                bit         7,a
1152+ D30B C2 1E D3             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1153+ D30E              PositiveYPoint:
1154+ D30E 3A E4 97             ld          a,(varR)
1155+ D311 6F                   ld          l,a
1156+ D312 3A E2 97             ld          a,(varU)
1157+ D315 67                   ld          h,a
1158+ D316 3E 60                ld          a,ScreenHeightHalf
1159+ D318 ED 31                add         hl,a
1160+ D31A EB                   ex          de,hl
1161+ D31B C3 2E D3             jp          LL50
1162+ D31E              NegativeYPoint:
1163+ D31E              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1164+ D31E 3A E4 97             ld          a,(varR)
1165+ D321 6F                   ld          l,a
1166+ D322 3A E2 97             ld          a,(varU)
1167+ D325 67                   ld          h,a
1168+ D326 0E 60                ld          c,ScreenHeightHalf
1169+ D328 06 00                ld          b,0
1170+ D32A                      ClearCarryFlag
1170+ D32A B7          >                        or a
1171+ D32B ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1172+ D32D EB                   ex          de,hl
1173+ D32E              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1174+ D32E FD 73 00             ld          (iy+0),e                            ; Update X Point
1175+ D331 FD 72 01             ld          (iy+1),d                            ; Update X Point
1176+ D334 FD 23                inc         iy
1177+ D336 FD 23                inc         iy
1178+ D338 C9                   ret
1179+ D339              ;--------------------------------------------------------------------------------------------------------
1180+ D339              ;;;     Byte 0 = X magnitide with origin at middle of ship
1181+ D339              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1182+ D339              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1183+ D339              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1184+ D339              CopyNodeToXX15:
1185+ D339                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1185+ D339 7E          >                        ld       a,(hl)
1185+ D33A 32 82 C0    >                        ld       (UBnkXScaled),a
1186+ D33D 23                   inc         hl
1187+ D33E                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1187+ D33E 7E          >                        ld       a,(hl)
1187+ D33F 32 84 C0    >                        ld       (UBnkYScaled),a
1188+ D342 23                   inc         hl
1189+ D343                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1189+ D343 7E          >                        ld       a,(hl)
1189+ D344 32 86 C0    >                        ld       (UBnkZScaled),a
1190+ D347 23                   inc         hl
1191+ D348              PopulateXX15SignBits:
1192+ D348              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1193+ D348 7E                   ld          a,(hl)
1194+ D349 4F                   ld          c,a                                 ; copy sign and visibility to c
1195+ D34A 47                   ld          b,a
1196+ D34B E6 80                and         $80                                 ; keep high 3 bits
1197+ D34D 32 83 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1198+ D350 78                   ld          a,b
1199+ D351 E6 40                and         $40
1200+ D353 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1201+ D355 32 85 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1202+ D358 78                   ld          a,b
1203+ D359 E6 20                and         $20
1204+ D35B CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1205+ D35D CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1206+ D35F 32 87 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1207+ D362 79                   ld          a,c                                 ; returns a with visibility sign byte
1208+ D363 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1209+ D365 32 00 98             ld          (varT),a                            ; and store in varT as its needed later
1210+ D368 C9                   ret
1211+ D369
1212+ D369              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1213+ D369              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1214+ D369              ;..............................................................................................................................
1215+ D369              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1216+ D369              LL48GetScale:
1217+ D369 3A D1 96             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1218+ D36C 5F                   ld          e,a
1219+ D36D CD 39 D3             call        CopyNodeToXX15
1220+ D370              LL48GetVertices:
1221+ D370              LL48GetVertSignAndVisDist:
1222+ D370                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1222+ D370 BB          >                        cp      e
1222+ D371 DA B2 D3    >                        jp		c, NodeIsNotVisible
1223+ D374              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1224+ D374                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1224+ D374 23          >                    inc         hl                                  ; vertex byte#1
1224+ D375 7E          >                    ld          a,(hl)                              ;
1224+ D376 32 DC 96    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1225+ D379 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1226+ D37A E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1227+ D37C E5                   push        hl                                  ; we need to save HL                                                        ;;;
1228+ D37D                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1228+ D37D 21 AF C0    >                    ld          hl,UbnkFaceVisArray
1228+ D380 ED 31       >                    add         hl,a
1228+ D382 7E          >                    ld          a,(hl)
1229+ D383 E1                   pop         hl                                  ;                                                                           ;;;
1230+ D384                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1230+ D384 FE 00       >                        cp	0
1230+ D386 C2 B8 D3    >                        jp	nz,NodeIsVisible
1231+ D389              CheckFace2:                                                                                                                         ;;;
1232+ D389 7A                   ld          a,d                                                                                                             ;;;
1233+ D38A ED 23                swapnib                                                                                                                     ;;;
1234+ D38C E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1235+ D38E                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1235+ D38E FE 00       >                        cp	0
1235+ D390 C2 B8 D3    >                        jp	nz,NodeIsVisible
1236+ D393              CheckFace3:                                                                                                                         ;;;
1237+ D393                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1237+ D393 23          >                    inc         hl                                  ; vertex byte#1
1237+ D394 7E          >                    ld          a,(hl)                              ;
1237+ D395 32 DC 96    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1238+ D398 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1239+ D399 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1240+ D39B E5                   push        hl                                  ; we need to save HL                                                        ;;;
1241+ D39C                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1241+ D39C 21 AF C0    >                    ld          hl,UbnkFaceVisArray
1241+ D39F ED 31       >                    add         hl,a
1241+ D3A1 7E          >                    ld          a,(hl)
1242+ D3A2 E1                   pop         hl                                  ;                                                                           ;;;
1243+ D3A3                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1243+ D3A3 FE 00       >                        cp	0
1243+ D3A5 C2 B8 D3    >                        jp	nz,NodeIsVisible
1244+ D3A8              CheckFace4:                                                                                                                         ;;;
1245+ D3A8 7A                   ld          a,d                                                                                                             ;;;
1246+ D3A9 ED 23                swapnib                                                                                                                     ;;;
1247+ D3AB E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1248+ D3AD                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1248+ D3AD FE 00       >                        cp	0
1248+ D3AF C2 B8 D3    >                        jp	nz,NodeIsVisible
1249+ D3B2              NodeIsNotVisible:                                                                                                                   ;;;
1250+ D3B2 01 04 00             ld          bc,4
1251+ D3B5 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1252+ D3B7                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1253+ D3B7 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1254+ D3B8              NodeIsVisible:
1255+ D3B8              LL49:
1256+ D3B8 CD 5B D2             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1257+ D3BB C9                   ret
1258+ D3BC
1259+ D3BC
1260+ D3BC              ProjectNodeToEye:
1261+ D3BC ED 4B 86 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1262+ D3C0 79           	ld			a,c                                 ;  so no need for a negative check
1263+ D3C1 32 E3 97     	ld			(varQ),a		                    ; VarQ = z
1264+ D3C4 3A 82 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1265+ D3C7 CD F4 A9     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1266+ D3CA 3A 83 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1267+ D3CD                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1267+ D3CD CB 7F       >                        bit 	7,a
1267+ D3CF C2 DA D3    >                        jp      nz,EyeNegativeXPoint
1268+ D3D2              EyePositiveXPoint:									; x was positive result
1269+ D3D2 2E 80            ld          l,ScreenCenterX						;
1270+ D3D4 26 00            ld          h,0
1271+ D3D6 09               add         hl,bc								; hl = Screen Centre + X
1272+ D3D7 C3 E1 D3         jp          EyeStoreXPoint
1273+ D3DA              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1274+ D3DA 2E 80            ld          l,ScreenCenterX
1275+ D3DC 26 00            ld          h,0
1276+ D3DE                  ClearCarryFlag
1276+ D3DE B7          >                        or a
1277+ D3DF ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1278+ D3E1              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1279+ D3E1 EB               ex          de,hl
1280+ D3E2 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1281+ D3E5 FD 72 01         ld          (iy+1),d                            ; Update X Point
1282+ D3E8              EyeProcessYPoint:
1283+ D3E8 ED 4B 86 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1284+ D3EC 79           	ld			a,c
1285+ D3ED 32 E3 97     	ld			(varQ),a
1286+ D3F0 3A 84 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1287+ D3F3 CD F4 A9     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1288+ D3F6 3A 85 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1289+ D3F9                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1289+ D3F9 CB 7F       >                        bit 	7,a
1289+ D3FB C2 06 D4    >                        jp      nz,EyeNegativeYPoint
1290+ D3FE              EyePositiveYPoint:									; Y is positive so above the centre line
1291+ D3FE 2E 60            ld          l,ScreenCenterY
1292+ D400                  ClearCarryFlag
1292+ D400 B7          >                        or a
1293+ D401 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1294+ D403 C3 0B D4         jp          EyeStoreYPoint
1295+ D406              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1296+ D406 2E 60            ld          l,ScreenCenterY
1297+ D408 26 00            ld          h,0
1298+ D40A 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1299+ D40B              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1300+ D40B EB               ex          de,hl
1301+ D40C FD 73 02         ld          (iy+2),e                            ; Update Y Point
1302+ D40F FD 72 03         ld          (iy+3),d                            ; Update Y Point
1303+ D412 C9               ret
1304+ D413
1305+ D413
1306+ D413
1307+ D413              ; Pitch and roll are 2 phases
1308+ D413              ; 1 - we apply our pitch and roll to the ship position
1309+ D413              ;       x -> x + alpha * (y - alpha * x)
1310+ D413              ;       y -> y - alpha * x - beta * z
1311+ D413              ;       z -> z + beta * (y - alpha * x - beta * z)
1312+ D413              ; which can be simplified as:
1313+ D413              ;       1. K2 = y - alpha * x
1314+ D413              ;       2. z = z + beta * K2
1315+ D413              ;       3. y = K2 - beta * z
1316+ D413              ;       4. x = x + alpha * y
1317+ D413              ; 2 - we apply our patch and roll to the ship orientation
1318+ D413              ;      Roll calculations:
1319+ D413              ;
1320+ D413              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1321+ D413              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1322+ D413              ;      Pitch calculations:
1323+ D413              ;
1324+ D413              ;        nosev_y = nosev_y - beta * nosev_z_hi
1325+ D413              ;        nosev_z = nosev_z + beta * nosev_y_hi
1326+ D413
1327+ D413
1328+ D413              ; ---------------------------------------------------------------------------------------------------------------------------------
1329+ D413                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D413
   2++D413              ; Full version
   3++D413              ; 1. K2 = y - alpha * x
   4++D413              ; 2. z = z + beta * K2
   5++D413              ; 3. y = K2 - beta * z
   6++D413              ; 4. x = x + alpha * y
   7++D413
   8++D413
   9++D413              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D413             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D413 3A F9 96    >                        ld       a,(ALPHA)
   9++D416 32 E3 97    >                        ld       (varQ),a
   9++D419             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D419 2A 36 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++D41C 22 E4 97    >                        ld       (varR),hl
   9++D41F             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D41F 3A 34 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++D422 32 DC 96    >                        ld       (varP),a
   9++D425 3A 35 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D428 EE 80       >                        xor $80                             ;
   9++D42A CD E9 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D42D ED 53 36 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D431             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D431 2A 34 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++D434 22 E4 97    >                        ld       (varR),hl
   9++D437 3A 37 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D43A CD E9 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D43D ED 53 34 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D441 C9                                   ret
  11++D442              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D442             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D442 3A F9 96    >                        ld       a,(ALPHA)
  11++D445 32 E3 97    >                        ld       (varQ),a
  11++D448             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D448 2A 2A C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++D44B 22 E4 97    >                        ld       (varR),hl
  11++D44E             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D44E 3A 28 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++D451 32 DC 96    >                        ld       (varP),a
  11++D454 3A 29 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D457 EE 80       >                        xor $80                             ;
  11++D459 CD E9 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D45C ED 53 2A C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D460             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D460 2A 28 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++D463 22 E4 97    >                        ld       (varR),hl
  11++D466 3A 2B C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D469 CD E9 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D46C ED 53 28 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D470 C9                                   ret
  13++D471              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D471             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D471 3A F9 96    >                        ld       a,(ALPHA)
  13++D474 32 E3 97    >                        ld       (varQ),a
  13++D477             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D477 2A 30 C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++D47A 22 E4 97    >                        ld       (varR),hl
  13++D47D             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D47D 3A 2E C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++D480 32 DC 96    >                        ld       (varP),a
  13++D483 3A 2F C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D486 EE 80       >                        xor $80                             ;
  13++D488 CD E9 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D48B ED 53 30 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D48F             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D48F 2A 2E C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++D492 22 E4 97    >                        ld       (varR),hl
  13++D495 3A 31 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D498 CD E9 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D49B ED 53 2E C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D49F C9                                   ret
  15++D4A0
  16++D4A0              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D4A0             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D4A0 3A E8 96    >                        ld       a,(BETA)
  16++D4A3 32 E3 97    >                        ld       (varQ),a
  16++D4A6             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D4A6 2A 36 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++D4A9 22 E4 97    >                        ld       (varR),hl
  16++D4AC             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D4AC 3A 38 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++D4AF 32 DC 96    >                        ld       (varP),a
  16++D4B2 3A 39 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D4B5 EE 80       >                        xor $80                             ;
  16++D4B7 CD E9 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D4BA ED 53 36 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D4BE             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D4BE 2A 38 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++D4C1 22 E4 97    >                        ld       (varR),hl
  16++D4C4 3A 37 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D4C7 CD E9 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D4CA ED 53 38 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D4CE C9                                   ret
  18++D4CF              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D4CF             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D4CF 3A E8 96    >                        ld       a,(BETA)
  18++D4D2 32 E3 97    >                        ld       (varQ),a
  18++D4D5             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D4D5 2A 2A C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++D4D8 22 E4 97    >                        ld       (varR),hl
  18++D4DB             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D4DB 3A 2C C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++D4DE 32 DC 96    >                        ld       (varP),a
  18++D4E1 3A 2D C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D4E4 EE 80       >                        xor $80                             ;
  18++D4E6 CD E9 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D4E9 ED 53 2A C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D4ED             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D4ED 2A 2C C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++D4F0 22 E4 97    >                        ld       (varR),hl
  18++D4F3 3A 2B C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++D4F6 CD E9 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++D4F9 ED 53 2C C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++D4FD C9                                   ret
  20++D4FE              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++D4FE             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++D4FE 3A E8 96    >                        ld       a,(BETA)
  20++D501 32 E3 97    >                        ld       (varQ),a
  20++D504             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++D504 2A 30 C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++D507 22 E4 97    >                        ld       (varR),hl
  20++D50A             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++D50A 3A 32 C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++D50D 32 DC 96    >                        ld       (varP),a
  20++D510 3A 33 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++D513 EE 80       >                        xor $80                             ;
  20++D515 CD E9 A7    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++D518 ED 53 30 C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++D51C             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++D51C 2A 32 C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++D51F 22 E4 97    >                        ld       (varR),hl
  20++D522 3A 31 C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++D525 CD E9 A7    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D528 ED 53 32 C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D52C C9                                   ret
  22++D52D
  23++D52D
  24++D52D              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++D52D ~                                    push    bc
  26++D52D ~                                    ld      c,a                         ; save original value of a into c
  27++D52D ~                                    ld      a,(PositionSign)
  28++D52D ~                                    ld      b,a
  29++D52D ~                                    ld      a,c
  30++D52D ~                                    xor     b                           ; a = a xor x postition sign
  31++D52D ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++D52D ~            ; Signs are the same to we just add and take which ever sign
  33++D52D ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++D52D ~                                    ld      hl,(Position)
  35++D52D ~                                    add     hl,de
  36++D52D ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++D52D ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++D52D ~                                    pop     bc
  39++D52D ~                                    ret
  40++D52D ~            ; Signs are opposite so we subtract
  41++D52D ~            .MV50:                  ld      de,(varPp1)
  42++D52D ~                                    ld      hl,(Position)
  43++D52D ~                                    or      a
  44++D52D ~                                    sbc     hl,de
  45++D52D ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++D52D ~                                    ld      a,c                         ; get back the original sign
  47++D52D ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D52D ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++D52D ~                                    pop     bc
  50++D52D ~                                    ret
  51++D52D ~            .MV51:                  NegHL
  52++D52D ~                                    ld      (varPp1),hl
  53++D52D ~                                    ld      a,c                         ; the original sign will still be good
  54++D52D ~                                    pop     bc
  55++D52D ~                                    ret
  56++D52D                                      ENDM
  57++D52D
  58++D52D
  59++D52D              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++D52D C5          >                        push    bc
  59++D52E 4F          >                        ld      c,a                         ; save original value of a into c
  59++D52F 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++D532 47          >                        ld      b,a
  59++D533 79          >                        ld      a,c
  59++D534 A8          >                        xor     b                           ; a = a xor x postition sign
  59++D535 FA 46 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++D538             >; Signs are the same to we just add and take which ever sign
  59++D538 ED 5B DD 96 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++D53C 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D53F 19          >                        add     hl,de
  59++D540 22 DD 96    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++D543 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++D544 C1          >                        pop     bc
  59++D545 C9          >                        ret
  59++D546             >; Signs are opposite so we subtract
  59++D546 ED 5B DD 96 >.MV50:                  ld      de,(varPp1)
  59++D54A 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D54D B7          >                        or      a
  59++D54E ED 52       >                        sbc     hl,de
  59++D550 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++D552 79          >                        ld      a,c                         ; get back the original sign
  59++D553 22 DD 96    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++D556 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++D558 C1          >                        pop     bc
  59++D559 C9          >                        ret
  59++D55A             >.MV51:                  NegHL
  59++D55A AF          >                    xor a
  59++D55B 95          >                    sub l
  59++D55C 6F          >                    ld l,a
  59++D55D 9F          >                    sbc a,a
  59++D55E 94          >                    sub h
  59++D55F 67          >                    ld h,a
  59++D560 22 DD 96    >                        ld      (varPp1),hl
  59++D563 79          >                        ld      a,c                         ; the original sign will still be good
  59++D564 C1          >                        pop     bc
  59++D565 C9          >                        ret
  60++D566
  61++D566              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++D566 C5          >                        push    bc
  61++D567 4F          >                        ld      c,a                         ; save original value of a into c
  61++D568 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++D56B 47          >                        ld      b,a
  61++D56C 79          >                        ld      a,c
  61++D56D A8          >                        xor     b                           ; a = a xor x postition sign
  61++D56E FA 7F D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++D571             >; Signs are the same to we just add and take which ever sign
  61++D571 ED 5B DD 96 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++D575 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++D578 19          >                        add     hl,de
  61++D579 22 DD 96    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++D57C 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++D57D C1          >                        pop     bc
  61++D57E C9          >                        ret
  61++D57F             >; Signs are opposite so we subtract
  61++D57F ED 5B DD 96 >.MV50:                  ld      de,(varPp1)
  61++D583 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++D586 B7          >                        or      a
  61++D587 ED 52       >                        sbc     hl,de
  61++D589 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++D58B 79          >                        ld      a,c                         ; get back the original sign
  61++D58C 22 DD 96    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++D58F EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++D591 C1          >                        pop     bc
  61++D592 C9          >                        ret
  61++D593             >.MV51:                  NegHL
  61++D593 AF          >                    xor a
  61++D594 95          >                    sub l
  61++D595 6F          >                    ld l,a
  61++D596 9F          >                    sbc a,a
  61++D597 94          >                    sub h
  61++D598 67          >                    ld h,a
  61++D599 22 DD 96    >                        ld      (varPp1),hl
  61++D59C 79          >                        ld      a,c                         ; the original sign will still be good
  61++D59D C1          >                        pop     bc
  61++D59E C9          >                        ret
  62++D59F
  63++D59F              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++D59F C5          >                        push    bc
  63++D5A0 4F          >                        ld      c,a                         ; save original value of a into c
  63++D5A1 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++D5A4 47          >                        ld      b,a
  63++D5A5 79          >                        ld      a,c
  63++D5A6 A8          >                        xor     b                           ; a = a xor x postition sign
  63++D5A7 FA B8 D5    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++D5AA             >; Signs are the same to we just add and take which ever sign
  63++D5AA ED 5B DD 96 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++D5AE 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++D5B1 19          >                        add     hl,de
  63++D5B2 22 DD 96    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++D5B5 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++D5B6 C1          >                        pop     bc
  63++D5B7 C9          >                        ret
  63++D5B8             >; Signs are opposite so we subtract
  63++D5B8 ED 5B DD 96 >.MV50:                  ld      de,(varPp1)
  63++D5BC 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++D5BF B7          >                        or      a
  63++D5C0 ED 52       >                        sbc     hl,de
  63++D5C2 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++D5C4 79          >                        ld      a,c                         ; get back the original sign
  63++D5C5 22 DD 96    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++D5C8 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++D5CA C1          >                        pop     bc
  63++D5CB C9          >                        ret
  63++D5CC             >.MV51:                  NegHL
  63++D5CC AF          >                    xor a
  63++D5CD 95          >                    sub l
  63++D5CE 6F          >                    ld l,a
  63++D5CF 9F          >                    sbc a,a
  63++D5D0 94          >                    sub h
  63++D5D1 67          >                    ld h,a
  63++D5D2 22 DD 96    >                        ld      (varPp1),hl
  63++D5D5 79          >                        ld      a,c                         ; the original sign will still be good
  63++D5D6 C1          >                        pop     bc
  63++D5D7 C9          >                        ret
  64++D5D8
  65++D5D8              ; rollWork holds Alpha intermidate results
  66++D5D8 00 00 00     rollWork      DS 3
  67++D5DB              rollWorkp1    equ rollWork
  68++D5DB              rollWorkp2    equ rollWork+1
  69++D5DB              rollWorkp3    equ rollWork+2
  70++D5DB
  71++D5DB              ;----------------------------------------------------------------------------------------------------------------------------------
  72++D5DB              ; based on MVEIT part 4 of 9
  73++D5DB 3A FA 96     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++D5DE 21 EA 96                             ld      hl,BET1                     ; and pitch
  75++D5E1 B6                                   or      (hl)
  76++D5E2 CA 9C D6                             jp      z,.NoRotation               ; if both zero then don't compute
  77++D5E5                                      ;break
  78++D5E5              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++D5E5 5F                                   ld      e,a                         ; e = roll magnitude
  80++D5E6 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++D5E9 CD 45 A8                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++D5EC 32 DE 96                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++D5EF 22 DC 96                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++D5F2              ; A = Flip sign
  85++D5F2 3A FC 96                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++D5F5 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++D5F8 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++D5F9              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++D5F9 CD 66 D5                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++D5FC              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++D5FC 32 DA D5                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++D5FF 22 D8 D5                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++D602              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++D602 3A EA 96                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++D605 5F                                   ld      e,a
  96++D606 CD 45 A8                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++D609 32 DE 96                             ld      (varPp2),a                   ; save highest byte in P2
  98++D60C 22 DC 96                             ld      (varP),hl
  99++D60F              ; Fetch sign of previosu cal and xor with BETA inverted
 100++D60F 3A DA D5                             ld      a,(rollWorkp3)
 101++D612 5F                                   ld      e,a
 102++D613 3A EB 96                             ld      a,(BET2)
 103++D616 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++D617              ; Z = P[210] =Z + APP
 105++D617 CD 9F D5                             call    APPequZPosPlusAPP           ; MVT6
 106++D61A 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++D61D 22 12 C0                             ld      (UBnKzlo),hl
 108++D620              ; A[P1]P[0] = z * Beta
 109++D620 3A EA 96                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++D623 5F                                   ld      e,a
 111++D624 CD 45 A8                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++D627 32 DE 96                             ld      (varPp2),a                  ; P2 = high byte of result
 113++D62A 22 DC 96                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++D62D              ; A xor BET2,Zsign
 115++D62D 3A DA D5                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++D630 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++D633 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++D634 3A EB 96                             ld      a,(BET2)                    ;
 119++D637 AB                                   xor     e                           ;
 120++D638 5F                                   ld      e,a                         ; now xor it with z sign too
 121++D639 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++D63C AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++D63D F2 4C D6                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++D640 2A DD 96                             ld      hl,(varPp1)
 125++D643 ED 5B D8 D5                          ld      de,(rollWorkp1)
 126++D647 B7                                   or      a
 127++D648 19                                   add     hl,de
 128++D649 C3 66 D6                             jp      .MV44
 129++D64C 2A D8 D5     .MV43:                  ld      hl,(rollWorkp1)
 130++D64F ED 5B DD 96                          ld      de,(varPp1)
 131++D653 B7                                   or      a
 132++D654 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++D656 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++D658                                      NegHL
 134++D658 AF          >                    xor a
 134++D659 95          >                    sub l
 134++D65A 6F          >                    ld l,a
 134++D65B 9F          >                    sbc a,a
 134++D65C 94          >                    sub h
 134++D65D 67          >                    ld h,a
 135++D65E 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++D661 EE 80                                xor     SignOnly8Bit
 137++D663 32 11 C0                             ld      (UBnKysgn),a
 138++D666              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++D666 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++D669 3A FA 96                             ld      a,(ALP1)                    ; get roll magnitude
 141++D66C 5F                                   ld      e,a
 142++D66D 2A 0F C0                             ld      hl,(UBnKylo)
 143++D670 CD 45 A8                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++D673 32 DE 96                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++D676 22 DC 96                             ld      (varP),hl
 146++D679 3A FB 96                             ld      a,(ALP2)
 147++D67C 5F                                   ld      e,a
 148++D67D 3A 11 C0                             ld      a,(UBnKysgn)
 149++D680 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++D681 CD 2D D5                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++D684 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++D687 22 0C C0                             ld      (UBnKxlo),hl
 153++D68A                                      ;break
 154++D68A                                      ; if its not a sun then apply to local orientation
 155++D68A
 156++D68A CD 13 D4                             call    ApplyMyRollToNosev
 157++D68D CD 42 D4                             call    ApplyMyRollToSidev
 158++D690 CD 71 D4                             call    ApplyMyRollToRoofv
 159++D693 CD A0 D4                             call    ApplyMyPitchToNosev
 160++D696 CD CF D4                             call    ApplyMyPitchToSidev
 161++D699 CD FE D4                             call    ApplyMyPitchToRoofv
 162++D69C 3A DF 97     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++D69F 16 00                                ld      d,0
 164++D6A1 5F                                   ld      e,a                         ; de = speed in low byte
 165++D6A2 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++D6A5 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++D6A8 47                                   ld      b,a                         ;
 168++D6A9 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++D6AB CD F5 AD                             call    ADDHLDESignBC               ; update speed
 170++D6AE 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++D6B1 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++D6B4 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1330+ D6B5                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D6B5              ;----------------------------------------------------------------------------------------------------------------------------------
   2++D6B5              ; based on MVEIT part 4 of 9
   3++D6B5 3A 22 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++D6B8 47                                   ld      b,a
   5++D6B9 E6 80                                and     SignOnly8Bit
   6++D6BB 4F                                   ld      c,a
   7++D6BC 32 3B C0                             ld      (univRAT2),a                ; get sign of pitch
   8++D6BF 78                                   ld      a,b
   9++D6C0 E6 7F                                and     SignMask8Bit                ; and magnitude
  10++D6C2 28 3A                                jr      z,.ProcessRoll
  11++D6C4 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++D6C6 28 01                                jr      z,.NoPitchDamping
  13++D6C8 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++D6C9 32 3C C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++D6CC 47                                   ld      b,a
  16++D6CD B1                                   or      c                           ; bring sign back in
  17++D6CE 32 22 C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++D6D1 21 2E C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++D6D4 22 C5 96                             ld	    (varAxis1),hl
  20++D6D7 21 34 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++D6DA 22 C7 96                             ld	    (varAxis2),hl
  22++D6DD CD C2 C6                             call    MVS5RotateAxis
  23++D6E0 21 30 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++D6E3 22 C5 96                             ld	    (varAxis1),hl
  25++D6E6 21 36 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++D6E9 22 C7 96                             ld	    (varAxis2),hl
  27++D6EC CD C2 C6                             call    MVS5RotateAxis
  28++D6EF 21 32 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++D6F2 22 C5 96                             ld	    (varAxis1),hl
  30++D6F5 21 38 C0                             ld	    hl,UBnkrotmatNosevZ
  31++D6F8 22 C7 96                             ld	    (varAxis2),hl
  32++D6FB CD C2 C6                             call    MVS5RotateAxis
  33++D6FE 3A 21 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++D701 47                                   ld      b,a
  35++D702 E6 80                                and     SignOnly8Bit
  36++D704 4F                                   ld      c,a
  37++D705 32 3B C0                             ld      (univRAT2),a                ; get sign of pitch
  38++D708 78                                   ld      a,b
  39++D709 E6 7F                                and     SignMask8Bit                ; and magnitude
  40++D70B C8                                   ret     z                           ; if no work to do then exit
  41++D70C FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++D70E 28 01                                jr      z,.NoRollDamping
  43++D710 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++D711 32 3C C0     .NoRollDamping          ld      (univRAT2Val),a
  45++D714 47                                   ld      b,a
  46++D715 B1                                   or      c                           ; bring sign back in
  47++D716 32 21 C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++D719 21 2E C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++D71C 22 C5 96                             ld	    (varAxis1),hl
  50++D71F 21 28 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++D722 22 C7 96                             ld	    (varAxis2),hl
  52++D725 CD C2 C6                             call    MVS5RotateAxis
  53++D728 21 30 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++D72B 22 C5 96                             ld	    (varAxis1),hl
  55++D72E 21 2A C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++D731 22 C7 96                             ld	    (varAxis2),hl
  57++D734 CD C2 C6                             call    MVS5RotateAxis
  58++D737 21 32 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++D73A 22 C5 96                             ld	    (varAxis1),hl
  60++D73D 21 2C C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++D740 22 C7 96                             ld	    (varAxis2),hl
  62++D743 CD C2 C6                             call    MVS5RotateAxis
  63++D746 C9                                   ret
  64++D747
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1331+ D747                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++D747
   2++D747              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++D747 00           DrawLinesCounter		db	0
   4++D748              ; Initial tests look OK
   5++D748              LL155:;
   6++D748              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++D748                    ;break                                                                             ; ObjectInFront:
   8++D748 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++D74A FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++D74C 3A FF C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++D74F                                      ReturnIfAIsZero   						; No lines then bail out.
  11++D74F A7          >                        and     a
  11++D750 C8          >                        ret     z
  12++D751 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++D753 21 0D C2                             ld		hl,UbnkLineArray
  14++D756              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++D756 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++D757 23                                   inc     hl
  17++D758 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++D759 23                                   inc     hl
  19++D75A              ;;DEBUGTEST        push bc
  20++D75A              ;;DEBUGTEST        push hl
  21++D75A              ;;DEBUGTEST        push de
  22++D75A              ;;DEBUGTEST        ld  a,$3F
  23++D75A              ;;DEBUGTEST        MMUSelectLayer2
  24++D75A              ;;DEBUGTEST        call    l2_plot_pixel
  25++D75A              ;;DEBUGTEST        pop de
  26++D75A              ;;DEBUGTEST        pop hl
  27++D75A              ;;DEBUGTEST        pop bc
  28++D75A 5E                                   ld      e,(hl)                          ; c = varX1
  29++D75B 23                                   inc     hl
  30++D75C 56                                   ld      d,(hl)                          ; de = point2 Y,X
  31++D75D              ;;DEBUGTEST       push bc
  32++D75D              ;;DEBUGTEST       push hl
  33++D75D              ;;DEBUGTEST       push de
  34++D75D              ;;DEBUGTEST       push de
  35++D75D              ;;DEBUGTEST       pop  bc
  36++D75D              ;;DEBUGTEST       ld  a,$3F
  37++D75D              ;;DEBUGTEST       MMUSelectLayer2
  38++D75D              ;;DEBUGTEST       call    l2_plot_pixel
  39++D75D              ;;DEBUGTEST       pop de
  40++D75D              ;;DEBUGTEST       pop hl
  41++D75D              ;;DEBUGTEST       pop bc
  42++D75D 23                                   inc     hl
  43++D75E E5                                   push	hl
  44++D75F FD E5                                push    iy
  45++D761 60                                   ld      h,b
  46++D762 69                                   ld      l,c
  47++D763                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  48++D763 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  49++D765                                      MMUSelectLayer2
  49++D765 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50++D769 CD EA E8                             call    LineHLtoDE
  51++D76C FD E1                                pop     iy
  52++D76E E1                                   pop	    hl
  53++D76F FD 25                                dec     iyh
  54++D771 20 E3                                jr		nz,DrawXX19ClippedLines
  55++D773 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  56++D774
# file closed: ././ModelRender/DrawLines.asm
1332+ D774              ; ---------------------------------------------------------------------------------------------------------------------------------
1333+ D774
1334+ D774              ; DIot seem to lawyas have Y = 0???
1335+ D774              ProcessDot:            ; break
1336+ D774 CD 51 CA                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1337+ D777 CD 5B 90                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1338+ D77A CD 07 CD                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1339+ D77D CD D4 CB                             call    InverseXX16                      ;#11; Invert rotation matrix
1340+ D780 21 00 00                             ld      hl,0
1341+ D783 32 82 C0                             ld      (UBnkXScaled),a
1342+ D786 32 84 C0                             ld      (UBnkYScaled),a
1343+ D789 32 86 C0                             ld      (UBnkZScaled),a
1344+ D78C AF                                   xor     a
1345+ D78D CD 81 8F                             call    XX12EquNodeDotOrientation
1346+ D790 CD 88 CA                             call    TransposeXX12ByShipToXX15
1347+ D793 CD 05 CB                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1348+ D796 FD 21 CD C0                          ld      iy,UBnkNodeArray
1349+ D79A CD BC D3                             call    ProjectNodeToEye
1350+ D79D C9                                   ret
1351+ D79E
1352+ D79E              ; .....................................................
1353+ D79E              ; Process Nodes does the following:
1354+ D79E              ; for each node:
1355+ D79E              ;     see if node >
1356+ D79E 00           PNXX20DIV6          DB      0
1357+ D79F 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1358+ D7A1 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1359+ D7A3 00           PNLASTNORM          DB      0
1360+ D7A4              ProcessNodes:           ZeroA
1360+ D7A4 AF          >                        xor a
1361+ D7A5 32 FF C2                             ld      (UbnkLineArrayLen),a
1362+ D7A8 CD 51 CA                             call CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1363+ D7AB CD 5B 90                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1364+ D7AE CD 07 CD                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1365+ D7B1 CD D4 CB                             call    InverseXX16                      ;#11; Invert rotation matrix
1366+ D7B4 21 24 C3                             ld      hl,UBnkHullVerticies
1367+ D7B7 3A 13 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1368+ D7BA 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1369+ D7BB 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1370+ D7BC 16 06                                ld      d,6
1371+ D7BE CD 24 AA                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1372+ D7C1 41                                   ld      b,c                              ; c = number of vertices
1373+ D7C2 FD 21 CD C0                          ld      iy,UBnkNodeArray
1374+ D7C6              LL48:
1375+ D7C6 C5           PointLoop:	            push	bc                                  ; save counters
1376+ D7C7 E5                                   push	hl                                  ; save verticies list pointer
1377+ D7C8 FD E5                                push	iy                                  ; save Screen plot array pointer
1378+ D7CA 78                                   ld      a,b
1379+ D7CB                                      ;break
1380+ D7CB CD 39 D3                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1381+ D7CE 3A 83 C0                             ld		a,(UBnkXScaledSign)
1382+ D7D1 CD 81 8F                             call    XX12EquNodeDotOrientation
1383+ D7D4 CD 88 CA                             call    TransposeXX12ByShipToXX15
1384+ D7D7 CD 05 CB                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1385+ D7DA FD E1                                pop		iy                                  ; get back screen plot array pointer
1386+ D7DC CD BC D3                             call    ProjectNodeToEye                     ; set up screen plot list entry
1387+ D7DF                 ; ld      hl,UbnkLineArrayLen
1388+ D7DF                ;  inc     (hl)                                ; another node done
1389+ D7DF FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1390+ D7E1 E1                                   pop		hl
1391+ D7E2 3E 04                                ld		a,4
1392+ D7E4 ED 31                                add		hl,a
1393+ D7E6 E5                                   push	hl                                  ; write it back at iy + 4
1394+ D7E7 FD E1                                pop		iy								    ; and put it in iy again
1395+ D7E9 E1                                   pop		hl                                  ; get hl back as vertex list
1396+ D7EA 3E 06                                ld		a,6
1397+ D7EC ED 31                                add 	hl,a                                ; and move to next vertex
1398+ D7EE C1                                   pop		bc                                  ; get counter back
1399+ D7EF 10 D5                                djnz	PointLoop
1400+ D7F1              ; ......................................................
1401+ D7F1                                      ClearCarryFlag
1401+ D7F1 B7          >                        or a
1402+ D7F2 C9                                   ret
1403+ D7F3
1404+ D7F3              ; ......................................................
1405+ D7F3 CD B6 CF     ProcessShip:            call    CheckDistance               ; checks for z -ve and outside view frustrum
1406+ D7F6 D8                                   ret     c                           ; carry flag means drop out
1407+ D7F7 3A 9B C0     .IsItADot:              ld      a,(UBnKDrawAsDot)           ; if its just a dot then don't draw
1408+ D7FA                                      JumpIfATrue .CarryOnWithDraw
1408+ D7FA A7          >                        and     a
1408+ D7FB CA 1E D8    >                        jp      z, .CarryOnWithDraw
1409+ D7FE CD 74 D7     .itsJustADot:           call    ProcessDot
1410+ D801 ED 4B CD C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1411+ D805 ED 5B CF C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1412+ D809 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1413+ D80A B2                                   or      d                           ;
1414+ D80B C0                                   ret     nz                          ;
1415+ D80C 7B                                   ld      a,e
1416+ D80D E6 80                                and     %10000000                   ; check to see if Y > 128
1417+ D80F C0                                   ret     nz
1418+ D810 43                                   ld      b,e                         ; now b = y and c = x
1419+ D811 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1420+ D813 3E E0                                ld      a,224
1421+ D815                                      MMUSelectLayer2                     ; then go to update radar
1421+ D815 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1422+ D819 CD FF E0                             call    l2_plot_pixel               ;
1423+ D81C                                      ClearCarryFlag
1423+ D81C B7          >                        or a
1424+ D81D C9                                   ret
1425+ D81E              .CarryOnWithDraw:       ;break
1426+ D81E 3A 24 C0                             ld      a,(UBnkaiatkecm)            ; if its exploding then we just draw
1427+ D821 F6 20                                or      ShipExploding               ; clouds of pixels
1428+ D823 20 0E                                jr      nz,.ExplodingCloud          ; .
1429+ D825 CD A4 D7                             call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1430+ D828 CD 04 D0                             call    CullV2
1431+ D82B CD B7 D8                             call    PrepLines
1432+ D82E CD 48 D7                             call    DrawLines
1433+ D831                                      ClearCarryFlag
1433+ D831 B7          >                        or a
1434+ D832 C9                                   ret
1435+ D833              .ExplodingCloud:
1436+ D833              ; ......................................................
1437+ D833
1438+ D833              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1439+ D833              ;  Entering Here we have the following:
1440+ D833              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1441+ D833              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1442+ D833              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1443+ D833              ;
1444+ D833              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1445+ D833              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1446+ D833              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1447+ D833              ;--------------------------------------------------------------------------------------------------------
1448+ D833              AddLaserBeamLine:
1449+ D833              ; this code is a bag of shit and needs re-writing
1450+ D833              GetGunVertexNode:
1451+ D833 3A 11 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1452+ D836 21 CD C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1453+ D839 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1454+ D83B FD 2E 00             ld          iyl,0
1455+ D83E              MoveX1PointToXX15:
1456+ D83E 4E                   ld          c,(hl)                              ;
1457+ D83F 23                   inc         hl
1458+ D840 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1459+ D841 23                   inc         hl
1460+ D842 ED 43 82 C0          ld          (UBnkX1),bc
1461+ D846 0C                   inc         c
1462+ D847 C8                   ret         z                                   ; was c 255?
1463+ D848 04                   inc         b
1464+ D849 C8                   ret         z                                   ; was c 255?
1465+ D84A              MoveY1PointToXX15:
1466+ D84A 4E                   ld          c,(hl)                              ;
1467+ D84B 23                   inc         hl
1468+ D84C 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1469+ D84D 23                   inc         hl
1470+ D84E ED 43 84 C0          ld          (UBnkY1),bc
1471+ D852              SetX2PointToXX15:
1472+ D852 01 00 00             ld          bc,0                                ; set X2 to 0
1473+ D855 ED 43 86 C0          ld          (UBnkX2),bc
1474+ D859 3A 12 C0             ld          a,(UBnKzlo)
1475+ D85C 4F                   ld          c,a
1476+ D85D              SetY2PointToXX15:
1477+ D85D ED 43 88 C0          ld          (UBnkY2),bc                         ; set Y2to 0
1478+ D861 3A 0E C0             ld          a,(UBnKxsgn)
1479+ D864                      JumpOnBitClear a,7,LL74SkipDec
1479+ D864 CB 7F       >                        bit 	7,a
1479+ D866 CA 6E D8    >                        jp      z,LL74SkipDec
1480+ D869              LL74DecX2:
1481+ D869 3E FF                ld          a,$FF
1482+ D86B 32 86 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1483+ D86E              LL74SkipDec:
1484+ D86E CD FB C7             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1485+ D871 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1486+ D873              ; Here we are usign hl to replace VarU as index
1487+ D873 2A E6 97             ld          hl,(varU16)
1488+ D876 3A 82 C0             ld          a,(UBnKx1Lo)
1489+ D879 77                   ld          (hl),a
1490+ D87A 23                   inc         hl
1491+ D87B 3A 84 C0             ld          a,(UbnKy1Lo)
1492+ D87E 77                   ld          (hl),a
1493+ D87F 23                   inc         hl
1494+ D880 3A 86 C0             ld          a,(UBnkX2Lo)
1495+ D883 77                   ld          (hl),a
1496+ D884 23                   inc         hl
1497+ D885 3A 88 C0             ld          a,(UbnKy2Lo)
1498+ D888 77                   ld          (hl),a
1499+ D889 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1500+ D88B 23                   inc         hl
1501+ D88C FD 2C                inc         iyl                                 ; ready for next byte
1502+ D88E 22 E6 97             ld          (varU16),hl
1503+ D891 C9                   ret
1504+ D892
1505+ D892                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++D892              ;--------------------------------------------------------------------------------------------------------
   2++D892                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++D892              ;--------------------------------------------------------------------------------------------------------
   2++D892              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D892 21 CD C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D895 ED 31                                add         hl,a                                ; hl = address of Node
   5++D897 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D898 11 82 C0                             ld          de,UBnkX1
   7++D89B ED A0                                ldi                                             ; x1 lo
   8++D89D ED A0                                ldi                                             ; x1 hi
   9++D89F ED A0                                ldi                                             ; y1 lo
  10++D8A1 ED A0                                ldi                                             ; y1 hi
  11++D8A3 C9                                   ret
  12++D8A4
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++D8A4                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++D8A4              ;--------------------------------------------------------------------------------------------------------
   2++D8A4              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D8A4 21 CD C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D8A7 ED 31                                add         hl,a                                ; hl = address of Node
   5++D8A9 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D8AA 11 86 C0                             ld          de,UBnkX2
   7++D8AD ED A0                                ldi                                             ; x1 lo
   8++D8AF ED A0                                ldi                                             ; x1 hi
   9++D8B1 ED A0                                ldi                                             ; y1 lo
  10++D8B3 ED A0                                ldi                                             ; y1 hi
  11++D8B5 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++D8B6                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++D8B6              ;--------------------------------------------------------------------------------------------------------
   2++D8B6              GetFaceAtA:         MACRO
   3++D8B6 ~                                ld          hl,UbnkFaceVisArray
   4++D8B6 ~                                add         hl,a
   5++D8B6 ~                                ld          a,(hl)                              ; get face visibility
   6++D8B6                                  ENDM
   7++D8B6
# file closed: ././ModelRender/GetFaceAtA.asm
   5++D8B6              ;--------------------------------------------------------------------------------------------------------
   6++D8B6              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++D8B6               ;   DEFINE NOBACKFACECULL 1
   8++D8B6 00           PLEDGECTR           DB          0
   9++D8B7
  10++D8B7              PrepLines:
  11++D8B7              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++D8B7
  13++D8B7              ; TODO add in onced DOEXP is finished
  14++D8B7              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++D8B7              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++D8B7              ;        or          8
  17++D8B7              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++D8B7              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++D8B7              ;EE31:                                                   ; no explosion
  20++D8B7              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++D8B7              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++D8B7              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++D8B7              ;
  24++D8B7              ;--------------------------------------------------------------------------------------------------------
  25++D8B7              InitialiseLineRead:
  26++D8B7                      ;break
  27++D8B7                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++D8B7 AF          >                        xor      a
  27++D8B8 32 FF C2    >                        ld       (UbnkLineArrayLen),a
  28++D8BB                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++D8BB AF          >                        xor      a
  28++D8BC 32 00 C3    >                        ld       (UbnkLineArrayBytes),a
  29++D8BF                      ldWriteZero PLEDGECTR
  29++D8BF AF          >                        xor      a
  29++D8C0 32 B6 D8    >                        ld       (PLEDGECTR),a
  30++D8C3 3A 14 C3             ld          a,(EdgeCountAddr)
  31++D8C6 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++D8C8 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++D8CB 21 0D C2             ld          hl,UbnkLineArray                    ; head of array
  34++D8CE 22 E6 97             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++D8D1                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++D8D1 3A 14 C3    >                        ld       a,(EdgeCountAddr)
  35++D8D4 32 EA 97    >                        ld       (XX17),a
  36++D8D7 3A 23 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++D8DA                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++D8DA CB 77       >                        bit 	6,a
  37++D8DC CA E4 D8    >                        jp      z,CalculateNewLines
  38++D8DF E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++D8E1 32 23 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++D8E4              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++D8E4              ; NOw we can calculate hull after including laser line
  42++D8E4              CalculateNewLines:
  43++D8E4              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++D8E4              CheckEdgesForVisibility:
  45++D8E4 21 14 C4             ld          hl,UBnkHullEdges
  46++D8E7                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++D8E7 22 E1 96             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++D8EA 3A 10 C3             ld          a,(LineX4Addr)
  49++D8ED 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++D8EE              LL75Loop:                                               ; count Visible edges
  51++D8EE              IsEdgeInVisibilityRange:
  52++D8EE 2A E1 96             ld          hl,(varV)
  53++D8F1 E5                   push        hl
  54++D8F2 FD E1                pop         iy
  55++D8F4                      IFDEF NOBACKFACECULL
  56++D8F4 ~                        jp          VisibileEdge; DEBUGTODO
  57++D8F4                      ENDIF
  58++D8F4 3A D1 96             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++D8F7 57                   ld          d,a                                 ; d holds copy of XX4
  60++D8F8              ; Get Edge Byte 0
  61++D8F8 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++D8FB                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++D8FB BA          >                        cp      d
  62++D8FC DA 4F D9    >                        jp		c, LL78EdgeNotVisible
  63++D8FF              EdgeMayBeVisibile:
  64++D8FF              ; Get Edge Byte 1
  65++D8FF              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++D8FF FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++D902 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++D903 E6 0F                and         $0F                                 ;
  69++D905                      GetFaceAtA
  69++D905 21 AF C0    >                    ld          hl,UbnkFaceVisArray
  69++D908 ED 31       >                    add         hl,a
  69++D90A 7E          >                    ld          a,(hl)                              ; get face visibility
  70++D90B              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++D90B                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++D90B FE 00       >                        cp	0
  71++D90D C2 21 D9    >                        jp	nz,VisibileEdge
  72++D910              IsFace2Visibile:
  73++D910 79                   ld          a,c                                 ; restore byte 1 from c register
  74++D911 ED 23                swapnib                                         ;
  75++D913 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++D915 E5                   push        hl
  77++D916                      GetFaceAtA
  77++D916 21 AF C0    >                    ld          hl,UbnkFaceVisArray
  77++D919 ED 31       >                    add         hl,a
  77++D91B 7E          >                    ld          a,(hl)                              ; get face visibility
  78++D91C E1                   pop         hl
  79++D91D                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++D91D A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++D91E CA 4F D9    >                        jp	z, LL78EdgeNotVisible
  80++D921              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++D921              ;LL79--Visible edge--------------------------------------
  82++D921              ; Get Edge Byte 2
  83++D921 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++D924 CD 92 D8             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++D927 FD 7E 03             ld          a,(IY+3)
  86++D92A CD A4 D8             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++D92D CD FB C7             call        ClipLine
  88++D930 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++D932              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++D932 ED 5B E6 97          ld          de,(varU16)                         ; clipped edges heap address
  91++D936 21 82 C0             ld          hl,UBnkNewX1
  92++D939                      FourLDIInstrunctions
  92++D939 ED A0       >                        ldi
  92++D93B ED A0       >                        ldi
  92++D93D ED A0       >                        ldi
  92++D93F ED A0       >                        ldi
  93++D941 ED 53 E6 97          ld          (varU16),de                         ; update U16 with current address
  94++D945 21 FF C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++D948 34                   inc         (hl)
  96++D949 7E                   ld          a,(hl)
  97++D94A                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++D94A FE 32       >                        cp     LineArraySize
  97++D94C D2 65 D9    >                        jp		nc,CompletedLineGeneration
  98++D94F              ; If we hit here we skip the write of line arryay u16
  99++D94F              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++D94F              LL78:
 101++D94F 2A E1 96             ld          hl,(varV)                           ; varV is current edge address
 102++D952 3E 04                ld          a,4
 103++D954 ED 31                add         hl,a
 104++D956 22 E1 96             ld          (varV),hl
 105++D959 21 B6 D8             ld          hl,PLEDGECTR                        ;
 106++D95C 34                   inc         (hl)                                ;
 107++D95D 7E                   ld          a,(hl)                              ; current edge index ++
 108++D95E                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++D95E 21 EA 97    >                        ld    hl,XX17
 108++D961 BE          >                        cp    (hl)
 108++D962 C2 EE D8    >                        jp      nz,LL75Loop
 109++D965              CompletedLineGeneration:
 110++D965              LL81:
 111++D965              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++D965 3A FF C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++D968 CB 27                sla         a
 114++D96A CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++D96C 32 00 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++D96F              ExitEdgeDataLoop:
 117++D96F C9                   ret
 118++D970
# file closed: ./Universe/Ships/PrepLines.asm
1506+ D970
1507+ D970              UnivBankSize  EQU $ - StartOfUniv
1508+ D970
# file closed: ./Universe/Ships/univ_ship_data.asm
1296  D970                  DISPLAY "Universe Data - Bytes free ",/D, $2000 - (UnivBankSize)
1297  D970                  SLOT    UniverseBankAddr
1298  D970                  PAGE    BankUNIVDATA1
1299  D970              	ORG	UniverseBankAddr,BankUNIVDATA1
1300  C000 FF           UNIVDATABlock1      DB $FF
1301  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1302  E000
1303  E000                  SLOT    UniverseBankAddr
1304  E000                  PAGE    BankUNIVDATA2
1305  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1306  C000 FF           UNIVDATABlock2      DB $FF
1307  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1308  E000
1309  E000                  SLOT    UniverseBankAddr
1310  E000                  PAGE    BankUNIVDATA3
1311  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1312  C000 FF           UNIVDATABlock3      DB $FF
1313  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1314  E000
1315  E000                  SLOT    UniverseBankAddr
1316  E000                  PAGE    BankUNIVDATA4
1317  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1318  C000 FF           UNIVDATABlock4      DB $FF
1319  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1320  E000
1321  E000                  SLOT    UniverseBankAddr
1322  E000                  PAGE    BankUNIVDATA5
1323  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1324  C000 FF           UNIVDATABlock5      DB $FF
1325  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1326  E000
1327  E000                  SLOT    UniverseBankAddr
1328  E000                  PAGE    BankUNIVDATA6
1329  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1330  C000 FF           UNIVDATABlock6      DB $FF
1331  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1332  E000
1333  E000                  SLOT    UniverseBankAddr
1334  E000                  PAGE    BankUNIVDATA7
1335  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1336  C000 FF           UNIVDATABlock7      DB $FF
1337  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1338  E000
1339  E000                  SLOT    UniverseBankAddr
1340  E000                  PAGE    BankUNIVDATA8
1341  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1342  C000 FF           UNIVDATABlock8      DB $FF
1343  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1344  E000
1345  E000                  SLOT    UniverseBankAddr
1346  E000                  PAGE    BankUNIVDATA9
1347  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1348  C000 FF           UNIVDATABlock9      DB $FF
1349  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1350  E000
1351  E000                  SLOT    UniverseBankAddr
1352  E000                  PAGE    BankUNIVDATA10
1353  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1354  C000 FF           UNIVDATABlock10     DB $FF
1355  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1356  E000
1357  E000                  SLOT    UniverseBankAddr
1358  E000                  PAGE    BankUNIVDATA11
1359  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1360  C000 FF           UNIVDATABlock11     DB $FF
1361  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1362  E000
1363  E000                  SLOT    UniverseBankAddr
1364  E000                  PAGE    BankUNIVDATA12
1365  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1366  C000 FF           UNIVDATABlock12     DB $FF
1367  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1368  E000
1369  E000                  SLOT    GalaxyDataAddr
1370  E000                  PAGE    BankGalaxyData0
1371  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1372  E000                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 EC 9F 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D A1 A2 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 D1 9F E2 9F                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 E8 9F 00 00
 316+ F41D F8 9F FF 9F                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 EC 9F F1 9F                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D D7 9F DE 9F                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 06 A0 0D A0                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D 6B A0 06 A0                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 39 A0 00 00
 321+ F445 45 A0 4D A0                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D 62 A0 A9 A2                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 BB 9F 18 A0                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 12 A0 00 00
 324+ F45D CC 9F 18 A0                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 12 A0 00 00
 325+ F465 C7 9F 18 A0                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 12 A0 00 00
 326+ F46D C1 9F 18 A0                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 12 A0 00 00
 327+ F475 BB 9F 1E A0                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 12 A0 00 00
 328+ F47D CC 9F 1E A0                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 12 A0 00 00
 329+ F485 C7 9F 1E A0                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 12 A0 00 00
 330+ F48D C1 9F 1E A0                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 12 A0 00 00
 331+ F495 BB 9F 2B A0                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 12 A0 00 00
 332+ F49D CC 9F 2B A0                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 12 A0 00 00
 333+ F4A5 C7 9F 2B A0                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 12 A0 00 00
 334+ F4AD C1 9F 2B A0                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 12 A0 00 00
 335+ F4B5 BB 9F B4 A2                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 12 A0 00 00
 336+ F4BD CC 9F B4 A2                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 12 A0 00 00
 337+ F4C5 C7 9F B4 A2                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 12 A0 00 00
 338+ F4CD C1 9F B4 A2                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 12 A0 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD C9 9C     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD E1 9C     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 DF A4     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A D0 98                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD 00 A5     .LargeSizeName:         call	NamingLoop
 401+ F690 CD 00 A5     .SmallSizeName:         call	NamingLoop
 402+ F693 CD 00 A5                             call	NamingLoop
 403+ F696 CD 00 A5                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A D2 98     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A D3 98                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A D4 98                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A D5 98                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 56 9C     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A 1B 9C     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A 4F 98     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD 74 A8                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 CF 97     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 D0 98             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 D0 98             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 CF 97     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 CF 97     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 CF 97     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 E8 97                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A E8 97                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 E8 97                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c, nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c, nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                        cp    2
1156+ FBCF D8          >                        ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      JumpIfAIsNotZero find_nearest_loop
1164+ FBDE FE 00       >                        cp	0
1164+ FBE0 C2 6E FB    >                        jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD 13 A9                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 75 98                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 75 98                             ld      (Distance),a
1229+ FC51 32 76 98                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1233+ FC55              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1234+ FC55 AF           galaxy_system_under_cursor:xor     a
1235+ FC56 32 E8 97                             ld		(XSAV),a
1236+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1237+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1238+ FC60 DD E5                                push    ix
1239+ FC62 7D                                   ld      a,l
1240+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1241+ FC66 20 14                                jr      nz,.ItsNotThisX
1242+ FC68 7C                                   ld      a,h
1243+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1244+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1245+ FC6E DD E5                                push    ix
1246+ FC70 E1                                   pop     hl
1247+ FC71 11 D0 98                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1248+ FC74 CD B4 9C                             call    copy_seed
1249+ FC77 3E FF                                ld      a,$FF
1250+ FC79 DD E1                                pop     ix
1251+ FC7B C9                                   ret
1252+ FC7C E1           .ItsNotThisX:           pop     hl
1253+ FC7D ED 34 08 00                          add     hl,8
1254+ FC81 E5                                   push    hl
1255+ FC82 DD E1                                pop     ix
1256+ FC84 3A E8 97                             ld		a,(XSAV)
1257+ FC87 3D                                   dec		a
1258+ FC88 32 E8 97                             ld      (XSAV),a
1259+ FC8B FE 00                                cp		0
1260+ FC8D C8                                   ret		z
1261+ FC8E 18 CD                                jr		.GCCounterLoop
1262+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1263+ FC90 21 CF 97     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1264+ FC93 11 10 E0                             ld      de,galaxy_master_seed           ; .
1265+ FC96 ED A0                                ldi                                     ; .
1266+ FC98 ED A0                                ldi                                     ; .
1267+ FC9A ED A0                                ldi                                     ; .
1268+ FC9C ED A0                                ldi                                     ; .
1269+ FC9E ED A0                                ldi                                     ; .
1270+ FCA0 ED A0                                ldi                                     ; .
1271+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1272+ FCA6 AF                                   xor		a                               ; .
1273+ FCA7 32 E8 97                             ld		(XSAV),a                        ; .
1274+ FCAA DD E5        SeedGalaxyLoop:         push    ix                              ; .
1275+ FCAC D1                                   pop     de                              ; .
1276+ FCAD 21 CF 97                             ld      hl,SystemSeed                   ; .
1277+ FCB0 CD B4 9C                             call    copy_seed                       ; .
1278+ FCB3 DD E5                                push    ix                              ; .
1279+ FCB5 E1                                   pop     hl                              ; .
1280+ FCB6 ED 34 08 00                          add     hl,8                            ; .
1281+ FCBA E5                                   push    hl                              ; .
1282+ FCBB DD E1                                pop     ix                              ; .
1283+ FCBD CD E9 9C                             call    next_system_seed                ; .
1284+ FCC0 3A E8 97                             ld		a,(XSAV)                        ; .
1285+ FCC3 3D                                   dec		a                               ; .
1286+ FCC4 FE 00                                cp		0                               ; .
1287+ FCC6 C8                                   ret		z                               ; .
1288+ FCC7 32 E8 97                             ld		(XSAV),a                        ; .
1289+ FCCA 18 DE                                jr      SeedGalaxyLoop                  ; .
1290+ FCCC C9                                   ret
1291+ FCCD
1292+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1293+ FCCD
# file closed: ./Universe/Galaxy/galaxy_data.asm
1373  FCCD
1374  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1375  FCCD
1376  FCCD              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1377  FCCD                  SLOT    SunBankAddr
1378  FCCD                  PAGE    BankSunData
1379  FCCD              	ORG	    SunBankAddr,BankSunData
1380  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              fdraw; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000 53 75 6E 20  StartOfSun:        DB "Sun and Planet X"
  13+ C004 61 6E 64 20
  13+ C008 50 6C 61 6E
  13+ C00C 65 74 20 58
  14+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  16+ C010 ~                                    ld      a,h                             ; is greater than 128
  17+ C010 ~                                    and     a                               ; or negative
  18+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  19+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  20+ C010 ~                                    bit     7,a                             ;  covers l > 127
  21+ C010 ~                                    jr      nz,failtarget                   ;
  22+ C010                                      ENDM
  23+ C010
  24+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  25+ C010 ~                                    ld      a,rowValue
  26+ C010 ~                                    ld      hl,SBnKLineArray
  27+ C010 ~                                    add     hl,a
  28+ C010 ~                                    add     hl,a
  29+ C010 ~                                    push    hl
  30+ C010 ~                                    pop     iy
  31+ C010                                      ENDM
  32+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  33+ C010              ; Universe map substibute for INWK
  34+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  35+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019
# file closed: ././Universe/Sun/SunPosVars.asm
  36+ C019                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C019              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C019              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C019 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01B              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01B 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C01D 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C01F 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C021              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C021 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C023 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C025 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C027              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C027 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C029 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02B
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  37+ C02B                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02B              ; -- Ship AI data
   2++C02B 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C02C 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C02D 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C02E 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C02F
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  38+ C02F
  39+ C02F
  40+ C02F                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C031 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        SBnkTransmatRoofvX          DW 0
   7++C037              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C037 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        SBnkTransmatNosevX          DW 0
  11++C03D              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C03D 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        SBnkTransmatTransX          DW 0
  15++C043 00 00        SBnkTransmatTransY          DW 0
  16++C045 00 00        SBnkTransmatTransZ          DW 0
  17++C047              SunXX16                      equ SBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        SBnkTransInvRow0x0          DW 0
  20++C049 00 00        SBnkTransInvRow0x1          DW 0
  21++C04B 00 00        SBnkTransInvRow0x2          DW 0
  22++C04D 00 00        SBnkTransInvRow0x3          DW 0
  23++C04F 00 00        SBnkTransInvRow1y0          DW 0
  24++C051 00 00        SBnkTransInvRow1y1          DW 0
  25++C053 00 00        SBnkTransInvRow1y2          DW 0
  26++C055 00 00        SBnkTransInvRow1y3          DW 0
  27++C057 00 00        SBnkTransInvRow2z0          DW 0
  28++C059 00 00        SBnkTransInvRow2z1          DW 0
  29++C05B 00 00        SBnkTransInvRow2z2          DW 0
  30++C05D 00 00        SBnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C05F
# file closed: ././Universe/Sun/SunXX16Vars.asm
  41+ C05F                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           SBnKProjxLo                 DB  0
   3++C060 00           SBnKProjxHi                 DB  0
   4++C061 00           SBnKProjxSgn                DB  0
   5++C062              SBnKProjx                   EQU SBnKProjxLo
   6++C062 00           SBnKProjyLo                 DB  0
   7++C063 00           SBnKProjyHi                 DB  0
   8++C064 00           SBnKProjySgn                DB  0
   9++C065              SBnKProjy                   EQU SBnKProjyLo
  10++C065 00           SBnKProjzLo                 DB  0
  11++C066 00           SBnKProjzHi                 DB  0
  12++C067 00           SBnKProjzSgn                DB  0
  13++C068              SBnKProjz                   EQU SBnKProjzLo
  14++C068              SXX25                       EQU SBnKProjxLo
  15++C068
# file closed: ././Universe/Sun/SunXX25Vars.asm
  42+ C068                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06B 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C06E 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C071              SXX18                       equ SBnKDrawCam0xLo
  15++C071
# file closed: ././Universe/Sun/SunXX18Vars.asm
  43+ C071
  44+ C071              ; Used to make 16 bit reads a little cleaner in source code
  45+ C071 00 00 00     SBnKzPoint                  DS  3
  46+ C074              SBnKzPointLo                equ SBnKzPoint
  47+ C074              SBnKzPointHi                equ SBnKzPoint+1
  48+ C074              SBnKzPointSign              equ SBnKzPoint+2
  49+ C074                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              SXX15                       equ SBnKXScaled
  10++C07A              SXX15VecX                   equ SXX15
  11++C07A              SXX15VecY                   equ SXX15+1
  12++C07A              SXX15VecZ                   equ SXX15+2
  13++C07A              SBnKXPoint                  equ SXX15
  14++C07A              SBnKXPointLo                equ SXX15+0
  15++C07A              SBnKXPointHi                equ SXX15+1
  16++C07A              SBnKXPointSign              equ SXX15+2
  17++C07A              SBnKYPoint                  equ SXX15+3
  18++C07A              SBnKYPointLo                equ SXX15+3
  19++C07A              SBnKYPointHi                equ SXX15+4
  20++C07A              SBnKYPointSign              equ SXX15+5
  21++C07A
# file closed: ././Universe/Sun/SunXX15Vars.asm
  50+ C07A                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C07C 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C07E 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  SXX12Save                   DS  6
  10++C086 00 00 00...  SXX12Save2                  DS  6
  11++C08C              SXX12                       equ SBnKXX12xLo
  12++C08C              varSXX12                    equ SBnKXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              SBnkY2                      equ SXX12+0
  15++C08C              SbnKy2Lo                    equ SXX12+0
  16++C08C              SBnkY2Hi                    equ SXX12+1
  17++C08C              SBnkDeltaXLo                equ SXX12+2
  18++C08C              SBnkDeltaXHi                equ SXX12+3
  19++C08C              SBnkDeltaYLo                equ SXX12+4
  20++C08C              SBnkDeltaYHi                equ SXX12+5
  21++C08C              SbnkGradient                equ SXX12+2
  22++C08C              SBnkTemp1                   equ SXX12+2
  23++C08C              SBnkTemp1Lo                 equ SXX12+2
  24++C08C              SBnkTemp1Hi                 equ SXX12+3
  25++C08C              SBnkTemp2                   equ SXX12+3
  26++C08C              SBnkTemp2Lo                 equ SXX12+3
  27++C08C              SBnkTemp2Hi                 equ SXX12+4
  28++C08C
# file closed: ././Universe/Sun/SunXX12Vars.asm
  51+ C08C
  52+ C08C
  53+ C08C              ; Post clipping the results are now 8 bit
  54+ C08C 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  55+ C08D 00           SBnKProjectedY              DB  0
  56+ C08E 00           SBnKProjectedX              DB  0
  57+ C08F              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  58+ C08F 00 00 00...  SunXX15Save                 DS  8
  59+ C097 00 00 00...  SunXX15Save2                DS  8
  60+ C09F              ; Heap (or array) information for lines and normals
  61+ C09F              ; Coords are stored XY,XY,XY,XY
  62+ C09F              ; Normals
  63+ C09F              ; This needs re-oprganising now.
  64+ C09F              ; Runtime Calculation Store
  65+ C09F
  66+ C09F              SunLineArraySize            equ 128 * 2
  67+ C09F              ; Storage arrays for data
  68+ C09F
  69+ C09F 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  70+ C19F              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  71+ C19F
  72+ C19F 00 00        LineArrayPtr                DW  0
  73+ C1A1
  74+ C1A1              SBnK_Data_len               EQU $ - StartOfUniv
  75+ C1A1
  76+ C1A1              ; --------------------------------------------------------------
  77+ C1A1 21 00 C0     ResetSBnKData:          ld      hl,StartOfUniv
  78+ C1A4 11 A1 01                             ld      de,SBnK_Data_len
  79+ C1A7 AF                                   xor     a
  80+ C1A8 CD 9F 93                             call    memfill_dma
  81+ C1AB C9                                   ret
  82+ C1AC              ; --------------------------------------------------------------
  83+ C1AC 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  84+ C1AF 06 09                                ld      b, 3*3
  85+ C1B1 AF                                   xor     a
  86+ C1B2 77           .zeroLoop:              ld      (hl),a
  87+ C1B3 23                                   inc     hl
  88+ C1B4 10 FC                                djnz    .zeroLoop
  89+ C1B6 C9                                   ret
  90+ C1B7              ; This uses UBNKNodeArray as the list
  91+ C1B7              ; the array is 256 * 2 bytes
  92+ C1B7              ; counter is current row y pos
  93+ C1B7              ; byte 1 is start x pos
  94+ C1B7              ; byte 2 is end x pos
  95+ C1B7              ; if they are both 0 then skip
  96+ C1B7              ; its always horizontal, yellow
  97+ C1B7
  98+ C1B7              ; PLANET
  99+ C1B7
 100+ C1B7
 101+ C1B7              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 101+ C1B7 37          >                        scf
 102+ C1B8 C9                                   ret
 103+ C1B9
 104+ C1B9
 105+ C1B9
 106+ C1B9              SunBankDraw:            MACRO
 107+ C1B9 ~            .drawLoop               ld      a,(hl)
 108+ C1B9 ~                                    ld      c,a                     ; c = left column
 109+ C1B9 ~                                    inc     hl
 110+ C1B9 ~                                    ld      d,(hl)                  ; d = right col
 111+ C1B9 ~                                    inc     hl                      ; now ready for next linel
 112+ C1B9 ~                                    push    hl,,bc
 113+ C1B9 ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 114+ C1B9 ~                                    IfResultZeroGoto .NoLineDraw
 115+ C1B9 ~                                    ld      a,d                     ; get right col back
 116+ C1B9 ~                                    sub     c                       ; subtract left so a = length
 117+ C1B9 ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 118+ C1B9 ~                                    call    z, .FixWidth
 119+ C1B9 ~                                    ld      d,a                     ; de = length (e - d)
 120+ C1B9 ~                                    ld      e,216                   ; yellow
 121+ C1B9 ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 122+ C1B9 ~            .NoLineDraw:            pop     hl,,bc
 123+ C1B9 ~                                    inc     b
 124+ C1B9 ~                                    dec     iyh
 125+ C1B9 ~                                    IfResultNotZeroGoto  .drawLoop
 126+ C1B9                                      ENDM
 127+ C1B9
 128+ C1B9
 129+ C1B9
 130+ C1B9              SunDraw:                MMUSelectLayer2
 130+ C1B9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 131+ C1BD 3A 58 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 132+ C1C0                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 132+ C1C0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ C1C1 CA D1 C1    >                        jp	z, .OffsetIsZero
 133+ C1C4                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 133+ C1C4 FE 40       >                        cp      64
 133+ C1C6 DA DE C1    >                        jp		c, .OffsetLT64
 134+ C1C9 D6 40        .OffsetGTE64:           sub     64
 135+ C1CB 32 58 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 136+ C1CE C3 16 C2                             jp      .StartBank2
 137+ C1D1 06 00        .OffsetIsZero:          ld      b,0                     ; row
 138+ C1D3 FD 26 40                             ld      iyh,64                  ; counter
 139+ C1D6 21 9F C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 140+ C1D9 C3 F0 C1                             jp      .StartBank1
 141+ C1DC              ;-- Snuck routine in here so that the macro will be happier
 142+ C1DC 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 143+ C1DD C9                                   ret
 144+ C1DE 21 9F C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 145+ C1E1 ED 31                                add     hl,a                    ; .
 146+ C1E3 ED 31                                add     hl,a                    ; .
 147+ C1E5 47                                   ld      b,a                     ; set b row to the actual offset
 148+ C1E6 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 149+ C1E7 3E 40                                ld      a,64                    ; .
 150+ C1E9 91                                   sub     c                       ; .
 151+ C1EA FD 67                                ld      iyh,a
 152+ C1EC AF                                   xor     a                       ; Ready bank 2 with no offset
 153+ C1ED 32 58 C5                             ld      (MinYOffset),a          ; .
 154+ C1F0 D9           .StartBank1:            exx
 155+ C1F1 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 156+ C1F3 CD 0D E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 157+ C1F6 D9                                   exx
 158+ C1F7                                      SunBankDraw
 158+ C1F7 7E          >.drawLoop               ld      a,(hl)
 158+ C1F8 4F          >                        ld      c,a                     ; c = left column
 158+ C1F9 23          >                        inc     hl
 158+ C1FA 56          >                        ld      d,(hl)                  ; d = right col
 158+ C1FB 23          >                        inc     hl                      ; now ready for next linel
 158+ C1FC E5 C5       >                        push    hl,,bc
 158+ C1FE BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 158+ C1FF             >                        IfResultZeroGoto .NoLineDraw
 158+ C1FF CA 0E C2    >                        jp	z,.NoLineDraw
 158+ C202 7A          >                        ld      a,d                     ; get right col back
 158+ C203 91          >                        sub     c                       ; subtract left so a = length
 158+ C204 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 158+ C205 CC DC C1    >                        call    z, .FixWidth
 158+ C208 57          >                        ld      d,a                     ; de = length (e - d)
 158+ C209 1E D8       >                        ld      e,216                   ; yellow
 158+ C20B CD 3A E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 158+ C20E C1 E1       >.NoLineDraw:            pop     hl,,bc
 158+ C210 04          >                        inc     b
 158+ C211 FD 25       >                        dec     iyh
 158+ C213             >                        IfResultNotZeroGoto  .drawLoop
 158+ C213 C2 F7 C1    >                        jp	nz,.drawLoop
 159+ C216 3A 58 C5     .StartBank2:            ld      a,(MinYOffset)
 160+ C219                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 160+ C219 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 160+ C21A CA 2E C2    >                        jp	z, .OffsetBank2IsZero
 161+ C21D 21 1F C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 162+ C220 ED 31                                add     hl,a
 163+ C222 ED 31                                add     hl,a
 164+ C224 4F                                   ld      c,a                     ; iyh = 64 - offset
 165+ C225 3E 40                                ld      a,64                    ; .
 166+ C227 91                                   sub     c                       ; .
 167+ C228 FD 67                                ld      iyh,a                   ; .
 168+ C22A 41                                   ld      b,c                     ; b = offset row
 169+ C22B C3 36 C2                             jp      .drawLineBank2
 170+ C22E 21 1F C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 171+ C231 06 00                                ld      b,0
 172+ C233 FD 26 40                             ld      iyh,64
 173+ C236 D9           .drawLineBank2:         exx
 174+ C237 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 175+ C239 CD 0D E0                             call    asm_l2_bank_select      ; now do the lower bank
 176+ C23C D9                                   exx
 177+ C23D              ; Could make this a sub routine but unwrapping saves a call
 178+ C23D                                      SunBankDraw
 178+ C23D 7E          >.drawLoop               ld      a,(hl)
 178+ C23E 4F          >                        ld      c,a                     ; c = left column
 178+ C23F 23          >                        inc     hl
 178+ C240 56          >                        ld      d,(hl)                  ; d = right col
 178+ C241 23          >                        inc     hl                      ; now ready for next linel
 178+ C242 E5 C5       >                        push    hl,,bc
 178+ C244 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 178+ C245             >                        IfResultZeroGoto .NoLineDraw
 178+ C245 CA 54 C2    >                        jp	z,.NoLineDraw
 178+ C248 7A          >                        ld      a,d                     ; get right col back
 178+ C249 91          >                        sub     c                       ; subtract left so a = length
 178+ C24A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 178+ C24B CC DC C1    >                        call    z, .FixWidth
 178+ C24E 57          >                        ld      d,a                     ; de = length (e - d)
 178+ C24F 1E D8       >                        ld      e,216                   ; yellow
 178+ C251 CD 3A E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 178+ C254 C1 E1       >.NoLineDraw:            pop     hl,,bc
 178+ C256 04          >                        inc     b
 178+ C257 FD 25       >                        dec     iyh
 178+ C259             >                        IfResultNotZeroGoto  .drawLoop
 178+ C259 C2 3D C2    >                        jp	nz,.drawLoop
 179+ C25C C9                                   ret
 180+ C25D
 181+ C25D              ; --------------------------------------------------------------
 182+ C25D              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 183+ C25D              CreateSun:              ;break
 184+ C25D CD A1 C1                             call    ResetSBnKData
 185+ C260 3A D3 98                             ld      a,(WorkingSeeds+3)
 186+ C263 E6 07                                and     %00000111
 187+ C265 E6 01                                and     %00000001;DEBUG TO DO
 188+ C267
 189+ C267 F6 81                                or      %10000001 ;so working seed byte 3, take lower 3 bits, make sure 0 is set for negative z
 190+ C269 32 18 C0                             ld      (SBnKzsgn),a
 191+ C26C 3A D5 98                             ld      a,(WorkingSeeds+5)
 192+ C26F E6 03                                and     %00000011
 193+ C271 32 12 C0                             ld      (SBnKxsgn),a
 194+ C274 32 15 C0                             ld      (SBnKysgn),a
 195+ C277                                   ; DEBUG   ld      hl, $0000
 196+ C277                                   ; DEBUG   ld      (SBnKzhi),hl
 197+ C277                                   ; DEBUG   ld      a, $E3
 198+ C277                                   ; DEBUG   ld      (SBnKzlo),a
 199+ C277 C9                                   ret
 200+ C278              ; --------------------------------------------------------------
 201+ C278              ; This sets current universe object to a planet,they use sign + 23 bit positions
 202+ C278              ;;TODOCreatePlanet:           call    ResetSBnKData
 203+ C278              ;;TODO                        ld      a,(DisplayTekLevel)
 204+ C278              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 205+ C278              ;;TODO                        or      $10000000
 206+ C278              ;;TODO                        ld      (SBnKShipType),a
 207+ C278              ;;TODO                        xor     a
 208+ C278              ;;TODO                        ld      (SBnKaiatkecm),a
 209+ C278              ;;TODO                        MaxUnivPitchAndRoll
 210+ C278              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 211+ C278              ;;TODO                        and     %00000011               ; .
 212+ C278              ;;TODO                        adc     3                       ; .
 213+ C278              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 214+ C278              ;;TODO                        rr      a
 215+ C278              ;;TODO                        ld      (PlanetXsgn),a
 216+ C278              ;;TODO                        ld      (PlanetYsgn),a
 217+ C278              ;;TODO                        ret
 218+ C278
 219+ C278
 220+ C278                                 ;     include "./Maths/ADDHLDESignBC.asm"
 221+ C278
 222+ C278 7C           SunADDHLDESignedv3:     ld      a,h
 223+ C279 E6 80                                and     SignOnly8Bit
 224+ C27B 47                                   ld      b,a                         ;save sign bit in b
 225+ C27C AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 226+ C27D                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 226+ C27D FA 98 C2    >                        jp		m, .SunADDHLDEOppSGN
 227+ C280 78           .SunADDHLDESameSigns:   ld      a,b
 228+ C281 B2                                   or      d
 229+ C282                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 229+ C282 FA 8A C2    >                        jp		m, .SunADDHLDESameNeg
 230+ C285                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 230+ C285 FA 8A C2    >                        jp		m, .SunADDHLDESameNeg
 231+ C288 19                                   add     hl,de
 232+ C289 C9                                   ret
 233+ C28A 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 234+ C28B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 235+ C28D 67                                   ld      h,a
 236+ C28E 7A                                   ld      a,d
 237+ C28F E6 7F                                and     SignMask8Bit
 238+ C291 57                                   ld      d,a
 239+ C292 19                                   add     hl,de
 240+ C293 3E 80                                ld      a,SignOnly8Bit
 241+ C295 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 242+ C296 67                                   ld      h,a
 243+ C297 C9                                   ret
 244+ C298 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 245+ C299 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 246+ C29B 67                                   ld      h,a
 247+ C29C 7A                                   ld      a,d
 248+ C29D E6 7F                                and     SignMask8Bit
 249+ C29F 57                                   ld      d,a
 250+ C2A0 B7                                   or      a
 251+ C2A1 ED 52                                sbc     hl,de
 252+ C2A3 38 04                                jr      c,.SunADDHLDEOppInvert
 253+ C2A5 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 254+ C2A6 B4                                   or      h
 255+ C2A7 67                                   ld      h,a                         ; set the previou sign value
 256+ C2A8 C9                                   ret
 257+ C2A9              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 257+ C2A9 AF          >                    xor a
 257+ C2AA 95          >                    sub l
 257+ C2AB 6F          >                    ld l,a
 257+ C2AC 9F          >                    sbc a,a
 257+ C2AD 94          >                    sub h
 257+ C2AE 67          >                    ld h,a
 258+ C2AF 78                                   ld      a,b
 259+ C2B0 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 260+ C2B2 B4                                   or      h
 261+ C2B3 67                                   ld      h,a                         ; recover sign
 262+ C2B4 C9                                   ret
 263+ C2B5
 264+ C2B5              ; we could cheat, flip the sign of DE and just add but its not very optimised
 265+ C2B5 7C           .SunSUBHLDESignedv3:        ld      a,h
 266+ C2B6 E6 80                                and     SignOnly8Bit
 267+ C2B8 47                                   ld      b,a                         ;save sign bit in b
 268+ C2B9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 269+ C2BA                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 269+ C2BA FA E8 C2    >                        jp		m, .SunSUBHLDEOppSGN
 270+ C2BD 78           .SunSUBHLDESameSigns:       ld      a,b
 271+ C2BE B2                                   or      d
 272+ C2BF                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 272+ C2BF FA C9 C2    >                        jp		m, .SunSUBHLDESameNeg
 273+ C2C2 B7                                   or      a
 274+ C2C3 ED 52                                sbc     hl,de
 275+ C2C5                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 275+ C2C5 FA DC C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 276+ C2C8 C9                                   ret
 277+ C2C9 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 278+ C2CA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 279+ C2CC 67                                   ld      h,a
 280+ C2CD 7A                                   ld      a,d
 281+ C2CE E6 7F                                and     SignMask8Bit
 282+ C2D0 57                                   ld      d,a
 283+ C2D1 B7                                   or      a
 284+ C2D2 ED 52                                sbc     hl,de
 285+ C2D4                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 285+ C2D4 FA DC C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 286+ C2D7 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 287+ C2D8 F6 80                                or      SignOnly8Bit
 288+ C2DA 67                                   ld      h,a
 289+ C2DB C9                                   ret
 290+ C2DC              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 290+ C2DC AF          >                    xor a
 290+ C2DD 95          >                    sub l
 290+ C2DE 6F          >                    ld l,a
 290+ C2DF 9F          >                    sbc a,a
 290+ C2E0 94          >                    sub h
 290+ C2E1 67          >                    ld h,a
 291+ C2E2 78                                   ld      a,b
 292+ C2E3 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 293+ C2E5 B4                                   or      h
 294+ C2E6 67                                   ld      h,a                         ; recover sign
 295+ C2E7 C9                                   ret
 296+ C2E8 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 297+ C2E9 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 298+ C2EA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 299+ C2EC 67                                   ld      h,a
 300+ C2ED 7A                                   ld      a,d
 301+ C2EE E6 7F                                and     SignMask8Bit
 302+ C2F0 57                                   ld      d,a
 303+ C2F1 19                                   add     hl,de
 304+ C2F2 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 305+ C2F3 B4                                   or      h
 306+ C2F4 67                                   ld      h,a                         ; set the previou sign value
 307+ C2F5 C9                                   ret
 308+ C2F6
 309+ C2F6
 310+ C2F6              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 310+ C2F6 CB 7C       >                        bit 	7,h
 310+ C2F8 C2 09 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 311+ C2FB              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 311+ C2FB CB 7C       >                        bit 	7,h
 311+ C2FD C2 09 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 312+ C300 ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 313+ C302 C9                                   ret
 314+ C303 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 315+ C305 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 316+ C306 CB FA                                set     7,d
 317+ C308 C9                                   ret
 318+ C309 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 319+ C30B                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 319+ C30B CB 7A       >                        bit 	7,d
 319+ C30D C2 15 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 320+ C310 ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 321+ C312 CB FC                                set     7,h
 322+ C314 C9                                   ret
 323+ C315 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 324+ C317 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 325+ C318 CB FA                                set     7,d
 326+ C31A CB FC                                set     7,h
 327+ C31C C9                                   ret
 328+ C31D
 329+ C31D
 330+ C31D
 331+ C31D              ;                    include "Universe/InitialiseOrientation.asm"
 332+ C31D              ;----------------------------------------------------------------------------------------------------------------------------------
 333+ C31D              ;;;
 334+ C31D              ;;;Project:
 335+ C31D              ;;;PROJ:                   ld      hl,(SBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 336+ C31D              ;;;                        ld      (varP),hl
 337+ C31D              ;;;                        ld      a,(SBnKxsgn)
 338+ C31D              ;;;                        call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 339+ C31D              ;;;                        ret     c                               ; carry means don't print
 340+ C31D              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 341+ C31D              ;;;                        ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 342+ C31D              ;;;                        ld      a,ViewCenterX
 343+ C31D              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 344+ C31D              ;;;                        ld      (varK3),hl                      ; K3 = X position on screen
 345+ C31D              ;;;ProjectY:               ld      hl,(SBnKylo)
 346+ C31D              ;;;                        ld      (varP),hl
 347+ C31D              ;;;                        ld      a,(SBnKysgn)
 348+ C31D              ;;;                        call    PLS6
 349+ C31D              ;;;                        ret     c
 350+ C31D              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 351+ C31D              ;;;                        ld      a,ViewCenterY
 352+ C31D              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 353+ C31D              ;;;                        ld      (varK4),hl                      ; K3 = X position on screen
 354+ C31D              ;;;                        ret
 355+ C31D              ;--------------------------------------------------------------------------------------------------------
 356+ C31D              ;                        include "./ModelRender/EraseOldLines-EE51.asm"
 357+ C31D              ;                        include "./ModelRender/TrimToScreenGrad-LL118.asm"
 358+ C31D              ;                        include "./ModelRender/CLIP-LL145.asm"
 359+ C31D              ;--------------------------------------------------------------------------------------------------------
 360+ C31D              ;                        include "./Variables/CopyRotmatToTransMat.asm"
 361+ C31D                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C31D              TransposeSXX12BySunToSXX15:
   2++C31D 2A 7A C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C320 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C321 E6 80                                and		$80									; check sign bit on high byte
   5++C323 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C324                                      ;110921 debugld      h,0
   7++C324 7C                                   ld      a,h
   8++C325 E6 7F                                and     $7F
   9++C327 67                                   ld      h,a
  10++C328                                      ;110921 debugld      h,0
  11++C328 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C32C 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C32F E6 80                                and		$80									; make sure we only have bit 7
  14++C331 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C332 CD F5 AD                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C335 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C336 67                                   ld		h,a
  18++C337 22 74 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C33A              ; ..................................
  20++C33A 2A 7C C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C33D 7C                                   ld		a,h
  22++C33E E6 80                                and		$80
  23++C340 47                                   ld		b,a
  24++C341                                      ;110921 debugld      h,0
  25++C341 7C                                   ld      a,h
  26++C342 E6 7F                                and     $7F
  27++C344 67                                   ld      h,a
  28++C345                                      ;110921 debugld      h,0
  29++C345 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C349 3A 15 C0                             ld		a,(SBnKysgn)
  31++C34C E6 80                                and		$80									; make sure we only have bit 7
  32++C34E 4F                                   ld		c,a
  33++C34F CD F5 AD                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C352 B4                                   or		h									; combine sign in A with H
  35++C353 67                                   ld		h,a
  36++C354 22 76 C0                             ld		(SBnKYScaled),hl
  37++C357              ; ..................................
  38++C357 2A 7E C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C35A 7C                                   ld		a,h
  40++C35B E6 80                                and		$80
  41++C35D 47                                   ld		b,a
  42++C35E                                      ;110921 debugld      h,0
  43++C35E 7C                                   ld      a,h
  44++C35F E6 7F                                and     $7F
  45++C361 67                                   ld      h,a
  46++C362                                      ;110921 debugld      h,0
  47++C362 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C366 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C369 E6 80                                and		$80									; make sure we only have bit 7
  50++C36B 4F                                   ld		c,a
  51++C36C CD F5 AD                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C36F B4                                   or		h									; combine sign in A with H
  53++C370 67                                   ld		h,a
  54++C371 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C373 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C375 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C377 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C379 7D                                   ld      a,l                                 ; get low byte now
  59++C37A                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C37A FE 04       >                        cp      4
  59++C37C DA 8B C3    >                        jp		c, .ClampZto4
  60++C37F 22 78 C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C382 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C383 32 00 98                             ld      (varT),a
  63++C386 7C                                   ld		a,h
  64++C387 32 E2 97                             ld      (varU),a
  65++C38A C9                                   ret
  66++C38B              ; This is where we limit 4 to a minimum of 4
  67++C38B 21 04 00     .ClampZto4:             ld		hl,4
  68++C38E 22 78 C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C391 7D                                   ld		a,l
  70++C392 32 00 98                             ld      (varT),a                            ;                                                                           ;;;
  71++C395 7C                                   ld		a,h
  72++C396 32 E2 97                             ld      (varU),a 						; compatibility for now
  73++C399 C9                                   ret
  74++C39A
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 362+ C39A
 363+ C39A
 364+ C39A ED 4B 78 C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 365+ C39E 2A 74 C0                             ld			hl,(SBnKXScaled)
 366+ C3A1 ED 5B 76 C0                          ld			de,(SBnKYScaled)
 367+ C3A5 78           .SetABSbc:              ld			a,b
 368+ C3A6 DD 67                                ld			ixh,a
 369+ C3A8 E6 7F                                and			SignMask8Bit
 370+ C3AA 47                                   ld			b,a									; bc = ABS bc
 371+ C3AB 7C           .SetABShl:              ld			a,h
 372+ C3AC DD 6F                                ld			ixl,a
 373+ C3AE E6 7F                                and			SignMask8Bit
 374+ C3B0 67                                   ld			h,a									; hl = ABS hl
 375+ C3B1 7A           .SetABSde:              ld			a,d
 376+ C3B2 FD 67                                ld			iyh,a
 377+ C3B4 E6 7F                                and			SignMask8Bit
 378+ C3B6 57                                   ld			d,a									; de = ABS de
 379+ C3B7 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 380+ C3B8 B4                                   or			h                                   ; XX15+1	\ x hi
 381+ C3B9 B2                                   or			d                                   ; XX15+4	\ y hi
 382+ C3BA 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 383+ C3BC                                      ShiftHLRight1
 383+ C3BC CB 3C       >			   srl h
 383+ C3BE CB 1D       >			   rr  l
 384+ C3C0                                      ShiftDERight1
 384+ C3C0 CB 3A       >			   srl d
 384+ C3C2 CB 1B       >			   rr  e
 385+ C3C4                                      ShiftBCRight1
 385+ C3C4 CB 38       >			   srl b
 385+ C3C6 CB 19       >			   rr  c
 386+ C3C8 C3 B7 C3                             jp          .ScaleNodeTo8BitLoop
 387+ C3CB              ; now we have scaled values we have to deal with sign
 388+ C3CB DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 389+ C3CD E6 80                                and			SignOnly8Bit
 390+ C3CF B0                                   or			b
 391+ C3D0 47                                   ld			b,a
 392+ C3D1 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 393+ C3D3 E6 80                                and			SignOnly8Bit
 394+ C3D5 B4                                   or			h
 395+ C3D6 67                                   ld			h,a
 396+ C3D7 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 397+ C3D9 E6 80                                and			SignOnly8Bit
 398+ C3DB B2                                   or			d
 399+ C3DC 57                                   ld			d,a
 400+ C3DD ED 43 78 C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 401+ C3E1 22 74 C0                             ld			(SBnKXScaled),hl
 402+ C3E4 ED 53 76 C0                          ld			(SBnKYScaled),de
 403+ C3E8 78                                   ld			a,b
 404+ C3E9 32 E2 97                             ld			(varU),a
 405+ C3EC 79                                   ld			a,c
 406+ C3ED 32 00 98                             ld			(varT),a
 407+ C3F0 C9                                   ret
 408+ C3F1
 409+ C3F1              ;--------------------------------------------------------------------------------------------------------
 410+ C3F1              ;;;;X = normal scale
 411+ C3F1              ;;;;ZtempHi = zhi
 412+ C3F1              ;;;;......................................................
 413+ C3F1              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 414+ C3F1              ;;;;  Loop                                              ::LL90
 415+ C3F1              ;;;;     inc X
 416+ C3F1              ;;;;     divide X, Y & ZtempHiLo by 2
 417+ C3F1              ;;;;  Until ZtempHi = 0
 418+ C3F1              ;;;;......................................................
 419+ C3F1              ;-LL21---------------------------------------------------------------------------------------------------
 420+ C3F1              ;                        include "./Universe/NormaliseTransMat.asm"
 421+ C3F1              ;-LL91---------------------------------------------------------------------------------------------------
 422+ C3F1
 423+ C3F1              ; Now we have
 424+ C3F1              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 425+ C3F1              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 426+ C3F1              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 427+ C3F1              ;
 428+ C3F1              ;--------------------------------------------------------------------------------------------------------
 429+ C3F1              ;--------------------------------------------------------------------------------------------------------
 430+ C3F1              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 431+ C3F1              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 432+ C3F1              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 433+ C3F1              ; Returns
 434+ C3F1              ;
 435+ C3F1              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 436+ C3F1              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 437+ C3F1              ;
 438+ C3F1              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 439+ C3F1              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 440+ C3F1              ;
 441+ C3F1              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 442+ C3F1              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 443+ C3F1
 444+ C3F1
 445+ C3F1               ; TESTEDOK
 446+ C3F1              SXX12DotOneRow:
 447+ C3F1              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 447+ C3F1 3A 74 C0    >                        ld      a,(SBnKXScaled)                        ;
 447+ C3F4 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 447+ C3F5 7E          >                        ld      a,(hl)                        ; A = XX16 element
 447+ C3F6 57          >                        ld      d,a
 447+ C3F7 ED 30       >                        mul
 447+ C3F9 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 447+ C3FA 32 00 98    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 448+ C3FD 23                                   inc     hl                                  ; move to sign byte
 449+ C3FE              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 449+ C3FE 3A 75 C0    >                        ld      a,(SBnKXScaledSign)
 449+ C401 AE          >                        xor     (hl)
 450+ C402 32 E5 97                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 451+ C405 23                                   inc     hl
 452+ C406              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 452+ C406 3A 76 C0    >                        ld      a,(SBnKYScaled)                        ;
 452+ C409 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 452+ C40A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 452+ C40B 57          >                        ld      d,a
 452+ C40C ED 30       >                        mul
 452+ C40E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 452+ C40F 32 E3 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 453+ C412                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 453+ C412 3A 00 98    >                        ld       a,(varT)
 453+ C415 32 E4 97    >                        ld       (varR),a
 454+ C418 23                                   inc     hl
 455+ C419                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 455+ C419 3A 77 C0    >                        ld      a,(SBnKYScaledSign)
 455+ C41C AE          >                        xor     (hl)
 456+ C41D              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 457+ C41D E5           SSTequSRplusAQ           push    hl
 458+ C41E CD 13 AF                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 459+ C421 E1                                   pop     hl
 460+ C422 32 00 98                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 461+ C425 23                                   inc     hl
 462+ C426              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 462+ C426 3A 78 C0    >                        ld      a,(SBnKZScaled)                        ;
 462+ C429 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 462+ C42A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 462+ C42B 57          >                        ld      d,a
 462+ C42C ED 30       >                        mul
 462+ C42E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 462+ C42F 32 E3 97    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 463+ C432                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 463+ C432 3A 00 98    >                        ld       a,(varT)
 463+ C435 32 E4 97    >                        ld       (varR),a
 464+ C438 23                                   inc     hl
 465+ C439                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 465+ C439 3A 79 C0    >                        ld      a,(SBnKZScaledSign)
 465+ C43C AE          >                        xor     (hl)
 466+ C43D              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 467+ C43D CD 13 AF                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 468+ C440              ; Now we exit with A = result S = Sign
 469+ C440 C9                                   ret
 470+ C441
 471+ C441
 472+ C441
 473+ C441              ;--------------------------------------------------------------------------------------------------------
 474+ C441                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C441              CopySXX12ScaledToSXX18:
   2++C441              CopyResultToSDrawCam:
   3++C441                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C441 3A 7A C0    >                        ld       a,(SXX12)
   3++C444 32 68 C0    >                        ld       (SXX18),a
   4++C447                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C447 3A 7B C0    >                        ld       a,(SXX12+1)
   4++C44A 32 6A C0    >                        ld       (SXX18+2),a
   5++C44D                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C44D 3A 7C C0    >                        ld       a,(SXX12+2)
   5++C450 32 6B C0    >                        ld       (SXX18+3),a
   6++C453                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C453 3A 7D C0    >                        ld       a,(SXX12+3)
   6++C456 32 6D C0    >                        ld       (SXX18+5),a
   7++C459                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C459 3A 7E C0    >                        ld       a,(SXX12+4)
   7++C45C 32 6E C0    >                        ld       (SXX18+6),a
   8++C45F                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C45F 3A 7F C0    >                        ld       a,(SXX12+5)
   8++C462 32 70 C0    >                        ld       (SXX18+8),a
   9++C465 C9                   ret
  10++C466
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 475+ C466              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 476+ C466              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 477+ C466              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 478+ C466              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 479+ C466              ;--------------------------------------------------------------------------------------------------------
 480+ C466              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 481+ C466              ;--------------------------------------------------------------------------------------------------------
 482+ C466
 483+ C466 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 484+ C468 F8                                   ret     m
 485+ C469 21 74 C0                             ld      hl,SBnKXScaled
 486+ C46C CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 487+ C46E 23                                   inc     hl                          ; looking at SunXX15 x sign now
 488+ C46F 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 489+ C470 CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 490+ C472 23                                   inc     hl                          ; looking at SunXX15 y sign now
 491+ C473 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 492+ C474 CB 3E                                srl     (hl)
 493+ C476 C3 66 C4                             jp      ScaleDownSXX15byIXH
 494+ C479 C9                                   ret
 495+ C47A
 496+ C47A 21 68 C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 497+ C47D CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 498+ C47F 23                                   inc     hl                          ; looking at XX18 x sign now
 499+ C480 23                                   inc     hl                          ; looking at XX18 y Lo now
 500+ C481 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 501+ C483 23                                   inc     hl                          ; looking at XX18 y sign now
 502+ C484 23                                   inc     hl                          ; looking at XX18 z Lo now
 503+ C485 CB 3E                                srl     (hl)
 504+ C487 C9                                   ret
 505+ C488
 506+ C488              ; ......................................................                                                         ;;;
 507+ C488
 508+ C488
 509+ C488
 510+ C488
 511+ C488              ; Pitch and roll are 2 phases
 512+ C488              ; 1 - we apply our pitch and roll to the ship position
 513+ C488              ;       x -> x + alpha * (y - alpha * x)
 514+ C488              ;       y -> y - alpha * x - beta * z
 515+ C488              ;       z -> z + beta * (y - alpha * x - beta * z)
 516+ C488              ; which can be simplified as:
 517+ C488              ;       1. K2 = y - alpha * x
 518+ C488              ;       2. z = z + beta * K2
 519+ C488              ;       3. y = K2 - beta * z
 520+ C488              ;       4. x = x + alpha * y
 521+ C488              ; 2 - we apply our patch and roll to the ship orientation
 522+ C488              ;      Roll calculations:
 523+ C488              ;
 524+ C488              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 525+ C488              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 526+ C488              ;      Pitch calculations:
 527+ C488              ;
 528+ C488              ;        nosev_y = nosev_y - beta * nosev_z_hi
 529+ C488              ;        nosev_z = nosev_z + beta * nosev_y_hi
 530+ C488
 531+ C488
 532+ C488                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C488
   2++C488              ; Full version
   3++C488              ; 1. K2 = y - alpha * x
   4++C488              ; 2. z = z + beta * K2
   5++C488              ; 3. y = K2 - beta * z
   6++C488              ; 4. x = x + alpha * y
   7++C488
   8++C488
   9++C488
  10++C488              ; SunrollWork holds Alpha intermidate results
  11++C488 00 00 00     SunRollResult:          DS 3                    ; equivalent of K
  12++C48B              SunRollResultp1         equ SunRollResult
  13++C48B              SunRollResultp2         equ SunRollResult+1
  14++C48B              SunRollResultp3         equ SunRollResult+2
  15++C48B 00           SunRollResultp4         DB 0
  16++C48C              ;SunRollResult2:         DS 3                    ; do we need this? TODO
  17++C48C 00 00 00     SunZResult:             DS 3
  18++C48F              ;  1. K2 = y - alpha * x
  19++C48F              ;  2. z = z + beta * K2
  20++C48F              ;  3. y = K2 - beta * z
  21++C48F              ;  4. x = x + alpha * y
  22++C48F              ;.... or
  23++C48F              ;  2. z = z + (beta * (y - alpha * x))
  24++C48F              ;  3. y = (y - alpha * x) - (beta * z)
  25++C48F              ;  4. x = x + (alpha * y)
  26++C48F
  27++C48F
  28++C48F              ;----------------------------------------------------------------------------------------------------------------------------------
  29++C48F              ; based on MV40
  30++C48F 3A F9 96     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  31++C492 21 E8 96                             ld      hl,BETA
  32++C495 B6                                   or      (hl)
  33++C496 E6 7F                                and     SignMask8Bit
  34++C498 CA 34 C5                             jp      z,.NoRotation
  35++C49B              .CalcZ:                 ;break
  36++C49B 3A F9 96                             ld      a,(ALPHA)                   ; get roll magnitude
  37++C49E FE 00                                cp      0
  38++C4A0 20 0B                                jr      nz,.ApplyAlpha
  39++C4A2 ED 5B 14 C0  .NoAlpha:               ld      de,(SBnKyhi)                ; its going to be just Y if alpha is 0
  40++C4A6 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  41++C4A9 6F                                   ld      l,a                         ; .
  42++C4AA C3 C9 C4                             jp      .SaveResult1                ; .
  43++C4AD EE 80        .ApplyAlpha:            xor     SignOnly8Bit                ; get Q = -alpha
  44++C4AF 57                                   ld      d,a                         ; d reg represents Q (abount to roll)
  45++C4B0 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  46++C4B3 5F                                   ld      e,a                         ;
  47++C4B4 2A 11 C0                             ld      hl,(SBnKxhi)                ;
  48++C4B7 CD 8B A8                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
  49++C4BA 7A           .SkipAlphaMultiply:     ld      a,d
  50++C4BB 32 8B C4                             ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
  51++C4BE 3A 13 C0     .CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
  52++C4C1 67                                   ld      h,a
  53++C4C2 ED 4B 14 C0                          ld      bc,(SBnKyhi)
  54++C4C6 CD 5B A5                             call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256) (which is K2)
  55++C4C9 7A           .SaveResult1:           ld      a,d                         ; SunPitchWork = AHL = DEL
  56++C4CA 63                                   ld      h,e                         ;
  57++C4CB 32 8A C4     .CopyResultTo2:         ld      (SunRollResult+2),a         ; .
  58++C4CE 22 88 C4                             ld      (SunRollResult) ,hl         ; .
  59++C4D1 5D           .CalcY:                 ld      e,l                         ; HLE = result (K2)
  60++C4D2 6C                                   ld      l,h                         ; .
  61++C4D3 67                                   ld      h,a                         ; .
  62++C4D4 3A E8 96                             ld      a,(BETA)                    ; get pitch
  63++C4D7 57                                   ld      d,a                         ; now D = BETA
  64++C4D8 CD 8B A8                             call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta or K2 * beta
  65++C4DB ED 4B 17 C0                          ld      bc,(SBnKzhi)                ; BCH = z
  66++C4DF 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
  67++C4E2 67                                   ld      h,a                         ; .
  68++C4E3 CD 5B A5                             call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
  69++C4E6 ED 53 8D C4  .SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
  70++C4EA ED 53 17 C0                          ld      (SBnKzhi),de                ; .
  71++C4EE 7D                                   ld      a,l                         ; .
  72++C4EF 32 8C C4                             ld      (SunZResult),a              ; .
  73++C4F2 32 16 C0                             ld      (SBnKzlo),a                 ; .
  74++C4F5 EB           .CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
  75++C4F6                                      ; not needed bugld      e,l                         ; .
  76++C4F6 3A E8 96                             ld      a,(BETA)                    ; d = - BETA
  77++C4F9 EE 80                                xor     SignOnly8Bit                ; .
  78++C4FB 57                                   ld      d,a                         ; .
  79++C4FC CD 8B A8                             call    mulHLEbyDSigned             ; DELC = z * - BETA
  80++C4FF ED 4B 89 C4                          ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
  81++C503 3A 88 C4                             ld      a,(SunRollResult)           ; .
  82++C506 67                                   ld      h,a                         ; .
  83++C507 CD 5B A5                             call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA) (K2+ (Z * -BETA)
  84++C50A ED 53 14 C0                          ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
  85++C50E 7D                                   ld      a,l                         ; .
  86++C50F 32 13 C0                             ld      (SBnKylo),a                 ; .
  87++C512 EB           .CalcX:                 ex      de,hl                       ; HLE = DEL = Y
  88++C513 5D                                   ld      e,l                         ; .
  89++C514 3A F9 96                             ld      a,(ALPHA)                   ; D = alpha
  90++C517 FE 00                                cp      0                           ; if alpha is 0 then don't update x
  91++C519 CA 34 C5                             jp      z,.NoRotation
  92++C51C 57                                   ld      d,a                         ; .
  93++C51D CD 8B A8                             call    mulHLEbyDSigned             ; DELC = Y * alpha
  94++C520 ED 4B 11 C0                          ld      bc,(SBnKxhi)                ; BCH = x
  95++C524 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  96++C527 67                                   ld      h,a                         ; .
  97++C528 CD 5B A5                             call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
  98++C52B ED 53 11 C0                          ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
  99++C52F 7C                                   ld      a,h                         ; .
 100++C530 32 10 C0                             ld      (SBnKxlo),a                 ; .
 101++C533 C9                                   ret
 102++C534 3A DF 97     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 103++C537 FE 00                                cp      0
 104++C539 C8                                   ret     z
 105++C53A 0E 00                                ld      c,0                         ;
 106++C53C 67                                   ld      h,a                         ;
 107++C53D 06 80                                ld      b,$80                       ;
 108++C53F ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 109++C543 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 110++C546 6F                                   ld      l,a                         ; .
 111++C547 CD 5B A5                             call    AddBCHtoDELsigned           ; update speed
 112++C54A ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 113++C54E 7D                                   ld      a,l
 114++C54F 32 16 C0                             ld      (SBnKzlo),a                ;
 115++C552 C9                                   ret
 116++C553
 117++C553              ;
 118++C553              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 119++C553              ;                        ld      hl,BETA
 120++C553              ;                        or      (hl)
 121++C553              ;                        and     SignMask8Bit
 122++C553              ;                        ret     z
 123++C553              ;.CalcZ:                 ;break
 124++C553              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 125++C553              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 126++C553              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 127++C553              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 128++C553              ;                        ld      e,a                         ;
 129++C553              ;                        ld      hl,(SBnKxhi)                ;
 130++C553              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 131++C553              ;                        ld      a,d
 132++C553              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 133++C553              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 134++C553              ;                        ld      h,a
 135++C553              ;                        ld      bc,(SBnKyhi)
 136++C553              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 137++C553              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 138++C553              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 139++C553              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 140++C553              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 141++C553              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 142++C553              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 143++C553              ;                        ld      a,(SunRollResult)           ; .
 144++C553              ;                        ;ld      (SunRollResult2),a          ; .
 145++C553              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 146++C553              ;                        ld      a,(BETA)                    ; get pitch
 147++C553              ;                        ld      d,a                         ; now D = BETA
 148++C553              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 149++C553              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 150++C553              ;                        ld      a,(SBnKzlo)                 ;
 151++C553              ;                        ld      h,a                         ;
 152++C553              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 153++C553              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 154++C553              ;                        ld      (SBnKzhi),de                ; .
 155++C553              ;                        ld      a,l                         ; .
 156++C553              ;                        ld      (SunZResult),a              ; .
 157++C553              ;                        ld      (SBnKzlo),a                 ; .
 158++C553              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 159++C553              ;                        ld      e,l                         ;
 160++C553              ;                        ld      a,(BETA)                    ; d = - BETA
 161++C553              ;                        ld      d,a                         ;
 162++C553              ;                        xor     SignOnly8Bit                ;
 163++C553              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 164++C553              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 165++C553              ;                        ld      a,(SunRollResult)           ;
 166++C553              ;                        ld      h,a                         ;
 167++C553              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 168++C553              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 169++C553              ;                        ld      a,l                         ;
 170++C553              ;                        ld      (SBnKylo),a                 ;
 171++C553              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 172++C553              ;                        ld      e,l                         ;
 173++C553              ;                        ld      a,(ALPHA)
 174++C553              ;                        ld      d,a                         ; D = alpha
 175++C553              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 176++C553              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 177++C553              ;                        ld      a,(SBnKxlo)                 ;
 178++C553              ;                        ld      h,a                         ;
 179++C553              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 180++C553              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 181++C553              ;                        ld      a,h                         ;
 182++C553              ;                        ld      (SBnKxlo),a                 ;
 183++C553              ;                        ret
 184++C553              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 533+ C553              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 534+ C553
 535+ C553 00           SunOnScreen             DB 0
 536+ C554 00 00        cLineArrayPtr            DW 0
 537+ C556 00           LineCount               DB 0
 538+ C557 00           RaggedSize              DB 0
 539+ C558 00           MinYOffset              DB 0
 540+ C559 00           MaxYOffSet              DB 0
 541+ C55A 00 00        XCentre                 DW  0       ; signed
 542+ C55C 00 00        YCentre                 DW  0       ; signed
 543+ C55E 00           SunRadius               DB  0       ; unsigned
 544+ C55F              ; draw circle
 545+ C55F
 546+ C55F
 547+ C55F CD 8F C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 548+ C562 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 549+ C565 E6 80                                and     SignOnly8Bit
 550+ C567 C0                                   ret     nz
 551+ C568              .CheckDist48:           ReturnIfAGTENusng 48                ; at a distance over 48 its too far away
 551+ C568 FE 30       >                        cp    48
 551+ C56A D0          >                        ret	 nc
 552+ C56B 2A 17 C0                             ld      hl,(SBnKzhi)                ; if the two high bytes are zero then its too close
 553+ C56E B6                                   or      (hl)
 554+ C56F                                      ReturnIfAIsZero
 554+ C56F A7          >                        and     a
 554+ C570 C8          >                        ret     z
 555+ C571 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 556+ C575 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 557+ C578 4F                                   ld      c,a                         ;
 558+ C579 2A 10 C0                             ld      hl,(SBnKxlo)                ; AHL = x
 559+ C57C 3A 12 C0                             ld      a,(SBnKxsgn)                ;
 560+ C57F CD 9B A6                             call    Div24by24LeadSign           ; could do 16 bit in reality
 561+ C582 79           .CheckPosOnScreenX:     ld      a,c                         ;
 562+ C583 E6 7F                                and     SignMask8Bit                ; a= abs highest byte
 563+ C585 C0                                   ret     nz                          ; off screen
 564+ C586 7A                                   ld      a,d                         ; if high byte >=4 then off screen (we can do this as ABS
 565+ C587 FE 04                                cp      4                           ;
 566+ C589 D0                                   ret     nc                          ; off screen
 567+ C58A 6B                                   ld      l,e
 568+ C58B 7A                                   ld      a,d
 569+ C58C B1                                   or      c                           ; we know that C can only hold a sign bit if its on screen
 570+ C58D 65                                   ld      h,l
 571+ C58E 3E 80                                ld      a,ScreenCenterX
 572+ C590 CD 3A A5                             call    AddAusngToHLsng             ; correct to center of screen
 573+ C593 22 5A C5                             ld      (XCentre),hl                ; save projected X Position
 574+ C596 ED 5B 16 C0  .caclYProj:             ld      de,(SBnKzlo)                ; calc center y
 575+ C59A 3A 18 C0                             ld      a,(SBnKzsgn)                ; cde = z
 576+ C59D 4F                                   ld      c,a                         ;
 577+ C59E 2A 13 C0                             ld      hl,(SBnKylo)                ; ahl = y
 578+ C5A1 3A 15 C0                             ld      a,(SBnKysgn)                ;
 579+ C5A4 CD 9B A6                             call    Div24by24LeadSign           ;
 580+ C5A7 79           .CheckPosOnScreenY:     ld      a,c
 581+ C5A8 E6 7F                                and     SignMask8Bit                ; a= abs highest byte
 582+ C5AA C0                                   ret     nz                          ; off screen
 583+ C5AB 7A                                   ld      a,d                         ; if high byte >=4 then off screen (we can do this as ABS
 584+ C5AC FE 04                                cp      4                           ;
 585+ C5AE D0                                   ret     nc                          ; off screen
 586+ C5AF 6B                                   ld      l,e
 587+ C5B0 7A                                   ld      a,d
 588+ C5B1 B1                                   or      c                           ; we know that C can only hold a sign bit if its on screen
 589+ C5B2 65                                   ld      h,l
 590+ C5B3 3E 60                                ld      a,ScreenCenterY
 591+ C5B5 CD 48 A5                             call    HLEequAusngMinusHLsng
 592+ C5B8 22 5C C5                             ld      (YCentre),hl                  ; save projected T Position
 593+ C5BB 21 9F C0     .ClearLineArray:        ld      hl,SBnKLineArray            ; we load start and end as 0
 594+ C5BE 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 595+ C5C1 3E 00                                ld		a,0
 596+ C5C3 CD 9F 93                             call	memfill_dma
 597+ C5C6                                      ;break
 598+ C5C6 ED 5B 16 C0  .CalculateRadius:       ld      de,(SBnKzlo)
 599+ C5CA 3A 18 C0                             ld      a,(SBnKzsgn)
 600+ C5CD 4F                                   ld      c,a
 601+ C5CE 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 602+ C5D1 AF                                   xor     a
 603+ C5D2 CD 9B A6                             call    Div24by24LeadSign           ; radius = AHL/CDE = 24576 / distance z
 604+ C5D5 7A                                   ld      a,d
 605+ C5D6 FE 00                                cp      0
 606+ C5D8 28 02                                jr      z,.SkipSetK
 607+ C5DA 1E F8                                ld      e,248                       ;set radius to 248 as maxed out
 608+ C5DC 21 9F C0     .SkipSetK:              ld      hl,SBnKLineArray
 609+ C5DF 22 9F C1                             ld      (LineArrayPtr),hl
 610+ C5E2 AF                                   xor     a
 611+ C5E3 32 56 C5                             ld      (LineCount),a
 612+ C5E6 16 00                                ld      d,0
 613+ C5E8 7B           .SetRaggedEdgeMax:      ld      a,e
 614+ C5E9 1E 00                                ld      e,0
 615+ C5EB 32 5E C5                             ld      (SunRadius),a
 616+ C5EE FE 60                                cp      96
 617+ C5F0                                      FlipCarryFlag
 617+ C5F0 3F          >                        ccf
 618+ C5F1 CB 13                                rl      e
 619+ C5F3 FE 28                                cp      40
 620+ C5F5                                      FlipCarryFlag
 620+ C5F5 3F          >                        ccf
 621+ C5F6 CB 13                                rl      e
 622+ C5F8 FE 10                                cp      16
 623+ C5FA                                      FlipCarryFlag
 623+ C5FA 3F          >                        ccf
 624+ C5FB CB 13                                rl     e
 625+ C5FD 7B                                   ld      a,e
 626+ C5FE                                      ; DEBUGGING DIAG for FUZZING CODE, LOOKS OK THOUGH ld      a,%00000001; DEBUG RAGGED
 627+ C5FE 32 57 C5                             ld      (RaggedSize),a
 628+ C601 2A 5C C5     .GetMinY:               ld      hl,(YCentre)
 629+ C604 7C                                   ld      a,h
 630+ C605 E6 80                                and     SignOnly8Bit
 631+ C607 20 17                                jr      nz,.NegativeY               ; if its neative then we start with 0 as it can only go up screen after radius
 632+ C609 3A 5E C5                             ld      a,(SunRadius)               ; raged does not affect Y axis
 633+ C60C 5F                                   ld      e,a
 634+ C60D 16 00                                ld      d,0
 635+ C60F                                      ClearCarryFlag
 635+ C60F B7          >                        or a
 636+ C610 ED 52                                sbc     hl,de                       ; hl now is a 2's c value if its negative else still +ve
 637+ C612 FA 20 C6                             jp      m, .NegativeY
 638+ C615 7C                                   ld      a,h
 639+ C616 E6 7F                                and     SignMask8Bit
 640+ C618 C0                                   ret     nz                          ; if its off screen then its not to be processed
 641+ C619 7D                                   ld      a,l
 642+ C61A                                      ReturnIfAGTENusng 128                ; if min is off screen then not to be processed
 642+ C61A FE 80       >                        cp    128
 642+ C61C D0          >                        ret	 nc
 643+ C61D C3 21 C6                             jp      .SetMinY
 644+ C620 AF           .NegativeY:             xor     a
 645+ C621 32 58 C5     .SetMinY:               ld      (MinYOffset),a              ; so now we have Y top of screen
 646+ C624 2A 5C C5     .GetMaxY:               ld      hl,(YCentre)
 647+ C627 7C                                   ld      a,h
 648+ C628 E6 7F                                and     SignMask8Bit
 649+ C62A 20 2B                                jr      nz,.MaxPosY                 ; if its neative then we start with 0 as it can only go up screen after radius
 650+ C62C 3A 5E C5                             ld      a,(SunRadius)
 651+ C62F ED 31                                add     hl,a
 652+ C631 7D                                   ld      a,l
 653+ C632                                      JumpIfAGTENusng 128, .MaxPosY
 653+ C632 FE 80       >                        cp     128
 653+ C634 D2 57 C6    >                        jp		nc,.MaxPosY
 654+ C637 7B                                   ld      a,e
 655+ C638 85                                   add     a,l
 656+ C639                                      JumpIfAGTENusng 128, .MaxPosY
 656+ C639 FE 80       >                        cp     128
 656+ C63B D2 57 C6    >                        jp		nc,.MaxPosY
 657+ C63E                                      JumpIfOverflow     .MaxPosY
 657+ C63E E2 57 C6    >                        jp		po, .MaxPosY
 658+ C641 7B                                   ld      a,e
 659+ C642 CD 3A A5                             call    AddAusngToHLsng
 660+ C645 7C                                   ld      a,h
 661+ C646 E6 80                                and     SignOnly8Bit
 662+ C648 C0                                   ret     nz                ; if max is negative then its off screen too
 663+ C649 7C                                   ld      a,h
 664+ C64A E6 7F                                and     SignMask8Bit                ; if h had a value then its max Y as well
 665+ C64C 7D                                   ld      a,l
 666+ C64D                                      JumpIfAGTENusng 128, .MaxPosY         ; if l > 127 then max Y as well
 666+ C64D FE 80       >                        cp     128
 666+ C64F D2 57 C6    >                        jp		nc,.MaxPosY
 667+ C652 20 03                                jr      nz, .MaxPosY
 668+ C654 C3 21 C6                             jp      .SetMinY
 669+ C657 3E 7F        .MaxPosY:               ld      a,127
 670+ C659 32 59 C5     .SetMaxY                ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and proj holds center
 671+ C65C                                      ;break
 672+ C65C CD 63 C6                             call    SunDrawCircle
 673+ C65F CD B9 C1                             call    SunDraw
 674+ C662 C9                                   ret
 675+ C663              ;.. Now we caluclate the circle of the star
 676+ C663              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 677+ C663              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 678+ C663              ; so now there are the following conditions to consider
 679+ C663              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 680+ C663              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 681+ C663              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 682+ C663              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 683+ C663              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 684+ C663              ; x center + radius < 0                                                 => Don't draw
 685+ C663              ; x center - radius > 255                                               => Don't draw
 686+ C663              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 687+ C663              ; x point = max (x point, 0)   on left
 688+ C663              ; x point = min (x point, 255) on right
 689+ C663
 690+ C663              SetIYPlusOffset:        MACRO   reg
 691+ C663 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 692+ C663 ~                                    pop     hl                              ;
 693+ C663 ~                                    ld      a,reg
 694+ C663 ~                                    add     hl,a
 695+ C663 ~                                    add     hl,a
 696+ C663 ~                                    push    hl
 697+ C663 ~                                    pop     iy
 698+ C663 ~                                    pop     hl
 699+ C663                                      ENDM
 700+ C663
 701+ C663              SetIYMinusOffset:       MACRO   reg
 702+ C663 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 703+ C663 ~                                    pop     hl                              ;
 704+ C663 ~                                    ld      a,reg
 705+ C663 ~                                    add     a,a
 706+ C663 ~                                    ld      e,a
 707+ C663 ~                                    ld      d,0
 708+ C663 ~                                    ClearCarryFlag
 709+ C663 ~                                    sbc     hl,de
 710+ C663 ~                                    push    hl
 711+ C663 ~                                    pop     iy
 712+ C663 ~                                    pop     de,,hl
 713+ C663                                      ENDM
 714+ C663
 715+ C663
 716+ C663              SunDrawCircle:
 717+ C663 3A 5E C5     .CheckRadius:           ld      a,(SunRadius)                   ;we could do this early
 718+ C666 A7                                   and     a
 719+ C667 C8                                   ret     z
 720+ C668 FE 01                                cp      1
 721+ C66A CA 93 C7                             jp      z,SunCircleSinglePixel
 722+ C66D              .MakeCentreX2C:         MemSignedTo2C XCentre
 722+ C66D 2A 5A C5    >                        ld      hl,(XCentre)
 722+ C670 CB 7C       >                        bit     7,h
 722+ C672 28 04       >                        jr      z,.Done2c
 722+ C674 7C          >                        ld      a,h
 722+ C675 E6 7F       >                        and     SignMask8Bit
 722+ C677 67          >                        ld      h,a
 722+ C678 22 5A C5    >.Done2c:                ld      (XCentre),hl
 723+ C67B              .MakeCentreY2C:         MemSignedTo2C YCentre
 723+ C67B 2A 5C C5    >                        ld      hl,(YCentre)
 723+ C67E CB 7C       >                        bit     7,h
 723+ C680 28 04       >                        jr      z,.Done2c
 723+ C682 7C          >                        ld      a,h
 723+ C683 E6 7F       >                        and     SignMask8Bit
 723+ C685 67          >                        ld      h,a
 723+ C686 22 5C C5    >.Done2c:                ld      (YCentre),hl
 724+ C689 DD 2E 00     .PrepCircleData:        ld      ixl,0
 725+ C68C ED 43 B6 C6                          ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 726+ C690 DD 67                                ld		ixh,a							; ixh = radius
 727+ C692 DD 2E 00                             ld		ixl,0						    ; ixl = delta
 728+ C695 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 729+ C697 6F                                   ld		l,a                             ; .
 730+ C698 29                                   add		hl,hl							; .
 731+ C699 EB                                   ex		de,hl							; .
 732+ C69A 21 03 00                             ld		hl,3                            ; hl = 3
 733+ C69D A7                                   and		a                               ; hl = 3 - (r * 2)
 734+ C69E ED 52                                sbc		hl,de							; .
 735+ C6A0 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 736+ C6A1 4D                                   ld		c,l								; .
 737+ C6A2 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 738+ C6A5 16 00                                ld		d,0                             ; de = ixl
 739+ C6A7 DD 5D                                ld		e,ixl                           ;
 740+ C6A9 A7                                   and		a                               ;
 741+ C6AA ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 742+ C6AC 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 743+ C6AF DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 744+ C6B1 DD BD                                cp		ixl                             ;
 745+ C6B3 D8                                   ret		c                               ;
 746+ C6B4 D9           .ProcessLoop:	        exx                                     ; save out registers
 747+ C6B5              ; Process CY+Y CX+X & CY+Y CX-X..................................
 748+ C6B5 2A 5C C5     .Plot1:                 ld      hl, (YCentre)
 749+ C6B8 DD 7C        .Get1YRow:              ld      a,ixh
 750+ C6BA ED 31                                add     hl,a                            ; Check to see if CY+Y
 751+ C6BC              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
 751+ C6BC 7C          >                        ld      a,h                             ; is greater than 128
 751+ C6BD A7          >                        and     a                               ; or negative
 751+ C6BE 20 23       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 751+ C6C0 7D          >                        ld      a,l                             ; l bit 7 0?
 751+ C6C1 CB 7F       >                        bit     7,a                             ;  covers l > 127
 751+ C6C3 20 1E       >                        jr      nz,.NoTopPixelPair                   ;
 752+ C6C5              .Write1YCoord:          SetIYPlusOffset ixh
 752+ C6C5 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 752+ C6C8 E1          >                        pop     hl                              ;
 752+ C6C9 DD 7C       >                        ld      a,ixh
 752+ C6CB ED 31       >                        add     hl,a
 752+ C6CD ED 31       >                        add     hl,a
 752+ C6CF E5          >                        push    hl
 752+ C6D0 FD E1       >                        pop     iy
 752+ C6D2 E1          >                        pop     hl
 753+ C6D3                                      IYEquRowN l                             ; set up iy as target address
 753+ C6D3 7D          >                        ld      a,l
 753+ C6D4 21 9F C0    >                        ld      hl,SBnKLineArray
 753+ C6D7 ED 31       >                        add     hl,a
 753+ C6D9 ED 31       >                        add     hl,a
 753+ C6DB E5          >                        push    hl
 753+ C6DC FD E1       >                        pop     iy
 754+ C6DE DD 7D                                ld      a,ixl
 755+ C6E0 CD AA C7                             call    ProcessXRowA
 756+ C6E3              .NoTopPixelPair:
 757+ C6E3              ; Process CY-Y CX+X & CY-Y CX-X..................................
 758+ C6E3 2A 5C C5     .Plot2:                 ld      hl, (YCentre)
 759+ C6E6 16 00        .Get2YRow:              ld      d,0
 760+ C6E8 DD 5C                                ld      e,ixh
 761+ C6EA                                      ClearCarryFlag
 761+ C6EA B7          >                        or a
 762+ C6EB ED 52                                sbc     hl,de
 763+ C6ED              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
 763+ C6ED 7C          >                        ld      a,h                             ; is greater than 128
 763+ C6EE A7          >                        and     a                               ; or negative
 763+ C6EF 20 28       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 763+ C6F1 7D          >                        ld      a,l                             ; l bit 7 0?
 763+ C6F2 CB 7F       >                        bit     7,a                             ;  covers l > 127
 763+ C6F4 20 23       >                        jr      nz,.NoBottomPixelPair                   ;
 764+ C6F6                                      SetIYMinusOffset ixh
 764+ C6F6 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 764+ C6FA E1          >                        pop     hl                              ;
 764+ C6FB DD 7C       >                        ld      a,ixh
 764+ C6FD 87          >                        add     a,a
 764+ C6FE 5F          >                        ld      e,a
 764+ C6FF 16 00       >                        ld      d,0
 764+ C701             >                        ClearCarryFlag
 764+ C701 B7          >                        or a
 764+ C702 ED 52       >                        sbc     hl,de
 764+ C704 E5          >                        push    hl
 764+ C705 FD E1       >                        pop     iy
 764+ C707 E1 D1       >                        pop     de,,hl
 765+ C709              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
 765+ C709 7D          >                        ld      a,l
 765+ C70A 21 9F C0    >                        ld      hl,SBnKLineArray
 765+ C70D ED 31       >                        add     hl,a
 765+ C70F ED 31       >                        add     hl,a
 765+ C711 E5          >                        push    hl
 765+ C712 FD E1       >                        pop     iy
 766+ C714 DD 7D                                ld      a,ixl
 767+ C716 CD AA C7                             call    ProcessXRowA
 768+ C719              .NoBottomPixelPair:
 769+ C719              ; Process CY+X CX+Y & CY+X CX-Y..................................
 770+ C719 2A 5C C5     .Plot3:                 ld      hl, (YCentre)
 771+ C71C DD 7D        .Get3YRow:              ld      a,ixl
 772+ C71E ED 31                                add     hl,a                            ; Check to see if CY+Y
 773+ C720              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
 773+ C720 7C          >                        ld      a,h                             ; is greater than 128
 773+ C721 A7          >                        and     a                               ; or negative
 773+ C722 20 23       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 773+ C724 7D          >                        ld      a,l                             ; l bit 7 0?
 773+ C725 CB 7F       >                        bit     7,a                             ;  covers l > 127
 773+ C727 20 1E       >                        jr      nz,.NoTop3PixelPair                   ;
 774+ C729                                      SetIYPlusOffset ixl
 774+ C729 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 774+ C72C E1          >                        pop     hl                              ;
 774+ C72D DD 7D       >                        ld      a,ixl
 774+ C72F ED 31       >                        add     hl,a
 774+ C731 ED 31       >                        add     hl,a
 774+ C733 E5          >                        push    hl
 774+ C734 FD E1       >                        pop     iy
 774+ C736 E1          >                        pop     hl
 775+ C737              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
 775+ C737 7D          >                        ld      a,l
 775+ C738 21 9F C0    >                        ld      hl,SBnKLineArray
 775+ C73B ED 31       >                        add     hl,a
 775+ C73D ED 31       >                        add     hl,a
 775+ C73F E5          >                        push    hl
 775+ C740 FD E1       >                        pop     iy
 776+ C742 DD 7C                                ld      a,ixh
 777+ C744 CD AA C7                             call    ProcessXRowA
 778+ C747              .NoTop3PixelPair:
 779+ C747              ; Process CY-X CX+Y & CY-X CX-Y..................................
 780+ C747 2A 5C C5     .Plot4:                 ld      hl, (YCentre)
 781+ C74A 16 00        .Get4YRow:              ld      d,0
 782+ C74C DD 5D                                ld      e,ixl
 783+ C74E                                      ClearCarryFlag
 783+ C74E B7          >                        or a
 784+ C74F ED 52                                sbc     hl,de
 785+ C751              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
 785+ C751 7C          >                        ld      a,h                             ; is greater than 128
 785+ C752 A7          >                        and     a                               ; or negative
 785+ C753 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 785+ C755 7D          >                        ld      a,l                             ; l bit 7 0?
 785+ C756 CB 7F       >                        bit     7,a                             ;  covers l > 127
 785+ C758 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
 786+ C75A                                      SetIYMinusOffset ixl
 786+ C75A D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 786+ C75E E1          >                        pop     hl                              ;
 786+ C75F DD 7D       >                        ld      a,ixl
 786+ C761 87          >                        add     a,a
 786+ C762 5F          >                        ld      e,a
 786+ C763 16 00       >                        ld      d,0
 786+ C765             >                        ClearCarryFlag
 786+ C765 B7          >                        or a
 786+ C766 ED 52       >                        sbc     hl,de
 786+ C768 E5          >                        push    hl
 786+ C769 FD E1       >                        pop     iy
 786+ C76B E1 D1       >                        pop     de,,hl
 787+ C76D              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
 787+ C76D 7D          >                        ld      a,l
 787+ C76E 21 9F C0    >                        ld      hl,SBnKLineArray
 787+ C771 ED 31       >                        add     hl,a
 787+ C773 ED 31       >                        add     hl,a
 787+ C775 E5          >                        push    hl
 787+ C776 FD E1       >                        pop     iy
 788+ C778 DD 7C                                ld      a,ixh
 789+ C77A CD AA C7                             call    ProcessXRowA
 790+ C77D              .NoBottom4PixelPair:
 791+ C77D              ; Completed one iteration........................................
 792+ C77D D9                                   exx
 793+ C77E CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
 794+ C780 28 03                                jr z,   .draw_circle_1
 795+ C782 19                                   add hl,de			; Delta=Delta+D1
 796+ C783 18 05                                jr      .draw_circle_2		;
 797+ C785 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
 798+ C786 03                                   inc     bc
 799+ C787 03                                   inc     bc				; D2=D2+2
 800+ C788 DD 25                                dec     ixh				; Y=Y-1
 801+ C78A 03           .draw_circle_2:		    inc bc				; D2=D2+2
 802+ C78B 03                                   inc bc
 803+ C78C 13                                   inc de				; D1=D1+2
 804+ C78D 13                                   inc de
 805+ C78E DD 2C                                inc ixl				; X=X+1
 806+ C790 C3 AF C6                             jp      .CircleLoop
 807+ C793 2A 5A C5     SunCircleSinglePixel:     ld      hl,(XCentre)
 808+ C796 7C                                   ld      a,h
 809+ C797 A7                                   and     a
 810+ C798 C0                                   ret     nz                  ; if the high byte is set then no pixel
 811+ C799 4D                                   ld      c,l
 812+ C79A 2A 5C C5                             ld      hl,(YCentre)
 813+ C79D 7C                                   ld      a,h
 814+ C79E A7                                   and     a
 815+ C79F C0                                   ret     nz                  ; if the high byte is set then no pixel
 816+ C7A0 7D                                   ld      a,l
 817+ C7A1 CB 7F                                bit     7,a
 818+ C7A3 C0                                   ret     nz                  ; if l > 127 then no pixel
 819+ C7A4 47                                   ld      b,a
 820+ C7A5 7B                                   ld		a,e
 821+ C7A6 CD 19 E1                             call	l2_plot_pixel_y_test
 822+ C7A9 C9                                   ret
 823+ C7AA
 824+ C7AA              ProcessXRowA:           ;break
 825+ C7AA 2A 5A C5                             ld      hl,(XCentre)                    ; get X Center
 826+ C7AD F5                                   push    af                              ; save A (curent offset +/- value
 827+ C7AE ED 31                                add     hl,a                            ; Hl = HL + offset
 828+ C7B0 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
 829+ C7B1 CB 7F                                bit     7,a                             ;
 830+ C7B3 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
 831+ C7B5 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
 832+ C7B6 20 16                                jr      nz,.XCoordMaxed                 ; .
 833+ C7B8 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
 834+ C7B9 C5           .AddFuzz:               push    bc
 835+ C7BA CD 72 9C                             call    doRandom                        ; c = c - random AND ragged Size
 836+ C7BD C1                                   pop     bc
 837+ C7BE 21 57 C5                             ld      hl,RaggedSize                   ;
 838+ C7C1 A6                                   and     (hl)                            ;
 839+ C7C2 81                                   add     c                               ;
 840+ C7C3 4F                                   ld      c,a                             ;
 841+ C7C4 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
 842+ C7C6 C3 D0 C7                             jp      .ProcessSubtract                ;
 843+ C7C9 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
 844+ C7CB C3 D0 C7                             jp      .ProcessSubtract
 845+ C7CE 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
 846+ C7D0 F1           .ProcessSubtract:       pop     af                              ; get offset back
 847+ C7D1 5F                                   ld      e,a                             ; but goes into DE as its a subtract
 848+ C7D2 16 00                                ld      d,0
 849+ C7D4 2A 5A C5                             ld      hl,(XCentre)                    ; so do subtract
 850+ C7D7                                      ClearCarryFlag                          ; .
 850+ C7D7 B7          >                        or a
 851+ C7D8 ED 52                                sbc     hl,de                           ; .
 852+ C7DA FA F7 C7                             jp      m,.XCoordLeftNegative           ; again test for min max
 853+ C7DD E5 C5        .AddFuzzSubtract:       push    hl,,bc
 854+ C7DF CD 72 9C                             call    doRandom                        ; c = c - random AND ragged Size
 855+ C7E2 C1                                   pop     bc
 856+ C7E3 21 57 C5                             ld      hl,RaggedSize                   ;
 857+ C7E6 A6                                   and     (hl)                            ;
 858+ C7E7 5F                                   ld      e,a
 859+ C7E8 E1                                   pop     hl
 860+ C7E9 ED 52                                sbc     hl,de
 861+ C7EB FA F7 C7                             jp      m,.XCoordLeftNegative           ; again test for min max
 862+ C7EE 7C                                   ld      a,h
 863+ C7EF A7                                   and     a
 864+ C7F0 C2 FC C7                             jp      nz,.XCordLeftMaxed
 865+ C7F3 45                                   ld      b,l
 866+ C7F4 C3 FE C7                             jp      .CompletedXCoords
 867+ C7F7 06 00        .XCoordLeftNegative:    ld      b,0
 868+ C7F9 C3 FE C7                             jp      .CompletedXCoords
 869+ C7FC 06 FF        .XCordLeftMaxed:        ld      b,255
 870+ C7FE 78           .CompletedXCoords:      ld      a,b
 871+ C7FF FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
 872+ C802 79                                   ld      a,c
 873+ C803 FD 77 01     .RowSaveIY3             ld      (iy+1),a
 874+ C806 C9                                   ret
 875+ C807
 876+ C807              ; .....................................................
 877+ C807              ; if the universe object is a planet or sun then do that instead
 878+ C807              ;;TODOProcessPlanet:          cp      129
 879+ C807              ;;TODO                        jr      nz, .ItsAPlanet
 880+ C807              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
 881+ C807              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
 882+ C807
 883+ C807
 884+ C807              ; Square Root using tables
 885+ C807              ; DE = number to find
 886+ C807 21 27 CA     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
 887+ C80A 7A           .LookupCorseJump:       ld      a,d
 888+ C80B ED 31                                add     hl,a
 889+ C80D ED 31                                add     hl,a
 890+ C80F 7E                                   ld      a,(hl)
 891+ C810 23                                   inc     hl
 892+ C811 66                                   ld      h,(hl)
 893+ C812 6F                                   ld      l,a
 894+ C813 7E           .FineSearchLoop:        ld      a,(hl)
 895+ C814                                      JumpIfAEqNusng  e, .FoundByte
 895+ C814 BB          >                        cp     e
 895+ C815 CA 21 C8    >                        jp      z,.FoundByte
 896+ C818                                      JumpIfAGTENusng e, .PreviousByte
 896+ C818 BB          >                        cp     e
 896+ C819 D2 24 C8    >                        jp		nc,.PreviousByte
 897+ C81C 23           .NotFound:              inc     hl
 898+ C81D 23                                   inc     hl
 899+ C81E C3 13 C8                             jp      .FineSearchLoop
 900+ C821 23           .FoundByte:             inc     hl
 901+ C822 7E                                   ld      a,(hl)
 902+ C823 C9                                   ret
 903+ C824 2B           .PreviousByte:          dec     hl
 904+ C825 7E                                   ld      a,(hl)
 905+ C826 C9                                   ret
 906+ C827
 907+ C827 27 CA 39 CA  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
 907+ C82B 47 CA 53 CA
 907+ C82F 5D CA 65 CA
 907+ C833 6D CA 75 CA
 907+ C837 7D CA 83 CA
 907+ C83B 8B CA 91 CA
 907+ C83F 95 CA 9B CA
 907+ C843 A1 CA A7 CA
 908+ C847 AD CA B3 CA                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
 908+ C84B B9 CA BF CA
 908+ C84F C5 CA C9 CA
 908+ C853 CD CA CF CA
 908+ C857 D3 CA D7 CA
 908+ C85B DB CA DF CA
 908+ C85F E3 CA E7 CA
 908+ C863 E9 CA ED CA
 909+ C867 EF CA F3 CA                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
 909+ C86B F7 CA F9 CA
 909+ C86F FB CA FF CA
 909+ C873 01 CB 03 CB
 909+ C877 07 CB 09 CB
 909+ C87B 0B CB 0D CB
 909+ C87F 11 CB 13 CB
 909+ C883 15 CB 19 CB
 910+ C887 1D CB 21 CB                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
 910+ C88B 25 CB 29 CB
 910+ C88F 2B CB 2F CB
 910+ C893 33 CB 37 CB
 910+ C897 39 CB 3D CB
 910+ C89B 41 CB 45 CB
 910+ C89F 49 CB 4D CB
 910+ C8A3 51 CB 55 CB
 911+ C8A7 59 CB 5D CB                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
 911+ C8AB 61 CB 65 CB
 911+ C8AF 69 CB 6D CB
 911+ C8B3 71 CB 75 CB
 911+ C8B7 79 CB 7D CB
 911+ C8BB 81 CB 85 CB
 911+ C8BF 89 CB 8D CB
 911+ C8C3 91 CB 95 CB
 912+ C8C7 99 CB 9B CB                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
 912+ C8CB 9F CB A3 CB
 912+ C8CF A7 CB AB CB
 912+ C8D3 AF CB B3 CB
 912+ C8D7 B7 CB B9 CB
 912+ C8DB BD CB C1 CB
 912+ C8DF C5 CB C9 CB
 912+ C8E3 CD CB CF CB
 913+ C8E7 D3 CB D7 CB                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
 913+ C8EB DB CB DF CB
 913+ C8EF E1 CB E5 CB
 913+ C8F3 E9 CB ED CB
 913+ C8F7 F1 CB F3 CB
 913+ C8FB F7 CB FB CB
 913+ C8FF FF CB 01 CC
 913+ C903 03 CC 07 CC
 914+ C907 0B CC 0F CC                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
 914+ C90B 13 CC 17 CC
 914+ C90F 1B CC 1F CC
 914+ C913 21 CC 25 CC
 914+ C917 29 CC 2B CC
 914+ C91B 2F CC 33 CC
 914+ C91F 37 CC 39 CC
 914+ C923 3D CC 41 CC
 915+ C927 45 CC 47 CC                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
 915+ C92B 4B CC 4D CC
 915+ C92F 51 CC 55 CC
 915+ C933 59 CC 5B CC
 915+ C937 5F CC 63 CC
 915+ C93B 65 CC 69 CC
 915+ C93F 6D CC 6F CC
 915+ C943 73 CC 77 CC
 916+ C947 79 CC 7D CC                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
 916+ C94B 81 CC 83 CC
 916+ C94F 87 CC 8B CC
 916+ C953 8D CC 91 CC
 916+ C957 95 CC 97 CC
 916+ C95B 9B CC 9F CC
 916+ C95F A1 CC A5 CC
 916+ C963 A9 CC AB CC
 917+ C967 AF CC B3 CC                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
 917+ C96B B5 CC B9 CC
 917+ C96F BB CC BF CC
 917+ C973 C3 CC C5 CC
 917+ C977 C9 CC CB CC
 917+ C97B CF CC D3 CC
 917+ C97F D5 CC D9 CC
 917+ C983 DD CC DF CC
 918+ C987 E1 CC E3 CC                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
 918+ C98B E7 CC EB CC
 918+ C98F ED CC F1 CC
 918+ C993 F3 CC F7 CC
 918+ C997 FB CC FF CC
 918+ C99B 01 CD 03 CD
 918+ C99F 07 CD 09 CD
 918+ C9A3 0D CD 11 CD
 919+ C9A7 13 CD 17 CD                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
 919+ C9AB 19 CD 1D CD
 919+ C9AF 1F CD 23 CD
 919+ C9B3 27 CD 29 CD
 919+ C9B7 2B CD 2D CD
 919+ C9BB 31 CD 33 CD
 919+ C9BF 37 CD 3B CD
 919+ C9C3 3D CD 41 CD
 920+ C9C7 43 CD 47 CD                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
 920+ C9CB 49 CD 4D CD
 920+ C9CF 4F CD 53 CD
 920+ C9D3 57 CD 59 CD
 920+ C9D7 5D CD 5F CD
 920+ C9DB 63 CD 65 CD
 920+ C9DF 69 CD 6B CD
 920+ C9E3 6D CD 6F CD
 921+ C9E7 73 CD 77 CD                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
 921+ C9EB 7B CD 7F CD
 921+ C9EF 83 CD 87 CD
 921+ C9F3 89 CD 8D CD
 921+ C9F7 91 CD 95 CD
 921+ C9FB 97 CD 9B CD
 921+ C9FF 9D CD 9F CD
 921+ CA03 A1 CD A5 CD
 922+ CA07 A7 CD A9 CD                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
 922+ CA0B AB CD AF CD
 922+ CA0F B1 CD B5 CD
 922+ CA13 B7 CD BB CD
 922+ CA17 BD CD C1 CD
 922+ CA1B C3 CD C7 CD
 922+ CA1F C9 CD CD CD
 922+ CA23 CF CD D1 CD
 923+ CA27
 924+ CA27              SunSquareRootTable:
 925+ CA27 00 00        SunSqr00:               DB $00,   0
 926+ CA29 04 02                                DB $04,   2
 927+ CA2B 10 04                                DB $10,   4
 928+ CA2D 24 06                                DB $24,   6
 929+ CA2F 40 08                                DB $40,   8
 930+ CA31 64 0A                                DB $64,  10
 931+ CA33 90 0C                                DB $90,  12
 932+ CA35 C4 0E                                DB $C4,  14
 933+ CA37 FF 0F                                DB $FF,  15
 934+ CA39 00 10        SunSqr01:               DB $00,  16
 935+ CA3B 21 11                                DB $21,  17
 936+ CA3D 44 12                                DB $44,  18
 937+ CA3F 69 13                                DB $69,  19
 938+ CA41 90 14                                DB $90,  20
 939+ CA43 B9 15                                DB $B9,  21
 940+ CA45 FF 16                                DB $FF,  22
 941+ CA47 11 17        SunSqr02:               DB $11,  23
 942+ CA49 40 18                                DB $40,  24
 943+ CA4B 71 19                                DB $71,  25
 944+ CA4D A4 1A                                DB $A4,  26
 945+ CA4F D9 1B                                DB $D9,  27
 946+ CA51 FF 1B                                DB $FF,  27
 947+ CA53 10 1C        SunSqr03:               DB $10,  28
 948+ CA55 49 1D                                DB $49,  29
 949+ CA57 84 1E                                DB $84,  30
 950+ CA59 C1 1F                                DB $C1,  31
 951+ CA5B FF 1F                                DB $FF,  31
 952+ CA5D 00 20        SunSqr04:               DB $00,  32
 953+ CA5F 41 21                                DB $41,  33
 954+ CA61 84 22                                DB $84,  34
 955+ CA63 FF 23                                DB $FF,  35
 956+ CA65 10 24        SunSqr05:               DB $10,  36
 957+ CA67 59 25                                DB $59,  37
 958+ CA69 A4 26                                DB $A4,  38
 959+ CA6B FF 27                                DB $FF,  39
 960+ CA6D 40 28        SunSqr06:               DB $40,  40
 961+ CA6F 91 29                                DB $91,  41
 962+ CA71 E4 2A                                DB $E4,  42
 963+ CA73 FF 2A                                DB $FF,  42
 964+ CA75 39 2B        SunSqr07:               DB $39,  43
 965+ CA77 90 2C                                DB $90,  44
 966+ CA79 E9 2D                                DB $E9,  45
 967+ CA7B FF 2D                                DB $FF,  45
 968+ CA7D 44 2E        SunSqr08:               DB $44,  46
 969+ CA7F A1 2F                                DB $A1,  47
 970+ CA81 FF 2F                                DB $FF,  47
 971+ CA83 00 30        SunSqr09:               DB $00,  48
 972+ CA85 61 31                                DB $61,  49
 973+ CA87 C4 32                                DB $C4,  50
 974+ CA89 FF 32                                DB $FF,  50
 975+ CA8B 29 33        SunSqr0A:               DB $29,  51
 976+ CA8D 90 34                                DB $90,  52
 977+ CA8F FF 35                                DB $FF,  53
 978+ CA91 64 36        SunSqr0B:               DB $64,  54
 979+ CA93 FF 37                                DB $FF,  55
 980+ CA95 40 38        SunSqr0C:               DB $40,  56
 981+ CA97 B1 39                                DB $B1,  57
 982+ CA99 FF 39                                DB $FF,  57
 983+ CA9B 24 3A        SunSqr0D:               DB $24,  58
 984+ CA9D 99 3B                                DB $99,  59
 985+ CA9F FF 3B                                DB $FF,  59
 986+ CAA1 10 3C        SunSqr0E:               DB $10,  60
 987+ CAA3 89 3D                                DB $89,  61
 988+ CAA5 FF 3D                                DB $FF,  61
 989+ CAA7 04 3E        SunSqr0F:               DB $04,  62
 990+ CAA9 81 3F                                DB $81,  63
 991+ CAAB FF 3F                                DB $FF,  63
 992+ CAAD 00 40        SunSqr10:               DB $00,  64
 993+ CAAF 81 41                                DB $81,  65
 994+ CAB1 FF 41                                DB $FF,  65
 995+ CAB3 04 42        SunSqr11:               DB $04,  66
 996+ CAB5 89 43                                DB $89,  67
 997+ CAB7 FF 43                                DB $FF,  67
 998+ CAB9 10 44        SunSqr12:               DB $10,  68
 999+ CABB 99 45                                DB $99,  69
1000+ CABD FF 45                                DB $FF,  69
1001+ CABF 24 46        SunSqr13:               DB $24,  70
1002+ CAC1 B1 47                                DB $B1,  71
1003+ CAC3 FF 47                                DB $FF,  71
1004+ CAC5 40 48        SunSqr14:               DB $40,  72
1005+ CAC7 FF 49                                DB $FF,  73
1006+ CAC9 64 4A        SunSqr15:               DB $64,  74
1007+ CACB FF 4B                                DB $FF,  75
1008+ CACD FF 4C        SunSqr16:               DB $FF,  76
1009+ CACF C4 4D        SunSqr17:               DB $C4,  77
1010+ CAD1 FF 4E                                DB $FF,  78
1011+ CAD3 61 4F        SunSqr18:               DB $61,  79
1012+ CAD5 FF 4F                                DB $FF,  79
1013+ CAD7 00 50        SunSqr19:               DB $00,  80
1014+ CAD9 FF 51                                DB $FF,  81
1015+ CADB 44 52        SunSqr1A:               DB $44,  82
1016+ CADD FF 53                                DB $FF,  83
1017+ CADF 90 54        SunSqr1B:               DB $90,  84
1018+ CAE1 FF 54                                DB $FF,  84
1019+ CAE3 39 55        SunSqr1C:               DB $39,  85
1020+ CAE5 FF 56                                DB $FF,  86
1021+ CAE7 FF 57        SunSqr1D:               DB $FF,  87
1022+ CAE9 40 58        SunSqr1E:               DB $40,  88
1023+ CAEB FF 59                                DB $FF,  89
1024+ CAED FF 5A        SunSqr1F:               DB $FF,  90
1025+ CAEF 59 5B        SunSqr20:               DB $59,  91
1026+ CAF1 FF 5B                                DB $FF,  91
1027+ CAF3 10 5C        SunSqr21:               DB $10,  92
1028+ CAF5 FF 5D                                DB $FF,  93
1029+ CAF7 FF 5E        SunSqr22:               DB $FF,  94
1030+ CAF9 FF 5F        SunSqr23:               DB $FF,  95
1031+ CAFB 00 60        SunSqr24:               DB $00,  96
1032+ CAFD FF 61                                DB $FF,  97
1033+ CAFF 84 62        SunSqr25:               DB $84,  98
1034+ CB01 49 63        SunSqr26:               DB $49,  99
1035+ CB03 10 64        SunSqr27:               DB $10, 100
1036+ CB05 FF 65                                DB $FF, 101
1037+ CB07 FF 66        SunSqr28:               DB $FF, 102
1038+ CB09 FF 67        SunSqr29:               DB $FF, 103
1039+ CB0B FF 68        SunSqr2A:               DB $FF, 104
1040+ CB0D 11 69        SunSqr2B:               DB $11, 105
1041+ CB0F FF 6A                                DB $FF, 106
1042+ CB11 FF 6B        SunSqr2C:               DB $FF, 107
1043+ CB13 FF 6C        SunSqr2D:               DB $FF, 108
1044+ CB15 69 6D        SunSqr2E:               DB $69, 109
1045+ CB17 FF 6E                                DB $FF, 110
1046+ CB19 44 6E        SunSqr2F:               DB $44, 110
1047+ CB1B FF 6F                                DB $FF, 111
1048+ CB1D 21 6F        SunSqr30:               DB $21, 111
1049+ CB1F FF 70                                DB $FF, 112
1050+ CB21 00 70        SunSqr31:               DB $00, 112
1051+ CB23 FF 71                                DB $FF, 113
1052+ CB25 C4 72        SunSqr32:               DB $C4, 114
1053+ CB27 FF 72                                DB $FF, 114
1054+ CB29 FF 73        SunSqr33:               DB $FF, 115
1055+ CB2B 90 74        SunSqr34:               DB $90, 116
1056+ CB2D FF 75                                DB $FF, 117
1057+ CB2F 79 75        SunSqr35:               DB $79, 117
1058+ CB31 FF 76                                DB $FF, 118
1059+ CB33 64 76        SunSqr36:               DB $64, 118
1060+ CB35 64 77                                DB $64, 119
1061+ CB37 51 77        SunSqr37:               DB $51, 119
1062+ CB39 40 78        SunSqr38:               DB $40, 120
1063+ CB3B FF 79                                DB $FF, 121
1064+ CB3D 31 79        SunSqr39:               DB $31, 121
1065+ CB3F FF 7A                                DB $FF, 122
1066+ CB41 24 7A        SunSqr3A:               DB $24, 122
1067+ CB43 FF 7B                                DB $FF, 123
1068+ CB45 19 7B        SunSqr3B:               DB $19, 123
1069+ CB47 FF 7C                                DB $FF, 124
1070+ CB49 10 7C        SunSqr3C:               DB $10, 124
1071+ CB4B FF 7D                                DB $FF, 125
1072+ CB4D 09 7D        SunSqr3D:               DB $09, 125
1073+ CB4F FF 7D                                DB $FF, 125
1074+ CB51 04 7E        SunSqr3E:               DB $04, 126
1075+ CB53 FF 7E                                DB $FF, 126
1076+ CB55 01 7F        SunSqr3F:               DB $01, 127
1077+ CB57 FF 7F                                DB $FF, 127
1078+ CB59 00 80        SunSqr40:               DB $00, 128
1079+ CB5B FF 80                                DB $FF, 128
1080+ CB5D 01 81        SunSqr41:               DB $01, 129
1081+ CB5F FF 82                                DB $FF, 130
1082+ CB61 04 82        SunSqr42:               DB $04, 130
1083+ CB63 FF 83                                DB $FF, 131
1084+ CB65 09 83        SunSqr43:               DB $09, 131
1085+ CB67 FF 84                                DB $FF, 132
1086+ CB69 10 84        SunSqr44:               DB $10, 132
1087+ CB6B FF 85                                DB $FF, 133
1088+ CB6D 19 85        SunSqr45:               DB $19, 133
1089+ CB6F FF 86                                DB $FF, 134
1090+ CB71 24 86        SunSqr46:               DB $24, 134
1091+ CB73 FF 87                                DB $FF, 135
1092+ CB75 31 87        SunSqr47:               DB $31, 135
1093+ CB77 FF 88                                DB $FF, 136
1094+ CB79 40 88        SunSqr48:               DB $40, 136
1095+ CB7B FF 89                                DB $FF, 137
1096+ CB7D 51 89        SunSqr49:               DB $51, 137
1097+ CB7F FF 8A                                DB $FF, 138
1098+ CB81 64 8A        SunSqr4A:               DB $64, 138
1099+ CB83 FF 8A                                DB $FF, 138
1100+ CB85 79 8B        SunSqr4B:               DB $79, 139
1101+ CB87 FF 8B                                DB $FF, 139
1102+ CB89 90 8C        SunSqr4C:               DB $90, 140
1103+ CB8B FF 8C                                DB $FF, 140
1104+ CB8D A9 8D        SunSqr4D:               DB $A9, 141
1105+ CB8F FF 8D                                DB $FF, 141
1106+ CB91 C4 8E        SunSqr4E:               DB $C4, 142
1107+ CB93 FF 8E                                DB $FF, 142
1108+ CB95 E1 8F        SunSqr4F:               DB $E1, 143
1109+ CB97 FF 8F                                DB $FF, 143
1110+ CB99 FF 8F        SunSqr50:               DB $FF, 143
1111+ CB9B 00 90        SunSqr51:               DB $00, 144
1112+ CB9D FF 90                                DB $FF, 144
1113+ CB9F 21 91        SunSqr52:               DB $21, 145
1114+ CBA1 FF 91                                DB $FF, 145
1115+ CBA3 44 92        SunSqr53:               DB $44, 146
1116+ CBA5 FF 92                                DB $FF, 146
1117+ CBA7 69 93        SunSqr54:               DB $69, 147
1118+ CBA9 FF 93                                DB $FF, 147
1119+ CBAB 90 94        SunSqr55:               DB $90, 148
1120+ CBAD FF 94                                DB $FF, 148
1121+ CBAF B9 95        SunSqr56:               DB $B9, 149
1122+ CBB1 FF 95                                DB $FF, 149
1123+ CBB3 E4 96        SunSqr57:               DB $E4, 150
1124+ CBB5 FF 96                                DB $FF, 150
1125+ CBB7 FF 96        SunSqr58:               DB $FF, 150
1126+ CBB9 11 97        SunSqr59:               DB $11, 151
1127+ CBBB FF 97                                DB $FF, 151
1128+ CBBD 40 98        SunSqr5A:               DB $40, 152
1129+ CBBF FF 98                                DB $FF, 152
1130+ CBC1 71 99        SunSqr5B:               DB $71, 153
1131+ CBC3 FF 99                                DB $FF, 153
1132+ CBC5 A4 9A        SunSqr5C:               DB $A4, 154
1133+ CBC7 FF 9A                                DB $FF, 154
1134+ CBC9 D9 9B        SunSqr5D:               DB $D9, 155
1135+ CBCB FF 9B                                DB $FF, 155
1136+ CBCD FF 9B        SunSqr5E:               DB $FF, 155
1137+ CBCF 10 9C        SunSqr5F:               DB $10, 156
1138+ CBD1 FF 9C                                DB $FF, 156
1139+ CBD3 49 9D        SunSqr60:               DB $49, 157
1140+ CBD5 FF 9D                                DB $FF, 157
1141+ CBD7 84 9E        SunSqr61:               DB $84, 158
1142+ CBD9 FF 9E                                DB $FF, 158
1143+ CBDB C1 9F        SunSqr62:               DB $C1, 159
1144+ CBDD FF 9F                                DB $FF, 159
1145+ CBDF FF 9F        SunSqr63:               DB $FF, 159
1146+ CBE1 00 A0        SunSqr64:               DB $00, 160
1147+ CBE3 FF A0                                DB $FF, 160
1148+ CBE5 41 A1        SunSqr65:               DB $41, 161
1149+ CBE7 FF A1                                DB $FF, 161
1150+ CBE9 84 A2        SunSqr66:               DB $84, 162
1151+ CBEB FF A2                                DB $FF, 162
1152+ CBED C9 A3        SunSqr67:               DB $C9, 163
1153+ CBEF FF A3                                DB $FF, 163
1154+ CBF1 FF A3        SunSqr68:               DB $FF, 163
1155+ CBF3 10 A4        SunSqr69:               DB $10, 164
1156+ CBF5 FF A4                                DB $FF, 164
1157+ CBF7 59 A5        SunSqr6A:               DB $59, 165
1158+ CBF9 FF A5                                DB $FF, 165
1159+ CBFB A4 A6        SunSqr6B:               DB $A4, 166
1160+ CBFD FF A6                                DB $FF, 166
1161+ CBFF FF A7        SunSqr6C:               DB $FF, 167
1162+ CC01 FF A7        SunSqr6D:               DB $FF, 167
1163+ CC03 40 A8        SunSqr6E:               DB $40, 168
1164+ CC05 FF A8                                DB $FF, 168
1165+ CC07 91 A9        SunSqr6F:               DB $91, 169
1166+ CC09 FF A9                                DB $FF, 169
1167+ CC0B E4 AA        SunSqr70:               DB $E4, 170
1168+ CC0D FF AA                                DB $FF, 170
1169+ CC0F 00 AA        SunSqr71:               DB $00, 170
1170+ CC11 FF AA                                DB $FF, 170
1171+ CC13 39 AB        SunSqr72:               DB $39, 171
1172+ CC15 FF AB                                DB $FF, 171
1173+ CC17 90 AC        SunSqr73:               DB $90, 172
1174+ CC19 FF AC                                DB $FF, 172
1175+ CC1B E9 AD        SunSqr74:               DB $E9, 173
1176+ CC1D FF AD                                DB $FF, 173
1177+ CC1F FF AD        SunSqr75:               DB $FF, 173
1178+ CC21 44 AE        SunSqr76:               DB $44, 174
1179+ CC23 FF AE                                DB $FF, 174
1180+ CC25 A1 AF        SunSqr77:               DB $A1, 175
1181+ CC27 FF AF                                DB $FF, 175
1182+ CC29 FF AF        SunSqr78:               DB $FF, 175
1183+ CC2B 00 B0        SunSqr79:               DB $00, 176
1184+ CC2D FF B0                                DB $FF, 176
1185+ CC2F 61 B1        SunSqr7A:               DB $61, 177
1186+ CC31 FF B1                                DB $FF, 177
1187+ CC33 C4 B2        SunSqr7B:               DB $C4, 178
1188+ CC35 FF B2                                DB $FF, 178
1189+ CC37 FF B2        SunSqr7C:               DB $FF, 178
1190+ CC39 29 B3        SunSqr7D:               DB $29, 179
1191+ CC3B FF B3                                DB $FF, 179
1192+ CC3D 90 B4        SunSqr7E:               DB $90, 180
1193+ CC3F FF B4                                DB $FF, 180
1194+ CC41 F9 B5        SunSqr7F:               DB $F9, 181
1195+ CC43 FF B5                                DB $FF, 181
1196+ CC45 FF B5        SunSqr80:               DB $FF, 181
1197+ CC47 64 B6        SunSqr81:               DB $64, 182
1198+ CC49 FF B6                                DB $FF, 182
1199+ CC4B D1 B7        SunSqr82:               DB $D1, 183
1200+ CC4D FF B7        SunSqr83:               DB $FF, 183
1201+ CC4F FF B7                                DB $FF, 183
1202+ CC51 40 B8        SunSqr84:               DB $40, 184
1203+ CC53 FF B8                                DB $FF, 184
1204+ CC55 B1 B9        SunSqr85:               DB $B1, 185
1205+ CC57 FF B9                                DB $FF, 185
1206+ CC59 FF B9        SunSqr86:               DB $FF, 185
1207+ CC5B 24 BA        SunSqr87:               DB $24, 186
1208+ CC5D FF BA                                DB $FF, 186
1209+ CC5F 99 BB        SunSqr88:               DB $99, 187
1210+ CC61 FF BB                                DB $FF, 187
1211+ CC63 FF BB        SunSqr89:               DB $FF, 187
1212+ CC65 10 BC        SunSqr8A:               DB $10, 188
1213+ CC67 FF BC                                DB $FF, 188
1214+ CC69 89 BD        SunSqr8B:               DB $89, 189
1215+ CC6B FF BD                                DB $FF, 189
1216+ CC6D FF BD        SunSqr8C:               DB $FF, 189
1217+ CC6F 04 BE        SunSqr8D:               DB $04, 190
1218+ CC71 FF BE                                DB $FF, 190
1219+ CC73 81 BF        SunSqr8E:               DB $81, 191
1220+ CC75 FF BF                                DB $FF, 191
1221+ CC77 FF BF        SunSqr8F:               DB $FF, 191
1222+ CC79 00 C0        SunSqr90:               DB $00, 192
1223+ CC7B FF C0                                DB $FF, 192
1224+ CC7D 81 C1        SunSqr91:               DB $81, 193
1225+ CC7F FF C1                                DB $FF, 193
1226+ CC81 FF C1        SunSqr92:               DB $FF, 193
1227+ CC83 04 C2        SunSqr93:               DB $04, 194
1228+ CC85 FF C2                                DB $FF, 194
1229+ CC87 89 C3        SunSqr94:               DB $89, 195
1230+ CC89 FF C3                                DB $FF, 195
1231+ CC8B FF C3        SunSqr95:               DB $FF, 195
1232+ CC8D 10 C4        SunSqr96:               DB $10, 196
1233+ CC8F FF C4                                DB $FF, 196
1234+ CC91 99 C5        SunSqr97:               DB $99, 197
1235+ CC93 FF C5                                DB $FF, 197
1236+ CC95 FF C5        SunSqr98:               DB $FF, 197
1237+ CC97 24 C6        SunSqr99:               DB $24, 198
1238+ CC99 FF C6                                DB $FF, 198
1239+ CC9B B1 C7        SunSqr9A:               DB $B1, 199
1240+ CC9D FF C7                                DB $FF, 199
1241+ CC9F FF C7        SunSqr9B:               DB $FF, 199
1242+ CCA1 40 C8        SunSqr9C:               DB $40, 200
1243+ CCA3 FF C8                                DB $FF, 200
1244+ CCA5 D1 C9        SunSqr9D:               DB $D1, 201
1245+ CCA7 FF C9                                DB $FF, 201
1246+ CCA9 FF C9        SunSqr9E:               DB $FF, 201
1247+ CCAB 64 CA        SunSqr9F:               DB $64, 202
1248+ CCAD FF CA                                DB $FF, 202
1249+ CCAF F9 CB        SunSqrA0:               DB $F9, 203
1250+ CCB1 FF CB                                DB $FF, 203
1251+ CCB3 FF CB        SunSqrA1:               DB $FF, 203
1252+ CCB5 90 CC        SunSqrA2:               DB $90, 204
1253+ CCB7 FF CC                                DB $FF, 204
1254+ CCB9 FF CC        SunSqrA3:               DB $FF, 204
1255+ CCBB 29 CD        SunSqrA4:               DB $29, 205
1256+ CCBD FF CD                                DB $FF, 205
1257+ CCBF C4 CE        SunSqrA5:               DB $C4, 206
1258+ CCC1 FF CE                                DB $FF, 206
1259+ CCC3 FF CE        SunSqrA6:               DB $FF, 206
1260+ CCC5 61 CF        SunSqrA7:               DB $61, 207
1261+ CCC7 FF CF                                DB $FF, 207
1262+ CCC9 FF CF        SunSqrA8:               DB $FF, 207
1263+ CCCB 00 D0        SunSqrA9:               DB $00, 208
1264+ CCCD FF D0                                DB $FF, 208
1265+ CCCF A1 D1        SunSqrAA:               DB $A1, 209
1266+ CCD1 FF D1                                DB $FF, 209
1267+ CCD3 FF D1        SunSqrAB:               DB $FF, 209
1268+ CCD5 44 D2        SunSqrAC:               DB $44, 210
1269+ CCD7 FF D2                                DB $FF, 210
1270+ CCD9 E9 D3        SunSqrAD:               DB $E9, 211
1271+ CCDB FF D3                                DB $FF, 211
1272+ CCDD FF D3        SunSqrAE:               DB $FF, 211
1273+ CCDF 90 D4        SunSqrAF:               DB $90, 212
1274+ CCE1 FF D4        SunSqrB0:               DB $FF, 212
1275+ CCE3 39 D5        SunSqrB1:               DB $39, 213
1276+ CCE5 FF D5                                DB $FF, 213
1277+ CCE7 E4 D6        SunSqrB2:               DB $E4, 214
1278+ CCE9 FF D6                                DB $FF, 214
1279+ CCEB FF D6        SunSqrB3:               DB $FF, 214
1280+ CCED 91 D7        SunSqrB4:               DB $91, 215
1281+ CCEF FF D7                                DB $FF, 215
1282+ CCF1 FF D7        SunSqrB5:               DB $FF, 215
1283+ CCF3 40 D8        SunSqrB6:               DB $40, 216
1284+ CCF5 FF D8                                DB $FF, 216
1285+ CCF7 F1 D9        SunSqrB7:               DB $F1, 217
1286+ CCF9 FF D9                                DB $FF, 217
1287+ CCFB FF D9        SunSqrB8:               DB $FF, 217
1288+ CCFD FF D9                                DB $FF, 217
1289+ CCFF A4 DA        SunSqrB9:               DB $A4, 218
1290+ CD01 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1291+ CD03 59 DB        SunSqrBB:               DB $59, 219
1292+ CD05 FF DB                                DB $FF, 219
1293+ CD07 FF DB        SunSqrBC:               DB $FF, 219
1294+ CD09 10 DC        SunSqrBD:               DB $10, 220
1295+ CD0B FF DC                                DB $FF, 220
1296+ CD0D C9 DD        SunSqrBE:               DB $C9, 221
1297+ CD0F FF DD                                DB $FF, 221
1298+ CD11 FF DD        SunSqrBF:               DB $FF, 221
1299+ CD13 84 DE        SunSqrC0:               DB $84, 222
1300+ CD15 FF DE                                DB $FF, 222
1301+ CD17 FF DE        SunSqrC1:               DB $FF, 222
1302+ CD19 41 DF        SunSqrC2:               DB $41, 223
1303+ CD1B FF DF                                DB $FF, 223
1304+ CD1D FF DF        SunSqrC3:               DB $FF, 223
1305+ CD1F 00 E0        SunSqrC4:               DB $00, 224
1306+ CD21 FF E0                                DB $FF, 224
1307+ CD23 C1 E1        SunSqrC5:               DB $C1, 225
1308+ CD25 FF E1                                DB $FF, 225
1309+ CD27 FF E1        SunSqrC6:               DB $FF, 225
1310+ CD29 84 E2        SunSqrC7:               DB $84, 226
1311+ CD2B FF E2        SunSqrC8:               DB $FF, 226
1312+ CD2D 49 E3        SunSqrC9:               DB $49, 227
1313+ CD2F FF E3                                DB $FF, 227
1314+ CD31 FF E4        SunSqrCA:               DB $FF, 228
1315+ CD33 10 E4        SunSqrCB:               DB $10, 228
1316+ CD35 FF E4                                DB $FF, 228
1317+ CD37 D9 E5        SunSqrCC:               DB $D9, 229
1318+ CD39 FF E5                                DB $FF, 229
1319+ CD3B FF E5        SunSqrCD:               DB $FF, 229
1320+ CD3D A4 E6        SunSqrCE:               DB $A4, 230
1321+ CD3F FF E6                                DB $FF, 230
1322+ CD41 FF E6        SunSqrCF:               DB $FF, 230
1323+ CD43 71 E7        SunSqrD0:               DB $71, 231
1324+ CD45 FF E7                                DB $FF, 231
1325+ CD47 FF E7        SunSqrD1:               DB $FF, 231
1326+ CD49 40 E8        SunSqrD2:               DB $40, 232
1327+ CD4B FF E8                                DB $FF, 232
1328+ CD4D FF E8        SunSqrD3:               DB $FF, 232
1329+ CD4F 11 E9        SunSqrD4:               DB $11, 233
1330+ CD51 FF E9                                DB $FF, 233
1331+ CD53 E4 EA        SunSqrD5:               DB $E4, 234
1332+ CD55 FF EA                                DB $FF, 234
1333+ CD57 FF EA        SunSqrD6:               DB $FF, 234
1334+ CD59 B9 EB        SunSqrD7:               DB $B9, 235
1335+ CD5B FF EB                                DB $FF, 235
1336+ CD5D FF EB        SunSqrD8:               DB $FF, 235
1337+ CD5F 90 EC        SunSqrD9:               DB $90, 236
1338+ CD61 FF EC                                DB $FF, 236
1339+ CD63 FF EC        SunSqrDA:               DB $FF, 236
1340+ CD65 69 ED        SunSqrDB:               DB $69, 237
1341+ CD67 FF ED                                DB $FF, 237
1342+ CD69 FF ED        SunSqrDC:               DB $FF, 237
1343+ CD6B 44 EE        SunSqrDD:               DB $44, 238
1344+ CD6D FF EE        SunSqrDE:               DB $FF, 238
1345+ CD6F 21 EF        SunSqrDF:               DB $21, 239
1346+ CD71 FF EF                                DB $FF, 239
1347+ CD73 00 F0        SunSqrE0:               DB $00, 240
1348+ CD75 FF F0                                DB $FF, 240
1349+ CD77 00 F0        SunSqrE1:               DB $00, 240
1350+ CD79 FF F0                                DB $FF, 240
1351+ CD7B E1 F1        SunSqrE2:               DB $E1, 241
1352+ CD7D FF F1                                DB $FF, 241
1353+ CD7F E1 F1        SunSqrE3:               DB $E1, 241
1354+ CD81 FF F1                                DB $FF, 241
1355+ CD83 C4 F2        SunSqrE4:               DB $C4, 242
1356+ CD85 FF F2                                DB $FF, 242
1357+ CD87 FF F2        SunSqrE5:               DB $FF, 242
1358+ CD89 A9 F3        SunSqrE6:               DB $A9, 243
1359+ CD8B FF F3                                DB $FF, 243
1360+ CD8D FF F3        SunSqrE7:               DB $FF, 243
1361+ CD8F FF F3                                DB $FF, 243
1362+ CD91 90 F3        SunSqrE8:               DB $90, 243
1363+ CD93 FF F4                                DB $FF, 244
1364+ CD95 FF F4        SunSqrE9:               DB $FF, 244
1365+ CD97 79 F5        SunSqrEA:               DB $79, 245
1366+ CD99 FF F5                                DB $FF, 245
1367+ CD9B FF F5        SunSqrEB:               DB $FF, 245
1368+ CD9D 64 F6        SunSqrEC:               DB $64, 246
1369+ CD9F FF F6        SunSqrED:               DB $FF, 246
1370+ CDA1 51 F7        SunSqrEE:               DB $51, 247
1371+ CDA3 FF F7                                DB $FF, 247
1372+ CDA5 FF F7        SunSqrEF:               DB $FF, 247
1373+ CDA7 40 F8        SunSqrF0:               DB $40, 248
1374+ CDA9 FF F8        SunSqrF1:               DB $FF, 248
1375+ CDAB 31 F9        SunSqrF2:               DB $31, 249
1376+ CDAD FF F9                                DB $FF, 249
1377+ CDAF FF F9        SunSqrF3:               DB $FF, 249
1378+ CDB1 24 FA        SunSqrF4:               DB $24, 250
1379+ CDB3 FF FA                                DB $FF, 250
1380+ CDB5 FF FA        SunSqrF5:               DB $FF, 250
1381+ CDB7 19 FB        SunSqrF6:               DB $19, 251
1382+ CDB9 FF FB                                DB $FF, 251
1383+ CDBB FF FB        SunSqrF7:               DB $FF, 251
1384+ CDBD 10 FC        SunSqrF8:               DB $10, 252
1385+ CDBF FF FC                                DB $FF, 252
1386+ CDC1 FF FC        SunSqrF9:               DB $FF, 252
1387+ CDC3 09 FD        SunSqrFA:               DB $09, 253
1388+ CDC5 FF FD                                DB $FF, 253
1389+ CDC7 FF FD        SunSqrFB:               DB $FF, 253
1390+ CDC9 04 FE        SunSqrFC:               DB $04, 254
1391+ CDCB FF FE                                DB $FF, 254
1392+ CDCD FF FE        SunSqrFD:               DB $FF, 254
1393+ CDCF 01 FF        SunSqrFE:               DB $01, 255
1394+ CDD1 FF FF        SunSqrFF:               DB $FF, 255
1395+ CDD3
1396+ CDD3
1397+ CDD3
1398+ CDD3              SunBankSize  EQU $ - StartOfSun
1399+ CDD3
1400+ CDD3
# file closed: ./Universe/Sun/sun_data.asm
1381  CDD3
1382  CDD3              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1383  CDD3                  SLOT    PlanetBankAddr
1384  CDD3                  PAGE    BankPlanetData
1385  CDD3              	ORG	    PlanetBankAddr,BankPlanetData
1386  C000                  ;TODO INCLUDE "./Universe/planet_data.asm"
1387  C000
1388  C000                  SLOT    GalaxyDataAddr
1389  C000                  PAGE    BankGalaxyData1
1390  C000              	ORG GalaxyDataAddr, BankGalaxyData1
1391  E000 FF           GALAXYDATABlock1         DB $FF
1392  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1393  0000
1394  0000                  SLOT    GalaxyDataAddr
1395  0000                  PAGE    BankGalaxyData2
1396  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1397  E000 FF           GALAXYDATABlock2         DB $FF
1398  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1399  0000                  SLOT    GalaxyDataAddr
1400  0000                  PAGE    BankGalaxyData3
1401  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1402  E000 FF           GALAXYDATABlock3         DB $FF
1403  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1404  0000                  SLOT    GalaxyDataAddr
1405  0000                  PAGE    BankGalaxyData4
1406  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1407  E000 FF           GALAXYDATABlock4         DB $FF
1408  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1409  0000                  SLOT    GalaxyDataAddr
1410  0000                  PAGE    BankGalaxyData5
1411  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1412  E000 FF           GALAXYDATABlock5         DB $FF
1413  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1414  0000                  SLOT    GalaxyDataAddr
1415  0000                  PAGE    BankGalaxyData6
1416  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1417  E000 FF           GALAXYDATABlock6         DB $FF
1418  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1419  0000                  SLOT    GalaxyDataAddr
1420  0000                  PAGE    BankGalaxyData7
1421  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1422  E000 FF           GALAXYDATABlock7         DB $FF
1423  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1424  0000
1425  0000
1426  0000
1427  0000
1428  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1429  0000                  SAVENEX CFG  0,0,0,1
1430  0000                  SAVENEX AUTO
1431  0000                  SAVENEX CLOSE
1432  0000
# file closed: eliteNext.asm
