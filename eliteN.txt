# file opened: eliteNext.asm
   1  0000              Fcoc DEVICE ZXSPECTRUMNEXT
   2  0000               DEVICE ZXSPECTRUMNEXT
   3  0000               DEVICE ZXSPECTRUMNEXT
   4  0000               DEFINE  DOUBLEBUFFER 1
   5  0000               CSPECTMAP eliteNext.map
   6  0000               OPT --zxnext=cspect --syntax=a
   7  0000
   8  0000              DEBUGSEGSIZE   equ 1
   9  0000              DEBUGLOGSUMMARY equ 1
  10  0000              ;DEBUGLOGDETAIL equ 1
  11  0000
  12  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  13  0000              ; Game Defines
  14  0000              ScreenLocal     EQU 0
  15  0000              ScreenGalactic  EQU ScreenLocal + 1
  16  0000              ScreenMarket    EQU ScreenGalactic + 1
  17  0000              ScreenMarketDsp EQU ScreenMarket + 1
  18  0000              ScreenStatus    EQU ScreenMarketDsp + 1
  19  0000              ScreenInvent    EQU ScreenStatus + 1
  20  0000              ScreenPlanet    EQU ScreenInvent + 1
  21  0000              ScreenEquip     EQU ScreenPlanet + 1
  22  0000              ScreenLaunch    EQU ScreenEquip + 1
  23  0000              ScreenFront     EQU ScreenLaunch + 1
  24  0000              ScreenAft       EQU ScreenFront+1
  25  0000              ScreenLeft      EQU ScreenAft+1
  26  0000              ScreenRight     EQU ScreenLeft+1
  27  0000              ScreenDocking   EQU ScreenRight+1
  28  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  29  0000              ; Colour Defines
  30  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED             EQU 224
   3+ 0000              L2ColourRED_MED         EQU 128
   4+ 0000              L2ColourRED_DRK         EQU  32
   5+ 0000              L2ColourRED_1           EQU L2ColourRED_MED
   6+ 0000              L2ColourRED_2           EQU  96
   7+ 0000              L2ColourRED_3           EQU  64
   8+ 0000              L2ColourRED_4           EQU L2ColourRED_DRK
   9+ 0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  10+ 0000              L2ColourYELLOW          EQU 252
  11+ 0000              L2ColourYELLOW_MED      EQU 144
  12+ 0000              L2ColourYELLOW_DRK      EQU  72
  13+ 0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  14+ 0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  15+ 0000              L2ColourGREEN           EQU  29
  16+ 0000              L2ColourGREEN_MED       EQU  16
  17+ 0000              L2ColourGREEN_DRK       EQU   8
  18+ 0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  19+ 0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  20+ 0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  21+ 0000              L2ColourWHITE           EQU 255
  22+ 0000              L2ColourWHITE_MED       EQU 146
  23+ 0000              L2ColourWHITE_DRK       EQU  73
  24+ 0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  25+ 0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  26+ 0000              L2ColourGREY_1		    EQU 146
  27+ 0000              L2ColourGREY_2		    EQU 109
  28+ 0000              L2ColourGREY_3		    EQU  73
  29+ 0000              L2ColourGREY_4		    EQU  37
  30+ 0000              L2ColourMAGENTA         EQU 218
  31+ 0000              L2ColourMAGENTA_MED     EQU 130
  32+ 0000              L2ColourMAGENTA_DRK     EQU  65
  33+ 0000              L2ColourORANGE          EQU 236
  34+ 0000              L2ColourORANGE_MED      EQU 168
  35+ 0000              L2ColourORANGE_DRK      EQU  68
  36+ 0000              L2ColourBLUE            EQU   3
  37+ 0000              L2ColourBLUE_MED        EQU   2
  38+ 0000              L2ColourBLUE_DRK        EQU   1
  39+ 0000              L2ColourBLUE_1          EQU 111
  40+ 0000              L2ColourBLUE_2		    EQU  39
  41+ 0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  42+ 0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  43+ 0000              L2ColourCYAN            EQU  31
  44+ 0000              L2ColourCYAN_MED        EQU  18
  45+ 0000              L2ColourCYAN_DRK        EQU   9
  46+ 0000              L2ColourPURPLE          EQU 109
  47+ 0000              L2ColourPURPLE_MED      EQU  66
  48+ 0000              L2ColourPURPLE_DRK      EQU  33
  49+ 0000              L2ColourPINK_1		    EQU 231
  50+ 0000              L2ColourPINK_2		    EQU 226
  51+ 0000              L2ColourPINK_3		    EQU 225
  52+ 0000              L2ColourPINK_4		    EQU 224
  53+ 0000              L2ColourTRANSPARENT     EQU $E3
  54+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  31  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  32  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  33  0000              ; Total screen list
  34  0000              ; Local Chart
  35  0000              ; Galactic Chart
  36  0000              ; Market Prices
  37  0000              ; Inventory
  38  0000              ; Comander status
  39  0000              ; System Data
  40  0000              ; Mission Briefing
  41  0000              ; missio completion
  42  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  43  0000              ; Pause Menu (only place you can load from )
  44  0000              ; byint and selling equipment
  45  0000              ; bying and selling stock
  46  0000
  47  0000                  INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  48  0000                  INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  49  0000                  INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              UniverseBankAddr	    equ $c000
  25+ 0000              LaunchShipAddr          equ $c000
  26+ 0000              membank7 			    equ $e000
  27+ 0000              L1membankAddr   	    equ $e000
  28+ 0000              L2membankAddr   	    equ $e000
  29+ 0000              ShipModelsAddr	        equ $e000
  30+ 0000              SpritemembankAddr       equ $e000
  31+ 0000              ResetUniverseAddr       equ $e000
  32+ 0000              StockTableAddr	        equ $e000
  33+ 0000              CMDRDATAAddr            equ $e000
  34+ 0000              LAYER2Addr              equ $e000
  35+ 0000              LAYER1Addr              equ $e000
  36+ 0000              SPRITEAddr              equ $e000
  37+ 0000              ConsoleImageAddr        equ $e000
  38+ 0000              GalaxyDataAddr          equ $e000
  39+ 0000
  40+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  41+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  42+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  43+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  44+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  45+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  46+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  53+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  54+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  55+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  56+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  57+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  58+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  60+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  61+ 0000
  62+ 0000              BankResetUniv           equ 49
  63+ 0000              BankMenuShrCht          equ 50
  64+ 0000              BankMenuGalCht          equ 51
  65+ 0000              BankMenuInvent          equ 52
  66+ 0000              BankMenuSystem          equ 53
  67+ 0000              BankMenuMarket          equ 54
  68+ 0000              BankStockTable          equ 55
  69+ 0000              BankCmdrData            equ 56
  70+ 0000              BankLAYER2              equ 57
  71+ 0000              BankLAYER1              equ 58
  72+ 0000              BankShipModelsA         equ 59
  73+ 0000              BankSPRITE              equ 60
  74+ 0000              BankConsole             equ 61
  75+ 0000              BankFrontView           equ 62
  76+ 0000              BankMenuStatus          equ 63
  77+ 0000              BankMenuEquipS          equ 64
  78+ 0000              BankLaunchShip          equ 65
  79+ 0000              BankDispMarket          equ 66
  80+ 0000              BankShipModelsB         equ 67
  81+ 0000              BankShipModelsC         equ 68
  82+ 0000
  83+ 0000              BankUNIVDATA0           equ 70
  84+ 0000              BankUNIVDATA1           equ 71
  85+ 0000              BankUNIVDATA2           equ 72
  86+ 0000              BankUNIVDATA3           equ 73
  87+ 0000              BankUNIVDATA4           equ 74
  88+ 0000              BankUNIVDATA5           equ 75
  89+ 0000              BankUNIVDATA6           equ 76
  90+ 0000              BankUNIVDATA7           equ 77
  91+ 0000              BankUNIVDATA8           equ 78
  92+ 0000              BankUNIVDATA9           equ 79
  93+ 0000              BankUNIVDATA10          equ 80
  94+ 0000              BankUNIVDATA11          equ 81
  95+ 0000              BankUNIVDATA12          equ 82
  96+ 0000
  97+ 0000              BankGalaxyData0         equ 91
  98+ 0000              BankGalaxyData1         equ 92
  99+ 0000              BankGalaxyData2         equ 93
 100+ 0000              BankGalaxyData3         equ 94
 101+ 0000              BankGalaxyData4         equ 95
 102+ 0000              BankGalaxyData5         equ 96
 103+ 0000              BankGalaxyData6         equ 97
 104+ 0000              BankGalaxyData7         equ 98
 105+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  50  0000                  INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  51  0000
  52  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipModelsA: MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsA
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipModelsB: MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsB
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipModelsC: MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModelsC
  29+ 0000              					 ENDM
  30+ 0000
  31+ 0000              MMUSelectShipModelA: MACRO
  32+ 0000 ~            					 nextreg ShipModelMMU,	    a
  33+ 0000              					 ENDM
  34+ 0000
  35+ 0000              MMUSelectShipModelN: MACRO value
  36+ 0000 ~            					 nextreg ShipModelMMU,	    value
  37+ 0000              					 ENDM
  38+ 0000
  39+ 0000              MMUSelectCmdrData:	 MACRO
  40+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  41+ 0000              					 ENDM
  42+ 0000
  43+ 0000              MMUSelectStockTable: MACRO
  44+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  45+ 0000              					 ENDM
  46+ 0000
  47+ 0000              MMUSelectCpySrcA:    MACRO
  48+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  49+ 0000              					 ENDM
  50+ 0000
  51+ 0000              MMUSelectCpySrcN:    MACRO value
  52+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  53+ 0000              					 ENDM
  54+ 0000
  55+ 0000              MMUSelectUniverseA:  MACRO
  56+ 0000 ~                                 add    a,BankUNIVDATA0
  57+ 0000 ~                                 nextreg UniverseMMU,       a
  58+ 0000                                   ENDM
  59+ 0000
  60+ 0000              MMUSelectUniverseN:  MACRO value
  61+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  62+ 0000                                   ENDM
  63+ 0000
  64+ 0000              MMUSelectGalaxyA:    MACRO
  65+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  66+ 0000                                   ENDM
  67+ 0000
  68+ 0000              MMUSelectGalaxyN:    MACRO value
  69+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  70+ 0000                                   ENDM
  71+ 0000              MMUSelectGalaxyACopy:MACRO
  72+ 0000 ~                                 nextreg UniverseMMU,       a
  73+ 0000                                   ENDM
  74+ 0000
  75+ 0000              MMUSelectUniverseAbs:MACRO value
  76+ 0000 ~                                 nextreg UniverseMMU,       value
  77+ 0000                                   ENDM
  78+ 0000
  79+ 0000              MMUSelectMenuGalCht: MACRO
  80+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  81+ 0000              					 ENDM
  82+ 0000
  83+ 0000              MMUSelectMenuShrCht: MACRO
  84+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  85+ 0000              					 ENDM
  86+ 0000
  87+ 0000              MMUSelectMenuInvent: MACRO
  88+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
  89+ 0000              					 ENDM
  90+ 0000
  91+ 0000              MMUSelectMenuSystem: MACRO
  92+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
  93+ 0000              					 ENDM
  94+ 0000
  95+ 0000              MMUSelectMenuMarket: MACRO
  96+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
  97+ 0000              					 ENDM
  98+ 0000
  99+ 0000              MMUSelectMenuStatus: MACRO
 100+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 101+ 0000              					 ENDM
 102+ 0000
 103+ 0000              MMUSelectViewFront:  MACRO
 104+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 105+ 0000              					 ENDM
 106+ 0000
 107+ 0000              MMUSelectScreenA:    MACRO
 108+ 0000 ~                                 nextreg ScreenBankMMU,		a
 109+ 0000              					 ENDM
 110+ 0000
# file closed: ./Macros/MMUMacros.asm
  53  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000              ShiftMem16Right1:   MACRO memaddr
  58+ 0000 ~                                ld    hl,(memaddr)
  59+ 0000 ~                                srl   h
  60+ 0000 ~                                rr    l
  61+ 0000 ~                                ld    (memaddr),hl
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000              ShiftMem8Right1:    MACRO memaddr
  65+ 0000 ~                                ld      a,(memaddr)
  66+ 0000 ~                                srl     a
  67+ 0000 ~                                ld      (memaddr),a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000
  71+ 0000              ShiftMem8Left1A:    MACRO memaddr
  72+ 0000 ~                                ld      a,(memaddr)
  73+ 0000 ~                                sla     a
  74+ 0000 ~                                ld      (memaddr),a
  75+ 0000                                  ENDM
  76+ 0000
# file closed: ./Macros/ShiftMacros.asm
  54  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
# file closed: ./Macros/CopyByteMacros.asm
  55  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  15+ 0000 ~                                    ld      a,(mem)
  16+ 0000 ~                                    bit 	bitnbr,a
  17+ 0000 ~                                    jp      nz,target
  18+ 0000                                      ENDM
  19+ 0000
  20+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  21+ 0000 ~                                    ld      a,(mem)
  22+ 0000 ~                                    bit 	bitnbr,a
  23+ 0000 ~                                    jp      z,target
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      nz,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    jp      z,target
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  38+ 0000 ~                                    bit 	bitnbr,reg
  39+ 0000 ~                                    ret     nz
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  43+ 0000 ~                                    ld   a,(mem)
  44+ 0000 ~                                    bit 	bitnbr,a
  45+ 0000 ~                                    ret     nz
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  49+ 0000 ~                                    bit 	bitnbr,reg
  50+ 0000 ~                                    ret		z
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  54+ 0000 ~                                    ld     a,(mem)
  55+ 0000 ~                                    bit 	bitnbr,a
  56+ 0000 ~                                    ret		z
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfAGTEusng:         MACRO
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              JumpIfAGTENusng:        MACRO reg,target
  64+ 0000 ~                                    cp     reg
  65+ 0000 ~                                    jp		nc,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000
  69+ 0000              CallIfAGTENusng:        MACRO   reg,target
  70+ 0000 ~                                    cp      reg
  71+ 0000 ~                                    call	nc,target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  75+ 0000 ~                                    ld     a,(mem)
  76+ 0000 ~                                    cp     value
  77+ 0000 ~                                    jp	  nc,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              JumpIfMemGTEMemusng:    MACRO mem, value, target
  81+ 0000 ~                                    ld   a,(mem)
  82+ 0000 ~                                    ld   hl,value
  83+ 0000 ~                                    cp   (hl)
  84+ 0000 ~                                    jp	  nc,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000
  88+ 0000              JumpIfALTusng:          MACRO target
  89+ 0000 ~                                    jp		c,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfALTNusng:         MACRO value, target
  93+ 0000 ~                                    cp      value
  94+ 0000 ~                                    jp		c,target
  95+ 0000                                      ENDM
  96+ 0000
  97+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
  98+ 0000 ~                                    ld      a,(mem)
  99+ 0000 ~                                    cp      value
 100+ 0000 ~                                    jp	  c,target
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 104+ 0000 ~                                    ld    a,(mem)
 105+ 0000 ~                                    ld    hl,value
 106+ 0000 ~                                    cp    (hl)
 107+ 0000 ~                                    jp	  c,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpIfALTMemHLusng:     MACRO target
 111+ 0000 ~                                    cp    (hl)
 112+ 0000 ~                                    jp	  c,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpIfANENusng: MACRO value, target
 116+ 0000 ~                            cp     value
 117+ 0000 ~                            jp      nz,target
 118+ 0000                              ENDM
 119+ 0000
 120+ 0000              JumpIfANEMemusng: MACRO  value, target
 121+ 0000 ~                              ld    hl,value
 122+ 0000 ~                              cp    (hl)
 123+ 0000 ~                              jp      nz,target
 124+ 0000                                ENDM
 125+ 0000
 126+ 0000              JumpIfAEqNusng: MACRO value, target
 127+ 0000 ~                            cp     value
 128+ 0000 ~                            jp      z,target
 129+ 0000                              ENDM
 130+ 0000
 131+ 0000              IfAIsZeroGoto:	MACRO target
 132+ 0000 ~            				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 133+ 0000 ~            				jp	z,target
 134+ 0000              				ENDM
 135+ 0000
 136+ 0000              IfANotZeroGoto:	MACRO target
 137+ 0000 ~            				cp	0
 138+ 0000 ~            				jp	nz,target
 139+ 0000              				ENDM
 140+ 0000
 141+ 0000              IfResultZeroGoto:	MACRO target
 142+ 0000 ~            					jp	z,target
 143+ 0000              					ENDM
 144+ 0000
 145+ 0000              IfResultNotZeroGoto:MACRO target
 146+ 0000 ~            					jp	nz,target
 147+ 0000              					ENDM
 148+ 0000
 149+ 0000              ReturnIfAIsZero: MACRO
 150+ 0000 ~                             cp     0
 151+ 0000 ~                             ret    z
 152+ 0000                               ENDM
 153+ 0000
 154+ 0000              ReturnIfMemisZero: MACRO mem
 155+ 0000 ~                               ld   a,(mem)
 156+ 0000 ~                               cp     0
 157+ 0000 ~                               ret    z
 158+ 0000                                 ENDM
 159+ 0000
 160+ 0000              ReturnIfANotZero: MACRO
 161+ 0000 ~                              cp     0
 162+ 0000 ~                              ret    nz
 163+ 0000                                ENDM
 164+ 0000
 165+ 0000              ReturnIfMemNotZero: MACRO mem
 166+ 0000 ~                                ld     a,(mem)
 167+ 0000 ~                                cp     0
 168+ 0000 ~                                ret    nz
 169+ 0000                                  ENDM
 170+ 0000
 171+ 0000              ReturnIfAGTEusng: MACRO value
 172+ 0000 ~            				  cp    value
 173+ 0000 ~                              ret	 nc
 174+ 0000                                ENDM
 175+ 0000
 176+ 0000              ReturnIfALTNusng:  MACRO value
 177+ 0000 ~                               cp    value
 178+ 0000 ~                               ret	 c
 179+ 0000                                 ENDM
 180+ 0000
 181+ 0000              ReturnIfAGTENusng: MACRO value
 182+ 0000 ~                               cp    value
 183+ 0000 ~                               ret	 nc
 184+ 0000                                 ENDM
 185+ 0000
 186+ 0000              ReturnIfANENusng: MACRO value
 187+ 0000 ~                              cp      value
 188+ 0000 ~                              ret     nz
 189+ 0000                                ENDM
 190+ 0000
 191+ 0000              ReturnIfAEqNusng: MACRO value
 192+ 0000 ~                              cp      value
 193+ 0000 ~                              ret     z
 194+ 0000                                ENDM
 195+ 0000
 196+ 0000              SetCarryFlag:           MACRO
 197+ 0000 ~                                    scf
 198+ 0000                                      ENDM
 199+ 0000
 200+ 0000              ClearCarryFlag:	        MACRO
 201+ 0000 ~                                    or a
 202+ 0000                                      ENDM
 203+ 0000
 204+ 0000              FlipCarryFalg:          MACRO
 205+ 0000 ~                                    ccf
 206+ 0000                                      ENDM
 207+ 0000
 208+ 0000              pushbcde:		        MACRO
 209+ 0000 ~                                    push	bc
 210+ 0000 ~                                    push	de
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              popdebc:		        MACRO
 214+ 0000 ~                                    pop		de
 215+ 0000 ~                                    pop		bc
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              pushhlde:		MACRO
 219+ 0000 ~                            push	hl
 220+ 0000 ~                            push	de
 221+ 0000                              ENDM
 222+ 0000
 223+ 0000              popdehl:		MACRO
 224+ 0000 ~                            pop		de
 225+ 0000 ~                            pop		hl
 226+ 0000                              ENDM
 227+ 0000
 228+ 0000              pushbcdeaf:		MACRO
 229+ 0000 ~                            push	bc
 230+ 0000 ~                            push	de
 231+ 0000 ~                            push	af
 232+ 0000                              ENDM
 233+ 0000
 234+ 0000              popafdebc:		MACRO
 235+ 0000 ~                            pop		af
 236+ 0000 ~                            pop		de
 237+ 0000 ~                            pop		bc
 238+ 0000                              ENDM
 239+ 0000
 240+ 0000              NegIY:			MACRO
 241+ 0000 ~                            xor a
 242+ 0000 ~                            sub iyl
 243+ 0000 ~                            ld iyl,a
 244+ 0000 ~                            sbc a,a
 245+ 0000 ~                            sub iyh
 246+ 0000 ~                            ld iyh,a
 247+ 0000                              ENDM
 248+ 0000
 249+ 0000              NegHL:			MACRO
 250+ 0000 ~                            xor a
 251+ 0000 ~                            sub l
 252+ 0000 ~                            ld l,a
 253+ 0000 ~                            sbc a,a
 254+ 0000 ~                            sub h
 255+ 0000 ~                            ld h,a
 256+ 0000                              ENDM
 257+ 0000
 258+ 0000              NegDE:			MACRO
 259+ 0000 ~                            xor a
 260+ 0000 ~                            sub e
 261+ 0000 ~                            ld e,a
 262+ 0000 ~                            sbc a,a
 263+ 0000 ~                            sub d
 264+ 0000 ~                            ld d,a
 265+ 0000                              ENDM
 266+ 0000
 267+ 0000              NegBC:			MACRO
 268+ 0000 ~                            xor a
 269+ 0000 ~                            sub c
 270+ 0000 ~                            ld c,a
 271+ 0000 ~                            sbc a,a
 272+ 0000 ~                            sub  b
 273+ 0000 ~                            ld b,a
 274+ 0000                              ENDM
 275+ 0000
 276+ 0000              NegH            MACRO
 277+ 0000 ~                            ld      a,h
 278+ 0000 ~                            neg
 279+ 0000 ~                            ld      h,a
 280+ 0000                              ENDM
 281+ 0000
 282+ 0000              NegD            MACRO
 283+ 0000 ~                            ld      a,d
 284+ 0000 ~                            neg
 285+ 0000 ~                            ld      d,a
 286+ 0000                              ENDM
 287+ 0000
 288+ 0000              NegB            MACRO
 289+ 0000 ~                            ld      a,b
 290+ 0000 ~                            neg
 291+ 0000 ~                            ld      b,a
 292+ 0000                              ENDM
 293+ 0000
 294+ 0000              FourLDIInstrunctions:   MACRO
 295+ 0000 ~                                    ldi
 296+ 0000 ~                                    ldi
 297+ 0000 ~                                    ldi
 298+ 0000 ~                                    ldi
 299+ 0000                                      ENDM
 300+ 0000
 301+ 0000              FiveLDIInstrunctions:   MACRO
 302+ 0000 ~                                    ldi
 303+ 0000 ~                                    ldi
 304+ 0000 ~                                    ldi
 305+ 0000 ~                                    ldi
 306+ 0000 ~                                    ldi
 307+ 0000                                      ENDM
 308+ 0000
 309+ 0000              SixLDIInstrunctions:    MACRO
 310+ 0000 ~                                    ldi
 311+ 0000 ~                                    ldi
 312+ 0000 ~                                    ldi
 313+ 0000 ~                                    ldi
 314+ 0000 ~                                    ldi
 315+ 0000 ~                                    ldi
 316+ 0000                                      ENDM
 317+ 0000
 318+ 0000              EightLDIInstrunctions:  MACRO
 319+ 0000 ~            		                ldi
 320+ 0000 ~            		                ldi
 321+ 0000 ~            		                ldi
 322+ 0000 ~            		                ldi
 323+ 0000 ~            		                ldi
 324+ 0000 ~            		                ldi
 325+ 0000 ~            		                ldi
 326+ 0000 ~            		                ldi
 327+ 0000                                      ENDM
 328+ 0000
 329+ 0000              NineLDIInstrunctions:  MACRO
 330+ 0000 ~            		                ldi
 331+ 0000 ~            		                ldi
 332+ 0000 ~            		                ldi
 333+ 0000 ~            		                ldi
 334+ 0000 ~            		                ldi
 335+ 0000 ~            		                ldi
 336+ 0000 ~            		                ldi
 337+ 0000 ~            		                ldi
 338+ 0000 ~            		                ldi
 339+ 0000                                      ENDM
 340+ 0000
# file closed: ./Macros/GeneralMacros.asm
  56  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
  57  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
  58  0000
  59  0000
  60  0000              charactersetaddr		equ 15360
  61  0000              STEPDEBUG               equ 1
  62  0000
  63  0000
  64  0000                                      ORG         $8000
  65  8000 F3                                   di
  66  8001                                      ; "STARTUP"
  67  8001                                      MMUSelectLayer1
  67  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  68  8005 CD 47 E0                             call		l1_cls
  69  8008 3E 07                                ld			a,7
  70  800A CD 53 E0                             call		l1_attr_cls_to_a
  71  800D 3E FF                                ld          a,$FF
  72  800F CD 5D E0                             call        l1_set_border
  73  8012                                      MMUSelectSpriteBank
  73  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  74  8016 CD 54 E1                             call		sprite_load_sprite_data
  75  8019              Initialise:             MMUSelectLayer2
  75  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76  801D CD D0 E0                             call 		l2_initialise
  77  8020 3E FF                                ld          a,$FF
  78  8022 32 BE 83                             ld          (ScreenTransitionForced),a
  79  8025 3E 10        TidyDEBUG:              ld          a,16
  80  8027 32 99 82                             ld          (TidyCounter),a
  81  802A
  82  802A AF           TestText:               xor			a
  83  802B 32 DC 93                             ld      (JSTX),a
  84  802E                                      MMUSelectCmdrData
  84  802E ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
  85  8032 CD 1F E0                             call		defaultCommander
  86  8035
  87  8035                                      MMUSelectSpriteBank
  87  8035 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  88  8039 CD 4C E1                             call		init_sprites
  89  803C
  90  803C                                      MMUSelectStockTable
  90  803C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  91  8040 CD AA E0                             call		generate_stock_market ; Normally done on jump to system and start up, should be written on load save to stop market price cheating
  92  8043
  93  8043                                      IFDEF DOUBLEBUFFER
  94  8043                                          MMUSelectLayer2
  94  8043 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  95  8047 CD C9 E0                                 call        l2_cls
  96  804A CD DD E0                                 call  l2_flip_buffers
  97  804D                                      ENDIF
  98  804D
  99  804D                                      ;MMUSelectResetUniv
 100  804D CD BF 83                             call		ResetUniv
 100  8050
 101  8050 CD E0 83                             call        ResetGalaxy
 102  8053                                      MMUSelectGalaxyN 0
 102  8053 ED 91 57 5B >                     nextreg GalaxyDataMMU,     BankGalaxyData0+0
 103  8057 CD 90 FC                             call        SeedGalaxy
 104  805A
 105  805A                                      MMUSelectLayer2
 105  805A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 106  805E                                      MMUSelectUniverseN 0
 106  805E ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 107  8062 CD C9 E0                             call        l2_cls
 108  8065                                      IFDEF DOUBLEBUFFER
 109  8065                                          MMUSelectLayer2
 109  8065 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110  8069 CD DD E0                                 call  l2_flip_buffers
 111  806C                                      ENDIF
 112  806C
 113  806C
 114  806C CD 32 97     InitialiseDemoShip:     call    ClearFreeSlotList
 115  806F CD 97 97                             call    FindNextFreeSlotInA
 116  8072 CD 3E 97                             call    SetSlotAToSpaceStation
 117  8075 F5                                   push    af
 118  8076                                      MMUSelectUniverseA                          ; load up register into universe bank
 118  8076 C6 46       >                     add    a,BankUNIVDATA0
 118  8078 ED 92 56    >                     nextreg UniverseMMU,       a
 119  807B CD 25 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 120  807E                                      MMUSelectShipModelsA
 120  807E ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModelsA
 121  8082 3E 0D                                ld      a,13    ; space station
 122  8084 CD 7C E0                             call    CopyShipDataToUBnk
 123  8087
 124  8087 3E 03                                ld      a,3
 125  8089 32 2C 94                             ld      (MenuIdMax),a
 126  808C 3E FF                                ld      a,$FF                               ; Starts Docked
 127  808E 32 31 94                             ld      (DockedFlag),a
 128  8091              ;                        call    InitialiseFrontView
 129  8091 CD 39 84                             call    InitialiseCommander
 130  8094                                      MMUSelectUniverseN 0
 130  8094 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 131  8098 CD F7 84                             call    SetInitialShipPosition
 132  809B              ;..................................................................................................................................
 133  809B CD D7 97     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 134  809E CD 86 91                             call    scan_keyboard
 135  80A1 CD C0 81     DemoOfShipsDEBUG:       call    TestForNextShip
 136  80A4 3E 00        ScreenTransBlock:       ld      a,$0
 137  80A6 FE 01                                cp      1
 138  80A8 CA 47 81                             jp      z,CheckIfViewUpdate                 ; as we are in a transition the whole update AI is skipped
 139  80AB CD A3 84                             call    ViewKeyTest
 140  80AE CD 08 82                             call    TestPauseMode
 141  80B1 3A 32 94                             ld      a,(GamePaused)
 142  80B4 FE 00                                cp      0
 143  80B6 20 E3                                jr      nz,MainLoop
 144  80B8 3A 31 94                             ld      a,(DockedFlag)
 145  80BB FE 00                                cp      0
 146  80BD                                      ;call    z,ThrottleTest                      ; only use throttle if flying, may expand the logic to include hyperspace, not sure yet
 147  80BD CD 17 93                             call    MovementKeyTest
 148  80C0              ;Process cursor keys for respective screen
 149  80C0 3A CE 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 150  80C3                                      IfAIsZeroGoto     AreWeDocked
 150  80C3 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 150  80C4 CA CF 80    >				jp	z,AreWeDocked
 151  80C7 3E 00        HandleBankSelect:       ld      a,$00
 152  80C9                                      MMUSelectScreenA
 152  80C9 ED 92 56    >                     nextreg ScreenBankMMU,		a
 153  80CC CD 00 00     CallCursorRoutine:      call    $0000
 154  80CF              ; need to optimise so not looping over agint for all universe doign ingle updates
 155  80CF              AreWeDocked:
 156  80CF 3A 31 94                             ld      a,(DockedFlag)
 157  80D2 FE FF                                cp      $FF
 158  80D4 CA 8E 81                             jp      z,LoopRepeatPoint
 159  80D7              UpdateUniverse:         MMUSelectUniverseN 0
 159  80D7 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 160  80DB 3A 14 C3     .CheckIfWeAreDocking:   ld      a,(ShipTypeAddr)
 161  80DE FE 02                                cp      ShipTypeStation                     ; is it a station
 162  80E0 20 4B                                jr      nz,.NotDockingCheck
 163  80E2 21 15 C3                             ld      hl,ShipNewBitsAddr                  ; is it angry
 164  80E5 CB 66                                bit     4,(hl)
 165  80E7 20 44                                jr      nz,.NotDockingCheck                 ; if so the doors are shut
 166  80E9 ED 4B 0B C0  .CheckIfInRangeHi:      ld      bc,(UBnKxlo)
 167  80ED 2A 0E C0                             ld      hl,(UBnKylo)
 168  80F0 ED 5B 11 C0                          ld      de,(UBnKzlo)
 169  80F4 78                                   ld      a,b
 170  80F5 B4                                   or      h
 171  80F6 B2                                   or      d
 172  80F7 20 34                                jr      nz,.NotDockingCheck
 173  80F9 79                                   ld      a,c
 174  80FA B5                                   or      l
 175  80FB B3                                   or      e
 176  80FC E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 177  80FE 20 2D                                jr      nz,.NotDockingCheck
 178  8100 3A 25 C0                             ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 179  8103                                      JumpIfALTNusng 214, .NotDockingCheck        ; this is the magic angle to be within 26 degrees +/-
 179  8103 FE D6       >                        cp      214
 179  8105 DA 2D 81    >                        jp		c,.NotDockingCheck
 180  8108 CD 33 82                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 181  810B CB 7F                                bit     7,a                                 ; if its negative
 182  810D 20 1E                                jr      nz,.NotDockingCheck                  ; we are flying away from it
 183  810F                                      JumpIfALTNusng 89, .NotDockingCheck         ; if the axis <89 the we are not in the 22 degree angle
 183  810F FE 59       >                        cp      89
 183  8111 DA 2D 81    >                        jp		c,.NotDockingCheck
 184  8114 3A 1B C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 185  8117 E6 7F                                and     SignMask8Bit
 186  8119                                      JumpIfALTNusng 80, .NotDockingCheck         ; note 80 decimal for 36.6 degrees
 186  8119 FE 50       >                        cp      80
 186  811B DA 2D 81    >                        jp		c,.NotDockingCheck
 187  811E              .GoingIn:
 188  811E                                      MMUSelectLayer1
 188  811E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 189  8122 3E 06                                ld        a,$6
 190  8124 CD 5D E0                             call      l1_set_border
 191  8127 CD BA 81                             call    EnterDockingBay
 192  812A C3 71 81                             jp      MenusLoop
 193  812D CD E1 D9     .NotDockingCheck:       call    ApplyMyRollAndPitch
 194  8130                                     ;  call    DEBUGSETNODES
 195  8130                                      ;       call    DEBUGSETPOS
 196  8130 21 99 82                             ld      hl,TidyCounter
 197  8133 35                                   dec     (hl)
 198  8134 20 05                                jr      nz ,.SkipTidy
 199  8136 3E 10                                ld      a,16
 200  8138 32 99 82                             ld      (TidyCounter),a
 201  813B                                     ; call    TIDY
 202  813B              .SkipTidy:
 203  813B CD B8 DA                             call   ProcessNodes
 204  813E              DrawShipTest:           MMUSelectLayer1
 204  813E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 205  8142 3E DF                                ld     a,$DF
 206  8144 32 EB E8                             ld     (line_gfx_colour),a
 207  8147 3E 00        CheckIfViewUpdate:      ld      a,$00
 208  8149 FE 00                                cp      0
 209  814B 28 24                                jr      z, MenusLoop; This will change as more screens are added TODO
 210  814D CD BC CF     SpecificCodeWhenInView: call   SetAllFacesVisible
 211  8150 CD 05 D4                             call   CullV2				; culling but over aggressive backface assumes all 0 up front TOFIX
 212  8153 CD 8A DB                             call   PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 213  8156                                      MMUSelectLayer2
 213  8156 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 214  815A CD C9 E0                             call   l2_cls
 215  815D                                      MMUSelectUniverseN 0
 215  815D ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 216  8161 CD 0B 90                             call   DrawLines                   ; Need to plot all lines
 217  8164 CD 1E 8D     DrawStars:              call   StarsForward
 218  8167                                      MMUSelectViewFront
 218  8167 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 219  816B CD 46 85                             call   UpdateConsole
 220  816E C3 8E 81                             jp LoopRepeatPoint
 221  8171 2A 7F 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 222  8174 7C                                   ld      a,h
 223  8175 B5                                   or      l
 224  8176 CA 8E 81                             jp      z,LoopRepeatPoint
 225  8179 3E 00        ScreenLoopBank:         ld      a,$0
 226  817B                                      MMUSelectScreenA
 226  817B ED 92 56    >                     nextreg ScreenBankMMU,		a
 227  817E CD 00 00     ScreenLoopJP:           call    $0000
 228  8181 3E 00        SpecialInstrucion:      ld      a,$00
 229  8183 FE 00                                cp      0
 230  8185 28 07                                jr      z, LoopRepeatPoint
 231  8187 FE 01                                cp      1
 232  8189 20 03                                jr      nz, LoopRepeatPoint
 233  818B CD 09 84                             call    LaunchedFromStation
 234  818E              LoopRepeatPoint:
 235  818E 3E 00        DoubleBufferCheck:      ld      a,00
 236  8190                                      IFDEF DOUBLEBUFFER
 237  8190 FE 00                                    cp      0
 238  8192 CA A1 81                                 jp      z,.TestTransition
 239  8195                                          MMUSelectLayer2
 239  8195 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 240  8199 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 241  819C FE 00                                    cp     0
 242  819E C4 DD E0                                 call   nz,l2_flip_buffers
 243  81A1                                      ENDIF
 244  81A1 3A BE 83     .TestTransition:        ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 245  81A4 FE FF                                cp      $FF
 246  81A6 CA 9B 80                             jp      z,MainLoop
 247  81A9 57           .BruteForceChange:      ld      d,a
 248  81AA 1E 10                                ld      e,ScreenMapRow
 249  81AC ED 30                                mul
 250  81AE DD 21 DE 82                          ld      ix,ScreenKeyMap
 251  81B2 DD 19                                add     ix,de                               ; Force screen transition
 252  81B4 CD 4D 84                             call    SetScreenAIX
 253  81B7 C3 9B 80                             jp MainLoop
 254  81BA              ;..................................................................................................................................
 255  81BA              	;call		keyboard_main_loop
 256  81BA
 257  81BA 3E 0D        EnterDockingBay:        ld      a,ScreenDocking
 258  81BC 32 BE 83                             ld      (ScreenTransitionForced),a
 259  81BF C9                                   ret
 260  81C0
 261  81C0 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 262  81C2 CD 0D 92                             call    is_key_pressed
 263  81C5 C0                                   ret     nz
 264  81C6 3A 32 82                             ld      a,(currentDemoShip)
 265  81C9 3C                                   inc     a
 266  81CA FE 2C                                cp      44
 267  81CC 20 01                                jr      nz,.TestOK
 268  81CE AF                                   xor     a
 269  81CF 32 32 82     .TestOK:                ld      (currentDemoShip),a
 270  81D2                                      MMUSelectUniverseN 0
 270  81D2 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 271  81D6 CD 25 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 272  81D9 3A 32 82                             ld      a,(currentDemoShip)
 273  81DC                                      MMUSelectShipModelsA
 273  81DC ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModelsA
 274  81E0 CD 7C E0                             call    CopyShipDataToUBnk
 275  81E3 CD F7 84                             call    SetInitialShipPosition
 276  81E6 C9                                   ret
 277  81E7
 278  81E7 21 00 00     SetPositionBehindUs:    ld      hl,$0000
 279  81EA 22 0B C0                             ld      (UBnKxlo),hl
 280  81ED 21 00 00                             ld      hl,$0000
 281  81F0 22 0E C0                             ld      (UBnKylo),hl
 282  81F3 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 283  81F6 22 11 C0                             ld      (UBnKzlo),hl
 284  81F9 AF                                   xor     a
 285  81FA 32 0D C0                             ld      (UBnKxsgn),a
 286  81FD 32 10 C0                             ld      (UBnKysgn),a
 287  8200 3D                                   dec     a                                   ; make a FF
 288  8201 32 13 C0                             ld      (UBnKzsgn),a
 289  8204 CD AF CC                             call	InitialiseOrientation; for now its facing the wrong way as if we flew out its arse
 290  8207 C9                                   ret
 291  8208
 292  8208 3A 32 94     TestPauseMode:          ld      a,(GamePaused)
 293  820B FE 00                                cp      0
 294  820D 20 12                                jr      nz,.TestForResume
 295  820F 3A 29 94     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 296  8212                                      ReturnIfAGTENusng       ScreenFront
 296  8212 FE 09       >                   cp    ScreenFront
 296  8214 D0          >                   ret	 nc
 297  8215 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 298  8217 CD 0D 92                             call    is_key_pressed
 299  821A C0                                   ret     nz
 300  821B 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 301  821D 32 32 94                             ld      (GamePaused),a
 302  8220 C9                                   ret
 303  8221 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 304  8223 CD 0D 92                             call    is_key_pressed
 305  8226 C0                                   ret     nz
 306  8227 AF           .ResumePressed:         xor     a
 307  8228 32 32 94                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 308  822B C9                                   ret
 309  822C
 310  822C 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 311  822E CD 0D 92                             call    is_key_pressed
 312  8231 C9                                   ret
 313  8232 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 314  8233
 315  8233
 316  8233
 317  8233 21 0B C0     GetStationVectorToWork: ld      hl,UBnKxlo
 318  8236 11 41 94                             ld      de,varVector9ByteWork
 319  8239 ED A0                                ldi
 320  823B ED A0                                ldi
 321  823D ED A0                                ldi
 322  823F ED A0                                ldi
 323  8241 ED A0                                ldi
 324  8243 ED A0                                ldi
 325  8245 ED A0                                ldi
 326  8247 ED A0                                ldi
 327  8249 ED A0                                ldi
 328  824B 2A 41 94     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 329  824E ED 5B 44 94                          ld      de, (varVector9ByteWork+3); Y
 330  8252 ED 4B 47 94                          ld      bc, (varVector9ByteWork+6); Z
 331  8256 7D                                   ld      a,l
 332  8257 B3                                   or      e
 333  8258 B1                                   or      c
 334  8259 F6 01                                or      1
 335  825B DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 336  825D 7C                                   ld      a,h
 337  825E B2                                   or      d
 338  825F B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 339  8260 C5           .MulBy2Loop:            push    bc
 340  8261 DD 45                                ld      b,ixl
 341  8263 CB 20                                sla     b                       ; Shift ixl left
 342  8265 DD 68                                ld      ixl,b
 343  8267 C1                                   pop     bc
 344  8268 CB 17                                rl      a                       ; roll into a
 345  826A 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 346  826C                                      ShiftHLLeft1                    ; Shift Left X
 346  826C CB 25       >			   sla l
 346  826E CB 14       >			   rl  h
 347  8270                                      ShiftDELeft1                    ; Shift Left Y
 347  8270 CB 23       >			   sla e
 347  8272 CB 12       >			   rl  d
 348  8274                                      ShiftBCLeft1                    ; Shift Left Z
 348  8274 CB 21       >			   sla c
 348  8276 CB 10       >			   rl  b
 349  8278 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 350  827A 3A 43 94     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 351  827D CB 3C                                srl     h
 352  827F B4                                   or      h
 353  8280 32 74 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 354  8283 3A 46 94                             ld      a,(varVector9ByteWork+5); y sign
 355  8286 CB 3A                                srl     d
 356  8288 B2                                   or      d
 357  8289 32 75 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 358  828C 3A 49 94                             ld      a,(varVector9ByteWork+8); y sign
 359  828F CB 38                                srl     b
 360  8291 B0                                   or      b
 361  8292 32 76 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 362  8295 CD 0C A5                             call    normaliseXX1596fast
 363  8298 C9                                   ret                             ; will return with a holding Vector Z
 364  8299
 365  8299 00           TidyCounter             DB  0
 366  829A
 367  829A                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 829A
   2+ 829A
   3+ 829A 21 BD 82     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 829D 11 0B C0                             ld      de,UBnKxlo
   5+ 82A0 01 09 00                             ld      bc,9
   6+ 82A3 ED B0                                ldir
   7+ 82A5 21 C6 82                             ld      hl,DEBUGROTMATDATA
   8+ 82A8 11 14 C0                             ld      de,UBnkrotmatSidevX
   9+ 82AB 01 12 00                             ld      bc,6*3
  10+ 82AE ED B0                                ldir
  11+ 82B0 C9                                   ret
  12+ 82B1
  13+ 82B1 21 BD 82     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 82B4 11 0B C0                             ld      de,UBnKxlo
  15+ 82B7 01 06 00                             ld      bc,9 - 3
  16+ 82BA ED B0                                ldir
  17+ 82BC C9                                   ret
  18+ 82BD
  19+ 82BD              ; culltest
  20+ 82BD              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 82BD 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 82C1 00 00 5C 07
  21+ 82C5 00
  22+ 82C6 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 82CA 00 00
  23+ 82CC 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 82D0 00 00
  24+ 82D2 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 82D6 00 E0
  25+ 82D8
  26+ 82D8              ; FAILS due to sharp angle, OK now
  27+ 82D8              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 82D8              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 82D8              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 82D8              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 82D8              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 82D8              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 82D8              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 82D8              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 82D8              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 82D8              ; Looks OK
  37+ 82D8              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 82D8              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 82D8              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 82D8              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 82D8              ;
  42+ 82D8              ; Massive horizontal line
  43+ 82D8              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 82D8              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 82D8              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 82D8              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 82D8              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 82D8              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 82D8              ; Line lost in clipping
  50+ 82D8              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 82D8              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 82D8              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 82D8              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 82D8              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 82D8              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 82D8              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 82D8              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 82D8              ;
  59+ 82D8              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 82D8              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 82D8              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 82D8              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 82D8              ; top left off right issue
  64+ 82D8              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 82D8              ; test middle of screen
  69+ 82D8              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 82D8              ;
  71+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 82D8              ; test middle of screen futher away
  75+ 82D8              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 82D8              ;
  77+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 82D8
  81+ 82D8              ; Test left center clip still warping
  82+ 82D8              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 82D8              ;
  84+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 82D8              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 82D8              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 82D8              ;
  90+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 82D8              ; Test top center clip test 1 - good test many ships fail
  94+ 82D8              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 82D8              ;
  96+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 82D8              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 82D8              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 82D8              ;
 102+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 82D8              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 82D8              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 82D8              ; looks better now may have some clipping issues maybe ship data
 107+ 82D8              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 82D8              ;
 109+ 82D8              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 82D8              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 82D8 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 82DC B0 55
 112+ 82DE              ; Test left top center clip
 113+ 82DE
 114+ 82DE              ; Test right top center clip
 115+ 82DE              ; Test left bottom center clip
 116+ 82DE              ; Test right bottom center clip
 117+ 82DE
 118+ 82DE              ; Tests with no clip
 119+ 82DE              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 82DE              ;
 121+ 82DE              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 82DE              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 82DE              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 82DE              ;
 125+ 82DE              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 82DE              ;
 127+ 82DE              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 82DE              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 82DE
# file closed: ./debugMatrices.asm
 368  82DE
 369  82DE
 370  82DE              ;TODO Optimisation
 371  82DE              ; Need this table to handle differnet events
 372  82DE              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 373  82DE              ; cursor key, joystick press
 374  82DE              ; cursor key, joystick press
 375  82DE              ; non cursor keys presses
 376  82DE              ;
 377  82DE              ; First byte is now docked flag
 378  82DE              ;
 379  82DE              ; Padded to 8 bytes to allow a * 8 for addressing
 380  82DE              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 381  82DE              ; Byte 1   - Screen Id
 382  82DE              ; Byte 2,3 - address of keypress table
 383  82DE              ; Byte 4   - Bank with Display code
 384  82DE              ; Byte 5,6 - Function for display
 385  82DE              ; Byte 7,8 - Main loop update routine
 386  82DE              ; Byte 9   - Draw stars Y/N
 387  82DE              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 388  82DE              ; byte 11  - Double Buffering 0 = no, 1 = yes
 389  82DE              ; byte 12,13  - cursor key input routine
 390  82DE              ; byte 14  - special operation flag = one off routine triggered by code, 01=Launched ship to set up space station behind us
 391  82DE              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 392  82DE              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 393  82DE 00 00 36 91  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 393  82E2 32 FC C3 00
 393  82E6 00 00 00 00
 393  82EA 5A C4 00 00
 394  82EE 00 01 34 91  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $00,$00
 394  82F2 33 43 C1 62
 394  82F6 C2 00 00 00
 394  82FA 05 C3 00 00
 395  82FE 01 02 38 91                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $00,$00
 395  8302 36 43 C3 FA
 395  8306 C3 00 00 00
 395  830A 00 00 00 00
 396  830E 02 03 38 91                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $00,$00
 396  8312 36 43 C3 00
 396  8316 00 00 00 00
 396  831A 00 00 00 00
 397  831E 00 04 3A 91  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $00,$00
 397  8322 3F 1E CF 62
 397  8326 CF 00 00 00
 397  832A 00 00 00 00
 398  832E 00 05 3C 91                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $00,$00
 398  8332 34 F5 C1 00
 398  8336 00 00 00 00
 398  833A 00 00 00 00
 399  833E 00 06 4A 91                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $00,$00
 399  8342 35 F0 C2 00
 399  8346 00 00 00 00
 399  834A 00 00 00 00
 400  834E 01 07 32 91                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $00,$00
 400  8352 40 EA D3 86
 400  8356 D4 00 00 00
 400  835A 00 00 00 00
 401  835E 01 08 2C 91                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 401  8362 41 79 C1 62
 401  8366 C2 00 01 01
 401  836A 00 00 01 00
 402  836E 02 09 02 91  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 402  8372 3E 38 C0 00
 402  8376 00 01 00 01
 402  837A 76 C0 00 00
 403  837E 02 0A 02 91                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 403  8382 3E 38 C0 00
 403  8386 00 01 00 01
 403  838A 76 C0 00 00
 404  838E 02 0B 02 91                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 404  8392 3E 38 C0 00
 404  8396 00 01 00 01
 404  839A 76 C0 00 00
 405  839E 02 0C 02 91                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 405  83A2 3E 38 C0 00
 405  83A6 00 01 00 01
 405  83AA 76 C0 00 00
 406  83AE 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $00,$00
 406  83B2 41 F4 C1 97
 406  83B6 C2 00 01 01
 406  83BA 00 00 00 00
 407  83BE
 408  83BE              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 409  83BE              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 410  83BE              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 411  83BE              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 412  83BE              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 413  83BE              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 414  83BE FF           ScreenTransitionForced  DB $FF
 415  83BF                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 83BF              ; Use bank 0 as source and bank 7 as write target
   2+ 83BF              ResetUniv:
   3+ 83BF                  MODULE ResetUniv
   4+ 83BF              ; Move bank 70 into page 0
   5+ 83BF                  MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   5+ 83BF ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   6+ 83C3 3E 47        	ld		a,BankUNIVDATA1 				 ; we can read bank 0 as if it was rom
   7+ 83C5 06 0C        	ld		b,12
   8+ 83C7              ResetCopyLoop:
   9+ 83C7 C5           	push	bc
  10+ 83C8              	MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
  10+ 83C8 C6 46       >                     add    a,BankUNIVDATA0
  10+ 83CA ED 92 56    >                     nextreg UniverseMMU,       a
  11+ 83CD F5           	push	af
  12+ 83CE 21 00 C0     	ld		hl,UniverseBankAddr
  13+ 83D1 11 00 00     	ld		de,dmaCopySrcAddr
  14+ 83D4 01 43 1C     	ld		bc,UnivBankSize
  15+ 83D7 CD AD 90     	call	memcopy_dma
  16+ 83DA F1           	pop		af
  17+ 83DB C1           	pop		bc
  18+ 83DC 3C           	inc		a
  19+ 83DD 10 E8        	djnz	ResetCopyLoop
  20+ 83DF C9           	ret
  21+ 83E0                  ENDMODULE
  22+ 83E0
  23+ 83E0              ; Use bank 0 as source and bank 7 as write target
  24+ 83E0              ResetGalaxy:
  25+ 83E0                  MODULE ResetGalaxy
  26+ 83E0              ; Move bank 70 into page 0
  27+ 83E0                  MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0
  27+ 83E0 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  28+ 83E4 3E 5C        	ld		a,BankGalaxyData1 			   	 ; we can read bank 0 as if it was rom
  29+ 83E6 06 08        	ld		b,8
  30+ 83E8 0E 01            ld      c,1
  31+ 83EA              ResetCopyLoop:
  32+ 83EA F5           	push	af
  33+ 83EB C5           	push	bc
  34+ 83EC              	MMUSelectGalaxyA    	             ; copy from bank 0 to 71 to 12
  34+ 83EC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  35+ 83EF 21 00 E0     	ld		hl,GalaxyDataAddr
  36+ 83F2 11 00 00     	ld		de,dmaCopySrcAddr
  37+ 83F5 01 CD 1C     	ld		bc,GalaxyBankSize
  38+ 83F8 CD AD 90     	call	memcopy_dma
  39+ 83FB C1           	pop		bc
  40+ 83FC 21 0F E0         ld      hl, galaxy_pg_cnt
  41+ 83FF 79               ld      a,c
  42+ 8400 C6 30            add     a, $30
  43+ 8402 77               ld      (hl),a
  44+ 8403 0C               inc     c
  45+ 8404 F1               pop     af
  46+ 8405 3C           	inc		a
  47+ 8406 10 E2        	djnz	ResetCopyLoop
  48+ 8408 C9           	ret
  49+ 8409                  ENDMODULE
# file closed: ./GameEngine/resetUniverse.asm
 416  8409
 417  8409 CD 7D 97     LaunchedFromStation:    call    FindSpaceStationSlotInA
 418  840C 38 0B                                jr      c,.SpaceStationMissing
 419  840E                                      MMUSelectUniverseA               ; select the space station's slot so we can re-use it
 419  840E C6 46       >                     add    a,BankUNIVDATA0
 419  8410 ED 92 56    >                     nextreg UniverseMMU,       a
 420  8413 CD 4D 97                             call    ClearFreeSlotListSaveA  ;Now neeed to set station behind (also need to check which type first
 421  8416 C3 31 84                             jp      .BuiltStation
 422  8419 3E 0D        .SpaceStationMissing:   ld      a,CoriloisStation
 423  841B CD 00 E0                             call    GetShipModelAddress
 424  841E                                      MMUSelectShipModelA                 ; so we select bank found
 424  841E ED 92 57    >					 nextreg ShipModelMMU,	    a
 425  8421 C5                                   push    bc                                  ; save ship number
 426  8422 CD 97 97                             call    FindNextFreeSlotInA                 ; find a spare slot else hijack 0
 427  8425 30 01                                jr      nc,.FoundFreeSlot
 428  8427 AF           .JackSlot0:             xor     a
 429  8428              .FoundFreeSlot:         MMUSelectUniverseA
 429  8428 C6 46       >                     add    a,BankUNIVDATA0
 429  842A ED 92 56    >                     nextreg UniverseMMU,       a
 430  842D C1                                   pop     bc                                  ; get ship number back
 431  842E CD 7C E0                             call    CopyShipDataToUBnk
 432  8431 CD E7 81     .BuiltStation:          call    SetPositionBehindUs
 433  8434 AF                                   xor     a
 434  8435 32 82 81                             ld      (SpecialInstrucion+1),a         ; we have done the special instruction
 435  8438 C9                                   ret
 436  8439
 437  8439 3A 1F 83     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 438  843C DD 21 1E 83                          ld      ix,ScreenCmdr
 439  8440 C3 4D 84                             jp      SetScreenAIX
 440  8443
 441  8443 3A 6F 83     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 442  8446 DD 21 6E 83                          ld      ix,ScreenKeyFront
 443  844A C3 4D 84                             jp      SetScreenAIX
 444  844D              ; false ret here as we get it free from jp
 445  844D
 446  844D              ;----------------------------------------------------------------------------------------------------------------------------------
 447  844D 32 29 94     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 448  8450 AF                                   xor     a
 449  8451 3D                                   dec     a                               ; set A to FF
 450  8452 32 BE 83                             ld      (ScreenTransitionForced),a      ; In case it was called by a brute force change in an update loop
 451  8455 32 28 94                             ld      (ScreenChanged),a               ; Set screen changed to FF
 452  8458 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 453  845B 32 7A 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 454  845E 32 C8 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 455  8461                                      MMUSelectScreenA
 455  8461 ED 92 56    >                     nextreg ScreenBankMMU,		a
 456  8464 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 457  8467 32 A1 84                             ld      (ScreenUpdateAddr+1),a
 458  846A DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 459  846D 32 A2 84                             ld      (ScreenUpdateAddr+2),a
 460  8470 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 461  8473 32 7F 81                             ld      (ScreenLoopJP+1),a
 462  8476 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 463  8479 32 80 81                             ld      (ScreenLoopJP+2),a
 464  847C DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 465  847F 32 48 81                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 466  8482 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 467  8485 32 A5 80                             ld      (ScreenTransBlock+1),a          ; Set flag to block transitions as needed e.g. launch screen
 468  8488 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 469  848B 32 8F 81                             ld      (DoubleBufferCheck+1),a
 470  848E DD 7E 0C                             ld      a,(ix+12)
 471  8491 32 CD 80                             ld      (CallCursorRoutine+1),a
 472  8494 DD 7E 0D                             ld      a,(ix+13)
 473  8497 32 CE 80                             ld      (CallCursorRoutine+2),a
 474  849A DD 7E 0E                             ld      a,(ix+14)
 475  849D 32 82 81                             ld      (SpecialInstrucion+1),a
 476  84A0
 477  84A0 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 478  84A3              ;----------------------------------------------------------------------------------------------------------------------------------
 479  84A3 3A 29 94     ViewKeyTest:            ld      a,(ScreenIndex)
 480  84A6 4F                                   ld      c,a
 481  84A7 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 482  84A9 DD 21 DE 82                          ld      ix,ScreenKeyMap
 483  84AD DD 7E 00     ViewScanLoop:           ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 484  84B0              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 485  84B0 FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 486  84B2 28 3B                                jr      z,NotReadNextKey                ;
 487  84B4 FE 00                                cp      0                               ; if itr a always read skip docking check
 488  84B6 28 14                                jr      z,.NoDocCheck
 489  84B8 57           .DocCheck:              ld      d,a
 490  84B9 3A 31 94                             ld      a,(DockedFlag)
 491  84BC FE 00                                cp      0                               ; if we are docked
 492  84BE 28 07                                jr      z,.NotDockedCheck
 493  84C0 7A           .DockedCheck:           ld      a,d
 494  84C1 FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 495  84C3 20 2A                                jr      nz,NotReadNextKey
 496  84C5 18 05                                jr      .NoDocCheck
 497  84C7 7A           .NotDockedCheck:        ld      a,d
 498  84C8 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 499  84CA 20 23                                jr      nz,NotReadNextKey
 500  84CC DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 501  84CF B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 502  84D0 5F                                   ld      e,a
 503  84D1 28 1C                                jr      z,NotReadNextKey
 504  84D3 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 505  84D6 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 506  84D8 28 15                                jr      z,NotReadNextKey
 507  84DA 32 E4 84                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 508  84DD DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 509  84E0 32 E5 84                             ld      (ReadKeyAddr+2),a
 510  84E3 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 511  84E6 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 512  84E7                                      IfAIsZeroGoto NotReadNextKey
 512  84E7 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 512  84E8 CA EF 84    >				jp	z,NotReadNextKey
 513  84EB 7B           .ValidScreenChange:     ld      a,e
 514  84EC C3 4D 84                             jp      SetScreenAIX
 515  84EF              ;--- CODE WILL NOT FALL TO HERE ---
 516  84EF 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 517  84F2 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 518  84F4 10 B7                                djnz    ViewScanLoop
 519  84F6 C9                                   ret
 520  84F7
 521  84F7 21 00 00     SetInitialShipPosition: ld      hl,$0000
 522  84FA 22 0B C0                             ld      (UBnKxlo),hl
 523  84FD 21 00 00                             ld      hl,$0000
 524  8500 22 0E C0                             ld      (UBnKylo),hl
 525  8503 21 B4 08                             ld      hl,$08B4
 526  8506 22 11 C0                             ld      (UBnKzlo),hl
 527  8509 AF                                   xor     a
 528  850A 32 0D C0                             ld      (UBnKxsgn),a
 529  850D 32 10 C0                             ld      (UBnKysgn),a
 530  8510 32 13 C0                             ld      (UBnKzsgn),a
 531  8513              ;    call    Reset TODO
 532  8513 CD AF CC                             call	InitialiseOrientation            ;#00;
 533  8516 3E 01                                ld      a,1
 534  8518 32 1C 94                             ld      (DELTA),a
 535  851B 21 04 00                             ld      hl,4
 536  851E 22 1D 94                             ld      (DELTA4),hl
 537  8521 C9                                   ret
 538  8522
 539  8522 1E 10        Draw3Lines:             ld      e,16
 540  8524 C5 D5                                push    bc,,de
 541  8526                                      MMUSelectLayer2
 541  8526 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 542  852A CD 62 E2                             call    l2_draw_horz_line
 543  852D D1 C1                                pop     bc,,de
 544  852F 05                                   dec     b
 545  8530 C5 D5                                push    bc,,de
 546  8532 1E 14                                ld      e,20
 547  8534                                      MMUSelectLayer2
 547  8534 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 548  8538 CD 62 E2                             call    l2_draw_horz_line
 549  853B D1 C1                                pop     bc,,de
 550  853D 05                                   dec     b
 551  853E                                      MMUSelectLayer2
 551  853E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 552  8542 CD 62 E2                             call    l2_draw_horz_line
 553  8545 C9                                   ret
 554  8546
 555  8546 3A 1C 94     UpdateConsole:          ld      a,(DELTA)
 556  8549 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 557  854B 28 0C                                jr      z,.UpdateRoll
 558  854D 01 D1 84                             ld      bc,SpeedoStart
 559  8550 21 09 97                             ld      hl,SpeedoMapping
 560  8553 ED 31                                add     hl,a
 561  8555 56                                   ld      d,(hl)
 562  8556 CD 22 85                             call    Draw3Lines
 563  8559 3A DF 93     .UpdateRoll:            ld      a,(ALP1)
 564  855C FE 00                                cp      0
 565  855E 28 30                                jr      z,.UpdatePitch
 566  8560 21 E0 8A                             ld      hl,RollMiddle
 567  8563 3A E0 93                             ld      a,(ALP2)
 568  8566 FE 00                                cp      0
 569  8568 28 18                                jr      z,.PosRoll
 570  856A 16 00        .NegRoll:               ld      d,0
 571  856C 3A DF 93                             ld      a,(ALP1)
 572  856F CB 27                                sla     a
 573  8571 5F                                   ld      e,a
 574  8572 B7                                   or      a
 575  8573 ED 52                                sbc     hl,de
 576  8575 44 4D                                ld      bc,hl
 577  8577 3E E1                                ld      a,DialMiddleXPos
 578  8579 91                                   sub     c
 579  857A 57                                   ld      d,a
 580  857B 1E FF                                ld      e,$FF
 581  857D CD 22 85                             call    Draw3Lines
 582  8580 18 0E                                jr      .UpdatePitch
 583  8582 01 E0 8A     .PosRoll:               ld      bc,RollMiddle
 584  8585 3A DF 93                             ld      a,(ALP1)
 585  8588 CB 27                                sla     a
 586  858A 57                                   ld      d,a
 587  858B 1E FF                                ld      e,$FF
 588  858D CD 22 85                             call    Draw3Lines
 589  8590 3A D2 93     .UpdatePitch:           ld      a,(BET1)
 590  8593 FE 00                                cp      0
 591  8595 28 30                                jr      z,.DoneConsole
 592  8597 21 E0 92                             ld      hl,PitchMiddle
 593  859A 3A D3 93                             ld      a,(BET2)
 594  859D FE 00                                cp      0
 595  859F 28 18                                jr      z,.PosPtich
 596  85A1 16 00        .NegPitch:              ld      d,0
 597  85A3 3A D2 93                             ld      a,(BET1)
 598  85A6 CB 27                                sla     a
 599  85A8 5F                                   ld      e,a
 600  85A9 B7                                   or      a
 601  85AA ED 52                                sbc     hl,de
 602  85AC 44 4D                                ld      bc,hl
 603  85AE 3E E1                                ld      a,DialMiddleXPos
 604  85B0 91                                   sub     c
 605  85B1 57                                   ld      d,a
 606  85B2 1E FF                                ld      e,$FF
 607  85B4 CD 22 85                             call    Draw3Lines
 608  85B7 18 0E                                jr      .DoneConsole
 609  85B9 01 E0 92     .PosPtich:              ld      bc,PitchMiddle
 610  85BC 3A D2 93                             ld      a,(BET1)
 611  85BF CB 27                                sla     a
 612  85C1 57                                   ld      d,a
 613  85C2 1E FF                                ld      e,$FF
 614  85C4 CD 22 85                             call    Draw3Lines
 615  85C7 CD 7A 86     .DoneConsole:           call    UpdateRadar
 616  85CA C9                                   ret
 617  85CB
 618  85CB              ScannerX                equ 128
 619  85CB              ScannerY                equ 171
 620  85CB              ScannerBottom           equ 190
 621  85CB              ScannerTypeMissle       equ 2
 622  85CB              ScannerXRangeOffset     equ $35
 623  85CB              ScannerCenter           equ 127
 624  85CB
 625  85CB              ScannerDefault          equ 0
 626  85CB              ScannerMissile          equ 2
 627  85CB              ScannerStation          equ 4
 628  85CB              ScannerEnemy            equ 6
 629  85CB
 630  85CB 10 1C 90 FC  ScannerColourTable:     DB  16,28,144,252,18,31,128,224
 630  85CF 12 1F 80 E0
 631  85D3
 632  85D3              GetShipColor:           MACRO
 633  85D3 ~                                    ld      a,(ShipTypeAddr)
 634  85D3 ~                                    sla     a                            ; as its byte pairs * 2
 635  85D3 ~                                    ld      hl,ScannerColourTable
 636  85D3 ~                                    add     hl,a
 637  85D3 ~                                    ld      a,(hl)
 638  85D3                                      ENDM
 639  85D3              GetShipColorBright:     MACRO
 640  85D3 ~                                    ld      a,(ShipTypeAddr)
 641  85D3 ~                                    sla     a                            ; as its byte pairs * 2
 642  85D3 ~                                    inc     a
 643  85D3 ~                                    ld      hl,ScannerColourTable
 644  85D3 ~                                    add     hl,a
 645  85D3 ~                                    ld      a,(hl)
 646  85D3                                      ENDM
 647  85D3
 648  85D3              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 649  85D3              UpdateScannerShip:
 650  85D3 3A 2A C0                             ld      a,(UBnkexplDsp)             ; if bit 4 is clear then ship should not be drawn
 651  85D6 CB 67                                bit     4,a                         ; .
 652  85D8                                      ;DEBUG ret     z                           ; .
 653  85D8 3A 14 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 654  85DB CB 7F                                bit     7,a
 655  85DD C0                                   ret     nz
 656  85DE              ; DEBUG Add in station types later
 657  85DE 2A 11 C0     .NotMissile:            ld      hl,(UBnKzlo)
 658  85E1 ED 5B 0B C0                          ld      de,(UBnKxlo)
 659  85E5 ED 4B 0E C0                          ld      bc,(UBnKylo)
 660  85E9 7C                                   ld      a,h
 661  85EA B2                                   or      d
 662  85EB B0                                   or      b
 663  85EC E6 C0                                and     %11000000
 664  85EE C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 665  85EF 3A 0D C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 666  85F2 CB 7F                                bit     7,a
 667  85F4 28 04                                jr      z,.absXHi
 668  85F6                                      NegD
 668  85F6 7A          >                ld      a,d
 668  85F7 ED 44       >                neg
 668  85F9 57          >                ld      d,a
 669  85FA 7A           .absXHi:                ld      a,d
 670  85FB C6 80                                add     ScannerX
 671  85FD DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 672  85FF CB 3C        .ProcessZCoord:         srl     h
 673  8601 CB 3C                                srl     h
 674  8603 3A 13 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 675  8606 CB 7F                                bit     7,a
 676  8608 28 04                                jr      z,.absZHi
 677  860A                                      NegH
 677  860A 7C          >                ld      a,h
 677  860B ED 44       >                neg
 677  860D 67          >                ld      h,a
 678  860E 3E AB        .absZHi:                ld      a,ScannerY
 679  8610 94                                   sub     h
 680  8611 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 681  8613 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 682  8615 20 19                                jr      nz,.StickHasLength
 683  8617 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 684  8619 FD 6F                                ld      iyl,a
 685  861B DD 7D                                ld      a,ixl
 686  861D                                      GetShipColorBright
 686  861D 3A 14 C3    >                        ld      a,(ShipTypeAddr)
 686  8620 CB 27       >                        sla     a                            ; as its byte pairs * 2
 686  8622 3C          >                        inc     a
 686  8623 21 CB 85    >                        ld      hl,ScannerColourTable
 686  8626 ED 31       >                        add     hl,a
 686  8628 7E          >                        ld      a,(hl)
 687  8629                                      MMUSelectLayer2
 687  8629 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 688  862D C3 67 86                             jp      .NoStick
 689  8630 3A 10 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 690  8633 CB 7F                                bit     7,a
 691  8635 28 04                                jr      z,.absYHi
 692  8637                                      NegB
 692  8637 78          >                ld      a,b
 692  8638 ED 44       >                neg
 692  863A 47          >                ld      b,a
 693  863B FD 7C        .absYHi:                ld      a,iyh
 694  863D 90           .SetStickPos:           sub     b
 695  863E                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 695  863E FE BE       >                        cp      ScannerBottom
 695  8640 DA 45 86    >                        jp		c,.StickOnScreen
 696  8643 3E BE                                ld      a,ScannerBottom
 697  8645 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 698  8647                                      GetShipColor
 698  8647 3A 14 C3    >                        ld      a,(ShipTypeAddr)
 698  864A CB 27       >                        sla     a                            ; as its byte pairs * 2
 698  864C 21 CB 85    >                        ld      hl,ScannerColourTable
 698  864F ED 31       >                        add     hl,a
 698  8651 7E          >                        ld      a,(hl)
 699  8652 DD 6F                                ld      ixl,a
 700  8654 FD 44                                ld      b,iyh                       ; from row
 701  8656 DD 4C                                ld      c,ixh                       ; from col
 702  8658 FD 55                                ld      d,iyl                       ; to row
 703  865A DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 704  865C E5                                   push    hl
 705  865D                                      MMUSelectLayer2
 705  865D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 706  8661 CD 0D E3                             call    l2_draw_vert_line_to
 707  8664 E1                                   pop     hl
 708  8665 23                                   inc     hl
 709  8666 7E                                   ld      a,(hl)
 710  8667 FD 45        .NoStick:               ld      b,iyl                       ; row
 711  8669 DD 4C                                ld      c,ixh                       ; col
 712  866B F5                                   push    af
 713  866C CD FF E0                             call    l2_plot_pixel
 714  866F F1                                   pop     af
 715  8670 FD 45                                ld      b,iyl
 716  8672 DD 4C                                ld      c,ixh
 717  8674 0C                                   inc     c
 718  8675 CD FF E0                             call    l2_plot_pixel
 719  8678 C9                                   ret
 720  8679
 721  8679
 722  8679
 723  8679              ;.absXhi:
 724  8679              ;                        ld      a,ScannerX
 725  8679              ;                        JumpOnBitSet d,7,ScannerNegX
 726  8679              ;                        add     a,e
 727  8679              ;                        jp      ScannerZCoord
 728  8679              ;ScannerNegX:            sub     e
 729  8679              ;ScannerZCoord:          ld      e,a
 730  8679              ;                        srl     c
 731  8679              ;                        srl     c
 732  8679              ;                        ld      a,ScannerY
 733  8679              ;                        JumpOnBitSet b,7,ScannerNegZ
 734  8679              ;                        sub     c
 735  8679              ;                        jp      ScannerYCoord
 736  8679              ;ScannerNegZ:            add     a,c
 737  8679              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 738  8679              ;                        JumpOnBitSet h,7,ScannerStickDown
 739  8679              ;                        sub     l                       ; a already holds actual Y
 740  8679              ;                        JumpIfAGTENusng 128,ScannerHeightDone
 741  8679              ;                        ld      a,128
 742  8679              ;                        jp      ScannerHeightDone
 743  8679              ;ScannerStickDown:       add     a,l
 744  8679              ;                        JumpIfAGTENusng 191,ScannerHeightDone
 745  8679              ;                        ld      a,191
 746  8679              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 747  8679              ;                        ld      b,d
 748  8679              ;                        ld      d,a
 749  8679              ;                        cp      b
 750  8679              ;                        jp      z,Scanner0Height
 751  8679              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
 752  8679              ;                        push    bc
 753  8679              ;                        push    de
 754  8679              ;                        MMUSelectLayer2
 755  8679              ;                        call    l2_draw_vert_line_to
 756  8679              ;                        pop     de
 757  8679              ;                        pop     bc
 758  8679              ;Scanner0Height:         ld      b,d
 759  8679              ;                       push    bc
 760  8679              ;                       ld      a,255
 761  8679              ;                       MMUSelectLayer2
 762  8679              ;                       call    l2_plot_pixel
 763  8679              ;                       pop     bc
 764  8679              ;                       inc     c
 765  8679              ;                       ld      a,255
 766  8679              ;                       MMUSelectLayer2
 767  8679              ;                       call    l2_plot_pixel
 768  8679 C9                                   ret
 769  867A
 770  867A              UpdateRadar:            MMUSelectUniverseN 0                          ; load up register into universe bank
 770  867A ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 771  867E CD D3 85                             call    UpdateScannerShip
 772  8681 C9                                   ret
 773  8682
 774  8682 AF           SeedGalaxy0:            xor     a
 775  8683                                      MMUSelectGalaxyA
 775  8683 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 776  8686 DD 21 16 E0                          ld      ix,galaxy_data
 777  868A AF                                   xor		a
 778  868B 32 25 94                             ld		(XSAV),a
 779  868E CD 13 98                             call    copy_galaxy_to_system
 780  8691 DD E5        SeedGalaxy0Loop:        push    ix
 781  8693 D1                                   pop     de
 782  8694 21 0C 94                             ld      hl,SystemSeed
 783  8697 CD 19 98                             call    copy_seed
 784  869A DD E5                                push    ix
 785  869C E1                                   pop     hl
 786  869D ED 34 08 00                          add     hl,8
 787  86A1 E5                                   push    hl
 788  86A2 DD E1                                pop     ix
 789  86A4 CD 4E 98                             call    next_system_seed
 790  86A7 3A 25 94                             ld		a,(XSAV)
 791  86AA 3D                                   dec		a
 792  86AB FE 00                                cp		0
 793  86AD C8                                   ret		z
 794  86AE 32 25 94                             ld		(XSAV),a
 795  86B1 20 DE                                jr      nz,SeedGalaxy0Loop
 796  86B3 C9                                   ret
 797  86B4
 798  86B4
 799  86B4
 800  86B4
 801  86B4                  include "./ModelRender/testdrawing.asm"
# file opened: ./ModelRender/testdrawing.asm
   1+ 86B4
   2+ 86B4              ; Test of render
   3+ 86B4              ;  Generate a memory bank for a ship using univ_ship_data to create a block in bank 6
   4+ 86B4              ;  need to clear page 70
   5+ 86B4              ;  swap in to bank 7
   6+ 86B4              ;  use UBnKxlo as INWK 0 (we will add an equ so that its moved over)
   7+ 86B4              ;  x cobraMk3 data to map data
   8+ 86B4              ;  Use ShipModelTable table indexed by cobraMk3 ship number (CobraTablePointer)
   9+ 86B4              ;  Pull ship model table into bank 6
  10+ 86B4              ;  use dma transfer to copy data from bank 6 to bank 7
  11+ 86B4              ;
  12+ 86B4              ScaleRotationMatrix197:
  13+ 86B4 06 09        	ld		b,9
  14+ 86B6 21 2F C0     	ld		hl,UBnkTransmatSidev
  15+ 86B9              ScaleRotationLoop:
  16+ 86B9 7E           	ld		a,(hl)
  17+ 86BA 5F           	ld		e,a
  18+ 86BB 23           	inc		hl                  ; move to hi byte
  19+ 86BC 7E           	ld		a,(hl)
  20+ 86BD 57           	ld		d,a
  21+ 86BE E6 80            and     SignOnly8Bit        ; strip out sign bit
  22+ 86C0 DD 6F        	ld		ixl,a				; retain for sign bit
  23+ 86C2              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2
  23+ 86C2 CB 23       >			   sla e
  23+ 86C4 CB 12       >			   rl  d
  24+ 86C6 7A               ld      a,d
  25+ 86C7 0E C5        	ld		c,ConstNorm
  26+ 86C9 7A           	ld		a,d					; a = D Hi* 2
  27+ 86CA C5           	push	bc
  28+ 86CB E5           	push	hl
  29+ 86CC CD 1A A3     	call	DIV16Amul256dCUNDOC	; result in BC
  30+ 86CF E1           	pop		hl
  31+ 86D0 78           	ld		a,b
  32+ 86D1 DD B5            or      ixl                 ; bring back sign bit
  33+ 86D3 77               ld      (hl),a
  34+ 86D4 2B               dec     hl
  35+ 86D5 71               ld      (hl),c
  36+ 86D6 23               inc     hl
  37+ 86D7 C1           	pop		bc
  38+ 86D8 23               inc     hl                  ; no to next vertex value
  39+ 86D9 10 DE        	djnz	ScaleRotationLoop
  40+ 86DB C9           	ret
  41+ 86DC
  42+ 86DC                                      include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ././Maths/Utilities/ScaleXX16Matrix197.asm
   1++86DC              ScaleXX16Matrix197:
   2++86DC 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
   3++86DE 0E C5        	ld		c,ConstNorm         ; c = 197
   4++86E0 21 2F C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5++86E3              .ScaleXX16Loop:
   6++86E3 7E           	ld		a,(hl)              ; set DE = matrix value
   7++86E4 5F           	ld		e,a                 ;
   8++86E5 23           	inc		hl                  ;
   9++86E6 7E           	ld		a,(hl)              ;
  10++86E7 57           	ld		d,a                 ;
  11++86E8 E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12++86EA DD 6F        	ld		ixl,a				; retain for sign bit
  13++86EC              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13++86EC CB 23       >			   sla e
  13++86EE CB 12       >			   rl  d
  14++86F0 7A               ld      a,d                 ; a = high byte after x 2
  15++86F1 C5           	push	bc                  ; save BC  counter and constant 197
  16++86F2 E5           	push	hl                  ; save HL
  17++86F3 CD 1A A3     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  18++86F6 E1           	pop		hl
  19++86F7 2B               dec     hl                  ; move back to low byte
  20++86F8 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  21++86F9 23               inc     hl                  ; move back to high byte
  22++86FA              ;    ld      a,(hl)
  23++86FA              ;    and     $80
  24++86FA DD 7D            ld      a,ixl
  25++86FC 77               ld      (hl),a              ; write back just sign bit
  26++86FD C1           	pop		bc                  ; retrieve both counter and constant 197
  27++86FE 23               inc     hl                  ; no to next vertex value
  28++86FF 10 E2        	djnz	.ScaleXX16Loop
  29++8701 C9           	ret
  30++8702
# file closed: ././Maths/Utilities/ScaleXX16Matrix197.asm
  43+ 8702              GetXX18Scale:
  44+ 8702 3A 10 C3         ld      a,(QAddr)
  45+ 8705 DD 6F            ld      ixl,a                 ; save Scale in C
  46+ 8707 ED 4B 68 C0      ld      bc,(UBnkDrawCam0xLo)
  47+ 870B ED 5B 6B C0      ld      de,(UBnkDrawCam0yLo)
  48+ 870F 2A 6E C0         ld      hl,(UBnkDrawCam0zLo)
  49+ 8712              ScalePos:
  50+ 8712 78               ld      a,b
  51+ 8713 B2               or      d
  52+ 8714 B4               or      h
  53+ 8715 CA 29 87         jp      z,ScalePosDone
  54+ 8718 DD 2C            inc     ixl
  55+ 871A                  ShiftBCRight1
  55+ 871A CB 38       >			   srl b
  55+ 871C CB 19       >			   rr  c
  56+ 871E                  ShiftDERight1
  56+ 871E CB 3A       >			   srl d
  56+ 8720 CB 1B       >			   rr  e
  57+ 8722                  ShiftHLRight1
  57+ 8722 CB 3C       >			   srl h
  57+ 8724 CB 1D       >			   rr  l
  58+ 8726 C3 12 87         jp      ScalePos
  59+ 8729              ScalePosDone:
  60+ 8729 DD 7D            ld      a,ixl
  61+ 872B 32 27 94         ld      (XX17),a
  62+ 872E C9               ret
  63+ 872F
  64+ 872F
  65+ 872F              ScaleOrientationXX16:
  66+ 872F              ScaleRotationMatrix:
  67+ 872F                  MODULE  ScaleRotationMatrix
  68+ 872F 06 09        	ld		b,9
  69+ 8731 21 47 C0     	ld		hl,UbnkTransInvRow0x0
  70+ 8734 3A 27 94     	ld		a,(XX17)
  71+ 8737 FE 00        	cp		0
  72+ 8739 C8           	ret		z									; no mulitplier then bail out early
  73+ 873A DD 6F        	ld		ixl,a								; master copy of 2^multiplier
  74+ 873C              ScaleRotationLoop:
  75+ 873C 5E           	ld		e,(hl)
  76+ 873D 23           	inc		hl
  77+ 873E 56           	ld		d,(hl)
  78+ 873F 7A           	ld		a,d
  79+ 8740 E6 80        	and		$80
  80+ 8742 DD 67        	ld		ixh,a								; make a copy for sign purposes
  81+ 8744 7A           	ld		a,d									; we need it back now to strip sign
  82+ 8745 E6 7F        	and		SignMask8Bit
  83+ 8747 57           	ld		d,a
  84+ 8748 DD 4D        	ld		c,ixl								; get master copy of multiplier
  85+ 874A              ScaleLoop:
  86+ 874A              	ShiftDELeft1
  86+ 874A CB 23       >			   sla e
  86+ 874C CB 12       >			   rl  d
  87+ 874E 0D           	dec		c
  88+ 874F 20 F9        	jr		nz,ScaleLoop						; loop until 0
  89+ 8751              .NoMultiply:
  90+ 8751 7A           	ld		a,d
  91+ 8752 DD B4        	or		ixh									; bring sign bit back in to a and
  92+ 8754 77           	ld		(hl),a								; we don;t need to go though d reg as an optimisation
  93+ 8755 2B           	dec		hl
  94+ 8756 73           	ld		(hl),e								; written back DE now
  95+ 8757 23           	inc		hl
  96+ 8758 23           	inc		hl									; on to next byte now
  97+ 8759 10 E1        	djnz	ScaleRotationLoop
  98+ 875B C9           	ret
  99+ 875C                  ENDMODULE
 100+ 875C
 101+ 875C              ScaleNodeTo8Bit:								; TODO make signed
 102+ 875C ED 4B 78 C0  	ld			bc,(UBnkZScaled)
 103+ 8760 2A 74 C0     	ld			hl,(UBnkXScaled)
 104+ 8763 ED 5B 76 C0  	ld			de,(UBnkYScaled)
 105+ 8767              SetABSbc:
 106+ 8767 78           	ld			a,b
 107+ 8768 DD 67        	ld			ixh,a
 108+ 876A E6 7F        	and			SignMask8Bit
 109+ 876C 47           	ld			b,a									; bc = ABS bc
 110+ 876D              SetABShl:
 111+ 876D 7C           	ld			a,h
 112+ 876E DD 6F        	ld			ixl,a
 113+ 8770 E6 7F        	and			SignMask8Bit
 114+ 8772 67           	ld			h,a									; hl = ABS hl
 115+ 8773              SetABSde:
 116+ 8773 7A           	ld			a,d
 117+ 8774 FD 67        	ld			iyh,a
 118+ 8776 E6 7F        	and			SignMask8Bit
 119+ 8778 57           	ld			d,a									; de = ABS de
 120+ 8779              ScaleNodeTo8BitLoop:
 121+ 8779 78               ld          a,b		                            ; U	\ z hi
 122+ 877A B4           	or			h                                   ; XX15+1	\ x hi
 123+ 877B B2           	or			d                                   ; XX15+4	\ y hi
 124+ 877C 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 125+ 877E                  ShiftHLRight1
 125+ 877E CB 3C       >			   srl h
 125+ 8780 CB 1D       >			   rr  l
 126+ 8782                  ShiftDERight1
 126+ 8782 CB 3A       >			   srl d
 126+ 8784 CB 1B       >			   rr  e
 127+ 8786              	ShiftBCRight1
 127+ 8786 CB 38       >			   srl b
 127+ 8788 CB 19       >			   rr  c
 128+ 878A C3 79 87         jp          ScaleNodeTo8BitLoop
 129+ 878D              ScaleNodeDone:										; now we have scaled values we have to deal with sign
 130+ 878D DD 7C        	ld			a,ixh								; get sign bit and or with b
 131+ 878F E6 80        	and			SignOnly8Bit
 132+ 8791 B0           	or			b
 133+ 8792 47           	ld			b,a
 134+ 8793              SignforHL:
 135+ 8793 DD 7D        	ld			a,ixl								; get sign bit and or with b
 136+ 8795 E6 80        	and			SignOnly8Bit
 137+ 8797 B4           	or			h
 138+ 8798 67           	ld			h,a
 139+ 8799              SignforDE:
 140+ 8799 FD 7C        	ld			a,iyh								; get sign bit and or with b
 141+ 879B E6 80        	and			SignOnly8Bit
 142+ 879D B2           	or			d
 143+ 879E 57           	ld			d,a
 144+ 879F              SignsDoneSaveResult:
 145+ 879F ED 43 78 C0  	ld			(UBnkZScaled),bc
 146+ 87A3 22 74 C0     	ld			(UBnkXScaled),hl
 147+ 87A6 ED 53 76 C0  	ld			(UBnkYScaled),de
 148+ 87AA 78           	ld			a,b
 149+ 87AB 32 1F 94     	ld			(varU),a
 150+ 87AE 79           	ld			a,c
 151+ 87AF 32 40 94     	ld			(varT),a
 152+ 87B2 C9           	ret
 153+ 87B3
 154+ 87B3 00 00        varR16			DW	0
 155+ 87B5
 156+ 87B5              TestProjectNodeToScreen:
 157+ 87B5 ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 158+ 87B9 79           	ld			a,c                                 ;  so no need for a negative check
 159+ 87BA 32 20 94     	ld			(varQ),a		                    ; VarQ = z
 160+ 87BD 3A 74 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
 161+ 87C0 CD 1A A3     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 162+ 87C3              ;	ld			(varR16),bc							; store result in R for now TODO move to say D reg
 163+ 87C3 3A 75 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 164+ 87C6                  JumpOnBitSet a,7,TestNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 164+ 87C6 CB 7F       >                        bit 	7,a
 164+ 87C8 C2 D3 87    >                        jp      nz,TestNegativeXPoint
 165+ 87CB              TestPositiveXPoint:									; x was positive result
 166+ 87CB              ;	ld			bc,(varR16)							; calculated X positision
 167+ 87CB 2E 80            ld          l,ScreenCenterX						;
 168+ 87CD 26 00            ld          h,0
 169+ 87CF 09               add         hl,bc								; hl = Screen Centre + X
 170+ 87D0 C3 DA 87         jp          TestStoreXPoint
 171+ 87D3              TestNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 172+ 87D3              ;	ld			bc,(varR16
 173+ 87D3 2E 80            ld          l,ScreenCenterX
 174+ 87D5 26 00            ld          h,0
 175+ 87D7              ;	ld			c,a
 176+ 87D7              ;    ld          b,0
 177+ 87D7                  ClearCarryFlag
 177+ 87D7 B7          >                        or a
 178+ 87D8 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 179+ 87DA              TestStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 180+ 87DA EB               ex          de,hl
 181+ 87DB FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 182+ 87DE FD 72 01         ld          (iy+1),d                            ; Update X Point
 183+ 87E1              TestProcessYPoint:
 184+ 87E1 ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
 185+ 87E5 79           	ld			a,c
 186+ 87E6 32 20 94     	ld			(varQ),a
 187+ 87E9              ;    ldCopyByte  varT,varQ                          ; T =>  Q	\ zdist lo
 188+ 87E9 3A 76 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
 189+ 87EC CD 1A A3     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
 190+ 87EF              ;	ld			a,c
 191+ 87EF              	;ld			(varR),a
 192+ 87EF 3A 77 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 193+ 87F2                  JumpOnBitSet a,7,TestNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 193+ 87F2 CB 7F       >                        bit 	7,a
 193+ 87F4 C2 FF 87    >                        jp      nz,TestNegativeYPoint
 194+ 87F7              TestPositiveYPoint:									; Y is positive so above the centre line
 195+ 87F7              ;	ld			a,(varR)							; in fact this code is already 16 bit aware
 196+ 87F7 2E 60            ld          l,ScreenCenterY
 197+ 87F9              ;	ld			c,a									; TODO DEBUG just added for testing to force 8 bit
 198+ 87F9              ;	ld			b,0
 199+ 87F9                  ClearCarryFlag
 199+ 87F9 B7          >                        or a
 200+ 87FA ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 201+ 87FC C3 04 88         jp          TestStoreYPoint
 202+ 87FF              TestNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 203+ 87FF              ;	ld			a,(varR)
 204+ 87FF 2E 60            ld          l,ScreenCenterY
 205+ 8801 26 00            ld          h,0
 206+ 8803 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 207+ 8804              TestStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 208+ 8804 EB               ex          de,hl
 209+ 8805 FD 73 02         ld          (iy+2),e                            ; Update Y Point
 210+ 8808 FD 72 03         ld          (iy+3),d                            ; Update Y Point
 211+ 880B C9               ret
 212+ 880C
 213+ 880C                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1++880C 21 7A C0     CopyXX12ToXX15:         ld      hl,XX12
   2++880F 11 74 C0                             ld      de,XX15
   3++8812 01 06 00                             ld      bc,6
   4++8815 ED B0                                ldir
   5++8817 C9                                   ret
   6++8818
   7++8818 21 7A C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8++881B 11 80 C0                             ld      de,XX12Save
   9++881E 01 06 00                             ld      bc,6
  10++8821 ED B0                                ldir
  11++8823 C9                                   ret
  12++8824
  13++8824 21 80 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14++8827 11 7A C0                             ld      de,XX12
  15++882A 01 06 00                             ld      bc,6
  16++882D ED B0                                ldir
  17++882F C9                                   ret
  18++8830
  19++8830 21 7A C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20++8833 11 86 C0                             ld      de,XX12Save2
  21++8836 01 06 00                             ld      bc,6
  22++8839 ED B0                                ldir
  23++883B C9                                   ret
  24++883C
  25++883C 21 86 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26++883F 11 7A C0                             ld      de,XX12
  27++8842 01 06 00                             ld      bc,6
  28++8845 ED B0                                ldir
  29++8847 C9                                   ret
  30++8848
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 214+ 8848
 215+ 8848                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1++8848 21 74 C0     CopyXX15ToXX12:         ld		hl,XX15
   2++884B 11 7A C0                             ld      de,XX12
   3++884E 01 06 00                             ld      bc,6
   4++8851 ED B0                                ldir
   5++8853 C9                                   ret
   6++8854
   7++8854
   8++8854
   9++8854 21 74 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10++8857 11 8F C0                             ld      de,XX15Save
  11++885A 01 06 00                             ld      bc,6
  12++885D ED B0                                ldir
  13++885F C9                                   ret
  14++8860
  15++8860 21 8F C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16++8863 11 74 C0                             ld      de,XX15
  17++8866 01 06 00                             ld      bc,6
  18++8869 ED B0                                ldir
  19++886B C9                                   ret
  20++886C
  21++886C 21 74 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22++886F 11 97 C0                             ld      de,XX15Save2
  23++8872 01 06 00                             ld      bc,6
  24++8875 ED B0                                ldir
  25++8877 C9                                   ret
  26++8878
  27++8878 21 97 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28++887B 11 74 C0                             ld      de,XX15
  29++887E 01 06 00                             ld      bc,6
  30++8881 ED B0                                ldir
  31++8883 C9                                   ret
  32++8884
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 216+ 8884
 217+ 8884 00 00        XX12PVarQ			DW 0
 218+ 8886 00 00        XX12PVarR			DW 0
 219+ 8888 00 00        XX12PVarS			DW 0
 220+ 888A 00 00        XX12PVarResult1		DW 0
 221+ 888C 00 00        XX12PVarResult2		DW 0
 222+ 888E 00 00        XX12PVarResult3		DW 0
 223+ 8890 00           XX12PVarSign2		DB 0
 224+ 8891 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 225+ 8892 00           XX12PVarSign3		DB 0
 226+ 8893
 227+ 8893              ; copy from wiring addhlde un iniv ship data
 228+ 8893              XX12ProcessCalcHLPlusDESignBC:
 229+ 8893              ; Combinations validated in ClacHLDEsignedBE.asm
 230+ 8893              ; calcs HLB + DEC where B and C are signs
 231+ 8893 78           		ld		a,b										; get HL sign byte
 232+ 8894 CB 7F        		bit		7,a										; is high bit set?
 233+ 8896 20 12        		jr		nz,XX12AddHLNegative					; if it is then the HL is negative
 234+ 8898              XX12AddHLPositive:										; At here HL is positive
 235+ 8898 79           		ld		a,c										; so we check DE as well
 236+ 8899 CB 7F        		bit		7,a
 237+ 889B 20 03        		jr		nz,XX12HLPosDENeg						; here if HL is negative jump
 238+ 889D              XX12HLPosDEPos:											; so here we have +HL + +DE
 239+ 889D 19           		add		hl,de									; which is HL+DE
 240+ 889E AF           		xor		a										; and will always return a + sign
 241+ 889F C9           		ret
 242+ 88A0              XX12HLPosDENeg:											; here we have +HL + -DE
 243+ 88A0              		ClearCarryFlag									;
 243+ 88A0 B7          >                        or a
 244+ 88A1 ED 52        		sbc		hl,de									; so we do HL - DE
 245+ 88A3 CB 7C        		bit		7,h
 246+ 88A5 C2 BE 88     		jp		nz,XX12Pt1FixNegResult					; if the result was negative we need a correction
 247+ 88A8 AF           		xor		a										; else sign is +ve
 248+ 88A9 C9           		ret
 249+ 88AA              XX12AddHLNegative:										; here we enter with -HL
 250+ 88AA 79           		ld		a,c
 251+ 88AB CB 7F        		bit		7,a
 252+ 88AD 20 0B        		jr		nz,XX12HLNegDENeg						; and now do we have DE as negative
 253+ 88AF              XX12HLNegDEPos:											; here we have -HL + +DE
 254+ 88AF EB           		ex		de,hl									; so to simplify concept swap DE and HL
 255+ 88B0              		ClearCarryFlag									; to make the calc
 255+ 88B0 B7          >                        or a
 256+ 88B1 ED 52        		sbc		hl,de									; DE - HL
 257+ 88B3 CB 7C        		bit		7,h										; was the result negative
 258+ 88B5 C2 BE 88     		jp		nz,XX12Pt1FixNegResult					; if so deal with it
 259+ 88B8 AF           		xor 	a										; else it is positive
 260+ 88B9 C9           		ret
 261+ 88BA              XX12HLNegDENeg:											; now we have -HL + -DE
 262+ 88BA 19           		add		hl,de									; which we can translate to (HL + DE) * -1
 263+ 88BB 3E 80        		ld		a,$80									; this sets the sign i.e. * -1
 264+ 88BD C9           		ret
 265+ 88BE              XX12Pt1FixNegResult:	 								; the result of HLcalcDE was negative
 266+ 88BE              		NegHL											; so we 2's compliment it back to an absolute value
 266+ 88BE AF          >                xor a
 266+ 88BF 95          >                sub l
 266+ 88C0 6F          >                ld l,a
 266+ 88C1 9F          >                sbc a,a
 266+ 88C2 94          >                sub h
 266+ 88C3 67          >                ld h,a
 267+ 88C4 3E 80        		ld		a,$80									; and set the sign to a negative
 268+ 88C6 C9           		ret
 269+ 88C7
 270+ 88C7                                      include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ././Maths/Utilities/XX12EquNodeDotOrientation.asm
   1++88C7              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2++88C7              ; so xx12 = XX15 * XX16 row
   3++88C7              XX12ProcessOneRow:
   4++88C7              XX12CalcXCell:
   5++88C7 ED 4B 74 C0          ld		bc,(UBnkXScaled)
   6++88CB 5E           		ld		e,(hl)								    ; get orientation ZX
   7++88CC 23           		inc		hl
   8++88CD 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9++88CE 7A           		ld		a,d
  10++88CF A8                   xor     b
  11++88D0 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12++88D2 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13++88D4 78           		ld		a,b                                     ; now make bc abs bc
  14++88D5 E6 7F        		and		SignMask8Bit
  15++88D7 47           		ld		b,a                                     ; bc = abs(bc) now
  16++88D8 E5           		push	hl
  17++88D9 16 00                ld      d,0                                     ; d = value
  18++88DB 60           		ld		h,b
  19++88DC 69           		ld		l,c
  20++88DD CD E0 A1     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21++88E0 22 8A 88     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22++88E3 DD 7C        		ld		a,ixh
  23++88E5 32 91 88     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24++88E8 E1           		pop		hl
  25++88E9              XX12CalcYCell:
  26++88E9 ED 4B 76 C0          ld		bc,(UBnkYScaled)
  27++88ED 23           		inc		hl
  28++88EE 5E           		ld		e,(hl)							    	; get orientation ZX
  29++88EF 23           		inc		hl
  30++88F0 56           		ld		d,(hl)
  31++88F1 7A           		ld		a,d
  32++88F2 A8                   xor     b
  33++88F3 E6 80        		and		SignOnly8Bit
  34++88F5 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35++88F7 78           		ld		a,b                                     ; now make bc abs bc
  36++88F8 E6 7F        		and		SignMask8Bit
  37++88FA 47           		ld		b,a                                     ; bc = abs(bc) now
  38++88FB E5           		push	hl
  39++88FC 16 00                ld      d,0                                     ; d = value
  40++88FE 60           		ld		h,b
  41++88FF 69           		ld		l,c
  42++8900 CD E0 A1     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43++8903 22 8C 88     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44++8906 DD 7C        		ld		a,ixh
  45++8908 32 90 88     		ld		(XX12PVarSign2),a					    ; S = sign
  46++890B E1           		pop		hl
  47++890C              XX12CalcZCell:
  48++890C ED 4B 78 C0          ld		bc,(UBnkZScaled)
  49++8910 23           		inc		hl
  50++8911 5E           		ld		e,(hl)								    ; get orientation ZX
  51++8912 23           		inc		hl
  52++8913 56           		ld		d,(hl)
  53++8914 7A           		ld		a,d
  54++8915 A8                   xor     b
  55++8916 E6 80        		and		SignOnly8Bit
  56++8918 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57++891A 78           		ld		a,b                                     ; now make bc abs bc
  58++891B E6 7F        		and		SignMask8Bit
  59++891D 47           		ld		b,a                                     ; bc = abs(bc) now
  60++891E 16 00                ld      d,0                                     ; d = value
  61++8920 60           		ld		h,b
  62++8921 69           		ld		l,c
  63++8922 CD E0 A1     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64++8925 22 8E 88     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65++8928 DD 7C        		ld		a,ixh
  66++892A 32 92 88     		ld		(XX12PVarSign3),a					    ; S = sign
  67++892D              XX12CalcCellResult:
  68++892D 2A 8A 88     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69++8930 ED 5B 8C 88  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70++8934 ED 4B 90 88  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71++8938              XX12MSBOnly:
  72++8938 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73++8939 5A           		ld		e,d									    ; for both results
  74++893A AF           		xor		a									    ;
  75++893B 67           		ld		h,a									    ;
  76++893C 57           		ld		d,a									    ; so set high byte to 0
  77++893D CD 3C CB     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78++8940 47           		ld		b,a									    ; move sign into b ready for next calc
  79++8941 3A 92 88     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80++8944 4F           		ld		c,a									    ; goes into c to align with DE
  81++8945 ED 5B 8E 88  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82++8949 5A           		ld		e,d                                     ; d = result /256
  83++894A 16 00        		ld		d,0									    ; and only us high byte
  84++894C CD 3C CB     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85++894F C9           		ret											    ; hl = result, a = sign
  86++8950              								    ; hl = result, a = sign
  87++8950
  88++8950              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89++8950              ;...X cell
  90++8950 21 47 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91++8953 CD C7 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92++8956 47           		ld		b,a                                 ; b = sign
  93++8957 7C           		ld		a,h                                 ; a = high byte
  94++8958 B0           		or		b
  95++8959 32 7B C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96++895C 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97++895D 32 7A C0             ld      (UBnkXX12xLo),a						; that is result done for
  98++8960              ;...Y cell
  99++8960 21 4F C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100++8963 CD C7 88             call    XX12ProcessOneRow
 101++8966 47           		ld		b,a
 102++8967 7C           		ld		a,h
 103++8968              ;		ld		a,l
 104++8968 B0           		or		b
 105++8969 32 7D C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106++896C 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107++896D 32 7C C0             ld      (UBnkXX12yLo),a						; that is result done for
 108++8970              ;...Z cell
 109++8970 21 57 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110++8973 CD C7 88             call    XX12ProcessOneRow
 111++8976 47           		ld		b,a
 112++8977 7C                   ld		a,h
 113++8978              ;		ld		a,l
 114++8978 B0           		or		b
 115++8979 32 7F C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116++897C 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117++897D 32 7E C0             ld      (UBnkXX12zLo),a						; that is result done for
 118++8980 C9                   ret
 119++8981
 120++8981              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121++8981              ;...X cell
 122++8981 21 47 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123++8984 CD C7 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124++8987 47           		ld		b,a                                 ; b = sign
 125++8988 7C           		ld		a,h                                 ; a = high byte
 126++8989 B0           		or		b
 127++898A 32 7B C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128++898D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129++898E 32 7A C0             ld      (UBnkXX12xLo),a						; that is result done for
 130++8991              ;...Y cell
 131++8991 21 4F C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132++8994 CD C7 88             call    XX12ProcessOneRow
 133++8997 47           		ld		b,a
 134++8998 7C           		ld		a,h
 135++8999              ;		ld		a,l
 136++8999 B0           		or		b
 137++899A 32 7D C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138++899D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139++899E 32 7C C0             ld      (UBnkXX12yLo),a						; that is result done for
 140++89A1              ;...Z cell
 141++89A1 21 57 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142++89A4 CD C7 88             call    XX12ProcessOneRow
 143++89A7 47           		ld		b,a
 144++89A8 7C                   ld		a,h
 145++89A9              ;		ld		a,l
 146++89A9 B0           		or		b
 147++89AA 32 7F C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148++89AD 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149++89AE 32 7E C0             ld      (UBnkXX12zLo),a						; that is result done for
 150++89B1 C9                   ret
 151++89B2
 152++89B2              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153++89B2              ;...X cell
 154++89B2 21 2F C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155++89B5 CD C7 88             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156++89B8 47           		ld		b,a                                 ; b = sign
 157++89B9 7C           		ld		a,h                                 ; a = high byte
 158++89BA B0           		or		b
 159++89BB 32 7B C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160++89BE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161++89BF 32 7A C0             ld      (UBnkXX12xLo),a						; that is result done for
 162++89C2              ;...Y cell
 163++89C2 21 35 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164++89C5 CD C7 88             call    XX12ProcessOneRow
 165++89C8 47           		ld		b,a
 166++89C9 7C           		ld		a,h
 167++89CA              ;		ld		a,l
 168++89CA B0           		or		b
 169++89CB 32 7D C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170++89CE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171++89CF 32 7C C0             ld      (UBnkXX12yLo),a						; that is result done for
 172++89D2              ;...Z cell
 173++89D2 21 3B C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174++89D5 CD C7 88             call    XX12ProcessOneRow
 175++89D8 47           		ld		b,a
 176++89D9 7C                   ld		a,h
 177++89DA              ;		ld		a,l
 178++89DA B0           		or		b
 179++89DB 32 7F C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180++89DE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181++89DF 32 7E C0             ld      (UBnkXX12zLo),a						; that is result done for
 182++89E2 C9                   ret
# file closed: ././Maths/Utilities/XX12EquNodeDotOrientation.asm
 271+ 89E3
 272+ 89E3              TransposeXX12ByShipToXX15:
 273+ 89E3 2A 7A C0             ld		hl,(UBnkXX12xLo)					; get X into HL
 274+ 89E6 7C           		ld		a,h			                        ; get XX12 Sign
 275+ 89E7 E6 80        		and		$80									; check sign bit on high byte
 276+ 89E9 47           		ld		b,a									; and put it in of 12xlo in b
 277+ 89EA                      ;110921 debugld      h,0
 278+ 89EA 7C                   ld      a,h
 279+ 89EB E6 7F                and     $7F
 280+ 89ED 67                   ld      h,a
 281+ 89EE                      ;110921 debugld      h,0
 282+ 89EE ED 5B 0B C0  		ld		de,(UBnKxlo)						;
 283+ 89F2 3A 0D C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
 284+ 89F5 E6 80        		and		$80									; make sure we only have bit 7
 285+ 89F7 4F           		ld		c,a									; and put sign of unkxsgn c
 286+ 89F8 CD 3C CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
 287+ 89FB B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
 288+ 89FC 67           		ld		h,a
 289+ 89FD 22 74 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
 290+ 8A00              ; ..................................
 291+ 8A00 2A 7C C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
 292+ 8A03 7C           		ld		a,h
 293+ 8A04 E6 80        		and		$80
 294+ 8A06 47           		ld		b,a
 295+ 8A07                      ;110921 debugld      h,0
 296+ 8A07 7C                   ld      a,h
 297+ 8A08 E6 7F                and     $7F
 298+ 8A0A 67                   ld      h,a
 299+ 8A0B                      ;110921 debugld      h,0
 300+ 8A0B ED 5B 0E C0  		ld		de,(UBnKylo)
 301+ 8A0F 3A 10 C0     		ld		a,(UBnKysgn)
 302+ 8A12 E6 80        		and		$80									; make sure we only have bit 7
 303+ 8A14 4F           		ld		c,a
 304+ 8A15 CD 3C CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 305+ 8A18 B4           		or		h									; combine sign in A with H
 306+ 8A19 67           		ld		h,a
 307+ 8A1A 22 76 C0     		ld		(UBnkYScaled),hl
 308+ 8A1D              ; ..................................
 309+ 8A1D 2A 7E C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
 310+ 8A20 7C           		ld		a,h
 311+ 8A21 E6 80        		and		$80
 312+ 8A23 47           		ld		b,a
 313+ 8A24                      ;110921 debugld      h,0
 314+ 8A24 7C                   ld      a,h
 315+ 8A25 E6 7F                and     $7F
 316+ 8A27 67                   ld      h,a
 317+ 8A28                      ;110921 debugld      h,0
 318+ 8A28 ED 5B 11 C0  		ld		de,(UBnKzlo)
 319+ 8A2C 3A 13 C0     		ld		a,(UBnKzsgn)
 320+ 8A2F E6 80        		and		$80									; make sure we only have bit 7
 321+ 8A31 4F           		ld		c,a
 322+ 8A32 CD 3C CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 323+ 8A35 B4           		or		h									; combine sign in A with H
 324+ 8A36 67           		ld		h,a
 325+ 8A37 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
 326+ 8A39 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
 327+ 8A3B E6 7F                and     $7F                                 ; a = value unsigned
 328+ 8A3D 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
 329+ 8A3F 7D                   ld      a,l                                 ; get low byte now
 330+ 8A40              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
 330+ 8A40 FE 04       >                        cp      4
 330+ 8A42 DA 51 8A    >                        jp		c,ClampZto4
 331+ 8A45              NoClampZto4:
 332+ 8A45 22 78 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
 333+ 8A48 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
 334+ 8A49 32 40 94             ld      (varT),a
 335+ 8A4C 7C           		ld		a,h
 336+ 8A4D 32 1F 94             ld      (varU),a
 337+ 8A50 C9           		ret
 338+ 8A51              ClampZto4:											; This is where we limit 4 to a minimum of 4
 339+ 8A51 21 04 00     		ld		hl,4
 340+ 8A54 22 78 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
 341+ 8A57 7D           		ld		a,l
 342+ 8A58 32 40 94             ld      (varT),a                            ;                                                                           ;;;
 343+ 8A5B 7C           		ld		a,h
 344+ 8A5C 32 1F 94             ld      (varU),a 						; compatibility for now
 345+ 8A5F C9           		ret
 346+ 8A60
 347+ 8A60
 348+ 8A60              RescaleXXValue:
 349+ 8A60 5E           		ld		e,(hl)
 350+ 8A61 23           		inc		hl
 351+ 8A62 56           		ld		d,(hl)
 352+ 8A63 7A           		ld		a,d
 353+ 8A64 E6 80        		and		$80
 354+ 8A66 47           		ld		b,a
 355+ 8A67 7A           		ld		a,d
 356+ 8A68 E6 7F        		and		$7F
 357+ 8A6A 4F           		ld		c,a
 358+ 8A6B 7B           		ld		a,e
 359+ 8A6C CB 7F        		bit		7,a
 360+ 8A6E CA 72 8A     		jp		z,XX15XLT128
 361+ 8A71              XX15XGT128:
 362+ 8A71 0C           		inc		c
 363+ 8A72              XX15XLT128:
 364+ 8A72 59           		ld		e,c
 365+ 8A73 50           		ld		d,b
 366+ 8A74 72           		ld		(hl),d
 367+ 8A75 2B           		dec		hl
 368+ 8A76 73           		ld		(hl),e
 369+ 8A77 23           		inc		hl
 370+ 8A78 23           		inc		hl
 371+ 8A79 C9           		ret
 372+ 8A7A
 373+ 8A7A
 374+ 8A7A              NegZeroBodge:
 375+ 8A7A 21 20 C0         ld     hl,UBnkrotmatNosevX
 376+ 8A7D 06 09            ld     b,9
 377+ 8A7F              NegBodgeLoop:
 378+ 8A7F 7E               ld      a,(hl)
 379+ 8A80 23               inc     hl
 380+ 8A81 FE 00            cp      0
 381+ 8A83 20 07            jr      nz,NegBodgeSkip1
 382+ 8A85 7E               ld      a,(hl)
 383+ 8A86 FE 80            cp      $80
 384+ 8A88 20 02            jr      nz,NegBodgeSkip1
 385+ 8A8A AF               xor     a
 386+ 8A8B 77               ld      (hl),a
 387+ 8A8C              NegBodgeSkip1:
 388+ 8A8C 23               inc     hl
 389+ 8A8D 10 F0            djnz    NegBodgeLoop
 390+ 8A8F C9               ret
 391+ 8A90
 392+ 8A90 B0           RollLoop: DB $B0
 393+ 8A91
 394+ 8A91              TestRender:
 395+ 8A91              	;include "Tests/PlotTest2.asm"
 396+ 8A91              ; Initialise banks is include in main initialise subrotines now
 397+ 8A91              ; Prototype for .TITLE
 398+ 8A91              TestLines:
 399+ 8A91              ;include "Tests/LineHLtoDETest.asm"
 400+ 8A91              TestCalcs:
 401+ 8A91
 402+ 8A91              ;include "Tests/CalcHLDEsignedBE.asm"
 403+ 8A91
 404+ 8A91
 405+ 8A91 3E 5A        	ld	a,90
 406+ 8A93 4F           	ld	c,a
 407+ 8A94 16 6C        	ld	d,108
 408+ 8A96 CD 19 A7     	call AequAdivDmul96
 409+ 8A99
 410+ 8A99 3E 5A        	ld	a,90
 411+ 8A9B 06 6C        	ld	b,108
 412+ 8A9D 21 00 24     	ld	hl,$2400
 413+ 8AA0 22 21 94     	ld	(varR),hl
 414+ 8AA3 CD 8D A9     	call	TidySub1
 415+ 8AA6
 416+ 8AA6              	;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 417+ 8AA6
 418+ 8AA6              TestTIDY:
 419+ 8AA6 21 00 00     	ld	hl,$0000
 420+ 8AA9 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 421+ 8AAC 21 00 8D     	ld	hl,$8D00
 422+ 8AAF 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 423+ 8AB2 21 00 E0     	ld	hl,$E000
 424+ 8AB5 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 425+ 8AB8
 426+ 8AB8 21 00 00     	ld	hl,$0000
 427+ 8ABB 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 428+ 8ABE 21 00 B4     	ld	hl,$B400
 429+ 8AC1 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 430+ 8AC4 21 00 CF     	ld	hl,$CF00
 431+ 8AC7 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 432+ 8ACA
 433+ 8ACA 21 00 28     	ld	hl,$2800
 434+ 8ACD 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 435+ 8AD0 21 00 00     	ld	hl,$0000
 436+ 8AD3 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 437+ 8AD6 21 00 00     	ld	hl,$0000
 438+ 8AD9 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 439+ 8ADC CD D6 8B     	call	TestPitchPos
 440+ 8ADF              ;	call	TestRollPos
 441+ 8ADF              ;	call	TIDY
 442+ 8ADF
 443+ 8ADF
 444+ 8ADF 21 00 00     	ld	hl,$0
 445+ 8AE2 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 446+ 8AE5 21 CE 63     	ld	hl,$63CE
 447+ 8AE8 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 448+ 8AEB 21 C6 1D     	ld	hl,$1DC6
 449+ 8AEE 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 450+ 8AF1
 451+ 8AF1 21 00 00     	ld	hl,$0
 452+ 8AF4 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 453+ 8AF7 21 7D 64     	ld	hl,$647D
 454+ 8AFA 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 455+ 8AFD 21 9B 23     	ld	hl,$239B
 456+ 8B00 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 457+ 8B03
 458+ 8B03 21 00 60     	ld	hl,$6000
 459+ 8B06 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 460+ 8B09 21 00 00     	ld	hl,$0
 461+ 8B0C 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 462+ 8B0F 21 00 00     	ld	hl,$0
 463+ 8B12 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 464+ 8B15 CD DD A9     	call	TIDY
 465+ 8B18
 466+ 8B18
 467+ 8B18              TestRollLoop:
 468+ 8B18 3A 90 8A         ld      a,(RollLoop)
 469+ 8B1B 3D               dec     a
 470+ 8B1C                  JumpIfALTNusng $40 , ItsRoll
 470+ 8B1C FE 40       >                        cp      $40
 470+ 8B1E DA 2A 8B    >                        jp		c,ItsRoll
 471+ 8B21 32 90 8A         ld      (RollLoop),a
 472+ 8B24 CD D6 8B       	call	TestPitchPos
 473+ 8B27 C3 40 8B         jp     SkipTidyUp
 474+ 8B2A              ItsRoll;
 475+ 8B2A FE 00            cp      0
 476+ 8B2C 20 0B            jr      nz,DontReset
 477+ 8B2E 3E 60            ld      a,$60
 478+ 8B30 32 90 8A         ld      (RollLoop),a
 479+ 8B33 CD 9C 8B         call    TestRollPos
 480+ 8B36 C3 40 8B         jp      SkipTidyUp
 481+ 8B39              DontReset
 482+ 8B39 32 90 8A         ld      (RollLoop),a
 483+ 8B3C CD 9C 8B         call    TestRollPos
 484+ 8B3F C9               ret
 485+ 8B40
 486+ 8B40              SkipTidyUp:
 487+ 8B40
 488+ 8B40
 489+ 8B40
 490+ 8B40 00 00        DebugPoint: DW 0
 491+ 8B42
 492+ 8B42              SubColor1:
 493+ 8B42 7C           	ld		a,h
 494+ 8B43 D6 1F        	sub		$1F
 495+ 8B45 67           	ld		h,a
 496+ 8B46 C9           	ret
 497+ 8B47              SubColor2:
 498+ 8B47 7C           	ld		a,h
 499+ 8B48 D6 2F        	sub		$2F
 500+ 8B4A 67           	ld		h,a
 501+ 8B4B C9           	ret
 502+ 8B4C
 503+ 8B4C                  ; V1 /512 => Part 1 = V1 - (1 /512) ; Oart 2 = V2 / 16 Answer = p1 + p2
 504+ 8B4C
 505+ 8B4C              SetupShip:
 506+ 8B4C 47               ld  b,a
 507+ 8B4D CB 47            bit  0,a
 508+ 8B4F 28 0B            jr   z,ShipRoot
 509+ 8B51 FE 05            cp  5
 510+ 8B53 28 14            jr  z,ShipUp
 511+ 8B55 FE 03            cp  3
 512+ 8B57 28 23            jr  z,ShipSide
 512+ 8B59
 513+ 8B59 18 31            jr  ShipNose
 514+ 8B5B C9               ret
 515+ 8B5C
 516+ 8B5C              ShipRoot:
 517+ 8B5C 21 00 00         ld hl,0
 518+ 8B5F 22 74 C0         ld (UBnkXScaled),hl
 519+ 8B62 22 76 C0         ld (UBnkYScaled),hl
 520+ 8B65 22 78 C0         ld (UBnkZScaled),hl
 521+ 8B68 C9               ret
 522+ 8B69
 523+ 8B69              ShipUp:
 524+ 8B69 21 00 00         ld hl,0
 525+ 8B6C 22 74 C0         ld (UBnkXScaled),hl
 526+ 8B6F 21 14 00         ld hl,20
 527+ 8B72 22 76 C0         ld (UBnkYScaled),hl
 528+ 8B75 21 00 00         ld hl,0
 529+ 8B78 22 78 C0         ld (UBnkZScaled),hl
 530+ 8B7B C9               ret
 531+ 8B7C
 532+ 8B7C              ShipSide:
 533+ 8B7C 21 14 00         ld hl,20
 534+ 8B7F 22 74 C0         ld (UBnkXScaled),hl
 535+ 8B82 21 00 00         ld hl,0
 536+ 8B85 22 76 C0         ld (UBnkYScaled),hl
 537+ 8B88 22 78 C0         ld (UBnkZScaled),hl
 538+ 8B8B C9               ret
 539+ 8B8C
 540+ 8B8C              ShipNose:
 541+ 8B8C 21 00 00         ld hl,0
 542+ 8B8F 22 74 C0         ld (UBnkXScaled),hl
 543+ 8B92 22 76 C0         ld (UBnkYScaled),hl
 544+ 8B95 21 14 00         ld hl,20
 545+ 8B98 22 78 C0         ld (UBnkZScaled),hl
 546+ 8B9B C9               ret
 547+ 8B9C
 548+ 8B9C              TestRollPos:
 549+ 8B9C 21 14 C0     	ld	hl,UBnkrotmatSidevX
 550+ 8B9F 22 AE 93     	ld	(varAxis1),hl
 551+ 8BA2 21 16 C0     	ld	hl,UBnkrotmatSidevY
 552+ 8BA5 22 B0 93     	ld	(varAxis2),hl
 553+ 8BA8 AF           	xor	a
 554+ 8BA9 32 36 94     	ld	(varRAT2),a
 555+ 8BAC CD 01 CC     	call MVS5XRotateXAxis
 556+ 8BAF 21 1A C0     	ld	hl,UBnkrotmatRoofvX
 557+ 8BB2 22 AE 93     	ld	(varAxis1),hl
 558+ 8BB5 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 559+ 8BB8 22 B0 93     	ld	(varAxis2),hl
 560+ 8BBB AF           	xor	a
 561+ 8BBC 32 36 94     	ld	(varRAT2),a
 562+ 8BBF CD 01 CC     	call MVS5XRotateXAxis
 563+ 8BC2 21 20 C0     	ld	hl,UBnkrotmatNosevX
 564+ 8BC5 22 AE 93     	ld	(varAxis1),hl
 565+ 8BC8 21 22 C0     	ld	hl,UBnkrotmatNosevY
 566+ 8BCB 22 B0 93     	ld	(varAxis2),hl
 567+ 8BCE AF           	xor	a
 568+ 8BCF 32 36 94     	ld	(varRAT2),a
 569+ 8BD2 CD 01 CC     	call MVS5XRotateXAxis
 570+ 8BD5 C9           	ret
 571+ 8BD6
 572+ 8BD6              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 573+ 8BD6              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 574+ 8BD6
 575+ 8BD6              TestPitchPos:
 576+ 8BD6 21 16 C0         ld	hl,UBnkrotmatSidevY
 577+ 8BD9 22 AE 93         ld	(varAxis1),hl
 578+ 8BDC 21 18 C0         ld	hl,UBnkrotmatSidevZ
 579+ 8BDF 22 B0 93         ld	(varAxis2),hl
 580+ 8BE2 AF               xor	a
 581+ 8BE3 32 36 94         ld	(varRAT2),a
 582+ 8BE6 CD 01 CC         call MVS5XRotateXAxis
 583+ 8BE9              ; Do Y
 584+ 8BE9 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 585+ 8BEC 22 AE 93     	ld	(varAxis1),hl
 586+ 8BEF 21 1E C0     	ld	hl,UBnkrotmatRoofvZ
 587+ 8BF2 22 B0 93     	ld	(varAxis2),hl
 588+ 8BF5 AF           	xor	a
 589+ 8BF6 32 36 94     	ld	(varRAT2),a
 590+ 8BF9 CD 01 CC     	call MVS5XRotateXAxis
 591+ 8BFC              ; Do Z
 592+ 8BFC 21 22 C0     	ld	hl,UBnkrotmatNosevY
 593+ 8BFF 22 AE 93     	ld	(varAxis1),hl
 594+ 8C02 21 24 C0     	ld	hl,UBnkrotmatNosevZ
 595+ 8C05 22 B0 93     	ld	(varAxis2),hl
 596+ 8C08 AF           	xor	a
 597+ 8C09 32 36 94     	ld	(varRAT2),a
 598+ 8C0C CD 01 CC     	call MVS5XRotateXAxis
 599+ 8C0F C9           	ret
 600+ 8C10
 601+ 8C10
 602+ 8C10              TestReplot:
 603+ 8C10 3A 06 C3         ld      a,(VertexCtX6Addr)                  ; get Hull byte#8 = number of vertices *6                                   ;;;
 604+ 8C13 4F               ld      c,a									; XX20 also c = number of vertices * 6 (or XX20)
 605+ 8C14 16 06            ld      d,6
 606+ 8C16 CD 4A A3         call    asm_div8                            ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 607+ 8C19 41               ld      b,c									; c = number of vertices
 608+ 8C1A FD 21 BE C0  	ld		iy,UBnkNodeArray
 609+ 8C1E              RePointLoop:
 610+ 8C1E C5           	push	bc
 611+ 8C1F FD E5        	push	iy
 612+ 8C21 FD 7E 00     	ld		a,(iy+0)
 613+ 8C24 4F           	ld		c,a
 614+ 8C25 FD 7E 02     	ld		a,(iy+2)
 615+ 8C28 47           	ld		b,a
 616+ 8C29 26 DF        	ld 		h,$DF
 617+ 8C2B FD 7E 01     	ld		a,(iy+1)
 618+ 8C2E 57           	ld		d,a
 619+ 8C2F FD 7E 03     	ld		a,(iy+3)
 620+ 8C32 5F           	ld		e,a
 621+ 8C33 B2           	or		d
 622+ 8C34 28 0C        	jr		z,RePlotAsIs
 623+ 8C36 7A           	ld 		a,d
 624+ 8C37 FE 00        	cp		0
 625+ 8C39 C4 42 8B     	call	nz,SubColor1
 626+ 8C3C 7A           	ld 		a,d
 627+ 8C3D FE 00        	cp		0
 628+ 8C3F C4 42 8B     	call	nz,SubColor1
 629+ 8C42              RePlotAsIs:
 630+ 8C42 7C           	ld		a,h
 631+ 8C43              	MMUSelectLayer2
 631+ 8C43 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 632+ 8C47 CD FF E0     	call    l2_plot_pixel
 633+ 8C4A E1           	pop		hl
 634+ 8C4B 3E 04        	ld		a,4
 635+ 8C4D ED 31        	add		hl,a
 636+ 8C4F E5           	push	hl
 637+ 8C50 FD E1        	pop		iy								; this is very expensive need to optimise TODO
 638+ 8C52 C1           	pop		bc
 639+ 8C53 10 C9        	djnz	RePointLoop
 640+ 8C55 C9           	ret
 641+ 8C56
 642+ 8C56                  ;ProcessFaceNormDebug:
 643+ 8C56              ;    push    hl
 644+ 8C56              ;    push    bc
 645+ 8C56              ;    push    de
 646+ 8C56              ;    push    ix
 647+ 8C56              ;    push    iy
 648+ 8C56              ;    ld      hl,UBnkHullNormals
 649+ 8C56              ;    call    CopyFaceToXX12
 650+ 8C56              ;    call    CopyXX15ToXX15Save
 651+ 8C56              ;    call    CopyXX12ToXX15
 652+ 8C56              ;    call    RotateXX15ByTransMatXX16
 653+ 8C56              ;    call    CopyXX15ToXX12
 654+ 8C56              ;    call    CopyXX15SaveToXX15
 655+ 8C56              ;    call    DotproductXX12XX15
 656+ 8C56              ;    ld      a,(varS)
 657+ 8C56              ;    JumpOnBitClear a,7,ItsGreen
 658+ 8C56              ;
 659+ 8C56              ;    ld      a,193
 660+ 8C56              ;    jp      DoPlotNorm
 661+ 8C56              ;ItsGreen:
 662+ 8C56              ;	ld		a,28
 663+ 8C56              ;DoPlotNorm:
 664+ 8C56              ;    pop     iy
 665+ 8C56              ;    pop     ix
 666+ 8C56              ;    pop     de
 667+ 8C56              ;    pop     bc
 668+ 8C56              ;    pop     hl
 669+ 8C56              ;    ret
 670+ 8C56              ;
 671+ 8C56              ;ProcessNormalLine:
 672+ 8C56              ;    push    hl
 673+ 8C56              ;    push    bc
 674+ 8C56              ;    push    de
 675+ 8C56              ;    push    ix
 676+ 8C56              ;    push    iy
 677+ 8C56              ;;    call    CopyXX15ToXX15Save                                      ; save current XX15
 678+ 8C56              ;    ld      hl,UBnkHullNormals
 679+ 8C56              ;    call    CopyFaceToXX15                                          ;        Get Face data into XX12
 680+ 8C56              ;  ;  call    CopyXX12ToXX15
 681+ 8C56              ;  ; ld      a,(QAddr)
 682+ 8C56              ;  ;  xor       a
 683+ 8C56              ;  ;  ld      (XX17),a
 684+ 8C56              ;  ;  call    ScaleNormal
 685+ 8C56              ;	ld		a,(UBnkXScaledSign)
 686+ 8C56              ;	call    XX12EquNodeDotOrientation
 687+ 8C56              ;    ld      a,(UBnkXX12zSign)
 688+ 8C56              ;    ld      (VarBackface),a
 689+ 8C56              ;    call    CopyXX12ToXX12Save
 690+ 8C56              ;	call    TransposeXX12ByShipToXX15
 691+ 8C56              ;    call    ScaleNodeTo8Bit
 692+ 8C56              ;    call    CopyXX15ToXX12
 693+ 8C56              ;    call    CopyXX12ToXX12Save2
 694+ 8C56              ;    call    CopyXX15SaveToXX15 ; Copy from previous
 695+ 8C56              ;    call    CopyXX12SaveToXX12
 696+ 8C56              ;    ld      a,1
 697+ 8C56              ;    ld      (XX17),a
 698+ 8C56              ;    call    ScaleNormal
 699+ 8C56              ;   ; call    DotproductXX12XX15
 700+ 8C56              ;    ld      a,(VarBackface)
 701+ 8C56              ;    JumpOnBitClear a,7,PlotRed
 702+ 8C56              ;    JumpIfALTNUsng 51,PlotRed
 703+ 8C56              ;PlotGreen:
 704+ 8C56              ;    ld      a,$7C
 705+ 8C56              ;    jp      ReadyToDrawLine
 706+ 8C56              ;PlotRed:
 707+ 8C56              ;    ld      a,$E0
 708+ 8C56              ;ReadyToDrawLine:
 709+ 8C56              ;    ld      (line_gfx_colour),a
 710+ 8C56              ;    call    CopyXX12Save2ToXX12
 711+ 8C56              ;    call    CopyXX12ToXX15
 712+ 8C56              ;    ld		iy,UBnkNodeArray2
 713+ 8C56              ;    call    TestProjectNodeToScreen
 714+ 8C56              ;    ld		a,(iy+0)
 715+ 8C56              ;	ld		e,a
 716+ 8C56              ;	ld		a,(iy+2)
 717+ 8C56              ;	ld		d,a
 718+ 8C56              ;    ld      hl,(DebugPoint)
 719+ 8C56              ;	MMUSelectLayer2
 720+ 8C56              ;
 721+ 8C56              ;	call    LineHLtoDE
 722+ 8C56              ;
 723+ 8C56              ;Skipit:
 724+ 8C56              ;    pop     iy
 725+ 8C56              ;
 726+ 8C56              ;    pop     ix
 727+ 8C56              ;    pop     de
 728+ 8C56              ;    pop     bc
 729+ 8C56              ;    pop     hl
 730+ 8C56              ;    ret
 731+ 8C56
# file closed: ./ModelRender/testdrawing.asm
 802  8C56                  include "./Universe/StarRoutines.asm"
# file opened: ./Universe/StarRoutines.asm
   1+ 8C56              ;note: DIV16Amul256dCUNDOC as per
   2+ 8C56              ;                                   BC = A0
   3+ 8C56              ;                                   DE = 0C
   4+ 8C56              ;                                   so BC = a * 256 / C
   5+ 8C56
   6+ 8C56              ; We can cheat here, Speed is always 0 or positive
   7+ 8C56              ; z postion will always be positive if we can see it
   8+ 8C56
   9+ 8C56 EB           InitStarAtHL:           ex      de,hl
  10+ 8C57 CD D7 97                             call    doRND
  11+ 8C5A EB                                   ex      de,hl
  12+ 8C5B F6 08                                or      8
  13+ 8C5D 77                                   ld      (hl),a
  14+ 8C5E E6 7F                                and     $7F
  15+ 8C60 23                                   inc     hl
  16+ 8C61 77                                   ld      (hl),a
  17+ 8C62 EB                                   ex      de,hl
  18+ 8C63 CD D7 97                             call    doRND
  19+ 8C66 EB                                   ex      de,hl
  20+ 8C67 0F                                   rrca
  21+ 8C68 E6 80                                and     $80
  22+ 8C6A B6                                   or      (hl)
  23+ 8C6B 77                                   ld      (hl),a
  24+ 8C6C 23                                   inc     hl
  25+ 8C6D EB                                   ex      de,hl
  26+ 8C6E CD D7 97                             call    doRND
  27+ 8C71 EB                                   ex      de,hl
  28+ 8C72 F6 04                                or      4
  29+ 8C74 77                                   ld      (hl),a
  30+ 8C75 23                                   inc     hl
  31+ 8C76 E6 7F                                and     $7F
  32+ 8C78 77                                   ld      (hl),a
  33+ 8C79 EB                                   ex      de,hl
  34+ 8C7A CD D7 97                             call    doRND
  35+ 8C7D EB                                   ex      de,hl
  36+ 8C7E 0F                                   rrca
  37+ 8C7F E6 80                                and     $80
  38+ 8C81 B6                                   or      (hl)
  39+ 8C82 77                                   ld      (hl),a
  40+ 8C83 23                                   inc     hl
  41+ 8C84 EB                                   ex      de,hl
  42+ 8C85 CD D7 97                             call    doRND
  43+ 8C88 EB                                   ex      de,hl
  44+ 8C89 F6 90                                or      144
  45+ 8C8B 77                                   ld      (hl),a
  46+ 8C8C 23                                   inc     hl
  47+ 8C8D F6 70                                or      %01110000
  48+ 8C8F E6 7F                                and     $7f     ; bodge
  49+ 8C91 77                                   ld      (hl),a
  50+ 8C92 23                                   inc     hl
  51+ 8C93 C9                                   ret
  52+ 8C94
  53+ 8C94              ; we could cheat, flip the sign of DE and just add but its not very optimised
  54+ 8C94 7C           StarsSUBHLDESigned:     ld      a,h
  55+ 8C95 E6 80                                and     SignOnly8Bit
  56+ 8C97 47                                   ld      b,a                         ;save sign bit in b
  57+ 8C98 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 8C99                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
  58+ 8C99 FA C7 8C    >                        jp		m, .SUBHLDEOppSGN
  59+ 8C9C 78           .SUBHLDESameSigns:      ld      a,b
  60+ 8C9D B2                                   or      d
  61+ 8C9E                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 8C9E FA A8 8C    >                        jp		m, .SUBHLDESameNeg
  62+ 8CA1 B7                                   or      a
  63+ 8CA2 ED 52                                sbc     hl,de
  64+ 8CA4                                      JumpIfNegative .SUBHLDESameOvrFlw
  64+ 8CA4 FA BB 8C    >                        jp		m, .SUBHLDESameOvrFlw
  65+ 8CA7 C9                                   ret
  66+ 8CA8 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  67+ 8CA9 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  68+ 8CAB 67                                   ld      h,a
  69+ 8CAC 7A                                   ld      a,d
  70+ 8CAD E6 7F                                and     SignMask8Bit
  71+ 8CAF 57                                   ld      d,a
  72+ 8CB0 B7                                   or      a
  73+ 8CB1 ED 52                                sbc     hl,de
  74+ 8CB3                                      JumpIfNegative .SUBHLDESameOvrFlw
  74+ 8CB3 FA BB 8C    >                        jp		m, .SUBHLDESameOvrFlw
  75+ 8CB6 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  76+ 8CB7 F6 80                                or      SignOnly8Bit
  77+ 8CB9 67                                   ld      h,a
  78+ 8CBA C9                                   ret
  79+ 8CBB              .SUBHLDESameOvrFlw:     NegHL
  79+ 8CBB AF          >                xor a
  79+ 8CBC 95          >                sub l
  79+ 8CBD 6F          >                ld l,a
  79+ 8CBE 9F          >                sbc a,a
  79+ 8CBF 94          >                sub h
  79+ 8CC0 67          >                ld h,a
  80+ 8CC1 78                                   ld      a,b
  81+ 8CC2 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  82+ 8CC4 B4                                   or      h
  83+ 8CC5 67                                   ld      h,a                         ; recover sign
  84+ 8CC6 C9                                   ret
  85+ 8CC7 B7           .SUBHLDEOppSGN:         or      a
  86+ 8CC8 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  87+ 8CC9 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  88+ 8CCB 67                                   ld      h,a
  89+ 8CCC 7A                                   ld      a,d
  90+ 8CCD E6 7F                                and     SignMask8Bit
  91+ 8CCF 57                                   ld      d,a
  92+ 8CD0 19                                   add     hl,de
  93+ 8CD1 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  94+ 8CD2 B4                                   or      h
  95+ 8CD3 67                                   ld      h,a                         ; set the previou sign value
  96+ 8CD4 C9                                   ret
  97+ 8CD5
  98+ 8CD5 7C           StarsADDHLDESigned:     ld      a,h
  99+ 8CD6 E6 80                                and     SignOnly8Bit
 100+ 8CD8 47                                   ld      b,a                         ;save sign bit in b
 101+ 8CD9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 102+ 8CDA                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 102+ 8CDA FA F2 8C    >                        jp		m, .ADDHLDEOppSGN
 103+ 8CDD 78           .ADDHLDESameSigns:      ld      a,b
 104+ 8CDE B2                                   or      d
 105+ 8CDF                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 105+ 8CDF FA E4 8C    >                        jp		m, .ADDHLDESameNeg
 106+ 8CE2 19                                   add     hl,de
 107+ 8CE3 C9                                   ret
 108+ 8CE4 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 109+ 8CE5 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 110+ 8CE7 67                                   ld      h,a
 111+ 8CE8 7A                                   ld      a,d
 112+ 8CE9 E6 7F                                and     SignMask8Bit
 113+ 8CEB 57                                   ld      d,a
 114+ 8CEC 19                                   add     hl,de
 115+ 8CED 3E 80                                ld      a,SignOnly8Bit
 116+ 8CEF B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 117+ 8CF0 67                                   ld      h,a
 118+ 8CF1 C9                                   ret
 119+ 8CF2 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 120+ 8CF3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 121+ 8CF5 67                                   ld      h,a
 122+ 8CF6 7A                                   ld      a,d
 123+ 8CF7 E6 7F                                and     SignMask8Bit
 124+ 8CF9 57                                   ld      d,a
 125+ 8CFA B7                                   or      a
 126+ 8CFB ED 52                                sbc     hl,de
 127+ 8CFD 38 04                                jr      c,.ADDHLDEOppInvert
 128+ 8CFF 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 129+ 8D00 B4                                   or      h
 130+ 8D01 67                                   ld      h,a                         ; set the previou sign value
 131+ 8D02 C9                                   ret
 132+ 8D03              .ADDHLDEOppInvert:      NegHL
 132+ 8D03 AF          >                xor a
 132+ 8D04 95          >                sub l
 132+ 8D05 6F          >                ld l,a
 132+ 8D06 9F          >                sbc a,a
 132+ 8D07 94          >                sub h
 132+ 8D08 67          >                ld h,a
 133+ 8D09 78                                   ld      a,b
 134+ 8D0A EE 80                                xor     SignOnly8Bit                ; flip sign bit
 135+ 8D0C B4                                   or      h
 136+ 8D0D 67                                   ld      h,a                         ; recover sign
 137+ 8D0E C9                                   ret
 138+ 8D0F              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ 8D0F 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 140+ 8D11 78                                   ld      a,b
 141+ 8D12 32 20 95                             ld      (NumberOfStarsNOSTM),a
 142+ 8D15 21 6D 96                             ld      hl,varDust
 143+ 8D18 CD 56 8C     InitStarsLoop:          call    InitStarAtHL
 144+ 8D1B 10 FB                                djnz    InitStarsLoop
 145+ 8D1D C9                                   ret
 146+ 8D1E              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ 8D1E              StarsForward:          ; break
 148+ 8D1E 3A 20 95                             ld      a,(NumberOfStarsNOSTM)
 149+ 8D21 47                                   ld      b,a                                 ; get the number of stars to process
 150+ 8D22 FD 21 6D 96                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 151+ 8D26 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 152+ 8D27 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 153+ 8D2A 5F                                   ld      e,a
 154+ 8D2B 16 00                                ld      d,0                                 ; de = zhi/256
 155+ 8D2D 3A 1C 94                             ld      a,(DELTA)
 156+ 8D30 FE 00                                cp      0
 157+ 8D32 20 01                                jr      nz,.NormalSpeed
 158+ 8D34 3C                                   inc     a                                   ; so the is at lest some dust movement
 159+ 8D35 47           .NormalSpeed:           ld      b,a
 160+ 8D36 0E 00                                ld      c,0                                 ; bc = delta * 256
 161+ 8D38 CD 8E A3                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 162+ 8D3B                                      ShiftHLRight1
 162+ 8D3B CB 3C       >			   srl h
 162+ 8D3D CB 1D       >			   rr  l
 163+ 8D3F                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 163+ 8D3F CB 3C       >			   srl h
 163+ 8D41 CB 1D       >			   rr  l
 164+ 8D43 7D                                   ld      a,l                                 ;
 165+ 8D44 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 166+ 8D46 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 167+ 8D48 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 167+ 8D4C 66 05
 168+ 8D4E ED 5B 1D 94                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 169+ 8D52 CD 94 8C                             call    StarsSUBHLDESigned
 170+ 8D55                                      JumpOnBitSet h,7,ResetStar
 170+ 8D55 CB 7C       >                        bit 	7,h
 170+ 8D57 C2 AC 8E    >                        jp      nz,ResetStar
 171+ 8D5A FD 75 04 FD                          ld      (iy+4),hl
 171+ 8D5E 74 05
 172+ 8D60 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 172+ 8D64 66 01
 173+ 8D66 7C                                   ld      a,h                                 ;
 174+ 8D67 E6 7F                                and     $7F                                 ;
 175+ 8D69 57                                   ld      d,a                                 ; d = abs(x hi)
 176+ 8D6A DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 177+ 8D6C ED 30                                mul                                         ; de =  abs(x hi) * Q
 178+ 8D6E 7C                                   ld      a,h                                 ;
 179+ 8D6F E6 80                                and     $80                                 ;
 180+ 8D71 B2                                   or      d                                   ; set sign bit in d
 181+ 8D72 57                                   ld      d,a                                 ;
 182+ 8D73 CD D5 8C                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 183+ 8D76 7C                                   ld      a,h
 184+ 8D77 E6 7F                                and     $7F
 185+ 8D79                                      JumpIfAGTENusng $70, ResetStar
 185+ 8D79 FE 70       >                        cp     $70
 185+ 8D7B D2 AC 8E    >                        jp		nc,ResetStar
 186+ 8D7E FD 75 00 FD                          ld      (iy+0),hl                           ;
 186+ 8D82 74 01
 187+ 8D84 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 187+ 8D88 66 03
 188+ 8D8A 7C                                   ld      a,h                                 ;
 189+ 8D8B E6 7F                                and     $7F                                 ;
 190+ 8D8D 57                                   ld      d,a                                 ; d = abs(y hi)
 191+ 8D8E DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 192+ 8D90 ED 30                                mul                                         ; de =  abs(y hi) * Q
 193+ 8D92 7C                                   ld      a,h                                 ;
 194+ 8D93 E6 80                                and     $80                                 ;
 195+ 8D95 B2                                   or      d                                   ; set sign bit in d
 196+ 8D96 57                                   ld      d,a                                 ;
 197+ 8D97 CD D5 8C                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 198+ 8D9A 7C                                   ld      a,h
 199+ 8D9B E6 7F                                and     $7F
 200+ 8D9D                                      JumpIfAGTENusng $60, ResetStar
 200+ 8D9D FE 60       >                        cp     $60
 200+ 8D9F D2 AC 8E    >                        jp		nc,ResetStar
 201+ 8DA2 7C                                   ld      a,h
 202+ 8DA3 E6 80                                and     $80
 203+ 8DA5 20 06                                jr      nz,.NoSecondCheck
 204+ 8DA7 7C                                   ld      a,h
 205+ 8DA8                                      JumpIfAGTENusng $20, ResetStar
 205+ 8DA8 FE 20       >                        cp     $20
 205+ 8DAA D2 AC 8E    >                        jp		nc,ResetStar
 206+ 8DAD FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 206+ 8DB1 74 03
 207+ 8DB3              ; Now roll
 208+ 8DB3              ;  6. x = x - alpha * y / 256
 209+ 8DB3 2A DF 93     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 210+ 8DB6 7D                                   ld      a,l
 211+ 8DB7 FE 00                                cp      0
 212+ 8DB9 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 8DBB                                      ;break
 214+ 8DBB                                      ;ld      a,$80
 215+ 8DBB                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 216+ 8DBB E5                                   push    hl
 217+ 8DBC 7C                                   ld      a,h
 218+ 8DBD E6 80                                and     $80
 219+ 8DBF 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 8DC0 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 8DC1 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 8DC4 5F                                   ld      e,a
 223+ 8DC5 E6 80                                and     $80
 224+ 8DC7 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 8DC8 7B           .rxEEquABSignX:         ld      a,e
 226+ 8DC9 E6 7F                                and     $7F
 227+ 8DCB 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 8DCC ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 8DCE 79                                   ld      a,c
 230+ 8DCF A8                                   xor     b                                   ; handle muliple sign bits
 231+ 8DD0 B2                                   or      d
 232+ 8DD1 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 8DD2 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 8DD6 66 01
 234+ 8DD8 CD 94 8C                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 235+ 8DDB FD 75 00 FD                          ld      (iy+0),hl
 235+ 8DDF 74 01
 236+ 8DE1              ;  5. y = y + alpha * x / 256
 237+ 8DE1              .YRoll:                 ;break
 238+ 8DE1 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 8DE2 7C                                   ld      a,h
 240+ 8DE3 E6 80                                and     $80
 241+ 8DE5 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 242+ 8DE6 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 243+ 8DE7 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 244+ 8DEA 5F                                   ld      e,a
 245+ 8DEB E6 80                                and     $80
 246+ 8DED 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 247+ 8DEE 7B           .ryEEquABSignX:         ld      a,e
 248+ 8DEF E6 7F                                and     $7F
 249+ 8DF1 5F                                   ld      e,a                                 ; save abs x hi in e
 250+ 8DF2 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 251+ 8DF4 79                                   ld      a,c
 252+ 8DF5 A8                                   xor     b                                   ; handle muliple sign bits
 253+ 8DF6 B2                                   or      d
 254+ 8DF7 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 255+ 8DF8 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 255+ 8DFC 66 03
 256+ 8DFE CD D5 8C                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 257+ 8E01 FD 75 02 FD                          ld      (iy+2),hl
 257+ 8E05 74 03
 258+ 8E07 3A D2 93     .NoRoll:                ld      a,(BET1)
 259+ 8E0A FE 00                                cp      0
 260+ 8E0C 28 22                                jr      z,.NoPitch
 261+ 8E0E              ;  8. y = y - beta * 256
 262+ 8E0E 57           .YPitch:                ld      d,a                                 ; d = BET1
 263+ 8E0F FD 7E 02                             ld      a,(iy+2)
 264+ 8E12 5F                                   ld      e,a                                 ; e = Y HI
 265+ 8E13 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 266+ 8E15 5F                                   ld      e,a
 267+ 8E16 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 268+ 8E18                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 268+ 8E18 CB 23       >			   sla e
 268+ 8E1A CB 12       >			   rl  d
 269+ 8E1C 3A D4 93                             ld      a,(BET2FLIP)                        ; get inverted Sign
 270+ 8E1F B2                                   or      d
 271+ 8E20 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 272+ 8E21 FD 6E 02 FD                          ld      hl,(iy+2)
 272+ 8E25 66 03
 273+ 8E27 CD D5 8C                             call    StarsADDHLDESigned
 274+ 8E2A FD 75 02 FD                          ld      (iy+2),hl
 274+ 8E2E 74 03
 275+ 8E30              ; now work out screen pos
 276+ 8E30              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 277+ 8E30              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 278+ 8E30              ;        pop     de
 279+ 8E30               ;       call    ProjectStarXToScreen
 280+ 8E30                                      ;pop     de
 281+ 8E30              .NoPitch:
 282+ 8E30 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 283+ 8E33 6F                                   ld      l,a
 284+ 8E34 E6 7F                                and     $7F
 285+ 8E36                                      JumpOnBitSet l,7,StarNegXPt
 285+ 8E36 CB 7D       >                        bit 	7,l
 285+ 8E38 C2 41 8E    >                        jp      nz,StarNegXPt
 286+ 8E3B C6 80                                add     a,$80
 287+ 8E3D 4F                                   ld      c,a
 288+ 8E3E C3 46 8E                             jp      StarDoneX
 289+ 8E41 47           StarNegXPt:             ld      b,a
 290+ 8E42 3E 80                                ld      a,$80
 291+ 8E44 90                                   sub     b
 292+ 8E45 4F                                   ld      c,a
 293+ 8E46 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 294+ 8E49 6F                                   ld      l,a
 295+ 8E4A E6 7F                                and     $7F
 296+ 8E4C                                      JumpOnBitSet l,7,StarNegYPt
 296+ 8E4C CB 7D       >                        bit 	7,l
 296+ 8E4E C2 57 8E    >                        jp      nz,StarNegYPt
 297+ 8E51 C6 60                                add     a,$60
 298+ 8E53 47                                   ld      b,a
 299+ 8E54 C3 5C 8E                             jp      StarDoneY
 300+ 8E57 47           StarNegYPt:             ld      b,a
 301+ 8E58 3E 60                                ld      a,$60
 302+ 8E5A 90                                   sub     b
 303+ 8E5B 47                                   ld      b,a
 304+ 8E5C 3E FC        StarDoneY:              ld      a,$FC
 305+ 8E5E C5                                   push    bc
 306+ 8E5F              .DrawStar:              MMUSelectLayer2
 306+ 8E5F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 307+ 8E63 CD FF E0                             call    l2_plot_pixel
 308+ 8E66 FD 7E 05                             ld      a,(iy+5)
 309+ 8E69 C1                                   pop    bc
 310+ 8E6A                                      JumpIfAGTENusng $60,EndofStarsLoop
 310+ 8E6A FE 60       >                        cp     $60
 310+ 8E6C D2 9C 8E    >                        jp		nc,EndofStarsLoop
 311+ 8E6F 3E D8                                ld      a,$D8
 312+ 8E71 0C                                   inc     c
 313+ 8E72 C5                                   push    bc
 314+ 8E73                                      MMUSelectLayer2
 314+ 8E73 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 315+ 8E77 CD FF E0                             call    l2_plot_pixel
 316+ 8E7A FD 7E 05                             ld      a,(iy+5)
 317+ 8E7D C1                                   pop    bc
 318+ 8E7E                                      JumpIfAGTENusng $37,EndofStarsLoop
 318+ 8E7E FE 37       >                        cp     $37
 318+ 8E80 D2 9C 8E    >                        jp		nc,EndofStarsLoop
 319+ 8E83 3E B4                                ld      a,$B4
 320+ 8E85 04                                   inc     b
 321+ 8E86 C5                                   push    bc
 322+ 8E87                                      MMUSelectLayer2
 322+ 8E87 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 323+ 8E8B CD FF E0                             call    l2_plot_pixel
 324+ 8E8E FD 7E 05                             ld      a,(iy+5)
 325+ 8E91 C1                                   pop    bc
 326+ 8E92 3E B4                                ld      a,$B4
 327+ 8E94 0D                                   dec     c
 328+ 8E95                                      MMUSelectLayer2
 328+ 8E95 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ 8E99 CD FF E0                             call    l2_plot_pixel
 330+ 8E9C C1           EndofStarsLoop:         pop     bc                                      ;  0
 331+ 8E9D FD E5                                push    iy                                      ; +1
 332+ 8E9F E1                                   pop     hl                                      ;  0
 333+ 8EA0 ED 34 06 00                          add     hl,6
 334+ 8EA4 E5           NextStarLoop2:          push    hl                                      ; +1
 335+ 8EA5 FD E1                                pop     iy                                      ;  0
 336+ 8EA7 05                                   dec     b
 337+ 8EA8 C2 26 8D                             jp      nz,StarProcessLoop
 338+ 8EAB C9                                   ret
 339+ 8EAC              ResetStar:              ;break
 340+ 8EAC                                      ;pop     de
 341+ 8EAC C1                                   pop     bc                                      ; 0
 342+ 8EAD 3A 20 95                             ld      a,(NumberOfStarsNOSTM)
 343+ 8EB0 90                                   sub     b
 344+ 8EB1 57                                   ld      d,a
 345+ 8EB2 1E 06                                ld      e,6
 346+ 8EB4 ED 30                                mul
 347+ 8EB6 21 6D 96                             ld      hl,varDust
 348+ 8EB9 19                                   add     hl,de
 349+ 8EBA CD 56 8C                             call    InitStarAtHL
 350+ 8EBD C3 A4 8E                             jp      NextStarLoop2
 351+ 8EC0              ;----------------------------------------------------------------------------------------------------------------------------------
 352+ 8EC0 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 353+ 8EC3 FD 7E 01                             ld      a,(iy+1)
 354+ 8EC6 6F                                   ld      l,a
 355+ 8EC7 E6 7F                                and     $7F
 356+ 8EC9 47                                   ld      b,a
 357+ 8ECA CD 31 A3                             call    DIV16BCDivDEUNDOC
 358+ 8ECD 7D                                   ld      a,l
 359+ 8ECE                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 359+ 8ECE CB 7F       >                        bit 	7,a
 359+ 8ED0 C2 DB 8E    >                        jp      nz,StarXNegativePoint
 360+ 8ED3              ;StarXPositivePoint:									; x was positive result
 361+ 8ED3 2E 80                                ld          l,ScreenCenterX						;
 362+ 8ED5 26 00                                ld          h,0
 363+ 8ED7 09                                   add         hl,bc								; hl = Screen Centre + X
 364+ 8ED8 C3 E2 8E                             jp          StarStoreXPoint
 365+ 8EDB              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 366+ 8EDB 2E 80                                ld          l,ScreenCenterX
 367+ 8EDD 26 00                                ld          h,0
 368+ 8EDF                                      ClearCarryFlag
 368+ 8EDF B7          >                        or a
 369+ 8EE0 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 370+ 8EE2              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 371+ 8EE2 7D                                   ld          a,l
 372+ 8EE3 32 C5 96                             ld          (varStarX),a
 373+ 8EE6 C9                                   ret
 374+ 8EE7
 375+ 8EE7 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 376+ 8EEA FD 7E 03                             ld          a,(iy+3)
 377+ 8EED 6F                                   ld          l,a
 378+ 8EEE E6 7F                                and         $7F
 379+ 8EF0 47                                   ld          b,a
 380+ 8EF1 CD 31 A3                             call        DIV16BCDivDEUNDOC
 381+ 8EF4 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 382+ 8EF5                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 382+ 8EF5 CB 7F       >                        bit 	7,a
 382+ 8EF7 C2 02 8F    >                        jp      nz,StarNegativeYPoint
 383+ 8EFA                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 384+ 8EFA 2E 60                               ld          l,ScreenCenterY
 385+ 8EFC                                      ClearCarryFlag
 385+ 8EFC B7          >                        or a
 386+ 8EFD ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 387+ 8EFF C3 07 8F                             jp          StarStoreYPoint
 388+ 8F02              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 389+ 8F02 2E 60                                ld          l,ScreenCenterY
 390+ 8F04 26 00                                ld          h,0
 391+ 8F06 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 392+ 8F07              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 393+ 8F07 7D                                   ld          a,l
 394+ 8F08 32 C6 96                             ld          (varStarY),a
 395+ 8F0B C9                                   ret
 396+ 8F0C
 397+ 8F0C
# file closed: ./Universe/StarRoutines.asm
 803  8F0C              ;    include "Universe/move_object-MVEIT.asm"
 804  8F0C                  include "./ModelRender/draw_object.asm"
# file opened: ./ModelRender/draw_object.asm
   1+ 8F0C              JumpIfObjectIsPlanet:   MACRO target
   2+ 8F0C ~                                    ld a,(UbnkHullCopy)
   3+ 8F0C ~                                    bit 7,a
   4+ 8F0C ~                                    jp  nz,target
   5+ 8F0C                                      ENDM
   6+ 8F0C
   7+ 8F0C              SetMaxVisibility:       MACRO
   8+ 8F0C ~                                    ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
   9+ 8F0C ~                                    ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  10+ 8F0C                                      ENDM
  11+ 8F0C
  12+ 8F0C              JumpIfObjectOutsideFov: MACRO target
  13+ 8F0C ~            LL10CheckXInFoV:
  14+ 8F0C ~                                    ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  15+ 8F0C ~                                    ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  16+ 8F0C ~                                    or		a							    ; clear carry flag for sbc                                        ;         .
  17+ 8F0C ~                                    sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  18+ 8F0C ~                                    bit     7,h
  19+ 8F0C ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  20+ 8F0C ~            LL10CheckYInFoV:
  21+ 8F0C ~                                    ld		hl, (INWKyLo)                                                                                     ;         .
  22+ 8F0C ~                                    or		a							    ; clear carry flag                                                ;         .
  23+ 8F0C ~                                    sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  24+ 8F0C ~                                    bit     7,h
  25+ 8F0C ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  26+ 8F0C                                      ENDM
  27+ 8F0C
  28+ 8F0C              LL10AddGunNode:         MACRO
  29+ 8F0C ~                                    ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  30+ 8F0C ~                                    ld		c,a                                                                                               ;         if zhi = 0
  31+ 8F0C ~                                    ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  32+ 8F0C ~                                    ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  33+ 8F0C ~                                    ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  34+ 8F0C ~                                    add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  35+ 8F0C ~            MakeBothGunNodesVisible:
  36+ 8F0C ~                                    ld      (hl),a                          ; made both gun line notes visible always
  37+ 8F0C ~                                    inc     hl                              ;
  38+ 8F0C ~                                    ld      (hl),a                          ;
  39+ 8F0C                                      ENDM
  40+ 8F0C
  41+ 8F0C              JumpIfTooFarAway:       MACRO   target
  42+ 8F0C ~                                    ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  43+ 8F0C ~                                    ShiftHLDiv8                             ; z position / 8
  44+ 8F0C ~                                    ld      a,h                             ;
  45+ 8F0C ~                                    IfANotZeroGoto target                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  46+ 8F0C                                      ENDM
  47+ 8F0C
  48+ 8F0C              DisplayObject:
  49+ 8F0C              LL9:										; Draw object in current bank                                  ;;;; Display object LL9
  50+ 8F0C                 ; DEBUG JumpIfObjectIsPlanet LL25
  51+ 8F0C              ; .................................................................................................................................
  52+ 8F0C              LL9NotPlanet:
  53+ 8F0C                  SetMaxVisibility
  53+ 8F0C 3E 1F       >                        ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
  53+ 8F0E 32 BA 93    >                        ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  54+ 8F11              ;LL9TestRemoveShip:
  55+ 8F11              ;    JumpOnMemBitSet UbnkNweb,7,EraseOldLines; if bit 7 is set goto EraseOldLines                         ;;;;    goto EraseOldLines
  56+ 8F11              ; .................................................................................................................................
  57+ 8F11              LL9NoEraseLines:
  58+ 8F11                  JumpOnMemBitSet UBnkexplDsp,5,DoExplosionOrClear7 ; mask for bit 5, exploding, display explosion state|missiles  EE28 bit5 set, explosion ongoing
  58+ 8F11 3A 2A C0    >                        ld      a,(UBnkexplDsp)
  58+ 8F14 CB 6F       >                        bit 	5,a
  58+ 8F16 C2 41 8F    >                        jp      nz,DoExplosionOrClear7
  59+ 8F19                  JumpOnBitClear a,7,DoExplosionOrClear7  ; we now have it in A so EE28 bit7 clear, else Start blowing up!                      ;;;;
  59+ 8F19 CB 7F       >                        bit 	7,a
  59+ 8F1B CA 41 8F    >                        jp      z,DoExplosionOrClear7
  60+ 8F1E E6 3F        	and		$3F								; clear bits 7,6                                               ;;;; else
  61+ 8F20 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31                                                      ;;;;    clear bit 7 & 6 of INKW31
  62+ 8F23              ;...............................................................................................................................................................................
  63+ 8F23              LL9ZeroAccelRotCtr:
  64+ 8F23                  ldWriteZero UBnkAccel                   ; byte #28 accel (INF),Y                                       ;;;;    set UBnkAccel & UBnkrotZCounter to 0
  64+ 8F23 AF          >               xor      a
  64+ 8F24 32 27 C0    >               ld       (UBnkAccel),a
  65+ 8F27 32 29 C0     	ld		(UBnkrotZCounter),a				; byte #30 rotz counter (INF),Y                                ;;;;
  66+ 8F2A CD 03 CD     	call	EraseOldLines					; EE51 \ if bit3 set erase old lines in XX19 heap              ;;;;    gosub erase old lines (EE51)
  67+ 8F2D              ;...............................................................................................................................................................................
  68+ 8F2D              LL9SetExploRad:
  69+ 8F2D              	ldWriteConst 18,UbnKEdgeHeapCounter		; Counter for explosion radius                                 ;;;;    set explosion raidus XX19[1] to 18
  69+ 8F2D 3E 12       >               ld       a,18
  69+ 8F2F 32 F5 C2    >               ld       (UbnKEdgeHeapCounter),a
  70+ 8F32              	ldCopyByte ExplosionCtAddr,UbnkEdgeHeapBytes ; Hull byte#7 explosion of ship type e.g. &2A           ;;;;    set XX19 [2] to Explosion type for ship (i.e nbr of
  70+ 8F32 3A 05 C3    >               ld       a,(ExplosionCtAddr)
  70+ 8F35 32 F3 C2    >               ld       (UbnkEdgeHeapBytes),a
  71+ 8F38 CD FC 97         call    fillHeapRandom4Points                                                                          ;;;;    set first 4 bytes of XX19 Heap to random number      ::EE55
  72+ 8F3B 3A 13 C0         ld      a,(UBnKzsgn)                                                                                   ;;;;    set a to z pos sign
  73+ 8F3E C3 49 8F     	jp      ObjectInFront                                                                                  ;;;;    goto DoExplosion
  74+ 8F41              ;...............................................................................................................................................................................
  75+ 8F41              DoExplosionOrClear7:	                                                                                   ;;;;
  76+ 8F41              EE28:										; bit5 set do explosion, or bit7 clear, dont kill.             ;;;;   DoExplosion:If z ccordinate sign is +ve
  77+ 8F41              EE49:
  78+ 8F41              	JumpOnMemBitSet UBnKzsgn,7,TestToRemove ; if zSign is negative then its behind so see if we remove
  78+ 8F41 3A 13 C0    >                        ld      a,(UBnKzsgn)
  78+ 8F44 CB 7F       >                        bit 	7,a
  78+ 8F46 C2 B7 8F    >                        jp      nz,TestToRemove
  79+ 8F49              ;...............................................................................................................................................................................
  80+ 8F49              ObjectInFront:
  81+ 8F49              LL10:										; LL10	 object in front of you                                   ; if object z is > FarInFront
  82+ 8F49                  JumpIfMemGTENusng UBnKzhi,FarInFront,TestToRemove  ; LL14		\ test to remove object                               ;    else if abs(x) > z or abs(y) > z
  82+ 8F49 3A 12 C0    >                        ld     a,(UBnKzhi)
  82+ 8F4C FE C0       >                        cp     FarInFront
  82+ 8F4E D2 B7 8F    >                        jp	  nc,TestToRemove
  83+ 8F51              LL10CheckFov:
  84+ 8F51                  JumpIfObjectOutsideFov TestToRemove     ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8F51             >LL10CheckXInFoV:
  84+ 8F51 2A 0B C0    >                        ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  84+ 8F54 ED 5B 11 C0 >                        ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  84+ 8F58 B7          >                        or		a							    ; clear carry flag for sbc                                        ;         .
  84+ 8F59 ED 52       >                        sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  84+ 8F5B CB 7C       >                        bit     7,h
  84+ 8F5D CA B7 8F    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8F60             >LL10CheckYInFoV:
  84+ 8F60 2A 0E C0    >                        ld		hl, (INWKyLo)                                                                                     ;         .
  84+ 8F63 B7          >                        or		a							    ; clear carry flag                                                ;         .
  84+ 8F64 ED 52       >                        sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  84+ 8F66 CB 7C       >                        bit     7,h
  84+ 8F68 CA B7 8F    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8F6B              LookAtGunNode:
  86+ 8F6B                  LL10AddGunNode                                                                                                ;         NodeHeap[GunVertex, GunVertex+1] = 255
  86+ 8F6B 3A 04 C3    >                        ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  86+ 8F6E 4F          >                        ld		c,a                                                                                               ;         if zhi = 0
  86+ 8F6F 06 00       >                        ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  86+ 8F71 3E FF       >                        ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  86+ 8F73 21 BE C0    >                        ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  86+ 8F76 09          >                        add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  86+ 8F77             >MakeBothGunNodesVisible:
  86+ 8F77 77          >                        ld      (hl),a                          ; made both gun line notes visible always
  86+ 8F78 23          >                        inc     hl                              ;
  86+ 8F79 77          >                        ld      (hl),a                          ;
  87+ 8F7A              LL10TestTooFarAway:                         ; if zhi / 8 > 0 then its too far
  88+ 8F7A                  JumpIfTooFarAway SkipToAsFar            ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8F7A 2A 11 C0    >                        ld		hl,(UBnKzlo)                    ; hl = z position, by this point it must be positive
  88+ 8F7D             >                        ShiftHLDiv8                             ; z position / 8
  88+ 8F7D CB 3C       >			   srl h
  88+ 8F7F CB 1D       >			   rr  l
  88+ 8F81 CB 3C       >			   srl h
  88+ 8F83 CB 1D       >			   rr  l
  88+ 8F85 CB 3C       >			   srl h
  88+ 8F87 CB 1D       >			   rr  l
  88+ 8F89 7C          >                        ld      a,h                             ;
  88+ 8F8A             >                        IfANotZeroGoto SkipToAsFar                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8F8A FE 00       >				cp	0
  88+ 8F8C C2 A2 8F    >				jp	nz,SkipToAsFar
  89+ 8F8F              LL10CloseEnoughToDraw:
  90+ 8F8F              ; if zhi /16
  91+ 8F8F 7C               ld      a,h                             ; get zHi shifted again
  92+ 8F90 CB 1F            rr      a                               ; bring in hi bit0 from last shiftHLRight1
  93+ 8F92 CB 3F            srl     a                               ;
  94+ 8F94 CB 3F            srl     a                               ;
  95+ 8F96 CB 3F            srl     a                               ; zhi is now max 31
  96+ 8F98 32 8C C0         ld      (UBnkVisibility),a              ; set XX4 to result, If this occurs then it’s a guaranteed call to LL17 to draw.
  97+ 8F9B              ;    Note the use of hop for jump/branch instrunction Rather than hop being calc logic
  98+ 8F9B              ;    The original did a bransh on positive but 3 shift right logicalks means bit 7 can never be set
  99+ 8F9B              ObjectDrawForwards:
 100+ 8F9B CD 4A 90         call    DrawForwards
 101+ 8F9E C9               ret
 102+ 8F9F C3 9B 8F         jp      ObjectDrawForwards              ; LL17 guaranteed hop to Draw wireframe
 103+ 8FA2              ;...............................................................................................................................................................................
 104+ 8FA2              SkipToAsFar:
 105+ 8FA2              ; IF we are here then the ship may just be a dot, if its exploding thought that overrides dot
 106+ 8FA2              LL13:                                       ; hopped to as far
 107+ 8FA2              LL13DrawIfNearerThanDotDist:
 108+ 8FA2              ; if dot_distance >= z_hi then we can still draw ship
 109+ 8FA2                  JumpIfMemGTEMemusng DotAddr,UBnKzhi,ObjectDrawForwards
 109+ 8FA2 3A 0B C3    >                        ld   a,(DotAddr)
 109+ 8FA5 21 12 C0    >                        ld   hl,UBnKzhi
 109+ 8FA8 BE          >                        cp   (hl)
 109+ 8FA9 D2 9B 8F    >                        jp	  nc,ObjectDrawForwards
 110+ 8FAC              LL13DrawIfExplodingTest:
 111+ 8FAC              ; if exploding then draw ship
 112+ 8FAC 3A 2A C0         ld      a,(UBnkexplDsp)                 ; INWK+31	\ exploding/display state|missiles
 113+ 8FAF E6 20            and     $20                             ; mask bit 5 exploding
 114+ 8FB1 C2 9B 8F         jp      nz,ObjectDrawForwards           ; LL17 hop over to Draw wireframe or exploding
 115+ 8FB4              LL13TooFarPlotPoint:
 116+ 8FB4 C3 C9 8F         jp      ShipPlotPoint                   ; SHPPT	\ else ship plot point, up.
 117+ 8FB7              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ 8FB7              ;...............................................................................................................................................................................
 119+ 8FB7              ;;;LL14
 120+ 8FB7              ;;;   if bit5 of INWK31 is set								  ::LL14
 121+ 8FB7              ;;;      clear bit 3 of INWK31
 122+ 8FB7              ;;;      goto DO Explosion (DOEXP )
 123+ 8FB7              ;;;   end if
 124+ 8FB7              ;;;   if bit 3 of INKWK 31 is set                             ::EE51
 125+ 8FB7              ;;;      clear bt 3 of INK31
 126+ 8FB7              ;;;      goto Clear Lines from X19
 127+ 8FB7              ;;;   else
 128+ 8FB7              ;;;      return from subroutine
 129+ 8FB7              ;;;
 130+ 8FB7              TestToRemove:                                                                                             ;;;;
 131+ 8FB7              LL14:										; Test to remove object                                        ;;;;
 132+ 8FB7              	JumpOnMemBitSet UBnkexplDsp,5,EraseOldLines  ; bit5 currently exploding?                                      ;;;;
 132+ 8FB7 3A 2A C0    >                        ld      a,(UBnkexplDsp)
 132+ 8FBA CB 6F       >                        bit 	5,a
 132+ 8FBC C2 03 CD    >                        jp      nz,EraseOldLines
 133+ 8FBF              ; Ship is exploding
 134+ 8FBF              ; Not in documented code!!    JumpOnBitSet    a,7,EraseOldLines            ; bit7 ongoing explosion?                                      ;;;;
 135+ 8FBF E6 F7        	and		$F7								; clear bit3  - No longer being drawn
 136+ 8FC1 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31
 137+ 8FC4 C3 C7 8F     	jp		DOEXP							; DOEXP \ Explosion                                               ;
 138+ 8FC7              ;; EraseOldLines is in file EraseOldLines-EE51.asm
 139+ 8FC7
 140+ 8FC7              DOEXP: ; TODO
 141+ 8FC7 B7           	or a
 142+ 8FC8 C9           	ret
 143+ 8FC9
# file closed: ./ModelRender/draw_object.asm
 805  8FC9                  include "./ModelRender/draw_ship_point.asm"
# file opened: ./ModelRender/draw_ship_point.asm
   1+ 8FC9
   2+ 8FC9
   3+ 8FC9              ShipPlotPoint:
   4+ 8FC9              SHPPT:	                                    ; ship plot as point from LL10
   5+ 8FC9 CD 03 CD         call    EraseOldLines                   ; EE51	\ if bit3 set draw to erase lines in XX19 heap
   6+ 8FCC              SHPPT_ProjectToK3K4:
   7+ 8FCC CD D4 CC         call    Project                         ; PROJ	\ Project K+INWK(x,y)/z to K3,K4 for craft center
   8+ 8FCF              SHPTOnScreenTest:
   9+ 8FCF 2A 4A 94     	ld		hl,(varK3)						; get X Y ccords from K3 and K4
  10+ 8FD2 ED 5B 50 94  	ld		de,(varK4)
  11+ 8FD6 7C           	ld		a,h
  12+ 8FD7 B2           	or		d								;
  13+ 8FD8 20 27        	jr		nz,SHPTFinishup					; quick test to see if K3 or K4 hi are populated , if they are its too big (or negative coord)
  14+ 8FDA 7B           	ld		a,e								; k4 or Y lo
  15+ 8FDB              	JumpIfAGTENusng ViewHeight,SHPTFinishup	; off view port?
  15+ 8FDB FE 80       >                        cp     ViewHeight
  15+ 8FDD D2 01 90    >                        jp		nc,SHPTFinishup
  16+ 8FE0              SHPTInjectFalseLine:						; it will always be 1 line only
  17+ 8FE0 3E 01        	ld		a,1
  18+ 8FE2 32 F0 C2     	ld		(UbnkLineArrayLen),a
  19+ 8FE5 3E 04        	ld		a,4
  20+ 8FE7 32 F0 C2     	ld		(UbnkLineArrayLen),a
  21+ 8FEA 55           	ld		d,l                             ; de = Y lo X hi
  22+ 8FEB 21 FE C1     	ld		hl,UbnkLineArray				; head of array
  23+ 8FEE 72           	ld		(hl),d
  24+ 8FEF 23           	inc		hl
  25+ 8FF0 73           	ld		(hl),e
  26+ 8FF1 23           	inc		hl
  27+ 8FF2 72           	ld		(hl),d
  28+ 8FF3 23           	inc		hl
  29+ 8FF4 73           	ld		(hl),e
  30+ 8FF5 23           	inc		hl								; write out point as a line for clean up later
  31+ 8FF6              SHPTIsOnScreen:
  32+ 8FF6 43           	ld		b,e
  33+ 8FF7 4A           	ld		c,d								; bc = XY
  34+ 8FF8 3E FF        	ld		a,ShipColour
  35+ 8FFA              	MMUSelectLayer2
  35+ 8FFA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 8FFE CD FF E0         call    l2_plot_pixel
  37+ 9001              SHPTFinishup:
  38+ 9001 3A 2A C0         ld      a,(UBnkexplDsp)
  39+ 9004 E6 F7            and     $F7                             ;  clear bit3
  40+ 9006 32 2A C0         ld      (UBnkexplDsp),a                 ; set bit3 (to erase later) and plot as Dot display|missiles explosion state
  41+ 9009 C9               ret                                     ; now it will return to the caller of
  42+ 900A
  43+ 900A              ; ---------------------------------------------------------------------------------------------------------------------------------
  44+ 900A                  INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++900A              ; ---------------------------------------------------------------------------------------------------------------------------------
   2++900A 00           DrawLinesCounter		db	0
   3++900B              ; Initial tests look OK
   4++900B              LL155:;
   5++900B              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   6++900B                    ;break                                                                             ; ObjectInFront:
   7++900B 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   8++900D FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
   9++900F 3A F0 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  10++9012                                      ReturnIfAIsZero   						; No lines then bail out.
  10++9012 FE 00       >                 cp     0
  10++9014 C8          >                 ret    z
  11++9015 FD 67                                ld		iyh,a			                ; number of lines still to draw
  12++9017 21 FE C1                             ld		hl,UbnkLineArray
  13++901A              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  14++901A 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  15++901B 23                                   inc     hl
  16++901C 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  17++901D 23                                   inc     hl
  18++901E              ;;DEBUGTEST        push bc
  19++901E              ;;DEBUGTEST        push hl
  20++901E              ;;DEBUGTEST        push de
  21++901E              ;;DEBUGTEST        ld  a,$3F
  22++901E              ;;DEBUGTEST        MMUSelectLayer2
  23++901E              ;;DEBUGTEST        call    l2_plot_pixel
  24++901E              ;;DEBUGTEST        pop de
  25++901E              ;;DEBUGTEST        pop hl
  26++901E              ;;DEBUGTEST        pop bc
  27++901E 5E                                   ld      e,(hl)                          ; c = varX1
  28++901F 23                                   inc     hl
  29++9020 56                                   ld      d,(hl)                          ; de = point2 Y,X
  30++9021              ;;DEBUGTEST       push bc
  31++9021              ;;DEBUGTEST       push hl
  32++9021              ;;DEBUGTEST       push de
  33++9021              ;;DEBUGTEST       push de
  34++9021              ;;DEBUGTEST       pop  bc
  35++9021              ;;DEBUGTEST       ld  a,$3F
  36++9021              ;;DEBUGTEST       MMUSelectLayer2
  37++9021              ;;DEBUGTEST       call    l2_plot_pixel
  38++9021              ;;DEBUGTEST       pop de
  39++9021              ;;DEBUGTEST       pop hl
  40++9021              ;;DEBUGTEST       pop bc
  41++9021 23                                   inc     hl
  42++9022 E5                                   push	hl
  43++9023 FD E5                                push    iy
  44++9025 60                                   ld      h,b
  45++9026 69                                   ld      l,c
  46++9027                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  47++9027 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  48++9029                                      MMUSelectLayer2
  48++9029 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  49++902D CD EE E8                             call    LineHLtoDE
  50++9030 FD E1                                pop     iy
  51++9032 E1                                   pop	    hl
  52++9033 FD 25                                dec     iyh
  53++9035 20 E3                                jr		nz,DrawXX19ClippedLines
  54++9037 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  55++9038
# file closed: ././ModelRender/DrawLines.asm
  45+ 9038
  46+ 9038              ;
  47+ 9038              ;DrawLineBCtoDE:
  48+ 9038              ;LIONBCDE:
  49+ 9038              ;    -- Set colour etc
  50+ 9038              ;    call    l2_draw_diagonal:
  51+ 9038              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  52+ 9038
# file closed: ./ModelRender/draw_ship_point.asm
 806  9038                  include "./ModelRender/drawforwards-LL17.asm"
# file opened: ./ModelRender/drawforwards-LL17.asm
   1+ 9038              SetLastFaceVisible: MACRO
   2+ 9038 ~                                ld      a,$FF                       ; last normal is always visible                                                         ;;;
   3+ 9038 ~                                ld      (UbnkFaceVisArray+15),a     ; XX2+15                                                                                ;;;
   4+ 9038                                  ENDM
   5+ 9038
   6+ 9038 3E FF        SetLastFaceVisCall: ld      a,$FF
   7+ 903A 32 AF C0                         ld      (UbnkFaceVisArray+15),a
   8+ 903D C9                               ret
   9+ 903E
  10+ 903E              CheckIfExplodingCall:
  11+ 903E              ; DEBUG TODO turn into MACRO later
  12+ 903E              ; Sets Z flag to true if only some faces are visible
  13+ 903E              ; Clears Z flag if exploding so all faces should be rendered
  14+ 903E 3A 2A C0             ld      a,(UBnkexplDsp)                 ; INWK+31                                                                               ;;; If bit 5 of exploding state is clear
  15+ 9041              ;;DEBUG
  16+ 9041 F6 FF                or      $FF ; force bit 5 set so exploding
  17+ 9043 32 2A C0             ld      (UBnkexplDsp),a
  18+ 9046              ;;DEBUG
  19+ 9046 4F                   ld      c,a                         ; save explDsp into c                                                                   ;;;
  20+ 9047 E6 20                and     $20                         ; mask bit5 exploding                                                                   ;;;
  21+ 9049 C9                   ret
  22+ 904A
  23+ 904A
  24+ 904A              DrawForwardsIXL:
  25+ 904A              DrawForwards:
  26+ 904A              LL17:                                       ; draw Wireframe (including nodes exploding)                                            ;;; LL17 draw Wireframe
  27+ 904A              ; Copy the three orientation vectors into XX16
  28+ 904A CD 74 CF     LL15:   call    CopyRotmatToTransMat        ; Copy Ship rotation to XX16                                                                                          ;;; load object position to camera matrix XX16 			::LL91 (ish)
  29+ 904D              ;;;;LL21:   call    NormaliseTransMat       ; Normalise XX16
  30+ 904D CD 56 D1     LL91lc: call    LoadCraftToCamera           ; Load Ship Coords to XX18
  31+ 9050              ; ......................................................                                                                            ;;;
  32+ 9050              LastNormalAlwaysVisible:
  33+ 9050 CD 38 90             call    SetLastFaceVisCall          ; DEBUG TODO revert back to MACRO later                                                                                                          ;;; Set last Normal to visible FF regarless
  34+ 9053              ; HEre original does LDY 12
  35+ 9053              ; ......................................................                                                                            ;;; (Originally loaded faces count here and stored in B, but will remove to simplify code)
  36+ 9053              CheckIfExplodingState:
  37+ 9053 CD 3E 90             call    CheckIfExplodingCall
  38+ 9056 28 0C                jr      z,CullBackFaces             ; EE29 no, only Some visible                                                            ;;;    Goto EE29 - Only some faces visible
  39+ 9058              ; ......................................................                                                                            ;;; else
  40+ 9058              ItIsExploding:
  41+ 9058              MakeAllFacesVisible:                                                                                                                        ;;;    Set all faces in XX0 visible
  42+ 9058 CD BC CF             call    SetAllFacesVisible          ; code point EE30                                                                      ;;;
  43+ 905B 06 00                ld      b,0                         ; X = 0                                                                                 ;;;
  44+ 905D                      ldWriteZero LastNormalVisible       ; XX4  \ visibility                                                                     ;;;    XX4 visibility = 0
  44+ 905D AF          >               xor      a
  44+ 905E 32 BA 93    >               ld       (LastNormalVisible),a
  45+ 9061              LL41:                                       ; visibilities now set in XX2,X Transpose matrix.                                       ;;;
  46+ 9061 C3 67 90             jp      TransposeMatrix             ; LL42 \ jump to transpose matrix and onwards                                           ;;;    goto LL42
  47+ 9064              ; ......................................................                                                                            ;;;
  48+ 9064              CullBackFaces:
  49+ 9064              EE29Entry:
  50+ 9064 CD 05 D4             call    CullV2
  51+ 9067              ;-- All normals' visibilities now set in XX2,X                                                                                      ;;;
  52+ 9067              TransposeMatrix:
  53+ 9067              LL42:	                                    ; DO nodeX-Ycoords their comment  \  TrnspMat                                           ;;; ......................................................
  54+ 9067 CD 23 D0             call    InverseXX16
  55+ 906A
  56+ 906A
  57+ 906A CD B8 DA             call    ProcessNodes                ; Loop through and determine visibility based on faces and position
  58+ 906D              DrawResults:
  59+ 906D CD 8A DB             call    PrepLines                   ; LL72, process lines and clip
  60+ 9070 CD 0B 90             call    DrawLines                   ; Need to plot all lines
  61+ 9073 C9                   ret
  62+ 9074
# file closed: ./ModelRender/drawforwards-LL17.asm
 807  9074
 808  9074                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 9074
   2+ 9074 00           memfillvalue		DB 0
   3+ 9075 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 9079 7D
   4+ 907A 74 90        memfill_astrt  		DW memfillvalue
   5+ 907C 00 40        memfill_length 		DB $00,$40
   6+ 907E 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 9081 00 00        memfill_bstrt  		DB $00,$00
   8+ 9083 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 9087              memfill_cmd_len	  	EQU $ - memfill
  10+ 9087
  11+ 9087              memfill_dma:
  12+ 9087              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 9087              .set_fill_value:
  14+ 9087 32 74 90     	ld 		(memfillvalue),a
  15+ 908A              .set_target:
  16+ 908A 22 81 90     	ld		(memfill_bstrt),hl
  17+ 908D              .set_length:
  18+ 908D ED 53 7C 90  	ld		(memfill_length),de
  19+ 9091              .write_dma:
  20+ 9091 21 75 90     	ld 		hl, memfill
  21+ 9094 06 12        	ld 		b, memfill_cmd_len
  22+ 9096 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 9098 ED B3        	otir
  24+ 909A C9           	ret
  25+ 909B
# file closed: ./Hardware/memfill_dma.asm
 809  909B                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 909B
   2+ 909B 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 909F 7D
   3+ 90A0 00 00        memcopy_astrt  		DB $00,$00
   4+ 90A2 00 40        memcopy_length 		DB $00,$40
   5+ 90A4 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 90A7 00 00        memcopy_bstrt  		DB $00,$00
   7+ 90A9 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 90AD              memcopy_cmd_len	  	equ $ - memcopy
   9+ 90AD
  10+ 90AD              memcopy_dma:
  11+ 90AD              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 90AD              .set_target:
  13+ 90AD 22 A7 90     	ld		(memcopy_bstrt),hl
  14+ 90B0              .set_source:
  15+ 90B0 ED 53 A0 90  	ld		(memcopy_astrt),de
  16+ 90B4              .set_length:
  17+ 90B4 ED 43 A2 90  	ld		(memcopy_length),bc
  18+ 90B8              .write_dma:
  19+ 90B8 21 9B 90     	ld 		hl, memcopy
  20+ 90BB 06 12        	ld 		b, memcopy_cmd_len
  21+ 90BD 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 90BF ED B3        	otir
  23+ 90C1 C9           	ret
  24+ 90C2
# file closed: ./Hardware/memcopy_dma.asm
 810  90C2                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 90C2              ;
   2+ 90C2              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 90C2              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 90C2              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 90C2              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 90C2              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 90C2              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 90C2              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 90C2              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 90C2              ;
  11+ 90C2              ; Keyboard
  12+ 90C2              ;
  13+ 90C2              ;   0      1       2       3       4       5        6       7       8       9
  14+ 90C2              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 90C2              ;   10     11      12      13      14      15       16      17      18      19
  16+ 90C2              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 90C2              ;   20     21      22      23      24      25       26      27      28      29
  18+ 90C2              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 90C2              ;   30     31      32      33      34      35       36      37      38      39
  20+ 90C2              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 90C2              ;
  22+ 90C2              ; Default map
  23+ 90C2              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 90C2              ;   0          1           2             3              4           5           6           7           8           9
  25+ 90C2              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 90C2              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 90C2              ;                                                                                                       Find System
  28+ 90C2              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 90C2              ;   10         11          12            13             14          15          16          17          18          19
  30+ 90C2              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 90C2              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 90C2              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 90C2              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 90C2              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 90C2              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 90C2              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 90C2              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 90C2              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 90C2              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 90C2              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 90C2              ;              ResumeGame
  42+ 90C2
  43+ 90C2              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 90C2
  45+ 90C2              c_Pressed_Front         equ 0  * 2
  46+ 90C2              c_Pressed_Aft           equ 1  * 2
  47+ 90C2              c_Pressed_Left          equ 2  * 2
  48+ 90C2              c_Pressed_Right         equ 3  * 2
  49+ 90C2              c_Pressed_RollLeft      equ 4  * 2
  50+ 90C2              c_Pressed_RollRight     equ 5  * 2
  51+ 90C2              c_Pressed_Dive          equ 6  * 2
  52+ 90C2              c_Pressed_Climb         equ 7  * 2
  53+ 90C2              c_Pressed_Accellerate   equ 8  * 2
  54+ 90C2              c_Pressed_Decellerate   equ 9  * 2
  55+ 90C2              c_Pressed_FireLaser     equ 10 * 2
  56+ 90C2              c_Pressed_TargetMissle  equ 11 * 2
  57+ 90C2              c_Pressed_FireMissile   equ 12 * 2
  58+ 90C2              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 90C2              c_Pressed_ECM           equ 14 * 2
  60+ 90C2              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 90C2              c_Pressed_EscapePod     equ 16 * 2
  62+ 90C2              c_Pressed_DockingComp   equ 17 * 2
  63+ 90C2              c_Pressed_Hyperspace    equ 18 * 2
  64+ 90C2              c_Pressed_Distance      equ 19 * 2
  65+ 90C2              c_Pressed_HomeCursor    equ 20 * 2
  66+ 90C2              c_Pressed_Launch        equ 21 * 2
  67+ 90C2              c_Pressed_BuyCargo      equ 22 * 2
  68+ 90C2              c_Pressed_SellCargo     equ 23 * 2
  69+ 90C2              c_Pressed_Equip         equ 24 * 2
  70+ 90C2              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 90C2              c_Pressed_LocalChart    equ 26 * 2
  72+ 90C2              c_Pressed_MarketPrices  equ 27 * 2
  73+ 90C2              c_Pressed_Status        equ 28 * 2
  74+ 90C2              c_Pressed_Inventory     equ 29 * 2
  75+ 90C2              c_Pressed_GameSkip      equ 30 * 2
  76+ 90C2              c_Pressed_Save          equ 31 * 2
  77+ 90C2              c_Pressed_Freeze        equ 32 * 2
  78+ 90C2              c_Pressed_Resume        equ 33 * 2
  79+ 90C2              c_Pressed_Recentre      equ 34 * 2
  80+ 90C2              c_Pressed_Quit          equ 35 * 2
  81+ 90C2              c_Pressed_PlanetData    equ 36 * 2
  82+ 90C2              c_Pressed_CursorUp      equ 37 * 2
  83+ 90C2              c_Pressed_CursorDown    equ 38 * 2
  84+ 90C2              c_Pressed_Find          equ 39 * 2
  85+ 90C2
  86+ 90C2              ; half row 1
  87+ 90C2              VK_CAPS  				equ 0
  88+ 90C2              VK_Z  					equ 1
  89+ 90C2              VK_X  					equ 2
  90+ 90C2              VK_C  					equ 3
  91+ 90C2              VK_V  					equ 4
  92+ 90C2              ; half row 2
  93+ 90C2              VK_A  					equ 5
  94+ 90C2              VK_S  					equ 6
  95+ 90C2              VK_D  					equ 7
  96+ 90C2              VK_F  					equ 8
  97+ 90C2              VK_G  					equ 9
  98+ 90C2              ; half row 3
  99+ 90C2              VK_Q  					equ 10
 100+ 90C2              VK_W  					equ 11
 101+ 90C2              VK_E  					equ 12
 102+ 90C2              VK_R  					equ 13
 103+ 90C2              VK_T  					equ 14
 104+ 90C2              ; half row 4
 105+ 90C2              VK_1  					equ 15
 106+ 90C2              VK_2  					equ 16
 107+ 90C2              VK_3  					equ 17
 108+ 90C2              VK_4  					equ 18
 109+ 90C2              VK_5  					equ 19
 110+ 90C2              ; half row 5
 111+ 90C2              VK_0 					equ 20
 112+ 90C2              VK_9 					equ 21
 113+ 90C2              VK_8 					equ 22
 114+ 90C2              VK_7 					equ 23
 115+ 90C2              VK_6 					equ 24
 116+ 90C2              ; half row 6
 117+ 90C2              VK_P  					equ 25
 118+ 90C2              VK_O  					equ 26
 119+ 90C2              VK_I  					equ 27
 120+ 90C2              VK_U  					equ 28
 121+ 90C2              VK_Y  					equ 29
 122+ 90C2              ; half row 7
 123+ 90C2              VK_ENTER 				equ 30
 124+ 90C2              VK_L  					equ 31
 125+ 90C2              VK_K  					equ 32
 126+ 90C2              VK_J  					equ 33
 127+ 90C2              VK_H  					equ 34
 128+ 90C2              ; half row 8
 129+ 90C2              VK_SPACE 				equ 35
 130+ 90C2              VK_SYM  				equ 36
 131+ 90C2              VK_M  					equ 37
 132+ 90C2              VK_N  					equ 38
 133+ 90C2              VK_B  					equ 39
 134+ 90C2
 135+ 90C2              ;KeyboardMapping
 136+ 90C2              KeyCode_Front        	equ VK_1
 137+ 90C2              KeyCode_Aft          	equ VK_2
 138+ 90C2              KeyCode_Left         	equ VK_3
 139+ 90C2              KeyCode_Right        	equ VK_4
 140+ 90C2              KeyCode_RollLeft     	equ VK_O
 141+ 90C2              KeyCode_RollRight    	equ VK_P
 142+ 90C2              KeyCode_Dive         	equ VK_Q
 143+ 90C2              KeyCode_Climb        	equ VK_A
 144+ 90C2              KeyCode_Accellerate  	equ VK_W
 145+ 90C2              KeyCode_Decellerate  	equ VK_S
 146+ 90C2              KeyCode_FireLaser    	equ VK_SPACE
 147+ 90C2              KeyCode_TargetMissle 	equ VK_T
 148+ 90C2              KeyCode_FireMissile  	equ VK_F
 149+ 90C2              KeyCode_Find        	equ VK_F
 150+ 90C2              KeyCode_UnarmMissile 	equ VK_R
 151+ 90C2              KeyCode_ECM          	equ VK_E
 152+ 90C2              KeyCode_EnergyBomb   	equ VK_U
 153+ 90C2              KeyCode_EscapePod    	equ VK_CAPS
 154+ 90C2              KeyCode_DockingComp  	equ VK_N
 155+ 90C2              KeyCode_Hyperspace   	equ VK_H
 156+ 90C2              KeyCode_Distance     	equ VK_J
 157+ 90C2              KeyCode_HomeCursor   	equ VK_G
 158+ 90C2              KeyCode_Launch       	equ VK_L
 159+ 90C2              KeyCode_BuyCargo     	equ VK_B
 160+ 90C2              KeyCode_SellCargo    	equ VK_V
 161+ 90C2              KeyCode_Equip        	equ VK_C
 162+ 90C2              KeyCode_GalacticChrt 	equ VK_5
 163+ 90C2              KeyCode_LocalChart   	equ VK_6
 164+ 90C2              KeyCode_MarketPrices 	equ VK_7
 165+ 90C2              KeyCode_Status       	equ VK_8
 166+ 90C2              KeyCode_Inventory    	equ VK_9
 167+ 90C2              KeyCode_GameSkip     	equ VK_Z
 168+ 90C2              KeyCode_Save         	equ VK_O
 169+ 90C2              KeyCode_Freeze       	equ VK_B
 170+ 90C2              KeyCode_Resume       	equ VK_L
 171+ 90C2              KeyCode_Recentre     	equ VK_D
 172+ 90C2              KeyCode_Quit         	equ VK_Y
 173+ 90C2              KeyCode_PlanetData   	equ VK_0
 174+ 90C2              KeyCode_CursorUp        equ VK_Q
 175+ 90C2              KeyCode_CursorDown      equ VK_A
 176+ 90C2
 177+ 90C2 00 00 00...  Keys					DS	40
 178+ 90EA              c_KeyBoardLen 			equ $ - Keys
 179+ 90EA 00 00 00...  RawKeys					DS	8
 180+ 90F2 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 90F6 FE FB FE F7
 180+ 90FA FE EF FE DF
 180+ 90FE FE BF FE 7F
 181+ 9102              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 9102              ; of updating this table with the respective location to look up
 183+ 9102              ; key list sequence is in table above
 184+ 9102 D1 90 D2 90  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 9106 D3 90 D4 90
 184+ 910A DC 90
 185+ 910C DB 90 CC 90                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 9110 C7 90 CD 90
 185+ 9114 C8 90
 186+ 9116 E5 90 D0 90                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 911A CA 90 CF 90
 186+ 911E CE 90
 187+ 9120 DE 90 C2 90                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 9124 E8 90 E4 90
 187+ 9128 E3 90
 188+ 912A CB 90 E1 90                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 912E E9 90 C6 90
 188+ 9132 C5 90
 189+ 9134 D5 90 DA 90                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 9138 D9 90 D8 90
 189+ 913C D7 90
 190+ 913E C3 90 DC 90                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 9142 E9 90 E1 90
 190+ 9146 C9 90
 191+ 9148 DF 90 D6 90                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 914C CC 90 C7 90
 191+ 9150 CA 90
 192+ 9152
 193+ 9152 23 5A 58 43  ASCII_Map:           DB "#","Z","X","C","V"
 193+ 9156 56
 194+ 9157 41 53 44 46                       DB "A","S","D","F","G"
 194+ 915B 47
 195+ 915C 51 57 45 52                       DB "Q","W","E","R","T"
 195+ 9160 54
 196+ 9161 31 32 33 34                       DB "1","2","3","4","5"
 196+ 9165 35
 197+ 9166 30 39 38 37                       DB "0","9","8","7","6"
 197+ 916A 36
 198+ 916B 50 4F 49 55                       DB "P","O","I","U","Y"
 198+ 916F 59
 199+ 9170 3E 4C 4B 4A                       DB ">","L","K","J","H"
 199+ 9174 48
 200+ 9175 20 5E 4D 4E                       DB " ","^","M","N","B"
 200+ 9179 42
 201+ 917A
 202+ 917A
 203+ 917A              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 917A              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 917A              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 917A              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 917A              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 917A              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 917A              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 917A              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 917A              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 917A              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 917A              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 917A              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 917A              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 917A              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 917A              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 917A              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 917A              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 917A              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 917A              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 917A              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 917A              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 917A              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 917A              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 917A              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 917A              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 917A              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 917A              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 917A              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 917A              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 917A              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 917A              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 917A              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 917A              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 917A              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 917A              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 917A              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 917A              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 917A              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 917A              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 917A              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 917A
 244+ 917A
 245+ 917A              init_keyboard:
 246+ 917A 21 C2 90     	ld		hl,Keys
 247+ 917D 11 28 00     	ld		de, c_KeyBoardLen
 248+ 9180 3E 00        	ld		a,0
 249+ 9182 CD 87 90     	call	memfill_dma
 250+ 9185 C9           	ret
 251+ 9186
 252+ 9186              scan_keyboard:
 253+ 9186 21 EA 90     	ld		hl,RawKeys
 254+ 9189 11 F2 90     	ld		de,KeyAddrTab
 255+ 918C AF           	xor		a
 256+ 918D FD 2E 08     	ld		iyl,8
 257+ 9190 DD 21 C2 90      ld      ix,Keys
 258+ 9194              .PortReadLoop:
 259+ 9194 1A           	ld		a,(de)							; Set up BC as port to read
 260+ 9195 4F           	ld		c,a
 261+ 9196 13           	inc		de
 262+ 9197 1A               ld      a,(de)
 263+ 9198 47           	ld		b,a
 264+ 9199 13           	inc		de
 265+ 919A ED 78        	in		a,(c)							; read port to a
 266+ 919C 77           	ld		(hl),a							; set raw keys to value
 267+ 919D 23           	inc		hl								; and ready for next element
 268+ 919E 06 05        	ld		b,5								; loop all bits (there are only 5 keys to a group)
 269+ 91A0              .ProcessBitsLoop:
 270+ 91A0 CB 47        	bit		0,a								; is bit set
 271+ 91A2 28 07            jr      z,.SetKeyPressed
 272+ 91A4 08               ex      af,af'
 273+ 91A5 AF               xor     a
 274+ 91A6 C3 B2 91         jp      .SetKey
 275+ 91A9 20 0B        	jr		nz,.SkipKeySet
 276+ 91AB              .SetKeyPressed:
 277+ 91AB 08           	ex		af,af'
 278+ 91AC DD 7E 00         ld      a,(ix+0)
 279+ 91AF 3C               inc     a
 280+ 91B0 E6 03            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 281+ 91B2              .SetKey:
 282+ 91B2 DD 77 00     	ld		(ix+0),a							; Key Pressed
 283+ 91B5 08           	ex		af,af'
 284+ 91B6              .SkipKeySet:
 285+ 91B6 DD 23        	inc		ix								; move to next key
 286+ 91B8 CB 3F        	srl		a								; move next key into bit 0
 287+ 91BA 10 E4        	djnz	.ProcessBitsLoop				; Process all key group bits
 288+ 91BC FD 2D            dec     iyl
 289+ 91BE 20 D4            jr      nz,.PortReadLoop				; Read next input port
 290+ 91C0 C9           	ret
 291+ 91C1
 292+ 91C1              GetKeyStateAddressDE: MACRO
 293+ 91C1 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 294+ 91C1 ~                                  add     hl,a
 295+ 91C1 ~                                  ld      a,(hl)
 296+ 91C1 ~                                  ld      e,a
 297+ 91C1 ~                                  inc     hl
 298+ 91C1 ~                                  ld      a,(hl)
 299+ 91C1 ~                                  ld      d,a                             ; now de = address in keypress list
 300+ 91C1                                    ENDM
 301+ 91C1
 302+ 91C1
 303+ 91C1              ; call with a = c_Pressed key, will then read mapping
 304+ 91C1              wait_for_key_a_press:
 305+ 91C1                  GetKeyStateAddressDE
 305+ 91C1 21 02 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 305+ 91C4 ED 31       >                      add     hl,a
 305+ 91C6 7E          >                      ld      a,(hl)
 305+ 91C7 5F          >                      ld      e,a
 305+ 91C8 23          >                      inc     hl
 305+ 91C9 7E          >                      ld      a,(hl)
 305+ 91CA 57          >                      ld      d,a                             ; now de = address in keypress list
 306+ 91CB D5               push    de
 307+ 91CC              wait_for_key_press_loop:
 308+ 91CC CD 86 91         call    scan_keyboard
 309+ 91CF E1               pop     hl                              ; get key address into hl
 310+ 91D0 E5               push    hl
 311+ 91D1 7E               ld      a,(hl)
 312+ 91D2                  JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 312+ 91D2 FE 01       >                cp     1
 312+ 91D4 C2 CC 91    >                jp      nz,wait_for_key_press_loop
 313+ 91D7 E1               pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 314+ 91D8 C9               ret
 315+ 91D9
 316+ 91D9              wait_for_key_a_held:
 317+ 91D9                  GetKeyStateAddressDE
 317+ 91D9 21 02 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 317+ 91DC ED 31       >                      add     hl,a
 317+ 91DE 7E          >                      ld      a,(hl)
 317+ 91DF 5F          >                      ld      e,a
 317+ 91E0 23          >                      inc     hl
 317+ 91E1 7E          >                      ld      a,(hl)
 317+ 91E2 57          >                      ld      d,a                             ; now de = address in keypress list
 318+ 91E3 D5               push    de
 319+ 91E4              wait_for_key_a_held_loop:
 320+ 91E4 CD 86 91         call    scan_keyboard
 321+ 91E7 E1               pop     hl
 322+ 91E8 E5               push    hl
 323+ 91E9 7E               ld      a,(hl)
 324+ 91EA                  JumpIfALTNusng  2,wait_for_key_a_held_loop
 324+ 91EA FE 02       >                        cp      2
 324+ 91EC DA E4 91    >                        jp		c,wait_for_key_a_held_loop
 325+ 91EF E1               pop     hl
 326+ 91F0 C9               ret
 327+ 91F1
 328+ 91F1              get_key_a_state:                            ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 329+ 91F1                  GetKeyStateAddressDE
 329+ 91F1 21 02 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 329+ 91F4 ED 31       >                      add     hl,a
 329+ 91F6 7E          >                      ld      a,(hl)
 329+ 91F7 5F          >                      ld      e,a
 329+ 91F8 23          >                      inc     hl
 329+ 91F9 7E          >                      ld      a,(hl)
 329+ 91FA 57          >                      ld      d,a                             ; now de = address in keypress list
 330+ 91FB EB               ex      de,hl
 331+ 91FC 7E               ld      a,(hl)                          ; a = keystate
 332+ 91FD C9               ret
 333+ 91FE
 334+ 91FE              force_key_press:
 335+ 91FE                  GetKeyStateAddressDE
 335+ 91FE 21 02 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 9201 ED 31       >                      add     hl,a
 335+ 9203 7E          >                      ld      a,(hl)
 335+ 9204 5F          >                      ld      e,a
 335+ 9205 23          >                      inc     hl
 335+ 9206 7E          >                      ld      a,(hl)
 335+ 9207 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 9208 EB               ex      de,hl
 337+ 9209 3E 01            ld      a,1
 338+ 920B 77               ld      (hl),a
 339+ 920C C9               ret
 340+ 920D
 341+ 920D              is_key_pressed:                             ; returns z is set if pressed
 342+ 920D                  GetKeyStateAddressDE
 342+ 920D 21 02 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 9210 ED 31       >                      add     hl,a
 342+ 9212 7E          >                      ld      a,(hl)
 342+ 9213 5F          >                      ld      e,a
 342+ 9214 23          >                      inc     hl
 342+ 9215 7E          >                      ld      a,(hl)
 342+ 9216 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 9217 EB               ex      de,hl
 344+ 9218 7E               ld      a,(hl)                          ; a = keystate
 345+ 9219 FE 01            cp      1
 346+ 921B C9               ret
 347+ 921C
 348+ 921C              is_key_held:                                ; returns z is set if held
 349+ 921C                  GetKeyStateAddressDE
 349+ 921C 21 02 91    >                      ld      hl,KeyboardMap                  ; work our address to read from
 349+ 921F ED 31       >                      add     hl,a
 349+ 9221 7E          >                      ld      a,(hl)
 349+ 9222 5F          >                      ld      e,a
 349+ 9223 23          >                      inc     hl
 349+ 9224 7E          >                      ld      a,(hl)
 349+ 9225 57          >                      ld      d,a                             ; now de = address in keypress list
 350+ 9226 EB               ex      de,hl
 351+ 9227 7E               ld      a,(hl)                          ; a = keystate
 352+ 9228 E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 353+ 922A FE 02            cp      2
 354+ 922C C9               ret
 355+ 922D
 356+ 922D              is_any_key_pressed:
 357+ 922D 21 C2 90         ld      hl,Keys
 358+ 9230 06 28            ld      b,40
 359+ 9232 0E 00            ld      c,0
 360+ 9234              .KeyReadLoop:
 361+ 9234 7E               ld      a,(hl)
 362+ 9235 FE 01            cp      1
 363+ 9237 CA 41 92         jp      z,.KeyPressed
 364+ 923A 23               inc     hl
 365+ 923B 0C               inc     c
 366+ 923C 10 F6            djnz    .KeyReadLoop
 367+ 923E 3E FF            ld      a,$FF
 368+ 9240 C9               ret
 369+ 9241              .KeyPressed:
 370+ 9241 79               ld      a,c
 371+ 9242 C9               ret
 372+ 9243
 373+ 9243              is_any_key_held:
 374+ 9243 21 C2 90         ld      hl,Keys
 375+ 9246 06 28            ld      b,40
 376+ 9248 0E 00            ld      c,0
 377+ 924A              .KeyReadLoop:
 378+ 924A 7E               ld      a,(hl)
 379+ 924B E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 380+ 924D FE 02            cp      2
 381+ 924F CA 59 92         jp      z,.KeyPressed
 382+ 9252 23               inc     hl
 383+ 9253 0C               inc     c
 384+ 9254 10 F4            djnz    .KeyReadLoop
 385+ 9256 3E FF            ld      a,$FF
 386+ 9258 C9               ret
 387+ 9259              .KeyPressed:
 388+ 9259 79               ld      a,c
 389+ 925A C9               ret
 390+ 925B
 391+ 925B
 392+ 925B 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 393+ 9279 00                                   DB  0               ; end of string marker as a safety
 394+ 927A 00           InputCursor             DB  0
 395+ 927B 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 396+ 927C 00           InputChanged            DB  0
 397+ 927D              InputLimit              EQU 20
 398+ 927D
 399+ 927D              keyboard_copy_input_to_de:
 400+ 927D 21 5B 92         ld      hl,InputString
 401+ 9280 3A 7A 92         ld      a,(InputCursor)
 402+ 9283 FE 00            cp      0
 403+ 9285 28 05            jr      z,.NoString
 404+ 9287 4F               ld      c,a
 405+ 9288 06 00            ld      b,0
 406+ 928A ED B0            ldir
 407+ 928C              .NoString
 408+ 928C 3E 00            ld      a,0
 409+ 928E 12               ld      (de),a
 410+ 928F C9               ret
 411+ 9290
 412+ 9290              initInputText:
 413+ 9290 AF               xor     a
 414+ 9291 32 7A 92         ld      (InputCursor),a
 415+ 9294 32 7B 92         ld      (EnterPressed),a
 416+ 9297 32 7C 92         ld      (InputChanged),a
 417+ 929A 21 5B 92         ld      hl,InputString
 418+ 929D 06 1E            ld      b,30
 419+ 929F              .wipeloop:
 420+ 929F 77               ld      (hl),a
 421+ 92A0 23               inc     hl
 422+ 92A1 10 FC            djnz    .wipeloop
 423+ 92A3 C9               ret
 424+ 92A4
 425+ 92A4              InputName:
 426+ 92A4 AF               xor     a
 427+ 92A5 32 7C 92         ld      (InputChanged),a
 428+ 92A8 CD 2D 92         call    is_any_key_pressed
 429+ 92AB FE FF            cp      $FF
 430+ 92AD C8               ret     z
 431+ 92AE              .KeyPressed:
 432+ 92AE 4F               ld      c,a
 433+ 92AF 3A 7A 92         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 434+ 92B2 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 435+ 92B4 28 0B            jr      z,.DeleteOrEnterOnly            ;
 436+ 92B6 21 52 91         ld      hl,ASCII_Map
 437+ 92B9 79               ld      a,c
 438+ 92BA ED 31            add     hl,a
 439+ 92BC 7E               ld      a,(hl)
 440+ 92BD FE 41            cp      "A"
 441+ 92BF 30 15            jr      nc,.AlphaPressed
 442+ 92C1              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 443+ 92C1 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 444+ 92C3 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 445+ 92C5 FE 3E            cp      ">"         ; ENTER
 446+ 92C7 28 24            jr      z,.EnterPressed
 447+ 92C9 FE 23            cp      "#"         ; CAPS
 448+ 92CB 28 33            jr      z,.CapsPressed
 449+ 92CD FE 5E            cp      "^"         ; SYMBOLSHIFT
 450+ 92CF 28 2F            jr      z,.SymbolPressed
 451+ 92D1 FE 20            cp      " "         ; space
 452+ 92D3 28 2B            jr      z,.SpacePressed
 453+ 92D5 C9               ret
 454+ 92D6              .AlphaPressed:
 455+ 92D6 47               ld      b,a
 456+ 92D7 3A 7A 92         ld      a,(InputCursor)
 457+ 92DA 4F               ld      c,a
 458+ 92DB 21 5B 92         ld      hl,InputString
 459+ 92DE ED 31            add     hl,a
 460+ 92E0 78               ld      a,b
 461+ 92E1 70               ld      (hl),b
 462+ 92E2 79               ld      a,c
 463+ 92E3 21 7A 92         ld      hl,InputCursor
 464+ 92E6 34               inc     (hl)
 465+ 92E7 3E FF            ld      a,$FF
 466+ 92E9 32 7C 92         ld      (InputChanged),a
 467+ 92EC C9               ret
 468+ 92ED              .EnterPressed:
 469+ 92ED 3A 7A 92         ld      a,(InputCursor)
 470+ 92F0 3C               inc     a
 471+ 92F1 21 5B 92         ld      hl,InputString
 472+ 92F4 ED 31            add     hl,a
 473+ 92F6 AF               xor     a
 474+ 92F7 77               ld      (hl),a
 475+ 92F8 3D               dec     a
 476+ 92F9 32 7B 92         ld      (EnterPressed),a
 477+ 92FC 32 7C 92         ld      (InputChanged),a
 478+ 92FF C9               ret
 479+ 9300              .CheckShiftDelete:
 480+ 9300              .CapsPressed:                               ; act as a delete key for now
 481+ 9300              .SymbolPressed:
 482+ 9300              .SpacePressed:
 483+ 9300 3A 7A 92         ld      a,(InputCursor)
 484+ 9303 FE 00            cp      0
 485+ 9305 C8               ret     z
 486+ 9306 3D               dec     a
 487+ 9307 32 7A 92         ld      (InputCursor),a
 488+ 930A 21 5B 92         ld      hl,InputString
 489+ 930D ED 31            add     hl,a
 490+ 930F AF               xor     a
 491+ 9310 77               ld      (hl),a
 492+ 9311 3E FF            ld      a,$FF
 493+ 9313 32 7C 92         ld      (InputChanged),a
 494+ 9316 C9               ret
 495+ 9317
 496+ 9317              MovementKeyTest:
 497+ 9317              ;DBG1:jp dbg1
 498+ 9317              ;dbx1:
 499+ 9317 AF               xor     a
 500+ 9318 32 2A 94         ld      (CursorKeysPressed),a
 501+ 931B 3A 2C 94         ld      a,(MenuIdMax)
 502+ 931E E6 FC            and     $FC
 503+ 9320 20 26            jr      nz,CursorKeys
 504+ 9322              ClimbDiveKeys:
 505+ 9322 2A 10 91         ld      hl,(addr_Pressed_Climb)
 506+ 9325 7E               ld      a,(hl)
 507+ 9326                  IfAIsZeroGoto ScanDiveKey
 507+ 9326 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 507+ 9327 CA 35 93    >				jp	z,ScanDiveKey
 508+ 932A 3A 2A 94         ld      a,(CursorKeysPressed)
 509+ 932D F6 80            or      $80
 510+ 932F 32 2A 94         ld      (CursorKeysPressed),a
 511+ 9332 C3 6B 93         jp      ScanLeftKey
 512+ 9335              ScanDiveKey:
 513+ 9335 2A 0E 91         ld      hl,(addr_Pressed_Dive)
 514+ 9338 7E               ld      a,(hl)
 515+ 9339                  IfAIsZeroGoto ScanLeftKey
 515+ 9339 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 515+ 933A CA 6B 93    >				jp	z,ScanLeftKey
 516+ 933D 3A 2A 94         ld      a,(CursorKeysPressed)
 517+ 9340 F6 40            or      $40
 518+ 9342 32 2A 94         ld      (CursorKeysPressed),a
 519+ 9345 C3 6B 93         jp      ScanLeftKey
 520+ 9348              CursorKeys:
 521+ 9348 2A 4C 91         ld      hl,(addr_Pressed_CursorUp)
 522+ 934B 7E               ld      a,(hl)
 523+ 934C                  IfAIsZeroGoto ScanCursorDownKey
 523+ 934C A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 523+ 934D CA 5B 93    >				jp	z,ScanCursorDownKey
 524+ 9350 3A 2A 94         ld      a,(CursorKeysPressed)
 525+ 9353 F6 80            or      $80
 526+ 9355 32 2A 94         ld      (CursorKeysPressed),a
 527+ 9358 C3 6B 93         jp      ScanLeftKey
 528+ 935B              ScanCursorDownKey
 529+ 935B 2A 4E 91         ld      hl,(addr_Pressed_CursorDown)
 530+ 935E 7E               ld      a,(hl)
 531+ 935F                  IfAIsZeroGoto ScanLeftKey
 531+ 935F A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 531+ 9360 CA 6B 93    >				jp	z,ScanLeftKey
 532+ 9363 3A 2A 94         ld      a,(CursorKeysPressed)
 533+ 9366 F6 40            or      $40
 534+ 9368 32 2A 94         ld      (CursorKeysPressed),a
 535+ 936B              ScanLeftKey:
 536+ 936B 2A 0A 91         ld      hl,(addr_Pressed_RollLeft)
 537+ 936E 7E               ld      a,(hl)
 538+ 936F                  IfAIsZeroGoto ScanRightKey
 538+ 936F A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 538+ 9370 CA 7C 93    >				jp	z,ScanRightKey
 539+ 9373 3A 2A 94         ld      a,(CursorKeysPressed)
 540+ 9376 F6 20            or      $20
 541+ 9378 32 2A 94         ld      (CursorKeysPressed),a
 542+ 937B C9               ret
 543+ 937C              ScanRightKey:
 544+ 937C 2A 0C 91         ld      hl,(addr_Pressed_RollRight)
 545+ 937F 7E               ld      a,(hl)
 546+ 9380                  IfAIsZeroGoto ScanHomeKey
 546+ 9380 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 546+ 9381 CA 8D 93    >				jp	z,ScanHomeKey
 547+ 9384 3A 2A 94         ld      a,(CursorKeysPressed)
 548+ 9387 F6 10            or      $10
 549+ 9389 32 2A 94         ld      (CursorKeysPressed),a
 550+ 938C C9               ret
 551+ 938D              ScanHomeKey:
 552+ 938D 2A 2A 91         ld      hl,(addr_Pressed_HomeCursor)
 553+ 9390 7E               ld      a,(hl)
 554+ 9391                  IfAIsZeroGoto ScanRecentreKey
 554+ 9391 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 554+ 9392 CA 9E 93    >				jp	z,ScanRecentreKey
 555+ 9395 3A 2A 94         ld      a,(CursorKeysPressed)
 556+ 9398 F6 08            or      $08
 557+ 939A 32 2A 94         ld      (CursorKeysPressed),a
 558+ 939D C9               ret
 559+ 939E              ScanRecentreKey:
 560+ 939E 2A 46 91         ld      hl,(addr_Pressed_Recentre)
 561+ 93A1 7E               ld      a,(hl)
 562+ 93A2                  ReturnIfAIsZero
 562+ 93A2 FE 00       >                 cp     0
 562+ 93A4 C8          >                 ret    z
 563+ 93A5 3A 2A 94         ld      a,(CursorKeysPressed)
 564+ 93A8 F6 04            or      $04
 565+ 93AA 32 2A 94         ld      (CursorKeysPressed),a
 566+ 93AD C9               ret
 567+ 93AE
 568+ 93AE
# file closed: ./Hardware/keyboard.asm
 811  93AE
 812  93AE                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 93AE              ;Contants
   2+ 93AE
   3+ 93AE              SignMask8Bit		equ %01111111
   4+ 93AE              SignMask16Bit		equ %0111111111111111
   5+ 93AE              SignOnly8Bit		equ $80
   6+ 93AE              SignOnly16Bit		equ $8000
   7+ 93AE
   8+ 93AE              ConstPi				equ $80
   9+ 93AE              ConstNorm           equ 197
  10+ 93AE
  11+ 93AE              ;Text Tokens
  12+ 93AE              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 93AE              BrabenBellToken 	equ $0D
  14+ 93AE              AcorToken			equ $0C
  15+ 93AE
  16+ 93AE              ; Intro Screen
  17+ 93AE              TitleShip			equ	$8C
  18+ 93AE              RotationUnity		equ $60
  19+ 93AE              DBCheckCode			equ $DB
  20+ 93AE              MaxVisibility		equ $1F
  21+ 93AE              FarInFront			equ $C0
  22+ 93AE
  23+ 93AE              ; Universe Managment
  24+ 93AE              ShipTypeStation     equ 2
  25+ 93AE              ShipTypeMissile     equ 1
  26+ 93AE              ShipTypeNormal      equ 0
  27+ 93AE
  28+ 93AE              MaxNumberOfStars	equ 11
  29+ 93AE              UniverseListSize    equ	12
  30+ 93AE              ShipTypeSize		equ	32 			;??????? just a guess for now
  31+ 93AE              ShipSST				equ 4			; its a space station
  32+ 93AE              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  33+ 93AE              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  34+ 93AE              ShipCountMax		equ	2			; For now just 2 ships to debug
  35+ 93AE              LineLimitPerShip	equ 70			; Max lines per ship
  36+ 93AE              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  37+ 93AE              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  38+ 93AE              PlayerDocked		equ	$FF
  39+ 93AE
  40+ 93AE              ; Memory page managment	(Refers to a memory slot as a place to access data)
  41+ 93AE              ShipDataSlot		equ	6			; this may move into rom swap out space later
  42+ 93AE              UniverseObjectSlot	equ	7
  43+ 93AE
  44+ 93AE              KeyForwardsView		equ	$20
  45+ 93AE
  46+ 93AE              ; Ship Data
  47+ 93AE              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  48+ 93AE              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  49+ 93AE              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  50+ 93AE              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  51+ 93AE              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  52+ 93AE              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  53+ 93AE              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  54+ 93AE              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  55+ 93AE              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  56+ 93AE              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  57+ 93AE              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  58+ 93AE              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  59+ 93AE              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  60+ 93AE              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  61+ 93AE              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  62+ 93AE              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  63+ 93AE              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  64+ 93AE              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  65+ 93AE              ;;;;00 00			 EQUW 0     \ type 18 is
  66+ 93AE              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  67+ 93AE              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  68+ 93AE              ;;;;00 00			 EQUW 0     \ type 21 is
  69+ 93AE              ;;;;00 00			 EQUW 0     \ type 22 is
  70+ 93AE              ;;;;00 00			 EQUW 0     \ type 23 is
  71+ 93AE              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  72+ 93AE              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  73+ 93AE              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  74+ 93AE              ;;;;00 00			 EQUW 0     \ type 27 is
  75+ 93AE              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  76+ 93AE              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  77+ 93AE              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  78+ 93AE              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  79+ 93AE              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  80+ 93AE              ;;;;			\ NEWB examples
  81+ 93AE              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  82+ 93AE              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  83+ 93AE              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  84+ 93AE              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  85+ 93AE              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  86+ 93AE
# file closed: ./Variables/constant_equates.asm
 813  93AE                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 93AE              ;	PAGE 0 Map to variable anmes
   2+ 93AE              ;	PAGE 0 Map to variable anmes
   3+ 93AE              ;
   4+ 93AE              ;
   5+ 93AE              ;
   6+ 93AE              ;	06		T1
   7+ 93AE              ;	07
   8+ 93AE              ;	08		SC1					Screen Hi
   9+ 93AE              ;	09							XX16 Matrix
  10+ 93AE              ;	0A							XX16+1
  11+ 93AE              ;	0B							XX16+2
  12+ 93AE              ;	0C							XX16+3
  13+ 93AE              ;	0D                          XX16+4
  14+ 93AE              ;	0E                          XX16+5
  15+ 93AE              ;	0F							XX16+6
  16+ 93AE              ;	10		varP				XX16+7
  17+ 93AE              ;	11		varP				XX16+8
  18+ 93AE              ;	12                          XX16+9
  19+ 93AE              ;	13                          XX16+10
  20+ 93AE              ;	14							XX16+11
  21+ 93AE              ;	15                          XX16+12
  22+ 93AE              ;	16                          XX16+13
  23+ 93AE              ;	17                          XX16+14
  24+ 93AE              ;	17                          XX16+14
  25+ 93AE              ;	18                          XX16+15
  26+ 93AE              ;	19
  27+ 93AE              ;	1A
  28+ 93AE              ;	1B
  29+ 93AE              ;	1C
  30+ 93AE              ;	1D
  31+ 93AE              ;	1E							XX0
  32+ 93AE              ;	1F                          XX0+1
  33+ 93AE              ;	20		INF                 XX0+2
  34+ 93AE              ;	21      INF+1               XX0+3
  35+ 93AE              ;	22      varV                XX0+4
  36+ 93AE              ;	23      varV +1             XX0+5
  37+ 93AE              ;	24		XXlo                XX0+6
  38+ 93AE              ;	25		XXHi
  39+ 93AE              ;	26		YYlo
  40+ 93AE              ;	27		YYHi
  41+ 93AE              ;	28
  42+ 93AE              ;	29
  43+ 93AE              ;	2A		BETA (pitch done)
  44+ 93AE              ;	2B		BET1 lower7 magnitude
  45+ 93AE              ;	2C		XC
  46+ 93AE              ;	2D		YC
  47+ 93AE              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 93AE              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 93AE              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 93AE              ;	30		ECM Active
  51+ 93AE              ;	31		ALP1
  52+ 93AE              ;	32		ALP2
  53+ 93AE              ;	33		ALP2FLIP
  54+ 93AE
  55+ 93AE              ;	36		Z1					XX15+2yscaled
  56+ 93AE              ;	37		                    XX15+3ysign
  57+ 93AE              ;	38		                    XX15+4zscaled
  58+ 93AE              ;	39							XX15+5zsign
  59+ 93AE              ;	3A		XX12				xplot for star
  60+ 93AE              ;	3B
  61+ 93AE              ;	3C
  62+ 93AE              ;	3D
  63+ 93AE              ;	3E
  64+ 93AE              ;	3F
  65+ 93AE              ;	40		varKlo
  66+ 93AE              ;	41		varKmid
  67+ 93AE              ;	42		varKHi
  68+ 93AE              ;	43		varKVeryHi+Sign
  69+ 93AE              ;	44
  70+ 93AE              ;	45		MSTG				MissileTarget
  71+ 93AE              ;	46		INWK				; Inner working space of 37 bytes
  72+ 93AE              ;	47		INWK
  73+ 93AE              ;	48		INWK
  74+ 93AE              ;	49		INWK
  75+ 93AE              ;	4A		INWK
  76+ 93AE              ;	4B		INWK
  77+ 93AE              ;	4C		INWK
  78+ 93AE              ;	4D		INWK
  79+ 93AE              ;	4E		INWK
  80+ 93AE              ;	4F		INWK+9
  81+ 93AE              ;	50		INWK
  82+ 93AE              ;	51		INWK
  83+ 93AE              ;	52		INWK
  84+ 93AE              ;	53		INWK
  85+ 93AE              ;	54		INWK
  86+ 93AE              ;	55		INWK
  87+ 93AE              ;	56		INWK
  88+ 93AE              ;	57		INWK
  89+ 93AE              ;	58		INWK
  90+ 93AE              ;	59		INWK
  91+ 93AE              ;	5A		INWK
  92+ 93AE              ;	5B		INWK
  93+ 93AE              ;	5C		INWK
  94+ 93AE              ;	5D		INWK
  95+ 93AE              ;	5E		INWK
  96+ 93AE              ;	5F		INWK
  97+ 93AE              ;	60		INWK
  98+ 93AE              ;	61		INWK
  99+ 93AE              ;	62		INWK
 100+ 93AE              ;	63		INWK
 101+ 93AE              ;	64		INWK
 102+ 93AE              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 93AE              ;	66		INWK
 104+ 93AE              ;	67		INWK				XX19
 105+ 93AE              ;	68		INWK
 106+ 93AE              ;	69		INWK
 107+ 93AE              ;	6A		INWK36
 108+ 93AE              ;	6B
 109+ 93AE              ;	6C		QQ15				Current Seed
 110+ 93AE              ;	6D		QQ15+1
 111+ 93AE              ;	6E		QQ15+2
 112+ 93AE              ;	6F		QQ15+3
 113+ 93AE              ;	70		QQ15+4
 114+ 93AE              ;	71
 115+ 93AE              ;	72		XX18   xlo			QQ17
 116+ 93AE              ;	73		XX18+1 xhi
 117+ 93AE              ;	74		XX18+2 xsgn
 118+ 93AE              ;	75		XX18   ylo
 119+ 93AE              ;	76		XX18+1 yhi
 120+ 93AE              ;	77		XX18+2 ysgn
 121+ 93AE              ;	78		XX18   zlo
 122+ 93AE              ;	79		XX18+1 zhi
 123+ 93AE              ;	7A		XX18+2 zsgn
 124+ 93AE              ;	7B		BET2				Pitch Sign
 125+ 93AE              ;	7C		BET2FLIP
 126+ 93AE              ;	7D		DELTA
 127+ 93AE              ;	7E		DELT4Lo
 128+ 93AE              ;	7F		DELT4Hi
 129+ 93AE              ;	80
 130+ 93AE              ;	81		varQ
 131+ 93AE              ;	82		varR
 132+ 93AE              ;	83		varS
 133+ 93AE              ;	84		XSAV
 134+ 93AE              ;	85		YSAV
 135+ 93AE              ;	86		XX17
 136+ 93AE              ;	87		MenuIdMax		QQ11
 137+ 93AE              ;	88		ZZDust
 138+ 93AE              ;	89
 139+ 93AE              ;	8A		MCNT			Move Count
 140+ 93AE              ;	8B		ALPHA
 141+ 93AE              ;	8C		TYPE
 142+ 93AE              ;	8D
 143+ 93AE              ;	8E		DockedFlag		QQ12
 144+ 93AE              ;	8F
 145+ 93AE              ;	96		XX4				Nbr of Normals Visible
 146+ 93AE              ;
 147+ 93AE              ;   9F      POINT
 148+ 93AE              ;	D0
 149+ 93AE              ;	D1		varT
 150+ 93AE              ;array list of each face during draw flagged visible or not
 151+ 93AE              ;	D2      XX2
 152+ 93AE              ;	D3      XX2+1
 153+ 93AE              ;	D4      XX2+2
 154+ 93AE              ;	D5      XX2+3
 155+ 93AE              ;	D6      XX2+4
 156+ 93AE              ;	D7      XX2+5
 157+ 93AE              ;	D8      XX2+6
 158+ 93AE              ;	D9      XX2+7
 159+ 93AE              ;	DA      XX2+8
 160+ 93AE              ;	DB      XX2+9
 161+ 93AE              ;	DC      XX2+10
 162+ 93AE              ;	DD      XX2+11
 163+ 93AE              ;	DE      XX2+12
 164+ 93AE              ;	DF		XX2+13
 165+ 93AE              ;	E0		XX2+14
 166+ 93AE              ;	E1		XX2+15
 167+ 93AE              ;	E2
 168+ 93AE              ;	E3
 169+ 93AE              ;	E4
 170+ 93AE              ;	E5
 171+ 93AE              ;	E6
 172+ 93AE              ;	E7
 173+ 93AE              ;	E8
 174+ 93AE              ;	E9
 175+ 93AE              ;	EA
 176+ 93AE              ;	EB
 177+ 93AE              ;	EC
 178+ 93AE              ;	ED
 179+ 93AE              ;	EE
 180+ 93AE              ;	8F
 181+ 93AE
 182+ 93AE 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 93B0 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 93B2              ; Variables to simulate 6502 registers until code fixed
 185+ 93B2              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 93B2 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 93B3 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 93B4 00           regA		DB	0
 189+ 93B5
 190+ 93B5
 191+ 93B5 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 93B6 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 93B8 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 93BA
 195+ 93BA
 196+ 93BA
 197+ 93BA              ;XX16		DS	16				; 16 byte Matrix
 198+ 93BA
 199+ 93BA              P0INWK							; page 0 & 46
 200+ 93BA              p0INWK31						; page 0 & 65
 201+ 93BA              P0INWK36						; PAGE 0 &6A
 202+ 93BA
 203+ 93BA 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 93BB              LastNormalVisible	equ	XX4
 205+ 93BB              varXX4              equ XX4
 206+ 93BB
 207+ 93BB
 208+ 93BB
 209+ 93BB 00           PATG		DB	0				; 6502 &03C9
 210+ 93BC 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 93BE
 212+ 93BE
 213+ 93BE              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 93BE              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 93BE
 216+ 93BE              ; Present System Variables
 217+ 93BE
 218+ 93BE 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 93BF 20           RandomSeed1				DB	32	; 01
 220+ 93C0 0C           RandomSeed2				DB	12			; 02
 221+ 93C1 42           RandomSeed3				DB	66			; 03
 222+ 93C2
 223+ 93C2 00           varT1					DB	0				; 06
 224+ 93C3 00           SClo					DB 0				; 07
 225+ 93C4 00           SChi					DB 0				; 08
 226+ 93C5 00           varP					DB 0 				; 10	XX16+7
 227+ 93C6 00           varPhi					DB 0 				; 11	XX16+8
 228+ 93C7 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 93C8              varPp1                  equ varPhi
 230+ 93C8              varPp2                  equ varPhi2
 231+ 93C8 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 93C9 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 93CA              UnivPointer				equ	UnivPointerLo
 234+ 93CA 00           varV					DB 0				; 22                          XX0+4
 235+ 93CB 00           varVHi					DB 0				; 23                          XX0+5
 236+ 93CC 00           varXXlo                 DB 0                ; 24
 237+ 93CD 00           varXXHi                 DB 0                ; 25
 238+ 93CE              varXX					equ	varXXlo
 239+ 93CE 00           YYlo                    DB 0                ; 26
 240+ 93CF 00           YYHi                    DB 0                ; 27
 241+ 93D0              varYY					equ	YYlo
 242+ 93D0              											;	28
 243+ 93D0              											;	29
 244+ 93D0              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 93D0 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 93D1 00           JSTY                    DB  0               ; Joystick analog
 247+ 93D2 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 93D3 00           BET2                    DB  0               ;            climb sign
 249+ 93D4 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 93D5 1F           BET1MAXC                DB  31              ; max climb
 251+ 93D6 E1           BET1MAXD                DB  -31             ; max dive
 252+ 93D7 00           XC						DB	0               ; 2C
 253+ 93D8 00           YC						DB 	0               ; 2D
 254+ 93D9 00           OuterHyperCount			DB 	0				; 2E		TODO Replace with 16 bit counter later
 255+ 93DA 00           InnerHyperCount			DB 	0				; 2F
 256+ 93DB 00           ECMActive				DB 	0				; 30		ECM Active flag
 257+ 93DC 00 00        JSTX                    DW  0               ;           Joystick analog value
 258+ 93DE 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 259+ 93DF 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 260+ 93E0 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 261+ 93E1 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 262+ 93E2 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 263+ 93E3 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 264+ 93E4
 265+ 93E4 00 00        MissileTarget			DW	0				; 45
 266+ 93E6 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 267+ 940B
 268+ 940B              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 269+ 940B              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 270+ 940B              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 271+ 940B 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 272+ 940C              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 273+ 940C
 274+ 940C
 275+ 940C 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 276+ 9411              											;	6D		QQ15+1
 277+ 9411              											;	6E		QQ15+2
 278+ 9411              											;	6F		QQ15+3
 279+ 9411              											;	70		QQ15+4
 280+ 9411              											;	71		QQ15+5
 281+ 9411 00           QQ17					DB	0				;   72
 282+ 9412 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 283+ 9413 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 284+ 9414 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 285+ 9415 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 286+ 9416 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 287+ 9417 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 288+ 9418 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 289+ 9419 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 290+ 941A 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 291+ 941B
 292+ 941B 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 293+ 941C 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 294+ 941D 00           DELT4Lo					DB 	0				; 7E
 295+ 941E 00           DELT4Hi					DB 	0				; 7F
 296+ 941F              DELTA4                  equ                 DELT4Lo
 297+ 941F
 298+ 941F
 299+ 941F              ; Not thise must be in this order else 16 bit fetches will fail
 300+ 941F 00           varU                    DB  0               ;   80
 301+ 9420 00           varQ					DB  0 				;	81
 302+ 9421 00           varR					DB  0 				;	82
 303+ 9422 00           varS					DB  0 				;	83
 304+ 9423              varRS                   equ varR
 305+ 9423
 306+ 9423 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 307+ 9425
 308+ 9425 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 309+ 9426 00           YSAV                    DB  0               ; 85
 310+ 9427 00           XX17					DB	0				; 86
 311+ 9428              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 312+ 9428              varXX17                 equ  XX17
 313+ 9428 00           ScreenChanged           DB  0
 314+ 9429 00           ScreenIndex             DB  0
 315+ 942A 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 316+ 942B                                                          ; 7    6    5    4     3    2        1    0
 317+ 942B                                                          ; Up   Down Left Right Home Recentre
 318+ 942B 00           InvertedYAxis           DB  0
 319+ 942C 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 320+ 942D              											; Bit 7 Set  ShortRangeChart    $80
 321+ 942D              											; Bit 6 Set  Galactic Chart     $40
 322+ 942D              											; Bit 5 Set  Market Place       $20
 323+ 942D              											; Bit 4 Set  Status Screen      $10
 324+ 942D              											; Bit 3 Set  Display Inventory  $08
 325+ 942D                                                          ; Bit 2 Set  Planet Data        $04
 326+ 942D                                                          ; View bit combinations if the ones above not matched
 327+ 942D                                                          ; bits 1 0
 328+ 942D                                                          ;      1 1  Front view , i.e. $03
 329+ 942D                                                          ;      1 0  Aft View          $02
 330+ 942D                                                          ;      0 1  Left View         $01
 331+ 942D                                                          ;      0 0  Right view        $00
 332+ 942D              											; Bit 0 Set  Data On System
 333+ 942D              											; 0  Space View (Not a menu)
 334+ 942D 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 335+ 942E 00           XX13                    DB  0               ;   89
 336+ 942F 00           MCNT					DB 	0				; 8A
 337+ 9430 00           TYPE					DB	0				; 8C used for ship type in drawing
 338+ 9431 00           DockedFlag				DB	0				; 8E - Docked flag = 0 = in free space, FF = Docked, any number > 1 = count down to 0, whilst counting down no docking will be tested
 339+ 9432 00           GamePaused              DB  0
 340+ 9433 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 341+ 9434 00           varCNT                  DB  0               ; 93
 342+ 9435 00           varRAT                  DB  0               ; 99
 343+ 9436 00           varRAT2                 DB  0               ; 9A
 344+ 9437
 345+ 9437 00           varK					DB	0				; 40
 346+ 9438 00           varKp1					DB	0				; 41
 347+ 9439 00           varKp2					DB	0				; 42
 348+ 943A 00           varKp3					DB	0				; 43
 349+ 943B
 350+ 943B 00           varK2                   DB  0               ; 9B
 351+ 943C 00           varK2p1                 DB  0               ; 9C K2 plus 1
 352+ 943D 00           varK2p2                 DB  0               ; 9D K2 plus 2
 353+ 943E 00           varK2p3                 DB  0               ; 9E K2 plus 3
 354+ 943F
 355+ 943F 00           Point                   DB  0               ; 9F      POINT
 356+ 9440
 357+ 9440 00           varT					DB	0				; D1
 358+ 9441
 359+ 9441 00 00 00...  varVector9ByteWork      DS  9
 360+ 944A
 361+ 944A 00 00 00 00  varK3					DS	4				; D2
 362+ 944E 00           varK3p2					DB	0				; 42
 363+ 944F 00           varK3p3					DB	0				; 43
 364+ 9450              varK3p1					equ varK3+1			; D3
 365+ 9450 00 00 00 00  varK4					DS	4				; E0
 366+ 9454              varK4p1					equ varK4+1			; D3
 367+ 9454
 368+ 9454              ;PlayerData:
 369+ 9454 00           PlayerForwardSheild0	DB	0 ; ?????
 370+ 9455 00           PlayerForwardSheild1    DB	0
 371+ 9456 00           PlayerForwardSheild2    DB	0
 372+ 9457
 373+ 9457
 374+ 9457              ;Heap
 375+ 9457
 376+ 9457 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 377+ 9459 00 00 00...  HeapData				DS	50
 378+ 948B              ; Contains 				X 16 bit, Y 16 bit
 379+ 948B              ;RuntimeData:
 380+ 948B              HeapHead				equ HeapStart
 381+ 948B
 382+ 948B              ; For the UniverseSlot list, for an optimisation the type slot will be the ship type, e.g. ship type this will optimise searching for a station or star
 383+ 948B              ; bit 7 will be set for a sun or planet so we can only ever have 128 types of ship, in relality there are about 3 types
 384+ 948B              ; note this is ship type as it space station, transporter, pirate etc not model of ship
 385+ 948B 00 00 00...  UniverseSlotList		DS UniverseListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 386+ 9497
 387+ 9497 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 388+ 9498 00           MANY					DB	0				; &031E array of ship types???
 389+ 9499 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 390+ 949A 00           						DB	0				; &0321	Speculative?
 391+ 949B 00           						DB	0				; &0322	Speculative?
 392+ 949C 00           						DB	0				; &0323	Speculative?
 393+ 949D 00           						DB	0				; &0324	Speculative?
 394+ 949E 00           						DB	0				; &0325	Speculative?
 395+ 949F 00           						DB	0				; &0326	Speculative?
 396+ 94A0 00           						DB	0				; &0327	Speculative?
 397+ 94A1 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 398+ 94A2 00           						DB	0				; &0329	MANY + 11 Speculative?
 399+ 94A3 00           				        DB	0				; &032A	MANY + 12 Speculative?
 400+ 94A4 00           				        DB	0				; &032B	MANY + 13 Speculative?
 401+ 94A5 00           				        DB	0				; &032C	MANY + 14 Speculative?
 402+ 94A6 00           				        DB	0				; &032D	MANY + 15 Speculative?
 403+ 94A7 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 404+ 94A8 00           				        DB	0				; &032F	MANY + 17 Speculative?
 405+ 94A9 00           				        DB	0				; &0330	MANY + 18 Speculative?
 406+ 94AA 00           				        DB	0				; &0331	MANY + 19 Speculative?
 407+ 94AB 00           						DB	0				; &0332	MANY + 20 Speculative?
 408+ 94AC 00           				        DB	0				; &0333	MANY + 21 Speculative?
 409+ 94AD 00           				        DB	0				; &0334	MANY + 22 Speculative?
 410+ 94AE 00           				        DB	0				; &0335	MANY + 23 Speculative?
 411+ 94AF 00           				        DB	0				; &0336	MANY + 24 Speculative?
 412+ 94B0 00           				        DB	0				; &0337	MANY + 25 Speculative?
 413+ 94B1 00           				        DB	0				; &0338	MANY + 26 Speculative?
 414+ 94B2 00           				        DB	0				; &0339	MANY + 27 Speculative?
 415+ 94B3 00           				        DB	0				; &033A	MANY + 28 Speculative?
 416+ 94B4 00           				        DB	0				; &033B	MANY + 29 Speculative?
 417+ 94B5 00           				        DB	0				; &033C	MANY + 30 Thargoids
 418+ 94B6 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 419+ 94B7 00           JunkCount				DB  0				; $033E
 420+ 94B8 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 421+ 94B9 00           CabinTemp				DB	0				; $0342
 422+ 94BA 00           MissileArmedStatus		DB	0				; 0344 MSAR
 423+ 94BB 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 424+ 94BC 00           GunTemperature			DB	0				; 0347	GNTMP
 425+ 94BD 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 426+ 94BE 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 427+ 94BF 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 428+ 94C0 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 429+ 94C1 00           JoystickX				DB	0				; 034C JSTX
 430+ 94C2 00           JoystickY				DB	0				; 034D JSTY
 431+ 94C3 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 432+ 94C4 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 433+ 94C5 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 434+ 94CD 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 435+ 94CE 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 436+ 94CF              											; Bit mask XXXX10XX - Thargoid plan mission
 437+ 94CF 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 438+ 94D0 00           PresentSystemY			DB  0
 439+ 94D1 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 440+ 94D7 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 441+ 94D8 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 442+ 94D9              ;036C to D???
 443+ 94D9 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 444+ 94E0              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 445+ 94E0              ;  #&5 Does J reverse both joystick channels
 446+ 94E0              ;  #&4 Does Y reverse joystick Y channel			03CB
 447+ 94E0              ;  #&3 Does F toggle flashing information			03CA
 448+ 94E0              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 449+ 94E0              ;  #&1 Does A toggle keyboard auto-recentering ?
 450+ 94E0              ;  #&0 Caps-lock toggles keyboard flight damping
 451+ 94E0 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 452+ 94E1 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 453+ 94E2 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 454+ 94F2 00           AlienItemsAvaliability  DB	0				; 039D
 455+ 94F3 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 456+ 94F4 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 457+ 94F6 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 458+ 94F7              											;
 459+ 94F7 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 460+ 94F8 00           ForeShield				DB	0				; 03A5
 461+ 94F9 00           AftShield				DB	0				; 03A6
 462+ 94FA 00           PlayerEnergy			DB	0				; 03A7
 463+ 94FB 00           CompassX				DB	0				; 03A8
 464+ 94FC 00           CompassY				DB	0				; 03A9
 465+ 94FD 00           MarketPrice				DB	0				; 03AA QQ24
 466+ 94FE 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 467+ 94FF 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 468+ 9500 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 469+ 9501 00           GovPresentSystem		DB	0				; 03AE Govenment
 470+ 9502 00           TekPresentSystem		DB	0				; 03AF Technology
 471+ 9503 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 472+ 9505              											; this is ship lines stack pointer so may be redundant with paging
 473+ 9505              											; LS = line stack so we will have one for now to remove later
 474+ 9505 00 00 00...  WorkingSeeds			DS	6
 475+ 950B 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 476+ 9511 00           DisplayEcononmy			DB	0				; 03B8
 477+ 9512 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 478+ 9513 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 479+ 9514 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 480+ 9516 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 481+ 9518 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 482+ 951A 00 00        DisplayRadius			DW	0
 483+ 951C 00           TargetPlanetX			DB	0               ; 03C1
 484+ 951D 00           TargetPlanetY			DB	0               ; 03C2
 485+ 951E 00           SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 486+ 951F 00           SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 487+ 9520 00           NumberOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 488+ 9521
 489+ 9521 00           CompassColor			DB	0				; 03C5
 490+ 9522 00           SoundToggle				DB	0				; 03C6
 491+ 9523 00           KeyboardRecenterToggle	DB	0				; 03C8
 492+ 9524 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 493+ 9525 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 494+ 9526 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 495+ 9527 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 496+ 9528 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 497+ 9529 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 498+ 952A
 499+ 952A              ; Working Data
 500+ 952A
 501+ 952A              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 502+ 952A              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 503+ 952A              ; $0925 =	EQUW page9+37* 1
 504+ 952A              ; $094A =	EQUW page9+37* 2
 505+ 952A              ; $096F =	EQUW page9+37* 3
 506+ 952A              ; $0994 =	EQUW page9+37* 4
 507+ 952A              ; $09B9 =	EQUW page9+37* 5
 508+ 952A              ; $09DE =	EQUW page9+37* 6
 509+ 952A              ; $0A03 =	EQUW page9+37* 7
 510+ 952A              ; $0A28 =	EQUW page9+37* 8
 511+ 952A              ; $0A4D =	EQUW page9+37* 9
 512+ 952A              ; $0A72 =	EQUW page9+37*10
 513+ 952A              ; $0A97 =	EQUW page9+37*11
 514+ 952A              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 515+ 952A
 516+ 952A
 517+ 952A
 518+ 952A              ; 0b00 is start address of data to save
 519+ 952A 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 520+ 952B
 521+ 952B 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 522+ 952D 00 00        CommanderLoadAddress	DW	0				;0C03
 523+ 952F 00 00        LengthOfFile			DW	0				;0C0B
 524+ 9531 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 525+ 9533
 526+ 9533 00 00 00...  EdgesBuffer				DS 50
 527+ 9565              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 528+ 9565              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 529+ 9565
 530+ 9565 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 531+ 95AB              ShipLineStackTop		equ $ - ShipLineStack
 532+ 95AB
 533+ 95AB 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 534+ 966B              ; LSX vector overlaps with LSO
 535+ 966B 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 536+ 966C 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 537+ 966D
 538+ 966D              ; Star Positions are 16 bit 3d coordinates
 539+ 966D 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 540+ 96AF 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 541+ 96C5 00           varStarX                DB  0
 542+ 96C6 00           varStarY                DB  0
 543+ 96C7 00 00 00...  varDustX                DS MaxNumberOfStars *2
 544+ 96DD 00 00 00...  varDustY                DS MaxNumberOfStars *2
 545+ 96F3 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 546+ 9709
 547+ 9709
 548+ 9709              SpeedoStart             equ $84D1
 549+ 9709 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 549+ 970D 04 04 05 06
 549+ 9711 06 07 08 09
 549+ 9715 0A 0A 0B 0C
 549+ 9719 0D 0E 0E 0F
 549+ 971D 10 10 11 12
 549+ 9721 13 14 14 15
 549+ 9725 16 17 18 18
 549+ 9729 19 1A 1A 1B
 549+ 972D 1C 1C 1D 1E
 549+ 9731 1F
 550+ 9732
 551+ 9732              DialMiddleXPos          equ $E1
 552+ 9732              RollMiddle              equ $8AE0
 553+ 9732              PitchMiddle             equ $92E0
 554+ 9732
 555+ 9732
 556+ 9732
 557+ 9732              MakeInnocentMacro:		MACRO
 558+ 9732 ~            						xor		a
 559+ 9732 ~            						ld		(FugitiveInnocentStatus),a
 560+ 9732              						ENDM
 561+ 9732
 562+ 9732              NoEscapePodMacro:		MACRO
 563+ 9732 ~            						xor		a
 564+ 9732 ~            						ld		(EscapePod),a
 565+ 9732              						ENDM
 566+ 9732
 567+ 9732              MaxFuelLevel            EQU     $46
 568+ 9732              MaxFuelMacro:			MACRO
 569+ 9732 ~            						ld		a,MaxFuelLevel
 570+ 9732 ~            						ld		(Fuel),a
 571+ 9732              						ENDM
 572+ 9732
 573+ 9732              MaxThrottle:            MACRO
 574+ 9732 ~                                    ld      a,(SHIPMAXSPEED)
 575+ 9732 ~                                    ld      (DELTA),a
 576+ 9732 ~                                    ld      d,a
 577+ 9732 ~                                    ld      e,4
 578+ 9732 ~                                    mul
 579+ 9732 ~                                    ld      (DELT4Lo),de
 580+ 9732                                      ENDM
 581+ 9732
 582+ 9732              ZeroThrottle:           MACRO
 583+ 9732 ~                                    xor     a
 584+ 9732 ~                                    ld      (DELTA),a
 585+ 9732 ~                                    ld      (DELT4Lo),a
 586+ 9732 ~                                    ld      (DELT4Lo+1),a
 587+ 9732                                      ENDM
 588+ 9732
# file closed: ./Variables/general_variables.asm
 814  9732
 815  9732                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9732
   2+ 9732              ; Wipe all items
   3+ 9732 3E FF        ClearFreeSlotList:      ld      a,$FF
   4+ 9734 21 8B 94                             ld      hl,UniverseSlotList
   5+ 9737 06 0C                                ld      b, UniverseListSize
   6+ 9739 77           .fillLoop:              ld      (hl),a
   7+ 973A 23                                   inc     hl
   8+ 973B 10 FC                                djnz    .fillLoop
   9+ 973D C9                                   ret
  10+ 973E
  11+ 973E 21 8B 94     SetSlotAToSpaceStation: ld      hl,UniverseSlotList
  12+ 9741 ED 31                                add     hl,a
  13+ 9743 36 02                                ld      (hl),ShipTypeStation
  14+ 9745 C9                                   ret
  15+ 9746
  16+ 9746 21 8B 94     SetSelotAToTypeB:       ld      hl,UniverseSlotList
  17+ 9749 ED 31                                add     hl,a
  18+ 974B 70                                   ld      (hl),b
  19+ 974C C9                                   ret
  20+ 974D
  21+ 974D              ; Clears all except slot A, used when say restarting a space station post launch
  22+ 974D 57           ClearFreeSlotListSaveA: ld      d,a
  23+ 974E 0E 00                                ld      c,0
  24+ 9750 21 8B 94                             ld      hl,UniverseSlotList
  25+ 9753 06 0C                                ld      b, UniverseListSize
  26+ 9755 79           .fillLoop:              ld      a,c
  27+ 9756 BA                                   cp      d
  28+ 9757 28 02                                jr      z,.SkipSlot
  29+ 9759 3E FF                                ld      a,$FF
  30+ 975B 77           .SkipSlot:              ld      (hl),a
  31+ 975C 23                                   inc     hl
  32+ 975D 10 F6                                djnz    .fillLoop
  33+ 975F C9                                   ret
  34+ 9760
  35+ 9760 21 8B 94     SetSlotAOccupiedByB:    ld      hl,UniverseSlotList
  36+ 9763 ED 31                                add     hl,a
  37+ 9765 78                                   ld      a,b
  38+ 9766 70                                   ld      (hl),b
  39+ 9767 C9                                   ret
  40+ 9768
  41+ 9768 21 8B 94     FindSpaceStationSlotInC:ld      hl,UniverseSlotList
  42+ 976B 06 0C                                ld      b,UniverseListSize
  43+ 976D 0E 00                                ld      c,0
  44+ 976F 7E           .SearchLoop:            ld      a,(hl)
  45+ 9770                                      JumpIfAEqNusng ShipTypeStation, .FoundSlot
  45+ 9770 FE 02       >                cp     ShipTypeStation
  45+ 9772 CA 7B 97    >                jp      z,.FoundSlot
  46+ 9775 0C                                   inc     c
  47+ 9776 23                                   inc     hl
  48+ 9777 10 F6                                djnz    .SearchLoop
  49+ 9779                                      SetCarryFlag
  49+ 9779 37          >                        scf
  50+ 977A C9                                   ret
  51+ 977B              .FoundSlot:             ClearCarryFlag
  51+ 977B B7          >                        or a
  52+ 977C C9                                   ret
  53+ 977D
  54+ 977D CD 68 97     FindSpaceStationSlotInA:call    FindSpaceStationSlotInC
  54+ 9780
  55+ 9780 79                                   ld      a,c
  56+ 9781 C9                                   ret
  57+ 9782
  58+ 9782
  59+ 9782 21 8B 94     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
  60+ 9785 06 0C                                ld      b, UniverseListSize
  61+ 9787 0E 00                                ld      c, 0
  62+ 9789 7E           .SearchLoop:            ld      a,(hl)
  63+ 978A                                      JumpIfAEqNusng $FF, .FoundSlot
  63+ 978A FE FF       >                cp     $FF
  63+ 978C CA 95 97    >                jp      z,.FoundSlot
  64+ 978F 0C                                   inc     c
  65+ 9790 23                                   inc     hl
  66+ 9791 10 F6                                djnz    .SearchLoop
  67+ 9793                                      SetCarryFlag
  67+ 9793 37          >                        scf
  68+ 9794 C9                                   ret
  69+ 9795              .FoundSlot:             ClearCarryFlag
  69+ 9795 B7          >                        or a
  70+ 9796 C9                                   ret
  71+ 9797
  72+ 9797 CD 82 97     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
  73+ 979A 79                                   ld      a,c
  74+ 979B C9                                   ret
  75+ 979C
# file closed: ./Variables/UniverseSlotRoutines.asm
 816  979C
 817  979C                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 979C 00           AutoDocking				DB	0				; $033F
   2+ 979D 00           PlayerECM				DB	0				; $0340
   3+ 979E 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 979F 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 97A0 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 97A4 19           Fuel					DB	25				; 0365  QQ14
   7+ 97A5 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 97A9 46           CargoBaySize			DB	70				; 036E
   9+ 97AA 00           CargoRunningLoad        DB  0
  10+ 97AB 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 97AF 00 00 00 00
  10+ 97B3 00 00 00 00
  10+ 97B7 00 00 00 00
  11+ 97BB              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 97BB              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 97BB              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 97BB              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 97BB
  16+ 97BB              QQ20                    equ CargoTonnes
  17+ 97BB 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  18+ 97D5              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  19+ 97D5              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  20+ 97D5              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  21+ 97D5              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  22+ 97D5              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  23+ 97D5              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  24+ 97D5 01           FuelScoopsBarrelStatus	DB	1				; 0381
  25+ 97D6
# file closed: ./Variables/EquipmentVariables.asm
 818  97D6
 819  97D6                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 97D6              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 97D6              doRND2:
   3+ 97D6 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 97D7              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 97D7              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 97D7 3A BE 93     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 97DA CB 17                                rl		a								; Rotate L including carry
   8+ 97DC 4F                                   ld		c,a								; c =  double lo
   9+ 97DD 21 C0 93     .AddSeed2:              ld		hl,RandomSeed2
  10+ 97E0 8E                                   adc		a,(hl)							; RAND+2
  11+ 97E1 32 BE 93     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 97E4 08           .SaveBtoSeed2:          ex		af,af'
  13+ 97E5 79                                   ld		a,c
  14+ 97E6 32 C0 93                             ld		(RandomSeed2),a
  15+ 97E9 08                                   ex		af,af'
  16+ 97EA 3A BF 93                             ld		a,(RandomSeed1)
  17+ 97ED 4F                                   ld		c,a								; C = Seed1
  18+ 97EE 21 C1 93     .AddSeed3:              ld		hl,RandomSeed3
  19+ 97F1 8E                                   adc		a,(hl)
  20+ 97F2 32 BF 93                             ld		(RandomSeed1),a
  21+ 97F5 08                                   ex		af,af'
  22+ 97F6 79                                   ld		a,c
  23+ 97F7 32 C1 93                             ld		(RandomSeed3),a
  24+ 97FA 08                                   ex		af,af'
  25+ 97FB C9                                   ret
  26+ 97FC
  27+ 97FC              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 97FC 06 04        	ld		b,4
  29+ 97FE 21 FE C1     	ld		hl,UbnkLineArray				; line data
  30+ 9801              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9801              EE55:
  32+ 9801 CD D7 97     	call	doRND							; get random
  33+ 9804 77           	ld		(hl),a							; (XX19),Y
  34+ 9805 23           	inc		hl
  35+ 9806 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9808 C9               ret
  37+ 9809
# file closed: ./Variables/random_number.asm
 820  9809                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9809 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 980D 58 59 53 45
   1+ 9811 45 44
   2+ 9813 21 D1 94     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 9816 11 0C 94                             ld		de,SystemSeed
   4+ 9819 ED A0        copy_seed:		        ldi
   5+ 981B ED A0                                ldi
   6+ 981D ED A0                                ldi
   7+ 981F ED A0                                ldi
   8+ 9821 ED A0                                ldi
   9+ 9823 ED A0                                ldi
  10+ 9825 C9                                   ret
  11+ 9826
  12+ 9826 21 0C 94     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 9829 11 D1 94                             ld		de,GalaxySeeds
  14+ 982C 18 EB                                jr		copy_seed
  15+ 982E
  16+ 982E 21 D1 94     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9831 11 05 95                             ld		de,WorkingSeeds
  18+ 9834 18 E3                                jr		copy_seed
  19+ 9836
  20+ 9836 21 05 95     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 9839 11 D1 94                             ld		de,GalaxySeeds
  22+ 983C 18 DB                                jr		copy_seed
  23+ 983E
  24+ 983E 21 05 95     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9841 11 0C 94                             ld		de,SystemSeed
  26+ 9844 18 D3                                jr		copy_seed
  27+ 9846
  28+ 9846 21 0C 94     copy_system_to_working: ld		hl,SystemSeed
  29+ 9849 11 05 95                             ld		de,WorkingSeeds
  30+ 984C 18 CB                                jr		copy_seed
  31+ 984E
  32+ 984E              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 984E CD 51 98     		call	.NextStep					; This logic means we hard code x4
  34+ 9851              .NextStep:
  35+ 9851 CD 54 98     		call	process_seed				; This logic means we hard code x2
  36+ 9854              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 9854 3A 0C 94     		ld		a,(SystemSeed)				; QQ15
  38+ 9857 B7           		or		a							; clear carry flag
  39+ 9858 21 0E 94     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 985B 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 985C 47           		ld		b,a							; partial sum lo
  42+ 985D 3A 0D 94     		ld		a,(SystemSeed+1)
  43+ 9860 21 0F 94     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 9863 8E           		adc		a,(hl)						; note add with carry
  45+ 9864 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 9865 3A 0E 94     		ld		a,(SystemSeed+2)
  47+ 9868 32 0C 94     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 986B 3A 0F 94     		ld		a,(SystemSeed+3)
  49+ 986E 32 0D 94     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 9871 3A 11 94     		ld		a,(SystemSeed+5)
  51+ 9874 32 0F 94     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 9877 3A 10 94     		ld		a,(SystemSeed+4)
  53+ 987A 32 0E 94     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 987D B7           		or		a
  55+ 987E 78           		ld		a,b
  56+ 987F 21 0E 94     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 9882 86           		add	    a,(hl)
  58+ 9883 32 10 94     		ld		(SystemSeed+4),a
  59+ 9886 79           		ld		a,c
  60+ 9887 21 0F 94     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 988A 8E           		adc		a,(hl)
  62+ 988B 32 11 94     		ld		(SystemSeed+5),a
  63+ 988E C9           		ret
  64+ 988F
  65+ 988F              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 988F CD 92 98     		call	.NextStep					; This logic means we hard code x4
  67+ 9892              .NextStep:
  68+ 9892 CD 95 98     		call	working_seed				; This logic means we hard code x2
  69+ 9895              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 9895              ; x = a + c
  71+ 9895 3A 05 95     		ld		a,(WorkingSeeds)			; QQ15
  72+ 9898 B7           		or		a							; clear carry flag
  73+ 9899 21 07 95     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 989C 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 989D 47           		ld		b,a							; partial sum lo [x]
  76+ 989E              ; y = b + d	+ carry
  77+ 989E 3A 06 95     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 98A1 21 08 95     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 98A4 8E           		adc		a,(hl)						; note add with carry
  80+ 98A5 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 98A6 3A 07 95     		ld		a,(WorkingSeeds+2)
  82+ 98A9 32 05 95     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 98AC 3A 08 95     		ld		a,(WorkingSeeds+3)
  84+ 98AF 32 06 95     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 98B2 3A 0A 95     		ld		a,(WorkingSeeds+5)
  86+ 98B5 32 08 95     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 98B8 3A 09 95     		ld		a,(WorkingSeeds+4)
  88+ 98BB 32 07 95     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 98BE B7           		or		a
  90+ 98BF 78           		ld		a,b
  91+ 98C0 21 07 95     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 98C3 86           		add	    a,(hl)
  93+ 98C4 32 09 95     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 98C7 79           		ld		a,c
  95+ 98C8 21 08 95     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 98CB 8E           		adc		a,(hl)
  97+ 98CC 32 0A 95     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 98CF C9           		ret
  99+ 98D0
 100+ 98D0 32           working_distX	DB 50
 101+ 98D1 32           working_distY	DB 50
 102+ 98D2 00           current_distY	DB 0
 103+ 98D3
 104+ 98D3 AF           find_present_system:    xor		a
 105+ 98D4 32 25 94                             ld		(XSAV),a
 106+ 98D7              .CounterLoop:
 107+ 98D7 3A 0D 94     	ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 108+ 98DA 4F           	ld		c,a
 109+ 98DB              .calcLocaldy:
 110+ 98DB 3A D0 94     	ld		a,(PresentSystemY)
 111+ 98DE 47           	ld		b,a								; so b holds Y ccord
 112+ 98DF 79           	ld		a,c
 113+ 98E0 90           	sub		b
 114+ 98E1 CB 7F        	bit		7,a
 115+ 98E3 28 02        	jr		z,.positivedy
 116+ 98E5              .negativedy:
 117+ 98E5 ED 44        	neg
 118+ 98E7              .positivedy:
 119+ 98E7 32 D2 98     	ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 120+ 98EA ED 5B D0 98  	ld		de,(working_distX)
 121+ 98EE BA           	cp		d
 122+ 98EF 30 24        	jr		nc,.toofar
 123+ 98F1              .calcLocaldx:
 124+ 98F1 3A 0F 94     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 125+ 98F4 4F           	ld		c,a
 126+ 98F5 3A CF 94     	ld		a,(PresentSystemX)
 127+ 98F8 47           	ld		b,a								; so b holds Y ccord
 128+ 98F9 79           	ld		a,c
 129+ 98FA 90           	sub		b
 130+ 98FB CB 7F        	bit		7,a
 131+ 98FD 28 02        	jr		z,.positivedx
 132+ 98FF              .negativedx:
 133+ 98FF ED 44        	neg
 134+ 9901              .positivedx:
 135+ 9901 4F           	ld		c,a
 136+ 9902 BB           	cp		e
 137+ 9903 30 10        	jr		nc,.toofar
 138+ 9905              .Nearer:									; we have a closer system
 139+ 9905 3A D2 98     	ld		a,(current_distY)
 140+ 9908 47           	ld		b,a								; we have c to recall Y into b
 141+ 9909 ED 43 D0 98  	ld		(working_distX),bc
 142+ 990D C5           	push	bc
 143+ 990E CD 46 98     	call 	copy_system_to_working
 144+ 9911 C1           	pop		bc
 145+ 9912 78           	ld		a,b								;
 146+ 9913 B1           	or		c								;
 147+ 9914 C8           	ret		z								; if we have distance 0 then bang on
 148+ 9915              .toofar:
 149+ 9915 CD 4E 98     	call	next_system_seed
 150+ 9918 3A 25 94     	ld		a,(XSAV)
 151+ 991B 3D           	dec		a
 152+ 991C FE 00        	cp		0
 153+ 991E C8           	ret		z
 154+ 991F 32 25 94     	ld		(XSAV),a
 155+ 9922 18 B3        	jr		.CounterLoop
 156+ 9924
 157+ 9924
 158+ 9924              get_planet_data_working_seed:
 159+ 9924 3A 06 95     		ld		a, (WorkingSeeds+1)
 160+ 9927 E6 07        		and		7
 161+ 9929 32 11 95     		ld		(DisplayEcononmy),a
 162+ 992C 3A 07 95     		ld		a, (WorkingSeeds+2)
 163+ 992F CB 3F        		srl	a
 164+ 9931 CB 3F        		srl	a
 165+ 9933 CB 3F        		srl	a
 166+ 9935 CB 3F        		srl	a								; c/8
 167+ 9937 E6 07        		and		7
 168+ 9939 32 12 95     		ld		(DisplayGovernment),a
 169+ 993C CB 3F        		srl	a
 170+ 993E FE 00        		cp		0
 171+ 9940 20 08        		jr		nz,.CanBeRich
 172+ 9942              .Fedual:
 173+ 9942 3A 11 95     		ld		a,(DisplayEcononmy)
 174+ 9945 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 175+ 9947 32 11 95     		ld		(DisplayEcononmy),a
 176+ 994A              .CanBeRich:
 177+ 994A 3A 11 95     		ld		a,(DisplayEcononmy)
 178+ 994D EE 07        		xor		7							; flip economy so Rich is now 7
 179+ 994F 32 13 95     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 180+ 9952 47           		ld		b,a
 181+ 9953 3A 08 95     		ld		a,(WorkingSeeds+3)
 182+ 9956 E6 03        		and		3
 183+ 9958 80           		add		a,b
 184+ 9959 32 13 95     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 185+ 995C 3A 12 95     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 186+ 995F CB 3F        		srl		a 							; gov/2
 187+ 9961 47           		ld		b,a
 188+ 9962 3A 13 95     		ld		a,(DisplayTekLevel)
 189+ 9965 80           		add		a,b
 190+ 9966 32 13 95     		ld		(DisplayTekLevel),a			; Tek += gov /2
 191+ 9969 CB 27        		sla		a
 192+ 996B CB 27        		sla		a							; Onto Population (TL-1)*= 4
 193+ 996D 47           		ld		b,a
 194+ 996E 3A 11 95     		ld		a,(DisplayEcononmy)
 195+ 9971 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 196+ 9972 47           		ld		b,a
 197+ 9973 3A 12 95     		ld		a,(DisplayGovernment)
 198+ 9976 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 199+ 9977 32 14 95     		ld		(DisplayPopulation),a
 200+ 997A 3A 11 95     		ld		a,(DisplayEcononmy)
 201+ 997D EE 07        		xor		7							; Onto productivity
 202+ 997F C6 03        		add		3							;  (Flipped eco +3)
 203+ 9981 57           		ld		d,a
 204+ 9982 3A 12 95     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 205+ 9985 C6 04        		add		4
 206+ 9987 5F           		ld		e,a
 207+ 9988 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 208+ 998A 3A 14 95     		ld		a,(DisplayPopulation)		; then we use d for radius
 209+ 998D 57           		ld		d,a
 210+ 998E ED 30        		mul
 211+ 9990 CB 23        		sla		e
 212+ 9992 CB 1A        		rr		d
 213+ 9994 CB 23        		sla		e
 214+ 9996 CB 1A        		rr		d
 215+ 9998 CB 23        		sla		e
 216+ 999A CB 1A        		rr		d							; de * 8
 217+ 999C ED 53 16 95  		ld		(DisplayProductivity),de
 218+ 99A0              .DoRadius:
 219+ 99A0 3A 08 95     		ld		a,(WorkingSeeds+3)
 220+ 99A3 4F           		ld		c,a
 221+ 99A4 3A 0A 95     		ld		a,(WorkingSeeds+5)
 222+ 99A7 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 223+ 99A9 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 224+ 99AB 47           		ld		b,a							;
 225+ 99AC ED 43 1A 95  		ld		(DisplayRadius),bc
 226+ 99B0 C9           		ret
 227+ 99B1
# file closed: ./Variables/galaxy_seed.asm
 821  99B1                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 99B1 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 99B5 65 00
   2+ 99B7 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 99BB 00
   3+ 99BC 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 99C0 74 61 72 79
   3+ 99C4 00
   4+ 99C5 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 99C9 6E 67 00
   5+ 99CC 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 99D0 6F 6D 00
   6+ 99D3
   7+ 99D3 B1 99 B7 99  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 99D7 BC 99 C5 99
   7+ 99DB CC 99
   8+ 99DD              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 99DD
  10+ 99DD 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 99E1 65 64 00
  11+ 99E4 47 72 65 65  ConditionName2		DB "Green",0
  11+ 99E8 6E 00
  12+ 99EA 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 99EE 6F 77 00
  13+ 99F1 52 65 64 00  ConditionName4		DB "Red",0
  14+ 99F5
  15+ 99F5 DD 99 E4 99  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 99F9 EA 99 F1 99
  16+ 99FD              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 99FD
  18+ 99FD 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9A01 53 45 49 54
  18+ 9A05 49 4C 45 54
  18+ 9A09 53 54 4F 4E
  18+ 9A0D 4C 4F 4E 55
  18+ 9A11 54 48 4E 4F
  18+ 9A15 41 4C 4C 45
  18+ 9A19 58 45 47 45
  18+ 9A1D 5A 41 43 45
  18+ 9A21 42 49 53 4F
  18+ 9A25 55 53 45 53
  18+ 9A29 41 52 4D 41
  18+ 9A2D 49 4E 44 49
  18+ 9A31 52 45 41 3F
  18+ 9A35 45 52 41 54
  18+ 9A39 45 4E 42 45
  18+ 9A3D 52 41 4C 41
  18+ 9A41 56 45 54 49
  18+ 9A45 45 44 4F 52
  18+ 9A49 51 55 41 4E
  18+ 9A4D 54 45 49 53
  18+ 9A51 52 49 4F 4E
  18+ 9A55 00
  19+ 9A56
  20+ 9A56 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 9A5A 10 00 20 00
  20+ 9A5E 40 00 80 00
  20+ 9A62 00 02 00 0A
  20+ 9A66 00 19 00 49
  20+ 9A6A FF FF
  21+ 9A6C
  22+ 9A6C 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 9A70 6C 65 73 73
  22+ 9A74 00
  23+ 9A75 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 9A79 6C 79 20 48
  23+ 9A7D 61 72 6D 6C
  23+ 9A81 65 73 73 00
  24+ 9A85 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 9A89 00
  25+ 9A8A 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 9A8E 61 67 65 00
  26+ 9A92 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9A96 65 20 41 76
  26+ 9A9A 65 72 61 67
  26+ 9A9E 65 00
  27+ 9AA0 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 9AA4 65 74 65 6E
  27+ 9AA8 74 00
  28+ 9AAA 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 9AAE 65 72 6F 75
  28+ 9AB2 73 00
  29+ 9AB4 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 9AB8 6C 79 00
  30+ 9ABB 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 9ABF 20 45 20 4C
  30+ 9AC3 20 49 20 54
  30+ 9AC7 20 45 20 2D
  30+ 9ACB 2D 2D 00
  31+ 9ACE 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 9AD2 6C 6F 62 73
  31+ 9AD6 67 6F 64 00
  32+ 9ADA 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 9ADE 65 72 00
  33+ 9AE1
  34+ 9AE1 6C 9A 75 9A  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 9AE5 85 9A 8A 9A
  34+ 9AE9 92 9A A0 9A
  34+ 9AED AA 9A B4 9A
  34+ 9AF1 BB 9A CE 9A
  34+ 9AF5 DA 9A
  35+ 9AF7              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 9AF7
  37+ 9AF7
  38+ 9AF7              getTableText:
  39+ 9AF7              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 9AF7              ; ">Note for ranking first 2 bytes are target rank"
  41+ 9AF7 D5           	push	de								; save DE as we will likley need it in caller
  42+ 9AF8 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 9AFA ED 31        	add		hl,a
  44+ 9AFC 5E           	ld		e,(hl)
  45+ 9AFD 23           	inc		hl
  46+ 9AFE 56           	ld		d,(hl)							; de = indexed address
  47+ 9AFF EB           	ex		de,hl							; flip it to hl
  48+ 9B00 D1           	pop		de								; retrieve de
  49+ 9B01 C9           	ret										; return with hl as start entry
  50+ 9B02
  51+ 9B02
  52+ 9B02              ;               CF      ZF      Result
  53+ 9B02              ;               -----------------------------------
  54+ 9B02              ;               0       0       HL > DE
  55+ 9B02              ;               0       1       HL == DE
  56+ 9B02              ;               1       0       HL < DE
  57+ 9B02              ;               1       1       Impossible
  58+ 9B02              getRankIndex:
  59+ 9B02              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 9B02              ; ">Note for ranking first 2 bytes are target rank"
  61+ 9B02 7A           	ld		a,d
  62+ 9B03 B3           	or		e
  63+ 9B04 FE 00        	cp		0
  64+ 9B06 C8           	ret		z								; quicks skip for 0 kills
  65+ 9B07 AF           	xor 	a
  66+ 9B08 21 56 9A     	ld		hl,RankingTable
  67+ 9B0B              .testLoop:
  68+ 9B0B 4E           	ld		c,(hl)
  69+ 9B0C 23           	inc		hl
  70+ 9B0D 46           	ld		b,(hl)							; bc = ranking
  71+ 9B0E E5           	push	hl
  72+ 9B0F 60           	ld		h,b
  73+ 9B10 69           	ld		l,c
  74+ 9B11 CD D2 A4     	call	compare16HLDE
  75+ 9B14 38 06        	jr		c,.HLLTDE
  76+ 9B16              .HLGTEDE									; Found the correct rank
  77+ 9B16 E1           	pop		hl
  78+ 9B17 23           	inc		hl								; move to next value
  79+ 9B18 23           	inc		hl
  80+ 9B19 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9B1A 18 EF        	jr		.testLoop
  82+ 9B1C              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9B1C E1           	pop		hl
  84+ 9B1D C9           	ret
  85+ 9B1E
# file closed: ./Tables/text_tables.asm
 822  9B1E                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 9B1E 58 00        WordDummy					DB  "X",0
   2+ 9B20 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9B24 74 00
   3+ 9B26 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9B2A 74 00
   4+ 9B2C 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 9B30 00
   5+ 9B31 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9B35 00
   6+ 9B36 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9B3A 65 00
   7+ 9B3C 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 9B40 70 65 00
   8+ 9B43 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9B47 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9B4B 6F 00
  10+ 9B4D 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 9B51 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9B55 00
  12+ 9B56 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9B5A 70 73 00
  13+ 9B5D 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 9B61 4D 2E 00
  14+ 9B64 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 9B68 65 6D 00
  15+ 9B6B 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 9B6F 67 79 00
  16+ 9B72 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 9B76 00
  17+ 9B77 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 9B7B 72 00
  18+ 9B7D 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 9B81 65 00
  19+ 9B83 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 9B87 00
  20+ 9B88 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 9B8C 61 72 79 00
  21+ 9B90 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9B94 6E 67 00
  22+ 9B97 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9B9B 6F 6D 00
  23+ 9B9E 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 9BA2 00
  24+ 9BA3 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 9BA7 6C 64 00
  25+ 9BAA 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 9BAE 69 6E 67 00
  26+ 9BB2 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 9BB6 75 74 65 72
  26+ 9BBA 73 00
  27+ 9BBC 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 9BC0 72 73 70 61
  27+ 9BC4 63 65 00
  28+ 9BC7 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 9BCB 63 74 69 63
  28+ 9BCF 00
  29+ 9BD0 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 9BD4 61 00
  30+ 9BD6 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 9BDA 6E 00
  31+ 9BDC 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 9BE0 6E 64 65 72
  31+ 9BE4 00
  32+ 9BE5 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 9BE9 74 69 76 65
  32+ 9BED 00
  33+ 9BEE 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 9BF2 00
  34+ 9BF3 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 9BF7 69 6C 65 73
  34+ 9BFB 00
  35+ 9BFC 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 9C00 6F 61 63 74
  35+ 9C04 69 76 65 73
  35+ 9C08 00
  36+ 9C09 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9C0D 65 73 00
  37+ 9C10 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9C14 6F 72 2F 57
  37+ 9C18 69 6E 65 73
  37+ 9C1C 00
  38+ 9C1D 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9C21 72 69 65 73
  38+ 9C25 00
  39+ 9C26 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9C2A 6F 74 69 63
  39+ 9C2E 73 00
  40+ 9C30 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9C34 69 6E 65 72
  40+ 9C38 79 00
  41+ 9C3A 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9C3E 79 73 00
  42+ 9C41 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9C45 61 72 6D 73
  42+ 9C49 00
  43+ 9C4A 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9C4E 00
  44+ 9C4F 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9C53 72 61 6C 73
  44+ 9C57 00
  45+ 9C58 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9C5C 00
  46+ 9C5D 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9C61 69 6E 75 6D
  46+ 9C65 00
  47+ 9C66 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9C6A 53 74 6F 6E
  47+ 9C6E 65 73 00
  48+ 9C71 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9C75 6E 20 49 74
  48+ 9C79 65 6D 73 00
  49+ 9C7D 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9C81 65 73 00
  50+ 9C84 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9C88 67 72 61 6D
  50+ 9C8C 73 00
  51+ 9C8E 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9C92 73 00
  52+ 9C94 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9C98 74 00
  53+ 9C9A 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9C9E 65 00
  54+ 9CA0 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9CA4 74 00
  55+ 9CA6 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9CAA 00
  56+ 9CAB 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9CAE 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9CB2 61 6E 63 65
  57+ 9CB6 00
  58+ 9CB7 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9CBB 6F 6D 79 00
  59+ 9CBF 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9CC3 72 6E 6D 65
  59+ 9CC7 6E 74 00
  60+ 9CCA 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9CCE 4C 65 76 65
  60+ 9CD2 6C 00
  61+ 9CD4 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9CD8 6C 61 74 69
  61+ 9CDC 6F 6E 00
  62+ 9CDF 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9CE3 69 6F 6E 00
  63+ 9CE7 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9CEB 69 6F 6E 00
  64+ 9CEF 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9CF3 73 00
  65+ 9CF5 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9CF9 75 63 74 69
  65+ 9CFD 76 69 74 79
  65+ 9D01 00
  66+ 9D02 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9D06 61 67 65 00
  67+ 9D0A 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9D0E 75 73 00
  68+ 9D11 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9D14 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9D18 00
  70+ 9D19 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9D1D 00
  71+ 9D1E 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9D22 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9D26 6C 79 00
  73+ 9D29 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9D2D 00
  74+ 9D2E 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9D32 73 74 72 69
  74+ 9D36 61 6C 00
  75+ 9D39 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9D3D 63 75 6C 74
  75+ 9D41 75 72 61 6C
  75+ 9D45 00
  76+ 9D46 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9D4A 63 68 79 00
  77+ 9D4E 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9D52 61 6C 00
  78+ 9D55 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9D59 69 2D 47 6F
  78+ 9D5D 76 65 72 6E
  78+ 9D61 6D 65 6E 74
  78+ 9D65 00
  79+ 9D66 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9D6A 61 74 6F 72
  79+ 9D6E 73 68 69 70
  79+ 9D72 00
  80+ 9D73 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9D77 75 6E 69 73
  80+ 9D7B 74 00
  81+ 9D7D 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9D81 65 64 65 72
  81+ 9D85 61 63 79 00
  82+ 9D89 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9D8D 63 72 61 63
  82+ 9D91 79 00
  83+ 9D93 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9D97 6F 72 61 74
  83+ 9D9B 65 20 53 74
  83+ 9D9F 61 74 65 00
  84+ 9DA3 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9DA7 65 00
  85+ 9DA9 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9DAD 74 00
  86+ 9DAF 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9DB3 73 00
  87+ 9DB5 30 00        Word0						DB  "0",0				   ;86
  88+ 9DB7 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9DBB 65 74 00
  89+ 9DBE 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9DC2 65 73 00
  90+ 9DC5 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9DC9 75 63 74 00
  91+ 9DCD 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9DD1 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9DD5 65 00
  93+ 9DD7 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9DDB 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9DDF 00
  95+ 9DE0 74 00        Wordt						DB  "t",0                  ;94
  96+ 9DE2 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9DE5 67 00        Wordg						DB  "g",0                  ;96
  98+ 9DE7 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9DEB 69 74 69 74
  98+ 9DEF 79 00
  99+ 9DF1 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9DF5 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9DF9 6B 00
 101+ 9DFB 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9DFF 70 00
 102+ 9E01 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9E05 00
 103+ 9E06 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9E0A 69 6C 65 00
 104+ 9E0E 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9E12 72 64 72 69
 104+ 9E16 76 65 00
 105+ 9E19 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9E1D 74 61 72 79
 105+ 9E21 00
 106+ 9E22
 107+ 9E22 1E 9B 20 9B  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9E26 26 9B 2C 9B
 108+ 9E2A 31 9B 36 9B  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9E2E 3C 9B 43 9B
 109+ 9E32 47 9B 4D 9B  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9E36 51 9B 56 9B
 110+ 9E3A 5D 9B 64 9B  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9E3E 6B 9B 72 9B
 111+ 9E42 77 9B 7D 9B  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9E46 83 9B 88 9B
 112+ 9E4A 90 9B 97 9B  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9E4E 9E 9B A3 9B
 113+ 9E52 AA 9B B2 9B  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9E56 BC 9B C7 9B
 114+ 9E5A D0 9B D6 9B  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9E5E DC 9B E5 9B
 115+ 9E62 EE 9B F3 9B  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9E66 FC 9B 09 9C
 116+ 9E6A 10 9C 1D 9C  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9E6E 26 9C 30 9C
 117+ 9E72 3A 9C 41 9C  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9E76 4A 9C 4F 9C
 118+ 9E7A 58 9C 5D 9C  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9E7E 66 9C 71 9C
 119+ 9E82 7D 9C 84 9C  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9E86 8E 9C 94 9C
 120+ 9E8A 9A 9C A0 9C  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9E8E A6 9C AB 9C
 121+ 9E92 AE 9C B7 9C  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9E96 BF 9C CA 9C
 122+ 9E9A D4 9C DF 9C  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9E9E E7 9C EF 9C
 123+ 9EA2 F5 9C 02 9D  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9EA6 0A 9D 11 9D
 124+ 9EAA 14 9D        					DW  WordMCR																	;68
 125+ 9EAC 19 9D 1E 9D  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9EB0 22 9D 29 9D
 126+ 9EB4 2E 9D 39 9D                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9EB8 46 9D 4E 9D  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9EBC 55 9D 66 9D
 128+ 9EC0 73 9D 7D 9D                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9EC4 89 9D 93 9D
 129+ 9EC8 A3 9D A9 9D  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9ECC AF 9D B5 9D
 130+ 9ED0 B7 9D BE 9D  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9ED4 C5 9D CD 9D
 131+ 9ED8 D1 9D D7 9D                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9EDC DB 9D
 132+ 9EDE E0 9D E2 9D  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9EE2 E5 9D
 133+ 9EE4 E7 9D F1 9D  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9EE8 F5 9D FB 9D
 134+ 9EEC 01 9E 06 9E                      DW  WordShip,           WordMissile       ; 101
 135+ 9EF0
 136+ 9EF0              ; Phrases
 137+ 9EF0 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9EF4 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9EF7 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9EFA 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9EFD 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9F00 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9F03 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9F06 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9F09 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9F0D 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9F11 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9F15 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9F19 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9F1D 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9F20 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9F23 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9F26 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9F29 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9F2C 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9F2F 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9F32 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9F35 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9F38 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9F3B 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9F3E 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9F42 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9F45 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9F47
 165+ 9F47 00           TextDummy					DB  0
 166+ 9F48
 167+ 9F48 F0 9E F4 9E  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9F4C F7 9E
 168+ 9F4E FA 9E FD 9E  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9F52 00 9F
 169+ 9F54 03 9F 06 9F  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9F58 09 9F 0D 9F  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9F5C 11 9F 15 9F
 171+ 9F60 19 9F 1D 9F  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9F64 20 9F
 172+ 9F66 23 9F 26 9F  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9F6A 2C 9F 29 9F
 172+ 9F6E 35 9F 2F 9F
 172+ 9F72 32 9F 38 9F
 173+ 9F76 3B 9F        					DW  TextLightYears		                                            ; 21 23
 174+ 9F78 3E 9F 42 9F  					DW  Text0LightYears, TextMarketPrices
 175+ 9F7C 47 9F        					DW  TextDummy;  25
 176+ 9F7E 00 00 00...  TextBuffer			DS	33
 177+ 9F9F
 178+ 9F9F              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 9F9F              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 9F9F
 181+ 9F9F              CapitaliseString:
 182+ 9F9F              ; ">CapitaliseString hl = address"
 183+ 9F9F              .CapLoop:
 184+ 9F9F 23           	inc		hl
 185+ 9FA0 7E           	ld		a,(hl)
 186+ 9FA1 FE 00        	cp		0
 187+ 9FA3 C8           	ret		z
 188+ 9FA4 FE 5B        	cp		'Z'+1
 189+ 9FA6 30 F7        	jr		nc,.CapLoop
 190+ 9FA8 FE 41        	cp		'A'
 191+ 9FAA 38 F3        	jr		c,.CapLoop
 192+ 9FAC              .LowerCase:
 193+ 9FAC C6 20        	add		a,'a'-'A'
 194+ 9FAE 77           	ld		(hl),a
 195+ 9FAF 18 EE        	jr		.CapLoop
 196+ 9FB1
 197+ 9FB1              WordIndexToAddress:
 198+ 9FB1 21 22 9E     	ld		hl,WordIdx
 199+ 9FB4 ED 31        	add		hl,a
 200+ 9FB6 ED 31        	add		hl,a
 201+ 9FB8 D5           	push	de
 202+ 9FB9 5E           	ld		e,(hl)
 203+ 9FBA 23           	inc		hl
 204+ 9FBB 56           	ld		d,(hl)
 205+ 9FBC EB           	ex		de,hl
 206+ 9FBD D1           	pop		de
 207+ 9FBE C9           	ret
 208+ 9FBF
 209+ 9FBF
 210+ 9FBF              expandTokenToString:
 211+ 9FBF              ; ">expandTokenToString a = texttoken"
 212+ 9FBF 21 48 9F     	ld		hl,TextTokens
 213+ 9FC2 CD F7 9A     	call	getTableText
 214+ 9FC5 11 7E 9F     	ld		de,TextBuffer
 215+ 9FC8              .ReadLoop:
 216+ 9FC8 7E           	ld		a,(hl)
 217+ 9FC9 FE 00        	cp		0
 218+ 9FCB 28 1B        	jr		z,.ReadDone
 219+ 9FCD E5           	push	hl
 220+ 9FCE D5           	push	de
 221+ 9FCF 21 22 9E     	ld		hl,WordIdx
 222+ 9FD2 CD F7 9A     	call	getTableText
 223+ 9FD5 D1           	pop		de
 224+ 9FD6              .WordExpandLoop:
 225+ 9FD6 7E           	ld		a,(hl)
 226+ 9FD7 FE 00        	cp		0
 227+ 9FD9 28 05        	jr		z,.AddSpace
 228+ 9FDB              ;.GetChar:
 229+ 9FDB 12           	ld		(de),a
 230+ 9FDC 13           	inc		de
 231+ 9FDD 23           	inc		hl
 232+ 9FDE 18 F6        	jr		.WordExpandLoop
 233+ 9FE0              .AddSpace:
 234+ 9FE0 3E 20        	ld		a,' '
 235+ 9FE2 12           	ld		(de),a
 236+ 9FE3 13           	inc		de
 237+ 9FE4 E1           	pop		hl
 238+ 9FE5 23           	inc		hl
 239+ 9FE6 18 E0        	jr		.ReadLoop
 240+ 9FE8              .ReadDone:
 241+ 9FE8 1B           	dec		de
 242+ 9FE9 AF           	xor		a
 243+ 9FEA 12           	ld		(de),a
 244+ 9FEB C9           	ret
 245+ 9FEC
# file closed: ./Tables/dictionary.asm
 823  9FEC                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9FEC 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9FF0 53 45 49 54
   1+ 9FF4 49 4C 45 54
   1+ 9FF8 53 54 4F 4E
   1+ 9FFC 4C 4F 4E 55
   1+ A000 54 48 4E 4F
   2+ A004 41 4C 4C     name_digrams2   DB "ALL"
   3+ A007 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ A00B 45 5A 41 43
   3+ A00F 45 42 49 53
   3+ A013 4F 55 53 45
   3+ A017 53 41 52 4D
   3+ A01B 41 49 4E 44
   3+ A01F 49 52 45 41
   4+ A023 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ A027 54 45 4E 42
   4+ A02B 45 52 41 4C
   4+ A02F 41 56 45 54
   4+ A033 49 45 44 4F
   4+ A037 52 51 55 41
   4+ A03B 4E 54 45 49
   4+ A03F 53 52 49 4F
   4+ A043 4E
   5+ A044
   6+ A044              ; TODO Moveinto galaxy data module
   7+ A044 00 00 00...  name_expanded	DS 32
   8+ A064 00           				DB 0
   9+ A065
  10+ A065
  11+ A065
  12+ A065              NamingLoop:
  13+ A065 3A 0A 95     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ A068 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ A06A FE 00        	cp		0					; 0 = skip 2 chars
  16+ A06C 28 12        	jr		z,.SkipPhrase
  17+ A06E C6 0C        	add		a,12
  18+ A070 CB 27        	sla		a					; phrase = (a+12)*2
  19+ A072 21 EC 9F     	ld		hl,name_digrams
  20+ A075 ED 31        	add		hl,a
  21+ A077 ED A0        	ldi
  22+ A079 7E           	ld		a,(hl)
  23+ A07A FE 3F        	cp		'?'
  24+ A07C 28 02        	jr		z,.SkipPhrase
  25+ A07E              .AddExtra:
  26+ A07E ED A0        	ldi
  27+ A080              .SkipPhrase:
  28+ A080 D5           	push	de
  29+ A081 CD 95 98     	call	working_seed
  30+ A084 D1           	pop		de
  31+ A085 C9           	ret
  32+ A086
  33+ A086              ;GetDigramGalaxySeed:
  34+ A086              ;	call	copy_galaxy_to_working
  35+ A086              ;	jr		GetDigramWorkingSeed
  36+ A086              ;GetDigramSystemSeed:
  37+ A086              ;	call	copy_system_to_working
  38+ A086              ;GetDigramWorkingSeed:
  39+ A086              ;; ">GetDigram a = digram seed"
  40+ A086              ;	ld		de,name_expanded
  41+ A086              ;	ld		b,3
  42+ A086              ;	ld		a,(WorkingSeeds)
  43+ A086              ;	and		$40
  44+ A086              ;	jr		z,.SmallSizeName
  45+ A086              ;.LargeSizeName:
  46+ A086              ;	call	NamingLoop
  47+ A086              ;.SmallSizeName:
  48+ A086              ;	call	NamingLoop
  49+ A086              ;	call	NamingLoop
  50+ A086              ;	call	NamingLoop
  51+ A086              ;.DoneName:
  52+ A086              ;	ex		de,hl
  53+ A086              ;	ld		(hl),0
  54+ A086              ;	ex		de,hl
  55+ A086              ;	ret
  56+ A086
  57+ A086
  58+ A086
  59+ A086              ;GetDigramWorkingSeed:
  60+ A086              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ A086              ;	ld		b,5					; working seed
  62+ A086              ;	ld		de,name_expanded
  63+ A086              ;.ExpansionLoop:
  64+ A086              ;	push	bc
  65+ A086              ;	ld		hl,WorkingSeeds
  66+ A086              ;	ld		a,b
  67+ A086              ;	add		hl,a
  68+ A086              ;	ld		a,(hl)	; a = first byte of name seed
  69+ A086              ;	and 	$1F					; Keep bottom 5 bits only
  70+ A086              ;	cp		0					; 0 = skip 2 chars
  71+ A086              ;	jr		z,.SkipPhrase
  72+ A086              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ A086              ;	call	TT27
  74+ A086              ;.SkipPhrase:
  75+ A086              ;	push	de
  76+ A086              ;	call	next_working_seed
  77+ A086              ;	pop		de
  78+ A086              ;	pop		bc
  79+ A086              ;	djnz	GetDigramWorkingSeed
  80+ A086              ;.DoneName:
  81+ A086              ;	ex		de,hl
  82+ A086              ;	ld		(hl),0
  83+ A086              ;	ex		de,hl
  84+ A086              ;	ret
  85+ A086              ;
  86+ A086              ;ExpandToken:
  87+ A086              ;	DE = target
  88+ A086              ;	a = token
  89+ A086              ;
  90+ A086              ;PlanetDigram:
  91+ A086              ;	cp		&A0							; >- 160
  92+ A086              ;	jr		c,MorePage4
  93+ A086              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ A086              ;	asl		2							; Multiply by 2
  95+ A086              ;	ld		hl, name_digrams2
  96+ A086              ;	add		hl,a
  97+ A086              ;	ld		a,(hl)
  98+ A086              ;	call	ProcessTextToken
  99+ A086              ;	inc		hl
 100+ A086              ;	ld		a,(hl)
 101+ A086              ;	cp		'?'
 102+ A086              ;	ret		z
 103+ A086              ;	call	ProcessTextToken
 104+ A086              ;	ret
 105+ A086              ;MorePage4:
 106+ A086              ;	sub		$A0
 107+ A086              ;ExtraTokenCheck:
 108+ A086              ;	push	de							; save target address
 109+ A086              ;	push	bc
 110+ A086              ;	ld		b,a
 111+ A086              ;	ld		hl,varV
 112+ A086              ;	ld		(VarV),0400
 113+ A086              ;	ld		(varV),a
 114+ A086              ;	ld
 115+ A086              ;
 116+ A086              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ A086              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ A086              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ A086              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ A086              ;0A                      ASL A		      \ *= 2
 121+ A086              ;A8                      TAY 		      \ digram index = 0to62
 122+ A086              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ A086              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ A086              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ A086              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ A086              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ A086              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ A086              ;
 129+ A086              ;	.TT47	\ more page4, subtract #160
 130+ A086              ;E9 A0                   SBC #&A0	\ -= 160
 131+ A086              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ A086              ;AA                      TAX 		\ copy of word index
 133+ A086              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ A086              ;85 22                   STA &22		\ V
 135+ A086              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ A086              ;85 23                   STA &23		\ V+1
 137+ A086              ;A0 00                   LDY #0
 138+ A086              ;8A                      TXA 		\ token = word index
 139+ A086              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ A086              ;	.TT51	\ counters Y letter, X token
 141+ A086              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ A086              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ A086              ;C8                      INY 		\ letter count
 144+ A086              ;D0 F9                   BNE TT51	\ loop Y
 145+ A086              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ A086              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ A086              ;	.TT49	\ word ended
 148+ A086              ;C8                      INY
 149+ A086              ;D0 02                   BNE TT59    	\ next word
 150+ A086              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ A086              ;	.TT59	\ next word
 152+ A086              ;CA                      DEX 		\ token count
 153+ A086              ;D0 ED                   BNE TT51	\ loop X token
 154+ A086              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ A086              ;98                      TYA
 156+ A086              ;48                      PHA 		\ store Yindex
 157+ A086              ;A5 23                   LDA &23		\ V+1
 158+ A086              ;48                      PHA 		\ correct pointer hi
 159+ A086              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ A086              ;49 23                   EOR #&23	\ decode '#'
 161+ A086              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ A086              ;68                      PLA 		\ restore this depth's Vhi
 163+ A086              ;85 23                   STA &23		\ V+1
 164+ A086              ;68                      PLA
 165+ A086              ;A8                      TAY 		\ restore this depth's Yindex
 166+ A086              ;C8                      INY 		\ next letter
 167+ A086              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ A086              ;E6 23                   INC &23		\ V+1
 169+ A086              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ A086              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ A086              ;	.TT48 	\ rts
 172+ A086              ;60                      RTS 		\ end of flight token printing TT27
 173+ A086              ;
 174+ A086              ;
 175+ A086              ;
 176+ A086              ;
 177+ A086              ;
 178+ A086              ;
 179+ A086              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ A086              ;;AA                      TAX		\ copy token to count down
 181+ A086              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ A086              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ A086              ;CA                      DEX
 184+ A086              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ A086              ;CA                      DEX
 186+ A086              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ A086              ;CA                      DEX
 188+ A086              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ A086              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ A086              ;CA                      DEX
 191+ A086              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ A086              ;CA                      DEX
 193+ A086              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ A086              ;CA                      DEX
 195+ A086              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ A086              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ A086              ;85 72                   STA &72	 	\ QQ17
 198+ A086              ;60                      RTS
 199+ A086              ;CA                      DEX 		\ skip Acc ==7
 200+ A086              ;CA                      DEX
 201+ A086              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ A086              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ A086              ;60                      RTS
 204+ A086              ;CA                      DEX 		\ continue 9to127 tokens
 205+ A086              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ A086              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ A086              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ A086              ;C9 0E                   CMP #14		\ < 14 ?
 209+ A086              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ A086              ;C9 20                   CMP #32		\ < 32 ?
 211+ A086              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ A086              ;		\ Token  < 14 or > 31
 213+ A086              ;A6 72                   LDX &72	 	\ QQ17
 214+ A086              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ A086              ;30 11                   BMI TT41 	\ if bit7 set
 216+ A086              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ A086              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ A086              ;	.TT42	\ Uppercase to lowercase
 219+ A086              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ A086              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ A086              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ A086              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ A086              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ A086              ;	.TT44	\ print character as is with TT26
 225+ A086              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ A086              ;
 227+ A086              ;	.TT41	\ QQ17 bit7 set
 228+ A086              ;24 72                   BIT &72		\ QQ17
 229+ A086              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ A086              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ A086              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ A086              ;48                      PHA 		\ else store token Acc
 233+ A086              ;8A                      TXA 		\ QQ17 copy
 234+ A086              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ A086              ;85 72                   STA &72	 	\ QQ17
 236+ A086              ;68                      PLA 		\ restore token
 237+ A086              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ A086              ;
 239+ A086              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ A086              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ A086              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ A086              ;
 243+ A086              ;	.crlf	\ Acc == 9,  colon on right
 244+ A086              ;A9 15                   LDA #21		\ on right
 245+ A086              ;85 2C                   STA &2C		\ XC
 246+ A086              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ A086              ;
 248+ A086              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ A086              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ A086              ;F0 63                   BEQ TT48	\ rts
 251+ A086              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ A086              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ A086              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ A086              ;48                      PHA 		\ push token
 255+ A086              ;8A                      TXA 		\ QQ17 copy
 256+ A086              ;29 BF                   AND #&BF	\ clear bit6
 257+ A086              ;85 72                   STA &72	 	\ QQ17
 258+ A086              ;68                      PLA 		\ pull token
 259+ A086              ;	.TT74	\ TT26, print character.
 260+ A086              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ A086              ;
 262+ A086              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ A086              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ A086              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ A086              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ A086              ;0A                      ASL A		      \ *= 2
 267+ A086              ;A8                      TAY 		      \ digram index = 0to62
 268+ A086              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ A086              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ A086              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ A086              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ A086              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ A086              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ A086              ;
 275+ A086              ;	.TT47	\ more page4, subtract #160
 276+ A086              ;E9 A0                   SBC #&A0	\ -= 160
 277+ A086              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ A086              ;AA                      TAX 		\ copy of word index
 279+ A086              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ A086              ;85 22                   STA &22		\ V
 281+ A086              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ A086              ;85 23                   STA &23		\ V+1
 283+ A086              ;A0 00                   LDY #0
 284+ A086              ;8A                      TXA 		\ token = word index
 285+ A086              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ A086              ;	.TT51	\ counters Y letter, X token
 287+ A086              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ A086              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ A086              ;C8                      INY 		\ letter count
 290+ A086              ;D0 F9                   BNE TT51	\ loop Y
 291+ A086              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ A086              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ A086              ;	.TT49	\ word ended
 294+ A086              ;C8                      INY
 295+ A086              ;D0 02                   BNE TT59    	\ next word
 296+ A086              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ A086              ;	.TT59	\ next word
 298+ A086              ;CA                      DEX 		\ token count
 299+ A086              ;D0 ED                   BNE TT51	\ loop X token
 300+ A086              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ A086              ;98                      TYA
 302+ A086              ;48                      PHA 		\ store Yindex
 303+ A086              ;A5 23                   LDA &23		\ V+1
 304+ A086              ;48                      PHA 		\ correct pointer hi
 305+ A086              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ A086              ;49 23                   EOR #&23	\ decode '#'
 307+ A086              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ A086              ;68                      PLA 		\ restore this depth's Vhi
 309+ A086              ;85 23                   STA &23		\ V+1
 310+ A086              ;68                      PLA
 311+ A086              ;A8                      TAY 		\ restore this depth's Yindex
 312+ A086              ;C8                      INY 		\ next letter
 313+ A086              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ A086              ;E6 23                   INC &23		\ V+1
 315+ A086              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ A086              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ A086              ;	.TT48 	\ rts
 318+ A086              ;60                      RTS 		\ end of flight token printing TT27
 319+ A086              ;
 320+ A086              ;
 321+ A086              ;
# file closed: ./Tables/name_digrams.asm
 824  A086              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 825  A086
 826  A086              ; Include all maths libraries to test assembly
 827  A086                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ A086              addhldesigned:
   2+ A086 CB 7C                bit     7,h
   3+ A088 20 03                jr      nz,.noneghl
   4+ A08A CD D8 A4             call    negate16hl
   5+ A08D              .noneghl:
   6+ A08D CB 7A                bit     7,d
   7+ A08F 20 03                jr      nz,.nonegde
   8+ A091 CD DF A4             call    negate16de
   9+ A094              .nonegde:
  10+ A094 19                   add     hl,de                       ; do 2'd c add
  11+ A095 AF                   xor     a                           ; assume positive
  12+ A096 CB 7C                bit     7,h
  13+ A098 C8                   ret     z                           ; if not set then can exit early
  14+ A099 CD D8 A4             call    negate16hl
  15+ A09C 3E FF                ld      a,$FF
  16+ A09E C9                   ret
  17+ A09F
# file closed: ./Maths/addhldesigned.asm
 828  A09F                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ A09F
   2+ A09F              ; a = value to add
   3+ A09F              ; b = offset (equivalent to regX)
   4+ A09F              ; returns INWK [x] set to new value
   5+ A09F              addINWKbasigned:
   6+ A09F 21 0B C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
   7+ A0A2 4F           		ld      c,a                         ; preserve a
   8+ A0A3 78           		ld		a,b
   9+ A0A4 ED 31        		add		hl,a                        ; hl = INWK[x]
  10+ A0A6 79                   ld      a,c                         ; get back a value
  11+ A0A7 E6 80                and     $80                         ; get sign bit from a
  12+ A0A9 47                   ld      b,a                         ; now b = sign bit of a
  13+ A0AA 79                   ld      a,c                         ; a = original value
  14+ A0AB E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  15+ A0AD              ; hl = unsigned version of INWK0[b]
  16+ A0AD              ; a = value to add, also in c which will optimise later code
  17+ A0AD              ; b = sign bit of a ( in old code was varT)
  18+ A0AD              addhlcsigned:
  19+ A0AD 5E                   ld      e,(hl)                      ; de = INKK value
  20+ A0AE 23                   inc     hl
  21+ A0AF 56                   ld      d,(hl)
  22+ A0B0 23                   inc     hl                          ; now pointing a sign
  23+ A0B1 7E                   ld      a,(hl)                      ; a = sign bit
  24+ A0B2 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  25+ A0B3 A8                   xor     b                           ; a = resultant sign
  26+ A0B4 CB 7F                bit     7,a                         ; is it negative?
  27+ A0B6 28 28                jr      z,.postivecalc
  28+ A0B8              .negativecalc:
  29+ A0B8 7C                   ld      a,h
  30+ A0B9 E6 7F                and     SignMask8Bit
  31+ A0BB 67                   ld      h,a                         ; strip high bit
  32+ A0BC DD 68                ld      ixl,b                       ; save sign bit from b into d
  33+ A0BE 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  34+ A0C0 ED 42                sbc     hl,bc
  35+ A0C2 DD 45                ld      b,ixl                       ; get sign back
  36+ A0C4 EB                   ex      de,hl                       ; de = value hl = pointer to sign
  37+ A0C5 7E                   ld      a,(hl)                      ;
  38+ A0C6 E6 7F                and     SignMask8Bit
  39+ A0C8 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  40+ A0CA F6 80                or      $80                         ; set bit 0
  41+ A0CC A8                   xor     b                           ; flip bit on sign (var T)
  42+ A0CD 77                   ld      (hl),a
  43+ A0CE 2B                   dec     hl
  44+ A0CF 72                   ld      (hl),d
  45+ A0D0 2B                   dec     hl
  46+ A0D1 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  47+ A0D2 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  48+ A0D3 D8                   ret     c                           ; if carry was set then we can exit now
  49+ A0D4              .nocarry:
  50+ A0D4 CD D8 A4             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  51+ A0D7 B0                   or      b                           ; b is still varT
  52+ A0D8 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  53+ A0D9 73                   ld      (hl),e
  54+ A0DA 23                   inc     hl
  55+ A0DB 72                   ld      (hl),d
  56+ A0DC 23                   inc     hl
  57+ A0DD 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  58+ A0DE EB                   ex      de,hl                       ; hl = value de = pointer to sign
  59+ A0DF C9                   ret
  60+ A0E0              .postivecalc:
  61+ A0E0 DD 68                ld      ixl,b
  62+ A0E2 06 00                ld      b,0
  63+ A0E4 19                   add     hl,de
  64+ A0E5 EB                   ex      de,hl
  65+ A0E6 DD B5                or      ixl                         ; we don;t need to recover b here
  66+ A0E8 77                   ld      (hl),a                      ; push sign into INWK[x]
  67+ A0E9 2B                   dec     hl
  68+ A0EA 72                   ld      (hl),d
  69+ A0EB 2B                   dec     hl
  70+ A0EC 73                   ld      (hl),e
  71+ A0ED C9                   ret
  72+ A0EE
  73+ A0EE              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
  74+ A0EE              ;MVT1
  75+ A0EE              ;    S = bits 6 to 0 of A
  76+ A0EE              ;    A = sign bit => T
  77+ A0EE              ;    xor sign bit with ink[x] Sign
  78+ A0EE              ;    if negative thn its not an add
  79+ A0EE              ;
  80+ A0EE              ;        and h, 7F
  81+ A0EE              ;        b = 0
  82+ A0EE              ;        c = varS
  83+ A0EE              ;        subtract INW[X]hilo, bc
  84+ A0EE              ;        retain carry
  85+ A0EE              ;        get INKW[x]Sign
  86+ A0EE              ;        and 7F
  87+ A0EE              ;        subtract carry (so will go negtive if negative)
  88+ A0EE              ;        xor bit 7 of h with T to flip bit
  89+ A0EE              ;        write to INKW[x]Sign
  90+ A0EE              ;
  91+ A0EE              ;    else
  92+ A0EE              ;MV10.
  93+ A0EE              ;        add INWK[x]hi,lo, varS
  94+ A0EE              ;        or      sign bit
  95+ A0EE
  96+ A0EE
# file closed: ./Maths/addhlasigned.asm
 829  A0EE                  INCLUDE "./Maths/Utilities/AddDEtoCash.asm"
# file opened: ./Maths/Utilities/AddDEtoCash.asm
   1+ A0EE              ; Note its big endian
   2+ A0EE 2A A0 97     addDEtoCash:            ld      hl,(Cash)
   3+ A0F1 19                                   add     hl,de
   4+ A0F2 22 A0 97                             ld      (Cash),hl
   5+ A0F5 11 00 00                             ld      de,0
   6+ A0F8 2A A2 97                             ld      hl,(Cash+2)
   7+ A0FB ED 5A                                adc     hl,de
   8+ A0FD 22 A2 97                             ld      (Cash+2),hl
   9+ A100 C9                                   ret
  10+ A101
  11+ A101 2A A0 97     subDEfromCash:          ld      hl,(Cash)
  12+ A104 7C                                   ld      a,h
  13+ A105 B5                                   or      l
  14+ A106 2A A2 97                             ld      hl,(Cash+2)
  15+ A109 B4                                   or      h
  16+ A10A B5                                   or      l
  17+ A10B C8                                   ret     z               ; No cash return
  18+ A10C B7                                   or      a
  19+ A10D 2A A0 97                             ld      hl,(Cash)
  20+ A110 ED 52                                sbc     hl,de
  21+ A112 22 A0 97                             ld      (Cash),hl
  22+ A115 11 00 00                             ld      de,0
  23+ A118 2A A2 97                             ld      hl,(Cash+2)
  24+ A11B ED 52                                sbc     hl,de
  25+ A11D 22 A2 97                             ld      (Cash+2),hl
  26+ A120                                      JumpOnBitSet h,7,.ZeroCash
  26+ A120 CB 7C       >                        bit 	7,h
  26+ A122 C2 26 A1    >                        jp      nz,.ZeroCash
  27+ A125 C9                                   ret
  28+ A126 21 00 00     .ZeroCash:              ld      hl,0
  29+ A129 22 A0 97                             ld      (Cash),hl
  30+ A12C 22 A2 97                             ld      (Cash+2),hl
  31+ A12F C9                                   ret
  32+ A130
# file closed: ./Maths/Utilities/AddDEtoCash.asm
 830  A130                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A130              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A130 2A 21 94                             ld  hl,(varRS)
   3+ A133 3A 20 94                             ld  a,(varQ)
   4+ A136 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A138 11 00 00                             ld  de,0        ; de = XY
   6+ A13B 47                                   ld  b,a         ; b = Q
   7+ A13C                                      ShiftHLRight1
   7+ A13C CB 3C       >			   srl h
   7+ A13E CB 1D       >			   rr  l
   8+ A140 CB 20                                sla b
   9+ A142 30 03                                jr  nc,.LL126
  10+ A144 EB           .LL125:                 ex de,hl
  11+ A145 19                                   add hl,de
  12+ A146 EB                                   ex  de,hl       ; de = de + rs
  13+ A147              .LL126:                 ShiftHLRight1
  13+ A147 CB 3C       >			   srl h
  13+ A149 CB 1D       >			   rr  l
  14+ A14B CB 20                                sla b
  15+ A14D 38 F5                                jr      c,.LL125
  16+ A14F 20 F6                                jr      nz,.LL126
  17+ A151 EB                                   ex      de,hl   ; hl = result
  18+ A152 D1 C1                                pop     bc,,de
  19+ A154 C9                                   ret
  20+ A155
  21+ A155
  22+ A155              MacroDEEquQmulASigned:  MACRO
  23+ A155 ~                                    ld      d,a                         ; save a into d
  24+ A155 ~                                    ld      a,(varQ)
  25+ A155 ~                                    ld      e,a
  26+ A155 ~                                    xor     d                           ; a = a xor var Q
  27+ A155 ~                                    and     SignOnly8Bit
  28+ A155 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A155 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A155 ~                                    and     SignMask8Bit
  31+ A155 ~                                    ld      d,a
  32+ A155 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A155 ~                                    and     SignMask8Bit
  34+ A155 ~                                    ld      e,a
  35+ A155 ~                                    mul                                 ; de = a * Q
  36+ A155 ~                                    ld      a,d
  37+ A155 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A155 ~                                    ld      d,a
  39+ A155                                      ENDM
  40+ A155
  41+ A155
  42+ A155
  43+ A155                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A155              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A155 57          >                        ld      d,a                         ; save a into d
  44+ A156 3A 20 94    >                        ld      a,(varQ)
  44+ A159 5F          >                        ld      e,a
  44+ A15A AA          >                        xor     d                           ; a = a xor var Q
  44+ A15B E6 80       >                        and     SignOnly8Bit
  44+ A15D 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A15E 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A15F E6 7F       >                        and     SignMask8Bit
  44+ A161 57          >                        ld      d,a
  44+ A162 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A163 E6 7F       >                        and     SignMask8Bit
  44+ A165 5F          >                        ld      e,a
  44+ A166 ED 30       >                        mul                                 ; de = a * Q
  44+ A168 7A          >                        ld      a,d
  44+ A169 B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A16A 57          >                        ld      d,a
  45+ A16B 2A 21 94     madDEaddRS:             ld		hl,(varR)
  46+ A16E CD 77 A1                             call	madXAAddHLDESigned
  47+ A171 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A172                                      ClearCarryFlag
  48+ A172 B7          >                        or a
  49+ A173 DD 6B                                ld      ixl,e
  50+ A175 7A                                   ld      a,d
  51+ A176 C9                                   ret
  52+ A177
  53+ A177
  54+ A177 7C           madXAAddHLDESigned:     ld      a,h
  55+ A178 E6 80                                and     SignOnly8Bit
  56+ A17A 47                                   ld      b,a                         ;save sign bit in b
  57+ A17B AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A17C                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A17C FA 94 A1    >                        jp		m, .ADDHLDEOppSGN
  59+ A17F 78           .ADDHLDESameSigns:       ld      a,b
  60+ A180 B2                                   or      d
  61+ A181                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A181 FA 86 A1    >                        jp		m, .ADDHLDESameNeg
  62+ A184 19                                   add     hl,de
  63+ A185 C9                                   ret
  64+ A186 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A187 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A189 67                                   ld      h,a
  67+ A18A 7A                                   ld      a,d
  68+ A18B E6 7F                                and     SignMask8Bit
  69+ A18D 57                                   ld      d,a
  70+ A18E 19                                   add     hl,de
  71+ A18F 3E 80                                ld      a,SignOnly8Bit
  72+ A191 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A192 67                                   ld      h,a
  74+ A193 C9                                   ret
  75+ A194 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A195 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A197 67                                   ld      h,a
  78+ A198 7A                                   ld      a,d
  79+ A199 E6 7F                                and     SignMask8Bit
  80+ A19B 57                                   ld      d,a
  81+ A19C B7                                   or      a
  82+ A19D ED 52                                sbc     hl,de
  83+ A19F 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A1A1 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A1A2 B4                                   or      h
  86+ A1A3 67                                   ld      h,a                         ; set the previou sign value
  87+ A1A4 C9                                   ret
  88+ A1A5              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A1A5 AF          >                xor a
  88+ A1A6 95          >                sub l
  88+ A1A7 6F          >                ld l,a
  88+ A1A8 9F          >                sbc a,a
  88+ A1A9 94          >                sub h
  88+ A1AA 67          >                ld h,a
  89+ A1AB 78                                   ld      a,b
  90+ A1AC EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A1AE B4                                   or      h
  92+ A1AF 67                                   ld      h,a                         ; recover sign
  93+ A1B0 C9                                   ret
  94+ A1B1
  95+ A1B1
  96+ A1B1                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A1B1                  ;
  98+ A1B1                  ; enter : hl = 16-bit multiplier   = x
  99+ A1B1                  ;          e =  8-bit multiplicand = y
 100+ A1B1                  ;
 101+ A1B1                  ; exit  : ahl = 24-bit product
 102+ A1B1                  ;         carry reset
 103+ A1B1                  ;
 104+ A1B1                  ; uses  : af, de, hl
 105+ A1B1 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A1B2 63                                   ld h,e                      ; yl
 107+ A1B3 ED 30                                mul de                      ; xh*yl
 108+ A1B5 EB                                   ex de,hl
 109+ A1B6 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A1B8
 111+ A1B8 7A                                   ld  a,d                     ; sum products
 112+ A1B9 85                                   add a,l
 113+ A1BA 57                                   ld  d,a
 114+ A1BB EB                                   ex de,hl
 115+ A1BC
 116+ A1BC 7A                                   ld  a,d
 117+ A1BD CE 00                                adc a,0
 118+ A1BF C9                                   ret
 119+ A1C0
 120+ A1C0
 121+ A1C0
 122+ A1C0                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A1C0                 ;
 124+ A1C0                 ; enter : de = 16-bit multiplicand = y
 125+ A1C0                 ;         hl = 16-bit multiplicand = x
 126+ A1C0                 ;
 127+ A1C0                 ; exit  : dehl = 32-bit product
 128+ A1C0                 ;         carry reset
 129+ A1C0                 ;
 130+ A1C0                 ; uses  : af, bc, de, hl
 131+ A1C0
 132+ A1C0
 133+ A1C0
 134+ A1C0 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A1C1 4B                                   ld c,e                      ; y0
 136+ A1C2 5D                                   ld e,l                      ; x0
 137+ A1C3 6A                                   ld l,d
 138+ A1C4 E5                                   push hl                     ; x1 y1
 139+ A1C5 69                                   ld l,c                      ; y0
 140+ A1C6              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A1C6 ED 30                                mul de                      ; y1*x0
 142+ A1C8 EB                                   ex de,hl
 143+ A1C9 ED 30                                mul de                      ; x1*y0
 144+ A1CB
 145+ A1CB AF                                   xor a                       ; zero A
 146+ A1CC 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A1CD 8F                                   adc a,a                     ; capture carry p3
 148+ A1CE
 149+ A1CE 59                                   ld e,c                      ; x0
 150+ A1CF 50                                   ld d,b                      ; y0
 151+ A1D0 ED 30                                mul de                      ; y0*x0
 152+ A1D2
 153+ A1D2 47                                   ld b,a                      ; carry from cross products
 154+ A1D3 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A1D4
 156+ A1D4 7A                                   ld a,d
 157+ A1D5 85                                   add a,l
 158+ A1D6 67                                   ld h,a
 159+ A1D7 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A1D8
 161+ A1D8 D1                                   pop de
 162+ A1D9 ED 30                                mul de                      ; x1*y1
 163+ A1DB
 164+ A1DB EB                                   ex de,hl
 165+ A1DC ED 4A                                adc hl,bc
 166+ A1DE EB                                   ex de,hl                    ; de = final MSW
 167+ A1DF
 168+ A1DF C9                                   ret
 169+ A1E0
 170+ A1E0              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A1E0              ; enter : de = 16-bit multiplicand
 172+ A1E0              ;         hl = 16-bit multiplicand
 173+ A1E0              ; exit  : hl = 16-bit product
 174+ A1E0              ;         carry reset
 175+ A1E0              ; maths is
 176+ A1E0              ;        hl = y , de= x
 177+ A1E0              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A1E0              ;        hl = yhih & xlo + x
 179+ A1E0              ;
 180+ A1E0              ;
 181+ A1E0              ; uses  : af, bc, de, hl
 182+ A1E0 C5           mulDEbyHL:              push    bc
 183+ A1E1 7A                                   ld a,d                      ; a = xh
 184+ A1E2 54                                   ld d,h                      ; d = yh
 185+ A1E3 67                                   ld h,a                      ; h = xh
 186+ A1E4 4B                                   ld c,e                      ; c = xl
 187+ A1E5 45                                   ld b,l                      ; b = yl
 188+ A1E6 ED 30                                mul                         ; yh * yl
 189+ A1E8 EB                                   ex de,hl
 190+ A1E9 ED 30                                mul                         ; xh * yl
 191+ A1EB 19                                   add hl,de                   ; add cross products
 192+ A1EC 59                                   ld e,c
 193+ A1ED 50                                   ld d,b
 194+ A1EE ED 30                                mul                         ; yl * xl
 195+ A1F0 7D                                   ld a,l                      ; cross products lsb
 196+ A1F1 82                                   add a,d                     ; add to msb final
 197+ A1F2 67                                   ld h,a
 198+ A1F3 6B                                   ld l,e                      ; hl = final
 199+ A1F4                                      ; 83 cycles, 19 bytes
 200+ A1F4 AF                                   xor a                       ; reset carry
 201+ A1F5 C1                                   pop     bc
 202+ A1F6 C9                                   ret
 203+ A1F7
 204+ A1F7              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 205+ A1F7              ; enter : de = 16-bit multiplicand
 206+ A1F7              ;         hl = 16-bit multiplicand
 207+ A1F7              ; exit  : hl = 16-bit product
 208+ A1F7              ;         carry reset
 209+ A1F7              ;
 210+ A1F7              ; uses  : af, bc, de, hl
 211+ A1F7 00           mulDEbyHLSignByte       DB      0
 212+ A1F8 AF           mulDEbyHLSgnTo2c:       xor     a
 213+ A1F9 32 F7 A1                             ld      (mulDEbyHLSignByte),a
 214+ A1FC 7A           .SignDE:                ld      a,d
 215+ A1FD ED 27 80                             test    $80
 216+ A200 28 08                                jr      z,.SignHL
 217+ A202 E6 7F        .NegativeDE:            and     $7F
 218+ A204 57                                   ld      d,a
 219+ A205 3E 80                                ld      a,$80
 220+ A207 32 F7 A1                             ld      (mulDEbyHLSignByte),a
 221+ A20A 7C           .SignHL:                ld      a,h
 222+ A20B ED 27 80                             test    $80
 223+ A20E 28 0B                                jr      z,.AbsoluteMultiply
 224+ A210 E6 7F        .NegativeHL:            and     $7F
 225+ A212 67                                   ld      h,a
 226+ A213 3A F7 A1                             ld      a,(mulDEbyHLSignByte)
 227+ A216 EE 80                                xor     $80
 228+ A218 32 F7 A1                             ld      (mulDEbyHLSignByte),a
 229+ A21B CD E0 A1     .AbsoluteMultiply:      call    mulDEbyHL
 230+ A21E 3A F7 A1     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 231+ A221 ED 27 80                             test    $80
 232+ A224 C8                                   ret     z
 233+ A225 AF           .Negateghl: 				xor 	a
 234+ A226 95                                   sub 	l
 235+ A227 6F                                   ld 		l,a
 236+ A228 9F                                   sbc 	a,a
 237+ A229 94                                   sub 	h
 238+ A22A 67                                   ld 		h,a
 239+ A22B C9                                   ret
 240+ A22C
 241+ A22C AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 242+ A22D 32 F7 A1                             ld      (mulDEbyHLSignByte),a
 243+ A230 7A           .SignDE:                ld      a,d
 244+ A231 ED 27 80                             test    $80
 245+ A234 28 08                                jr      z,.AbsoluteMultiply
 246+ A236 E6 7F        .NegativeDE:            and     $7F
 247+ A238 57                                   ld      d,a
 248+ A239 3E 80                                ld      a,$80
 249+ A23B 32 F7 A1                             ld      (mulDEbyHLSignByte),a
 250+ A23E CD E0 A1     .AbsoluteMultiply:      call    mulDEbyHL
 251+ A241 3A F7 A1     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 252+ A244 ED 27 80                             test    $80
 253+ A247 C8                                   ret     z
 254+ A248 AF           .Negateghl:             xor 	a
 255+ A249 95                                   sub 	l
 256+ A24A 6F                                   ld 		l,a
 257+ A24B 9F                                   sbc 	a,a
 258+ A24C 94                                   sub 	h
 259+ A24D 67                                   ld 		h,a
 260+ A24E C9                                   ret
 261+ A24F
 262+ A24F
# file closed: ./Maths/multiply.asm
 831  A24F                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ A24F              ; "ASM_SQUA : TESTGOOD"
   2+ A24F              ; "AP = A^2 A = low,P = hi"
   3+ A24F
   4+ A24F              inline_squde: MACRO
   5+ A24F ~            			ld	e,a
   6+ A24F ~            			ld  d,a
   7+ A24F ~            			mul
   8+ A24F              			ENDM
   9+ A24F
  10+ A24F              inline_squa: MACRO
  11+ A24F ~            			ld	e,a
  12+ A24F ~            			ld  d,a
  13+ A24F ~            			mul
  14+ A24F ~            			ld	a,e
  15+ A24F              			ENDM
  16+ A24F
  17+ A24F
  18+ A24F              asm_squa:
  19+ A24F E6 7F        	and SignMask8Bit
  20+ A251              ; "ASM SQUA2 : TESTGOOD"
  21+ A251              ; "AP = A^2 A = low,P = hi singed"
  22+ A251              asm_squa2:
  23+ A251 5F           	ld e, a
  24+ A252 57           	ld d,a
  25+ A253 ED 30        	mul
  26+ A255 ED 53 C5 93  	ld (varP),de
  27+ A259 7B           	ld a,e
  28+ A25A C9           	ret
# file closed: ./Maths/asm_square.asm
 832  A25B                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ A25B              ; "ASM SQRT : TESTGOOD"
   2+ A25B              ; "16-bit integer square root"
   3+ A25B              ; "call with de = number to square root"
   4+ A25B              ; "returns   hl = square root"
   5+ A25B              ; "corrupts  bc, de"
   6+ A25B              asm_sqrt:
   7+ A25B 01 00 80     	ld bc,$8000
   8+ A25E 61           	ld h,c
   9+ A25F 69           	ld l,c
  10+ A260              .sqrloop:
  11+ A260 CB 38        	srl b
  12+ A262 CB 19        	rr c
  13+ A264 09           	add hl,bc
  14+ A265 EB           	ex de,hl
  15+ A266 ED 52        	sbc hl,de
  16+ A268 38 04        	jr c,.sqrbit
  17+ A26A EB           	ex de,hl
  18+ A26B 09           	add hl,bc
  19+ A26C 18 05        	jr .sqrfi
  20+ A26E              .sqrbit:
  21+ A26E 19           	add hl,de
  22+ A26F EB           	ex de,hl
  23+ A270 B7           	or a
  24+ A271 ED 42        	sbc hl,bc
  25+ A273              .sqrfi:
  26+ A273 CB 3C        	srl h
  27+ A275 CB 1D        	rr l
  28+ A277 CB 38        	srl b
  29+ A279 CB 19        	rr c
  30+ A27B 30 E3        	jr nc,.sqrloop
  31+ A27D C9           	ret
  32+ A27E
  33+ A27E
  34+ A27E              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ A27E 3A 20 94     	ld		a,(varQ)
  36+ A281 5F           	ld		e,a
  37+ A282 3A 21 94     	ld		a,(varR)
  38+ A285 57           	ld		d,a
  39+ A286 CD 5B A2     	call	asm_sqrt
  40+ A289 7D               ld      a,l
  41+ A28A 32 20 94     	ld		(varQ),a
  42+ A28D C9           	ret
  43+ A28E
# file closed: ./Maths/asm_sqrt.asm
 833  A28E                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ A28E              ; Divide 8-bit values
   2+ A28E              ; In: Divide E by divider C
   3+ A28E              ; Out: A = result, B = rest
   4+ A28E              ;
   5+ A28E              ;;;Div8:
   6+ A28E              ;;;    xor a
   7+ A28E              ;;;    ld b,8
   8+ A28E              ;;;Div8_Loop:
   9+ A28E              ;;;    rl e
  10+ A28E              ;;;    rla
  11+ A28E              ;;;    sub c
  12+ A28E              ;;;    jr nc,Div8_NoAdd
  13+ A28E              ;;;    add a,c
  14+ A28E              ;;;Div8_NoAdd:
  15+ A28E              ;;;    djnz Div8_Loop
  16+ A28E              ;;;    ld b,a
  17+ A28E              ;;;    ld a,e
  18+ A28E              ;;;    rla
  19+ A28E              ;;;    cpl
  20+ A28E              ;;;    ret
  21+ A28E
  22+ A28E              ;;Inputs: DE is the numerator, BC is the divisor
  23+ A28E              ;;Outputs: DE is the result
  24+ A28E              ;;         A is a copy of E
  25+ A28E              ;;         HL is the remainder
  26+ A28E              ;;         BC is not changed
  27+ A28E              ;; so DE = DE /BC
  28+ A28E              ;140 bytes
  29+ A28E              ;145cc
  30+ A28E
  31+ A28E              MacroDEDivBC:       MACRO
  32+ A28E ~                                rla
  33+ A28E ~                                adc     hl,hl
  34+ A28E ~                                sbc     hl,bc
  35+ A28E ~                                jr      nc,$+3
  36+ A28E ~                                add     hl,bc
  37+ A28E                                  ENDM
  38+ A28E
  39+ A28E              DEequDEDivBC:
  40+ A28E AF               xor a
  41+ A28F ED 62            sbc hl,hl
  42+ A291 7A               ld a,d
  43+ A292                  MacroDEDivBC
  43+ A292 17          >                    rla
  43+ A293 ED 6A       >                    adc     hl,hl
  43+ A295 ED 42       >                    sbc     hl,bc
  43+ A297 30 01       >                    jr      nc,$+3
  43+ A299 09          >                    add     hl,bc
  44+ A29A                  MacroDEDivBC
  44+ A29A 17          >                    rla
  44+ A29B ED 6A       >                    adc     hl,hl
  44+ A29D ED 42       >                    sbc     hl,bc
  44+ A29F 30 01       >                    jr      nc,$+3
  44+ A2A1 09          >                    add     hl,bc
  45+ A2A2                  MacroDEDivBC
  45+ A2A2 17          >                    rla
  45+ A2A3 ED 6A       >                    adc     hl,hl
  45+ A2A5 ED 42       >                    sbc     hl,bc
  45+ A2A7 30 01       >                    jr      nc,$+3
  45+ A2A9 09          >                    add     hl,bc
  46+ A2AA                  MacroDEDivBC
  46+ A2AA 17          >                    rla
  46+ A2AB ED 6A       >                    adc     hl,hl
  46+ A2AD ED 42       >                    sbc     hl,bc
  46+ A2AF 30 01       >                    jr      nc,$+3
  46+ A2B1 09          >                    add     hl,bc
  47+ A2B2                  MacroDEDivBC
  47+ A2B2 17          >                    rla
  47+ A2B3 ED 6A       >                    adc     hl,hl
  47+ A2B5 ED 42       >                    sbc     hl,bc
  47+ A2B7 30 01       >                    jr      nc,$+3
  47+ A2B9 09          >                    add     hl,bc
  48+ A2BA                  MacroDEDivBC
  48+ A2BA 17          >                    rla
  48+ A2BB ED 6A       >                    adc     hl,hl
  48+ A2BD ED 42       >                    sbc     hl,bc
  48+ A2BF 30 01       >                    jr      nc,$+3
  48+ A2C1 09          >                    add     hl,bc
  49+ A2C2                  MacroDEDivBC
  49+ A2C2 17          >                    rla
  49+ A2C3 ED 6A       >                    adc     hl,hl
  49+ A2C5 ED 42       >                    sbc     hl,bc
  49+ A2C7 30 01       >                    jr      nc,$+3
  49+ A2C9 09          >                    add     hl,bc
  50+ A2CA                  MacroDEDivBC
  50+ A2CA 17          >                    rla
  50+ A2CB ED 6A       >                    adc     hl,hl
  50+ A2CD ED 42       >                    sbc     hl,bc
  50+ A2CF 30 01       >                    jr      nc,$+3
  50+ A2D1 09          >                    add     hl,bc
  51+ A2D2 17               rla
  52+ A2D3 2F               cpl
  53+ A2D4 57               ld d,a
  54+ A2D5
  55+ A2D5 7B               ld a,e
  56+ A2D6                  MacroDEDivBC
  56+ A2D6 17          >                    rla
  56+ A2D7 ED 6A       >                    adc     hl,hl
  56+ A2D9 ED 42       >                    sbc     hl,bc
  56+ A2DB 30 01       >                    jr      nc,$+3
  56+ A2DD 09          >                    add     hl,bc
  57+ A2DE                  MacroDEDivBC
  57+ A2DE 17          >                    rla
  57+ A2DF ED 6A       >                    adc     hl,hl
  57+ A2E1 ED 42       >                    sbc     hl,bc
  57+ A2E3 30 01       >                    jr      nc,$+3
  57+ A2E5 09          >                    add     hl,bc
  58+ A2E6                  MacroDEDivBC
  58+ A2E6 17          >                    rla
  58+ A2E7 ED 6A       >                    adc     hl,hl
  58+ A2E9 ED 42       >                    sbc     hl,bc
  58+ A2EB 30 01       >                    jr      nc,$+3
  58+ A2ED 09          >                    add     hl,bc
  59+ A2EE                  MacroDEDivBC
  59+ A2EE 17          >                    rla
  59+ A2EF ED 6A       >                    adc     hl,hl
  59+ A2F1 ED 42       >                    sbc     hl,bc
  59+ A2F3 30 01       >                    jr      nc,$+3
  59+ A2F5 09          >                    add     hl,bc
  60+ A2F6                  MacroDEDivBC
  60+ A2F6 17          >                    rla
  60+ A2F7 ED 6A       >                    adc     hl,hl
  60+ A2F9 ED 42       >                    sbc     hl,bc
  60+ A2FB 30 01       >                    jr      nc,$+3
  60+ A2FD 09          >                    add     hl,bc
  61+ A2FE                  MacroDEDivBC
  61+ A2FE 17          >                    rla
  61+ A2FF ED 6A       >                    adc     hl,hl
  61+ A301 ED 42       >                    sbc     hl,bc
  61+ A303 30 01       >                    jr      nc,$+3
  61+ A305 09          >                    add     hl,bc
  62+ A306                  MacroDEDivBC
  62+ A306 17          >                    rla
  62+ A307 ED 6A       >                    adc     hl,hl
  62+ A309 ED 42       >                    sbc     hl,bc
  62+ A30B 30 01       >                    jr      nc,$+3
  62+ A30D 09          >                    add     hl,bc
  63+ A30E                  MacroDEDivBC
  63+ A30E 17          >                    rla
  63+ A30F ED 6A       >                    adc     hl,hl
  63+ A311 ED 42       >                    sbc     hl,bc
  63+ A313 30 01       >                    jr      nc,$+3
  63+ A315 09          >                    add     hl,bc
  64+ A316 17               rla
  65+ A317 2F               cpl
  66+ A318 5F               ld e,a
  67+ A319 C9               ret
  68+ A31A
  69+ A31A
  70+ A31A
  71+ A31A              ;divdide by 16 using undocumented instrunctions
  72+ A31A              ;Input: BC = Dividend, DE = Divisor, HL = 0
  73+ A31A              ;Output: BC = Quotient, HL = Remainder
  74+ A31A              ; Our use
  75+ A31A              ; BC = A0
  76+ A31A              ; DE = 0C
  77+ A31A              ; so BC = a * 256 / C
  78+ A31A              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  78+ A31A B9          >                        cp     c
  78+ A31B D2 46 A3    >                        jp		nc,DEV16ATooLarge
  79+ A31E 47                                   ld      b,a
  80+ A31F 59                                   ld      e,c
  81+ A320 0E 00                                ld      c,0
  82+ A322 16 00                                ld      d,0
  83+ A324 C3 31 A3                             jp      DIV16UNDOC
  84+ A327 47           DIV16Amul256dQUNDOC:    ld      b,a
  85+ A328 0E 00                                ld      c,0
  86+ A32A 21 20 94                             ld      hl,varQ
  87+ A32D 7E                                   ld      a,(hl)
  88+ A32E 16 00                                ld      d,0
  89+ A330 5F                                   ld      e,a
  90+ A331              DIV16BCDivDEUNDOC:
  91+ A331 21 00 00     DIV16UNDOC:             ld      hl,0
  92+ A334 78                                   ld      a,b
  93+ A335 06 10                                ld      b,16
  94+ A337 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  95+ A339 17                                   rla			; ...
  96+ A33A ED 6A                                adc	hl,hl		; ...
  97+ A33C ED 52                                sbc	hl,de		; ...
  98+ A33E 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  99+ A340 19                                   add	hl,de		; ...
 100+ A341 0D                                   dec	c		; ...
 101+ A342 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 102+ A344 47                                   ld   b,a
 103+ A345 C9                                   ret
 104+ A346 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 105+ A349 C9                                   ret
 106+ A34A
 107+ A34A              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 108+ A34A 06 08        asm_div8:               ld b,8
 109+ A34C AF                                   xor a
 110+ A34D CB 21        div8_loop:	            sla c
 111+ A34F 17                                   rla
 112+ A350 BA                                   cp d
 113+ A351 38 02                                jr c,div8_skip
 113+ A353
 114+ A353 0C                                   inc c
 115+ A354 92                                   sub d
 116+ A355 10 F6        div8_skip:	            djnz div8_loop
 117+ A357 C9                                   ret
 118+ A358              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 119+ A358 06 10        asm_div16:              ld b,16
 120+ A35A AF                                   xor a
 121+ A35B CB 25        div16_loop:	            sla l
 122+ A35D CB 14                                rl	h
 123+ A35F              ;    add hl,hl
 124+ A35F 17                                   rla
 125+ A360 B9                                   cp c
 126+ A361 38 02                                jr c,div16_skip
 127+ A363 2C                                   inc l
 128+ A364 91                                   sub c
 129+ A365 10 F4        div16_skip:		        djnz div16_loop
 130+ A367 C9                                   ret
 131+ A368              ;
 132+ A368              ; Divide 16-bit values (with 16-bit result)
 133+ A368              ; In: Divide BC by divider DE
 134+ A368              ; Out: BC = result, HL = rest
 135+ A368              ;
 136+ A368              HLDivC_Iteration: 	MACRO
 137+ A368 ~            					add	hl,hl		; unroll 16 times
 138+ A368 ~            					rla				; ...
 139+ A368 ~            					cp	c			; ...
 140+ A368 ~            					jr	1F
 141+ A368 ~            					sub	c			; ...
 142+ A368 ~            1:
 143+ A368 ~            					inc	l			; ...
 144+ A368              					ENDM
 145+ A368
 146+ A368
 147+ A368
 148+ A368              ; ">div1616: BC = BC / DE. HL = remainder"
 149+ A368 21 00 00     Div1616:            ld hl,0
 150+ A36B 78                               ld a,b
 151+ A36C 06 08                            ld b,8
 152+ A36E 17           .Div16_Loop1:       rla
 153+ A36F ED 6A                            adc hl,hl
 154+ A371 ED 52                            sbc hl,de
 155+ A373 30 01                            jr nc,.Div16_NoAdd1
 156+ A375 19                               add hl,de
 157+ A376 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 158+ A378 17                               rla
 159+ A379 2F                               cpl
 160+ A37A 47                               ld b,a
 161+ A37B 79                               ld a,c
 162+ A37C 48                               ld c,b
 163+ A37D 06 08                            ld b,8
 164+ A37F 17           .Div16_Loop2:       rla
 165+ A380 ED 6A                            adc hl,hl
 166+ A382 ED 52                            sbc hl,de
 167+ A384 30 01                            jr nc,.Div16_NoAdd2
 168+ A386 19                               add hl,de
 169+ A387 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 170+ A389 17                               rla
 171+ A38A 2F                               cpl
 172+ A38B 41                               ld b,c
 173+ A38C 4F                               ld c,a
 174+ A38D C9                               ret
 175+ A38E
 176+ A38E
 177+ A38E
 178+ A38E              BCDIVDE_Iteration: MACRO
 179+ A38E ~            				   rla
 180+ A38E ~            				   adc	hl,hl
 181+ A38E ~            				   add	hl,de
 182+ A38E ~            				   jr	c,1F
 183+ A38E ~            				   sbc	hl,de
 184+ A38E ~            1:
 185+ A38E              				   ENDM
 186+ A38E
 187+ A38E
 188+ A38E              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 189+ A38E              ;BC/DE ==> BC, remainder in HL
 190+ A38E              ;NOTE: BC/0 returns 0 as the quotient.
 191+ A38E              ;min: 738cc
 192+ A38E              ;max: 898cc
 193+ A38E              ;avg: 818cc
 194+ A38E              ;144 bytes
 195+ A38E AF           BC_Div_DE:              xor a
 196+ A38F 67                                   ld h,a
 197+ A390 6F                                   ld l,a
 198+ A391 93                                   sub e
 199+ A392 5F                                   ld e,a
 200+ A393 9F                                   sbc a,a
 201+ A394 92                                   sub d
 202+ A395 57                                   ld d,a
 203+ A396 78                                   ld a,b
 204+ A397                                      BCDIVDE_Iteration
 204+ A397 17          >				   rla
 204+ A398 ED 6A       >				   adc	hl,hl
 204+ A39A 19          >				   add	hl,de
 204+ A39B 38 02       >				   jr	c,1F
 204+ A39D ED 52       >				   sbc	hl,de
 204+ A39F             >1:
 205+ A39F                                      BCDIVDE_Iteration
 205+ A39F 17          >				   rla
 205+ A3A0 ED 6A       >				   adc	hl,hl
 205+ A3A2 19          >				   add	hl,de
 205+ A3A3 38 02       >				   jr	c,1F
 205+ A3A5 ED 52       >				   sbc	hl,de
 205+ A3A7             >1:
 206+ A3A7                                      BCDIVDE_Iteration
 206+ A3A7 17          >				   rla
 206+ A3A8 ED 6A       >				   adc	hl,hl
 206+ A3AA 19          >				   add	hl,de
 206+ A3AB 38 02       >				   jr	c,1F
 206+ A3AD ED 52       >				   sbc	hl,de
 206+ A3AF             >1:
 207+ A3AF                                      BCDIVDE_Iteration
 207+ A3AF 17          >				   rla
 207+ A3B0 ED 6A       >				   adc	hl,hl
 207+ A3B2 19          >				   add	hl,de
 207+ A3B3 38 02       >				   jr	c,1F
 207+ A3B5 ED 52       >				   sbc	hl,de
 207+ A3B7             >1:
 208+ A3B7                                      BCDIVDE_Iteration
 208+ A3B7 17          >				   rla
 208+ A3B8 ED 6A       >				   adc	hl,hl
 208+ A3BA 19          >				   add	hl,de
 208+ A3BB 38 02       >				   jr	c,1F
 208+ A3BD ED 52       >				   sbc	hl,de
 208+ A3BF             >1:
 209+ A3BF                                      BCDIVDE_Iteration
 209+ A3BF 17          >				   rla
 209+ A3C0 ED 6A       >				   adc	hl,hl
 209+ A3C2 19          >				   add	hl,de
 209+ A3C3 38 02       >				   jr	c,1F
 209+ A3C5 ED 52       >				   sbc	hl,de
 209+ A3C7             >1:
 210+ A3C7                                      BCDIVDE_Iteration
 210+ A3C7 17          >				   rla
 210+ A3C8 ED 6A       >				   adc	hl,hl
 210+ A3CA 19          >				   add	hl,de
 210+ A3CB 38 02       >				   jr	c,1F
 210+ A3CD ED 52       >				   sbc	hl,de
 210+ A3CF             >1:
 211+ A3CF                                      BCDIVDE_Iteration
 211+ A3CF 17          >				   rla
 211+ A3D0 ED 6A       >				   adc	hl,hl
 211+ A3D2 19          >				   add	hl,de
 211+ A3D3 38 02       >				   jr	c,1F
 211+ A3D5 ED 52       >				   sbc	hl,de
 211+ A3D7             >1:
 212+ A3D7 17                                   rla
 213+ A3D8 47                                   ld b,a
 214+ A3D9
 215+ A3D9 79                                   ld a,c
 216+ A3DA                                      BCDIVDE_Iteration
 216+ A3DA 17          >				   rla
 216+ A3DB ED 6A       >				   adc	hl,hl
 216+ A3DD 19          >				   add	hl,de
 216+ A3DE 38 02       >				   jr	c,1F
 216+ A3E0 ED 52       >				   sbc	hl,de
 216+ A3E2             >1:
 217+ A3E2                                      BCDIVDE_Iteration
 217+ A3E2 17          >				   rla
 217+ A3E3 ED 6A       >				   adc	hl,hl
 217+ A3E5 19          >				   add	hl,de
 217+ A3E6 38 02       >				   jr	c,1F
 217+ A3E8 ED 52       >				   sbc	hl,de
 217+ A3EA             >1:
 218+ A3EA                                      BCDIVDE_Iteration
 218+ A3EA 17          >				   rla
 218+ A3EB ED 6A       >				   adc	hl,hl
 218+ A3ED 19          >				   add	hl,de
 218+ A3EE 38 02       >				   jr	c,1F
 218+ A3F0 ED 52       >				   sbc	hl,de
 218+ A3F2             >1:
 219+ A3F2                                      BCDIVDE_Iteration
 219+ A3F2 17          >				   rla
 219+ A3F3 ED 6A       >				   adc	hl,hl
 219+ A3F5 19          >				   add	hl,de
 219+ A3F6 38 02       >				   jr	c,1F
 219+ A3F8 ED 52       >				   sbc	hl,de
 219+ A3FA             >1:
 220+ A3FA                                      BCDIVDE_Iteration
 220+ A3FA 17          >				   rla
 220+ A3FB ED 6A       >				   adc	hl,hl
 220+ A3FD 19          >				   add	hl,de
 220+ A3FE 38 02       >				   jr	c,1F
 220+ A400 ED 52       >				   sbc	hl,de
 220+ A402             >1:
 221+ A402                                      BCDIVDE_Iteration
 221+ A402 17          >				   rla
 221+ A403 ED 6A       >				   adc	hl,hl
 221+ A405 19          >				   add	hl,de
 221+ A406 38 02       >				   jr	c,1F
 221+ A408 ED 52       >				   sbc	hl,de
 221+ A40A             >1:
 222+ A40A                                      BCDIVDE_Iteration
 222+ A40A 17          >				   rla
 222+ A40B ED 6A       >				   adc	hl,hl
 222+ A40D 19          >				   add	hl,de
 222+ A40E 38 02       >				   jr	c,1F
 222+ A410 ED 52       >				   sbc	hl,de
 222+ A412             >1:
 223+ A412                                      BCDIVDE_Iteration
 223+ A412 17          >				   rla
 223+ A413 ED 6A       >				   adc	hl,hl
 223+ A415 19          >				   add	hl,de
 223+ A416 38 02       >				   jr	c,1F
 223+ A418 ED 52       >				   sbc	hl,de
 223+ A41A             >1:
 224+ A41A 17                                   rla
 225+ A41B 4F                                   ld c,a
 226+ A41C C9                                   ret
 227+ A41D
 228+ A41D              ;Inputs:
 229+ A41D              ;     DE,BC are 8.8 Fixed Point numbers
 230+ A41D              ;Outputs:
 231+ A41D              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 232+ A41D              ;if DE is 0 : 122cc or 136cc if BC is negative
 233+ A41D              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 234+ A41D              ;Otherwise:
 235+ A41D              ;min: 1107cc
 236+ A41D              ;max: 1319cc
 237+ A41D              ;avg: 1201cc
 238+ A41D 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 239+ A41E AA                                   xor d
 240+ A41F F5                                   push af   ;sign bit is the result sign bit
 241+ A420              ; Now make sure the inputs are positive
 242+ A420 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 243+ A421 F2 2A A4                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 244+ A424 AF                                   xor a
 245+ A425 91                                   sub c
 246+ A426 4F                                   ld c,a
 247+ A427 9F                                   sbc a,a
 248+ A428 90                                   sub b
 249+ A429 47                                   ld b,a
 250+ A42A 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 251+ A42B B2                                   or d
 252+ A42C FA 35 A4                             jp m,BC_Div_DE_88_lbl2
 253+ A42F AF                                   xor a
 254+ A430 93                                   sub e
 255+ A431 5F                                   ld e,a
 256+ A432 9F                                   sbc a,a
 257+ A433 92                                   sub d
 258+ A434 57                                   ld d,a
 259+ A435 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 260+ A436 28 1D                                jr z,div_fixed88_overflow
 261+ A438 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 262+ A43A 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 263+ A43B 83                                   add a,e
 264+ A43C 7A                                   ld a,d
 265+ A43D 8C                                   adc a,h
 266+ A43E 38 15                                jr c,div_fixed88_overflow
 267+ A440 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 268+ A441 79                                   ld a,c
 269+ A442 CD 5D A4                             call div_fixed88_sub
 270+ A445 4F                                   ld c,a
 271+ A446 78                                   ld a,b      ;A is now 0
 272+ A447 CD 5D A4                             call div_fixed88_sub
 273+ A44A 51                                   ld d,c
 274+ A44B 5F                                   ld e,a
 275+ A44C F1                                   pop af
 276+ A44D F0                                   ret p
 277+ A44E AF                                   xor a
 278+ A44F 93                                   sub e
 279+ A450 5F                                   ld e,a
 280+ A451 9F                                   sbc a,a
 281+ A452 92                                   sub d
 282+ A453 57                                   ld d,a
 283+ A454 C9                                   ret
 284+ A455
 285+ A455 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 286+ A458 F1                                   pop af
 287+ A459 F0                                   ret p
 288+ A45A 13                                   inc de
 289+ A45B 1C                                   inc e
 290+ A45C C9                                   ret
 291+ A45D
 292+ A45D              ;min: 456cc
 293+ A45D              ;max: 536cc
 294+ A45D              ;avg: 496cc
 295+ A45D 06 08        div_fixed88_sub:        ld b,8
 296+ A45F 17           BC_Div_DE_88_lbl3:      rla
 297+ A460 ED 6A                                adc hl,hl
 298+ A462 19                                   add hl,de
 299+ A463 38 02                                jr c,$+4
 300+ A465 ED 52                                sbc hl,de
 301+ A467 10 F6                                djnz BC_Div_DE_88_lbl3
 302+ A469 8F                                   adc a,a
 303+ A46A C9                                   ret
 304+ A46B
# file closed: ./Maths/asm_divide.asm
 834  A46B                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ A46B              asm_tis2:
   2+ A46B              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A46B              ; ">DOES NOT DO SIGNED YET"
   4+ A46B F5           	push af
   5+ A46C E6 7F            and SignMask8Bit
   6+ A46E 57           	ld d,a				;; d = A
   7+ A46F 3A 20 94     	ld a,(varQ)
   8+ A472 5F           	ld e,a
   9+ A473 7A           	ld a,d
  10+ A474 BB           	cp e
  11+ A475 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A477 1E 60        	ld e, 96
  13+ A479 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A47B EB           	ex de,hl
  15+ A47C 3A 20 94     	ld a,(varQ)
  16+ A47F 4F           	ld c,a
  17+ A480 CD 58 A3     	call asm_div16
  18+ A483 F1           	pop af
  19+ A484 E6 80        	and $80
  20+ A486 B5           	or l
  21+ A487 C9           	ret
  22+ A488              .tis2_set96:
  23+ A488 F1           	pop af
  24+ A489 E6 80        	and $80
  25+ A48B F6 96        	or $96
  26+ A48D C9           	ret
  27+ A48E
  28+ A48E
  29+ A48E              asm_unit_vector:
  30+ A48E              squareregfx:
  31+ A48E 3A 74 C0     	ld a,(UBnkXScaled)
  32+ A491 57           	ld d,a
  33+ A492 5F           	ld e,a
  34+ A493 ED 30        	mul
  35+ A495 EB           	ex de,hl
  36+ A496              squareregfy:
  37+ A496 3A 76 C0     	ld a, (UBnkYScaled)
  38+ A499 57           	ld d,a
  39+ A49A 5F           	ld e,a
  40+ A49B ED 30        	mul
  41+ A49D 19           	add hl,de
  42+ A49E              squareregfz:
  43+ A49E 3A 78 C0     	ld a, (UBnkZScaled)
  44+ A4A1 57           	ld d,a
  45+ A4A2 5F           	ld e,a
  46+ A4A3 ED 30        	mul
  47+ A4A5 19           	add hl,de
  48+ A4A6 EB           	ex de,hl			; de de to number to root
  49+ A4A7              hlequsquareroot:
  50+ A4A7 CD 5B A2     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A4AA E5           	push hl				; save it for work 3 copies
  52+ A4AB E5           	push hl				; save it for work
  53+ A4AC E5           	push hl				; save it for work
  54+ A4AD              normfx:
  55+ A4AD 3A 74 C0     	ld a,(UBnkXScaled)
  56+ A4B0 E1           	pop hl				; get copy #1
  57+ A4B1 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A4B2 4F           	ld c,a
  59+ A4B3 CD 6B A4     	call asm_tis2
  60+ A4B6 32 74 C0     	ld (UBnkXScaled),a
  61+ A4B9              normfy:
  62+ A4B9 3A 76 C0     	ld a,(UBnkYScaled)
  63+ A4BC E1           	pop hl				; get copy #2
  64+ A4BD 7D           	ld a,l
  65+ A4BE 4F           	ld c,a
  66+ A4BF CD 6B A4     	call asm_tis2
  67+ A4C2 32 76 C0     	ld (UBnkYScaled),a
  68+ A4C5              normfz:
  69+ A4C5 3A 78 C0     	ld a,(UBnkZScaled)
  70+ A4C8 E1           	pop hl				; get copy #2
  71+ A4C9 7D           	ld a,l
  72+ A4CA 4F           	ld c,a
  73+ A4CB CD 6B A4     	call asm_tis2
  74+ A4CE 32 78 C0     	ld (UBnkZScaled),a
  75+ A4D1              asm_unit_vector_end:
  76+ A4D1 C9           	ret
  77+ A4D2
# file closed: ./Maths/asm_unitvector.asm
 835  A4D2                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ A4D2              compare16HLDE:
   2+ A4D2              ; Input:
   3+ A4D2              ;       HL = 1st value
   4+ A4D2              ;       DE = 2nd value
   5+ A4D2              ; Output:
   6+ A4D2              ;       CF, ZF = results of comparison:
   7+ A4D2              ;
   8+ A4D2              ;               CF      ZF      Result
   9+ A4D2              ;               -----------------------------------
  10+ A4D2              ;               0       0       HL > DE
  11+ A4D2              ;               0       1       HL == DE
  12+ A4D2              ;               1       0       HL < DE
  13+ A4D2              ;               1       1       Impossible
  14+ A4D2              ;
  15+ A4D2 E5           		push    hl
  16+ A4D3 A7           		and     a
  17+ A4D4 ED 52        		sbc     hl,de
  18+ A4D6 E1           		pop     hl
  19+ A4D7 C9           		ret
  20+ A4D8
# file closed: ./Maths/compare16.asm
 836  A4D8                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ A4D8              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A4D8              ;; 16-bit negate
   3+ A4D8              negate16:
   4+ A4D8              negate16hl:
   5+ A4D8                      ; Input:
   6+ A4D8                      ;       HL = value
   7+ A4D8                      ; Output:
   8+ A4D8                      ;       HL = -value
   9+ A4D8                      ; Destroys:
  10+ A4D8                      ;       AF
  11+ A4D8                      ;
  12+ A4D8 AF           	xor 	a
  13+ A4D9 95           	sub 	l
  14+ A4DA 6F           	ld 		l,a
  15+ A4DB 9F           	sbc 	a,a
  16+ A4DC 94           	sub 	h
  17+ A4DD 67           	ld 		h,a
  18+ A4DE C9           	ret
  19+ A4DF
  20+ A4DF              negate16de:
  21+ A4DF AF           	xor 	a
  22+ A4E0 93           	sub 	e
  23+ A4E1 5F           	ld 		e,a
  24+ A4E2 9F           	sbc 	a,a
  25+ A4E3 92           	sub 	d
  26+ A4E4 57           	ld 		d,a
  27+ A4E5 C9           	ret
  28+ A4E6
  29+ A4E6              negate16bc:
  30+ A4E6 AF           	xor 	a
  31+ A4E7 91           	sub 	c
  32+ A4E8 4F           	ld 		c,a
  33+ A4E9 9F           	sbc 	a,a
  34+ A4EA 90           	sub 	b
  35+ A4EB 47           	ld 		b,a
  36+ A4EC C9           	ret
  37+ A4ED
  38+ A4ED
  39+ A4ED              macronegate16hl:	MACRO
  40+ A4ED ~            					xor 	a
  41+ A4ED ~            					sub 	l
  42+ A4ED ~            					ld 		l,a
  43+ A4ED ~            					sbc 	a,a
  44+ A4ED ~            					sub 	h
  45+ A4ED ~            					ld 		h,a
  46+ A4ED              					ENDM
  47+ A4ED
  48+ A4ED              macronegate16de:	MACRO
  49+ A4ED ~            					xor 	a
  50+ A4ED ~                                sub 	e
  51+ A4ED ~                                ld 		e,a
  52+ A4ED ~                                sbc 	a,a
  53+ A4ED ~                                sub 	d
  54+ A4ED ~                                ld 		d,a
  55+ A4ED              					ENDM
  56+ A4ED              macronegate16bc:	MACRO
  57+ A4ED ~            					xor 	a
  58+ A4ED ~                                sub 	c
  59+ A4ED ~                                ld 		c,a
  60+ A4ED ~                                sbc 	a,a
  61+ A4ED ~                                sub 	b
  62+ A4ED ~                                ld 		b,a
  63+ A4ED              					ENDM
  64+ A4ED
  65+ A4ED              macronegate16ix:	MACRO
  66+ A4ED ~            					xor 	a
  67+ A4ED ~                                sub 	ixl
  68+ A4ED ~                                ld 		ixl,a
  69+ A4ED ~                                sbc 	a,a
  70+ A4ED ~                                sub 	ixh
  71+ A4ED ~                                ld 		ixh,a
  72+ A4ED              					ENDM
# file closed: ./Maths/negate16.asm
 837  A4ED                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ A4ED DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ A4EF                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ A4EF BA          >                        cp     d
   2+ A4F0 D2 05 A5    >                        jp		nc,TISXAccGTEQ
   3+ A4F3 4F                                   ld			c,a
   4+ A4F4 CD 4A A3                             call		asm_div8
   5+ A4F7 79                                   ld			a,c							; a = result
   6+ A4F8 CB 3F                                srl			a							; result / 4
   7+ A4FA 47                                   ld			b,a							; t = t /4
   8+ A4FB CB 3F                                srl			a							; result / 8
   9+ A4FD 80                                   add			a,b							; result /8 + result /4
  10+ A4FE 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ A4FF DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ A501 E6 80                                and			$80							; recover sign only
  13+ A503 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ A504 C9                                   ret
  15+ A505              TISXAccGTEQ:
  16+ A505              ;TI4:										;\ clean to +/- unity
  17+ A505 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ A507 E6 80                                and			$80							; copy of Acc
  19+ A509 F6 60                                or			$60							; unity
  20+ A50B C9                                   ret
  21+ A50C
  22+ A50C
  23+ A50C
  24+ A50C
  25+ A50C              normaliseXX1596fast:
  26+ A50C                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ A50C 3A 74 C0     	ld		a,(XX15)		    ; XX15+0
  28+ A50F DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ A511 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ A513              N96SQX:
  31+ A513              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ A513 5F          >			ld	e,a
  31+ A514 57          >			ld  d,a
  31+ A515 ED 30       >			mul
  32+ A517 62           	ld		h,d					; h == varR d = varO e= varA
  33+ A518 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ A519              N96SQY:
  35+ A519 3A 75 C0     	ld		a,(XX15+1)
  36+ A51C DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ A51E E6 7F        	and		SignMask8Bit                 ; = abs
  38+ A520              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ A520 5F          >			ld	e,a
  38+ A521 57          >			ld  d,a
  38+ A522 ED 30       >			mul
  39+ A524 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ A525              N96SQZ:
  41+ A525 3A 76 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ A528 FD 67        	ld		iyh,a               ; iyh = signed
  43+ A52A E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ A52C              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ A52C 5F          >			ld	e,a
  44+ A52D 57          >			ld  d,a
  44+ A52E ED 30       >			mul
  45+ A530              N96SQADD:
  46+ A530 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ A531 EB           	ex		de,hl				; hl => de ready for square root
  48+ A532              N96SQRT:
  49+ A532 CD 5B A2     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ A535              N96NORMX:
  51+ A535 3A 74 C0     	ld		a,(XX15+0)
  52+ A538 E6 7F        	and		SignMask8Bit
  53+ A53A 4F           	ld		c,a
  54+ A53B 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ A53C CD 19 A7     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ A53F 47           	ld		b,a				;++SGN
  57+ A540 DD 7C        	ld		a,ixh			;++SGN
  58+ A542 E6 80        	and		$80				;++SGN
  59+ A544 B0           	or		b				;++SGN
  60+ A545 32 74 C0     	ld		(XX15+0),a
  61+ A548              N96NORMY:
  62+ A548 3A 75 C0     	ld		a,(XX15+1)
  63+ A54B E6 7F        	and		SignMask8Bit
  64+ A54D 4F           	ld		c,a
  65+ A54E 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ A54F CD 19 A7     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ A552 47           	ld		b,a				;++SGN
  68+ A553 DD 7D        	ld		a,ixl			;++SGN
  69+ A555 E6 80        	and		$80				;++SGN
  70+ A557 B0           	or		b				;++SGN
  71+ A558 32 75 C0     	ld		(XX15+1),a
  72+ A55B              N96NORMZ:
  73+ A55B 3A 76 C0     	ld		a,(XX15+2)
  74+ A55E E6 7F        	and		SignMask8Bit
  75+ A560 4F           	ld		c,a
  76+ A561 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ A562 CD 19 A7     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ A565 47           	ld		b,a				;++SGN
  79+ A566 FD 7C        	ld		a,iyh			;++SGN
  80+ A568 E6 80        	and		$80				;++SGN
  81+ A56A B0           	or		b				;++SGN
  82+ A56B 32 76 C0     	ld		(XX15+2),a
  83+ A56E C9           	ret
  84+ A56F
  85+ A56F              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  86+ A56F 3A 74 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  87+ A572                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  87+ A572 5F          >			ld	e,a
  87+ A573 57          >			ld  d,a
  87+ A574 ED 30       >			mul
  88+ A576 7A                                   ld		a,d
  89+ A577 32 21 94                             ld		(varR),a			; R	 \ hi sum later use b
  90+ A57A 7B                                   ld		a,e
  91+ A57B 32 20 94                             ld		(varQ),a			; Q	 \ lo sum later use c
  92+ A57E 32 C5 93                             ld		(varP),a			; P	 \ lo sum later just drop
  93+ A581 3A 75 C0                             ld		a,(XX15+1)
  94+ A584                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  94+ A584 5F          >			ld	e,a
  94+ A585 57          >			ld  d,a
  94+ A586 ED 30       >			mul
  95+ A588 7A                                   ld		a,d
  96+ A589 32 40 94                             ld		(varT),a			; T	 \ hi sum
  97+ A58C 7B                                   ld		a,e
  98+ A58D 32 C5 93                             ld		(varP),a			; P	 \ lo sum
  99+ A590 21 20 94                             ld		hl,varQ
 100+ A593 8E                                   adc		a,(hl)				; +Q
 101+ A594 32 20 94                             ld		(varQ),a			; =>Q
 102+ A597 3A 40 94                             ld		a,(varT)			;
 103+ A59A 21 21 94                             ld		hl,varR
 104+ A59D 8E                                   adc		a,(hl)				;  R
 105+ A59E 32 21 94                             ld		(varR),a			; R
 106+ A5A1 3A 76 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 107+ A5A4                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 107+ A5A4 5F          >			ld	e,a
 107+ A5A5 57          >			ld  d,a
 107+ A5A6 ED 30       >			mul
 108+ A5A8 7A                                   ld		a,d
 109+ A5A9 32 40 94                             ld		(varT),a			; T	 \ hi sum
 110+ A5AC 7B                                   ld		a,e
 111+ A5AD 32 C5 93                             ld		(varP),a			; P	 \ lo sum
 112+ A5B0 21 20 94                             ld		hl,varQ
 113+ A5B3 8E                                   adc		a,(hl)				; +Q
 114+ A5B4 32 20 94                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 115+ A5B7 3A 40 94                             ld		a,(varT)			; T temp Hi
 116+ A5BA 21 21 94                             ld		hl,varR
 117+ A5BD 8E                                   adc		a,(hl)				; +R
 118+ A5BE 32 21 94                             ld		(varR),a			; R
 119+ A5C1 CD 7E A2                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 120+ A5C4 3A 74 C0                             ld		a,(XX15+0)
 121+ A5C7 CD 13 A7                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 122+ A5CA 32 74 C0                             ld		(XX15+0),a
 123+ A5CD 3A 75 C0                             ld		a,(XX15+1)
 124+ A5D0 CD 13 A7                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 125+ A5D3 32 75 C0                             ld		(XX15+1),a
 126+ A5D6 3A 75 C0                             ld		a,(XX15+1)
 127+ A5D9 CD 13 A7                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 128+ A5DC 32 75 C0                             ld		(XX15+1),a
 129+ A5DF C9                                   ret
 130+ A5E0
 131+ A5E0
# file closed: ./Maths/normalise96.asm
 838  A5E0                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ A5E0              ;Number in hl to decimal ASCII
   2+ A5E0              ;Thanks to z80 Bits
   3+ A5E0              ;inputs:	hl = number to ASCII
   4+ A5E0              ;example: hl=300 outputs '00300'
   5+ A5E0              ;destroys: af, bc, hl, de used
   6+ A5E0              DispHLtoDE:
   7+ A5E0              ; "DispHL, writes HL to DE address"
   8+ A5E0 01 F0 D8     	ld	bc,-10000
   9+ A5E3 CD F9 A5     	call	Num1
  10+ A5E6 01 18 FC     	ld	bc,-1000
  11+ A5E9 CD F9 A5     	call	Num1
  12+ A5EC 01 9C FF     	ld	bc,-100
  13+ A5EF CD F9 A5     	call	Num1
  14+ A5F2 0E F6        	ld	c,-10
  15+ A5F4 CD F9 A5     	call	Num1
  16+ A5F7 0E FF        	ld	c,-1
  17+ A5F9              Num1:
  18+ A5F9 3E 2F        	ld	a,'0'-1
  19+ A5FB              .Num2:
  20+ A5FB 3C           	inc	a
  21+ A5FC 09           	add	hl,bc
  22+ A5FD 38 FC        	jr	c,.Num2
  23+ A5FF ED 42        	sbc	hl,bc
  24+ A601 12           	ld	(de),a
  25+ A602 13           	inc	de
  26+ A603 C9           	ret
  27+ A604
  28+ A604              DispAtoDE:
  29+ A604 26 00        	ld h,0
  30+ A606 6F           	ld l,a
  31+ A607 C3 E0 A5     	jp DispHLtoDE
  32+ A60A
  33+ A60A              DispPriceAtoDE:
  34+ A60A 26 00        	ld h,0
  35+ A60C 6F           	ld l,a
  36+ A60D 01 9C FF     	ld	bc,-100
  37+ A610 CD 20 A6     	call	.NumLeadBlank1
  38+ A613 0E F6        	ld	c,-10
  39+ A615 CD F9 A5     	call	Num1
  40+ A618 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A61A 12           	ld		(de),a					; we can optimse that later TODO
  42+ A61B 13           	inc		de						; with just an inc De
  43+ A61C 0E FF        	ld	c,-1
  44+ A61E 18 D9        	jr		Num1
  45+ A620              .NumLeadBlank1:
  46+ A620 3E 2F        	ld	a,'0'-1
  47+ A622              .NumLeadBlank2:
  48+ A622 3C           	inc	a
  49+ A623 09           	add	hl,bc
  50+ A624 38 FC        	jr	c,.NumLeadBlank2
  51+ A626 FE 30        	cp	'0'
  52+ A628 20 02        	jr	nz,.DontBlank
  53+ A62A              .Blank:
  54+ A62A 3E 20        	ld	a,' '
  55+ A62C              .DontBlank:
  56+ A62C ED 42        	sbc	hl,bc
  57+ A62E 12           	ld	(de),a
  58+ A62F 13           	inc	de
  59+ A630 C9           	ret
  60+ A631
  61+ A631              DispQtyAtoDE:
  62+ A631 FE 00        	cp	0
  63+ A633 28 23        	jr	z,.NoStock
  64+ A635 26 00        	ld h,0
  65+ A637 6F           	ld l,a
  66+ A638 01 9C FF     	ld	bc,-100
  67+ A63B CD 47 A6     	call	.NumLeadBlank1
  68+ A63E 0E F6        	ld	c,-10
  69+ A640 CD 47 A6     	call	.NumLeadBlank1
  70+ A643 0E FF        	ld	c,-1
  71+ A645 18 B2        	jr		Num1
  72+ A647              .NumLeadBlank1:
  73+ A647 3E 2F        	ld	a,'0'-1
  74+ A649              .NumLeadBlank2:
  75+ A649 3C           	inc	a
  76+ A64A 09           	add	hl,bc
  77+ A64B 38 FC        	jr	c,.NumLeadBlank2
  78+ A64D FE 30        	cp	'0'
  79+ A64F 20 02        	jr	nz,.DontBlank
  80+ A651              .Blank:
  81+ A651 3E 20        	ld	a,' '
  82+ A653              .DontBlank:
  83+ A653 ED 42        	sbc	hl,bc
  84+ A655 12           	ld	(de),a
  85+ A656 13           	inc	de
  86+ A657 C9           	ret
  87+ A658              .NoStock:
  88+ A658 3E 20        	ld	a,' '
  89+ A65A 12           	ld	(de),a
  90+ A65B 13           	inc	de
  91+ A65C 12           	ld	(de),a
  92+ A65D 13           	inc	de
  93+ A65E 3E 2D        	ld	a,'-'
  94+ A660 12           	ld	(de),a
  95+ A661 13           	inc de
  96+ A662 C9           	ret
  97+ A663
  98+ A663
  99+ A663              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A663              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A663              ;### Output     IY=last char in destination string
 102+ A663              ;### Destroyed AF,BC,DE,HL,IX
 103+ A663 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A667 0A 00 00 00
 103+ A66B 64 00 00 00
 103+ A66F E8 03 00 00
 103+ A673 10 27 00 00
 104+ A677 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A67B 40 42 0F 00
 104+ A67F 80 96 98 00
 104+ A683 00 E1 F5 05
 104+ A687 00 CA 9A 3B
 105+ A68B 00 00 00 00  clcn32z ds 4
 106+ A68F
 107+ A68F              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A68F CD 9E A6     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A692 FD 7E 00                             ld      a,(IY+0)
 110+ A695 FD 77 01                             ld      (IY+1),a
 111+ A698 3E 2E                                ld      a,"."
 112+ A69A FD 77 00                             ld      (IY+0),a
 113+ A69D C9                                   ret
 114+ A69E
 115+ A69E DD 22 8B A6  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A6A2 ED 53 8D A6                          ld (clcn32z+2),de
 117+ A6A6 DD 21 87 A6                          ld ix,clcn32t+36
 118+ A6AA 06 09                                ld b,9
 119+ A6AC 0E 00                                ld c,0
 120+ A6AE 3E 30        .clcn321:               ld a,'0'
 121+ A6B0 B7                                   or a
 122+ A6B1 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A6B4 DD 56 01                             ld d,(ix+1)
 124+ A6B7 2A 8B A6                             ld hl,(clcn32z)
 125+ A6BA ED 52                                sbc hl,de
 126+ A6BC 22 8B A6                             ld (clcn32z),hl
 127+ A6BF DD 5E 02                             ld e,(ix+2)
 128+ A6C2 DD 56 03                             ld d,(ix+3)
 129+ A6C5 2A 8D A6                             ld hl,(clcn32z+2)
 130+ A6C8 ED 52                                sbc hl,de
 131+ A6CA 22 8D A6                             ld (clcn32z+2),hl
 132+ A6CD 38 04                                jr c,.clcn325
 133+ A6CF 0C                                   inc c
 134+ A6D0 3C                                   inc a
 135+ A6D1 18 DE                                jr .clcn322
 136+ A6D3 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A6D6 DD 56 01                             ld d,(ix+1)
 138+ A6D9 2A 8B A6                             ld hl,(clcn32z)
 139+ A6DC 19                                   add hl,de
 140+ A6DD 22 8B A6                             ld (clcn32z),hl
 141+ A6E0 DD 5E 02                             ld e,(ix+2)
 142+ A6E3 DD 56 03                             ld d,(ix+3)
 143+ A6E6 2A 8D A6                             ld hl,(clcn32z+2)
 144+ A6E9 ED 5A                                adc hl,de
 145+ A6EB 22 8D A6                             ld (clcn32z+2),hl
 146+ A6EE 11 FC FF                             ld de,-4
 147+ A6F1 DD 19                                add ix,de
 148+ A6F3 0C                                   inc c
 149+ A6F4 0D                                   dec c
 150+ A6F5 28 05                                jr z,.clcn323
 151+ A6F7 FD 77 00                             ld (iy+0),a
 152+ A6FA FD 23                                inc iy
 153+ A6FC 10 B0        .clcn323:               djnz .clcn321
 154+ A6FE 3A 8B A6                             ld a,(clcn32z)
 155+ A701 C6 30                                add A,'0'
 156+ A703 FD 77 00                             ld (iy+0),a
 157+ A706 FD 36 01 00                          ld (iy+1),0
 158+ A70A C9                                   ret
 159+ A70B
# file closed: ./Maths/binary_to_decimal.asm
 839  A70B              ;INCLUDE "badd_ll38.asm"
 840  A70B              ;;INCLUDE "XX12equXX15byXX16.asm"
 841  A70B                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A70B
   2+ A70B              ; USES 			A DE BC
   3+ A70B              ; DOES NOT USE 	HL
   4+ A70B              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A70B CB 7F        	bit			7,a
   6+ A70D 28 04        	jr			z,AequAdivQmul96
   7+ A70F ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A711 CB FF        	set			7,a
   9+ A713              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A713              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A713              TIS2:
  12+ A713 4F           	ld			c,a							; copy of Acc
  13+ A714 3A 20 94     	ld			a,(varQ)
  14+ A717 57           	ld			d,a							; d = varQ
  15+ A718 79           	ld			a,c							; recover a
  16+ A719              AequAdivDmul96:
  17+ A719 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A71A E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A71C              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A71C BA          >                        cp     d
  19+ A71D D2 3D A7    >                        jp		nc,TIS2AccGTEQ
  20+ A720 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A722              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A722 CB 27        	sla			a
  23+ A724              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A724 BA          >                        cp      d
  23+ A725 DA 43 A7    >                        jp		c,TIS2SkipSub
  24+ A728 9A           	sbc			a,d							; do subtraction with carry
  25+ A729 37           	scf
  26+ A72A CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A72C 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A72E              TIS2SKIPCont:
  29+ A72E 78           	ld			a,b							; T
  30+ A72F CB 3F        	srl			a							; result / 2
  31+ A731 CB 3F        	srl			a							; result / 4
  32+ A733 47           	ld			b,a							; t = t /4
  33+ A734 CB 3F        	srl			a							; result / 8
  34+ A736 80           	add			a,b							; result /8 + result /4
  35+ A737 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A738 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A739 E6 80        	and			$80							; recover sign only
  38+ A73B B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A73C C9           	ret
  40+ A73D              TIS2AccGTEQ:
  41+ A73D              ;TI4:										;\ clean to +/- unity
  42+ A73D 79           	ld			a,c
  43+ A73E E6 80        	and			$80							; copy of Acc
  44+ A740 F6 60        	or			$60							; unity
  45+ A742 C9           	ret
  46+ A743              TIS2SkipSub:
  47+ A743 B7           	or			a
  48+ A744 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A746 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A748 C3 2E A7     	jp			TIS2SKIPCont
  51+ A74B
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 842  A74B                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A74B              fmltu:
   2+ A74B              AequAmulQdiv256:
   3+ A74B              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A74B 57           	ld	d,a
   5+ A74C 3A 20 94     	ld	a,(varQ)
   6+ A74F 5F           	ld	e,a
   7+ A750 ED 30        	mul
   8+ A752 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A753 C9           	ret
  10+ A754
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 843  A754                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A754              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A754              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A754 21 F3 96     		ld		hl,varDustZ
   4+ A757 FD 7D        		ld		a,iyl
   5+ A759 ED 31        		add		hl,a
   6+ A75B 7E           		ld		a,(hl)
   7+ A75C C3 68 A7     		jp		DV41
   8+ A75F              DV42:										; travel step of dust particle front/rear
   9+ A75F 21 F3 96     		ld		hl,varDustZ
  10+ A762 3A B3 93     		ld		a,(regY)
  11+ A765 ED 31        		add		hl,a
  12+ A767 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A768              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A768 5F           		ld		e,a							; using E as Q var replacement
  15+ A769 3A 1C 94     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A76C              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A76C 06 08        		ld		b,8							; counter
  18+ A76E CB 27        		sla		a							;
  19+ A770 57           		ld		d,a							; use d for - p = delta * 2
  20+ A771 AF           		xor		a
  21+ A772              DVL4:										; counter x loop (b reg)
  22+ A772 CB 17        		rl		a							; a = a * 2
  23+ A774 38 03        		jr		c,DV8						; jump on carry
  24+ A776 BB           		cp		e							; var Q
  25+ A777 38 02        		jr		c,DV5						; skip subtraction
  26+ A779              DV8:
  27+ A779 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A77A 37           		scf									;  carry gets set
  29+ A77B              DV5:										; skipped subtraction
  30+ A77B CB 12        		rl		d							; d (P hi)
  31+ A77D 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A77F              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A77F              ; Note we are not going to call LL28+4 but inline code here:
  34+ A77F 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A781 4F           		ld		c,a							; use c as R var
  36+ A782              .RollRemainder:
  37+ A782 CB 27        		sla		a
  38+ A784 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A786 B8           		cp		b							; a < q?
  40+ A787 30 01        		jr		nc,.DontSBC
  41+ A789              .DoSBC:										; a is < q
  42+ A789 98           		sbc		a,b							; 	a -= q
  43+ A78A              .DontSBC:
  44+ A78A CB 11        		rl		c							; r << 1
  45+ A78C 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A78E 79           		ld		a,c
  47+ A78F 32 21 94     		ld		(varR),a					; for backwards compat
  48+ A792 7A           		ld		a,d
  49+ A793 32 C5 93     		ld		(varP),a
  50+ A796 C9           		ret									; R (c) left with remainder
  51+ A797              .Reduce:									; a geneated a carry
  52+ A797 98           		sbc		a,b							; a = a - (q +1)
  53+ A798 37           		scf									; set carry flag for rl
  54+ A799 CB 11        		rl		c							; r << 1 briging in carry
  55+ A79B 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A79D 79           		ld		a,c
  57+ A79E 32 21 94     		ld		(varR),a					; for backwards compat
  58+ A7A1 7A           		ld		a,d
  59+ A7A2 32 C5 93     		ld		(varP),a
  60+ A7A5 C9           		ret
  61+ A7A6              .AnswerTooBig:
  62+ A7A6 0E FF        		ld		c,$FF						; arse its too big
  63+ A7A8 79           		ld		a,c
  64+ A7A9 32 21 94     		ld		(varR),a					; for backwards compat
  65+ A7AC 7A           		ld		a,d
  66+ A7AD 32 C5 93     		ld		(varP),a
  67+ A7B0 C9           		ret
  68+ A7B1
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 844  A7B1                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A7B1
   2+ A7B1              asm_defmutl:
   3+ A7B1              AequDmulEdiv256usgn:
   4+ A7B1              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A7B1 ED 30        	mul
   6+ A7B3 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A7B4 C9           	ret
   8+ A7B5
   9+ A7B5
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 845  A7B5              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 846  A7B5              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 847  A7B5              ;INCLUDE "APequPmulX-MU11.asm"
 848  A7B5                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ A7B5              APequQmulA:
   2+ A7B5              asm_mult1:
   3+ A7B5              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A7B5 FE 00        	cp	0
   5+ A7B7 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A7B9 5F           	ld	e,a
   7+ A7BA 3A 20 94     	ld	a,(varQ)
   8+ A7BD 57           	ld	d,a
   9+ A7BE FE 00        	cp	0				; compare a
  10+ A7C0 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A7C2 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A7C3 E6 80        	and $80				; get the resultant sign and save into b
  13+ A7C5 47           	ld	b,a
  14+ A7C6 7A           	ld	a,d
  15+ A7C7 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A7C9 57           	ld	d,a
  17+ A7CA 7B           	ld	a,e
  18+ A7CB E6 7F        	and SignMask8Bit
  19+ A7CD 5F           	ld	e,a
  20+ A7CE ED 30        	mul					; zxn de = d * e
  21+ A7D0 7B           	ld	a,e
  22+ A7D1 32 C5 93     	ld	(varP),a		; p = lo
  23+ A7D4 7A           	ld	a,d				; a = hi
  24+ A7D5 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A7D6 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A7D7 C9           	ret
  27+ A7D8              .mul0:
  28+ A7D8 AF           	xor	a
  29+ A7D9 32 C5 93     	ld	(varP),a
  30+ A7DC 57           	ld	d,a
  31+ A7DD 5F           	ld  e,a
  32+ A7DE C9           	ret
  33+ A7DF
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 849  A7DF                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ A7DF              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A7DF              SAEquSRPlusAQ:
   3+ A7DF              ; Calculate the following between sign-magnitude numbers:
   4+ A7DF              ;   (S A) = (S R) + (A Q)
   5+ A7DF              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ A7DF              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ A7DF              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ A7DF              LL38:
   9+ A7DF              ;	ld		d,a
  10+ A7DF              ;	ld		a,(varQ)
  11+ A7DF              ;	ld		e,a
  12+ A7DF              ;	ld		a,(varS)
  13+ A7DF              ;	ld		h,a
  14+ A7DF              ;	ld		a,(varR)
  15+ A7DF              ;	ld		l,a
  16+ A7DF              ;	call	ADDHLDESignedv3
  17+ A7DF              ;	ld		a,h
  18+ A7DF              ;	ld		(varS),a
  19+ A7DF              ;	ld		a,l
  20+ A7DF              ;	ret
  21+ A7DF              ; calculation table
  22+ A7DF              ;   R     Q    Op            Sign calc
  23+ A7DF              ;	10    5    Add           +    sign same add R sign
  24+ A7DF              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ A7DF              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ A7DF              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ A7DF              ;   5    10    Add           +    sign same add R sign
  28+ A7DF              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ A7DF              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ A7DF              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ A7DF
  32+ A7DF              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ A7DF              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ A7DF              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ A7DF              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ A7DF
  37+ A7DF
  38+ A7DF              ; Calculate sign for Q from A and varS
  39+ A7DF 21 22 94     	ld		hl,varS							;
  40+ A7E2 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ A7E3 FA EE A7     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ A7E6 3A 20 94     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ A7E9 21 21 94     	ld		hl,varR
  44+ A7EC 86           	add		a,(hl)							; a = Q + R
  45+ A7ED C9           	ret										; Done carry set if overflow
  46+ A7EE              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ A7EE 3A 21 94     	ld		a,(varR)						; a = R
  48+ A7F1 21 20 94     	ld		hl,varQ                         ; Q
  49+ A7F4              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ A7F4              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ A7F4 B7          >                        or a
  51+ A7F5 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ A7F6 38 01            jr      c,.LL39SignCorrection
  53+ A7F8              ;--    jr      a,.LL39ResultZero
  54+ A7F8              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ A7F8              ;--	or		a								; Clear carry flag to say result is correct
  56+ A7F8 C9           	ret
  57+ A7F9              .LL39SignCorrection:
  58+ A7F9 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ A7FB 28 0E            jr      z,.LL39ResultZero
  60+ A7FD ED 44            neg                                     ; flip A 2'c value to positive
  61+ A7FF 08           	ex		af,af'							; save A temporarily
  62+ A800 3A 22 94     	ld		a,(varS)						; Flip Sign bit in varS
  63+ A803 EE 80        	xor		$80							    ;
  64+ A805 32 22 94     	ld		(varS),a                        ; flip sign bit of a
  65+ A808 08           	ex		af,af'                          ; get back a which is the result
  66+ A809                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ A809 B7          >                        or a
  67+ A80A C9           	ret
  68+ A80B              .LL39ResultZero:
  69+ A80B 32 22 94         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ A80E                  ClearCarryFlag                          ; clear carry
  70+ A80E B7          >                        or a
  71+ A80F C9               ret
  72+ A810              ;--LL39SwapSubtraction:
  73+ A810              ;--	push	bc
  74+ A810              ;--	ld		b,a
  75+ A810              ;--	ld		a,(hl)
  76+ A810              ;--	sub		b
  77+ A810              ;--	pop		bc
  78+ A810              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ A810              ;--	ld		a,(varS)
  80+ A810              ;--	xor		$80
  81+ A810              ;--	ld		(varS),a
  82+ A810              ;--	ex		af,af'
  83+ A810              ;--	ret
  84+ A810
  85+ A810              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ A810              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ A810              ;;;;;   (S A) = (S R) + (A Q)
  88+ A810              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ A810              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ A810              ;;;;LL38:
  91+ A810              ;;;;; Calculate sign for Q from A and varS
  92+ A810              ;;;;	ld		hl,varS							;
  93+ A810              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ A810              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ A810              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ A810              ;;;;	ld		hl,varR
  97+ A810              ;;;;	add		a,(hl)							; a = Q + R
  98+ A810              ;;;;	ret										; Done
  99+ A810              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ A810              ;;;;	ld		hl,varQ                         ;
 101+ A810              ;;;;	ld		a,(hl)
 102+ A810              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ A810              ;;;;	ld		a,(varR)						;
 104+ A810              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ A810              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ A810              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ A810              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ A810              ;;;;	ret
 109+ A810              ;;;;.SignCorrection:
 110+ A810              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ A810              ;;;;	ex		af,af'							; save A temporarily
 112+ A810              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ A810              ;;;;	xor		$80							    ;
 114+ A810              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ A810              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ A810              ;;;;	ret
 117+ A810              ;;;;LL39Sub16Bit:
 118+ A810              ;;;;	ld		e,a
 119+ A810              ;;;;	ld		d,0
 120+ A810              ;;;;	ld		a,(varR)
 121+ A810              ;;;;	ld		l,a
 122+ A810              ;;;;	ld		h,0
 123+ A810              ;;;;	ClearCarryFlag
 124+ A810              ;;;;	sbc		hl,de
 125+ A810              ;;;;	jr		c,.SignCorrection16bit
 126+ A810              ;;;;	bit		7,h
 127+ A810              ;;;;	jr		z,.GoodToReturn
 128+ A810              ;;;;.Needtonegate:
 129+ A810              ;;;;	macronegate16hl
 130+ A810              ;;;;.GoodToReturn
 131+ A810              ;;;;	ld		a,l
 132+ A810              ;;;;	or		a
 133+ A810              ;;;;	ret
 134+ A810              ;;;;.SignCorrection16bit:
 135+ A810              ;;;;	macronegate16hl
 136+ A810              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ A810              ;;;;	xor		$80							    ;
 138+ A810              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ A810              ;;;;	ld		a,l
 140+ A810              ;;;;	ret
 141+ A810
 142+ A810
# file closed: ./Maths/Utilities/badd_ll38.asm
 850  A810                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ A810              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A810              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A810              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A810
   5+ A810
   6+ A810              moveship4Yreg:
   7+ A810 3A B3 93     		ld		a,(regY)
   8+ A813 47           		ld		b,a
   9+ A814              moveship4breg:
  10+ A814              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A814              MVS4PitchAlphaRollBeta:
  12+ A814              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A814 3A DE 93     		ld		a,(ALPHA)					;  ALPHA
  14+ A817 32 20 94     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A81A 21 0D C0     		ld		hl,UBnKxsgn
  16+ A81D 78           		ld		a,b							; from
  17+ A81E ED 31        		add		hl,a
  18+ A820 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A821 32 21 94     		ld		(varR),a					; R  \ lo
  20+ A824 23           		inc		hl
  21+ A825 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A826 32 22 94     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A829 2B           		dec		hl
  24+ A82A 2B           		dec		hl
  25+ A82B 2B           		dec		hl							;
  26+ A82C 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A82D 32 C5 93     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A830 23           		inc		hl
  29+ A831 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A832 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A834 CD 55 A1     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A837 23                   inc     hl
  33+ A838 23                   inc     hl
  34+ A839 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A83A 2B                   dec     hl
  36+ A83B 3A B2 93             ld      a,(regX)
  37+ A83E 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A83F 32 C5 93             ld      (varP),a                    ;  P
  39+ A842 2B                   dec     hl
  40+ A843 2B                   dec     hl
  41+ A844 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A845 32 21 94             ld      (varR),a                    ;  R	\ lo
  43+ A848 23                   inc     hl
  44+ A849 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A84A 32 22 94             ld      (varS),a                    ; S	\ hi
  46+ A84D 23                   inc     hl
  47+ A84E 23                   inc     hl
  48+ A84F 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A850 CD 55 A1             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A853 2B                   dec     hl
  51+ A854 2B                   dec     hl
  52+ A855 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A856 3A B2 93             ld      a,(regX)
  54+ A859 2B                   dec     hl
  55+ A85A 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A85B 32 C5 93             ld      (varP),a                    ; P
  57+ A85E 3A D0 93             ld      a,(BETA)                    ; BETA
  58+ A861 32 20 94             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A864 23                   inc     hl
  60+ A865 23                   inc     hl
  61+ A866 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A867 32 21 94             ld      (varR),a                    ; R	\ lo
  63+ A86A 23                   inc     hl
  64+ A86B 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A86C 32 22 94             ld      (varS),a                    ; S	\ hi
  66+ A86F 23                   inc     hl
  67+ A870 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A871 32 C5 93             ld      (varP),a                    ; P	\ lo
  69+ A874 23                   inc     hl
  70+ A875 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A876 EE 80                xor     $80                         ; flip sign hi
  72+ A878 CD 55 A1             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A87B 2B                   dec     hl
  74+ A87C 2B                   dec     hl
  75+ A87D 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A87E 3A B2 93             ld      a,(regX)
  77+ A881 2B                   dec     hl
  78+ A882 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A883 32 C5 93             ld      (varP),a                    ; P
  80+ A886 23                   inc     hl
  81+ A887 23                   inc     hl
  82+ A888 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A889 32 21 94             ld      (varR),a                    ; R	\ lo
  84+ A88C 23                   inc     hl
  85+ A88D 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A88E 32 22 94             ld      (varS),a                    ; S	\ hi
  87+ A891 2B                   dec     hl
  88+ A892 2B                   dec     hl
  89+ A893 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A894 CD 55 A1             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A897 23                   inc     hl
  92+ A898 23                   inc     hl
  93+ A899 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A89A 3A B2 93             ld      a,(regX)
  95+ A89D 2B                   dec     hl
  96+ A89E 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A89F C9                   ret
  98+ A8A0
  99+ A8A0
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 851  A8A0              ;INCLUDE "MoveShip5-MVS5.asm"
 852  A8A0              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 853  A8A0              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 854  A8A0              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 855  A8A0                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A8A0              ;;;LL28:
   2+ A8A0              ;;;    ld      c,a                         ;
   3+ A8A0              ;;;    ld      a,(varQ)                    ;
   4+ A8A0              ;;;    ld      b,a                         ;
   5+ A8A0              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A8A0              ;;;RequAmul256divB:                        ;
   7+ A8A0              ;;;LL28Breg:
   8+ A8A0              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A8A0              ;;;	cp		b							; Check A >= Q
  10+ A8A0              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A8A0              ;;;.CalcRemainder:
  12+ A8A0              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A8A0              ;;;.RollRemainder:
  14+ A8A0              ;;;	sla		a
  15+ A8A0              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A8A0              ;;;	cp		b							; a < q?
  17+ A8A0              ;;;	jr		nc,.DontSBC
  18+ A8A0              ;;;.DoSBC:									; a is < q
  19+ A8A0              ;;;	sbc		a,b							; 	a -= q
  20+ A8A0              ;;;.DontSBC:
  21+ A8A0              ;;;	rl		c							; r << 1
  22+ A8A0              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A8A0              ;;;    ld      a,c
  24+ A8A0              ;;;    ld      (varR),a
  25+ A8A0              ;;;	ret									; R (c) left with remainder
  26+ A8A0              ;;;.Reduce:								; a geneated a carry
  27+ A8A0              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A8A0              ;;;	scf									; set carry flag for rl
  29+ A8A0              ;;;	rl		c							; r << 1 briging in carry
  30+ A8A0              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A8A0              ;;;    ld      a,c
  32+ A8A0              ;;;    ld      (varR),a
  33+ A8A0              ;;;	ret
  34+ A8A0              ;;;.AnswerTooBig:
  35+ A8A0              ;;;	ld	    c,$FF							; arse its too big
  36+ A8A0              ;;;    ld      a,c
  37+ A8A0              ;;;    ld      (varR),a
  38+ A8A0              ;;;	ret
  39+ A8A0
  40+ A8A0              BCequAmul256DivC:
  41+ A8A0 59             ld    e,c
  42+ A8A1 67             ld    h,a
  43+ A8A2 2E 00          ld    l,0
  44+ A8A4              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A8A4 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A8A5 B7             or a                                   ; from this time on the carry is cleared
  47+ A8A6 C8             ret z
  48+ A8A7 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A8AA 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A8AC              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A8AC ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A8AE 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A8AF 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A8B1 C9             ret
  55+ A8B2
  56+ A8B2              HL_Div_C:
  57+ A8B2              ; Integer divides HL by C
  58+ A8B2              ; Result in HL, remainder in A
  59+ A8B2              ; Clobbers F, B
  60+ A8B2 06 10                ld b,16
  61+ A8B4 AF                   xor a
  62+ A8B5              HL_Div_C_Loop:
  63+ A8B5 29                   add hl,hl
  64+ A8B6 17                   rla
  65+ A8B7 B9                   cp c
  66+ A8B8 38 02                jr c,HL_DivC_Skip
  67+ A8BA 91                   sub c
  68+ A8BB 2C                   inc l
  69+ A8BC              HL_DivC_Skip:
  70+ A8BC 10 F7                djnz HL_Div_C_Loop
  71+ A8BE 7D                   ld   a,l
  72+ A8BF 32 21 94             ld  (varR),a
  73+ A8C2 C9                   ret
  74+ A8C3
  75+ A8C3
  76+ A8C3
  77+ A8C3              ; Entry point if varQ is populated with demoninator
  78+ A8C3              RequAmul256divQ:
  79+ A8C3              BFRDIV:
  80+ A8C3 F5           		push	af
  81+ A8C4 3A 20 94     		ld		a,(varQ)
  82+ A8C7 4F           		ld		c,a
  83+ A8C8 F1           		pop		af
  84+ A8C9 FE 00        		cp		0
  85+ A8CB CA E2 A8     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ A8CE              RequAmul256divC:
  87+ A8CE 2E 00        		ld		l,0
  88+ A8D0 67           		ld		h,a
  89+ A8D1              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ A8D1 06 10        		ld b,16
  91+ A8D3 AF           		xor a
  92+ A8D4              LOOPPOINT:
  93+ A8D4 29           		add hl,hl
  94+ A8D5 17           		rla
  95+ A8D6 B9           		cp c
  96+ A8D7 38 02        		jr c,SKIPINCSUB
  97+ A8D9 2C           		inc l
  98+ A8DA 91           		sub c
  99+ A8DB              SKIPINCSUB:
 100+ A8DB 10 F7        		djnz LOOPPOINT
 101+ A8DD 7D           		ld		a,l
 102+ A8DE 32 21 94     		ld 		(varR),a
 103+ A8E1 C9           		ret
 104+ A8E2              HLDIVC_0_BY:
 105+ A8E2 32 21 94     		ld		(varR),a
 106+ A8E5 C9           		ret
 107+ A8E6              ;	push	af
 108+ A8E6              ;	ld		a,b
 109+ A8E6              ;	ld		(varQ),a
 110+ A8E6              ;	pop		af
 111+ A8E6              ;RequAmul256divQ:
 112+ A8E6              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ A8E6              ;	ld		hl,varQ
 114+ A8E6              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ A8E6              ;	ld		b,$FE						; b = X
 116+ A8E6              ;	ld		c,a							; c = R	div roll counter
 117+ A8E6              ;LL31:									; roll R
 118+ A8E6              ;	sla		a
 119+ A8E6              ;	jr		c,LL29						; hop to Reduce
 120+ A8E6              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ A8E6              ;	sbc		a,(hl)						; a = a - Q
 122+ A8E6              ;	rl		c							; rotate R left
 123+ A8E6              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ A8E6              ;	jr		LL2Good
 125+ A8E6              ;LL29:									; Reduce
 126+ A8E6              ;	sbc		a,(hl)
 127+ A8E6              ;	scf
 128+ A8E6              ;	rl		c							; roll a carry flag into R
 129+ A8E6              ;	jr		c,LL31						;  loop R
 130+ A8E6              ;	jr		LL2Good
 131+ A8E6              ;LL2:
 132+ A8E6              ;	ld		c,$FF
 133+ A8E6              ;LL2Good:
 134+ A8E6              ;	ld		a,c
 135+ A8E6              ;	ld		(varR),a
 136+ A8E6              ;	ret
 137+ A8E6
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 856  A8E6                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ A8E6              RequAdivQ:
   2+ A8E6              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A8E6              LL61:										; Handling division R=A/Q for case further down
   4+ A8E6 4F           	ld		c,a								; c = A
   5+ A8E7 3A 20 94     	ld		a,(varQ)						; test for divide by 0
   6+ A8EA FE 00        	cp		0
   7+ A8EC 28 16        	jr		z,LL84							; divide by zero error
   8+ A8EE 57           	ld		d,a								; now we can do C/D
   9+ A8EF 06 08            ld b,8
  10+ A8F1 AF               xor a
  11+ A8F2              LL63:										; roll divide loop
  12+ A8F2 CB 21            sla c
  13+ A8F4 17               rla
  14+ A8F5 BA               cp d
  15+ A8F6 38 02            jr c,LL64
  16+ A8F8 0C               inc c
  17+ A8F9 92               sub d
  18+ A8FA              LL64:
  19+ A8FA 10 F6            djnz LL63
  20+ A8FC 32 1F 94     	ld	(varU),a							; store remainder in U
  21+ A8FF 79           	ld	a,c
  22+ A900 32 21 94     	ld	(varR),a							; store remainder in R
  23+ A903 C9               ret
  24+ A904              LL84:										; div error  R=U=#5
  25+ A904 3E 32        	ld		a,50
  26+ A906 32 21 94     	ld		(varR),a
  27+ A909 32 1F 94     	ld		(varU),a
  28+ A90C C9           	ret
  29+ A90D
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 857  A90D              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 858  A90D                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ A90D              asm_mult12:
   2+ A90D              RSequQmulA:
   3+ A90D              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ A90D CD B5 A7     	call APequQmulA
   5+ A910 08           	ex 	af,af'
   6+ A911 7A           	ld	a,d
   7+ A912 32 22 94     	ld	(varS),a
   8+ A915 7B           	ld	a,e
   9+ A916 32 21 94     	ld	(varR),a
  10+ A919 08           	ex 	af,af'
  11+ A91A C9           	ret
  12+ A91B
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 859  A91B              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 860  A91B                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ A91B              ;rotmap0xLo: DB	0				; INWK +9
   2+ A91B              ;rotmap0xHi: DB	0				; INWK +10
   3+ A91B              ;rotmat0yLo: DB	0				; INWK +11
   4+ A91B              ;rotmat0yHi: DB	0				; INWK +12
   5+ A91B              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ A91B              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ A91B              ;rotmap1xLo: DB	0				; INWK +15
   8+ A91B              ;rotmap1xHi:	DB	0				; INWK +16
   9+ A91B              ;rotmat1yLo:	DB	0				; INWK +17
  10+ A91B              ;rotmat1yHi:	DB	0				; INWK +18
  11+ A91B              ;rotmat1zLo:	DB	0				; INWK +19
  12+ A91B              ;rotmat1zHi:	DB	0				; INWK +20
  13+ A91B              ;rotmat2xLo: DB	0				; INWK +21
  14+ A91B              ;rotmat2xHi:	DB	0				; INWK +22
  15+ A91B              ;rotmat2yLo:	DB	0				; INWK +23
  16+ A91B              ;rotmat2yHi:	DB	0				; INWK +24
  17+ A91B              ;rotmat2zLo:	DB	0				; INWK +25
  18+ A91B              ;rotmat2zHi:	DB	0				; INWK +26
  19+ A91B              ;
  20+ A91B              ;rotmatFx	equ	rotmat0xHi
  21+ A91B              ;rotmatFy	equ	rotmat0yHi
  22+ A91B              ;rotmatFz	equ	rotmat0zHi
  23+ A91B              ;rotmatUx	equ	rotmat1xHi
  24+ A91B              ;rotmatUy	equ	rotmat1yHi
  25+ A91B              ;rotmatUz	equ	rotmat1zHi
  26+ A91B              ;
  27+ A91B              ;inwkarray			equ		INWK+10
  28+ A91B
  29+ A91B                  include "./Variables/CopyRotMattoXX15.asm"
# file opened: ././Variables/CopyRotMattoXX15.asm
   1++A91B              CopyRotMatNoseVtoXX15:
   2++A91B                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++A91B 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++A91E 32 74 C0    >               ld       (XX15VecX),a
   3++A921                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++A921 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++A924 32 75 C0    >               ld       (XX15VecY),a
   4++A927                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++A927 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++A92A 32 76 C0    >               ld       (XX15VecZ),a
   5++A92D C9                   ret
   6++A92E
   7++A92E              CopyRotMatRoofVtoXX15:
   8++A92E                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++A92E 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++A931 32 74 C0    >               ld       (XX15VecX),a
   9++A934                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++A934 3A 1D C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++A937 32 75 C0    >               ld       (XX15VecY),a
  10++A93A                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++A93A 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++A93D 32 76 C0    >               ld       (XX15VecZ),a
  11++A940 C9                   ret
  12++A941
  13++A941              CopyRotMatSideVtoXX15:
  14++A941                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++A941 3A 15 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++A944 32 74 C0    >               ld       (XX15VecX),a
  15++A947                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++A947 3A 17 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++A94A 32 75 C0    >               ld       (XX15VecY),a
  16++A94D                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++A94D 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++A950 32 76 C0    >               ld       (XX15VecZ),a
  17++A953 C9                   ret
  18++A954
# file closed: ././Variables/CopyRotMattoXX15.asm
  30+ A954
  31+ A954                  include "./Variables/CopyXX15toRotMat.asm"
# file opened: ././Variables/CopyXX15toRotMat.asm
   1++A954              CopyXX15toRotMatNoseV:
   2++A954                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++A954 3A 74 C0    >               ld       a,(XX15VecX)
   2++A957 32 21 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++A95A                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++A95A 3A 75 C0    >               ld       a,(XX15VecY)
   3++A95D 32 23 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++A960                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++A960 3A 76 C0    >               ld       a,(XX15VecZ)
   4++A963 32 25 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++A966 C9                   ret
   6++A967
   7++A967              CopyXX15toRotMatRoofV:
   8++A967                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++A967 3A 74 C0    >               ld       a,(XX15VecX)
   8++A96A 32 1B C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++A96D                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++A96D 3A 75 C0    >               ld       a,(XX15VecY)
   9++A970 32 1D C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++A973                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++A973 3A 76 C0    >               ld       a,(XX15VecZ)
  10++A976 32 1F C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++A979 C9                   ret
  12++A97A
  13++A97A              CopyXX15toRotMatSideV:
  14++A97A                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++A97A 3A 74 C0    >               ld       a,(XX15VecX)
  14++A97D 32 15 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++A980                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++A980 3A 75 C0    >               ld       a,(XX15VecY)
  15++A983 32 17 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++A986                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++A986 3A 76 C0    >               ld       a,(XX15VecZ)
  16++A989 32 19 C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++A98C C9                   ret
  18++A98D
# file closed: ././Variables/CopyXX15toRotMat.asm
  32+ A98D
  33+ A98D              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ A98D              		; b = regX on entry
  35+ A98D              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ A98D 08           		ex		af,af'
  37+ A98E 78           		ld		a,b
  38+ A98F 32 20 94     		ld		(varQ),a
  39+ A992 08           		ex		af,af'
  40+ A993 EE 80        		xor		$80							;	 flip sign of Acc
  41+ A995 CD 55 A1     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ A998              ; USES 				A BC E
  43+ A998              ; DOES NOT USE		D HL
  44+ A998              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ A998 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ A999 E6 80        		and		SignOnly8Bit						; ..
  47+ A99B 5F           		ld		e,a							; ..
  48+ A99C 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ A99D E6 7F        		and		SignMask8Bit							; ..
  50+ A99F 06 FE        		ld		b,$FE						; slide counter T1
  51+ A9A1              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ A9A1 CB 27        		sla		a
  53+ A9A3              		JumpIfALTNusng $60, TIS1SkipSub
  53+ A9A3 FE 60       >                        cp      $60
  53+ A9A5 DA B2 A9    >                        jp		c,TIS1SkipSub
  54+ A9A8 DE 60        		sbc		a,$60							; subtract 96
  55+ A9AA 37           		scf
  56+ A9AB CB 10        		rl		b							;  T1
  57+ A9AD 38 F2        		jr		c,TIS1RollTLoop
  58+ A9AF              TIS1KIPCont:
  59+ A9AF 78           		ld		a,b							;   T1
  60+ A9B0 B3           		or		e							;   restore T sign
  61+ A9B1 C9           		ret
  62+ A9B2              TIS1SkipSub:
  63+ A9B2 B7           	or			a
  64+ A9B3 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ A9B5 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ A9B7 C3 AF A9     	jp			TIS1KIPCont
  67+ A9BA
  68+ A9BA              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ A9BA              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ A9BA
  71+ A9BA
  72+ A9BA
  73+ A9BA
  74+ A9BA              TidyRotYSmall:
  75+ A9BA CD E3 AA     		call	CalcRoofvZ
  76+ A9BD 32 1F C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ A9C0 C3 F4 A9     		jp		NormaliseRoofV
  78+ A9C3
  79+ A9C3              TidyRotXSmall:
  80+ A9C3 AF           		xor		a
  81+ A9C4 47           		ld		b,a
  82+ A9C5 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ A9C8 E6 60        		and		%01100000
  84+ A9CA CA BA A9     		jp		z,TidyRotYSmall
  85+ A9CD 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ A9D0 47           		ld		b,a							; b = regX for now
  87+ A9D1 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ A9D4 CD A9 AA     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ A9D7 32 1D C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ A9DA C3 F4 A9     		jp		NormaliseRoofV
  91+ A9DD              TIDY:
  92+ A9DD              ORTHOGALISE:
  93+ A9DD              ;-- NormaliseNosev
  94+ A9DD CD 1B A9     		call	CopyRotMatNoseVtoXX15
  95+ A9E0 CD 0C A5     		call	normaliseXX1596fast			; normalise z hi
  96+ A9E3 CD 54 A9     		call	CopyXX15toRotMatNoseV
  97+ A9E6              .CheckNXSmall:
  98+ A9E6 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
  99+ A9E9 E6 60        		and		%01100000					; check top two magnitude bits
 100+ A9EB CA C3 A9     		jp		z,TidyRotXSmall
 101+ A9EE              .RotXIsBig:
 102+ A9EE CD 6F AA             call	CalcRoofvX
 103+ A9F1 32 1B C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 104+ A9F4              NormaliseRoofV:
 105+ A9F4 CD 2E A9     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 106+ A9F7 CD 0C A5     		call	normaliseXX1596fast			; normalise roof
 107+ A9FA              ;calc sidev x
 108+ A9FA CD 67 A9     		call	CopyXX15toRotMatRoofV		; get back normalised version
 109+ A9FD 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
 110+ AA00 32 20 94     		ld		(varQ),a					; q = nosev_y
 111+ AA03 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 112+ AA06 CD 0D A9     		call	RSequQmulA
 113+ AA09 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 114+ AA0C 47           		ld		b,a							; b = regX for now
 115+ AA0D 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 116+ AA10 CD 8D A9     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 117+ AA13                      IfAIsZeroGoto NormSideXNoNeg
 117+ AA13 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 117+ AA14 CA 19 AA    >				jp	z,NormSideXNoNeg
 118+ AA17 EE 80        		xor		$80							; flip a to get -sidev_x
 119+ AA19              NormSideXNoNeg:
 120+ AA19 32 15 C0     		ld		(UBnkrotmatSidevX+1),a
 121+ AA1C              ;calc sidev y
 122+ AA1C 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 123+ AA1F 32 20 94     		ld		(varQ),a
 124+ AA22 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 125+ AA25 CD 0D A9     		call	RSequQmulA
 126+ AA28 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 127+ AA2B 47           		ld		b,a							; b = regX for now
 128+ AA2C 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 129+ AA2F CD 8D A9     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 130+ AA32                      IfAIsZeroGoto NormSideYNoNeg
 130+ AA32 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 130+ AA33 CA 38 AA    >				jp	z,NormSideYNoNeg
 131+ AA36 EE 80        		xor		$80							; flip a to get -sidev_y
 132+ AA38              NormSideYNoNeg:
 133+ AA38 32 23 C0     		ld		(UBnkrotmatNosevY+1),a
 134+ AA3B              ;calc sidev z
 135+ AA3B 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 136+ AA3E 32 20 94     		ld		(varQ),a
 137+ AA41 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 138+ AA44 CD 0D A9     		call	RSequQmulA
 139+ AA47 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 140+ AA4A 47           		ld		b,a							; b = regX for now
 141+ AA4B 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 142+ AA4E CD 8D A9     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 143+ AA51                      IfAIsZeroGoto NormSideZNoNeg
 143+ AA51 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 143+ AA52 CA 57 AA    >				jp	z,NormSideZNoNeg
 144+ AA55 EE 80        		xor		$80							; flip a to get -sidev_y
 145+ AA57              NormSideZNoNeg:
 146+ AA57 32 17 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 147+ AA5A              .ClearLoBytes:
 148+ AA5A 21 20 C0     		ld		hl,UBnkrotmatNosevX
 149+ AA5D 06 09        		ld		b,9
 150+ AA5F AF                   xor     a
 151+ AA60              .ClearLoLoop:
 152+ AA60 77           		ld		(hl),a						; zero out lo bytes
 153+ AA61 23           		inc		hl
 154+ AA62 23           		inc		hl
 155+ AA63 10 FB        		djnz	.ClearLoLoop
 156+ AA65 CD 41 A9     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 157+ AA68 CD 0C A5     		call	normaliseXX1596fast			; normalise roof
 158+ AA6B              ;calc sidev x
 159+ AA6B CD 7A A9     		call	CopyXX15toRotMatSideV		; get back normalised version
 160+ AA6E
 161+ AA6E C9           		ret
 162+ AA6F
 163+ AA6F
 164+ AA6F
 165+ AA6F              ;;;;;;;;.CheckNYSmall:
 166+ AA6F              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 167+ AA6F              ;;;;;;;;		and		$7F
 168+ AA6F              ;;;;;;;;		cp		0
 169+ AA6F              ;;;;;;;;		jp		z,Tidy1RZ
 170+ AA6F              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 171+ AA6F              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 172+ AA6F              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 173+ AA6F              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 174+ AA6F              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 175+ AA6F              ;;;;;;;;.DoNZ:
 176+ AA6F              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 177+ AA6F              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 178+ AA6F              ;;;;;;;;NormaliseRoofv:
 179+ AA6F              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 180+ AA6F              ;;;;;;;;		push	bc
 181+ AA6F              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 182+ AA6F              ;;;;;;;;		pop		bc
 183+ AA6F              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 184+ AA6F              ;;;;;;;;ProcessSidev:
 185+ AA6F              ;;;;;;;;; -- SIDEV X
 186+ AA6F              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 187+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 188+ AA6F              ;;;;;;;;		push	bc
 189+ AA6F              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 190+ AA6F              ;;;;;;;;		pop		bc
 191+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 192+ AA6F              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 193+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 194+ AA6F              ;;;;;;;;		push	bc
 195+ AA6F              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 196+ AA6F              ;;;;;;;;		pop		bc
 197+ AA6F              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 198+ AA6F              ;;;;;;;;; -- SIDEV Y
 199+ AA6F              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 200+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 201+ AA6F              ;;;;;;;;		push	bc
 202+ AA6F              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 203+ AA6F              ;;;;;;;;		pop		bc
 204+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 205+ AA6F              ;;;;;;;;		ld		b,a
 206+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 207+ AA6F              ;;;;;;;;		push	bc
 208+ AA6F              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 209+ AA6F              ;;;;;;;;		pop		bc
 210+ AA6F              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 211+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 212+ AA6F              ;;;;;;;;		push	bc
 213+ AA6F              ;;;;;;;;; -- SIDEV Z
 214+ AA6F              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 215+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 216+ AA6F              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 217+ AA6F              ;;;;;;;;		pop		bc
 218+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 219+ AA6F              ;;;;;;;;		ld		b,a
 220+ AA6F              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 221+ AA6F              ;;;;;;;;		push	bc
 222+ AA6F              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 223+ AA6F              ;;;;;;;;		pop		bc
 224+ AA6F              ;;;;;;;;		ld		(sidev_z+1),a
 225+ AA6F              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 226+ AA6F              ;;;;;;;;		ld		hl,sidev_z
 227+ AA6F              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 228+ AA6F              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 229+ AA6F              ;;;;;;;;NormaliseSideV:
 230+ AA6F              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 231+ AA6F              ;;;;;;;;		push	bc
 232+ AA6F              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 233+ AA6F              ;;;;;;;;		pop		bc
 234+ AA6F              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 235+ AA6F              ;;;;;;;;
 236+ AA6F
 237+ AA6F
 238+ AA6F              CalcRoofvX:
 239+ AA6F              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 240+ AA6F              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 240+ AA6F 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 240+ AA72 32 20 94    >               ld       (varQ),a
 241+ AA75 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 242+ AA78 CD 0D A9     		call	RSequQmulA						; rs = nosez hi * roofz hi
 243+ AA7B              		ldCopyByte UBnkrotmatNosevY+1,varQ
 243+ AA7B 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 243+ AA7E 32 20 94    >               ld       (varQ),a
 244+ AA81 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 245+ AA84 CD 55 A1     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 246+ AA87 7A           		ld		a,d
 247+ AA88 E6 80        		and 	$80
 248+ AA8A FD 67        		ld		iyh,a
 249+ AA8C              ;DEBUG		ld		c,a
 250+ AA8C 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 251+ AA8F 4F           		ld		c,a								; temp save
 252+ AA90 E6 80        		and		$80
 253+ AA92 FD AC        		xor		iyh								; flip from saved multiply sign result
 254+ AA94 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 255+ AA96 79           		ld		a,c								; recover a
 256+ AA97 E6 7F        		and		$7F								; a is unsigned nosev x
 257+ AA99 42           		ld		b,d
 258+ AA9A 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 259+ AA9B 57           		ld		d,a								; de = nosev x hi
 260+ AA9C 1E 00        		ld		e,0
 261+ AA9E CD 8E A3     		call	BC_Div_DE
 262+ AAA1 FD 7C        		ld		a,iyh							; get back sign from nosevx
 263+ AAA3 EE 80        		xor		$80								; flip sign
 264+ AAA5 E6 80        		and		$80								; keep sign bit only
 265+ AAA7 B0           		or		b
 266+ AAA8 C9           		ret
 267+ AAA9
 268+ AAA9
 269+ AAA9              CalcRoofvY:
 270+ AAA9              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 271+ AAA9              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 271+ AAA9 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 271+ AAAC 32 20 94    >               ld       (varQ),a
 272+ AAAF 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 273+ AAB2 CD 0D A9     		call	RSequQmulA
 274+ AAB5              		ldCopyByte UBnkrotmatNosevX+1,varQ
 274+ AAB5 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 274+ AAB8 32 20 94    >               ld       (varQ),a
 275+ AABB 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 276+ AABE CD 55 A1     		call	madXAequQmulAaddRS
 277+ AAC1 7A           		ld		a,d
 278+ AAC2 E6 80        		and 	$80
 279+ AAC4 FD 67        		ld		iyh,a
 280+ AAC6 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 281+ AAC9 4F           		ld		c,a								; temp save
 282+ AACA E6 80        		and		$80
 283+ AACC FD AC        		xor		iyh								; flip from saved multiply sign result
 284+ AACE FD 67        		ld		iyh,a							; save nosesev sign to iyh
 285+ AAD0 79           		ld		a,c								; recover a
 286+ AAD1 E6 7F        		and		$7F								; a is unsigned nosev x
 287+ AAD3 42           		ld		b,d
 288+ AAD4 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 289+ AAD5 57           		ld		d,a								; de = nosev x hi
 290+ AAD6 1E 00        		ld		e,0
 291+ AAD8 CD 8E A3     		call	BC_Div_DE
 292+ AADB FD 7C        		ld		a,iyh
 293+ AADD EE 80        		xor		$80
 294+ AADF E6 80        		and		$80
 295+ AAE1 B0           		or		b
 296+ AAE2 C9           		ret
 297+ AAE3
 298+ AAE3              CalcRoofvZ:
 299+ AAE3              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 300+ AAE3              		ldCopyByte UBnkrotmatNosevY+1,varQ
 300+ AAE3 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 300+ AAE6 32 20 94    >               ld       (varQ),a
 301+ AAE9 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 302+ AAEC CD 0D A9     		call	RSequQmulA						; rs = NOSEy * ROOFy
 303+ AAEF              		ldCopyByte UBnkrotmatNosevX+1,varQ
 303+ AAEF 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 303+ AAF2 32 20 94    >               ld       (varQ),a
 304+ AAF5 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 305+ AAF8 CD 55 A1     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 306+ AAFB 7A           		ld		a,d
 307+ AAFC E6 80        		and 	$80
 308+ AAFE FD 67        		ld		iyh,a
 309+ AB00 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 310+ AB03 4F           		ld		c,a								; temp save
 311+ AB04 E6 80        		and		$80
 312+ AB06 FD AC        		xor		iyh								; flip from saved multiply sign result
 313+ AB08 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 314+ AB0A 79           		ld		a,c								; recover a
 315+ AB0B E6 7F        		and		$7F								; a is unsigned nosev x
 316+ AB0D 42           		ld		b,d
 317+ AB0E 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 318+ AB0F 57           		ld		d,a								; de = nosev x hi
 319+ AB10 1E 00        		ld		e,0
 320+ AB12 CD 8E A3     		call	BC_Div_DE
 321+ AB15 FD 7C        		ld		a,iyh
 322+ AB17 EE 80        		xor		$80
 323+ AB19 E6 80        		and		$80
 324+ AB1B B0           		or		b
 325+ AB1C C9           		ret
 326+ AB1D
 327+ AB1D
 328+ AB1D
 329+ AB1D              ;;ProcessSidev:
 330+ AB1D              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 331+ AB1D              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 332+ AB1D              ;;		push	bc
 333+ AB1D              ;;		call	RSequQmulA					; RS = Q * A MULT12
 334+ AB1D              ;;		pop		bc
 335+ AB1D              ;;		ld		a,(UBnkrotmatNosevY+1)
 336+ AB1D              ;;		ld		b,a							; set x (b) to value of nosev_z
 337+ AB1D              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 338+ AB1D              ;;		push	bc
 339+ AB1D              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 340+ AB1D              ;;		pop		bc
 341+ AB1D              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 342+ AB1D              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 343+ AB1D              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 344+ AB1D              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 345+ AB1D              ;;		push	bc
 346+ AB1D              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 347+ AB1D              ;;		pop		bc
 348+ AB1D              ;;		ld		a,(UBnkrotmatNosevZ+1)
 349+ AB1D              ;;		ld		b,a
 350+ AB1D              ;;		ld		a,(UBnkrotmatNosevY+1)
 351+ AB1D              ;;		push	bc
 352+ AB1D              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 353+ AB1D              ;;		pop		bc
 354+ AB1D              ;;		xor		$80							; a *= -1
 355+ AB1D              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 356+ AB1D              ;;		ld		a,(UBnkrotmatRoofvY+1)
 357+ AB1D              ;;		push	bc
 358+ AB1D              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 359+ AB1D              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 360+ AB1D              ;;		call	RSequQmulA					; RS = Q * A MULT12
 361+ AB1D              ;;		pop		bc
 362+ AB1D              ;;		ld		a,(UBnkrotmatNosevX+1)
 363+ AB1D              ;;		ld		b,a
 364+ AB1D              ;;		ld		a,(UBnkrotmatRoofvY+1)
 365+ AB1D              ;;		push	bc
 366+ AB1D              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 367+ AB1D              ;;		pop		bc
 368+ AB1D              ;;		xor		$80
 369+ AB1D              ;;		ld		(UBnkrotmatSidevZ+1),a
 370+ AB1D              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 371+ AB1D              ;;		ld		hl,UBnkrotmatSidevZ
 372+ AB1D              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 373+ AB1D              ;;		ld		hl,UBnkrotmatNosevX
 374+ AB1D
 375+ AB1D
 376+ AB1D
 377+ AB1D
 378+ AB1D
 379+ AB1D
 380+ AB1D              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 381+ AB1D              ;;;;;;;;.ProcessRoofv:
 382+ AB1D              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 383+ AB1D              ;;;;;;;;		push	bc
 384+ AB1D              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 385+ AB1D              ;;;;;;;;		pop		bc
 386+ AB1D              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 387+ AB1D              ;;;;;;;;.ProcessSidev:
 388+ AB1D              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 389+ AB1D              ;;;;;;;;		push	bc
 390+ AB1D              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 391+ AB1D              ;;;;;;;;		pop		bc
 392+ AB1D              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 393+ AB1D
# file closed: ./Maths/Utilities/tidy.asm
 861  AB1D                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ AB1D
   2+ AB1D              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ AB1D BA          >                        cp     d
   2+ AB1E D2 3C AB    >                        jp		nc,.Ll28Exit255
   3+ AB21 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ AB23 CB 27        .LL31:                  sla     a
   5+ AB25 38 0D                                jr      c,.LL29
   6+ AB27                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ AB27 BA          >                        cp      d
   6+ AB28 DA 2D AB    >                        jp		c,.SkipSub
   7+ AB2B 92                                   sub     d
   8+ AB2C                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ AB2C B7          >                        or a
   9+ AB2D 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ AB2E CB 13                                rl      e
  11+ AB30 38 F1                                jr      c,.LL31
  12+ AB32 7B                                   ld      a,e
  13+ AB33 C9                                   ret
  14+ AB34 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ AB35 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ AB36 CB 13                                rl      e                           ; rotate counter e left
  17+ AB38 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ AB3A 7B                                   ld      a,e                         ; stick result in a
  19+ AB3B C9                                   ret
  20+ AB3C 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ AB3E C9                                   ret
  22+ AB3F
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 862  AB3F                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ AB3F              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ AB3F              TIS1:
   3+ AB3F 08           		ex		af,af'
   4+ AB40 3A B2 93     		ld		a,(regX)
   5+ AB43 47           		ld		b,a
   6+ AB44 08           		ex		af,af'
   7+ AB45              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ AB45 08           		ex		af,af'
   9+ AB46 78           		ld		a,b
  10+ AB47 32 20 94     		ld		(varQ),a
  11+ AB4A 08           		ex		af,af'
  12+ AB4B EE 80        		xor		$80							;	 flip sign of Acc
  13+ AB4D CD 55 A1     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ AB50              ; USES 				A BC E
  15+ AB50              ; DOES NOT USE		D HL
  16+ AB50              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ AB50 47           		ld		b,a
  18+ AB51 E6 80        		and		$80							;	hi sign
  19+ AB53 5F           		ld		e,a							;   e = varT
  20+ AB54 78           		ld		a,b
  21+ AB55 E6 7F        		and		$7F							;	hi A7
  22+ AB57 06 FE        		ld		b,$FE						;   slide counter
  23+ AB59 48           		ld		c,b							;   c == T1 ::  T1
  24+ AB5A              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ AB5A CB 27        		sla		a
  26+ AB5C FE 60        		cp		$60							; max 96
  27+ AB5E 30 02        		jr		nc,.DV4
  28+ AB60 DE 60        		sbc		a,$60							;  SBC #&60
  29+ AB62              .DV4:										; skip subtraction
  30+ AB62 CB 11        		rl		c							;  T1
  31+ AB64 38 F4        		jr		c,.DVL3
  32+ AB66 79           		ld		a,c							;   T1
  33+ AB67 B3           		or		e							;   restore T sign
  34+ AB68 C9           		ret
  35+ AB69
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 863  AB69              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 864  AB69              ;INCLUDE "XHiYLoequPA-gc3.asm"
 865  AB69              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 866  AB69              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 867  AB69              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 868  AB69                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 869  AB69
 870  AB69
 871  AB69                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ AB69              M_GETSETDRV             equ $89
   2+ AB69              F_OPEN                  equ $9a
   3+ AB69              F_CLOSE                 equ $9b
   4+ AB69              F_READ                  equ $9d
   5+ AB69              F_WRITE                 equ $9e
   6+ AB69              F_SEEK                  equ $9f
   7+ AB69
   8+ AB69              FA_READ                 equ $01
   9+ AB69              FA_APPEND               equ $06
  10+ AB69              FA_OVERWRITE            equ $0C
  11+ AB69
  12+ AB69 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ AB6D DD E5
  13+ AB6F AF                                   xor	    a	; set drive. 0 is default
  14+ AB70 CF                                   rst	    $08
  15+ AB71 89                                   db	    $89
  16+ AB72 32 7C AB                             ld	    (DefaultDrive),a
  17+ AB75 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ AB79 C1 F1
  18+ AB7B C9                                   ret
  19+ AB7C 00           DefaultDrive:	        db	0
  20+ AB7D
  21+ AB7D              ; *******************************************************************************************************
  22+ AB7D              ;	Function:	Open a file read for reading/writing
  23+ AB7D              ;	In:		ix = filename
  24+ AB7D              ;			b  = Open filemode
  25+ AB7D              ;	ret		a  = handle, 0 on error
  26+ AB7D              ; *******************************************************************************************************
  27+ AB7D E5 DD E5     fOpen:	                push	hl,,ix
  28+ AB80 DD E5                                push	ix
  29+ AB82 3A 7C AB                             ld	    a,(DefaultDrive)
  30+ AB85 CF                                   rst	    $08
  31+ AB86 9A                                   db	    F_OPEN
  32+ AB87 DD E1 E1                             pop	    hl,,ix
  33+ AB8A C9                                   ret
  34+ AB8B
  35+ AB8B              ; *******************************************************************************************************
  36+ AB8B              ;	Function	Read bytes from the open file
  37+ AB8B              ;	In:		ix  = address to read into
  38+ AB8B              ;			bc  = amount to read
  39+ AB8B              ;	ret:		carry set = error
  40+ AB8B              ; *******************************************************************************************************
  41+ AB8B B7           fRead:                  or   	a             ; is it zero?
  42+ AB8C C8                                   ret  	z             ; if so return
  43+ AB8D E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ AB90 E1                                   pop		hl
  45+ AB91 CF                                   rst	    $08
  46+ AB92 9D                                   db	    F_READ
  47+ AB93 E1                                   pop	    hl
  48+ AB94 C9                                   ret
  49+ AB95
  50+ AB95              ; *******************************************************************************************************
  51+ AB95              ;	Function	Read bytes from the open file
  52+ AB95              ;	In:		ix  = address to read into
  53+ AB95              ;			bc  = amount to read
  54+ AB95              ;	ret:		carry set = error
  55+ AB95              ; *******************************************************************************************************
  56+ AB95 B7           fWrite:                 or   	a             ; is it zero?
  57+ AB96 C8                                   ret  	z             ; if so return
  58+ AB97 E5 DD E5                             push	hl,,ix
  59+ AB9A E1                                   pop	    hl
  60+ AB9B CF                                   rst	    $08
  61+ AB9C 9E                                   db	    F_WRITE
  62+ AB9D E1                                   pop	    hl
  63+ AB9E C9                                   ret
  64+ AB9F
  65+ AB9F              ; *******************************************************************************************************
  66+ AB9F              ;	Function:	Close open file
  67+ AB9F              ;	In:		a  = handle
  68+ AB9F              ;	ret		a  = handle, 0 on error
  69+ AB9F              ; *******************************************************************************************************
  70+ AB9F B7           fClose:		            or   	a             ; is it zero?
  71+ ABA0 C8                                   ret  	z             ; if so return
  72+ ABA1 CF                                   rst	    $08
  73+ ABA2 9B                                   db	    F_CLOSE
  74+ ABA3 C9                                   ret
  75+ ABA4
  76+ ABA4              ; *******************************************************************************************************
  77+ ABA4              ;	Function	Read bytes from the open file
  78+ ABA4              ;	In:		a   = file handle
  79+ ABA4              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ ABA4              ;			BCDE = bytes to seek
  81+ ABA4              ;	ret:		BCDE = file pos from start
  82+ ABA4              ; *******************************************************************************************************
  83+ ABA4 DD E5 E5     fSeek:                  push	ix,,hl
  84+ ABA7 CF                                   rst	    $08
  85+ ABA8 9F                                   db	    F_SEEK
  86+ ABA9 E1 DD E1                             pop	    ix,,hl
  87+ ABAC C9                                   ret
  88+ ABAD
  89+ ABAD              ; *******************************************************************************************************
  90+ ABAD              ; Init the file system
  91+ ABAD              ; *******************************************************************************************************
  92+ ABAD CD 69 AB     InitFileSystem:         call    GetDefaultDrive
  93+ ABB0 C9                                   ret
  94+ ABB1
  95+ ABB1              ; *******************************************************************************************************
  96+ ABB1              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ ABB1              ; In:		hl = file data pointer
  98+ ABB1              ;		ix = address to load to
  99+ ABB1              ; *******************************************************************************************************
 100+ ABB1 CD 69 AB     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ ABB4 C5 D5 F5                             push	bc,,de,,af
 102+ ABB7                                      ; get file size
 103+ ABB7 4E                                   ld	    c,(hl)
 104+ ABB8 2C                                   inc	    l
 105+ ABB9 46                                   ld	    b,(hl)
 106+ ABBA 2C                                   inc	    l
 107+ ABBB C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ ABBE E5                                   push	hl				; get name into ix
 109+ ABBF DD E1                                pop	    ix
 110+ ABC1 06 01                                ld      b,FA_READ		; mode open for reading
 111+ ABC3 CD 7D AB                             call    fOpen
 112+ ABC6 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ ABC8 FE 00                                cp	    0				; was file handle 0?
 114+ ABCA 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ ABCC DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ ABCF F5                                   push	af				; remember handle
 117+ ABD0 CD 8B AB                             call	fRead			; read data from A to address IX of length BC
 118+ ABD3 38 0C                                jr	    c,.error_reading
 119+ ABD5 F1                                   pop	    af			    ; get handle back
 120+ ABD6 CD 9F AB                             call	fClose			; close file
 121+ ABD9 38 07                                jr	    c,.error_closing
 122+ ABDB F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ ABDE C9                                   ret
 124+ ABDF              ;
 125+ ABDF              ; On error, display error code an lock up so we can see it
 126+ ABDF              ;
 127+ ABDF DD E1        .error_opening:         pop	ix
 128+ ABE1 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ ABE2
 130+ ABE2              .error_closing:
 131+ ABE2 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ ABE3 D1                                   pop	de
 133+ ABE4 C1                                   pop	bc
 134+ ABE5 C9                                   ret
 135+ ABE6
 136+ ABE6              ; *******************************************************************************************************
 137+ ABE6              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ ABE6              ; In:		hl = file data pointer
 139+ ABE6              ;		ix = address to save from
 140+ ABE6              ;		bc = size
 141+ ABE6              ; *******************************************************************************************************
 142+ ABE6 CD 69 AB     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ ABE9 C5 E5                                push	bc,,hl   			; store size& save address
 144+ ABEB E5                                   push	hl		        	; get name into ix
 145+ ABEC DD E1                                pop	    ix
 146+ ABEE 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ ABF0 CD 7D AB                             call    fOpen
 148+ ABF3 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ ABF5 FE 00                                cp	    0			        ; was file handle 0?
 150+ ABF7 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ ABF9 DD E1                                pop	    ix			        ; get save address back
 152+ ABFB C1                                   pop	    bc			        ; get size back
 153+ ABFC F5                                   push	af			        ; remember handle
 154+ ABFD CD 95 AB                             call	fWrite			    ; read data from A to address IX of length BC
 155+ AC00 38 04                                jr	c,.error
 156+ AC02 F1                                   pop	af			            ; get handle back
 157+ AC03 CD 9F AB                             call	fClose			    ; close file
 158+ AC06 C9           .error:                 ret
 159+ AC07              ;
 160+ AC07              ; On error, display error code an lock up so we can see it
 161+ AC07              ;
 162+ AC07 DD E1        .error_opening:         pop	ix
 163+ AC09 C1                                   pop	bc	; don't pop a, need error code
 164+ AC0A C9                                   ret
 165+ AC0B
# file closed: ./Drive/drive_access.asm
 872  AC0B
 873  AC0B                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AC0B 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AC0F 41 4E 44 45
   1+ AC13 52 00
   2+ AC15 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AC19 4E 54 4F 52
   2+ AC1D 59 00
   3+ AC1F 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AC23 65 6E 74 20
   3+ AC27 53 79 73 74
   3+ AC2B 65 6D 20 20
   3+ AC2F 20 3A 00
   4+ AC32 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AC36 72 73 70 61
   4+ AC3A 63 65 20 53
   4+ AC3E 79 73 74 65
   4+ AC42 6D 3A 00
   5+ AC45 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AC49 69 74 69 6F
   5+ AC4D 6E 20 20 20
   5+ AC51 3A 00
   6+ AC53 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AC57 20 20 20 20
   6+ AC5B 20 20 20 20
   6+ AC5F 3A 00
   7+ AC61 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AC65 20 20 20 20
   7+ AC69 20 20 20 20
   7+ AC6D 3A 00
   8+ AC6F 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AC73 6C 20 53 74
   8+ AC77 61 74 75 73
   8+ AC7B 3A 00
   9+ AC7D 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AC81 6E 67 20 20
   9+ AC85 20 20 20 20
   9+ AC89 3A 00
  10+ AC8B 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AC8F 50 4D 45 4E
  10+ AC93 54 3A 00
  11+ AC96
  12+ AC96 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AC9A 20 4C 69 67
  12+ AC9E 68 74 20 59
  12+ ACA2 65 61 72 73
  12+ ACA6 00
  13+ ACA7 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ ACAB 58 58 58 58
  13+ ACAF 58 58 00
  14+ ACB2 2E           txt_cash_decimal        DB "."
  15+ ACB3 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ ACB7 00
  16+ ACB8
  17+ ACB8              txt_status_colour		equ $FF
  18+ ACB8
  19+ ACB8              print_boiler_text_l2:
  20+ ACB8              ; ">print_boilder_text hl = text structure, b = message count"
  21+ ACB8              BoilerTextLoop:
  22+ ACB8 C5           	push		bc			; Save Message Count loop value
  23+ ACB9 4E           	ld			c,(hl)		; Get Row into b
  24+ ACBA 23           	inc			hl
  25+ ACBB 46           	ld			b,(hl)		; Get Col into b
  26+ ACBC 23           	inc			hl
  27+ ACBD 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ ACBE 23           	inc			hl
  29+ ACBF 56           	ld			d,(hl)		; Get text address Hi into E
  30+ ACC0 23           	inc			hl
  31+ ACC1 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ ACC2 EB           	ex			de,hl		; now hl = address of text data
  33+ ACC3 1E FF        	ld			e,txt_status_colour
  34+ ACC5                  MMUSelectLayer2
  34+ ACC5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ ACC9 CD 80 E0     	call		l1_print_at
  36+ ACCC E1           	pop			hl
  37+ ACCD C1           	pop			bc
  38+ ACCE 10 E8        	djnz		BoilerTextLoop
  39+ ACD0 C9           	ret
  40+ ACD1
  41+ ACD1
  42+ ACD1              print_boiler_text:
  43+ ACD1              ; ">print_boilder_text hl = text structure, b = message count"
  44+ ACD1              .BoilerTextLoop:
  45+ ACD1 C5           	push		bc			; Save Message Count loop value
  46+ ACD2 4E           	ld			c,(hl)		; Get Row into b
  47+ ACD3 23           	inc			hl
  48+ ACD4 46           	ld			b,(hl)		; Get Col into b
  49+ ACD5 23           	inc			hl
  50+ ACD6 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ ACD7 23           	inc			hl
  52+ ACD8 56           	ld			d,(hl)		; Get text address Hi into E
  53+ ACD9 23           	inc			hl
  54+ ACDA E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ ACDB EB           	ex			de,hl		; now hl = address of text data
  56+ ACDC 1E FF        	ld			e,txt_status_colour
  57+ ACDE C5           	push		bc
  58+ ACDF D1           	pop			de
  59+ ACE0 CD 80 E0     	call		l1_print_at
  60+ ACE3 E1           	pop			hl
  61+ ACE4 C1           	pop			bc
  62+ ACE5 10 EA        	djnz		.BoilerTextLoop
  63+ ACE7 C9           	ret
  64+ ACE8
  65+ ACE8              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++ACE8
   2++ACE8
   3++ACE8 3A A4 97     	ld		a,(Fuel)
   4++ACEB 11 96 AC     	ld		de,txt_fuel_level
   5++ACEE 0E 9C        	ld	c, -100
   6++ACF0 CD FA AC     	call	.Num1
   7++ACF3 0E F6        	ld	c,-10
   8++ACF5 CD FA AC     	call	.Num1
   9++ACF8 0E FF        	ld	c,-1
  10++ACFA              .Num1:
  11++ACFA 06 2F        	ld	b,'0'-1
  12++ACFC              .Num2:
  13++ACFC 04           	inc		b
  14++ACFD 81           	add		a,c
  15++ACFE 38 FC        	jr		c,.Num2
  16++AD00 91           	sub 	c
  17++AD01 C5           	push	bc
  18++AD02 F5           	push	af
  19++AD03 79           	ld		a,c
  20++AD04 FE FF        	cp		-1
  21++AD06 CC 0F AD     	call	z,.InsertDot
  22++AD09 78           	ld		a,b
  23++AD0A 12           	ld		(de),a
  24++AD0B 13           	inc		de
  25++AD0C F1           	pop		af
  26++AD0D C1           	pop		bc
  27++AD0E C9           	ret
  28++AD0F              .InsertDot:
  29++AD0F 3E 2E        	ld		a,'.'
  30++AD11 12           	ld		(de),a
  31++AD12 13           	inc		de
  32++AD13 C9           	ret
  33++AD14
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AD14
  67+ AD14 2A A0 97     GetCash:                ld      hl,(Cash)
  68+ AD17 EB                                   ex      de,hl
  69+ AD18 DD 2A A2 97                          ld      ix,(Cash+2)
  70+ AD1C FD 21 A7 AC                          ld		iy,txt_cash_amount
  71+ AD20 CD 9E A6                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AD23 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AD26 32 B3 AC                             ld		(txt_cash_fraction),a
  74+ AD29 21 A8 AC     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AD2C 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AD2D FE 00                                cp		0
  77+ AD2F C8                                   ret		z
  78+ AD30 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AD34 C9                                   ret
  80+ AD35
# file closed: ./Menus/common_menu.asm
 874  AD35              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 875  AD35              ;INCLUDE "./title_page.asm"
 876  AD35
 877  AD35              ; Blocks dependent on variables in Universe Banks
 878  AD35              ; Bank 49
 879  AD35              ;    SEG RESETUNIVSEG
 880  AD35              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 881  AD35              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 882  AD35
 883  AD35              ;	ORG ResetUniverseAddr
 884  AD35              ;INCLUDE "./GameEngine/resetUniverse.asm"
 885  AD35              ; Bank 50
 886  AD35
 887  AD35
 888  AD35
 889  AD35                  SLOT    MenuShrChtAddr
 890  AD35                  PAGE    BankMenuShrCht
 891  AD35              	ORG     MenuShrChtAddr,BankMenuShrCht
 892  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 7E 9F  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD 80 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B CF 94                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A A4 97                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 58 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 1C 95                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B CF 94                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A D8 94     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 1C 95                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 44 A0                             ld		hl,name_expanded
  65+ C127 CD 9F 9F                             call	CapitaliseString
  66+ C12A 21 44 A0                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 1C 95                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B CF 94                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A D8 94     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 1C 95                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A D8 94     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B CF 94                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 1C 95                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 18 95                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 9E A6                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD D2 A4                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD D2 A4                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD D2 A4                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c,.NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c,.NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 46 98     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A D8 94                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 44 A0                             ld		hl,name_expanded
 258+ C2C2 CD 9F 9F                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 44 A0                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 44 A0                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 E6 93                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 46 98     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A D8 94     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 44 A0     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 9F 9F                             call	CapitaliseString
 333+ C34C 21 44 A0     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 25 94                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 87 90                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A D8 94                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 0C 94                             ld      de,SystemSeed
 359+ C388 CD 19 98                             call    copy_seed
 360+ C38B 3A 0D 94                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A D0 94     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 0F 94     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A CF 94                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 0D 94     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 D0 94                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 0F 94                             ld		a,(SystemSeed+3)
 390+ C3C5 21 CF 94                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 11 94                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 12 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 25 94                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 25 94                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 47 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 53 E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 3F E1     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 2C 94                             ld      (MenuIdMax),a
 420+ C41E 2A CF 94                             ld		hl,(PresentSystemX)
 421+ C421 22 1C 95                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD BF 9F                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 13 98     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A 2A 94     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A 1D 95     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA D8 C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 1D 95                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A 1D 95     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA D8 C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 1D 95                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A 1C 95     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA D8 C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 1C 95                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A 1C 95     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA D8 C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 1C 95                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A CF 94     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 1C 95                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 3A D8 94     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 493+ C4C6                                      MMUSelectGalaxyA
 493+ C4C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494+ C4C9 ED 4B 1C 95                          ld      bc,(TargetPlanetX)
 495+ C4CD CD 60 FB                             call    find_nearest_to_bc
 496+ C4D0 ED 43 1C 95                          ld      (TargetPlanetX),bc
 497+ C4D4 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 498+ C4D7 C9                                   ret
 499+ C4D8              ;----------------------------------------------------------------------------------------------------------------------------------
 500+ C4D8 AF           src_BoundsLimit:        xor     a
 501+ C4D9 C9                                   ret
 502+ C4DA
# file closed: ./Menus/short_range_chart_menu.asm
 893  C4DA              ; Bank 51
 894  C4DA
 895  C4DA                  SLOT    MenuGalChtAddr
 896  C4DA                  PAGE    BankMenuGalCht
 897  C4DA              	ORG     MenuGalChtAddr
 898  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 7E 9F  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD 80 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B CF 94  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A A4 97     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 58 E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B 1C 95  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 25 94     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A D8 94         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 0C 94         ld      de,SystemSeed
  66+ C0F0 CD 19 98     	call    copy_seed
  67+ C0F3 3A 0F 94     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A 0D 94     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A 10 94     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A 25 94     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 25 94     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 47 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 53 E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 3F E1     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 2C 94         ld      (MenuIdMax),a
 106+ C168 2A CF 94         ld      hl,(PresentSystemX)
 107+ C16B 22 1C 95         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD BF 9F     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A D8 94         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B 1C 95      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD 80 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 7D 92         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 7A 92         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD 80 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD 0D 92                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD 90 92                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD A4 92     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 7C 92                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 7B 92     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 7B 92                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A D8 94                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 5B 92                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 1C 95                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD 80 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD 80 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A 2A 94                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A 1D 95     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 1D 95                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A 1D 95     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 1D 95                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A 1C 95     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 1C 95                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A 1C 95     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 1C 95                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A CF 94     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 1C 95                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A D8 94     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B 1C 95                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 1C 95                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B 1C 95  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A D8 94                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B 1C 95                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 44 A0                             ld		hl,name_expanded
 356+ C3B5 CD 9F 9F                             call	CapitaliseString
 357+ C3B8 21 44 A0                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A D8 94     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B CF 94                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B 1C 95                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB     fqp                        call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 18 95                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 9E A6                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD D2 A4                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD D2 A4                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD D2 A4                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 25 94                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A D8 94     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A CF 94                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 0B 95                             ld      de,PresentSystemSeeds
 442+ C479 CD 19 98                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A 25 94                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 25 94                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: ./Menus//galactic_chart_menu.asm
 899  C495              ; Bank 52
 900  C495
 901  C495                  SLOT    MenuInventAddr
 902  C495                  PAGE    BankMenuInvent
 903  C495              	ORG     MenuInventAddr
 904  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD 80 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A A4 97     	ld		a,(Fuel)
   4++C136 11 96 AC     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 AB 97                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD F7 9A                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 22 9E                             ld		hl, WordIdx
 118+ C17A CD F7 9A                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD 80 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD 80 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD F7 9A                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 22 9E                             ld		hl,WordIdx
 148+ C1C1 CD F7 9A                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD 80 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A A2 97     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A A0 97                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 47 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 53 E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 3F E1     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 2C 94                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 3F E1                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 96 AC                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 905  C281
 906  C281              ; Bank 53
 907  C281
 908  C281                  SLOT    MenuSystemAddr
 909  C281                  PAGE    BankMenuSystem
 910  C281              	ORG     MenuSystemAddr
 911  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 7E 9F  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 44 A0  						DW $0280,name_expanded
   5+ C018 08 0B AE 9C  						DW $0B08,WordDistance
   6+ C01C 08 13 B7 9C  						DW $1308,WordEconomy
   7+ C020 08 1B BF 9C  						DW $1B08,WordGovernment
   8+ C024 08 23 CA 9C  						DW $2308,WordTechLevel
   9+ C028 08 2B D4 9C  						DW $2B08,WordPopulation
  10+ C02C 08 3B EF 9C  						DW $3B08,WordGross
  11+ C030 38 3B F5 9C  						DW $3B38,WordProductivity
  12+ C034 08 43 02 9D  						DW $4308,WordAverage
  13+ C038 48 43 0A 9D  						DW $4348,WordRadius
  14+ C03C 60 0B 7E 9F  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 7E 9F  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A D8 94     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B CF 94                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD 80 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 47 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 53 E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 3F E1     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 2C 94                             ld		(MenuIdMax),a
 134+ C316 3A D8 94     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 1C 95  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B CF 94  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 1C 95  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A CF 94                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 05 95     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD BF 9F                             call	expandTokenToString
 170+ C37B 3A D8 94     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 44 A0                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 44 A0                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 18 95  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 8F A6                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD 80 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD BF 9F                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD BF 9F                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD B1 9F                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD 80 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD 80 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 8F A6                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD 80 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A D8 94     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD 80 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 9E A6                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD 80 E0                             call	l1_print_at
 272+ C48F 3A D8 94     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 9E A6                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD 80 E0                             call	l1_print_at
 289+ C4BC 3A D8 94     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD CD E0                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 912  C4F7
 913  C4F7              ; Bank 54
 914  C4F7
 915  C4F7                  SLOT    MenuMarketAddr
 916  C4F7                  PAGE    BankMenuMarket
 917  C4F7                  ORG     MenuMarketAddr
 918  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 7E 9F  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 44 A0  						DW $0220,name_expanded
   4+ C018 80 0B 9E 9B  						DW $0B80,WordUnit
   5+ C01C B0 0B E7 9D  						DW $0BB0,WordQuantity
   6+ C020 08 13 C5 9D  						DW $1308,WordProduct
   7+ C024 60 13 CD 9D  						DW $1360,WordUoM
   8+ C028 80 13 D1 9D  						DW $1380,WordPrice
   9+ C02C B0 13 F5 9D  						DW $13B0,WordStock
  10+ C030 E0 13 F1 9D  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD 80 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A A2 97     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A A0 97                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A AA 97                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD 80 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD 80 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position
 249+ C28F 57                                   ld      d,a
 250+ C290 1E 08                                ld      e,8
 251+ C292 ED 30                                mul
 252+ C294 53                                   ld      d,e
 253+ C295 1E 00                                ld      e,0
 254+ C297 19                                   add     hl,de
 255+ C298 22 41 C0                             ld      (market_cursor),hl
 256+ C29B EB                                   ex      hl,de
 257+ C29C 21 43 C0                             ld      hl,market_blank_line
 258+ C29F                                      MMUSelectLayer1
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD 80 E0                             call	l1_print_at
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 AB 97                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 22 9E                             ld		hl,WordIdx
 273+ C2C5 CD F7 9A                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD 80 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 22 9E                             ld		hl,WordIdx
 281+ C2DF CD F7 9A                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD 80 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD 80 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD 80 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD 80 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 47 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 53 E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 3F E1     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 2C 94                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A D8 94     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD BF 9F                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 349+ C3C2 21 08 20                             ld		hl,market_position
 350+ C3C5 22 41 C0                             ld		(market_cursor),hl
 351+ C3C8 F5           MarketLoop:	            push	af
 352+ C3C9 CD 8B C2                             call	PrintMarketItem
 353+ C3CC F1                                   pop		af
 354+ C3CD 3C                                   inc		a
 355+ C3CE FE 11                                cp		17
 356+ C3D0 20 F6                                jr		nz,MarketLoop
 357+ C3D2 AF           .InitialHighlight:      xor     a
 358+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 359+ C3D6 CD B3 C0                             call    mkt_highlight_row
 360+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 361+ C3DC 11 10 A8                             ld      de,$A810
 362+ C3DF                                      MMUSelectLayer1
 362+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 363+ C3E3 CD 80 E0                             call	l1_print_at
 364+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 365+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 366+ C3EC 11 10 B0                             ld      de,$B010
 367+ C3EF                                      MMUSelectLayer1
 367+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 368+ C3F3 CD 80 E0                             call	l1_print_at
 369+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 370+ C3F9 C9                                   ret
 371+ C3FA
 372+ C3FA
 373+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 374+ C3FA              ; Handles all the input whilst in the market menu
 375+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 376+ C3FC CD 0D 92                             call    is_key_pressed
 377+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 378+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 379+ C404 CD 0D 92                             call    is_key_pressed
 380+ C407 CC 2C C4                             call    z,mkt_DownPressed
 381+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 382+ C40C CD 0D 92                             call    is_key_pressed
 383+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 384+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 385+ C414 CD 0D 92                             call    is_key_pressed
 386+ C417 CC 80 C4                             call    z,mkt_RightPressed
 387+ C41A C9                                   ret
 388+ C41B
 389+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 391+ C41E FE 00                                cp      0
 392+ C420 C8                                   ret     z
 393+ C421 CD C3 C0                             call    mkt_lowlight_row
 394+ C424 21 74 C0                             ld      hl,mkt_selected_row
 395+ C427 35                                   dec     (hl)
 396+ C428 CD B3 C0                             call    mkt_highlight_row
 397+ C42B C9                                   ret
 398+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 399+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 400+ C42F FE 10                                cp      16
 401+ C431 C8                                   ret     z
 402+ C432 CD C3 C0                             call    mkt_lowlight_row
 403+ C435 21 74 C0                             ld      hl,mkt_selected_row
 404+ C438 34                                   inc     (hl)
 405+ C439 CD B3 C0                             call    mkt_highlight_row
 406+ C43C C9                                   ret
 407+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 409+ C440 21 AB 97                             ld      hl,CargoTonnes
 410+ C443 ED 31                                add     hl,a
 411+ C445 7E                                   ld      a,(hl)
 412+ C446 FE 00                                cp      0
 413+ C448 C8                                   ret     z
 414+ C449 35                                   dec     (hl)
 415+ C44A DD 21 00 E0                          ld      ix,StockFood
 416+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 417+ C451 16 08                                ld      d,8
 418+ C453 5F                                   ld      e,a
 419+ C454 ED 30                                mul
 420+ C456 DD 19                                add     ix,de
 421+ C458                                      MMUSelectStockTable
 421+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 422+ C45C DD 34 01                             inc     (ix+1)
 423+ C45F DD 7E 07                             ld      a,(ix+7)
 424+ C462 FE 30                                cp      48
 425+ C464 20 04                                jr      nz,.UnderATonne
 426+ C466 21 AA 97                             ld      hl,CargoRunningLoad
 427+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 428+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 429+ C46D 16 00                                ld      d,0
 430+ C46F 5F                                   ld      e,a
 431+ C470 CD EE A0                             call    addDEtoCash
 432+ C473                                      ; DO ADD CASH
 433+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 434+ C476 CD 8B C2                             call    PrintMarketItem
 435+ C479 CD 69 C2                             call    MKT_DisplayCargo
 436+ C47C CD 7A C2                             call    MKT_DisplayCash
 437+ C47F C9                                   ret
 438+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 439+ C480              mkt_RightPressed:       MMUSelectStockTable
 439+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 440+ C484 DD 21 00 E0                          ld      ix,StockFood
 441+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 442+ C48B 16 08                                ld      d,8
 443+ C48D 5F                                   ld      e,a
 444+ C48E ED 30                                mul
 445+ C490 DD 19                                add     ix,de
 446+ C492 4F                                   ld      c,a
 447+ C493 DD 7E 01                             ld      a,(ix+1)
 448+ C496 FE 00                                cp      0
 449+ C498 C8                                   ret     z
 450+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 451+ C49C FE 30                                cp      48
 452+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 453+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 454+ C4A3 21 AB 97                             ld      hl,CargoTonnes
 455+ C4A6 ED 31                                add     hl,a
 456+ C4A8 7E                                   ld      a,(hl)
 457+ C4A9 FE C8                                cp      200
 458+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 459+ C4AC C3 B5 C4                             jp      .CheckCash
 460+ C4AF 2A A9 97     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 461+ C4B2 7C                                   ld      a,h
 462+ C4B3 BD                                   cp      l
 463+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 464+ C4B5 2A A2 97     .CheckCash:             ld      hl,(Cash+2)
 465+ C4B8 7C                                   ld      a,h
 466+ C4B9 B5                                   or      l
 467+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 468+ C4BC 2A A0 97                             ld      hl,(Cash)
 469+ C4BF 7C                                   ld      a,h
 470+ C4C0 FE 00                                cp      0
 471+ C4C2 20 07                                jr      nz,.MoreThanRequired
 472+ C4C4 DD 7E 02                             ld      a,(ix+2)
 473+ C4C7 BD                                   cp      l
 474+ C4C8 30 01                                jr      nc,.MoreThanRequired
 475+ C4CA C9                                   ret                         ; Insufficient Funds
 476+ C4CB 19           .MoreThanRequired:      add     hl,de
 477+ C4CC 7C                                   ld      a,h
 478+ C4CD B3                                   or      e
 479+ C4CE                                      ; check cash can we buy, and cargo capacity
 480+ C4CE DD 35 01                             dec     (ix+1)
 481+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 482+ C4D4 21 AB 97                             ld      hl,CargoTonnes
 483+ C4D7 ED 31                                add     hl,a
 484+ C4D9 34                                   inc     (hl)
 485+ C4DA DD 7E 07                             ld      a,(ix+7)
 486+ C4DD 47                                   ld      b,a
 487+ C4DE FE 30                                cp      48
 488+ C4E0 20 05                                jr      nz,.UnderOneTonne
 489+ C4E2 78                                   ld      a,b
 490+ C4E3 21 AA 97                             ld      hl,CargoRunningLoad
 491+ C4E6 34                                   inc     (hl)
 492+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 493+ C4EA 16 00                                ld      d,0
 494+ C4EC 5F                                   ld      e,a
 495+ C4ED CD 01 A1                             call    subDEfromCash
 496+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 497+ C4F3 CD 8B C2                             call    PrintMarketItem
 498+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 499+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 500+ C4FC C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 919  C4FD
 920  C4FD              ; Bank 66
 921  C4FD
 922  C4FD                  SLOT    DispMarketAddr
 923  C4FD                  PAGE    BankDispMarket
 924  C4FD                  ORG     DispMarketAddr
 925  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 7E 9F  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 44 A0  						DW $0220,name_expanded
   4+ C018 80 0B 9E 9B  						DW $0B80,WordUnit
   5+ C01C B0 0B E7 9D  						DW $0BB0,WordQuantity
   6+ C020 08 13 C5 9D  						DW $1308,WordProduct
   7+ C024 60 13 CD 9D  						DW $1360,WordUoM
   8+ C028 80 13 D1 9D  						DW $1380,WordPrice
   9+ C02C B0 13 F5 9D  						DW $13B0,WordStock
  10+ C030 E0 13 F1 9D  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD 80 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A A2 97     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A A0 97                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	    ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A AA 97                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:       call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD 80 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD 80 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:        push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD 80 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 AB 97                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 22 9E                             ld		hl,WordIdx
 256+ C2A5 CD F7 9A                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD 80 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 22 9E                             ld		hl,WordIdx
 264+ C2BF CD F7 9A                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD 80 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD 80 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD 80 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD 80 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 47 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 53 E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 3F E1     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 2C 94                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A D8 94     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD BF 9F                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD 80 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD 80 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 926  C3D3
 927  C3D3              ; Bank 55
 928  C3D3
 929  C3D3                  SLOT    StockTableAddr
 930  C3D3                  PAGE    BankStockTable
 931  C3D3                  ORG     StockTableAddr
 932  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 13 98                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A F3 94                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 11 95                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A F3 94                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 11 95                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
 933  E113
 934  E113              ; Bank 57
 935  E113
 936  E113                  SLOT    LAYER2Addr
 937  E113                  PAGE    BankLAYER2
 938  E113                  ORG     LAYER2Addr
 939  E000
 940  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 941  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
 942  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
 943  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 944  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 945  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
 946  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 947  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 948  E29F                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 949  E319                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c,l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c,l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 07 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >                        or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >                xor a
 100+ E589 FD 95       >                sub iyl
 100+ E58B FD 6F       >                ld iyl,a
 100+ E58D 9F          >                sbc a,a
 100+ E58E FD 94       >                sub iyh
 100+ E590 FD 67       >                ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >                xor a
 102+ E59E FD 95       >                sub iyl
 102+ E5A0 FD 6F       >                ld iyl,a
 102+ E5A2 9F          >                sbc a,a
 102+ E5A3 FD 94       >                sub iyh
 102+ E5A5 FD 67       >                ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                   cp    ixl
 118+ E5C8 D0          >                   ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DF CA F8 E5    >				jp	z,l2S_ErrZero
 136+ E5E2              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E2              	lddeiy
 137+ E5E2 FD 54       >                ld		d,iyh
 137+ E5E4 FD 5D       >                ld		e,iyl
 138+ E5E6 EB           	ex		de,hl
 139+ E5E7 16 00        	ld		d,0
 140+ E5E9 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5EC 5F           	ld		e,a
 142+ E5ED              	ClearCarryFlag
 142+ E5ED B7          >                        or a
 143+ E5EE ED 52        	sbc		hl,de
 144+ E5F0 EB           	ex		de,hl
 145+ E5F1              	ldiyde
 145+ E5F1 FD 62       >                ld		iyh,d
 145+ E5F3 FD 6B       >                ld		iyl,e
 146+ E5F5              l2S_adjustRow:									; move Y down by one
 147+ E5F5 04           	inc		b
 148+ E5F6 18 BD        	jr		l2S_Loop
 149+ E5F8              l2S_ErrZero:
 150+ E5F8 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FB EB           	ex		de,hl
 152+ E5FC 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E5FF              	ClearCarryFlag
 153+ E5FF B7          >                        or a
 154+ E600 ED 52        	sbc		hl,de
 155+ E602 EB           	ex		de,hl
 156+ E603              	ldiyde
 156+ E603 FD 62       >                ld		iyh,d
 156+ E605 FD 6B       >                ld		iyl,e
 157+ E607              l2S_adjustCol2:
 158+ E607 00           	nop										; update X and Y
 159+ E608 04           	inc		b
 160+ E609 18 AA        	jr		l2S_Loop
 161+ E60B
 162+ E60B              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60B 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60E 21 00 00                             ld		hl,0                            ;
 165+ E611 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E614 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E617 78           l2D_preSort:            ld		a,b								;
 168+ E618                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E618 BA          >                        cp      d
 168+ E619 DA 21 E6    >                        jp		c,l2D_noYSort
 169+ E61C              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61C 60          >                ld		h,b
 169+ E61D 69          >                ld		l,c
 170+ E61E EB                                   ex		de,hl                           ;
 171+ E61F                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61F 44          >                ld		b,h
 171+ E620 4D          >                ld		c,l
 172+ E621 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E623 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E625 79           l2D_setXLen:            ld		a,c                             ;
 175+ E626                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E626 BB          >                        cp      e
 175+ E627 DA 33 E6    >                        jp		c,l2D_PosXLen
 176+ E62A 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62B 93                                   sub     e                               ;
 178+ E62C 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62F 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E631 18 07                                jr		l2D_XINCDEC
 181+ E633 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E634 91                                   sub		c                               ;
 183+ E635 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E638 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63A 32 A9 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63D 32 D9 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E640 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E641 90                                   sub		b
 189+ E642 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E645              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E645 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E648 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64C                                      ClearCarryFlag
 193+ E64C B7          >                        or a
 194+ E64D ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64F EB                                   ex		de,hl
 196+ E650 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E652 FD 6B                                ld		iyl,e
 198+ E654 F2 79 E6                             jp		p,l2D_fracIsPositive
 199+ E657              l2D_fracIsNegative:     NegIY
 199+ E657 AF          >                xor a
 199+ E658 FD 95       >                sub iyl
 199+ E65A FD 6F       >                ld iyl,a
 199+ E65C 9F          >                sbc a,a
 199+ E65D FD 94       >                sub iyh
 199+ E65F FD 67       >                ld iyh,a
 200+ E661                                      ShiftIYRight1
 200+ E661 FD 7C       >			   ld 	a,iyh
 200+ E663 CB 3F       >			   srl 	a
 200+ E665 FD 67       >			   ld	iyh,a
 200+ E667 FD 7D       >			   ld 	a,iyl
 200+ E669 1F          >			   rra
 200+ E66A FD 6F       >			   ld	iyl,a
 201+ E66C                                      NegIY
 201+ E66C AF          >                xor a
 201+ E66D FD 95       >                sub iyl
 201+ E66F FD 6F       >                ld iyl,a
 201+ E671 9F          >                sbc a,a
 201+ E672 FD 94       >                sub iyh
 201+ E674 FD 67       >                ld iyh,a
 202+ E676 C3 84 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E679              l2D_fracIsPositive:     ShiftIYRight1
 203+ E679 FD 7C       >			   ld 	a,iyh
 203+ E67B CB 3F       >			   srl 	a
 203+ E67D FD 67       >			   ld	iyh,a
 203+ E67F FD 7D       >			   ld 	a,iyl
 203+ E681 1F          >			   rra
 203+ E682 FD 6F       >			   ld	iyl,a
 204+ E684              l2D_SkipCalcInc:
 205+ E684 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E686 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E689 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68C D1 C1                                pop     bc,,de
 209+ E68E DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E690                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E690 B8          >                        cp     b
 210+ E691 D2 97 E6    >                        jp		nc,l2D_CheckXPos
 211+ E694 C3 9B E6                             jp		l2D_Continue
 212+ E697 79           l2D_CheckXPos:          ld		a,c
 213+ E698                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E698 DD BD       >                  cp      ixl
 213+ E69A C8          >                  ret     z
 214+ E69B              l2D_Continue:
 215+ E69B FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69D CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69F 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A1 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A4 16 00                                ld		d,0
 220+ E6A6 5F                                   ld		e,a
 221+ E6A7 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A9 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AA 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AC FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AE FD B5                                or		iyl
 226+ E6B0                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6B1 CA CA E6    >				jp	z,l2D_ErrZero
 227+ E6B4              l2D_ErrPositive:		lddeiy
 227+ E6B4 FD 54       >                ld		d,iyh
 227+ E6B6 FD 5D       >                ld		e,iyl
 228+ E6B8 EB                                   ex		de,hl
 229+ E6B9 16 00                                ld		d,0
 230+ E6BB 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6BE 5F                                   ld		e,a
 232+ E6BF                                      ClearCarryFlag
 232+ E6BF B7          >                        or a
 233+ E6C0 ED 52                                sbc		hl,de
 234+ E6C2 EB                                   ex		de,hl
 235+ E6C3                                      ldiyde
 235+ E6C3 FD 62       >                ld		iyh,d
 235+ E6C5 FD 6B       >                ld		iyl,e
 236+ E6C7 04           l2D_adjustRow:			inc		b
 237+ E6C8 18 BA                                jr		l2D_Loop
 238+ E6CA 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CD EB                                   ex		de,hl
 240+ E6CE 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D1                                      ClearCarryFlag
 241+ E6D1 B7          >                        or a
 242+ E6D2 ED 52                                sbc		hl,de
 243+ E6D4 EB                                   ex		de,hl
 244+ E6D5                                      ldiyde
 244+ E6D5 FD 62       >                ld		iyh,d
 244+ E6D7 FD 6B       >                ld		iyl,e
 245+ E6D9 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DA 04                                   inc		b
 247+ E6DB 18 A7                                jr		l2D_Loop
 248+ E6DD              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DD
 250+ E6DD
 251+ E6DD
 252+ E6DD
 253+ E6DD              ;Loin:				; BBC version of line draw
 254+ E6DD              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DD              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DD              ;	ld		ixh,0							; ixh = s
 257+ E6DD              ;	ld		iyh,0							; iyh = swap
 258+ E6DD              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DD              ;LoinCalcDeltaX:
 260+ E6DD              ;	ld		a,e
 261+ E6DD              ;	sub		c								; a = deltaX
 262+ E6DD              ;	JumpIfPositive LoinPosDx
 263+ E6DD              ;LoinNegDx:
 264+ E6DD              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DD              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DD              ;LoinPosDx:
 267+ E6DD              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DD              ;LoinCalcDeltaY:
 269+ E6DD              ;	ld		a,d
 270+ E6DD              ;	sub		b								; a= deltaY
 271+ E6DD              ;	JumpIfPositive LoinPosDy
 272+ E6DD              ;LoinNegDy:
 273+ E6DD              ;	neg
 274+ E6DD              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DD              ;LoinPosDy:
 276+ E6DD              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DD              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DD              ;LoinSTPx:									; step along X
 279+ E6DD              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DD              ;LoinSTPxSwapCoords:
 281+ E6DD              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DD              ;	ld		a,l								; save l flags
 283+ E6DD              ;	ex		de,hl							; save de to hl
 284+ E6DD              ;	lddebc									; Point2 = point1
 285+ E6DD              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DD              ;	ld		l,a								; get back l flags
 287+ E6DD              ;LoinSTPxCorrectOrder:
 288+ E6DD              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DD              ;	ld		a,iyl							; get delta Y back
 290+ E6DD              ;	ld		iy1,$FE							; roll counter
 291+ E6DD              ;LionSTPxRollQ:
 292+ E6DD              ;	sla		a								; highest bit of delta-Y
 293+ E6DD              ;	jp		c,LoinSTPxSteep
 294+ E6DD              ;	cp		ixl								; compare with DeltaX
 295+ E6DD              ;	jp		cs,LoinSTPxShallow
 296+ E6DD              ;LoinSTPxSteep:								;; LI4
 297+ E6DD              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DD              ;	scf										; force carry flag set
 299+ E6DD              ;LoinSTPxShallow:							;; LI5
 300+ E6DD              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DD              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DD              ;	inc		ihl								; DeltaX += 1
 303+ E6DD              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DD              ;	ld		a,d
 305+ E6DD              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DD              ;	ld		a,iyh							; swap flag
 307+ E6DD              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DD              ;LoinSTPxX1Dec:
 309+ E6DD              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DD              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DD              ;	sub		b
 312+ E6DD              ;	if
 313+ E6DD              ;
 314+ E6DD              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DD              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DD              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DD              ;86 81                   STX &81		\ Q
 318+ E6DD              ;.LIL1	\ roll Q
 319+ E6DD              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DD              ;B0 04                   BCS LI4		\ steep
 321+ E6DD              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DD              ;90 03                   BCC LI5		\ shallow
 323+ E6DD              ;.LI4	\ steep
 324+ E6DD              ;E5 1B                   SBC &1B		\ P
 325+ E6DD              ;38                      SEC
 326+ E6DD              ;.LI5	\ shallow
 327+ E6DD              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DD              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DD              ;A6 1B                   LDX &1B		\ P
 330+ E6DD              ;E8                      INX 		\ Xreg is width
 331+ E6DD              ;A5 37                   LDA &37		\ Y2
 332+ E6DD              ;E5 35                   SBC &35		\ Y1
 333+ E6DD              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DD              ;A5 90                   LDA &90		\ SWAP
 335+ E6DD              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DD              ;CA                      DEX
 337+ E6DD              ;.LIL2	\ counter X width
 338+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DD              ;.LI6	\ Xreg correct
 342+ E6DD              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DD              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DD              ;66 82                   ROR &82		\ R
 345+ E6DD              ;A5 07                   LDA &07		\ SC
 346+ E6DD              ;69 08                   ADC #8		\ next column
 347+ E6DD              ;85 07                   STA &07		\ SC
 348+ E6DD              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DD              ;A5 83                   LDA &83		\ S
 350+ E6DD              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DD              ;85 83                   STA &83		\ S
 352+ E6DD              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DD              ;88                      DEY
 354+ E6DD              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DD              ;C6 08                   DEC &08		\ SC+1
 356+ E6DD              ;A0 07                   LDY #7
 357+ E6DD              ;.LIC2	\ skip Y adjustment
 358+ E6DD              ;CA                      DEX
 359+ E6DD              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DD              ;60                      RTS
 362+ E6DD              ;
 363+ E6DD              ;.DOWN	\ Line is going to the right and down
 364+ E6DD              ;A5 90                   LDA &90		\ SWAP
 365+ E6DD              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DD              ;CA                      DEX
 367+ E6DD              ;.LIL3	\ counter X width
 368+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DD              ;.LI9	\ no swap
 372+ E6DD              ;46 82                   LSR &82		\ R
 373+ E6DD              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DD              ;66 82                   ROR &82		\ R
 375+ E6DD              ;A5 07                   LDA &07		\ SC
 376+ E6DD              ;69 08                   ADC #8		\ next column
 377+ E6DD              ;85 07                   STA &07		\ SC
 378+ E6DD              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DD              ;A5 83                   LDA &83		\ S
 380+ E6DD              ;65 81                   ADC &81		\ Q
 381+ E6DD              ;85 83                   STA &83		\ S
 382+ E6DD              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DD              ;C8                      INY
 384+ E6DD              ;C0 08                   CPY #8
 385+ E6DD              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DD              ;E6 08                   INC &08		\ SC+1
 387+ E6DD              ;A0 00                   LDY #0
 388+ E6DD              ;.LIC3	\ skipped Y adjustment
 389+ E6DD              ;CA                      DEX
 390+ E6DD              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DD              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DD              ;60                      RTS
 393+ E6DD              ;
 394+ E6DD              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DD              ;A4 35                   LDY &35		\ Y1
 396+ E6DD              ;98                      TYA
 397+ E6DD              ;A6 34                   LDX &34		\ X1
 398+ E6DD              ;C4 37                   CPY &37		\ Y2
 399+ E6DD              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DD              ;C6 90                   DEC &90		\ SWAP
 401+ E6DD              ;A5 36                   LDA &36		\ X2
 402+ E6DD              ;85 34                   STA &34		\ X1
 403+ E6DD              ;86 36                   STX &36		\ X2
 404+ E6DD              ;AA                      TAX
 405+ E6DD              ;A5 37                   LDA &37		\ Y2
 406+ E6DD              ;85 35                   STA &35		\ Y1
 407+ E6DD              ;84 37                   STY &37		\ Y2
 408+ E6DD              ;A8                      TAY
 409+ E6DD              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DD              ;4A                      LSR A
 411+ E6DD              ;4A                      LSR A
 412+ E6DD              ;4A                      LSR A
 413+ E6DD              ;09 60                   ORA #&60
 414+ E6DD              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DD              ;8A                      TXA 		\ X1
 416+ E6DD              ;29 F8                   AND #&F8
 417+ E6DD              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DD              ;8A                      TXA
 419+ E6DD              ;29 07                   AND #7		\ mask index
 420+ E6DD              ;AA                      TAX
 421+ E6DD              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DD              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DD              ;A5 35                   LDA &35		\ Y1
 424+ E6DD              ;29 07                   AND #7
 425+ E6DD              ;A8                      TAY
 426+ E6DD              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DD              ;A2 01                   LDX #1		\ roll counter
 428+ E6DD              ;86 1B                   STX &1B	    	\ P
 429+ E6DD              ;.LIL4	\ roll P
 430+ E6DD              ;0A                      ASL A
 431+ E6DD              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DD              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DD              ;90 03                   BCC LI14	\ less than Q
 434+ E6DD              ;.LI13	\ do subtraction
 435+ E6DD              ;E5 81                   SBC &81		\ Q
 436+ E6DD              ;38                      SEC
 437+ E6DD              ;.LI14	\ less than Q
 438+ E6DD              ;26 1B                   ROL &1B		\ P
 439+ E6DD              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DD              ;A6 81                   LDX &81		\ Q
 441+ E6DD              ;E8                      INX 		\ adjust height
 442+ E6DD              ;A5 36                   LDA &36		\ X2
 443+ E6DD              ;E5 34                   SBC &34		\ X1
 444+ E6DD              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DD              ;18                      CLC
 446+ E6DD              ;A5 90                   LDA &90		\ SWAP
 447+ E6DD              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DD              ;CA                      DEX
 449+ E6DD              ;.LIL5	\ skipped first point, counter X
 450+ E6DD              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DD              ;.LI17	\ skipped first point
 454+ E6DD              ;88                      DEY
 455+ E6DD              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DD              ;C6 08                   DEC &08		\ SC+1
 457+ E6DD              ;A0 07                   LDY #7		\ new char
 458+ E6DD              ;	.LI16	\ skipped hi adjust
 459+ E6DD              ;A5 83                   LDA &83		\ S
 460+ E6DD              ;65 1B                   ADC &1B		\ P
 461+ E6DD              ;85 83                   STA &83		\ S
 462+ E6DD              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DD              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DD              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DD              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DD              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DD              ;69 08                   ADC #8		\ next char below
 468+ E6DD              ;85 07                   STA &07		\ SC
 469+ E6DD              ;.LIC5	\ same column
 470+ E6DD              ;CA                      DEX
 471+ E6DD              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DD              ;60                      RTS
 474+ E6DD              ;
 475+ E6DD              ;.LFT	\ going left
 476+ E6DD              ;A5 90                   LDA &90		\ SWAP
 477+ E6DD              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DD              ;CA                      DEX 		\ reduce height
 479+ E6DD              ;.LIL6	\ counter X height
 480+ E6DD              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DD              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DD              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DD              ;.LI18
 484+ E6DD              ;88                      DEY
 485+ E6DD              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DD              ;C6 08                   DEC &08		\ SC+1
 487+ E6DD              ;A0 07                   LDY #7		\ rest char row
 488+ E6DD              ;.LI19	\ skipped hi adjust
 489+ E6DD              ;A5 83                   LDA &83		\ S
 490+ E6DD              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DD              ;85 83                   STA &83		\ S
 492+ E6DD              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DD              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DD              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DD              ;26 82                   ROL &82		\ R
 496+ E6DD              ;A5 07                   LDA &07		\ SC
 497+ E6DD              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DD              ;85 07                   STA &07		\ SC
 499+ E6DD              ;18                      CLC
 500+ E6DD              ;.LIC6	\ no overflow
 501+ E6DD              ;CA                      DEX 		\ height
 502+ E6DD              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DD              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DD              ;.HL6
 505+ E6DD              ;60                      RTS 		\ end Line drawing
 506+ E6DD
 507+ E6DD
 508+ E6DD              ;;l2_draw_diagonalopt:
 509+ E6DD              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DD              ;;	push	af
 511+ E6DD              ;;	ld		a,b
 512+ E6DD              ;;	cp		d
 513+ E6DD              ;;	jr		z,.RegularDiagnonal
 514+ E6DD              ;;.CheckHorz:
 515+ E6DD              ;;	ld		a,c
 516+ E6DD              ;;	cp		e
 517+ E6DD              ;;	jr		z,.horizontalLine
 518+ E6DD              ;;.RegularDiagnonal:
 519+ E6DD              ;;	pop		af
 520+ E6DD              ;;	call diag
 521+ E6DD
 522+ E6DD
 523+ E6DD              ;;l2_signed_mul2a:
 524+ E6DD              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DD              ;;	TEST	$80
 526+ E6DD              ;;	jr		nz, .negativecalc
 527+ E6DD              ;;.positivecalc:
 528+ E6DD              ;;	ccf
 529+ E6DD              ;;	rla
 530+ E6DD              ;;	ret
 531+ E6DD              ;;.negativecalc:
 532+ E6DD              ;;	neg
 533+ E6DD              ;;	ccf
 534+ E6DD              ;;	rla
 535+ E6DD              ;;	neg
 536+ E6DD              ;;	ret
 537+ E6DD              ;;
 538+ E6DD              ;;l2_signed_mul2atohl:
 539+ E6DD              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DD              ;;	TEST	$80
 541+ E6DD              ;;	jr		nz, .negativecalc
 542+ E6DD              ;;.positivecalc:
 543+ E6DD              ;;	ld		hl,0
 544+ E6DD              ;;	ld		l,a
 545+ E6DD              ;;	add		hl,a
 546+ E6DD              ;;	ret
 547+ E6DD              ;;.negativecalc:
 548+ E6DD              ;;	neg
 549+ E6DD              ;;	ld		hl,0
 550+ E6DD              ;;	ld		l,a
 551+ E6DD              ;;	neghl
 552+ E6DD              ;;	ret
 553+ E6DD              ;;
 554+ E6DD              ;;l2_e2fractionby2:
 555+ E6DD              ;;	ld 		hl,(l2fraction)
 556+ E6DD              ;;	push	de
 557+ E6DD              ;;	ld		d,h
 558+ E6DD              ;;	ld		e,l
 559+ E6DD              ;;	add		hl,de
 560+ E6DD              ;;	pop		de
 561+ E6DD              ;;	ld		(l2e2),hl
 562+ E6DD              ;;	ret
 563+ E6DD
 564+ E6DD
 565+ E6DD
 566+ E6DD
 567+ E6DD
 568+ E6DD              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DD              ;;//.catchLoop:
 570+ E6DD              ;;//	jp .catchLoop
 571+ E6DD              ;;//.continue:
 572+ E6DD              ;;//    ld      A,D
 573+ E6DD              ;;//    sub     H
 574+ E6DD              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DD              ;;//.DXNegative:
 576+ E6DD              ;;//    neg
 577+ E6DD              ;;//.DXPositive:
 578+ E6DD              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DD              ;;//    ld      A,E
 580+ E6DD              ;;//    sub     L
 581+ E6DD              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DD              ;;//.DYNegative:
 583+ E6DD              ;;//    neg
 584+ E6DD              ;;//.DYPositive:
 585+ E6DD              ;;//    sub     B               ;|delta_y|
 586+ E6DD              ;;//	push	af
 587+ E6DD              ;;//	jr		c,.DeltaX
 588+ E6DD              ;;//.DeltaY
 589+ E6DD              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DD              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DD              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DD              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DD              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DD              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DD              ;;//.DeltaX:
 596+ E6DD              ;;//	ld		a,d
 597+ E6DD              ;;//	sub		h
 598+ E6DD              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DD              ;;//.TestDX:
 600+ E6DD              ;;//	ex		de,hl
 601+ E6DD              ;;//.TestDY:
 602+ E6DD              ;;//	ld		a,e
 603+ E6DD              ;;//	sub		l
 604+ E6DD              ;;//    ld      A,$01
 605+ E6DD              ;;//    jr      NC,.StoreA
 606+ E6DD              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DD              ;;//.StoreA:
 608+ E6DD              ;;//        ld      (l2way),A
 609+ E6DD              ;;//.InitLine:
 610+ E6DD              ;;//        ld      B,H
 611+ E6DD              ;;//        ld      C,L
 612+ E6DD              ;;//        ld      A,E
 613+ E6DD              ;;//        sub     L
 614+ E6DD              ;;//        jr      NC,.EndInit
 615+ E6DD              ;;//        ld      A,L
 616+ E6DD              ;;//        ld      L,E
 617+ E6DD              ;;//        ld      E,A
 618+ E6DD              ;;//.EndInit:
 619+ E6DD              ;;//        ld      A,E
 620+ E6DD              ;;//        sub     L
 621+ E6DD              ;;//        rla
 622+ E6DD              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DD              ;;//        add     A,H
 624+ E6DD              ;;//        sub     D
 625+ E6DD              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DD              ;;//        add     A,H
 627+ E6DD              ;;//        sub     D
 628+ E6DD              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DD              ;;//.Loop:
 630+ E6DD              ;;//        ld      A,B
 631+ E6DD              ;;//        sub     D
 632+ E6DD              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DD              ;;//        pop     AF
 634+ E6DD              ;;//        bit     7,A
 635+ E6DD              ;;//        push    AF
 636+ E6DD              ;;//        push    AF
 637+ E6DD              ;;//        push    BC
 638+ E6DD              ;;//        jr      Z,.DrawPoint
 639+ E6DD              ;;//        ld      A,B
 640+ E6DD              ;;//        ld      B,C
 641+ E6DD              ;;//        ld      C,A
 642+ E6DD              ;;//.DrawPoint:
 643+ E6DD              ;;//		push	hl
 644+ E6DD              ;;//		pushbcdeaf
 645+ E6DD              ;;//		ld		b,e
 646+ E6DD              ;;//		ld		c,d
 647+ E6DD              ;;//	ld 		a,(l2linecolor)
 648+ E6DD              ;;//	call	l2_plot_pixel
 649+ E6DD              ;;//		popafdebc
 650+ E6DD              ;;//		pop		hl
 651+ E6DD              ;;//        pop     BC
 652+ E6DD              ;;//        pop     AF
 653+ E6DD              ;;//.TestD:
 654+ E6DD              ;;//        bit     7,E
 655+ E6DD              ;;//        jr      NZ,.Case1
 656+ E6DD              ;;//.Case2:                          ;d >= 0
 657+ E6DD              ;;//        ld      A,E
 658+ E6DD              ;;//        add     A,H
 659+ E6DD              ;;//        ld      E,A
 660+ E6DD              ;;//        ld      A,(l2way)
 661+ E6DD              ;;//        add     A,C
 662+ E6DD              ;;//        ld      C,A
 663+ E6DD              ;;//        jr      .EndLoop
 664+ E6DD              ;;//.Case1:                          ;d < 0
 665+ E6DD              ;;//        ld      A,E
 666+ E6DD              ;;//        add     A,L
 667+ E6DD              ;;//        ld      E,A
 668+ E6DD              ;;//.EndLoop:
 669+ E6DD              ;;//        inc     B
 670+ E6DD              ;;//        jr      .Loop
 671+ E6DD              ;;//.EndLine:
 672+ E6DD              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DD              ;;//        pop     HL              ;can be removed
 674+ E6DD              ;;//        pop     DE              ;can be removed
 675+ E6DD              ;;//        ret
 676+ E6DD
 677+ E6DD              ;;	ld		(.l2yadjust),a
 678+ E6DD              ;;	call	calcdeltax:
 679+ E6DD              ;;	ld		(.l2xadjust),a
 680+ E6DD              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DD              ;;	push	hl
 682+ E6DD              ;;	push	de
 683+ E6DD              ;;	ld		hl,(l2deltaX)
 684+ E6DD              ;;	ld		de,(l2deltaY)
 685+ E6DD              ;;	add		hl,de
 686+ E6DD              ;;	ld		(l2fraction),hl
 687+ E6DD              ;;	pop		de
 688+ E6DD              ;;	pop		hl
 689+ E6DD              ;;.mainloop:
 690+ E6DD              ;;	push	bc
 691+ E6DD              ;;	push	de
 692+ E6DD              ;;	ld 		a,(l2linecolor)
 693+ E6DD              ;;	call	l2_plot_pixel
 694+ E6DD              ;;	pop		de
 695+ E6DD              ;;	pop		bc
 696+ E6DD              ;;.arewefinishedtest
 697+ E6DD              ;;	ld		a,b
 698+ E6DD              ;;	cp		d
 699+ E6DD              ;;	jr		nz,.notthereyet
 700+ E6DD              ;;	ld		a,c
 701+ E6DD              ;;	cp		e
 702+ E6DD              ;;	ret		z
 703+ E6DD              ;;.notthereyet:
 704+ E6DD              ;;	push	de
 705+ E6DD              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DD              ;;	pop		de
 707+ E6DD              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DD              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DD              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DD              ;;	or		a							;
 711+ E6DD              ;;	sbc		hl,de						;
 712+ E6DD              ;;	pop		de
 713+ E6DD              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DD              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DD              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DD              ;;.dodycalc:
 717+ E6DD              ;;	ld		hl,(l2fraction)
 718+ E6DD              ;;	push	de
 719+ E6DD              ;;	ld		de,(l2deltaY)
 720+ E6DD              ;;	add		hl,de
 721+ E6DD              ;;	ld		(l2fraction),de
 722+ E6DD              ;;	pop		de
 723+ E6DD              ;;.l2yadjust:
 724+ E6DD              ;;	nop
 725+ E6DD              ;;.skipdycalc:
 726+ E6DD              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DD              ;;	ld		hl,(l2e2)
 728+ E6DD              ;;	push	de							;
 729+ E6DD              ;;	ld		de,(l2deltaX)				;
 730+ E6DD              ;;	or		a							; clear carry flag
 731+ E6DD              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DD              ;;	pop		de
 733+ E6DD              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DD              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DD              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DD              ;;.dodxcalc:
 737+ E6DD              ;;	ld		hl,(l2fraction)
 738+ E6DD              ;;	push	de
 739+ E6DD              ;;	ld		de,(l2deltaX)
 740+ E6DD              ;;	add		hl,de
 741+ E6DD              ;;	ld		(l2fraction),de
 742+ E6DD              ;;	pop		de
 743+ E6DD              ;;.l2xadjust:
 744+ E6DD              ;;	nop
 745+ E6DD              ;;.skipdxcalc:
 746+ E6DD              ;;	jr 		.mainloop
 747+ E6DD
 748+ E6DD
 749+ E6DD              ;;/l2_draw_diagonalold:
 750+ E6DD              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DD              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DD              ;;/.sortycoords:
 753+ E6DD              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DD              ;;/	cp		d
 755+ E6DD              ;;/	jr		nc, .nocoordswap
 756+ E6DD              ;;/.swapcoords:
 757+ E6DD              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DD              ;;/	lddebc
 759+ E6DD              ;;/	ldbchl
 760+ E6DD              ;;/.nocoordswap:
 761+ E6DD              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DD              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DD              ;;/	ld		(l2deltaY),a
 764+ E6DD              ;;/	neg									; DEBUG
 765+ E6DD              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DD              ;;/	neg									; DEBUG
 767+ E6DD              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DD              ;;/    ld		a,c
 769+ E6DD              ;;/	cp		e
 770+ E6DD              ;;/	jr		c, .x1GTx0
 771+ E6DD              ;;/.x1LTx0
 772+ E6DD              ;;/	ld		a,c
 773+ E6DD              ;;/	sub		e
 774+ E6DD              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DD              ;;/	neg									; DEBUG
 776+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DD              ;;/	neg									; DEBUG
 778+ E6DD              ;;/	ld		a,l2incbstep
 779+ E6DD              ;;/	jr		.setlayershift0
 780+ E6DD              ;;/.x1GTx0:
 781+ E6DD              ;;/	ld		a,e
 782+ E6DD              ;;/	sub		c
 783+ E6DD              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DD              ;;/	neg									; DEBUG
 785+ E6DD              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DD              ;;/	neg									; DEBUG
 787+ E6DD              ;;/	ld		a,l2decbstep
 788+ E6DD              ;;/.setlayershift0:
 789+ E6DD              ;;/	ld		a,0
 790+ E6DD              ;;/	pushbcde
 791+ E6DD              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DD              ;;/	popdebc
 793+ E6DD              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DD              ;;/.dymuliplyby2:
 795+ E6DD              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DD              ;;/	call	l2_signed_mul2a
 797+ E6DD              ;;/	ld		(l2deltaYsq),a
 798+ E6DD              ;;/	neg									; DEBUG
 799+ E6DD              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DD              ;;/	neg									; DEBUG
 801+ E6DD              ;;/.dxmuliplyby2:
 802+ E6DD              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DD              ;;/	call	l2_signed_mul2a
 804+ E6DD              ;;/	ld		(l2deltaXsq),a
 805+ E6DD              ;;/	neg									; DEBUG
 806+ E6DD              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DD              ;;/	neg									; DEBUG
 808+ E6DD              ;;/.plotfirstpixel:
 809+ E6DD              ;;/	pushbcde
 810+ E6DD              ;;/	ld a,(l2linecolor)
 811+ E6DD              ;;/	call	l2_plot_pixel
 812+ E6DD              ;;/	popdebc
 813+ E6DD              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DD              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DD              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DD              ;;/	cp		(hl)
 817+ E6DD              ;;/	jp		m,	.signset
 818+ E6DD              ;;/.signclear:
 819+ E6DD              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DD              ;;/	jr		.dxGTdybranch
 821+ E6DD              ;;/.signset:
 822+ E6DD              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DD              ;;/.dxGTdybranch:
 824+ E6DD              ;;/	ld		a,(l2deltaYsq)
 825+ E6DD              ;;/	ld		hl,l2deltaX
 826+ E6DD              ;;/	sub		(hl)
 827+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DD              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DD              ;;/	ld		a,c
 830+ E6DD              ;;/	cp		e
 831+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DD              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DD              ;;/	ld		a,(l2fraction)
 834+ E6DD              ;;/	TEST	$80
 835+ E6DD              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DD              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DD              ;;/	ld		hl,l2deltaXsq
 838+ E6DD              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DD              ;;/	ld		(l2fraction),a
 840+ E6DD              ;;/.BranchAskipYstep:
 841+ E6DD              ;;/.l2stepx1:
 842+ E6DD              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DD              ;;/	ld		hl,l2deltaYsq
 845+ E6DD              ;;/	add		a,(hl)
 846+ E6DD              ;;/	ld		(l2fraction),a
 847+ E6DD              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DD              ;;/	pushbcde
 849+ E6DD              ;;/	ld a,(l2linecolor)
 850+ E6DD              ;;/	call	l2_plot_pixel
 851+ E6DD              ;;/	popdebc
 852+ E6DD              ;;/.BranchAloop:
 853+ E6DD              ;;/	jr		.BranchAwhile
 854+ E6DD              ;;/.dxLTEdybranch:
 855+ E6DD              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DD              ;;/	ld		hl, l2deltaY
 857+ E6DD              ;;/	sub		(hl)
 858+ E6DD              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DD              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DD              ;;/	ld		a,b
 861+ E6DD              ;;/	cp		d
 862+ E6DD              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DD              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DD              ;;/	ld		a,(l2fraction)
 865+ E6DD              ;;/	TEST	$80
 866+ E6DD              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DD              ;;/.l2stepx2
 868+ E6DD              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DD              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DD              ;;/	ld		hl,l2deltaYsq
 871+ E6DD              ;;/	sub		(hl)
 872+ E6DD              ;;/	ld		(l2fraction),a
 873+ E6DD              ;;/.BranchBskipYstep:
 874+ E6DD              ;;/	ld		hl, l2deltaYsq
 875+ E6DD              ;;/	add		a,(hl)
 876+ E6DD              ;;/	ld		(l2fraction),a
 877+ E6DD              ;;/	inc		b							; ++l2_vy0;
 878+ E6DD              ;;/.BranchBplotBCColA:
 879+ E6DD              ;;/	pushbcde
 880+ E6DD              ;;/	ld a,(l2linecolor)
 881+ E6DD              ;;/	call	l2_plot_pixel
 882+ E6DD              ;;/	popdebc
 883+ E6DD              ;;/.BranchBloop:
 884+ E6DD              ;;/	jr		.BranchBwhile
 885+ E6DD
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 950  E6DD                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DD
   2+ E6DD
   3+ E6DD
   4+ E6DD 00 00        l2trianglebc	        DW 0
   5+ E6DF 00 00        l2trianglede	        DW 0
   6+ E6E1 00 00        l2trianglehl	        DW 0
   7+ E6E3
   8+ E6E3              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E3 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E7 CD 0B E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EA F1                                   pop		af
  12+ E6EB D1                                   pop		de						; swap DE and HL
  13+ E6EC E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6ED C1                                   pop		bc
  15+ E6EE D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F0 F5                                   push	af
  17+ E6F1 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F4 F1                                   pop		af
  19+ E6F5 C1                                   pop		bc						; Now bc = original de
  20+ E6F6 D1                                   pop		de						; de = original hl
  21+ E6F7 CD 0B E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FA C9                                   ret
  23+ E6FB
  24+ E6FB
  25+ E6FB
  26+ E6FB
  27+ E6FB
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 951  E6FB                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FB              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FB              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FB              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FB DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FD 7D                                   ld		a,l
   6+ E6FE 32 24 E3                             ld		(l2linecolor),a
   7+ E701 79                                   ld		a,c
   8+ E702 BB                                   cp		e
   9+ E703 30 08                                jr		nc, .x2gtex1
  10+ E705 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E708 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70B 18 06                                jr		.storepoints
  13+ E70D DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E710 DD 2E 01                             ld		ixl,1
  15+ E713 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E716 DD 7C                                ld		a,ixh
  17+ E718 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E719 54                                   ld		d,h
  19+ E71A CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71D E1 D1 C1                             pop		bc,,de,,hl
  21+ E720 C5 E5                                push	bc,,hl
  22+ E722 54                                   ld		d,h                             ; now its bc -> he
  23+ E723 DD 7D                                ld		a,ixl
  24+ E725 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E728 E1 C1                                pop		bc,,hl
  26+ E72A 50           .SaveForLoop:           ld		d,b
  27+ E72B 5C                                   ld		e,h								; save loop counters
  28+ E72C D5                                   push	de								; de = y0ycommon
  29+ E72D 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E730 78                                   ld		a,b
  31+ E731 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E733 7E                                   ld		a,(hl)							;
  33+ E734 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E735 21 2C E4                             ld      hl,l2targetArray2
  35+ E738 78                                   ld      a,b
  36+ E739 ED 31                                add     hl,a
  37+ E73B              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73B 7E                                   ld		a,(hl)
  39+ E73C 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73D 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E740 5F                                   ld		e,a								; de = to colour
  42+ E741 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E742 25                                   dec		h
  44+ E743 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E744 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E747 E1                                   pop		hl
  47+ E748 C1                                   pop		bc
  48+ E749 04                                   inc		b								; down a rowc
  49+ E74A D1                                   pop		de								; de = from to (and b also = current)
  50+ E74B 14                                   inc		d
  51+ E74C 7B                                   ld		a,e								; while e >= d
  52+ E74D BA                                   cp		d
  53+ E74E 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E750 C9                                   ret
  55+ E751
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 952  E751                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E751
   2+ E751 00 00        l2_circle_pos		DW 0
   3+ E753 00           l2_circle_colour	DB 0
   4+ E754 00           l2_circle_radius	DB 0
   5+ E755 00           l2_circle_x			DB 0
   6+ E756 00           l2_circle_y			DB 0
   7+ E757 00           l2_circle_d			DB 0
   8+ E758
   9+ E758              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E758 7B           l2_draw_circle:     ld		a,e
  11+ E759 32 FF E7                         ld		(.PlotPixel+1),a
  12+ E75C 7A                               ld		a,d								; get radius
  13+ E75D A7                               and		a
  14+ E75E C8                               ret		z
  15+ E75F FE 01                            cp		1
  16+ E761 CA 0B E8                         jp		z,CircleSinglepixel
  17+ E764 ED 43 8E E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E768 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76A DD 2E 00                         ld		ixl,0
  20+ E76D 26 00        .calcd:	            ld		h,0
  21+ E76F 6F                               ld		l,a
  22+ E770 29                               add		hl,hl							; hl = r * 2
  23+ E771 EB                               ex		de,hl							; de = r * 2
  24+ E772 21 03 00                         ld		hl,3
  25+ E775 A7                               and		a
  26+ E776 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E778 44                               ld		b,h
  28+ E779 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77A 21 01 00     .calcdelta:         ld		hl,1
  30+ E77D 16 00                            ld		d,0
  31+ E77F DD 5D                            ld		e,ixl
  32+ E781 A7                               and		a
  33+ E782 ED 52                            sbc		hl,de
  34+ E784 11 01 00     .Setde1:            ld		de,1
  35+ E787 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E789 DD BD                            cp		ixl
  37+ E78B D8                               ret		c
  38+ E78C D9           .ProcessLoop:	    exx
  39+ E78D 11 00 00     .Plot1:             ld		de,0
  40+ E790 7B                               ld		a,e
  41+ E791 DD 85                            add		a,ixl
  42+ E793 4F                               ld		c,a
  43+ E794 7A                               ld		a,d
  44+ E795 DD 84                            add		a,ixh
  45+ E797 47                               ld		b,a
  46+ E798 CD FE E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79B 7B           .Plot2:             ld 		a,e
  48+ E79C DD 95                            sub 	ixl
  49+ E79E 4F                               ld 		c,a
  50+ E79F 7A                               ld 		a,d
  51+ E7A0 DD 84                            add 	a,ixh
  52+ E7A2 47                               ld		b,a
  53+ E7A3 CD FE E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A6 7B           .Plot3:             ld 		a,e
  55+ E7A7 DD 85                            add		a,ixl
  56+ E7A9 4F                               ld 		c,a
  57+ E7AA 7A                               ld 		a,d
  58+ E7AB DD 94                            sub 	ixh
  59+ E7AD 47                               ld 		b,a
  60+ E7AE CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B1 7B           .Plot4:             ld 		a,e
  62+ E7B2 DD 95                            sub 	ixl
  63+ E7B4 4F                               ld 		c,a
  64+ E7B5 7A                               ld 		a,d
  65+ E7B6 DD 94                            sub 	ixh
  66+ E7B8 47                               ld 		b,a
  67+ E7B9 CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BC 7A           .Plot5:	            ld 		a,d
  69+ E7BD DD 85                            add 	a,ixl
  70+ E7BF 47                               ld 		b,a
  71+ E7C0 7B                               ld 		a,e
  72+ E7C1 DD 84                            add 	a,ixh
  73+ E7C3 4F                               ld 		c,a
  74+ E7C4 CD FE E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C7 7A           .Plot6:	            ld 		a,d
  76+ E7C8 DD 95                            sub 	ixl
  77+ E7CA 47                               ld 		b,a
  78+ E7CB 7B                               ld 		a,e
  79+ E7CC DD 84                            add 	a,ixh
  80+ E7CE 4F                               ld 		c,a
  81+ E7CF CD FE E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D2 7A           .Plot7:	            ld 		a,d
  83+ E7D3 DD 85                            add 	a,ixl
  84+ E7D5 47                               ld 		b,a
  85+ E7D6 7B                               ld 		a,e
  86+ E7D7 DD 94                            sub 	ixh
  87+ E7D9 4F                               ld 		c,a
  88+ E7DA CD FE E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DD 7A           .Plot8:	            ld 		a,d
  90+ E7DE DD 95                            sub 	ixl
  91+ E7E0 47                               ld		b,a
  92+ E7E1 7B                               ld 		a,e
  93+ E7E2 DD 94                            sub 	ixh
  94+ E7E4 4F                               ld 		c,a
  95+ E7E5 CD FE E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E8 D9                               exx
  97+ E7E9 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7EB 28 03                            jr z,   .draw_circle_1
  99+ E7ED 19                               add hl,de			; Delta=Delta+D1
 100+ E7EE 18 05                            jr      .draw_circle_2		;
 101+ E7F0 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F1 03                               inc     bc
 103+ E7F2 03                               inc     bc				; D2=D2+2
 104+ E7F3 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F5 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F6 03                               inc bc
 107+ E7F7 13                               inc de				; D1=D1+2
 108+ E7F8 13                               inc de
 109+ E7F9 DD 2C                            inc ixl				; X=X+1
 110+ E7FB C3 87 E7                         jp      .CircleLoop
 111+ E7FE 3A 53 E7     .PlotPixel:         ld		a,(l2_circle_colour)
 112+ E801 D5 C5 E5                         push	de,,bc,,hl
 113+ E804 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E807 E1 C1 D1                         pop		de,,bc,,hl
 115+ E80A C9                               ret
 116+ E80B 7B           CircleSinglepixel:  ld		a,e
 117+ E80C CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80F C9                               ret
 119+ E810
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 953  E810                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E810
   2+ E810 00           l2_circle_dblx		DB 0
   3+ E811 00           l2_circle_dbly		DB 0
   4+ E812
   5+ E812              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E812 7B           l2_draw_circle_fill:    ld		a,e
   7+ E813 32 A9 E8                             ld		(.LineColour+1),a
   8+ E816 7A                                   ld		a,d								; get radius
   9+ E817 A7                                   and		a
  10+ E818 C8                                   ret		z
  11+ E819 FE 01                                cp		1
  12+ E81B CA 0B E8                             jp		z,CircleSinglepixel
  13+ E81E ED 43 48 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E822 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E824 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E827 26 00        .calcd:	                ld		h,0
  17+ E829 6F                                   ld		l,a
  18+ E82A 29                                   add		hl,hl							; hl = r * 2
  19+ E82B EB                                   ex		de,hl							; de = r * 2
  20+ E82C 21 03 00                             ld		hl,3
  21+ E82F A7                                   and		a
  22+ E830 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E832 44                                   ld		b,h
  24+ E833 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E834 21 01 00     .calcdelta              ld		hl,1
  26+ E837 16 00                                ld		d,0
  27+ E839 DD 5D                                ld		e,ixl
  28+ E83B A7                                   and		a
  29+ E83C ED 52                                sbc		hl,de
  30+ E83E 11 01 00     .Setde1	                ld		de,1
  31+ E841 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E843 DD BD                                cp		ixl
  33+ E845 D8                                   ret		c
  34+ E846 D9           .ProcessLoop:	        exx
  35+ E847 11 00 00     .Line1:                 ld		de,0
  36+ E84A 7B                                   ld 		a,e
  37+ E84B DD 95                                sub 	ixl
  38+ E84D 4F                                   ld 		c,a
  39+ E84E 7A                                   ld 		a,d
  40+ E84F DD 84                                add 	a,ixh
  41+ E851 47                                   ld		b,a
  42+ E852                                      ;; TODO ADD DOUBLE X CALC
  43+ E852 D5                                   push	de
  44+ E853 DD 55                                ld		d,ixl
  45+ E855 CB 22                                sla		d
  46+ E857 CD A4 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E85A D1                                   pop		de
  48+ E85B 7B           .Line2:                 ld 		a,e
  49+ E85C DD 95                                sub		ixl
  50+ E85E 4F                                   ld 		c,a
  51+ E85F 7A                                   ld 		a,d
  52+ E860 DD 94                                sub 	ixh
  53+ E862 47                                   ld 		b,a
  54+ E863                                      ;; TODO ADD DOUBLE X CALC
  55+ E863 D5                                   push	de
  56+ E864 DD 55                                ld		d,ixl
  57+ E866 CB 22                                sla		d
  58+ E868 CD A4 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86B D1                                   pop		de
  60+ E86C 7B           .Line3:	                ld 		a,e
  61+ E86D DD 94                                sub		ixh
  62+ E86F 4F                                   ld 		c,a
  63+ E870 7A                                   ld 		a,d
  64+ E871 DD 85                                add 	a,ixl
  65+ E873 47                                   ld 		b,a
  66+ E874                                      ;; TODO ADD DOUBLE Y CALC
  67+ E874 D5                                   push	de
  68+ E875 DD 54                                ld		d,ixh
  69+ E877 CB 22                                sla		d
  70+ E879 CD A4 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87C D1                                   pop		de
  72+ E87D 7B           .Line4:	                ld 		a,e
  73+ E87E DD 94                                sub		ixh
  74+ E880 4F                                   ld 		c,a
  75+ E881 7A                                   ld 		a,d
  76+ E882 DD 95                                sub 	ixl
  77+ E884 47                                   ld 		b,a
  78+ E885                                      ;; TODO ADD DOUBLE Y CALC
  79+ E885 D5                                   push	de
  80+ E886 DD 54                                ld		d,ixh
  81+ E888 CB 22                                sla		d
  82+ E88A CD A4 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88D D1                                   pop		de
  84+ E88E D9                                   exx
  85+ E88F CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E891 28 03                                jr z,.draw_circle_1
  87+ E893 19                                   add hl,de			; Delta=Delta+D1
  88+ E894 18 05                                jr .draw_circle_2		;
  89+ E896 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E897 03                                   inc bc
  91+ E898 03                                   inc bc				; D2=D2+2
  92+ E899 DD 25                                dec ixh				; Y=Y-1
  93+ E89B 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89C 03                                   inc bc
  95+ E89D 13                                   inc de				; D1=D1+2
  96+ E89E 13                                   inc de
  97+ E89F DD 2C                                inc ixl				; X=X+1
  98+ E8A1 C3 41 E8                             jp .CircleLoop
  99+ E8A4 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8A8 3A 53 E7     .LineColour:	        ld		a,(l2_circle_colour)
 101+ E8AB 5F                                   ld      e,a
 102+ E8AC CD 62 E2                             call 	l2_draw_horz_line
 103+ E8AF F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B3 C9                                   ret
 105+ E8B4
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 954  E8B4                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B4              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B4 08           l2_draw_any_line:       ex		af,af'
   3+ E8B5 79                                   ld		a,c
   4+ E8B6 BB                                   cp		e
   5+ E8B7 28 08                                jr		z,.HorizontalLine
   6+ E8B9 78                                   ld		a,b
   7+ E8BA BA                                   cp		d
   8+ E8BB 28 0A                                jr		z,.VerticalLine
   9+ E8BD              ; use jp and get a free ret instruction optimisation
  10+ E8BD 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8BE C3 0B E6                             jp		l2_draw_diagonal
  12+ E8C1
  13+ E8C1 08           .HorizontalLine:        ex		af,af'
  14+ E8C2 53                                   ld		d,e				; set d as target right pixel
  15+ E8C3 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C4 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C7 08           .VerticalLine:          ex		af,af'
  18+ E8C8 5F                                   ld		e,a				; e holds colour on this call
  19+ E8C9 C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CC
  21+ E8CC
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 955  E8CC                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8CC              ; ClearLines (LL155)
   2+ E8CC              ;   y = 0
   3+ E8CC              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CC              ;   exit if XX20 < 4
   5+ E8CC              ;   ++y
   6+ E8CC              ;   do
   7+ E8CC              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CC              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CC              ;		++y
  10+ E8CC              ;	until Y > XX20
  11+ E8CC
  12+ E8CC              clearLines:
  13+ E8CC              layer2_clearLines:
  14+ E8CC 3A F0 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8CF 47                                   ld		b,a
  16+ E8D0 21 FE C1                             ld		hl,UbnkLineArray
  17+ E8D3 C5           clearLinesLoop:         push	bc
  18+ E8D4 7E                                   ld		a,(hl)
  19+ E8D5 23                                   inc		hl
  20+ E8D6 4F                                   ld		c,a
  21+ E8D7 7E                                   ld		a,(hl)
  22+ E8D8 23                                   inc		hl
  23+ E8D9 47                                   ld		b,a
  24+ E8DA 7E                                   ld		a,(hl)
  25+ E8DB 23                                   inc		hl
  26+ E8DC 5F                                   ld		e,a
  27+ E8DD 7E                                   ld		a,(hl)
  28+ E8DE 23                                   inc		hl
  29+ E8DF 57                                   ld		d,a
  30+ E8E0 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E2 E5                                   push	hl
  32+ E8E3 CD B4 E8                             call    l2_draw_any_line
  33+ E8E6 E1                                   pop		hl
  34+ E8E7 C1                                   pop		bc
  35+ E8E8 10 E9                                djnz	clearLinesLoop
  36+ E8EA C9                                   ret
  37+ E8EB
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 956  E8EB                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8EB              ; ******************************************************************************
   2+ E8EB              ;
   3+ E8EB              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8EB              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8EB              ;
   6+ E8EB              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8EB              ;
   8+ E8EB              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8EB              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8EB              ;	before using line drawing.
  11+ E8EB              ;
  12+ E8EB              ;	The routine checks the range of specified coordinates which is the
  13+ E8EB              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8EB              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8EB              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8EB              ;	visible part will be drawn.
  17+ E8EB              ;
  18+ E8EB              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8EB              ;
  20+ E8EB              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8EB              ;
  22+ E8EB              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8EB              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8EB              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8EB              ;
  26+ E8EB              ;	OUT:	None.
  27+ E8EB              ;
  28+ E8EB              ;	Registers	used	by routine:
  29+ E8EB              ;		   N	:	B, loop counter
  30+ E8EB              ;		   i	:	line	balance variable
  31+ E8EB              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8EB              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8EB              ;	  (x0,y0)	:	(h,l)
  34+ E8EB              ;	  direc_x	:	d, horisontal step increment
  35+ E8EB              ;	  direc_y	:	e, vertical step increment
  36+ E8EB              ;		 ddx	:	b, horisontal step increment
  37+ E8EB              ;		 ddy	:	c, vertical step increment
  38+ E8EB              ;
  39+ E8EB              ;		DE, A work registers.
  40+ E8EB              ;
  41+ E8EB              ; The algorithm in pseudo-code:
  42+ E8EB              ;
  43+ E8EB              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8EB              ;	x = ABS x: y =	ABS y
  45+ E8EB              ;
  46+ E8EB              ;	if x	>= y
  47+ E8EB              ;		if x+y=0 then return
  48+ E8EB              ;		H = x
  49+ E8EB              ;		L = y
  50+ E8EB              ;		ddx = direc_x
  51+ E8EB              ;		ddy = 0
  52+ E8EB              ;	else
  53+ E8EB              ;		H = y
  54+ E8EB              ;		L = x
  55+ E8EB              ;		ddx = 0
  56+ E8EB              ;		ddy = direc_y
  57+ E8EB              ;	endif
  58+ E8EB              ;
  59+ E8EB              ;	B = H
  60+ E8EB              ;	i = INT(B/2)
  61+ E8EB              ;	FOR N=B TO 1 STEP -1
  62+ E8EB              ;		i = i + L
  63+ E8EB              ;		if i	< H
  64+ E8EB              ;			ix =	ddx
  65+ E8EB              ;			iy =	ddy
  66+ E8EB              ;		else
  67+ E8EB              ;			i = i - H
  68+ E8EB              ;			ix =	direc_x
  69+ E8EB              ;			iy =	direc_y
  70+ E8EB              ;		endif
  71+ E8EB              ;		x0 =	x0 +	ix
  72+ E8EB              ;		y0 =	y0 +	iy
  73+ E8EB              ;		plot	(x0,y0)
  74+ E8EB              ;	NEXT	N
  75+ E8EB              ;
  76+ E8EB              ;
  77+ E8EB              ;	Registers	changed after return:
  78+ E8EB              ;		..BCDEHL/IXIY/af......	same
  79+ E8EB              ;		AF....../..../..bcdehl	different
  80+ E8EB              ;
  81+ E8EB DF           line_gfx_colour db $DF
  82+ E8EC 00 00        line_gfx_coords	dw 0
  83+ E8EE              LineHLtoDE:
  84+ E8EE 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8EF FE C0                                cp	192
  86+ E8F1 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F3 7A                                   ld	a,d
  88+ E8F4 FE C0                                cp	192
  89+ E8F6 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8F8 22 EC E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FB E5                                   push	hl
  92+ E8FC D5                                   push	de
  93+ E8FD 6C                                   ld	l,h				; L = x0
  94+ E8FE 62                                   ld	h,d				; H = x1
  95+ E8FF 7C           distanceX:		        ld	a,h
  96+ E900 95                                   sub	l
  97+ E901 6F                                   ld	l,a
  98+ E902 26 00                                ld	h,0
  99+ E904 30 02                                jr	nc, distanceXDone
 100+ E906 26 FF                                ld	h,-1
 101+ E908 D1           distanceXDone:          pop	de
 102+ E909 E3                                   ex	(sp),hl			; L = y0
 103+ E90A 63                                   ld	h,e				; H = y1
 104+ E90B 7C           distanceY:		        ld	a,h
 105+ E90C 95                                   sub	l
 106+ E90D 6F                                   ld	l,a
 107+ E90E 26 00                                ld	h,0
 108+ E910 30 02                                jr	nc, distanceYDone
 109+ E912 26 FF                                ld	h,-1
 110+ E914 D1           distanceYDone:          pop	de
 111+ E915 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E916 CD 1A E9                             call	DrawLineRelative			; draw line...
 113+ E919 C9           exit_line:              ret
 114+ E91A
 115+ E91A              ; ***************************************************************************
 116+ E91A              ;
 117+ E91A              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91A              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91A              ;
 120+ E91A              ; OUT: h - l distance in	HL
 121+ E91A              ;
 122+ E91A
 123+ E91A D5           DrawLineRelative:       push	de
 124+ E91B E5                                   push	hl
 125+ E91C D9                                   exx
 126+ E91D E1                                   pop	hl					; get relative	horisontal movement
 127+ E91E CD 89 E9                             call	sgn
 128+ E921 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E922 CD 96 E9                             call	absValue
 130+ E925 45                                   ld	b,l					; x = ABS(x)
 131+ E926 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E927 CD 89 E9                             call	sgn
 133+ E92A 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92B CD 96 E9                             call	absValue
 135+ E92E 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E92F              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E92F C5                                   push	bc
 138+ E930 D9                                   exx
 139+ E931 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E932 7C                                   ld	a,h
 141+ E933 BD                                   cp	l
 142+ E934 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E936 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E937 28 4F                                jr	z, exit_draw		;		return
 145+ E939 D9           y_lessorequal_x:        exx						;	else
 146+ E93A 42                                   ld	b,d					;		ddx = direc_x
 147+ E93B 0E 00                                ld	c,0					;		ddy = 0
 148+ E93D D9                                   exx
 149+ E93E 18 08                                jr	init_drawloop		; else
 150+ E940 7C           x_smaller_y:	        ld	a,h
 151+ E941 65                                   ld	h,l					;	H = y
 152+ E942 6F                                   ld	l,a					;	L = x
 153+ E943 D9                                   exx
 154+ E944 06 00                                ld	b,0					;	ddx = 0
 155+ E946 4B                                   ld	c,e					;	ddy = direc_y
 156+ E947 D9                                   exx
 157+ E948 44           init_drawloop:	        ld	b,h
 158+ E949 4C                                   ld	c,h					; B = H
 159+ E94A CB 39                                srl	c					; i = INT(B/2)
 160+ E94C              										; FOR N=B	TO 1	STEP	-1
 161+ E94C 79           drawloop:		        ld	a,c
 162+ E94D 85                                   add	a,l
 163+ E94E 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E950 BC                                   cp	h
 165+ E951 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E953 4F                                   ld	c,a					;		i = i + L
 167+ E954 D9                                   exx
 168+ E955 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E956 D9                                   exx
 170+ E957 18 05                                jr	check_plot			;	else
 171+ E959 94           i_greater:		        sub	h					;		i = i - H
 172+ E95A 4F                                   ld	c,a
 173+ E95B D9                                   exx
 174+ E95C D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95D D9                                   exx						;	endif
 176+ E95E E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E95F EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E960 2A EC E8                             ld	hl,(line_gfx_coords)
 179+ E963 7D                                   ld	a,l
 180+ E964 83                                   add	a,e					;
 181+ E965 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E966 7A                                   ld	a,d
 183+ E967 3C                                   inc	a
 184+ E968 84                                   add	a,h
 185+ E969 38 04                                jr	c, check_range		;	check out	of range
 186+ E96B 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96D 18 02                                jr	plot_point
 188+ E96F 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E971
 190+ E971 3D           plot_point:             dec	a
 191+ E972 C5                                   push	bc
 192+ E973 F5                                   push	af
 193+ E974 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E975 4D                                   ld		c,l
 195+ E976 3A EB E8                             ld		a,(line_gfx_colour)
 196+ E979 ED 43 EC E8                          ld      (line_gfx_coords),bc
 197+ E97D CD FF E0                             call	l2_plot_pixel
 197+ E980
 198+ E980 F1                                   pop		af
 199+ E981 C1                                   pop		bc
 200+ E982 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E983 10 C7                                djnz	drawloop		; NEXT N
 202+ E985 18 01                                jr	exit_draw
 203+ E987
 204+ E987 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E988 C9           exit_draw:		        ret
 206+ E989
 207+ E989
 208+ E989              ; ******************************************************************************
 209+ E989              ;
 210+ E989              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E989              ;
 212+ E989              ;	IN:		HL =	integer
 213+ E989              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E989              ;
 215+ E989              ;	Registers	changed after return:
 216+ E989              ;	..BCDEHL/IXIY	same
 217+ E989              ;	AF....../....	different
 218+ E989              ;
 219+ E989 7C           sgn:				    ld	a,h
 220+ E98A B5                                   or	l
 221+ E98B C8                                   ret	z				; integer	is zero, return 0...
 222+ E98C CB 7C                                bit	7,h
 223+ E98E 20 03                                jr	nz, negative_int
 224+ E990 3E 01                                ld	a,1
 225+ E992 C9                                   ret
 226+ E993 3E FF        negative_int:		    ld	a,-1
 227+ E995 C9                                   ret
 228+ E996
 229+ E996
 230+ E996              ; ******************************************************************************
 231+ E996              ;
 232+ E996              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E996              ;
 234+ E996              ;	IN:		HL =	integer
 235+ E996              ;	OUT:		HL =	converted	integer
 236+ E996              ;
 237+ E996              ;	Registers	changed after return:
 238+ E996              ;	A.BCDE../IXIY	same
 239+ E996              ;	.F....HL/....	different
 240+ E996              ;
 241+ E996 CB 7C        absValue:			    bit	7,h
 242+ E998 C8                                   ret	z				; integer	is positive...
 243+ E999 D5                                   push	de
 244+ E99A EB                                   ex	de,hl
 245+ E99B 21 00 00                             ld	hl,0
 246+ E99E BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E99F ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A1 D1                                   pop	de
 249+ E9A2 C9                                   ret
 250+ E9A3
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 957  E9A3              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 958  E9A3                  SLOT    CMDRDATAAddr
 959  E9A3                  PAGE    BankCmdrData
 960  E9A3                  ORG     CMDRDATAAddr, BankCmdrData
 961  E000                  INCLUDE "./Commander/CommanderData.asm"
# file opened: ./Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 C5 94     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 D1 94                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 CF 94                             ld		(PresentSystemX),a
  19+ E03A 32 1C 95                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 D0 94                             ld		(PresentSystemY),a
  22+ E042 32 1D 95                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 E6 93                             ld		hl,IndexedWork
  25+ E048 CD 13 98                             call	copy_galaxy_to_system
  26+ E04B CD D3 98                             call	find_present_system
  27+ E04E CD 36 98                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 A0 97                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 A2 97                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 A4 97                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 D8 94                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 BB 97                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 C5 97                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 CE 94                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 A6 97                             ld		(LaserList+1),a
  48+ E080 32 A7 97                             ld		(LaserList+2),a
  49+ E083 32 A8 97                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 A5 97                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 BE 97                             ld		(ECMPresent),a
  54+ E08F 32 D5 97                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 C1 97                             ld		(EnergyBomb),a
  56+ E095 32 C2 97                             ld		(ExtraEnergyUnit),a
  57+ E098 32 C3 97                             ld		(DockingComputer),a
  58+ E09B 32 C4 97                             ld		(GalacticHyperDrive),a
  59+ E09E 32 C0 97                             ld		(EscapePod),a
  60+ E0A1 32 E1 94                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 F4 94                             ld		(KillTally),a
  62+ E0A7 3D                                   dec		a								; now a = 255
  63+ E0A8 32 F8 94                             ld		(ForeShield),a
  64+ E0AB 32 F9 94                             ld		(AftShield),a
  65+ E0AE 32 FA 94                             ld		(PlayerEnergy),a
  66+ E0B1 3E 14                                ld		a,20
  67+ E0B3 32 A9 97                             ld		(CargoBaySize),a
  68+ E0B6 CD BA E0                             call	ZeroCargo						; Clear out cargo
  69+ E0B9                                      ; more to DO
  70+ E0B9 C9                                   ret
  71+ E0BA
# file closed: ./Commander/CommanderData.asm
 962  E0BA                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0BA              ZeroCargo:
   2+ E0BA AF           		xor		a							;zero-out cargo, including gems.
   3+ E0BB 06 10        		ld		b,16						;all the way up to alien items
   4+ E0BD 21 AB 97     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C0              .ZeroLoop:
   6+ E0C0 77                   ld      (hl),a
   7+ E0C1 23           		inc		hl
   8+ E0C2 10 FC        		djnz	.ZeroLoop
   9+ E0C4 C9           		ret
  10+ E0C5
# file closed: ./Commander/zero_player_cargo.asm
 963  E0C5              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 964  E0C5                  SLOT    LAYER1Addr
 965  E0C5                  PAGE    BankLAYER1
 966  E0C5                  ORG     LAYER1Addr, BankLAYER1
 967  E000
 968  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 87 90                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 969  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls:                 xor		a
   2+ E048 21 00 40     l1_cls_to_a:            ld		hl,	$4000
   3+ E04B 11 00 18                             ld		de, $1800
   4+ E04E CD 87 90                             call	memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_attr_cls:            xor		a
   8+ E053 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
   9+ E056 11 00 03                             ld		de, $0300
  10+ E059 CD 87 90                             call	memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  14+ E060 ED 79                                out		(c),a
  15+ E062 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 970  E063                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E063              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E063 D5 E5        l1_print_char:          push	de,,hl
   3+ E065 ED 94                                pixelad								; hl = address of de
   4+ E067 E5                                   push	hl							; save hl for loop
   5+ E068 26 00                                ld		h,0
   6+ E06A 6F                                   ld		l,a
   7+ E06B 29                                   add		hl,hl						; * 2
   8+ E06C 29                                   add		hl,hl						; * 4
   9+ E06D 29                                   add		hl,hl						; * 8 to get byte address
  10+ E06E ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E072 EB                                   ex		de,hl						; save address into de
  12+ E073 E1                                   pop		hl							; get back hl for loop
  13+ E074 06 08                                ld		b,8							; do 8 rows
  14+ E076 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E077 13                                   inc		de							; next byte
  16+ E078 77                                   ld		(hl),a						; poke to screen
  17+ E079 ED 93                                pixeldn								; Down 1 row
  18+ E07B 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E07D E1 D1                                pop		de,,hl					    ; restore hl
  20+ E07F C9                                   ret
  21+ E080
  22+ E080              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E080              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E080              l1_print_at:
  25+ E080 7E           .PrintLoop:             ld		a,(hl)
  26+ E081 FE 00                                cp		0
  27+ E083 C8                                   ret		z
  28+ E084                                      CallIfAGTENusng " ", l1_print_char
  28+ E084 FE 20       >                        cp      " "
  28+ E086 D4 63 E0    >                        call	nc,l1_print_char
  29+ E089 23                                   inc		hl							; move 1 message character right
  30+ E08A 7B                                   ld		a,e
  31+ E08B C6 08                                add		a,8
  32+ E08D 5F                                   ld		e,a							; move 1 screen character right
  33+ E08E 18 F0                                jr		.PrintLoop
  34+ E090              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E090 C9                                   ret
  36+ E091
  37+ E091              ;l1_print_at_wrap:
  38+ E091              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E091              ;	ld      iyh,e
  40+ E091              ;.PrintLoop:
  41+ E091              ;	ld		a,(hl)
  42+ E091              ;	cp		0
  43+ E091              ;	ret		z
  44+ E091              ;.CountWordCharLen
  45+ E091              ;; Need to change to word wrap, so it will loop through string as before
  46+ E091              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E091              ;; if that is > 238 then force a premature line wrap
  48+ E091              ;
  49+ E091              ;
  50+ E091              ;    push    iy
  51+ E091              ;    call	l1_print_char
  52+ E091              ;    pop     iy
  53+ E091              ;	inc		hl							; move 1 message character right
  54+ E091              ;	ld		a,e
  55+ E091              ;    cp      238
  56+ E091              ;    jr      nc,.NextLine
  57+ E091              ;	add		a,8
  58+ E091              ;	ld		e,a							; move 1 screen character right
  59+ E091              ;	jr		.PrintLoop
  60+ E091              ;.Clearstackandfinish:
  61+ E091              ;	pop		de
  62+ E091              ;	ret
  63+ E091              ;.NextLine:
  64+ E091              ;    ld      a,(hl)
  65+ E091              ;    cp      " "
  66+ E091              ;    ld      e,iyh
  67+ E091              ;    ld      a,d
  68+ E091              ;    add     a,8
  69+ E091              ;    ld      d,a
  70+ E091              ;    jr		.PrintLoop
  71+ E091
  72+ E091              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E091 E5           L1LenWordAtHL:          push    hl
  74+ E092 D5                                   push    de
  75+ E093 7E           .CountLoop:             ld      a,(hl)
  76+ E094 FE 00                                cp      0
  77+ E096 28 0F                                jr      z,.CountDone
  78+ E098 FE 20                                cp      32
  79+ E09A 28 0B                                jr      z,.CountDone
  80+ E09C 7B                                   ld      a,e
  81+ E09D C6 08                                add     a,8
  82+ E09F 5F                                   ld      e,a
  83+ E0A0 FE EE                                cp      238
  84+ E0A2 30 07                                jr      nc,.TooLong
  85+ E0A4 23                                   inc     hl
  86+ E0A5 18 EC                                jr      .CountLoop
  87+ E0A7 D1           .CountDone:             pop     de
  88+ E0A8 E1                                   pop     hl
  89+ E0A9 AF                                   xor     a
  90+ E0AA C9                                   ret
  91+ E0AB D1           .TooLong                pop     de
  92+ E0AC E1                                   pop     hl
  93+ E0AD 3E FF                                ld      a,$FF
  94+ E0AF C9                                   ret
  95+ E0B0
  96+ E0B0 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0B1 FE 00                                cp      0
  98+ E0B3 C8                                   ret     z
  99+ E0B4 FE 20                                cp      32
 100+ E0B6 28 0F                                jr      z,.ItsASpace
 101+ E0B8 FD E5                                push    iy
 102+ E0BA CD 63 E0                             call	l1_print_char
 103+ E0BD FD E1                                pop     iy
 104+ E0BF 7B                                   ld      a,e
 105+ E0C0 C6 08                                add     a,8
 106+ E0C2 5F                                   ld      e,a
 107+ E0C3 23                                   inc     hl
 108+ E0C4 C3 B0 E0                             jp      L1PrintWordAtHL
 109+ E0C7 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E0C8 7B                                   ld      a,e
 111+ E0C9 C6 08                                add     a,8
 112+ E0CB 5F                                   ld      e,a
 113+ E0CC C9                                   ret
 114+ E0CD
 115+ E0CD
 116+ E0CD              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E0CD              ; Now has full word level wrapping
 118+ E0CD FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E0CF 7E           .PrintLoop:             ld		a,(hl)
 120+ E0D0 FE 00                                cp		0
 121+ E0D2 C8                                   ret		z
 122+ E0D3 CD 91 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E0D6 FE FF                                cp      $FF
 124+ E0D8 28 06                                jr      z,.WrapNextLine
 125+ E0DA CD B0 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E0DD              ; Need to change to word wrap, so it will loop through string as before
 127+ E0DD              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E0DD              ; if that is > 238 then force a premature line wrap
 129+ E0DD 18 F0                                jr		.PrintLoop
 130+ E0DF              .Clearstackandfinish:   ;op		de
 131+ E0DF C9                                   ret
 132+ E0E0              .WrapNextLine:
 133+ E0E0 FD 5C        .NextLine:              ld      e,iyh
 134+ E0E2 7A                                   ld      a,d
 135+ E0E3 C6 08                                add     a,8
 136+ E0E5 57                                   ld      d,a
 137+ E0E6 18 E7                                jr		.PrintLoop
 138+ E0E8
 139+ E0E8
# file closed: ./Layer1Graphics/layer1_print_at.asm
 971  E0E8              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 972  E0E8                  SLOT    ShipModelsAddr
 973  E0E8                  PAGE    BankShipModelsA
 974  E0E8              	ORG     ShipModelsAddr, BankShipModelsA
 975  E000                  DEFINE  SHIPBANKA 1
 976  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000                              DEFINE SHIPEQUATES
   3+ E000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   4+ E000              MissileLockLoOffset	    equ 1
   5+ E000              MissileLockHiOffset	    equ 2
   6+ E000              EdgeAddyOffset		    equ 3
   7+ E000              LineX4Offset		    equ 5
   8+ E000              GunVertexOffset		    equ 6
   9+ E000              ExplosionCtOffset	    equ 7
  10+ E000              VertexCtX6Offset	    equ 8
  11+ E000              EdgeCountOffset		    equ 9
  12+ E000              BountyLoOffset		    equ 10
  13+ E000              BountyHiOffset		    equ 11
  14+ E000              FaceCtX4Offset		    equ 12
  15+ E000              DotOffset			    equ 13
  16+ E000              EnergyOffset		    equ 14
  17+ E000              SpeedOffset			    equ 15
  18+ E000              FaceAddyOffset		    equ 16
  19+ E000              QOffset				    equ 18
  20+ E000              LaserOffset			    equ 19
  21+ E000              VerticiesAddyOffset     equ 20
  22+ E000              ShipTypeOffset          equ 22
  23+ E000              ShipNewBitsOffset       equ 23
  24+ E000              ShipDataLength          equ ShipNewBitsOffset+1
  25+ E000
  26+ E000              CobraTablePointer       equ 43
  27+ E000              ;29 faulty
  28+ E000              BankThreshold           equ 16
  29+ E000
  30+ E000              ShipTableALast          equ 23
  31+ E000              ShipTableBLast          equ 39
  32+ E000              ShipTableCLast          equ 55
  33+ E000                             ENDIF
  34+ E000
  35+ E000
  36+ E000
  37+ E000
  38+ E000
  39+ E000              ; For ship number A fetch the adjusted ship number in B and bank number in A for the respective ship based on the ship table
  40+ E000                                      IFDEF SHIPBANKA
  41+ E000              GetShipModelAddress:
  42+ E000 4F           GetShipModelAddressA:   ld      c,a
  43+ E001 21 A6 E0                             ld      hl,ShipModelBankA                   ; Ship Model BankA, B and C are all the same value
  44+ E004                                      ENDIF
  45+ E004                                      IFDEF SHIPBANKB
  46+ E004 ~            GetShipModelAddressB:   ld      c,a
  47+ E004 ~                                    ld      hl,ShipModelBankB
  48+ E004                                      ENDIF
  49+ E004                                      IFDEF SHIPBANKC
  50+ E004 ~            GetShipModelAddressC:   ld      c,a
  51+ E004 ~                                    ld      hl,ShipModelBankC
  52+ E004                                      ENDIF
  53+ E004                                      JumpIfALTNusng ShipTableALast+1, .ShipBankA
  53+ E004 FE 18       >                        cp      ShipTableALast+1
  53+ E006 DA 15 E0    >                        jp		c,.ShipBankA
  54+ E009                                      JumpIfALTNusng ShipTableBLast+1, .ShipBankB
  54+ E009 FE 28       >                        cp      ShipTableBLast+1
  54+ E00B DA 19 E0    >                        jp		c,.ShipBankB
  55+ E00E                                      JumpIfALTNusng ShipTableCLast+1, .ShipBankC
  55+ E00E FE 38       >                        cp      ShipTableCLast+1
  55+ E010 DA 1E E0    >                        jp		c,.ShipBankC
  56+ E013              .Failed:                SetCarryFlag                                ; if its over current bank max then a failure
  56+ E013 37          >                        scf
  57+ E014 C9                                   ret
  58+ E015 47           .ShipBankA:             ld      b,a
  59+ E016 C3 20 E0                             jp      .Done
  60+ E019 D6 18        .ShipBankB:             sub     a,ShipTableALast+1
  61+ E01B C3 20 E0                             jp      .Done
  62+ E01E D6 28        .ShipBankC:             sub     a,ShipTableBLast+1
  63+ E020 3E 3B        .Done:                  ld      a,BankShipModelsA
  64+ E022                                      ClearCarryFlag
  64+ E022 B7          >                        or a
  65+ E023 C9                                   ret
  66+ E024
  67+ E024              ;GINF:
  68+ E024                                      IFDEF SHIPBANKA
  69+ E024              GetInfo:                                    ; gets pointer to ship data for ship type in a
  70+ E024              GetInfoA:                                   ; gets pointer to ship data for ship type in a
  71+ E024                                      ENDIF
  72+ E024                                      IFDEF SHIPBANKB
  73+ E024 ~            GetInfoB:
  74+ E024                                      ENDIF
  75+ E024                                      IFDEF SHIPBANKC
  76+ E024 ~            GetInfoC:
  77+ E024                                      ENDIF
  78+ E024 4F                                   ld          c,a
  79+ E025 CB 2F                                sra         a
  80+ E027 CB 2F                                sra         a
  81+ E029 CB 2F                                sra         a
  82+ E02B CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  83+ E02D 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  84+ E02E 21 A6 E0                             ld          hl,ShipModelBankA
  85+ E031 ED 31                                add         hl,a
  86+ E033 7E                                   ld          a,(hl)
  87+ E034                                      MMUSelectShipModelA
  87+ E034 ED 92 57    >					 nextreg ShipModelMMU,	    a
  88+ E037 79                                   ld          a,c
  89+ E038 50                                   ld          d,b
  90+ E039 1E 10                                ld          e,16
  91+ E03B ED 30                                mul
  92+ E03D 93                                   sub         a,e
  93+ E03E 21 A9 E0                             ld          hl,ShipModelTable
  94+ E041 ED 31                                add         hl,a
  95+ E043 ED 31                                add         hl,a
  96+ E045 5E                                   ld          e,(hl)
  97+ E046 23                                   inc         hl
  98+ E047 56                                   ld          d,(hl)
  99+ E048 C9                                   ret
 100+ E049
 101+ E049
 102+ E049              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
 103+ E049                                      IFDEF SHIPBANKA
 104+ E049              CopyVerticesDataToUBnk:
 105+ E049              CopyVerticesDataToUBnkA:
 106+ E049                                      ENDIF
 107+ E049                                      IFDEF SHIPBANKB
 108+ E049 ~            CopyVerticesDataToUBnkB:
 109+ E049                                      ENDIF
 110+ E049                                      IFDEF SHIPBANKC
 111+ E049 ~            CopyVerticesDataToUBnkC:
 112+ E049                                      ENDIF
 113+ E049 2A 12 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 114+ E04C 11 16 C3                             ld          de,UBnkHullVerticies
 115+ E04F 06 00                                ld          b,0
 116+ E051 3A 06 C3                             ld			a,(VertexCtX6Addr)
 117+ E054 4F                                   ld          c,a
 118+ E055 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 119+ E056 CD AD 90                             call        memcopy_dma
 120+ E059 C9                                   ret
 121+ E05A
 122+ E05A                                      IFDEF SHIPBANKA
 123+ E05A              CopyEdgeDataToUBnk:
 124+ E05A              CopyEdgeDataToUBnkA:
 125+ E05A                                      ENDIF
 126+ E05A                                      IFDEF SHIPBANKB
 127+ E05A ~            CopyEdgeDataToUBnkB:
 128+ E05A                                      ENDIF
 129+ E05A                                      IFDEF SHIPBANKC
 130+ E05A ~            CopyEdgeDataToUBnkC:
 131+ E05A                                      ENDIF
 132+ E05A 2A 01 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 133+ E05D 11 42 C4                             ld          de,UBnkHullEdges
 134+ E060 06 00                                ld          b,0
 135+ E062 3A 03 C3                             ld			a,(LineX4Addr)
 136+ E065 4F                                   ld          c,a
 137+ E066 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 138+ E067 CD AD 90                             call        memcopy_dma
 139+ E06A C9                                   ret
 140+ E06B
 141+ E06B                                      IFDEF SHIPBANKA
 142+ E06B              CopyNormalDataToUBnk:
 143+ E06B              CopyNormalDataToUBnkA:
 144+ E06B                                      ENDIF
 145+ E06B                                      IFDEF SHIPBANKB
 146+ E06B ~            CopyNormalDataToUBnkB:
 147+ E06B                                      ENDIF
 148+ E06B                                      IFDEF SHIPBANKC
 149+ E06B ~            CopyNormalDataToUBnkC:
 150+ E06B                                      ENDIF
 151+ E06B 2A 0E C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 152+ E06E 11 F2 C8                             ld          de,UBnkHullNormals
 153+ E071 06 00                                ld          b,0
 154+ E073 3A 0A C3                             ld          a,(FaceCtX4Addr)
 155+ E076 4F                                   ld          c,a
 156+ E077 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 157+ E078 CD AD 90                             call        memcopy_dma
 158+ E07B C9                                   ret
 159+ E07C
 160+ E07C
 161+ E07C                                      IFDEF SHIPBANKA
 162+ E07C              CopyShipDataToUBnk:
 163+ E07C F5           CopyShipDataToUBnkA:    push        af
 164+ E07D 3E 3B                                ld          a,BankShipModelsA
 165+ E07F                                      ENDIF
 166+ E07F                                      IFDEF SHIPBANKB
 167+ E07F ~            CopyShipDataToUBnkB:    push        af
 168+ E07F ~                                    ld          a,BankShipModelsB
 169+ E07F                                      ENDIF
 170+ E07F                                      IFDEF SHIPBANKC
 171+ E07F ~            CopyShipDataToUBnkC:    push        af
 172+ E07F ~                                    ld          a,BankShipModelsC
 173+ E07F                                      ENDIF
 174+ E07F 32 FC C2                             ld          (UBnkShipModelBank),a
 175+ E082 F1                                   pop         af                              ; save the current ship number and bank in case we need it later, say for a space station
 176+ E083 32 FD C2                             ld			(UBnkShipModelNbr),a			; mark ship type in bank
 177+ E086
 178+ E086 21 39 E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 179+ E089 ED 31                                add         hl,a
 180+ E08B ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 181+ E08D 4E                                   ld          c,(hl)
 182+ E08E 23                                   inc         hl
 183+ E08F 46                                   ld          b,(hl)                      ; bc now equals length of data set
 184+ E090 CD 24 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 185+ E093 EB                                   ex          de,hl                       ; hl = address of Ship Data
 186+ E094 11 FE C2                             ld          de,UBnkHullCopy             ; Universe bank
 187+ E097 01 18 00                             ld          bc,ShipDataLength
 188+ E09A ED B0                                ldir
 189+ E09C CD 49 E0                             call        CopyVerticesDataToUBnk
 190+ E09F CD 5A E0                             call        CopyEdgeDataToUBnk
 191+ E0A2 CD 6B E0                             call        CopyNormalDataToUBnk
 192+ E0A5 C9                                   ret
 193+ E0A6
 194+ E0A6              ; change to there are two banks
 195+ E0A6              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 196+ E0A6              ;
 197+ E0A6
 198+ E0A6
 199+ E0A6
 200+ E0A6
 201+ E0A6              ; Ships in Bank A
 202+ E0A6                                       IFDEF SHIPBANKA
 203+ E0A6 3B           ShipModelBankA           DB BankShipModelsA
 204+ E0A7 43                                    DB BankShipModelsB
 205+ E0A8 44                                    DB BankShipModelsC
 206+ E0A9                                       ENDIF
 207+ E0A9                                       IFDEF SHIPBANKB
 208+ E0A9 ~            ShipModelBankB           DB BankShipModelsA
 209+ E0A9 ~                                     DB BankShipModelsB
 210+ E0A9 ~                                     DB BankShipModelsC
 211+ E0A9                                       ENDIF
 212+ E0A9                                       IFDEF SHIPBANKC
 213+ E0A9 ~            ShipModelBankC           DB BankShipModelsA
 214+ E0A9 ~                                     DB BankShipModelsB
 215+ E0A9 ~                                     DB BankShipModelsC
 216+ E0A9                                       ENDIF
 217+ E0A9                                       IFDEF SHIPBANKA
 218+ E0A9 59 E1        ShipModelTableA:         DW Adder                                   ;00
 219+ E0AB 8D E2                                 DW Anaconda                                ;01
 220+ E0AD 93 E3                                 DW Asp_Mk_2                                ;02
 221+ E0AF BD E4                                 DW Asteroid                                ;03
 222+ E0B1 97 E5                                 DW Boa                                     ;04
 223+ E0B3 8D E6                                 DW Boulder                                 ;05
 224+ E0B5 33 E7                                 DW Bushmaster                              ;06
 225+ E0B7 03 E8                                 DW CargoType5                              ;07
 226+ E0B9 AF E8                                 DW Chameleon                               ;08
 227+ E0BB DB E9                                 DW CobraMk3                                ;09
 228+ E0BD 67 EB                                 DW Cobra_Mk_1                              ;10
 229+ E0BF 31 EC                                 DW Cobra_Mk_3_P                            ;11
 230+ E0C1 BD ED                                 DW Constrictor                             ;12
 231+ E0C3 C3 EE                                 DW Coriolis                                ;13
 232+ E0C5 E3 EF                                 DW Cougar                                  ;14
 233+ E0C7 E9 F0                                 DW Dodo                                    ;15
 234+ E0C9 49 E1                                 DW Dragon                                  ;16
 235+ E0CB 23 E2                                 DW Escape_Pod                              ;17
 236+ E0CD 7B E2                                 DW Fer_De_Lance                            ;18
 237+ E0CF 99 E3                                 DW Gecko                                   ;19
 238+ E0D1 61 E4                                 DW Ghavial                                 ;20
 239+ E0D3 49 E5                                 DW Iguana                                  ;21
 240+ E0D5 3F E6                                 DW Krait                                   ;22
 241+ E0D7 29 E7                                 DW Logo                                    ;23
 242+ E0D9 71 E1        ShipVertexTableA:        DW AdderVertices
 243+ E0DB A5 E2                                 DW AnacondaVertices
 244+ E0DD AB E3                                 DW Asp_Mk_2Vertices
 245+ E0DF D5 E4                                 DW AsteroidVertices
 246+ E0E1 AF E5                                 DW BoaVertices
 247+ E0E3 A5 E6                                 DW BoulderVertices
 248+ E0E5 4B E7                                 DW BushmasterVertices
 249+ E0E7 1B E8                                 DW CargoType5Vertices
 250+ E0E9 C7 E8                                 DW ChameleonVertices
 251+ E0EB F3 E9                                 DW CobraMk3Vertices
 252+ E0ED 7F EB                                 DW Cobra_Mk_1Vertices
 253+ E0EF 49 EC                                 DW Cobra_Mk_3_PVertices
 254+ E0F1 D5 ED                                 DW ConstrictorVertices
 255+ E0F3 DB EE                                 DW CoriolisVertices
 256+ E0F5 FB EF                                 DW CougarVertices
 257+ E0F7 01 F1                                 DW DodoVertices
 258+ E0F9 DD E1        ShipEdgeTableA:          DW AdderEdges
 259+ E0FB FF E2                                 DW AnacondaEdges
 260+ E0FD 1D E4                                 DW Asp_Mk_2Edges
 261+ E0FF 0B E5                                 DW AsteroidEdges
 262+ E101 FD E5                                 DW BoaEdges
 263+ E103 CF E6                                 DW BoulderEdges
 264+ E105 93 E7                                 DW BushmasterEdges
 265+ E107 57 E8                                 DW CargoType5Edges
 266+ E109 33 E9                                 DW ChameleonEdges
 267+ E10B 9B EA                                 DW CobraMk3Edges
 268+ E10D C1 EB                                 DW Cobra_Mk_1Edges
 269+ E10F F1 EC                                 DW Cobra_Mk_3_PEdges
 270+ E111 3B EE                                 DW ConstrictorEdges
 271+ E113 3B EF                                 DW CoriolisEdges
 272+ E115 6D F0                                 DW CougarEdges
 273+ E117 91 F1                                 DW DodoEdges
 274+ E119 51 E2        ShipNormalTableA:        DW AdderNormals
 275+ E11B 63 E3                                 DW AnacondaNormals
 276+ E11D 8D E4                                 DW Asp_Mk_2Normals
 277+ E11F 5F E5                                 DW AsteroidNormals
 278+ E121 5D E6                                 DW BoaNormals
 279+ E123 0B E7                                 DW BoulderNormals
 280+ E125 DF E7                                 DW BushmasterNormals
 281+ E127 93 E8                                 DW CargoType5Normals
 282+ E129 A7 E9                                 DW ChameleonNormals
 283+ E12B 33 EB                                 DW CobraMk3Normals
 284+ E12D 09 EC                                 DW Cobra_Mk_1Normals
 285+ E12F 89 ED                                 DW Cobra_Mk_3_PNormals
 286+ E131 9B EE                                 DW ConstrictorNormals
 287+ E133 AB EF                                 DW CoriolisNormals
 288+ E135 D1 F0                                 DW CougarNormals
 289+ E137 19 F2                                 DW DodoNormals
 290+ E139 34 01        ShipModelSizeTableA:     DW AdderLen
 291+ E13B 06 01                                 DW AnacondaLen
 292+ E13D 2A 01                                 DW Asp_Mk_2Len
 293+ E13F DA 00                                 DW AsteroidLen
 294+ E141 F6 00                                 DW BoaLen
 295+ E143 A6 00                                 DW BoulderLen
 296+ E145 D0 00                                 DW BushmasterLen
 297+ E147 AC 00                                 DW CargoType5Len
 298+ E149 2C 01                                 DW ChameleonLen
 299+ E14B 8C 01                                 DW CobraMk3Len
 300+ E14D CA 00                                 DW Cobra_Mk_1Len
 301+ E14F 8C 01                                 DW Cobra_Mk_3_PLen
 302+ E151 06 01                                 DW ConstrictorLen
 303+ E153 20 01                                 DW CoriolisLen
 304+ E155 06 01                                 DW CougarLen
 305+ E157 60 01                                 DW DodoLen
 306+ E159                                       ENDIF
 307+ E159                                       IFDEF SHIPBANKB
 308+ E159 ~            ShipModelTableB:         DW Dragon                                  ;24
 309+ E159 ~                                     DW Escape_Pod                              ;25
 310+ E159 ~                                     DW Fer_De_Lance                            ;26
 311+ E159 ~                                     DW Gecko                                   ;27
 312+ E159 ~                                     DW Ghavial                                 ;28
 313+ E159 ~                                     DW Iguana                                  ;29
 314+ E159 ~                                     DW Krait                                   ;30
 315+ E159 ~                                     DW Logo                                    ;31
 316+ E159 ~                                     DW Mamba                                   ;32
 317+ E159 ~                                     DW Missile                                 ;33
 318+ E159 ~                                     DW Monitor                                 ;34
 319+ E159 ~                                     DW Moray                                   ;35
 320+ E159 ~                                     DW Ophidian                                ;36
 321+ E159 ~                                     DW Plate                                   ;37
 322+ E159 ~                                     DW Python                                  ;38
 323+ E159 ~                                     DW Python_P                                ;39
 324+ E159 ~            ShipVertexTableB:        DW DragonVertices
 325+ E159 ~                                     DW Escape_PodVertices
 326+ E159 ~                                     DW Fer_De_LanceVertices
 327+ E159 ~                                     DW GeckoVertices
 328+ E159 ~                                     DW GhavialVertices
 329+ E159 ~                                     DW IguanaVertices
 330+ E159 ~                                     DW KraitVertices
 331+ E159 ~                                     DW LogoVertices
 332+ E159 ~                                     DW MambaVertices
 333+ E159 ~                                     DW MissileVertices
 334+ E159 ~                                     DW MonitorVertices
 335+ E159 ~                                     DW MorayVertices
 336+ E159 ~                                     DW OphidianVertices
 337+ E159 ~                                     DW PlateVertices
 338+ E159 ~                                     DW PythonVertices
 339+ E159 ~                                     DW Python_PVertices
 340+ E159 ~            ShipEdgeTableB:          DW DragonEdges
 341+ E159 ~                                     DW Escape_PodEdges
 342+ E159 ~                                     DW Fer_De_LanceEdges
 343+ E159 ~                                     DW GeckoEdges
 344+ E159 ~                                     DW GhavialEdges
 345+ E159 ~                                     DW IguanaEdges
 346+ E159 ~                                     DW KraitEdges
 347+ E159 ~                                     DW LogoEdges
 348+ E159 ~                                     DW MambaEdges
 349+ E159 ~                                     DW MissileEdges
 350+ E159 ~                                     DW MonitorEdges
 351+ E159 ~                                     DW MorayEdges
 352+ E159 ~                                     DW OphidianEdges
 353+ E159 ~                                     DW PlateEdges
 354+ E159 ~                                     DW PythonEdges
 355+ E159 ~                                     DW Python_PEdges
 356+ E159 ~            ShipNormalTableB:        DW DragonNormals
 357+ E159 ~                                     DW Escape_PodNormals
 358+ E159 ~                                     DW Fer_De_LanceNormals
 359+ E159 ~                                     DW GeckoNormals
 360+ E159 ~                                     DW GhavialNormals
 361+ E159 ~                                     DW IguanaNormals
 362+ E159 ~                                     DW KraitNormals
 363+ E159 ~                                     DW LogoNormals
 364+ E159 ~                                     DW MambaNormals
 365+ E159 ~                                     DW MissileNormals
 366+ E159 ~                                     DW MonitorNormals
 367+ E159 ~                                     DW MorayNormals
 368+ E159 ~                                     DW OphidianNormals
 369+ E159 ~                                     DW PlateNormals
 370+ E159 ~                                     DW PythonNormals
 371+ E159 ~                                     DW Python_PNormals
 372+ E159 ~            ShipModelSizeTableB:     DW DragonLen
 373+ E159 ~                                     DW Escape_PodLen
 374+ E159 ~                                     DW Fer_De_LanceLen
 375+ E159 ~                                     DW GeckoLen
 376+ E159 ~                                     DW GhavialLen
 377+ E159 ~                                     DW IguanaLen
 378+ E159 ~                                     DW KraitLen
 379+ E159 ~                                     DW LogoLen
 380+ E159 ~                                     DW MambaLen
 381+ E159 ~                                     DW MissileLen
 382+ E159 ~                                     DW MonitorLen
 383+ E159 ~                                     DW MorayLen
 384+ E159 ~                                     DW OphidianLen
 385+ E159 ~                                     DW PlateLen
 386+ E159 ~                                     DW PythonLen
 387+ E159 ~                                     DW Python_PLen
 388+ E159                                       ENDIF
 389+ E159                                       IFDEF SHIPBANKC
 390+ E159 ~            ShipModelTableC:         DW Rattler                                 ;40
 391+ E159 ~                                     DW Rock_Hermit                             ;41
 392+ E159 ~                                     DW ShuttleType9                            ;42
 393+ E159 ~                                     DW Shuttle_Mk_2                            ;43
 394+ E159 ~                                     DW Sidewinder                              ;44
 395+ E159 ~                                     DW Splinter                                ;45
 396+ E159 ~                                     DW TestVector                              ;46
 397+ E159 ~                                     DW Thargoid                                ;47
 398+ E159 ~                                     DW Thargon                                 ;48
 399+ E159 ~                                     DW TransportType10                         ;49
 400+ E159 ~                                     DW Viper                                   ;50
 401+ E159 ~                                     DW Worm                                    ;51
 402+ E159 ~                                     DW 0                                       ;52
 403+ E159 ~                                     DW 0                                       ;53
 404+ E159 ~                                     DW 0                                       ;54
 405+ E159 ~                                     DW 0                                       ;55
 406+ E159 ~            ShipVertexTableC:        DW RattlerVertices
 407+ E159 ~                                     DW Rock_HermitVertices
 408+ E159 ~                                     DW ShuttleType9Vertices
 409+ E159 ~                                     DW Shuttle_Mk_2Vertices
 410+ E159 ~                                     DW SidewinderVertices
 411+ E159 ~                                     DW SplinterVertices
 412+ E159 ~                                     DW TestVectorVertices
 413+ E159 ~                                     DW ThargoidVertices
 414+ E159 ~                                     DW ThargonVertices
 415+ E159 ~                                     DW TransportType10Vertices
 416+ E159 ~                                     DW ViperVertices
 417+ E159 ~                                     DW WormVertices
 418+ E159 ~                                     DW 0
 419+ E159 ~                                     DW 0
 420+ E159 ~                                     DW 0
 421+ E159 ~                                     DW 0
 422+ E159 ~            ShipEdgeTableC:          DW RattlerEdges
 423+ E159 ~                                     DW Rock_HermitEdges
 424+ E159 ~                                     DW ShuttleType9Edges
 425+ E159 ~                                     DW Shuttle_Mk_2Edges
 426+ E159 ~                                     DW SidewinderEdges
 427+ E159 ~                                     DW SplinterEdges
 428+ E159 ~                                     DW TestVectorEdges
 429+ E159 ~                                     DW ThargoidEdges
 430+ E159 ~                                     DW ThargonEdges
 431+ E159 ~                                     DW TransportType10Edges
 432+ E159 ~                                     DW ViperEdges
 433+ E159 ~                                     DW WormEdges
 434+ E159 ~                                     DW 0
 435+ E159 ~                                     DW 0
 436+ E159 ~                                     DW 0
 437+ E159 ~                                     DW 0
 438+ E159 ~            ShipNormalTableC:        DW RattlerNormals
 439+ E159 ~                                     DW Rock_HermitNormals
 440+ E159 ~                                     DW ShuttleType9Normals
 441+ E159 ~                                     DW Shuttle_Mk_2Normals
 442+ E159 ~                                     DW SidewinderNormals
 443+ E159 ~                                     DW SplinterNormals
 444+ E159 ~                                     DW TestVectorNormals
 445+ E159 ~                                     DW ThargoidNormals
 446+ E159 ~                                     DW ThargonNormals
 447+ E159 ~                                     DW TransportType10Normals
 448+ E159 ~                                     DW ViperNormals
 449+ E159 ~                                     DW WormNormals
 450+ E159 ~                                     DW 0
 451+ E159 ~                                     DW 0
 452+ E159 ~                                     DW 0
 453+ E159 ~                                     DW 0
 454+ E159 ~            ShipModelSizeTableC:     DW RattlerLen
 455+ E159 ~                                     DW Rock_HermitLen
 456+ E159 ~                                     DW ShuttleType9Len
 457+ E159 ~                                     DW Shuttle_Mk_2Len
 458+ E159 ~                                     DW SidewinderLen
 459+ E159 ~                                     DW SplinterLen
 460+ E159 ~                                     DW TestVectorLen
 461+ E159 ~                                     DW ThargoidLen
 462+ E159 ~                                     DW ThargonLen
 463+ E159 ~                                     DW TransportType10Len
 464+ E159 ~                                     DW ViperLen
 465+ E159 ~                                     DW WormLen
 466+ E159 ~                                     DW 0
 467+ E159 ~                                     DW 0
 468+ E159 ~                                     DW 0
 469+ E159 ~                                     DW 0
 470+ E159                                       ENDIF
 471+ E159
 472+ E159
 473+ E159                                      IFNDEF SHIPMODELTABLES
 474+ E159                                      DEFINE SHIPMODELTABLES
 475+ E159              ShipModelSizeTable:     EQU ShipModelSizeTableA
 476+ E159              ShipModelBank:          EQU ShipModelBankA
 477+ E159              ShipModelTable:         EQU ShipModelTableA
 478+ E159              ShipVertexTable:        EQU ShipVertexTableA
 479+ E159              ShipEdgeTable:          EQU ShipEdgeTableA
 480+ E159              ShipNormalTable:        EQU ShipNormalTableA
 481+ E159                                      ENDIF
 482+ E159
 483+ E159                                      IFDEF SHIPBANKA
 484+ E159                                      include "Data/Ships/Adder.asm"
# file opened: ./Data/Ships/Adder.asm
   1++E159 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E15C DD E1                                DW AdderEdges
   3++E15E 74                                   DB AdderEdgesSize
   4++E15F 00 16                                DB $00, $16
   5++E161 6C                                   DB AdderVertSize
   6++E162 1D                                   DB AdderEdgesCnt
   7++E163 00 28                                DB $00, $28
   8++E165 3C                                   DB AdderNormalsSize
   9++E166 17 48 18                             DB $17, $48, $18
  10++E169 51 E2                                DW AdderNormals
  11++E16B 02 21                                DB $02, $21
  12++E16D 71 E1                                DW AdderVertices
  13++E16F 00 00                                DB 0,0                      ; Type and Tactics
  14++E171 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC
  14++E175 01 BC
  15++E177 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23
  15++E17B 01 23
  16++E17D 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45
  16++E181 23 45
  17++E183 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66
  17++E187 45 66
  18++E189 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E
  18++E18D 56 7E
  19++E18F 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE
  19++E193 78 AE
  20++E195 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA
  20++E199 89 AA
  21++E19B 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC
  21++E19F 9A BC
  22++E1A1 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D
  22++E1A5 78 9D
  23++E1A7 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D
  23++E1AB 46 7D
  24++E1AD 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD
  24++E1B1 09 BD
  25++E1B3 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D
  25++E1B7 02 4D
  26++E1B9 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE
  26++E1BD 1A CE
  27++E1BF 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E
  27++E1C3 13 5E
  28++E1C5 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00
  28++E1C9 00 00
  29++E1CB 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00
  29++E1CF 00 00
  30++E1D1 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00
  30++E1D5 00 00
  31++E1D7 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00
  31++E1DB 00 00
  32++E1DD              AdderVertSize:          equ $ - AdderVertices
  33++E1DD 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04
  34++E1E1 07 23 04 08                          DB $07, $23, $04, $08
  35++E1E5 1F 45 08 0C                          DB $1F, $45, $08, $0C
  36++E1E9 1F 56 0C 10                          DB $1F, $56, $0C, $10
  37++E1ED 1F 7E 10 14                          DB $1F, $7E, $10, $14
  38++E1F1 1F 8A 14 18                          DB $1F, $8A, $14, $18
  39++E1F5 1F 9A 18 1C                          DB $1F, $9A, $18, $1C
  40++E1F9 07 BC 1C 00                          DB $07, $BC, $1C, $00
  41++E1FD 1F 46 0C 24                          DB $1F, $46, $0C, $24
  42++E201 1F 7D 24 20                          DB $1F, $7D, $24, $20
  43++E205 1F 89 20 18                          DB $1F, $89, $20, $18
  44++E209 1F 0B 00 28                          DB $1F, $0B, $00, $28
  45++E20D 1F 9B 1C 28                          DB $1F, $9B, $1C, $28
  46++E211 1F 02 04 2C                          DB $1F, $02, $04, $2C
  47++E215 1F 24 08 2C                          DB $1F, $24, $08, $2C
  48++E219 1F 1C 00 30                          DB $1F, $1C, $00, $30
  49++E21D 1F AC 1C 30                          DB $1F, $AC, $1C, $30
  50++E221 1F 13 04 34                          DB $1F, $13, $04, $34
  51++E225 1F 35 08 34                          DB $1F, $35, $08, $34
  52++E229 1F 0D 28 2C                          DB $1F, $0D, $28, $2C
  53++E22D 1F 1E 30 34                          DB $1F, $1E, $30, $34
  54++E231 1F 9D 20 28                          DB $1F, $9D, $20, $28
  55++E235 1F 4D 24 2C                          DB $1F, $4D, $24, $2C
  56++E239 1F AE 14 30                          DB $1F, $AE, $14, $30
  57++E23D 1F 5E 10 34                          DB $1F, $5E, $10, $34
  58++E241 05 00 38 3C                          DB $05, $00, $38, $3C
  59++E245 03 00 3C 40                          DB $03, $00, $3C, $40
  60++E249 04 00 40 44                          DB $04, $00, $40, $44
  61++E24D 03 00 44 38                          DB $03, $00, $44, $38
  62++E251              AdderEdgesSize:         equ $ - AdderEdges
  63++E251              AdderEdgesCnt:          equ AdderEdgesSize/4
  64++E251 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A
  65++E255 5F 00 27 0A                          DB $5F, $00, $27, $0A
  66++E259 1F 45 32 0D                          DB $1F, $45, $32, $0D
  67++E25D 5F 45 32 0D                          DB $5F, $45, $32, $0D
  68++E261 1F 1E 34 00                          DB $1F, $1E, $34, $00
  69++E265 5F 1E 34 00                          DB $5F, $1E, $34, $00
  70++E269 3F 00 00 A0                          DB $3F, $00, $00, $A0
  71++E26D 3F 00 00 A0                          DB $3F, $00, $00, $A0
  72++E271 3F 00 00 A0                          DB $3F, $00, $00, $A0
  73++E275 9F 1E 34 00                          DB $9F, $1E, $34, $00
  74++E279 DF 1E 34 00                          DB $DF, $1E, $34, $00
  75++E27D 9F 45 32 0D                          DB $9F, $45, $32, $0D
  76++E281 DF 45 32 0D                          DB $DF, $45, $32, $0D
  77++E285 1F 00 1C 00                          DB $1F, $00, $1C, $00
  78++E289 5F 00 1C 00                          DB $5F, $00, $1C, $00
  79++E28D
  80++E28D              AdderNormalsSize:       equ $ - AdderNormals
  81++E28D              AdderLen:                equ $ - Adder
  82++E28D
# file closed: ./Data/Ships/Adder.asm
 485+ E28D                                      include "Data/Ships/Anaconda.asm"
# file opened: ./Data/Ships/Anaconda.asm
   1++E28D 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E290 FF E2                                DW AnacondaEdges
   3++E292 64                                   DB AnacondaEdgesSize
   4++E293 30 2E                                DB $30, $2E
   5++E295 5A                                   DB AnacondaVertSize
   6++E296 19                                   DB AnacondaEdgesCnt
   7++E297 00 00                                DB $00, $00
   8++E299 30                                   DB AnacondaNormalsSize
   9++E29A 24 FC 0E                             DB $24, $FC, $0E
  10++E29D 63 E3                                DW AnacondaNormals
  11++E29F 01 3F                                DB $01, $3F
  12++E2A1 A5 E2                                DW AnacondaVertices
  13++E2A3 00 00                                DB 0,0                      ; Type and Tactics
  14++E2A5 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55
  14++E2A9 01 55
  15++E2AB 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22
  15++E2AF 01 22
  16++E2B1 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33
  16++E2B5 02 33
  17++E2B7 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44
  17++E2BB 03 44
  18++E2BD 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55
  18++E2C1 04 55
  19++E2C3 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66
  19++E2C7 15 66
  20++E2C9 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77
  20++E2CD 12 77
  21++E2CF 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88
  21++E2D3 23 88
  22++E2D5 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99
  22++E2D9 34 99
  23++E2DB 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA
  23++E2DF 45 AA
  24++E2E1 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF
  24++E2E5 FF FF
  25++E2E7 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88
  25++E2EB 27 88
  26++E2ED 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF
  26++E2F1 FF FF
  27++E2F3 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA
  27++E2F7 49 AA
  28++E2F9 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF
  28++E2FD FF FF
  29++E2FF              AnacondaVertSize:       equ $ - AnacondaVertices
  30++E2FF 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04
  31++E303 1E 02 04 08                          DB $1E, $02, $04, $08
  32++E307 1E 03 08 0C                          DB $1E, $03, $08, $0C
  33++E30B 1E 04 0C 10                          DB $1E, $04, $0C, $10
  34++E30F 1E 05 00 10                          DB $1E, $05, $00, $10
  35++E313 1D 15 00 14                          DB $1D, $15, $00, $14
  36++E317 1D 12 04 18                          DB $1D, $12, $04, $18
  37++E31B 1D 23 08 1C                          DB $1D, $23, $08, $1C
  38++E31F 1D 34 0C 20                          DB $1D, $34, $0C, $20
  39++E323 1D 45 10 24                          DB $1D, $45, $10, $24
  40++E327 1E 16 14 28                          DB $1E, $16, $14, $28
  41++E32B 1E 17 18 28                          DB $1E, $17, $18, $28
  42++E32F 1E 27 18 2C                          DB $1E, $27, $18, $2C
  43++E333 1E 28 1C 2C                          DB $1E, $28, $1C, $2C
  44++E337 1F 38 1C 30                          DB $1F, $38, $1C, $30
  45++E33B 1F 39 20 30                          DB $1F, $39, $20, $30
  46++E33F 1E 49 20 34                          DB $1E, $49, $20, $34
  47++E343 1E 4A 24 34                          DB $1E, $4A, $24, $34
  48++E347 1E 5A 24 38                          DB $1E, $5A, $24, $38
  49++E34B 1E 56 14 38                          DB $1E, $56, $14, $38
  50++E34F 1E 6B 28 38                          DB $1E, $6B, $28, $38
  51++E353 1F 7B 28 30                          DB $1F, $7B, $28, $30
  52++E357 1F 78 2C 30                          DB $1F, $78, $2C, $30
  53++E35B 1F 9A 30 34                          DB $1F, $9A, $30, $34
  54++E35F 1F AB 30 38                          DB $1F, $AB, $30, $38
  55++E363              AnacondaEdgesSize:      equ $ - AnacondaEdges
  56++E363              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  57++E363 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31
  58++E367 BE 33 12 57                          DB $BE, $33, $12, $57
  59++E36B FE 4D 39 13                          DB $FE, $4D, $39, $13
  60++E36F 5F 00 5A 10                          DB $5F, $00, $5A, $10
  61++E373 7E 4D 39 13                          DB $7E, $4D, $39, $13
  62++E377 3E 33 12 57                          DB $3E, $33, $12, $57
  63++E37B 3E 00 6F 14                          DB $3E, $00, $6F, $14
  64++E37F 9F 61 48 18                          DB $9F, $61, $48, $18
  65++E383 DF 6C 44 22                          DB $DF, $6C, $44, $22
  66++E387 5F 6C 44 22                          DB $5F, $6C, $44, $22
  67++E38B 1F 61 48 18                          DB $1F, $61, $48, $18
  68++E38F 1F 00 5E 12                          DB $1F, $00, $5E, $12
  69++E393              AnacondaNormalsSize:    equ $ - AnacondaNormals
  70++E393              AnacondaLen:            equ $ - Anaconda
  71++E393
# file closed: ./Data/Ships/Anaconda.asm
 486+ E393                                      include "Data/Ships/Asp_Mk_2.asm"
# file opened: ./Data/Ships/Asp_Mk_2.asm
   1++E393 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E396 1D E4                                DW Asp_Mk_2Edges
   3++E398 70                                   DB Asp_Mk_2EdgesSize
   4++E399 20 1A                                DB $20, $1A
   5++E39B 72                                   DB Asp_Mk_2VertSize
   6++E39C 1C                                   DB Asp_Mk_2EdgesCnt
   7++E39D 00 C8                                DB $00, $C8
   8++E39F 30                                   DB Asp_Mk_2NormalsSize
   9++E3A0 28 96 28                             DB $28, $96, $28
  10++E3A3 8D E4                                DW Asp_Mk_2Normals
  11++E3A5 01 29                                DB $01, $29
  12++E3A7 AB E3                                DW Asp_Mk_2Vertices
  13++E3A9 00 00                                DB 0,0                      ; Type and Tactics
  14++E3AB 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22
  14++E3AF 01 22
  15++E3B1 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB
  15++E3B5 12 BB
  16++E3B7 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB
  16++E3BB 16 BB
  17++E3BD 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79
  17++E3C1 16 79
  18++E3C3 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77
  18++E3C7 01 77
  19++E3C9 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB
  19++E3CD 25 BB
  20++E3CF 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A
  20++E3D3 25 8A
  21++E3D5 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88
  21++E3D9 02 88
  22++E3DB 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79
  22++E3DF 04 79
  23++E3E1 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A
  23++E3E5 04 8A
  24++E3E7 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69
  24++E3EB 34 69
  25++E3ED 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A
  25++E3F1 34 5A
  26++E3F3 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B
  26++E3F7 35 6B
  27++E3F9 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB
  27++E3FD BB BB
  28++E3FF 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB
  28++E403 BB BB
  29++E405 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB
  29++E409 BB BB
  30++E40B 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB
  30++E40F BB BB
  31++E411 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04
  31++E415 04 04
  32++E417 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  32++E41B 04 04
  33++E41D              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  34++E41D 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04
  35++E421 16 01 00 10                          DB $16, $01, $00, $10
  36++E425 16 02 00 1C                          DB $16, $02, $00, $1C
  37++E429 1F 1B 04 08                          DB $1F, $1B, $04, $08
  38++E42D 1F 16 08 0C                          DB $1F, $16, $08, $0C
  39++E431 10 79 0C 20                          DB $10, $79, $0C, $20
  40++E435 1F 04 20 24                          DB $1F, $04, $20, $24
  41++E439 10 8A 18 24                          DB $10, $8A, $18, $24
  42++E43D 1F 25 14 18                          DB $1F, $25, $14, $18
  43++E441 1F 2B 04 14                          DB $1F, $2B, $04, $14
  44++E445 1F 17 0C 10                          DB $1F, $17, $0C, $10
  45++E449 1F 07 10 20                          DB $1F, $07, $10, $20
  46++E44D 1F 28 18 1C                          DB $1F, $28, $18, $1C
  47++E451 1F 08 1C 24                          DB $1F, $08, $1C, $24
  48++E455 1F 6B 08 30                          DB $1F, $6B, $08, $30
  49++E459 1F 5B 14 30                          DB $1F, $5B, $14, $30
  50++E45D 16 36 28 30                          DB $16, $36, $28, $30
  51++E461 16 35 2C 30                          DB $16, $35, $2C, $30
  52++E465 16 34 28 2C                          DB $16, $34, $28, $2C
  53++E469 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  54++E46D 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  55++E471 1F 69 0C 28                          DB $1F, $69, $0C, $28
  56++E475 1F 49 20 28                          DB $1F, $49, $20, $28
  57++E479 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  58++E47D 09 BB 3C 38                          DB $09, $BB, $3C, $38
  59++E481 08 BB 38 40                          DB $08, $BB, $38, $40
  60++E485 08 BB 40 34                          DB $08, $BB, $40, $34
  61++E489 0A 04 48 44                          DB $0A, $04, $48, $44
  62++E48D              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  63++E48D              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  64++E48D 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05
  65++E491 7F 08 26 07                          DB $7F, $08, $26, $07
  66++E495 FF 08 26 07                          DB $FF, $08, $26, $07
  67++E499 36 00 18 01                          DB $36, $00, $18, $01
  68++E49D 1F 00 2B 13                          DB $1F, $00, $2B, $13
  69++E4A1 BF 06 1C 02                          DB $BF, $06, $1C, $02
  70++E4A5 3F 06 1C 02                          DB $3F, $06, $1C, $02
  71++E4A9 5F 3B 40 1F                          DB $5F, $3B, $40, $1F
  72++E4AD DF 3B 40 1F                          DB $DF, $3B, $40, $1F
  73++E4B1 1F 50 2E 32                          DB $1F, $50, $2E, $32
  74++E4B5 9F 50 2E 32                          DB $9F, $50, $2E, $32
  75++E4B9 3F 00 00 5A                          DB $3F, $00, $00, $5A
  76++E4BD              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  77++E4BD              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  78++E4BD
# file closed: ./Data/Ships/Asp_Mk_2.asm
 487+ E4BD                                      include "Data/Ships/Asteroid.asm"
# file opened: ./Data/Ships/Asteroid.asm
   1++E4BD 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E4C0 0B E5                                DW AsteroidEdges
   3++E4C2 54                                   DB AsteroidEdgesSize
   4++E4C3 00 22                                DB $00, $22
   5++E4C5 36                                   DB AsteroidVertSize
   6++E4C6 15                                   DB AsteroidEdgesCnt
   7++E4C7 00 05                                DB $00, $05
   8++E4C9 38                                   DB AsteroidNormalsSize
   9++E4CA 32 3C 1E                             DB $32, $3C, $1E
  10++E4CD 5F E5                                DW AsteroidNormals
  11++E4CF 01 00                                DB $01, $00
  12++E4D1 D5 E4                                DW AsteroidVertices
  13++E4D3 00 00                                DB 0,0                      ; Type and Tactics
  14++E4D5 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF
  14++E4D9 FF FF
  15++E4DB 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  15++E4DF FF FF
  16++E4E1 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  16++E4E5 FF FF
  17++E4E7 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  17++E4EB FF FF
  18++E4ED 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  18++E4F1 65 DC
  19++E4F3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  19++E4F7 FF FF
  20++E4F9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  20++E4FD 10 32
  21++E4FF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  21++E503 FF FF
  22++E505 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  22++E509 98 BA
  23++E50B              AsteroidVertSize:       equ $ - AsteroidVertices
  24++E50B 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04
  25++E50F 1F D6 00 10                          DB $1F, $D6, $00, $10
  26++E513 1F C5 0C 10                          DB $1F, $C5, $0C, $10
  27++E517 1F B4 08 0C                          DB $1F, $B4, $08, $0C
  28++E51B 1F A3 04 08                          DB $1F, $A3, $04, $08
  29++E51F 1F 32 04 18                          DB $1F, $32, $04, $18
  30++E523 1F 31 08 18                          DB $1F, $31, $08, $18
  31++E527 1F 41 08 14                          DB $1F, $41, $08, $14
  32++E52B 1F 10 14 18                          DB $1F, $10, $14, $18
  33++E52F 1F 60 00 14                          DB $1F, $60, $00, $14
  34++E533 1F 54 0C 14                          DB $1F, $54, $0C, $14
  35++E537 1F 20 00 18                          DB $1F, $20, $00, $18
  36++E53B 1F 65 10 14                          DB $1F, $65, $10, $14
  37++E53F 1F A8 04 20                          DB $1F, $A8, $04, $20
  38++E543 1F 87 04 1C                          DB $1F, $87, $04, $1C
  39++E547 1F D7 00 1C                          DB $1F, $D7, $00, $1C
  40++E54B 1F DC 10 1C                          DB $1F, $DC, $10, $1C
  41++E54F 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C
  42++E553 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  43++E557 1F BA 08 20                          DB $1F, $BA, $08, $20
  44++E55B 1F 98 1C 20                          DB $1F, $98, $1C, $20
  45++E55F
  46++E55F              AsteroidEdgesSize:      equ $ - AsteroidEdges
  47++E55F              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  48++E55F 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51
  49++E563 5F 09 42 51                          DB $5F, $09, $42, $51
  50++E567 9F 48 40 1F                          DB $9F, $48, $40, $1F
  51++E56B DF 40 49 2F                          DB $DF, $40, $49, $2F
  52++E56F 5F 2D 4F 41                          DB $5F, $2D, $4F, $41
  53++E573 1F 87 0F 23                          DB $1F, $87, $0F, $23
  54++E577 1F 26 4C 46                          DB $1F, $26, $4C, $46
  55++E57B BF 42 3B 27                          DB $BF, $42, $3B, $27
  56++E57F FF 43 0F 50                          DB $FF, $43, $0F, $50
  57++E583 7F 42 0E 4B                          DB $7F, $42, $0E, $4B
  58++E587 FF 46 50 28                          DB $FF, $46, $50, $28
  59++E58B 7F 3A 66 33                          DB $7F, $3A, $66, $33
  60++E58F 3F 51 09 43                          DB $3F, $51, $09, $43
  61++E593 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F
  62++E597              AsteroidNormalsSize:    equ $ - AsteroidNormals
  63++E597              AsteroidLen:            equ $ - Asteroid
  64++E597
# file closed: ./Data/Ships/Asteroid.asm
 488+ E597                                      include "Data/Ships/Boa.asm"
# file opened: ./Data/Ships/Boa.asm
   1++E597 05 13 24     Boa:	                DB $05, $13, $24
   2++E59A FD E5                                DW BoaEdges
   3++E59C 60                                   DB BoaEdgesSize
   4++E59D 00 26                                DB $00, $26
   5++E59F 4E                                   DB BoaVertSize
   6++E5A0 18                                   DB BoaEdgesCnt
   7++E5A1 00 00                                DB $00, $00
   8++E5A3 30                                   DB BoaNormalsSize
   9++E5A4 28 FA 18                             DB $28, $FA, $18
  10++E5A7 5D E6                                DW BoaNormals
  11++E5A9 00 1C                                DB $00, $1C
  12++E5AB AF E5                                DW BoaVertices
  13++E5AD 00 00                                DB 0,0                      ; Type and Tactics
  14++E5AF 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  14++E5B3 FF FF
  15++E5B5 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  15++E5B9 02 33
  16++E5BB 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  16++E5BF 01 44
  17++E5C1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  17++E5C5 12 55
  18++E5C7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  18++E5CB 23 69
  19++E5CD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  19++E5D1 03 6B
  20++E5D3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  20++E5D7 04 8B
  21++E5D9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  21++E5DD 14 8A
  22++E5DF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  22++E5E3 15 7A
  23++E5E5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  23++E5E9 25 79
  24++E5EB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  24++E5EF 02 AA
  25++E5F1 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  25++E5F5 01 AA
  26++E5F7 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  26++E5FB 12 CC
  27++E5FD              BoaVertSize:            equ $ - BoaVertices
  28++E5FD 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  29++E601 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  30++E605 1F 79 00 24                          DB $1F, $79, $00, $24
  31++E609 1D 69 00 10                          DB $1D, $69, $00, $10
  32++E60D 1D 8B 00 18                          DB $1D, $8B, $00, $18
  33++E611 1D 7A 00 20                          DB $1D, $7A, $00, $20
  34++E615 1F 36 10 14                          DB $1F, $36, $10, $14
  35++E619 1F 0B 14 18                          DB $1F, $0B, $14, $18
  36++E61D 1F 48 18 1C                          DB $1F, $48, $18, $1C
  37++E621 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  38++E625 1F 57 20 24                          DB $1F, $57, $20, $24
  39++E629 1F 29 10 24                          DB $1F, $29, $10, $24
  40++E62D 18 23 04 10                          DB $18, $23, $04, $10
  41++E631 18 03 04 14                          DB $18, $03, $04, $14
  42++E635 18 25 0C 24                          DB $18, $25, $0C, $24
  43++E639 18 15 0C 20                          DB $18, $15, $0C, $20
  44++E63D 18 04 08 18                          DB $18, $04, $08, $18
  45++E641 18 14 08 1C                          DB $18, $14, $08, $1C
  46++E645 16 02 04 28                          DB $16, $02, $04, $28
  47++E649 16 01 08 2C                          DB $16, $01, $08, $2C
  48++E64D 16 12 0C 30                          DB $16, $12, $0C, $30
  49++E651 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  50++E655 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  51++E659 0E 2C 30 28                          DB $0E, $2C, $30, $28
  52++E65D              BoaEdgesSize:           equ $ - BoaEdges
  53++E65D              BoaEdgesCnt:            equ BoaEdgesSize/4
  54++E65D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  55++E661 7F 00 2D 59                          DB $7F, $00, $2D, $59
  56++E665 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  57++E669 1F 00 28 00                          DB $1F, $00, $28, $00
  58++E66D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  59++E671 FF 3E 20 14                          DB $FF, $3E, $20, $14
  60++E675 1F 00 17 06                          DB $1F, $00, $17, $06
  61++E679 DF 17 0F 09                          DB $DF, $17, $0F, $09
  62++E67D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  63++E681 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  64++E685 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  65++E689 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  66++E68D              BoaNormalsSize:         equ $ - BoaNormals
  67++E68D              BoaLen:                 equ $ - Boa
  68++E68D
# file closed: ./Data/Ships/Boa.asm
 489+ E68D                                      include "Data/Ships/Boulder.asm"
# file opened: ./Data/Ships/Boulder.asm
   1++E68D 00 03 84     Boulder:	            DB $00, $03, $84
   2++E690 CF E6                                DW BoulderEdges
   3++E692 3C                                   DB BoulderEdgesSize
   4++E693 00 0E                                DB $00, $0E
   5++E695 2A                                   DB BoulderVertSize
   6++E696 0F                                   DB BoulderEdgesCnt
   7++E697 00 01                                DB $00, $01
   8++E699 28                                   DB BoulderNormalsSize
   9++E69A 14 14 1E                             DB $14, $14, $1E
  10++E69D 0B E7                                DW BoulderNormals
  11++E69F 02 00                                DB $02, $00
  12++E6A1 A5 E6                                DW BoulderVertices
  13++E6A3 00 00                                DB 0,0                      ; Type and Tactics
  14++E6A5 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  14++E6A9 01 59
  15++E6AB 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  15++E6AF 12 56
  16++E6B1 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  16++E6B5 23 67
  17++E6B7 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  17++E6BB 34 78
  18++E6BD 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  18++E6C1 04 89
  19++E6C3 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  19++E6C7 FF FF
  20++E6C9 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  20++E6CD FF FF
  21++E6CF              BoulderVertSize:        equ $ - BoulderVertices
  22++E6CF 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  23++E6D3 1F 26 04 08                          DB $1F, $26, $04, $08
  24++E6D7 1F 37 08 0C                          DB $1F, $37, $08, $0C
  25++E6DB 1F 48 0C 10                          DB $1F, $48, $0C, $10
  26++E6DF 1F 09 10 00                          DB $1F, $09, $10, $00
  27++E6E3 1F 01 00 14                          DB $1F, $01, $00, $14
  28++E6E7 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E6EB 1F 23 08 14                          DB $1F, $23, $08, $14
  30++E6EF 1F 34 0C 14                          DB $1F, $34, $0C, $14
  31++E6F3 1F 04 10 14                          DB $1F, $04, $10, $14
  32++E6F7 1F 59 00 18                          DB $1F, $59, $00, $18
  33++E6FB 1F 56 04 18                          DB $1F, $56, $04, $18
  34++E6FF 1F 67 08 18                          DB $1F, $67, $08, $18
  35++E703 1F 78 0C 18                          DB $1F, $78, $0C, $18
  36++E707 1F 89 10 18                          DB $1F, $89, $10, $18
  37++E70B              BoulderEdgesSize:       equ $ - BoulderEdges
  38++E70B              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  39++E70B DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  40++E70F 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  41++E713 5F 20 2F 18                          DB $5F, $20, $2F, $18
  42++E717 FF 03 27 07                          DB $FF, $03, $27, $07
  43++E71B FF 05 04 01                          DB $FF, $05, $04, $01
  44++E71F 1F 31 54 08                          DB $1F, $31, $54, $08
  45++E723 3F 70 15 15                          DB $3F, $70, $15, $15
  46++E727 7F 4C 23 52                          DB $7F, $4C, $23, $52
  47++E72B 3F 16 38 89                          DB $3F, $16, $38, $89
  48++E72F 3F 28 6E 26                          DB $3F, $28, $6E, $26
  49++E733              BoulderNormalsSize:     equ $ - BoulderNormals
  50++E733              BoulderLen:             equ $ - Boulder
  51++E733
# file closed: ./Data/Ships/Boulder.asm
 490+ E733                                      include "Data/Ships/Bushmaster.asm"
# file opened: ./Data/Ships/Bushmaster.asm
   1++E733 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E736 93 E7                                DW BushmasterEdges
   3++E738 4C                                   DB BushmasterEdgesSize
   4++E739 00 1E                                DB $00, $1E
   5++E73B 48                                   DB BushmasterVertSize
   6++E73C 13                                   DB BushmasterEdgesCnt
   7++E73D 00 96                                DB $00, $96
   8++E73F 24                                   DB BushmasterNormalsSize
   9++E740 14 4A 23                             DB $14, $4A, $23
  10++E743 DF E7                                DW BushmasterNormals
  11++E745 02 21                                DB $02, $21
  12++E747 4B E7                                DW BushmasterVertices
  13++E749 00 00                                DB 0,0                      ; Type and Tactics
  14++E74B 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  14++E74F 23 01
  15++E751 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  15++E755 57 13
  16++E757 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  16++E75B 46 02
  17++E75D 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  17++E761 45 01
  18++E763 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  18++E767 FF FF
  19++E769 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  19++E76D 88 45
  20++E76F 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  20++E773 88 57
  21++E775 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  21++E779 88 46
  22++E77B 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  22++E77F 88 88
  23++E781 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  23++E785 88 88
  24++E787 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  24++E78B 88 88
  25++E78D 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  25++E791 88 88
  26++E793              BushmasterVertSize:     equ $ - BushmasterVertices
  27++E793 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  28++E797 1F 02 00 08                          DB $1F, $02, $00, $08
  29++E79B 1F 01 00 0C                          DB $1F, $01, $00, $0C
  30++E79F 1F 23 00 10                          DB $1F, $23, $00, $10
  31++E7A3 1F 45 0C 14                          DB $1F, $45, $0C, $14
  32++E7A7 1F 04 08 0C                          DB $1F, $04, $08, $0C
  33++E7AB 1F 15 04 0C                          DB $1F, $15, $04, $0C
  34++E7AF 1F 46 08 1C                          DB $1F, $46, $08, $1C
  35++E7B3 1F 57 04 18                          DB $1F, $57, $04, $18
  36++E7B7 1F 26 08 10                          DB $1F, $26, $08, $10
  37++E7BB 1F 37 04 10                          DB $1F, $37, $04, $10
  38++E7BF 1F 48 14 1C                          DB $1F, $48, $14, $1C
  39++E7C3 1F 58 14 18                          DB $1F, $58, $14, $18
  40++E7C7 1F 68 10 1C                          DB $1F, $68, $10, $1C
  41++E7CB 1F 78 10 18                          DB $1F, $78, $10, $18
  42++E7CF 0A 88 20 24                          DB $0A, $88, $20, $24
  43++E7D3 0A 88 24 28                          DB $0A, $88, $24, $28
  44++E7D7 0A 88 28 2C                          DB $0A, $88, $28, $2C
  45++E7DB 0A 88 2C 20                          DB $0A, $88, $2C, $20
  46++E7DF              BushmasterEdgesSize:    equ $ - BushmasterEdges
  47++E7DF              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  48++E7DF 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  49++E7E3 1F 17 58 1D                          DB $1F, $17, $58, $1D
  50++E7E7 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  51++E7EB 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  52++E7EF BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  53++E7F3 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  54++E7F7 FF 2A 55 07                          DB $FF, $2A, $55, $07
  55++E7FB 7F 2A 55 07                          DB $7F, $2A, $55, $07
  56++E7FF 3F 00 00 60                          DB $3F, $00, $00, $60
  57++E803              BushmasterNormalsSize:  equ $ - BushmasterNormals
  58++E803              BushmasterLen:          equ $ - Bushmaster
  59++E803
# file closed: ./Data/Ships/Bushmaster.asm
 491+ E803                                      include "Data/Ships/CargoType5.asm"
# file opened: ./Data/Ships/CargoType5.asm
   1++E803              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E803              ; Corrected pointers
   3++E803              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E803              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E803              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E803              ;;;				 Example of cargo
   7++E803              ;;;
   8++E803              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E803              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E803              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E803              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E803              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E803              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E803              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E803              ;;;		Edges
  16++E803              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E803              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E803              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E803              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E803              ;;;	  	Normals (Faces)
  21++E803              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E803              ;;;		Byte 1 = X Lo
  23++E803              ;;;		Byte 2 = Y Lo
  24++E803              ;;;		Byte 3 = Z Lo
  25++E803
  26++E803 00 90 01     CargoType5              DB $00, $90, $01
  27++E806 57 E8                                DW CargoType5Edges
  28++E808 3C                                   DB CargoType5EdgesSize
  29++E809 00 12 3C 0F                          DB $00,$12,CargoType5VertSize,CargoType5EdgesCnt
  30++E80D 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
  30++E811 11 0F
  31++E813 93 E8                                DW CargoType5Normals
  32++E815 02 00                                DB $02,$00
  33++E817 1B E8                                DW CargoType5Vertices
  34++E819 00 00                                DB 0,0                      ; Type and Tactics
  35++E81B              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  36++E81B 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  36++E81F 10 55
  37++E821 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  37++E825 10 22
  38++E827 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  38++E82B 20 33
  39++E82D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  39++E831 30 44
  40++E833 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  40++E837 40 55
  41++E839 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  41++E83D 51 66
  42++E83F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  42++E843 21 66
  43++E845 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  43++E849 32 66
  44++E84B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  44++E84F 43 66
  45++E851 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  45++E855 54 66
  46++E857              CargoType5VertSize      equ $  - CargoType5Vertices
  47++E857 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  47++E85B 1F 20 04 08
  48++E85F 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  48++E863 1F 40 0C 10
  49++E867 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  49++E86B 1F 51 00 14
  50++E86F 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  50++E873 1F 32 08 1C
  51++E877 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  51++E87B 1F 54 10 24
  52++E87F 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  52++E883 1F 62 18 1C
  53++E887 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  53++E88B 1F 64 20 24
  54++E88F 1F 65 24 14                          DB $1F,$65,$24,$14
  55++E893              CargoType5EdgesSize     equ $  - CargoType5Edges
  56++E893              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  57++E893 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  58++E897 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  58++E89B 5F 00 12 30
  59++E89F 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  59++E8A3 7F 00 12 30
  60++E8A7 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  60++E8AB 9F 60 00 00
  61++E8AF              CargoType5NormalsSize   equ $  - CargoType5Normals
  62++E8AF              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/Ships/CargoType5.asm
 492+ E8AF                                      include "Data/Ships/Chameleon.asm"
# file opened: ./Data/Ships/Chameleon.asm
   1++E8AF 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E8B2 33 E9                                DW ChameleonEdges
   3++E8B4 74                                   DB ChameleonEdgesSize
   4++E8B5 00 1A                                DB $00, $1A
   5++E8B7 6C                                   DB ChameleonVertSize
   6++E8B8 1D                                   DB ChameleonEdgesCnt
   7++E8B9 00 C8                                DB $00, $C8
   8++E8BB 34                                   DB ChameleonNormalsSize
   9++E8BC 0A 64 1D                             DB $0A, $64, $1D
  10++E8BF A7 E9                                DW ChameleonNormals
  11++E8C1 01 23                                DB $01, $23
  12++E8C3 C7 E8                                DW ChameleonVertices
  13++E8C5 00 00                                DB 0,0                      ; Type and Tactics
  14++E8C7 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  14++E8CB 25 01
  15++E8CD 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  15++E8D1 34 01
  16++E8D3 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  16++E8D7 8B 25
  17++E8D9 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  17++E8DD 68 22
  18++E8DF 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  18++E8E3 69 33
  19++E8E5 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  19++E8E9 9A 34
  20++E8EB 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  20++E8EF 7A 44
  21++E8F1 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  21++E8F5 7B 55
  22++E8F7 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  22++E8FB 36 02
  23++E8FD 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  23++E901 57 14
  24++E903 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  24++E907 BC 88
  25++E909 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  25++E90D 9C 68
  26++E90F 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  26++E913 AC 99
  27++E915 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  27++E919 BC 7A
  28++E91B 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  28++E91F CC CC
  29++E921 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  29++E925 CC CC
  30++E927 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  30++E92B CC CC
  31++E92D 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  31++E931 CC CC
  32++E933              ChameleonVertSize:      equ $ - ChameleonVertices
  33++E933 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  34++E937 1F 02 00 20                          DB $1F, $02, $00, $20
  35++E93B 1F 15 00 24                          DB $1F, $15, $00, $24
  36++E93F 1F 03 04 20                          DB $1F, $03, $04, $20
  37++E943 1F 14 04 24                          DB $1F, $14, $04, $24
  38++E947 1F 34 04 14                          DB $1F, $34, $04, $14
  39++E94B 1F 25 00 08                          DB $1F, $25, $00, $08
  40++E94F 1F 26 0C 20                          DB $1F, $26, $0C, $20
  41++E953 1F 36 10 20                          DB $1F, $36, $10, $20
  42++E957 1F 75 1C 24                          DB $1F, $75, $1C, $24
  43++E95B 1F 74 18 24                          DB $1F, $74, $18, $24
  44++E95F 1F 39 10 14                          DB $1F, $39, $10, $14
  45++E963 1F 4A 14 18                          DB $1F, $4A, $14, $18
  46++E967 1F 28 08 0C                          DB $1F, $28, $08, $0C
  47++E96B 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  48++E96F 1F 8B 08 28                          DB $1F, $8B, $08, $28
  49++E973 1F 9A 14 30                          DB $1F, $9A, $14, $30
  50++E977 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  51++E97B 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  52++E97F 1F 69 10 2C                          DB $1F, $69, $10, $2C
  53++E983 1F 7A 18 34                          DB $1F, $7A, $18, $34
  54++E987 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  55++E98B 1F BC 28 34                          DB $1F, $BC, $28, $34
  56++E98F 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  57++E993 1F AC 30 34                          DB $1F, $AC, $30, $34
  58++E997 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  59++E99B 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  60++E99F 0A CC 40 44                          DB $0A, $CC, $40, $44
  61++E9A3 0A CC 44 38                          DB $0A, $CC, $44, $38
  62++E9A7              ChameleonEdgesSize:     equ $ - ChameleonEdges
  63++E9A7              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  64++E9A7 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  65++E9AB 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  66++E9AF 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  67++E9B3 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  68++E9B7 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  69++E9BB DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  70++E9BF 1F 00 60 00                          DB $1F, $00, $60, $00
  71++E9C3 5F 00 60 00                          DB $5F, $00, $60, $00
  72++E9C7 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  73++E9CB 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  74++E9CF 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  75++E9D3 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  76++E9D7 3F 00 00 60                          DB $3F, $00, $00, $60
  77++E9DB              ChameleonNormalsSize:   equ $ - ChameleonNormals
  78++E9DB              ChameleonLen:           equ $ - Chameleon
  79++E9DB
# file closed: ./Data/Ships/Chameleon.asm
 493+ E9DB                                      include "Data/Ships/CobraMk3.asm"
# file opened: ./Data/Ships/CobraMk3.asm
   1++E9DB              ; Corrected pointers
   2++E9DB              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9DB              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9DB              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9DB 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9DE 9B EA                                DW CobraMk3Edges
   7++E9E0 98                                   DB CobraMkEdgesSize
   8++E9E1 54 2A                                DB $54,$2A
   9++E9E3 A8                                   DB CobraMkVertSize
  10++E9E4 26                                   DB CobraMkEdgesCnt
  11++E9E5 00 00                                DB $00,$00
  12++E9E7 34                                   DB CobraMk3NormalsSize
  13++E9E8 32 96 1C                             DB $32,$96,$1C
  14++E9EB 33 EB                                DW CobraMk3Normals
  15++E9ED 01 13                                DB $01,$13
  16++E9EF F3 E9                                DW CobraMk3Vertices
  17++E9F1 00 00                                DB 0,0                      ; Type and Tactics
  18++E9F3                                  ; missiles = 3
  19++E9F3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  19++E9F7 FF FF
  20++E9F9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  20++E9FD FF FF
  21++E9FF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  21++EA03 FF FF
  22++EA05 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  22++EA09 73 AA
  23++EA0B 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  23++EA0F 84 CC
  24++EA11 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  24++EA15 FF FF
  25++EA17 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  25++EA1B FF FF
  26++EA1D 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  26++EA21 98 CC
  27++EA23 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  27++EA27 97 AA
  28++EA29 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  28++EA2D 65 99
  29++EA2F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  29++EA33 A9 BB
  30++EA35 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  30++EA39 B9 CC
  31++EA3B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  31++EA3F 99 99
  32++EA41 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  32++EA45 99 99
  33++EA47 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  33++EA4B 99 99
  34++EA4D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  34++EA51 99 99
  35++EA53 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  35++EA57 99 99
  36++EA59 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  36++EA5D 99 99
  37++EA5F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  37++EA63 99 99
  38++EA65 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  38++EA69 99 99
  39++EA6B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  39++EA6F B0 BB
  40++EA71 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  40++EA75 B0 BB
  41++EA77 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  41++EA7B 99 99
  42++EA7D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  42++EA81 99 99
  43++EA83 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  43++EA87 99 99
  44++EA89 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  44++EA8D 99 99
  45++EA8F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  45++EA93 99 99
  46++EA95 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  46++EA99 99 99
  47++EA9B              CobraMkVertSize         equ $  - CobraMk3Vertices
  48++EA9B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  48++EA9F 1F C4 00 10
  49++EAA3 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  49++EAA7 1F A7 0C 20
  50++EAAB 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  50++EAAF 1F 98 18 1C
  51++EAB3 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  51++EAB7 1F 95 14 24
  52++EABB 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  52++EABF 1F 51 08 14
  53++EAC3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  53++EAC7 1F 73 0C 14
  54++EACB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  54++EACF 1F 10 04 08
  55++EAD3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  55++EAD7 1F A9 20 28
  56++EADB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  56++EADF 1F C9 1C 2C
  57++EAE3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  57++EAE7 1F CB 00 2C
  58++EAEB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  58++EAEF 1D 42 00 18
  59++EAF3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  59++EAF7 14 99 30 34
  60++EAFB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  60++EAFF 14 99 38 3C
  61++EB03 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  61++EB07 13 99 3C 40
  62++EB0B 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  62++EB0F 13 99 34 48
  63++EB13 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  63++EB17 1E 65 08 24
  64++EB1B 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  64++EB1F 06 99 5C 60
  65++EB23 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  65++EB27 06 99 64 68
  66++EB2B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  66++EB2F 08 99 64 6C
  67++EB33              CobraMkEdgesSize        equ $  - CobraMk3Edges
  68++EB33              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  69++EB33              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  70++EB33 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  71++EB37 9F 12 37 10                          DB $9F,$12,$37,$10
  72++EB3B 1F 12 37 10                          DB $1F,$12,$37,$10
  73++EB3F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  74++EB43 1F 10 34 0E                          DB $1F,$10,$34,$0E
  75++EB47 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  76++EB4B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  77++EB4F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  78++EB53 1F 3D 66 00                          DB $1F,$3D,$66,$00
  79++EB57 3F 00 00 50                          DB $3F,$00,$00,$50
  80++EB5B DF 07 2A 09                          DB $DF,$07,$2A,$09
  81++EB5F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  82++EB63 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  83++EB67              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  84++EB67              CobraMk3Len             equ $  - CobraMk3
  85++EB67
# file closed: ./Data/Ships/CobraMk3.asm
 494+ EB67                                      include "Data/Ships/Cobra_Mk_1.asm"
# file opened: ./Data/Ships/Cobra_Mk_1.asm
   1++EB67 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB6A C1 EB                                DW Cobra_Mk_1Edges
   3++EB6C 48                                   DB Cobra_Mk_1EdgesSize
   4++EB6D 28 1A                                DB $28, $1A
   5++EB6F 42                                   DB Cobra_Mk_1VertSize
   6++EB70 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB71 00 4B                                DB $00, $4B
   8++EB73 28                                   DB Cobra_Mk_1NormalsSize
   9++EB74 13 51 1A                             DB $13, $51, $1A
  10++EB77 09 EC                                DW Cobra_Mk_1Normals
  11++EB79 02 22                                DB $02, $22
  12++EB7B 7F EB                                DW Cobra_Mk_1Vertices
  13++EB7D 00 00                                DB 0,0                      ; Type and Tactics
  14++EB7F 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  14++EB83 01 23
  15++EB85 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  15++EB89 01 45
  16++EB8B 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  16++EB8F 23 88
  17++EB91 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  17++EB95 45 99
  18++EB97 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  18++EB9B 26 78
  19++EB9D 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  19++EBA1 46 79
  20++EBA3 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  20++EBA7 13 78
  21++EBA9 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  21++EBAD 15 79
  22++EBAF 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  22++EBB3 02 46
  23++EBB5 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  23++EBB9 01 11
  24++EBBB 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  24++EBBF 01 11
  25++EBC1              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  26++EBC1 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  27++EBC5 1F 23 00 08                          DB $1F, $23, $00, $08
  28++EBC9 1F 38 08 18                          DB $1F, $38, $08, $18
  29++EBCD 1F 17 18 1C                          DB $1F, $17, $18, $1C
  30++EBD1 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  31++EBD5 1F 45 0C 04                          DB $1F, $45, $0C, $04
  32++EBD9 1F 28 08 10                          DB $1F, $28, $08, $10
  33++EBDD 1F 67 10 14                          DB $1F, $67, $10, $14
  34++EBE1 1F 49 14 0C                          DB $1F, $49, $14, $0C
  35++EBE5 14 02 00 20                          DB $14, $02, $00, $20
  36++EBE9 14 04 20 04                          DB $14, $04, $20, $04
  37++EBED 10 26 10 20                          DB $10, $26, $10, $20
  38++EBF1 10 46 20 14                          DB $10, $46, $20, $14
  39++EBF5 1F 78 10 18                          DB $1F, $78, $10, $18
  40++EBF9 1F 79 14 1C                          DB $1F, $79, $14, $1C
  41++EBFD 14 13 00 18                          DB $14, $13, $00, $18
  42++EC01 14 15 04 1C                          DB $14, $15, $04, $1C
  43++EC05 02 01 28 24                          DB $02, $01, $28, $24
  44++EC09              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  45++EC09              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  46++EC09 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  47++EC0D 5F 00 1B 03                          DB $5F, $00, $1B, $03
  48++EC11 9F 08 2E 08                          DB $9F, $08, $2E, $08
  49++EC15 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  50++EC19 1F 08 2E 08                          DB $1F, $08, $2E, $08
  51++EC1D 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  52++EC21 1F 00 31 00                          DB $1F, $00, $31, $00
  53++EC25 3F 00 00 9A                          DB $3F, $00, $00, $9A
  54++EC29 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  55++EC2D 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  56++EC31              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  57++EC31              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  58++EC31
# file closed: ./Data/Ships/Cobra_Mk_1.asm
 495+ EC31                                      include "Data/Ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/Ships/Cobra_Mk_3_P.asm
   1++EC31 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC34 F1 EC                                DW Cobra_Mk_3_PEdges
   3++EC36 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC37 54 2A                                DB $54, $2A
   5++EC39 A8                                   DB Cobra_Mk_3_PVertSize
   6++EC3A 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC3B 00 AF                                DB $00, $AF
   8++EC3D 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC3E 32 96 1C                             DB $32, $96, $1C
  10++EC41 89 ED                                DW Cobra_Mk_3_PNormals
  11++EC43 01 12                                DB $01, $12
  12++EC45 49 EC                                DW Cobra_Mk_3_PVertices
  13++EC47 00 00                                DB 0,0                      ; Type and Tactics
  14++EC49 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  14++EC4D FF FF
  15++EC4F 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  15++EC53 FF FF
  16++EC55 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  16++EC59 FF FF
  17++EC5B 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  17++EC5F 73 AA
  18++EC61 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  18++EC65 84 CC
  19++EC67 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  19++EC6B FF FF
  20++EC6D 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  20++EC71 FF FF
  21++EC73 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  21++EC77 98 CC
  22++EC79 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  22++EC7D 97 AA
  23++EC7F 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  23++EC83 65 99
  24++EC85 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  24++EC89 A9 BB
  25++EC8B 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  25++EC8F B9 CC
  26++EC91 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  26++EC95 99 99
  27++EC97 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  27++EC9B 99 99
  28++EC9D 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  28++ECA1 99 99
  29++ECA3 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  29++ECA7 99 99
  30++ECA9 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  30++ECAD 99 99
  31++ECAF 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  31++ECB3 99 99
  32++ECB5 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  32++ECB9 99 99
  33++ECBB 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  33++ECBF 99 99
  34++ECC1 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  34++ECC5 B0 BB
  35++ECC7 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  35++ECCB B0 BB
  36++ECCD 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  36++ECD1 99 99
  37++ECD3 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  37++ECD7 99 99
  38++ECD9 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  38++ECDD 99 99
  39++ECDF 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  39++ECE3 99 99
  40++ECE5 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  40++ECE9 99 99
  41++ECEB 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  41++ECEF 99 99
  42++ECF1              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  43++ECF1 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  44++ECF5 1F C4 00 10                          DB $1F, $C4, $00, $10
  45++ECF9 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  46++ECFD 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  47++ED01 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  48++ED05 1F 98 18 1C                          DB $1F, $98, $18, $1C
  49++ED09 1F 96 18 24                          DB $1F, $96, $18, $24
  50++ED0D 1F 95 14 24                          DB $1F, $95, $14, $24
  51++ED11 1F 97 14 20                          DB $1F, $97, $14, $20
  52++ED15 1F 51 08 14                          DB $1F, $51, $08, $14
  53++ED19 1F 62 08 18                          DB $1F, $62, $08, $18
  54++ED1D 1F 73 0C 14                          DB $1F, $73, $0C, $14
  55++ED21 1F 84 10 18                          DB $1F, $84, $10, $18
  56++ED25 1F 10 04 08                          DB $1F, $10, $04, $08
  57++ED29 1F 20 00 08                          DB $1F, $20, $00, $08
  58++ED2D 1F A9 20 28                          DB $1F, $A9, $20, $28
  59++ED31 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  60++ED35 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  61++ED39 1F BA 04 28                          DB $1F, $BA, $04, $28
  62++ED3D 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  63++ED41 1D 31 04 14                          DB $1D, $31, $04, $14
  64++ED45 1D 42 00 18                          DB $1D, $42, $00, $18
  65++ED49 06 B0 50 54                          DB $06, $B0, $50, $54
  66++ED4D 14 99 30 34                          DB $14, $99, $30, $34
  67++ED51 14 99 48 4C                          DB $14, $99, $48, $4C
  68++ED55 14 99 38 3C                          DB $14, $99, $38, $3C
  69++ED59 14 99 40 44                          DB $14, $99, $40, $44
  70++ED5D 13 99 3C 40                          DB $13, $99, $3C, $40
  71++ED61 11 99 38 44                          DB $11, $99, $38, $44
  72++ED65 13 99 34 48                          DB $13, $99, $34, $48
  73++ED69 13 99 30 4C                          DB $13, $99, $30, $4C
  74++ED6D 1E 65 08 24                          DB $1E, $65, $08, $24
  75++ED71 06 99 58 60                          DB $06, $99, $58, $60
  76++ED75 06 99 5C 60                          DB $06, $99, $5C, $60
  77++ED79 08 99 58 5C                          DB $08, $99, $58, $5C
  78++ED7D 06 99 64 68                          DB $06, $99, $64, $68
  79++ED81 06 99 68 6C                          DB $06, $99, $68, $6C
  80++ED85 08 99 64 6C                          DB $08, $99, $64, $6C
  81++ED89              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  82++ED89              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  83++ED89 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  84++ED8D 9F 12 37 10                          DB $9F, $12, $37, $10
  85++ED91 1F 12 37 10                          DB $1F, $12, $37, $10
  86++ED95 9F 10 34 0E                          DB $9F, $10, $34, $0E
  87++ED99 1F 10 34 0E                          DB $1F, $10, $34, $0E
  88++ED9D 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  89++EDA1 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  90++EDA5 9F 3D 66 00                          DB $9F, $3D, $66, $00
  91++EDA9 1F 3D 66 00                          DB $1F, $3D, $66, $00
  92++EDAD 3F 00 00 50                          DB $3F, $00, $00, $50
  93++EDB1 DF 07 2A 09                          DB $DF, $07, $2A, $09
  94++EDB5 5F 00 1E 06                          DB $5F, $00, $1E, $06
  95++EDB9 5F 07 2A 09                          DB $5F, $07, $2A, $09
  96++EDBD              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  97++EDBD              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  98++EDBD
# file closed: ./Data/Ships/Cobra_Mk_3_P.asm
 496+ EDBD                                      include "Data/Ships/Constrictor.asm"
# file opened: ./Data/Ships/Constrictor.asm
   1++EDBD              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDBD              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDBD              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDBD F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDC0 3B EE                                DW ConstrictorEdges
   6++EDC2 60                                   DB ConstrictorEdgesSize
   7++EDC3 00 2E                                DB $00,$2E
   8++EDC5 66                                   DB ConstrictorVertSize
   9++EDC6 18                                   DB ConstrictorEdgesCnt
  10++EDC7 18 00                                DB $18,$00
  11++EDC9 28                                   DB ConstrictorNormalsSize
  12++EDCA 2D C8 37                             DB $2D,$C8,$37
  13++EDCD 9B EE                                DW ConstrictorNormals
  14++EDCF 02 2F                                DB $02,$2F
  15++EDD1 D5 ED                                DW ConstrictorVertices
  16++EDD3 00 00                                DB 0,0                      ; Type and Tactics
  17++EDD5                                  ; missiles = 3
  18++EDD5 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  18++EDD9 02 99
  19++EDDB 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  19++EDDF 01 99
  20++EDE1 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  20++EDE5 14 99
  21++EDE7 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  21++EDEB 45 89
  22++EDED 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  22++EDF1 56 88
  23++EDF3 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  23++EDF7 67 88
  24++EDF9 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  24++EDFD 37 89
  25++EDFF 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  25++EE03 23 99
  26++EE05 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  26++EE09 FF FF
  27++EE0B 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  27++EE0F FF FF
  28++EE11 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  28++EE15 99 99
  29++EE17 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  29++EE1B 99 99
  30++EE1D 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  30++EE21 99 99
  31++EE23 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  31++EE27 99 99
  32++EE29 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  32++EE2D 99 99
  33++EE2F 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  33++EE33 99 99
  34++EE35 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  34++EE39 9F 01
  35++EE3B              ConstrictorVertSize     equ $  - ConstrictorVertices
  36++EE3B 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  36++EE3F 1F 19 04 08
  37++EE43 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  37++EE47 1F 02 00 20
  38++EE4B 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  38++EE4F 1F 23 1C 20
  39++EE53 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  39++EE57 1F 49 08 0C
  40++EE5B 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  40++EE5F 1F 37 18 20
  41++EE63 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  41++EE67 1F 56 10 24
  42++EE6B 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  42++EE6F 1F 58 0C 10
  43++EE73 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  43++EE77 1F 78 14 18
  44++EE7B 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  44++EE7F 1F 06 20 24
  45++EE83 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  45++EE87 05 99 30 38
  46++EE8B 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  46++EE8F 0A 99 2C 3C
  47++EE93 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  47++EE97 12 99 2C 34
  48++EE9B              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  49++EE9B              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  50++EE9B 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  50++EE9F 9F 18 4B 14
  51++EEA3 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  51++EEA7 1F 2C 4B 00
  52++EEAB 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  52++EEAF 9F 2C 4B 00
  53++EEB3 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  53++EEB7 1F 2C 4B 00
  54++EEBB 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  54++EEBF 5F 00 1B 00
  55++EEC3              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  56++EEC3              ConstrictorLen          equ $  - Constrictor
  57++EEC3
# file closed: ./Data/Ships/Constrictor.asm
 497+ EEC3                                      include "Data/Ships/Coriolis.asm"
# file opened: ./Data/Ships/Coriolis.asm
   1++EEC3 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEC6 3B EF                                DW CoriolisEdges
   3++EEC8 70                                   DB CoriolisEdgesSize
   4++EEC9 00 36                                DB $00, $36
   5++EECB 60                                   DB CoriolisVertSize
   6++EECC 1C                                   DB CoriolisEdgesCnt
   7++EECD 00 00                                DB $00, $00
   8++EECF 38                                   DB CoriolisNormalsSize
   9++EED0 78 F0 00                             DB $78, $F0, $00
  10++EED3 AB EF                                DW CoriolisNormals
  11++EED5 00 06                                DB $00, $06
  12++EED7 DB EE                                DW CoriolisVertices
  13++EED9 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++EEDB A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  14++EEDF 10 62
  15++EEE1 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  15++EEE5 20 83
  16++EEE7 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  16++EEEB 30 74
  17++EEED 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  17++EEF1 10 54
  18++EEF3 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  18++EEF7 51 A6
  19++EEF9 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  19++EEFD 62 B8
  20++EEFF A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  20++EF03 73 C8
  21++EF05 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  21++EF09 54 97
  22++EF0B A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  22++EF0F A6 DB
  23++EF11 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  23++EF15 B8 DC
  24++EF17 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  24++EF1B 97 DC
  25++EF1D 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  25++EF21 95 DA
  26++EF23 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  26++EF27 00 00
  27++EF29 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  27++EF2D 00 00
  28++EF2F 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  28++EF33 00 00
  29++EF35 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  29++EF39 00 00
  30++EF3B              CoriolisVertSize:       equ $ - CoriolisVertices
  31++EF3B 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  32++EF3F 1F 20 00 04                          DB $1F, $20, $00, $04
  33++EF43 1F 30 04 08                          DB $1F, $30, $04, $08
  34++EF47 1F 40 08 0C                          DB $1F, $40, $08, $0C
  35++EF4B 1F 51 0C 10                          DB $1F, $51, $0C, $10
  36++EF4F 1F 61 00 10                          DB $1F, $61, $00, $10
  37++EF53 1F 62 00 14                          DB $1F, $62, $00, $14
  38++EF57 1F 82 14 04                          DB $1F, $82, $14, $04
  39++EF5B 1F 83 04 18                          DB $1F, $83, $04, $18
  40++EF5F 1F 73 08 18                          DB $1F, $73, $08, $18
  41++EF63 1F 74 08 1C                          DB $1F, $74, $08, $1C
  42++EF67 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  43++EF6B 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  44++EF6F 1F DB 20 24                          DB $1F, $DB, $20, $24
  45++EF73 1F DC 24 28                          DB $1F, $DC, $24, $28
  46++EF77 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  47++EF7B 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  48++EF7F 1F A6 10 20                          DB $1F, $A6, $10, $20
  49++EF83 1F B6 14 20                          DB $1F, $B6, $14, $20
  50++EF87 1F B8 14 24                          DB $1F, $B8, $14, $24
  51++EF8B 1F C8 18 24                          DB $1F, $C8, $18, $24
  52++EF8F 1F C7 18 28                          DB $1F, $C7, $18, $28
  53++EF93 1F 97 1C 28                          DB $1F, $97, $1C, $28
  54++EF97 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  55++EF9B 1E 00 30 34                          DB $1E, $00, $30, $34
  56++EF9F 1E 00 34 38                          DB $1E, $00, $34, $38
  57++EFA3 1E 00 38 3C                          DB $1E, $00, $38, $3C
  58++EFA7 1E 00 3C 30                          DB $1E, $00, $3C, $30
  59++EFAB              CoriolisEdgesSize:      equ $ - CoriolisEdges
  60++EFAB              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  61++EFAB 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  62++EFAF 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  63++EFB3 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  64++EFB7 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  65++EFBB DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  66++EFBF 5F 00 A0 00                          DB $5F, $00, $A0, $00
  67++EFC3 1F A0 00 00                          DB $1F, $A0, $00, $00
  68++EFC7 9F A0 00 00                          DB $9F, $A0, $00, $00
  69++EFCB 1F 00 A0 00                          DB $1F, $00, $A0, $00
  70++EFCF FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  71++EFD3 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  72++EFD7 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  73++EFDB BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  74++EFDF 3F 00 00 A0                          DB $3F, $00, $00, $A0
  75++EFE3              CoriolisNormalsSize:    equ $ - CoriolisNormals
  76++EFE3              CoriolisLen:            equ $ - Coriolis
  77++EFE3
# file closed: ./Data/Ships/Coriolis.asm
 498+ EFE3                                      include "Data/Ships/Cougar.asm"
# file opened: ./Data/Ships/Cougar.asm
   1++EFE3 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFE6 6D F0                                DW CougarEdges
   3++EFE8 64                                   DB CougarEdgesSize
   4++EFE9 00 2A                                DB $00, $2A
   5++EFEB 72                                   DB CougarVertSize
   6++EFEC 19                                   DB CougarEdgesCnt
   7++EFED 00 00                                DB $00, $00
   8++EFEF 18                                   DB CougarNormalsSize
   9++EFF0 22 FC 28                             DB $22, $FC, $28
  10++EFF3 D1 F0                                DW CougarNormals
  11++EFF5 02 34                                DB $02, $34
  12++EFF7 FB EF                                DW CougarVertices
  13++EFF9 00 00                                DB 0,0                      ; Type and Tactics
  14++EFFB 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  14++EFFF 02 44
  15++F001 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  15++F005 01 22
  16++F007 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  16++F00B 01 55
  17++F00D 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  17++F011 04 55
  18++F013 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  18++F017 12 35
  19++F019 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  19++F01D 23 44
  20++F01F 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  20++F023 34 55
  21++F025 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  21++F029 01 11
  22++F02B 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  22++F02F 01 11
  23++F031 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  23++F035 34 44
  24++F037 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  24++F03B 34 44
  25++F03D 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  25++F041 00 44
  26++F043 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  26++F047 00 44
  27++F049 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  27++F04D 00 00
  28++F04F 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  28++F053 44 44
  29++F055 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  29++F059 55 55
  30++F05B 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  30++F05F 55 55
  31++F061 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  31++F065 55 55
  32++F067 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  32++F06B 55 55
  33++F06D              CougarVertSize:         equ $ - CougarVertices
  34++F06D 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  35++F071 1F 01 04 1C                          DB $1F, $01, $04, $1C
  36++F075 1F 01 1C 20                          DB $1F, $01, $1C, $20
  37++F079 1F 01 20 08                          DB $1F, $01, $20, $08
  38++F07D 1E 05 08 0C                          DB $1E, $05, $08, $0C
  39++F081 1E 45 0C 18                          DB $1E, $45, $0C, $18
  40++F085 1E 15 08 10                          DB $1E, $15, $08, $10
  41++F089 1E 35 10 18                          DB $1E, $35, $10, $18
  42++F08D 1F 34 18 28                          DB $1F, $34, $18, $28
  43++F091 1F 34 28 24                          DB $1F, $34, $28, $24
  44++F095 1F 34 24 14                          DB $1F, $34, $24, $14
  45++F099 1F 24 14 00                          DB $1F, $24, $14, $00
  46++F09D 1B 04 00 0C                          DB $1B, $04, $00, $0C
  47++F0A1 1B 12 04 10                          DB $1B, $12, $04, $10
  48++F0A5 1B 23 14 10                          DB $1B, $23, $14, $10
  49++F0A9 1A 01 04 08                          DB $1A, $01, $04, $08
  50++F0AD 1A 34 14 18                          DB $1A, $34, $14, $18
  51++F0B1 14 00 30 34                          DB $14, $00, $30, $34
  52++F0B5 12 00 34 2C                          DB $12, $00, $34, $2C
  53++F0B9 12 44 2C 38                          DB $12, $44, $2C, $38
  54++F0BD 14 44 38 30                          DB $14, $44, $38, $30
  55++F0C1 12 55 3C 40                          DB $12, $55, $3C, $40
  56++F0C5 14 55 40 48                          DB $14, $55, $40, $48
  57++F0C9 12 55 48 44                          DB $12, $55, $48, $44
  58++F0CD 14 55 44 3C                          DB $14, $55, $44, $3C
  59++F0D1              CougarEdgesSize:        equ $ - CougarEdges
  60++F0D1              CougarEdgesCnt:         equ CougarEdgesSize/4
  61++F0D1 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  62++F0D5 DF 10 2E 04                          DB $DF, $10, $2E, $04
  63++F0D9 5F 00 1B 05                          DB $5F, $00, $1B, $05
  64++F0DD 5F 10 2E 04                          DB $5F, $10, $2E, $04
  65++F0E1 1F 10 2E 04                          DB $1F, $10, $2E, $04
  66++F0E5 3E 00 00 A0                          DB $3E, $00, $00, $A0
  67++F0E9              CougarNormalsSize:      equ $ - CougarNormals
  68++F0E9              CougarLen:              equ $ - Cougar
  69++F0E9
# file closed: ./Data/Ships/Cougar.asm
 499+ F0E9                                      include "Data/Ships/Dodo.asm"
# file opened: ./Data/Ships/Dodo.asm
   1++F0E9 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0EC 91 F1                                DW DodoEdges
   3++F0EE 88                                   DB DodoEdgesSize
   4++F0EF 00 36                                DB $00, $36
   5++F0F1 90                                   DB DodoVertSize
   6++F0F2 22                                   DB DodoEdgesCnt
   7++F0F3 00 00                                DB $00, $00
   8++F0F5 30                                   DB DodoNormalsSize
   9++F0F6 7D F0 00                             DB $7D, $F0, $00
  10++F0F9 19 F2                                DW DodoNormals
  11++F0FB 00 00                                DB $00, $00
  12++F0FD 01 F1                                DW DodoVertices
  13++F0FF 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F101 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  14++F105 01 55
  15++F107 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  15++F10B 01 22
  16++F10D 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  16++F111 02 33
  17++F113 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  17++F117 03 44
  18++F119 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  18++F11D 04 55
  19++F11F 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  19++F123 15 66
  20++F125 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  20++F129 12 77
  21++F12B 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  21++F12F 23 88
  22++F131 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  22++F135 34 99
  23++F137 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  23++F13B 45 AA
  24++F13D 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  24++F141 16 77
  25++F143 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  25++F147 27 88
  26++F149 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  26++F14D 38 99
  27++F14F E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  27++F153 49 AA
  28++F155 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  28++F159 56 AA
  29++F15B 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  29++F15F 67 BB
  30++F161 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  30++F165 78 BB
  31++F167 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  31++F16B 89 BB
  32++F16D 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  32++F171 9A BB
  33++F173 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  33++F177 6A BB
  34++F179 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  34++F17D 00 00
  35++F17F 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  35++F183 00 00
  36++F185 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  36++F189 00 00
  37++F18B 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  37++F18F 00 00
  38++F191              DodoVertSize:           equ $ - DodoVertices
  39++F191 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  40++F195 1F 02 04 08                          DB $1F, $02, $04, $08
  41++F199 1F 03 08 0C                          DB $1F, $03, $08, $0C
  42++F19D 1F 04 0C 10                          DB $1F, $04, $0C, $10
  43++F1A1 1F 05 10 00                          DB $1F, $05, $10, $00
  44++F1A5 1F 16 14 28                          DB $1F, $16, $14, $28
  45++F1A9 1F 17 28 18                          DB $1F, $17, $28, $18
  46++F1AD 1F 27 18 2C                          DB $1F, $27, $18, $2C
  47++F1B1 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  48++F1B5 1F 38 1C 30                          DB $1F, $38, $1C, $30
  49++F1B9 1F 39 30 20                          DB $1F, $39, $30, $20
  50++F1BD 1F 49 20 34                          DB $1F, $49, $20, $34
  51++F1C1 1F 4A 34 24                          DB $1F, $4A, $34, $24
  52++F1C5 1F 5A 24 38                          DB $1F, $5A, $24, $38
  53++F1C9 1F 56 38 14                          DB $1F, $56, $38, $14
  54++F1CD 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  55++F1D1 1F 8B 40 44                          DB $1F, $8B, $40, $44
  56++F1D5 1F 9B 44 48                          DB $1F, $9B, $44, $48
  57++F1D9 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  58++F1DD 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  59++F1E1 1F 15 00 14                          DB $1F, $15, $00, $14
  60++F1E5 1F 12 04 18                          DB $1F, $12, $04, $18
  61++F1E9 1F 23 08 1C                          DB $1F, $23, $08, $1C
  62++F1ED 1F 34 0C 20                          DB $1F, $34, $0C, $20
  63++F1F1 1F 45 10 24                          DB $1F, $45, $10, $24
  64++F1F5 1F 67 28 3C                          DB $1F, $67, $28, $3C
  65++F1F9 1F 78 2C 40                          DB $1F, $78, $2C, $40
  66++F1FD 1F 89 30 44                          DB $1F, $89, $30, $44
  67++F201 1F 9A 34 48                          DB $1F, $9A, $34, $48
  68++F205 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  69++F209 1E 00 50 54                          DB $1E, $00, $50, $54
  70++F20D 14 00 54 5C                          DB $14, $00, $54, $5C
  71++F211 17 00 5C 58                          DB $17, $00, $5C, $58
  72++F215 14 00 58 50                          DB $14, $00, $58, $50
  73++F219              DodoEdgesSize:          equ $ - DodoEdges
  74++F219              DodoEdgesCnt:           equ DodoEdgesSize/4
  75++F219 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  76++F21D 1F 67 8E 58                          DB $1F, $67, $8E, $58
  77++F221 5F A9 37 59                          DB $5F, $A9, $37, $59
  78++F225 5F 00 B0 58                          DB $5F, $00, $B0, $58
  79++F229 DF A9 37 59                          DB $DF, $A9, $37, $59
  80++F22D 9F 67 8E 58                          DB $9F, $67, $8E, $58
  81++F231 3F 00 B0 58                          DB $3F, $00, $B0, $58
  82++F235 3F A9 37 59                          DB $3F, $A9, $37, $59
  83++F239 7F 67 8E 58                          DB $7F, $67, $8E, $58
  84++F23D FF 67 8E 58                          DB $FF, $67, $8E, $58
  85++F241 BF A9 37 59                          DB $BF, $A9, $37, $59
  86++F245 3F 00 00 C4                          DB $3F, $00, $00, $C4
  87++F249              DodoNormalsSize:        equ $ - DodoNormals
  88++F249              DodoLen:                equ $ - Dodo
  89++F249
# file closed: ./Data/Ships/Dodo.asm
 500+ F249                                      ENDIF
 501+ F249                                      IFDEF SHIPBANKB
 502+ F249 ~                                    include "Data/Ships/Dragon.asm"
 503+ F249 ~                                    include "Data/Ships/Escape_Pod.asm"
 504+ F249 ~                                    include "Data/Ships/Fer_De_Lance.asm"
 505+ F249 ~                                    include "Data/Ships/Gecko.asm"
 506+ F249 ~                                    include "Data/Ships/Ghavial.asm"
 507+ F249 ~                                    include "Data/Ships/Iguana.asm"
 508+ F249 ~                                    include "Data/Ships/Krait.asm"
 509+ F249 ~                                    include "Data/Ships/Logo.asm"
 510+ F249 ~                                    include "Data/Ships/Mamba.asm"
 511+ F249 ~                                    include "Data/Ships/Missile.asm"
 512+ F249 ~                                    include "Data/Ships/Monitor.asm"
 513+ F249 ~                                    include "Data/Ships/Moray.asm"
 514+ F249 ~                                    include "Data/Ships/Ophidian.asm"
 515+ F249 ~                                    include "Data/Ships/Plate.asm"
 516+ F249 ~                                    include "Data/Ships/Python.asm"
 517+ F249 ~                                    include "Data/Ships/Python_P.asm"
 518+ F249                                      ENDIF
 519+ F249                                      IFDEF SHIPBANKC
 520+ F249 ~                                    include "Data/Ships/Rattler.asm"
 521+ F249 ~                                    include "Data/Ships/Rock_Hermit.asm"
 522+ F249 ~                                    include "Data/Ships/ShuttleType9.asm"
 523+ F249 ~                                    include "Data/Ships/Shuttle_Mk_2.asm"
 524+ F249 ~                                    include "Data/Ships/Sidewinder.asm"
 525+ F249 ~                                    include "Data/Ships/Splinter.asm"
 526+ F249 ~                                    include "Data/Ships/TestVector.asm"
 527+ F249 ~                                    include "Data/Ships/Thargoid.asm"
 528+ F249 ~                                    include "Data/Ships/Thargon.asm"
 529+ F249 ~                                    include "Data/Ships/TransportType10.asm"
 530+ F249 ~                                    include "Data/Ships/Viper.asm"
 531+ F249 ~                                    include "Data/Ships/Worm.asm"
 532+ F249                                      ENDIF
 533+ F249
 534+ F249
 535+ F249              ; TODO Later reorg these offsets for better 16 bit read - Done
 536+ F249              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 537+ F249
 538+ F249
 539+ F249              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 540+ F249              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 541+ F249              ; Scoop: 0 = no scoop 1= scoop , anything more?
 542+ F249              ; hull byte#1-2 area for missile lock, lo, hi
 543+ F249              ; hull byte#3   edges data info offset lo
 544+ F249              ; hull byte#4   faces data info offset lo
 545+ F249              ; hull byte#5   4*maxlines+1 for ship lines stack
 546+ F249              ; hull byte#6   gun vertex*4
 547+ F249              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 548+ F249              ; hull byte#8   vertices*6
 549+ F249              ; hull byte#9	edge Count
 550+ F249              ; hull bytes#10-11 bounty lo hi
 551+ F249              ; hull byte#12  faces*4
 552+ F249              ; hull byte#13  dot beyond distance
 553+ F249              ; hull byte#14  energy
 554+ F249              ; hull byte#15  speed (end of 4th row)
 555+ F249              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 556+ F249              ; hull byte#17  faces offset hi
 557+ F249              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 558+ F249              ; hull byte#19  laser|missile(=lower 3 bits)
 559+ F249              ; hull byte#20  Added Vertices for 20,21
 560+ F249
 561+ F249              ; Optimised version to be applied to add data brought in to here:
 562+ F249              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 563+ F249              ; hull byte#1-2 area for missile lock, lo, hi
 564+ F249              ; hull byte#3   edges data info offset lo
 565+ F249              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 566+ F249              ; hull byte#5   4*maxlines+1 for ship lines stack
 567+ F249              ; hull byte#6   gun vertex*4
 568+ F249              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 569+ F249              ; hull byte#8   vertices*6
 570+ F249              ; hull byte#9	edge Count
 571+ F249              ; hull bytes#10-11 bounty lo hi
 572+ F249              ; hull byte#12  faces*4
 573+ F249              ; hull byte#13  dot beyond distance
 574+ F249              ; hull byte#14  energy
 575+ F249              ; hull byte#15  speed (end of 4th row)
 576+ F249              ; hull byte#16  faces data info offset lo (was 4)
 577+ F249              ; hull byte#17  faces offset hi
 578+ F249              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 579+ F249              ; hull bute#19  laser|missile(=lower 3 bits)
 580+ F249              ; hull byte#20  Added Vertices for 20,21
 581+ F249              ;
 582+ F249              ; Vertex Data Structure
 583+ F249              ; Byte 0 X1Lo
 584+ F249              ; Byte 1 X1Hi
 585+ F249              ; Byte 2 Y1Lo
 586+ F249              ; Byte 3 Y1Hi
 587+ F249              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 588+ F249              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 589+ F249              ;
 590+ F249              ;
 591+ F249              ; Edge Data Structure
 592+ F249              ; Byte 0
 593+ F249              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 594+ F249              ; Byte 2 - Index to Vertex 1
 595+ F249              ; Byte 3 - Index to Vertex 2
 596+ F249              ;
 597+ F249              ; Normal/Faces Data Structure
 598+ F249              ;
 599+ F249              ;
 600+ F249              ;
 601+ F249              ; Original Data:
 602+ F249              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 603+ F249              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 604+ F249              ;		\ hull byte#1-2 area for missile lock, lo, hi
 605+ F249              ;		\ hull byte#3   edges data info offset lo
 606+ F249              ;		\ hull byte#4   faces data info offset lo
 607+ F249              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 608+ F249              ;		\ hull byte#6   gun vertex*4
 609+ F249              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 610+ F249              ;		\ hull byte#8   vertices*6
 611+ F249              ;		\ hull bytes#10-11 bounty lo hi
 612+ F249              ;		\ hull byte#12  faces*4
 613+ F249              ;		\ hull byte#13  dot beyond distance
 614+ F249              ;		\ hull byte#14  energy
 615+ F249              ;		\ hull byte#15  speed (end of 4th row)
 616+ F249              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 617+ F249              ;		\ hull byte#17  faces offset hi
 618+ F249              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 619+ F249              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 620+ F249              ; Corrected pointers
 621+ F249              ; &565D \ Cargo cannister = Type 5
 622+ F249              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 623+ F249              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 624+ F249              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 625+ F249              ; Mapping Orginal to new
 626+ F249              ; 0    => 0
 627+ F249              ; 1-2  => 1-2
 628+ F249              ; 3    => EQU Edges
 629+ F249              ; 4    => EQU Normals
 630+ F249              ; 5    => EQU EdgesCnt
 631+ F249              ; 6    => 6
 632+ F249              ; 7    => 7
 633+ F249              ; 8    => EQU VertSize
 634+ F249              ; 9    => EQU EdgesCnt
 635+ F249              ; 10-11=> 10-11
 636+ F249              ; 12   => EQU  NormalsSize
 637+ F249              ; 13   => 13
 638+ F249              ; 14   => 14
 639+ F249              ; 15   => 15
 640+ F249              ; 16   => EQU Edges
 641+ F249              ; 17   => EQU Normals
 642+ F249              ; 18   => 18
 643+ F249              ; 19   => 19
# file closed: ./Data/ShipModels.asm
 977  F249              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 978  F249                  SLOT    ShipModelsAddr
 979  F249                  PAGE    BankShipModelsB
 980  F249              	ORG     ShipModelsAddr, BankShipModelsB
 981  E000                  UNDEFINE SHIPBANKA
 982  E000                  DEFINE   SHIPBANKB 1
 983  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000 ~                            DEFINE SHIPEQUATES
   3+ E000 ~            ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   4+ E000 ~            MissileLockLoOffset	    equ 1
   5+ E000 ~            MissileLockHiOffset	    equ 2
   6+ E000 ~            EdgeAddyOffset		    equ 3
   7+ E000 ~            LineX4Offset		    equ 5
   8+ E000 ~            GunVertexOffset		    equ 6
   9+ E000 ~            ExplosionCtOffset	    equ 7
  10+ E000 ~            VertexCtX6Offset	    equ 8
  11+ E000 ~            EdgeCountOffset		    equ 9
  12+ E000 ~            BountyLoOffset		    equ 10
  13+ E000 ~            BountyHiOffset		    equ 11
  14+ E000 ~            FaceCtX4Offset		    equ 12
  15+ E000 ~            DotOffset			    equ 13
  16+ E000 ~            EnergyOffset		    equ 14
  17+ E000 ~            SpeedOffset			    equ 15
  18+ E000 ~            FaceAddyOffset		    equ 16
  19+ E000 ~            QOffset				    equ 18
  20+ E000 ~            LaserOffset			    equ 19
  21+ E000 ~            VerticiesAddyOffset     equ 20
  22+ E000 ~            ShipTypeOffset          equ 22
  23+ E000 ~            ShipNewBitsOffset       equ 23
  24+ E000 ~            ShipDataLength          equ ShipNewBitsOffset+1
  25+ E000 ~
  26+ E000 ~            CobraTablePointer       equ 43
  27+ E000 ~            ;29 faulty
  28+ E000 ~            BankThreshold           equ 16
  29+ E000 ~
  30+ E000 ~            ShipTableALast          equ 23
  31+ E000 ~            ShipTableBLast          equ 39
  32+ E000 ~            ShipTableCLast          equ 55
  33+ E000                             ENDIF
  34+ E000
  35+ E000
  36+ E000
  37+ E000
  38+ E000
  39+ E000              ; For ship number A fetch the adjusted ship number in B and bank number in A for the respective ship based on the ship table
  40+ E000                                      IFDEF SHIPBANKA
  41+ E000 ~            GetShipModelAddress:
  42+ E000 ~            GetShipModelAddressA:   ld      c,a
  43+ E000 ~                                    ld      hl,ShipModelBankA                   ; Ship Model BankA, B and C are all the same value
  44+ E000                                      ENDIF
  45+ E000                                      IFDEF SHIPBANKB
  46+ E000 4F           GetShipModelAddressB:   ld      c,a
  47+ E001 21 A6 E0                             ld      hl,ShipModelBankB
  48+ E004                                      ENDIF
  49+ E004                                      IFDEF SHIPBANKC
  50+ E004 ~            GetShipModelAddressC:   ld      c,a
  51+ E004 ~                                    ld      hl,ShipModelBankC
  52+ E004                                      ENDIF
  53+ E004                                      JumpIfALTNusng ShipTableALast+1, .ShipBankA
  53+ E004 FE 18       >                        cp      ShipTableALast+1
  53+ E006 DA 15 E0    >                        jp		c,.ShipBankA
  54+ E009                                      JumpIfALTNusng ShipTableBLast+1, .ShipBankB
  54+ E009 FE 28       >                        cp      ShipTableBLast+1
  54+ E00B DA 19 E0    >                        jp		c,.ShipBankB
  55+ E00E                                      JumpIfALTNusng ShipTableCLast+1, .ShipBankC
  55+ E00E FE 38       >                        cp      ShipTableCLast+1
  55+ E010 DA 1E E0    >                        jp		c,.ShipBankC
  56+ E013              .Failed:                SetCarryFlag                                ; if its over current bank max then a failure
  56+ E013 37          >                        scf
  57+ E014 C9                                   ret
  58+ E015 47           .ShipBankA:             ld      b,a
  59+ E016 C3 20 E0                             jp      .Done
  60+ E019 D6 18        .ShipBankB:             sub     a,ShipTableALast+1
  61+ E01B C3 20 E0                             jp      .Done
  62+ E01E D6 28        .ShipBankC:             sub     a,ShipTableBLast+1
  63+ E020 3E 3B        .Done:                  ld      a,BankShipModelsA
  64+ E022                                      ClearCarryFlag
  64+ E022 B7          >                        or a
  65+ E023 C9                                   ret
  66+ E024
  67+ E024              ;GINF:
  68+ E024                                      IFDEF SHIPBANKA
  69+ E024 ~            GetInfo:                                    ; gets pointer to ship data for ship type in a
  70+ E024 ~            GetInfoA:                                   ; gets pointer to ship data for ship type in a
  71+ E024                                      ENDIF
  72+ E024                                      IFDEF SHIPBANKB
  73+ E024              GetInfoB:
  74+ E024                                      ENDIF
  75+ E024                                      IFDEF SHIPBANKC
  76+ E024 ~            GetInfoC:
  77+ E024                                      ENDIF
  78+ E024 4F                                   ld          c,a
  79+ E025 CB 2F                                sra         a
  80+ E027 CB 2F                                sra         a
  81+ E029 CB 2F                                sra         a
  82+ E02B CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  83+ E02D 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  84+ E02E 21 A6 E0                             ld          hl,ShipModelBankA
  85+ E031 ED 31                                add         hl,a
  86+ E033 7E                                   ld          a,(hl)
  87+ E034                                      MMUSelectShipModelA
  87+ E034 ED 92 57    >					 nextreg ShipModelMMU,	    a
  88+ E037 79                                   ld          a,c
  89+ E038 50                                   ld          d,b
  90+ E039 1E 10                                ld          e,16
  91+ E03B ED 30                                mul
  92+ E03D 93                                   sub         a,e
  93+ E03E 21 A9 E0                             ld          hl,ShipModelTable
  94+ E041 ED 31                                add         hl,a
  95+ E043 ED 31                                add         hl,a
  96+ E045 5E                                   ld          e,(hl)
  97+ E046 23                                   inc         hl
  98+ E047 56                                   ld          d,(hl)
  99+ E048 C9                                   ret
 100+ E049
 101+ E049
 102+ E049              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
 103+ E049                                      IFDEF SHIPBANKA
 104+ E049 ~            CopyVerticesDataToUBnk:
 105+ E049 ~            CopyVerticesDataToUBnkA:
 106+ E049                                      ENDIF
 107+ E049                                      IFDEF SHIPBANKB
 108+ E049              CopyVerticesDataToUBnkB:
 109+ E049                                      ENDIF
 110+ E049                                      IFDEF SHIPBANKC
 111+ E049 ~            CopyVerticesDataToUBnkC:
 112+ E049                                      ENDIF
 113+ E049 2A 12 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 114+ E04C 11 16 C3                             ld          de,UBnkHullVerticies
 115+ E04F 06 00                                ld          b,0
 116+ E051 3A 06 C3                             ld			a,(VertexCtX6Addr)
 117+ E054 4F                                   ld          c,a
 118+ E055 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 119+ E056 CD AD 90                             call        memcopy_dma
 120+ E059 C9                                   ret
 121+ E05A
 122+ E05A                                      IFDEF SHIPBANKA
 123+ E05A ~            CopyEdgeDataToUBnk:
 124+ E05A ~            CopyEdgeDataToUBnkA:
 125+ E05A                                      ENDIF
 126+ E05A                                      IFDEF SHIPBANKB
 127+ E05A              CopyEdgeDataToUBnkB:
 128+ E05A                                      ENDIF
 129+ E05A                                      IFDEF SHIPBANKC
 130+ E05A ~            CopyEdgeDataToUBnkC:
 131+ E05A                                      ENDIF
 132+ E05A 2A 01 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 133+ E05D 11 42 C4                             ld          de,UBnkHullEdges
 134+ E060 06 00                                ld          b,0
 135+ E062 3A 03 C3                             ld			a,(LineX4Addr)
 136+ E065 4F                                   ld          c,a
 137+ E066 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 138+ E067 CD AD 90                             call        memcopy_dma
 139+ E06A C9                                   ret
 140+ E06B
 141+ E06B                                      IFDEF SHIPBANKA
 142+ E06B ~            CopyNormalDataToUBnk:
 143+ E06B ~            CopyNormalDataToUBnkA:
 144+ E06B                                      ENDIF
 145+ E06B                                      IFDEF SHIPBANKB
 146+ E06B              CopyNormalDataToUBnkB:
 147+ E06B                                      ENDIF
 148+ E06B                                      IFDEF SHIPBANKC
 149+ E06B ~            CopyNormalDataToUBnkC:
 150+ E06B                                      ENDIF
 151+ E06B 2A 0E C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 152+ E06E 11 F2 C8                             ld          de,UBnkHullNormals
 153+ E071 06 00                                ld          b,0
 154+ E073 3A 0A C3                             ld          a,(FaceCtX4Addr)
 155+ E076 4F                                   ld          c,a
 156+ E077 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 157+ E078 CD AD 90                             call        memcopy_dma
 158+ E07B C9                                   ret
 159+ E07C
 160+ E07C
 161+ E07C                                      IFDEF SHIPBANKA
 162+ E07C ~            CopyShipDataToUBnk:
 163+ E07C ~            CopyShipDataToUBnkA:    push        af
 164+ E07C ~                                    ld          a,BankShipModelsA
 165+ E07C                                      ENDIF
 166+ E07C                                      IFDEF SHIPBANKB
 167+ E07C F5           CopyShipDataToUBnkB:    push        af
 168+ E07D 3E 43                                ld          a,BankShipModelsB
 169+ E07F                                      ENDIF
 170+ E07F                                      IFDEF SHIPBANKC
 171+ E07F ~            CopyShipDataToUBnkC:    push        af
 172+ E07F ~                                    ld          a,BankShipModelsC
 173+ E07F                                      ENDIF
 174+ E07F 32 FC C2                             ld          (UBnkShipModelBank),a
 175+ E082 F1                                   pop         af                              ; save the current ship number and bank in case we need it later, say for a space station
 176+ E083 32 FD C2                             ld			(UBnkShipModelNbr),a			; mark ship type in bank
 177+ E086
 178+ E086 21 39 E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 179+ E089 ED 31                                add         hl,a
 180+ E08B ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 181+ E08D 4E                                   ld          c,(hl)
 182+ E08E 23                                   inc         hl
 183+ E08F 46                                   ld          b,(hl)                      ; bc now equals length of data set
 184+ E090 CD 24 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 185+ E093 EB                                   ex          de,hl                       ; hl = address of Ship Data
 186+ E094 11 FE C2                             ld          de,UBnkHullCopy             ; Universe bank
 187+ E097 01 18 00                             ld          bc,ShipDataLength
 188+ E09A ED B0                                ldir
 189+ E09C CD 49 E0                             call        CopyVerticesDataToUBnk
 190+ E09F CD 5A E0                             call        CopyEdgeDataToUBnk
 191+ E0A2 CD 6B E0                             call        CopyNormalDataToUBnk
 192+ E0A5 C9                                   ret
 193+ E0A6
 194+ E0A6              ; change to there are two banks
 195+ E0A6              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 196+ E0A6              ;
 197+ E0A6
 198+ E0A6
 199+ E0A6
 200+ E0A6
 201+ E0A6              ; Ships in Bank A
 202+ E0A6                                       IFDEF SHIPBANKA
 203+ E0A6 ~            ShipModelBankA           DB BankShipModelsA
 204+ E0A6 ~                                     DB BankShipModelsB
 205+ E0A6 ~                                     DB BankShipModelsC
 206+ E0A6                                       ENDIF
 207+ E0A6                                       IFDEF SHIPBANKB
 208+ E0A6 3B           ShipModelBankB           DB BankShipModelsA
 209+ E0A7 43                                    DB BankShipModelsB
 210+ E0A8 44                                    DB BankShipModelsC
 211+ E0A9                                       ENDIF
 212+ E0A9                                       IFDEF SHIPBANKC
 213+ E0A9 ~            ShipModelBankC           DB BankShipModelsA
 214+ E0A9 ~                                     DB BankShipModelsB
 215+ E0A9 ~                                     DB BankShipModelsC
 216+ E0A9                                       ENDIF
 217+ E0A9                                       IFDEF SHIPBANKA
 218+ E0A9 ~            ShipModelTableA:         DW Adder                                   ;00
 219+ E0A9 ~                                     DW Anaconda                                ;01
 220+ E0A9 ~                                     DW Asp_Mk_2                                ;02
 221+ E0A9 ~                                     DW Asteroid                                ;03
 222+ E0A9 ~                                     DW Boa                                     ;04
 223+ E0A9 ~                                     DW Boulder                                 ;05
 224+ E0A9 ~                                     DW Bushmaster                              ;06
 225+ E0A9 ~                                     DW CargoType5                              ;07
 226+ E0A9 ~                                     DW Chameleon                               ;08
 227+ E0A9 ~                                     DW CobraMk3                                ;09
 228+ E0A9 ~                                     DW Cobra_Mk_1                              ;10
 229+ E0A9 ~                                     DW Cobra_Mk_3_P                            ;11
 230+ E0A9 ~                                     DW Constrictor                             ;12
 231+ E0A9 ~                                     DW Coriolis                                ;13
 232+ E0A9 ~                                     DW Cougar                                  ;14
 233+ E0A9 ~                                     DW Dodo                                    ;15
 234+ E0A9 ~                                     DW Dragon                                  ;16
 235+ E0A9 ~                                     DW Escape_Pod                              ;17
 236+ E0A9 ~                                     DW Fer_De_Lance                            ;18
 237+ E0A9 ~                                     DW Gecko                                   ;19
 238+ E0A9 ~                                     DW Ghavial                                 ;20
 239+ E0A9 ~                                     DW Iguana                                  ;21
 240+ E0A9 ~                                     DW Krait                                   ;22
 241+ E0A9 ~                                     DW Logo                                    ;23
 242+ E0A9 ~            ShipVertexTableA:        DW AdderVertices
 243+ E0A9 ~                                     DW AnacondaVertices
 244+ E0A9 ~                                     DW Asp_Mk_2Vertices
 245+ E0A9 ~                                     DW AsteroidVertices
 246+ E0A9 ~                                     DW BoaVertices
 247+ E0A9 ~                                     DW BoulderVertices
 248+ E0A9 ~                                     DW BushmasterVertices
 249+ E0A9 ~                                     DW CargoType5Vertices
 250+ E0A9 ~                                     DW ChameleonVertices
 251+ E0A9 ~                                     DW CobraMk3Vertices
 252+ E0A9 ~                                     DW Cobra_Mk_1Vertices
 253+ E0A9 ~                                     DW Cobra_Mk_3_PVertices
 254+ E0A9 ~                                     DW ConstrictorVertices
 255+ E0A9 ~                                     DW CoriolisVertices
 256+ E0A9 ~                                     DW CougarVertices
 257+ E0A9 ~                                     DW DodoVertices
 258+ E0A9 ~            ShipEdgeTableA:          DW AdderEdges
 259+ E0A9 ~                                     DW AnacondaEdges
 260+ E0A9 ~                                     DW Asp_Mk_2Edges
 261+ E0A9 ~                                     DW AsteroidEdges
 262+ E0A9 ~                                     DW BoaEdges
 263+ E0A9 ~                                     DW BoulderEdges
 264+ E0A9 ~                                     DW BushmasterEdges
 265+ E0A9 ~                                     DW CargoType5Edges
 266+ E0A9 ~                                     DW ChameleonEdges
 267+ E0A9 ~                                     DW CobraMk3Edges
 268+ E0A9 ~                                     DW Cobra_Mk_1Edges
 269+ E0A9 ~                                     DW Cobra_Mk_3_PEdges
 270+ E0A9 ~                                     DW ConstrictorEdges
 271+ E0A9 ~                                     DW CoriolisEdges
 272+ E0A9 ~                                     DW CougarEdges
 273+ E0A9 ~                                     DW DodoEdges
 274+ E0A9 ~            ShipNormalTableA:        DW AdderNormals
 275+ E0A9 ~                                     DW AnacondaNormals
 276+ E0A9 ~                                     DW Asp_Mk_2Normals
 277+ E0A9 ~                                     DW AsteroidNormals
 278+ E0A9 ~                                     DW BoaNormals
 279+ E0A9 ~                                     DW BoulderNormals
 280+ E0A9 ~                                     DW BushmasterNormals
 281+ E0A9 ~                                     DW CargoType5Normals
 282+ E0A9 ~                                     DW ChameleonNormals
 283+ E0A9 ~                                     DW CobraMk3Normals
 284+ E0A9 ~                                     DW Cobra_Mk_1Normals
 285+ E0A9 ~                                     DW Cobra_Mk_3_PNormals
 286+ E0A9 ~                                     DW ConstrictorNormals
 287+ E0A9 ~                                     DW CoriolisNormals
 288+ E0A9 ~                                     DW CougarNormals
 289+ E0A9 ~                                     DW DodoNormals
 290+ E0A9 ~            ShipModelSizeTableA:     DW AdderLen
 291+ E0A9 ~                                     DW AnacondaLen
 292+ E0A9 ~                                     DW Asp_Mk_2Len
 293+ E0A9 ~                                     DW AsteroidLen
 294+ E0A9 ~                                     DW BoaLen
 295+ E0A9 ~                                     DW BoulderLen
 296+ E0A9 ~                                     DW BushmasterLen
 297+ E0A9 ~                                     DW CargoType5Len
 298+ E0A9 ~                                     DW ChameleonLen
 299+ E0A9 ~                                     DW CobraMk3Len
 300+ E0A9 ~                                     DW Cobra_Mk_1Len
 301+ E0A9 ~                                     DW Cobra_Mk_3_PLen
 302+ E0A9 ~                                     DW ConstrictorLen
 303+ E0A9 ~                                     DW CoriolisLen
 304+ E0A9 ~                                     DW CougarLen
 305+ E0A9 ~                                     DW DodoLen
 306+ E0A9                                       ENDIF
 307+ E0A9                                       IFDEF SHIPBANKB
 308+ E0A9 49 E1        ShipModelTableB:         DW Dragon                                  ;24
 309+ E0AB 23 E2                                 DW Escape_Pod                              ;25
 310+ E0AD 7B E2                                 DW Fer_De_Lance                            ;26
 311+ E0AF 99 E3                                 DW Gecko                                   ;27
 312+ E0B1 61 E4                                 DW Ghavial                                 ;28
 313+ E0B3 49 E5                                 DW Iguana                                  ;29
 314+ E0B5 3F E6                                 DW Krait                                   ;30
 315+ E0B7 29 E7                                 DW Logo                                    ;31
 316+ E0B9 E5 E8                                 DW Mamba                                   ;32
 317+ E0BB 17 EA                                 DW Missile                                 ;33
 318+ E0BD 19 EB                                 DW Monitor                                 ;34
 319+ E0BF 1F EC                                 DW Moray                                   ;35
 320+ E0C1 FB EC                                 DW Ophidian                                ;36
 321+ E0C3 33 EE                                 DW Plate                                   ;37
 322+ E0C5 71 EE                                 DW Python                                  ;38
 323+ E0C7 67 EF                                 DW Python_P                                ;39
 324+ E0C9 61 E1        ShipVertexTableB:        DW DragonVertices
 325+ E0CB 3B E2                                 DW Escape_PodVertices
 326+ E0CD 93 E2                                 DW Fer_De_LanceVertices
 327+ E0CF B1 E3                                 DW GeckoVertices
 328+ E0D1 79 E4                                 DW GhavialVertices
 329+ E0D3 61 E5                                 DW IguanaVertices
 330+ E0D5 57 E6                                 DW KraitVertices
 331+ E0D7 41 E7                                 DW LogoVertices
 332+ E0D9 FD E8                                 DW MambaVertices
 333+ E0DB 2F EA                                 DW MissileVertices
 334+ E0DD 31 EB                                 DW MonitorVertices
 335+ E0DF 37 EC                                 DW MorayVertices
 336+ E0E1 13 ED                                 DW OphidianVertices
 337+ E0E3 4B EE                                 DW PlateVertices
 338+ E0E5 89 EE                                 DW PythonVertices
 339+ E0E7 7F EF                                 DW Python_PVertices
 340+ E0E9 97 E1        ShipEdgeTableB:          DW DragonEdges
 341+ E0EB 53 E2                                 DW Escape_PodEdges
 342+ E0ED 05 E3                                 DW Fer_De_LanceEdges
 343+ E0EF F9 E3                                 DW GeckoEdges
 344+ E0F1 C1 E4                                 DW GhavialEdges
 345+ E0F3 BB E5                                 DW IguanaEdges
 346+ E0F5 BD E6                                 DW KraitEdges
 347+ E0F7 3D E8                                 DW LogoEdges
 348+ E0F9 93 E9                                 DW MambaEdges
 349+ E0FB 95 EA                                 DW MissileEdges
 350+ E0FD 97 EB                                 DW MonitorEdges
 351+ E0FF 8B EC                                 DW MorayEdges
 352+ E101 8B ED                                 DW OphidianEdges
 353+ E103 5D EE                                 DW PlateEdges
 354+ E105 CB EE                                 DW PythonEdges
 355+ E107 C1 EF                                 DW Python_PEdges
 356+ E109 EB E1        ShipNormalTableB:        DW DragonNormals
 357+ E10B 6B E2                                 DW Escape_PodNormals
 358+ E10D 71 E3                                 DW Fer_De_LanceNormals
 359+ E10F 3D E4                                 DW GeckoNormals
 360+ E111 19 E5                                 DW GhavialNormals
 361+ E113 17 E6                                 DW IguanaNormals
 362+ E115 11 E7                                 DW KraitNormals
 363+ E117 D1 E8                                 DW LogoNormals
 364+ E119 03 EA                                 DW MambaNormals
 365+ E11B F5 EA                                 DW MissileNormals
 366+ E11D F3 EB                                 DW MonitorNormals
 367+ E11F D7 EC                                 DW MorayNormals
 368+ E121 03 EE                                 DW OphidianNormals
 369+ E123 6D EE                                 DW PlateNormals
 370+ E125 33 EF                                 DW PythonNormals
 371+ E127 29 F0                                 DW Python_PNormals
 372+ E129 DA 00        ShipModelSizeTableB:     DW DragonLen
 373+ E12B 58 00                                 DW Escape_PodLen
 374+ E12D 1E 01                                 DW Fer_De_LanceLen
 375+ E12F C8 00                                 DW GeckoLen
 376+ E131 E8 00                                 DW GhavialLen
 377+ E133 F6 00                                 DW IguanaLen
 378+ E135 EA 00                                 DW KraitLen
 379+ E137 BC 01                                 DW LogoLen
 380+ E139 32 01                                 DW MambaLen
 381+ E13B 02 01                                 DW MissileLen
 382+ E13D 06 01                                 DW MonitorLen
 383+ E13F DC 00                                 DW MorayLen
 384+ E141 38 01                                 DW OphidianLen
 385+ E143 3E 00                                 DW PlateLen
 386+ E145 F6 00                                 DW PythonLen
 387+ E147 F6 00                                 DW Python_PLen
 388+ E149                                       ENDIF
 389+ E149                                       IFDEF SHIPBANKC
 390+ E149 ~            ShipModelTableC:         DW Rattler                                 ;40
 391+ E149 ~                                     DW Rock_Hermit                             ;41
 392+ E149 ~                                     DW ShuttleType9                            ;42
 393+ E149 ~                                     DW Shuttle_Mk_2                            ;43
 394+ E149 ~                                     DW Sidewinder                              ;44
 395+ E149 ~                                     DW Splinter                                ;45
 396+ E149 ~                                     DW TestVector                              ;46
 397+ E149 ~                                     DW Thargoid                                ;47
 398+ E149 ~                                     DW Thargon                                 ;48
 399+ E149 ~                                     DW TransportType10                         ;49
 400+ E149 ~                                     DW Viper                                   ;50
 401+ E149 ~                                     DW Worm                                    ;51
 402+ E149 ~                                     DW 0                                       ;52
 403+ E149 ~                                     DW 0                                       ;53
 404+ E149 ~                                     DW 0                                       ;54
 405+ E149 ~                                     DW 0                                       ;55
 406+ E149 ~            ShipVertexTableC:        DW RattlerVertices
 407+ E149 ~                                     DW Rock_HermitVertices
 408+ E149 ~                                     DW ShuttleType9Vertices
 409+ E149 ~                                     DW Shuttle_Mk_2Vertices
 410+ E149 ~                                     DW SidewinderVertices
 411+ E149 ~                                     DW SplinterVertices
 412+ E149 ~                                     DW TestVectorVertices
 413+ E149 ~                                     DW ThargoidVertices
 414+ E149 ~                                     DW ThargonVertices
 415+ E149 ~                                     DW TransportType10Vertices
 416+ E149 ~                                     DW ViperVertices
 417+ E149 ~                                     DW WormVertices
 418+ E149 ~                                     DW 0
 419+ E149 ~                                     DW 0
 420+ E149 ~                                     DW 0
 421+ E149 ~                                     DW 0
 422+ E149 ~            ShipEdgeTableC:          DW RattlerEdges
 423+ E149 ~                                     DW Rock_HermitEdges
 424+ E149 ~                                     DW ShuttleType9Edges
 425+ E149 ~                                     DW Shuttle_Mk_2Edges
 426+ E149 ~                                     DW SidewinderEdges
 427+ E149 ~                                     DW SplinterEdges
 428+ E149 ~                                     DW TestVectorEdges
 429+ E149 ~                                     DW ThargoidEdges
 430+ E149 ~                                     DW ThargonEdges
 431+ E149 ~                                     DW TransportType10Edges
 432+ E149 ~                                     DW ViperEdges
 433+ E149 ~                                     DW WormEdges
 434+ E149 ~                                     DW 0
 435+ E149 ~                                     DW 0
 436+ E149 ~                                     DW 0
 437+ E149 ~                                     DW 0
 438+ E149 ~            ShipNormalTableC:        DW RattlerNormals
 439+ E149 ~                                     DW Rock_HermitNormals
 440+ E149 ~                                     DW ShuttleType9Normals
 441+ E149 ~                                     DW Shuttle_Mk_2Normals
 442+ E149 ~                                     DW SidewinderNormals
 443+ E149 ~                                     DW SplinterNormals
 444+ E149 ~                                     DW TestVectorNormals
 445+ E149 ~                                     DW ThargoidNormals
 446+ E149 ~                                     DW ThargonNormals
 447+ E149 ~                                     DW TransportType10Normals
 448+ E149 ~                                     DW ViperNormals
 449+ E149 ~                                     DW WormNormals
 450+ E149 ~                                     DW 0
 451+ E149 ~                                     DW 0
 452+ E149 ~                                     DW 0
 453+ E149 ~                                     DW 0
 454+ E149 ~            ShipModelSizeTableC:     DW RattlerLen
 455+ E149 ~                                     DW Rock_HermitLen
 456+ E149 ~                                     DW ShuttleType9Len
 457+ E149 ~                                     DW Shuttle_Mk_2Len
 458+ E149 ~                                     DW SidewinderLen
 459+ E149 ~                                     DW SplinterLen
 460+ E149 ~                                     DW TestVectorLen
 461+ E149 ~                                     DW ThargoidLen
 462+ E149 ~                                     DW ThargonLen
 463+ E149 ~                                     DW TransportType10Len
 464+ E149 ~                                     DW ViperLen
 465+ E149 ~                                     DW WormLen
 466+ E149 ~                                     DW 0
 467+ E149 ~                                     DW 0
 468+ E149 ~                                     DW 0
 469+ E149 ~                                     DW 0
 470+ E149                                       ENDIF
 471+ E149
 472+ E149
 473+ E149                                      IFNDEF SHIPMODELTABLES
 474+ E149 ~                                    DEFINE SHIPMODELTABLES
 475+ E149 ~            ShipModelSizeTable:     EQU ShipModelSizeTableA
 476+ E149 ~            ShipModelBank:          EQU ShipModelBankA
 477+ E149 ~            ShipModelTable:         EQU ShipModelTableA
 478+ E149 ~            ShipVertexTable:        EQU ShipVertexTableA
 479+ E149 ~            ShipEdgeTable:          EQU ShipEdgeTableA
 480+ E149 ~            ShipNormalTable:        EQU ShipNormalTableA
 481+ E149                                      ENDIF
 482+ E149
 483+ E149                                      IFDEF SHIPBANKA
 484+ E149 ~                                    include "Data/Ships/Adder.asm"
 485+ E149 ~                                    include "Data/Ships/Anaconda.asm"
 486+ E149 ~                                    include "Data/Ships/Asp_Mk_2.asm"
 487+ E149 ~                                    include "Data/Ships/Asteroid.asm"
 488+ E149 ~                                    include "Data/Ships/Boa.asm"
 489+ E149 ~                                    include "Data/Ships/Boulder.asm"
 490+ E149 ~                                    include "Data/Ships/Bushmaster.asm"
 491+ E149 ~                                    include "Data/Ships/CargoType5.asm"
 492+ E149 ~                                    include "Data/Ships/Chameleon.asm"
 493+ E149 ~                                    include "Data/Ships/CobraMk3.asm"
 494+ E149 ~                                    include "Data/Ships/Cobra_Mk_1.asm"
 495+ E149 ~                                    include "Data/Ships/Cobra_Mk_3_P.asm"
 496+ E149 ~                                    include "Data/Ships/Constrictor.asm"
 497+ E149 ~                                    include "Data/Ships/Coriolis.asm"
 498+ E149 ~                                    include "Data/Ships/Cougar.asm"
 499+ E149 ~                                    include "Data/Ships/Dodo.asm"
 500+ E149                                      ENDIF
 501+ E149                                      IFDEF SHIPBANKB
 502+ E149                                      include "Data/Ships/Dragon.asm"
# file opened: ./Data/Ships/Dragon.asm
   1++E149 00 66 50     Dragon:	                DB $00, $66, $50
   2++E14C 97 E1                                DW DragonEdges
   3++E14E 54                                   DB DragonEdgesSize
   4++E14F 00 3C                                DB $00, $3C
   5++E151 36                                   DB DragonVertSize
   6++E152 15                                   DB DragonEdgesCnt
   7++E153 00 00                                DB $00, $00
   8++E155 38                                   DB DragonNormalsSize
   9++E156 20 F7 14                             DB $20, $F7, $14
  10++E159 EB E1                                DW DragonNormals
  11++E15B 00 47                                DB $00, $47
  12++E15D 61 E1                                DW DragonVertices
  13++E15F 00 00                                DB 0,0                      ; Type and Tactics
  14++E161 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  14++E165 6B 05
  15++E167 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  15++E16B 67 01
  16++E16D D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  16++E171 78 12
  17++E173 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  17++E177 CD 23
  18++E179 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  18++E17D CD 89
  19++E17F D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  19++E183 9A 34
  20++E185 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  20++E189 AB 45
  21++E18B 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  21++E18F FF FF
  22++E191 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E195 FF FF
  23++E197              DragonVertSize:         equ $ - DragonVertices
  24++E197 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  25++E19B 1F 12 08 1C                          DB $1F, $12, $08, $1C
  26++E19F 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  27++E1A3 1F 34 14 1C                          DB $1F, $34, $14, $1C
  28++E1A7 1F 45 18 1C                          DB $1F, $45, $18, $1C
  29++E1AB 1F 50 00 1C                          DB $1F, $50, $00, $1C
  30++E1AF 1F 67 04 20                          DB $1F, $67, $04, $20
  31++E1B3 1F 78 08 20                          DB $1F, $78, $08, $20
  32++E1B7 1F 89 10 20                          DB $1F, $89, $10, $20
  33++E1BB 1F 9A 14 20                          DB $1F, $9A, $14, $20
  34++E1BF 1F AB 18 20                          DB $1F, $AB, $18, $20
  35++E1C3 1F B6 00 20                          DB $1F, $B6, $00, $20
  36++E1C7 1F 06 00 04                          DB $1F, $06, $00, $04
  37++E1CB 1F 17 04 08                          DB $1F, $17, $04, $08
  38++E1CF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  39++E1D3 1F 5B 00 18                          DB $1F, $5B, $00, $18
  40++E1D7 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  41++E1DB 1F 8C 08 10                          DB $1F, $8C, $08, $10
  42++E1DF 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  43++E1E3 1F 9D 10 14                          DB $1F, $9D, $10, $14
  44++E1E7 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  45++E1EB              DragonEdgesSize:        equ $ - DragonEdges
  46++E1EB              DragonEdgesCnt:         equ DragonEdgesSize/4
  47++E1EB 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  48++E1EF 1F 21 5A 00                          DB $1F, $21, $5A, $00
  49++E1F3 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  50++E1F7 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  51++E1FB 9F 21 5A 00                          DB $9F, $21, $5A, $00
  52++E1FF 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  53++E203 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  54++E207 5F 21 5A 00                          DB $5F, $21, $5A, $00
  55++E20B 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  56++E20F FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  57++E213 DF 21 5A 00                          DB $DF, $21, $5A, $00
  58++E217 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  59++E21B 3F 30 00 52                          DB $3F, $30, $00, $52
  60++E21F BF 30 00 52                          DB $BF, $30, $00, $52
  61++E223              DragonNormalsSize:      equ $ - DragonNormals
  62++E223              DragonLen:              equ $ - Dragon
  63++E223
# file closed: ./Data/Ships/Dragon.asm
 503+ E223                                      include "Data/Ships/Escape_Pod.asm"
# file opened: ./Data/Ships/Escape_Pod.asm
   1++E223 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E226 53 E2                                DW Escape_PodEdges
   3++E228 18                                   DB Escape_PodEdgesSize
   4++E229 00 16                                DB $00, $16
   5++E22B 18                                   DB Escape_PodVertSize
   6++E22C 06                                   DB Escape_PodEdgesCnt
   7++E22D 00 00                                DB $00, $00
   8++E22F 10                                   DB Escape_PodNormalsSize
   9++E230 08 11 08                             DB $08, $11, $08
  10++E233 6B E2                                DW Escape_PodNormals
  11++E235 04 00                                DB $04, $00
  12++E237 3B E2                                DW Escape_PodVertices
  13++E239 00 00                                DB 0,0                      ; Type and Tactics
  14++E23B 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  14++E23F 12 33
  15++E241 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  15++E245 02 33
  16++E247 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  16++E24B 01 33
  17++E24D 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  17++E251 01 22
  18++E253              Escape_PodVertSize:     equ $ - Escape_PodVertices
  19++E253 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  20++E257 1F 03 04 08                          DB $1F, $03, $04, $08
  21++E25B 1F 01 08 0C                          DB $1F, $01, $08, $0C
  22++E25F 1F 12 0C 00                          DB $1F, $12, $0C, $00
  23++E263 1F 13 00 08                          DB $1F, $13, $00, $08
  24++E267 1F 02 0C 04                          DB $1F, $02, $0C, $04
  25++E26B              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  26++E26B              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  27++E26B 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  28++E26F 1F 27 67 1E                          DB $1F, $27, $67, $1E
  29++E273 5F 27 67 1E                          DB $5F, $27, $67, $1E
  30++E277 9F 70 00 00                          DB $9F, $70, $00, $00
  31++E27B              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  32++E27B              Escape_PodLen:          equ $ - Escape_Pod
  33++E27B
# file closed: ./Data/Ships/Escape_Pod.asm
 504+ E27B                                      include "Data/Ships/Fer_De_Lance.asm"
# file opened: ./Data/Ships/Fer_De_Lance.asm
   1++E27B 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E27E 05 E3                                DW Fer_De_LanceEdges
   3++E280 6C                                   DB Fer_De_LanceEdgesSize
   4++E281 00 1A                                DB $00, $1A
   5++E283 72                                   DB Fer_De_LanceVertSize
   6++E284 1B                                   DB Fer_De_LanceEdgesCnt
   7++E285 00 00                                DB $00, $00
   8++E287 28                                   DB Fer_De_LanceNormalsSize
   9++E288 28 A0 1E                             DB $28, $A0, $1E
  10++E28B 71 E3                                DW Fer_De_LanceNormals
  11++E28D 01 12                                DB $01, $12
  12++E28F 93 E2                                DW Fer_De_LanceVertices
  13++E291 00 00                                DB 0,0                      ; Type and Tactics
  14++E293 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  14++E297 01 59
  15++E299 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  15++E29D 12 99
  16++E29F 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  16++E2A3 23 99
  17++E2A5 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  17++E2A9 34 99
  18++E2AB 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  18++E2AF 45 99
  19++E2B1 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  19++E2B5 01 26
  20++E2B7 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  20++E2BB 23 67
  21++E2BD 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  21++E2C1 34 78
  22++E2C3 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  22++E2C7 04 58
  23++E2C9 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  23++E2CD 06 78
  24++E2CF 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  24++E2D3 00 00
  25++E2D5 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  25++E2D9 00 00
  26++E2DB 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  26++E2DF 00 00
  27++E2E1 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  27++E2E5 00 00
  28++E2E7 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  28++E2EB 00 00
  29++E2ED 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  29++E2F1 00 00
  30++E2F3 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  30++E2F7 99 99
  31++E2F9 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  31++E2FD 99 99
  32++E2FF 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  32++E303 99 99
  33++E305              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  34++E305 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  35++E309 1F 29 04 08                          DB $1F, $29, $04, $08
  36++E30D 1F 39 08 0C                          DB $1F, $39, $08, $0C
  37++E311 1F 49 0C 10                          DB $1F, $49, $0C, $10
  38++E315 1F 59 00 10                          DB $1F, $59, $00, $10
  39++E319 1C 01 00 14                          DB $1C, $01, $00, $14
  40++E31D 1C 26 14 18                          DB $1C, $26, $14, $18
  41++E321 1C 37 18 1C                          DB $1C, $37, $18, $1C
  42++E325 1C 48 1C 20                          DB $1C, $48, $1C, $20
  43++E329 1C 05 00 20                          DB $1C, $05, $00, $20
  44++E32D 0F 06 14 24                          DB $0F, $06, $14, $24
  45++E331 0B 67 18 24                          DB $0B, $67, $18, $24
  46++E335 0B 78 1C 24                          DB $0B, $78, $1C, $24
  47++E339 0F 08 20 24                          DB $0F, $08, $20, $24
  48++E33D 0E 12 04 14                          DB $0E, $12, $04, $14
  49++E341 0E 23 08 18                          DB $0E, $23, $08, $18
  50++E345 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  51++E349 0E 45 10 20                          DB $0E, $45, $10, $20
  52++E34D 08 00 28 2C                          DB $08, $00, $28, $2C
  53++E351 09 00 2C 30                          DB $09, $00, $2C, $30
  54++E355 0B 00 28 30                          DB $0B, $00, $28, $30
  55++E359 08 00 34 38                          DB $08, $00, $34, $38
  56++E35D 09 00 38 3C                          DB $09, $00, $38, $3C
  57++E361 0B 00 34 3C                          DB $0B, $00, $34, $3C
  58++E365 0C 99 40 44                          DB $0C, $99, $40, $44
  59++E369 0C 99 40 48                          DB $0C, $99, $40, $48
  60++E36D 08 99 44 48                          DB $08, $99, $44, $48
  61++E371              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  62++E371              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  63++E371 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  64++E375 9F 44 00 18                          DB $9F, $44, $00, $18
  65++E379 BF 3F 00 25                          DB $BF, $3F, $00, $25
  66++E37D 3F 00 00 68                          DB $3F, $00, $00, $68
  67++E381 3F 3F 00 25                          DB $3F, $3F, $00, $25
  68++E385 1F 44 00 18                          DB $1F, $44, $00, $18
  69++E389 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  70++E38D 3C 00 2D 16                          DB $3C, $00, $2D, $16
  71++E391 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  72++E395 5F 00 1C 00                          DB $5F, $00, $1C, $00
  73++E399              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  74++E399              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  75++E399
# file closed: ./Data/Ships/Fer_De_Lance.asm
 505+ E399                                      include "Data/Ships/Gecko.asm"
# file opened: ./Data/Ships/Gecko.asm
   1++E399 00 26 49     Gecko:	                DB $00, $26, $49
   2++E39C F9 E3                                DW GeckoEdges
   3++E39E 44                                   DB GeckoEdgesSize
   4++E39F 00 1A                                DB $00, $1A
   5++E3A1 48                                   DB GeckoVertSize
   6++E3A2 11                                   DB GeckoEdgesCnt
   7++E3A3 00 37                                DB $00, $37
   8++E3A5 24                                   DB GeckoNormalsSize
   9++E3A6 12 46 1E                             DB $12, $46, $1E
  10++E3A9 3D E4                                DW GeckoNormals
  11++E3AB 03 10                                DB $03, $10
  12++E3AD B1 E3                                DW GeckoVertices
  13++E3AF 00 00                                DB 0,0                      ; Type and Tactics
  14++E3B1 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  14++E3B5 03 45
  15++E3B7 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  15++E3BB 01 23
  16++E3BD 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  16++E3C1 05 67
  17++E3C3 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  17++E3C7 01 78
  18++E3C9 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  18++E3CD 45 66
  19++E3CF 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  19++E3D3 12 88
  20++E3D5 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  20++E3D9 34 67
  21++E3DB 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  21++E3DF 23 78
  22++E3E1 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  22++E3E5 33 33
  23++E3E7 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  23++E3EB 33 33
  24++E3ED 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  24++E3F1 33 33
  25++E3F3 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  25++E3F7 33 33
  26++E3F9              GeckoVertSize:          equ $ - GeckoVertices
  27++E3F9 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  28++E3FD 1F 12 04 14                          DB $1F, $12, $04, $14
  29++E401 1F 18 14 0C                          DB $1F, $18, $14, $0C
  30++E405 1F 07 0C 08                          DB $1F, $07, $0C, $08
  31++E409 1F 56 08 10                          DB $1F, $56, $08, $10
  32++E40D 1F 45 10 00                          DB $1F, $45, $10, $00
  33++E411 1F 28 14 1C                          DB $1F, $28, $14, $1C
  34++E415 1F 37 1C 18                          DB $1F, $37, $1C, $18
  35++E419 1F 46 18 10                          DB $1F, $46, $18, $10
  36++E41D 1D 05 00 08                          DB $1D, $05, $00, $08
  37++E421 1E 01 04 0C                          DB $1E, $01, $04, $0C
  38++E425 1D 34 00 18                          DB $1D, $34, $00, $18
  39++E429 1E 23 04 1C                          DB $1E, $23, $04, $1C
  40++E42D 14 67 08 18                          DB $14, $67, $08, $18
  41++E431 14 78 0C 1C                          DB $14, $78, $0C, $1C
  42++E435 10 33 20 28                          DB $10, $33, $20, $28
  43++E439 11 33 24 2C                          DB $11, $33, $24, $2C
  44++E43D              GeckoEdgesSize:             equ $ - GeckoEdges
  45++E43D              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  46++E43D 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  47++E441 1F 04 2D 08                          DB $1F, $04, $2D, $08
  48++E445 5F 19 6C 13                          DB $5F, $19, $6C, $13
  49++E449 5F 00 54 0C                          DB $5F, $00, $54, $0C
  50++E44D DF 19 6C 13                          DB $DF, $19, $6C, $13
  51++E451 9F 04 2D 08                          DB $9F, $04, $2D, $08
  52++E455 BF 58 10 D6                          DB $BF, $58, $10, $D6
  53++E459 3F 00 00 BB                          DB $3F, $00, $00, $BB
  54++E45D 3F 58 10 D6                          DB $3F, $58, $10, $D6
  55++E461              GeckoNormalsSize:       equ $ - GeckoNormals
  56++E461              GeckoLen:               equ $ - Gecko
  57++E461
# file closed: ./Data/Ships/Gecko.asm
 506+ E461                                      include "Data/Ships/Ghavial.asm"
# file opened: ./Data/Ships/Ghavial.asm
   1++E461 03 26 00     Ghavial:	DB $03, $26, $00
   2++E464 C1 E4        	DW GhavialEdges
   3++E466 58           	DB GhavialEdgesSize
   4++E467 00 22        	DB $00, $22
   5++E469 48           	DB GhavialVertSize
   6++E46A 16           	DB GhavialEdgesCnt
   7++E46B 00 64        	DB $00, $64
   8++E46D 30           	DB GhavialNormalsSize
   9++E46E 0A 72 10     	DB $0A, $72, $10
  10++E471 19 E5        	DW GhavialNormals
  11++E473 00 27        	DB $00, $27
  12++E475 79 E4        	DW GhavialVertices
  13++E477 00 00                                DB 0,0                      ; Type and Tactics
  14++E479
  15++E479 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  15++E47D 67 01
  16++E47F 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  16++E483 6B 05
  17++E485 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  17++E489 23 01
  18++E48B 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  18++E48F 45 03
  19++E491 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  19++E495 78 12
  20++E497 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  20++E49B 89 23
  21++E49D 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  21++E4A1 AB 45
  22++E4A3 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  22++E4A7 9A 34
  23++E4A9 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  23++E4AD FF FF
  24++E4AF 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  24++E4B3 00 00
  25++E4B5 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  25++E4B9 00 00
  26++E4BB 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  26++E4BF 00 00
  27++E4C1
  28++E4C1              GhavialVertSize: equ $ - GhavialVertices
  29++E4C1
  30++E4C1
  31++E4C1 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  32++E4C5 1F 12 10 08  	DB $1F, $12, $10, $08
  33++E4C9 1F 23 14 08  	DB $1F, $23, $14, $08
  34++E4CD 1F 30 0C 08  	DB $1F, $30, $0C, $08
  35++E4D1 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  36++E4D5 1F 45 18 0C  	DB $1F, $45, $18, $0C
  37++E4D9 1F 50 0C 04  	DB $1F, $50, $0C, $04
  38++E4DD 1F 67 00 20  	DB $1F, $67, $00, $20
  39++E4E1 1F 78 10 20  	DB $1F, $78, $10, $20
  40++E4E5 1F 89 14 20  	DB $1F, $89, $14, $20
  41++E4E9 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  42++E4ED 1F AB 18 20  	DB $1F, $AB, $18, $20
  43++E4F1 1F B6 04 20  	DB $1F, $B6, $04, $20
  44++E4F5 1F 06 04 00  	DB $1F, $06, $04, $00
  45++E4F9 1F 17 00 10  	DB $1F, $17, $00, $10
  46++E4FD 1F 28 10 14  	DB $1F, $28, $10, $14
  47++E501 1F 39 14 1C  	DB $1F, $39, $14, $1C
  48++E505 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  49++E509 1F 5B 18 04  	DB $1F, $5B, $18, $04
  50++E50D 09 00 24 28  	DB $09, $00, $24, $28
  51++E511 09 00 28 2C  	DB $09, $00, $28, $2C
  52++E515 09 00 2C 24  	DB $09, $00, $2C, $24
  53++E519
  54++E519              GhavialEdgesSize: equ $ - GhavialEdges
  55++E519
  56++E519
  57++E519              GhavialEdgesCnt: equ GhavialEdgesSize/4
  58++E519
  59++E519
  60++E519 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  61++E51D 1F 33 24 0C  	DB $1F, $33, $24, $0C
  62++E521 3F 33 1C 19  	DB $3F, $33, $1C, $19
  63++E525 3F 00 30 2A  	DB $3F, $00, $30, $2A
  64++E529 BF 33 1C 19  	DB $BF, $33, $1C, $19
  65++E52D 9F 33 24 0C  	DB $9F, $33, $24, $0C
  66++E531 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  67++E535 5F 1C 38 07  	DB $5F, $1C, $38, $07
  68++E539 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  69++E53D 7F 00 33 26  	DB $7F, $00, $33, $26
  70++E541 FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  71++E545 DF 1C 38 07  	DB $DF, $1C, $38, $07
  72++E549
  73++E549              GhavialNormalsSize: equ $ - GhavialNormals
  74++E549              GhavialLen: equ $ - Ghavial
  75++E549
# file closed: ./Data/Ships/Ghavial.asm
 507+ E549                                      include "Data/Ships/Iguana.asm"
# file opened: ./Data/Ships/Iguana.asm
   1++E549 01 0D AC     Iguana:	DB $01, $0D, $AC
   2++E54C BB E5        	DW IguanaEdges
   3++E54E 5C           	DB IguanaEdgesSize
   4++E54F 00 1A        	DB $00, $1A
   5++E551 5A           	DB IguanaVertSize
   6++E552 17           	DB IguanaEdgesCnt
   7++E553 00 96        	DB $00, $96
   8++E555 28           	DB IguanaNormalsSize
   9++E556 0A 5A 21     	DB $0A, $5A, $21
  10++E559 17 E6        	DW IguanaNormals
  11++E55B 01 23        	DB $01, $23
  12++E55D 61 E5        	DW IguanaVertices
  13++E55F 00 00                                DB 0,0                      ; Type and Tactics
  14++E561
  15++E561
  16++E561 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  16++E565 23 01
  17++E567 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  17++E56B 46 02
  18++E56D 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  18++E571 45 01
  19++E573 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  19++E577 57 13
  20++E579 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  20++E57D 67 23
  21++E57F 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  21++E583 89 46
  22++E585 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  22++E589 88 45
  23++E58B 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  23++E58F 89 57
  24++E591 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  24++E595 99 67
  25++E597 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  25++E59B 11 00
  26++E59D 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  26++E5A1 33 22
  27++E5A3 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  27++E5A7 99 88
  28++E5A9 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  28++E5AD 88 88
  29++E5AF 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  29++E5B3 99 88
  30++E5B5 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  30++E5B9 99 99
  31++E5BB
  32++E5BB              IguanaVertSize: equ $ - IguanaVertices
  33++E5BB
  34++E5BB
  35++E5BB
  36++E5BB 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  37++E5BF 1F 01 00 08  	DB $1F, $01, $00, $08
  38++E5C3 1F 13 00 0C  	DB $1F, $13, $00, $0C
  39++E5C7 1F 23 00 10  	DB $1F, $23, $00, $10
  40++E5CB 1F 46 04 14  	DB $1F, $46, $04, $14
  41++E5CF 1F 45 08 18  	DB $1F, $45, $08, $18
  42++E5D3 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  43++E5D7 1F 67 10 20  	DB $1F, $67, $10, $20
  44++E5DB 1F 48 14 18  	DB $1F, $48, $14, $18
  45++E5DF 1F 58 18 1C  	DB $1F, $58, $18, $1C
  46++E5E3 1F 69 14 20  	DB $1F, $69, $14, $20
  47++E5E7 1F 79 1C 20  	DB $1F, $79, $1C, $20
  48++E5EB 1F 04 04 08  	DB $1F, $04, $04, $08
  49++E5EF 1F 15 08 0C  	DB $1F, $15, $08, $0C
  50++E5F3 1F 26 04 10  	DB $1F, $26, $04, $10
  51++E5F7 1F 37 0C 10  	DB $1F, $37, $0C, $10
  52++E5FB 1F 89 14 1C  	DB $1F, $89, $14, $1C
  53++E5FF 1E 01 08 24  	DB $1E, $01, $08, $24
  54++E603 1E 23 10 28  	DB $1E, $23, $10, $28
  55++E607 0A 88 2C 30  	DB $0A, $88, $2C, $30
  56++E60B 0A 88 34 30  	DB $0A, $88, $34, $30
  57++E60F 0A 99 2C 38  	DB $0A, $99, $2C, $38
  58++E613 0A 99 34 38  	DB $0A, $99, $34, $38
  59++E617
  60++E617              IguanaEdgesSize: equ $ - IguanaEdges
  61++E617
  62++E617
  63++E617              IguanaEdgesCnt: equ IguanaEdgesSize/4
  64++E617
  65++E617
  66++E617 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  67++E61B DF 33 4D 19  	DB $DF, $33, $4D, $19
  68++E61F 1F 33 4D 19  	DB $1F, $33, $4D, $19
  69++E623 5F 33 4D 19  	DB $5F, $33, $4D, $19
  70++E627 9F 2A 55 00  	DB $9F, $2A, $55, $00
  71++E62B DF 2A 55 00  	DB $DF, $2A, $55, $00
  72++E62F 1F 2A 55 00  	DB $1F, $2A, $55, $00
  73++E633 5F 2A 55 00  	DB $5F, $2A, $55, $00
  74++E637 BF 17 00 5D  	DB $BF, $17, $00, $5D
  75++E63B 3F 17 00 5D  	DB $3F, $17, $00, $5D
  76++E63F
  77++E63F
  78++E63F              IguanaNormalsSize: equ $ - IguanaNormals
  79++E63F              IguanaLen: equ $ - Iguana
  80++E63F
# file closed: ./Data/Ships/Iguana.asm
 508+ E63F                                      include "Data/Ships/Krait.asm"
# file opened: ./Data/Ships/Krait.asm
   1++E63F
   2++E63F 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E642 BD E6                                DW KraitEdges
   4++E644 54                                   DB KraitEdgesSize
   5++E645 00 12                                DB $00, $12
   6++E647 66                                   DB KraitVertSize
   7++E648 15                                   DB KraitEdgesCnt
   8++E649 64 00                                DB $64,$00
   9++E64B 18                                   DB KraitNormalsSize
  10++E64C 14 50 1E                             DB $14, $50, $1E
  11++E64F 11 E7                                DW KraitNormals
  12++E651 02 10                                DB $02, $10
  13++E653 57 E6                                DW KraitVertices
  14++E655 00 00                                DB 0,0                      ; Type and Tactics
  15++E657 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  15++E65B 01 23
  16++E65D 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  16++E661 03 45
  17++E663 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  17++E667 12 45
  18++E669 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  18++E66D 01 44
  19++E66F 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  19++E673 23 55
  20++E675 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  20++E679 01 11
  21++E67B 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  21++E67F 23 33
  22++E681 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  22++E685 00 33
  23++E687 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  23++E68B 00 33
  24++E68D 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  24++E691 33 33
  25++E693 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  25++E697 00 00
  26++E699 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  26++E69D 44 44
  27++E69F 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  27++E6A3 44 44
  28++E6A5 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  28++E6A9 44 44
  29++E6AB 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  29++E6AF 55 55
  30++E6B1 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  30++E6B5 55 55
  31++E6B7 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  31++E6BB 55 55
  32++E6BD              KraitVertSize           equ $  - KraitVertices
  33++E6BD 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  33++E6C1 1F 12 00 08
  34++E6C5 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  34++E6C9 1F 23 00 10
  35++E6CD 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  35++E6D1 1F 25 10 08
  36++E6D5 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  36++E6D9 1F 04 0C 04
  37++E6DD 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  37++E6E1 1C 23 10 18
  38++E6E5 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  38++E6E9 09 00 1C 28
  39++E6ED 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  39++E6F1 09 33 1C 24
  40++E6F5 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  40++E6F9 08 44 2C 34
  41++E6FD 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  41++E701 07 44 30 2C
  42++E705 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  42++E709 08 55 3C 40
  43++E70D 08 55 40 38                          DB $08, $55, $40, $38
  44++E711              KraitEdgesSize          equ $  - KraitEdges
  45++E711              KraitEdgesCnt           equ KraitEdgesSize/4
  46++E711 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  47++E715 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  47++E719 DF 07 30 06
  48++E71D 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  48++E721 3F 4D 00 9A
  49++E725 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  50++E729              KraitNormalsSize        equ $  - KraitNormals
  51++E729              KraitLen                equ $  - Krait
  52++E729
# file closed: ./Data/Ships/Krait.asm
 509+ E729                                      include "Data/Ships/Logo.asm"
# file opened: ./Data/Ships/Logo.asm
   1++E729 00 26 49     Logo:	DB $00, $26, $49
   2++E72C 3D E8        	DW LogoEdges
   3++E72E 94           	DB LogoEdgesSize
   4++E72F 00 36        	DB $00, $36
   5++E731 FC           	DB LogoVertSize
   6++E732 25           	DB LogoEdgesCnt
   7++E733 00 00        	DB $00, $00
   8++E735 14           	DB LogoNormalsSize
   9++E736 63 FC 24     	DB $63, $FC, $24
  10++E739 D1 E8        	DW LogoNormals
  11++E73B 01 00        	DB $01, $00
  12++E73D 41 E7        	DW LogoVertices
  13++E73F 00 00                                DB 0,0                      ; Type and Tactics
  14++E741
  15++E741 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  15++E745 00 00
  16++E747 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  16++E74B 00 00
  17++E74D 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  17++E751 00 00
  18++E753 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  18++E757 00 00
  19++E759 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  19++E75D 00 00
  20++E75F 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  20++E763 00 00
  21++E765 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  21++E769 00 00
  22++E76B 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  22++E76F 00 00
  23++E771 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  23++E775 00 00
  24++E777 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  24++E77B 00 00
  25++E77D 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  25++E781 00 00
  26++E783 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  26++E787 00 00
  27++E789 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  27++E78D 02 33
  28++E78F 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  28++E793 02 44
  29++E795 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  29++E799 01 33
  30++E79B 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  30++E79F 02 33
  31++E7A1 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  31++E7A5 02 44
  32++E7A7 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  32++E7AB 01 44
  33++E7AD 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  33++E7B1 00 00
  34++E7B3 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7B7 00 00
  35++E7B9 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7BD 00 00
  36++E7BF 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  36++E7C3 00 00
  37++E7C5 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  37++E7C9 00 00
  38++E7CB 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  38++E7CF 00 00
  39++E7D1 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  39++E7D5 00 00
  40++E7D7 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  40++E7DB 00 00
  41++E7DD 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  41++E7E1 00 00
  42++E7E3 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  42++E7E7 00 00
  43++E7E9 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  43++E7ED 00 00
  44++E7EF 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  44++E7F3 00 00
  45++E7F5 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  45++E7F9 00 00
  46++E7FB 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  46++E7FF 00 00
  47++E801 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  47++E805 00 00
  48++E807 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  48++E80B 00 00
  49++E80D 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  49++E811 00 00
  50++E813 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  50++E817 00 00
  51++E819 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  51++E81D 00 00
  52++E81F 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  52++E823 00 00
  53++E825 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  53++E829 00 00
  54++E82B 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  54++E82F 00 00
  55++E831 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  55++E835 00 00
  56++E837 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  56++E83B 00 00
  57++E83D
  58++E83D              LogoVertSize: equ $ - LogoVertices
  59++E83D
  60++E83D
  61++E83D
  62++E83D 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  63++E841 1F 00 04 08  	DB $1F, $00, $04, $08
  64++E845 1F 00 08 0C  	DB $1F, $00, $08, $0C
  65++E849 1F 00 0C 10  	DB $1F, $00, $0C, $10
  66++E84D 1F 00 10 14  	DB $1F, $00, $10, $14
  67++E851 1F 00 14 18  	DB $1F, $00, $14, $18
  68++E855 1F 00 18 1C  	DB $1F, $00, $18, $1C
  69++E859 1F 00 1C 20  	DB $1F, $00, $1C, $20
  70++E85D 1F 00 20 24  	DB $1F, $00, $20, $24
  71++E861 1F 00 24 28  	DB $1F, $00, $24, $28
  72++E865 1F 00 28 2C  	DB $1F, $00, $28, $2C
  73++E869 1F 00 2C 00  	DB $1F, $00, $2C, $00
  74++E86D 1E 03 38 3C  	DB $1E, $03, $38, $3C
  75++E871 1E 01 3C 40  	DB $1E, $01, $3C, $40
  76++E875 1E 04 40 44  	DB $1E, $04, $40, $44
  77++E879 1E 01 44 38  	DB $1E, $01, $44, $38
  78++E87D 1E 03 10 30  	DB $1E, $03, $10, $30
  79++E881 1E 22 30 34  	DB $1E, $22, $30, $34
  80++E885 1E 04 34 20  	DB $1E, $04, $34, $20
  81++E889 1E 11 20 10  	DB $1E, $11, $20, $10
  82++E88D 1E 13 10 38  	DB $1E, $13, $10, $38
  83++E891 1E 13 30 3C  	DB $1E, $13, $30, $3C
  84++E895 1E 24 34 40  	DB $1E, $24, $34, $40
  85++E899 1E 14 20 44  	DB $1E, $14, $20, $44
  86++E89D 1E 00 54 58  	DB $1E, $00, $54, $58
  87++E8A1 1E 00 58 60  	DB $1E, $00, $58, $60
  88++E8A5 1E 00 60 64  	DB $1E, $00, $60, $64
  89++E8A9 1E 00 5C 68  	DB $1E, $00, $5C, $68
  90++E8AD 1E 00 6C 70  	DB $1E, $00, $6C, $70
  91++E8B1 1E 00 70 74  	DB $1E, $00, $70, $74
  92++E8B5 1E 00 78 7C  	DB $1E, $00, $78, $7C
  93++E8B9 1E 00 80 84  	DB $1E, $00, $80, $84
  94++E8BD 1E 00 88 8C  	DB $1E, $00, $88, $8C
  95++E8C1 1E 00 90 94  	DB $1E, $00, $90, $94
  96++E8C5 1E 00 94 9C  	DB $1E, $00, $94, $9C
  97++E8C9 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  98++E8CD 1E 00 A4 98  	DB $1E, $00, $A4, $98
  99++E8D1
 100++E8D1              LogoEdgesSize: equ $ - LogoEdges
 101++E8D1
 102++E8D1
 103++E8D1              LogoEdgesCnt: equ LogoEdgesSize/4
 104++E8D1
 105++E8D1
 106++E8D1 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 107++E8D5 1F 00 04 0F  	DB $1F, $00, $04, $0F
 108++E8D9 3F 00 0D 34  	DB $3F, $00, $0D, $34
 109++E8DD 9F 51 51 00  	DB $9F, $51, $51, $00
 110++E8E1 1F 51 51 00  	DB $1F, $51, $51, $00
 111++E8E5
 112++E8E5
 113++E8E5              LogoNormalsSize: equ $ - LogoNormals
 114++E8E5              LogoLen: equ $ - Logo
 115++E8E5
# file closed: ./Data/Ships/Logo.asm
 510+ E8E5                                      include "Data/Ships/Mamba.asm"
# file opened: ./Data/Ships/Mamba.asm
   1++E8E5 01 13 24     Mamba:	DB $01, $13, $24
   2++E8E8 93 E9        	DW MambaEdges
   3++E8EA 70           	DB MambaEdgesSize
   4++E8EB 00 22        	DB $00, $22
   5++E8ED 96           	DB MambaVertSize
   6++E8EE 1C           	DB MambaEdgesCnt
   7++E8EF 00 96        	DB $00, $96
   8++E8F1 14           	DB MambaNormalsSize
   9++E8F2 19 5A 1E     	DB $19, $5A, $1E
  10++E8F5 03 EA        	DW MambaNormals
  11++E8F7 02 12        	DB $02, $12
  12++E8F9 FD E8        	DW MambaVertices
  13++E8FB 00 00                                DB 0,0                      ; Type and Tactics
  14++E8FD
  15++E8FD 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  15++E901 10 32
  16++E903 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  16++E907 20 44
  17++E909 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  17++E90D 21 44
  18++E90F 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  18++E913 31 44
  19++E915 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  19++E919 30 44
  20++E91B 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  20++E91F 11 11
  21++E921 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  21++E925 11 11
  22++E927 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  22++E92B 11 11
  23++E92D 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  23++E931 11 11
  24++E933 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  24++E937 00 00
  25++E939 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  25++E93D 00 00
  26++E93F 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  26++E943 00 00
  27++E945 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  27++E949 00 00
  28++E94B 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  28++E94F 00 00
  29++E951 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  29++E955 00 00
  30++E957 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  30++E95B 44 44
  31++E95D 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  31++E961 44 44
  32++E963 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  32++E967 44 44
  33++E969 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  33++E96D 44 44
  34++E96F 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  34++E973 44 44
  35++E975 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  35++E979 44 44
  36++E97B 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  36++E97F 44 44
  37++E981 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  37++E985 44 44
  38++E987 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  38++E98B 44 44
  39++E98D 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  39++E991 44 44
  40++E993
  41++E993              MambaVertSize: equ $ - MambaVertices
  42++E993
  43++E993
  44++E993
  45++E993 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  46++E997 1F 30 00 10  	DB $1F, $30, $00, $10
  47++E99B 1F 40 04 10  	DB $1F, $40, $04, $10
  48++E99F 1E 42 04 08  	DB $1E, $42, $04, $08
  49++E9A3 1E 41 08 0C  	DB $1E, $41, $08, $0C
  50++E9A7 1E 43 0C 10  	DB $1E, $43, $0C, $10
  51++E9AB 0E 11 14 18  	DB $0E, $11, $14, $18
  52++E9AF 0C 11 18 1C  	DB $0C, $11, $18, $1C
  53++E9B3 0D 11 1C 20  	DB $0D, $11, $1C, $20
  54++E9B7 0C 11 14 20  	DB $0C, $11, $14, $20
  55++E9BB 14 00 24 2C  	DB $14, $00, $24, $2C
  56++E9BF 10 00 24 30  	DB $10, $00, $24, $30
  57++E9C3 10 00 28 34  	DB $10, $00, $28, $34
  58++E9C7 14 00 28 38  	DB $14, $00, $28, $38
  59++E9CB 0E 00 34 38  	DB $0E, $00, $34, $38
  60++E9CF 0E 00 2C 30  	DB $0E, $00, $2C, $30
  61++E9D3 0D 44 3C 40  	DB $0D, $44, $3C, $40
  62++E9D7 0E 44 44 48  	DB $0E, $44, $44, $48
  63++E9DB 0C 44 3C 48  	DB $0C, $44, $3C, $48
  64++E9DF 0C 44 40 44  	DB $0C, $44, $40, $44
  65++E9E3 07 44 50 54  	DB $07, $44, $50, $54
  66++E9E7 05 44 50 60  	DB $05, $44, $50, $60
  67++E9EB 05 44 54 60  	DB $05, $44, $54, $60
  68++E9EF 07 44 4C 58  	DB $07, $44, $4C, $58
  69++E9F3 05 44 4C 5C  	DB $05, $44, $4C, $5C
  70++E9F7 05 44 58 5C  	DB $05, $44, $58, $5C
  71++E9FB 1E 21 00 08  	DB $1E, $21, $00, $08
  72++E9FF 1E 31 00 0C  	DB $1E, $31, $00, $0C
  73++EA03
  74++EA03              MambaEdgesSize: equ $ - MambaEdges
  75++EA03
  76++EA03
  77++EA03              MambaEdgesCnt: equ MambaEdgesSize/4
  78++EA03
  79++EA03
  80++EA03 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  81++EA07 1E 00 18 02  	DB $1E, $00, $18, $02
  82++EA0B 9E 20 40 10  	DB $9E, $20, $40, $10
  83++EA0F 1E 20 40 10  	DB $1E, $20, $40, $10
  84++EA13 3E 00 00 7F  	DB $3E, $00, $00, $7F
  85++EA17
  86++EA17              MambaNormalsSize: equ $ - MambaNormals
  87++EA17              MambaLen: equ $ - Mamba
  88++EA17
# file closed: ./Data/Ships/Mamba.asm
 511+ EA17                                      include "Data/Ships/Missile.asm"
# file opened: ./Data/Ships/Missile.asm
   1++EA17 00 06 40     Missile:	DB $00, $06, $40
   2++EA1A 95 EA        	DW MissileEdges
   3++EA1C 60           	DB MissileEdgesSize
   4++EA1D 00 0A        	DB $00, $0A
   5++EA1F 66           	DB MissileVertSize
   6++EA20 18           	DB MissileEdgesCnt
   7++EA21 00 00        	DB $00, $00
   8++EA23 24           	DB MissileNormalsSize
   9++EA24 0E 02 2C     	DB $0E, $02, $2C
  10++EA27 F5 EA        	DW MissileNormals
  11++EA29 02 00        	DB $02, $00
  12++EA2B 2F EA        	DW MissileVertices
  13++EA2D 01 00            DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA2F
  15++EA2F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  15++EA33 10 32
  16++EA35 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  16++EA39 21 54
  17++EA3B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  17++EA3F 32 74
  18++EA41 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  18++EA45 30 76
  19++EA47 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  19++EA4B 10 65
  20++EA4D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  20++EA51 74 88
  21++EA53 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  21++EA57 54 88
  22++EA59 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  22++EA5D 65 88
  23++EA5F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  23++EA63 76 88
  24++EA65 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  24++EA69 74 88
  25++EA6B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  25++EA6F 54 88
  26++EA71 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  26++EA75 65 88
  27++EA77 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  27++EA7B 76 88
  28++EA7D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  28++EA81 76 77
  29++EA83 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  29++EA87 65 66
  30++EA89 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  30++EA8D 74 77
  31++EA8F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  31++EA93 54 55
  32++EA95
  33++EA95              MissileVertSize: equ $ - MissileVertices
  34++EA95
  35++EA95
  36++EA95
  37++EA95 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  38++EA99 1F 32 00 08  	DB $1F, $32, $00, $08
  39++EA9D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  40++EAA1 1F 10 00 10  	DB $1F, $10, $00, $10
  41++EAA5 1F 24 04 08  	DB $1F, $24, $04, $08
  42++EAA9 1F 51 04 10  	DB $1F, $51, $04, $10
  43++EAAD 1F 60 0C 10  	DB $1F, $60, $0C, $10
  44++EAB1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  45++EAB5 1F 74 08 14  	DB $1F, $74, $08, $14
  46++EAB9 1F 54 04 18  	DB $1F, $54, $04, $18
  47++EABD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  48++EAC1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  49++EAC5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  50++EAC9 1F 87 14 20  	DB $1F, $87, $14, $20
  51++EACD 1F 84 14 18  	DB $1F, $84, $14, $18
  52++EAD1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  53++EAD5 08 85 18 28  	DB $08, $85, $18, $28
  54++EAD9 08 87 14 24  	DB $08, $87, $14, $24
  55++EADD 08 87 20 30  	DB $08, $87, $20, $30
  56++EAE1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  57++EAE5 08 74 24 3C  	DB $08, $74, $24, $3C
  58++EAE9 08 54 28 40  	DB $08, $54, $28, $40
  59++EAED 08 76 30 34  	DB $08, $76, $30, $34
  60++EAF1 08 65 2C 38  	DB $08, $65, $2C, $38
  61++EAF5
  62++EAF5              MissileEdgesSize: equ $ - MissileEdges
  63++EAF5
  64++EAF5
  65++EAF5              MissileEdgesCnt: equ MissileEdgesSize/4
  66++EAF5
  67++EAF5
  68++EAF5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  69++EAF9 5F 00 40 10  	DB $5F, $00, $40, $10
  70++EAFD 1F 40 00 10  	DB $1F, $40, $00, $10
  71++EB01 1F 00 40 10  	DB $1F, $00, $40, $10
  72++EB05 1F 20 00 00  	DB $1F, $20, $00, $00
  73++EB09 5F 00 20 00  	DB $5F, $00, $20, $00
  74++EB0D 9F 20 00 00  	DB $9F, $20, $00, $00
  75++EB11 1F 00 20 00  	DB $1F, $00, $20, $00
  76++EB15 3F 00 00 B0  	DB $3F, $00, $00, $B0
  77++EB19
  78++EB19
  79++EB19              MissileNormalsSize: equ $ - MissileNormals
  80++EB19              MissileLen: equ $ - Missile
  81++EB19
# file closed: ./Data/Ships/Missile.asm
 512+ EB19                                      include "Data/Ships/Monitor.asm"
# file opened: ./Data/Ships/Monitor.asm
   1++EB19 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB1C 97 EB                                DW MonitorEdges
   3++EB1E 5C                                   DB MonitorEdgesSize
   4++EB1F 00 2A                                DB $00, $2A
   5++EB21 66                                   DB MonitorVertSize
   6++EB22 17                                   DB MonitorEdgesCnt
   7++EB23 01 90                                DB $01, $90
   8++EB25 2C                                   DB MonitorNormalsSize
   9++EB26 28 84 10                             DB $28, $84, $10
  10++EB29 F3 EB                                DW MonitorNormals
  11++EB2B 00 37                                DB $00, $37
  12++EB2D 31 EB                                DW MonitorVertices
  13++EB2F 00 00                                DB 0,0                      ; Type and Tactics
  14++EB31
  15++EB31 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  15++EB35 FF FF
  16++EB37 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  16++EB3B 23 01
  17++EB3D 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  17++EB41 50 34
  18++EB43 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  18++EB47 78 12
  19++EB49 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  19++EB4D 96 45
  20++EB4F 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  20++EB53 AA 28
  21++EB55 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  21++EB59 AA 49
  22++EB5B 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  22++EB5F AA 23
  23++EB61 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  23++EB65 AA 34
  24++EB67 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  24++EB6B AA 89
  25++EB6D 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  25++EB71 89 67
  26++EB73 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  26++EB77 00 00
  27++EB79 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  27++EB7D 00 00
  28++EB7F 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  28++EB83 77 77
  29++EB85 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  29++EB89 77 77
  30++EB8B 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  30++EB8F 66 66
  31++EB91 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  31++EB95 66 66
  32++EB97              MonitorVertSize:        equ $ - MonitorVertices
  33++EB97 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  34++EB9B 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  35++EB9F 1F 23 04 1C                          DB $1F, $23, $04, $1C
  36++EBA3 1F 34 08 20                          DB $1F, $34, $08, $20
  37++EBA7 1F 45 08 10                          DB $1F, $45, $08, $10
  38++EBAB 1F 50 00 08                          DB $1F, $50, $00, $08
  39++EBAF 1F 03 04 08                          DB $1F, $03, $04, $08
  40++EBB3 1F 67 00 28                          DB $1F, $67, $00, $28
  41++EBB7 1F 78 0C 28                          DB $1F, $78, $0C, $28
  42++EBBB 1F 89 24 28                          DB $1F, $89, $24, $28
  43++EBBF 1F 96 10 28                          DB $1F, $96, $10, $28
  44++EBC3 1F 17 00 0C                          DB $1F, $17, $00, $0C
  45++EBC7 1F 28 0C 14                          DB $1F, $28, $0C, $14
  46++EBCB 1F 49 18 10                          DB $1F, $49, $18, $10
  47++EBCF 1F 56 10 00                          DB $1F, $56, $10, $00
  48++EBD3 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  49++EBD7 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  50++EBDB 1F 4A 20 18                          DB $1F, $4A, $20, $18
  51++EBDF 1F 8A 14 24                          DB $1F, $8A, $14, $24
  52++EBE3 1F 9A 18 24                          DB $1F, $9A, $18, $24
  53++EBE7 0A 00 2C 30                          DB $0A, $00, $2C, $30
  54++EBEB 0A 77 34 38                          DB $0A, $77, $34, $38
  55++EBEF 0A 66 3C 40                          DB $0A, $66, $3C, $40
  56++EBF3              MonitorEdgesSize:       equ $ - MonitorEdges
  57++EBF3              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  58++EBF3 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  59++EBF7 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  60++EBFB 3F 36 1C 10                          DB $3F, $36, $1C, $10
  61++EBFF 3F 00 39 1C                          DB $3F, $00, $39, $1C
  62++EC03 BF 36 1C 10                          DB $BF, $36, $1C, $10
  63++EC07 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  64++EC0B DF 26 2F 12                          DB $DF, $26, $2F, $12
  65++EC0F 5F 26 2F 12                          DB $5F, $26, $2F, $12
  66++EC13 7F 27 30 0D                          DB $7F, $27, $30, $0D
  67++EC17 FF 27 30 0D                          DB $FF, $27, $30, $0D
  68++EC1B 3F 00 00 40                          DB $3F, $00, $00, $40
  69++EC1F              MonitorNormalsSize:     equ $ - MonitorNormals
  70++EC1F              MonitorLen:             equ $ - Monitor
  71++EC1F
# file closed: ./Data/Ships/Monitor.asm
 513+ EC1F                                      include "Data/Ships/Moray.asm"
# file opened: ./Data/Ships/Moray.asm
   1++EC1F 01 03 84     Moray:	                DB $01, $03, $84
   2++EC22 8B EC                                DW MorayEdges
   3++EC24 4C                                   DB MorayEdgesSize
   4++EC25 00 1A                                DB $00, $1A
   5++EC27 54                                   DB MorayVertSize
   6++EC28 13                                   DB MorayEdgesCnt
   7++EC29 00 32                                DB $00, $32
   8++EC2B 24                                   DB MorayNormalsSize
   9++EC2C 28 59 19                             DB $28, $59, $19
  10++EC2F D7 EC                                DW MorayNormals
  11++EC31 02 2A                                DB $02, $2A
  12++EC33 37 EC                                DW MorayVertices
  13++EC35 00 00                                DB 0,0                      ; Type and Tactics
  14++EC37
  15++EC37 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  15++EC3B 02 78
  16++EC3D 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  16++EC41 01 67
  17++EC43 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  17++EC47 FF FF
  18++EC49 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  18++EC4D 13 66
  19++EC4F 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  19++EC53 25 88
  20++EC55 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  20++EC59 45 78
  21++EC5B 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  21++EC5F 34 67
  22++EC61 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  22++EC65 44 44
  23++EC67 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  23++EC6B 44 44
  24++EC6D 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  24++EC71 44 44
  25++EC73 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  25++EC77 00 00
  26++EC79 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  26++EC7D 00 00
  27++EC7F 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  27++EC83 00 00
  28++EC85 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  28++EC89 00 00
  29++EC8B              MorayVertSize:          equ $ - MorayVertices
  30++EC8B 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  31++EC8F 1F 16 04 0C                          DB $1F, $16, $04, $0C
  32++EC93 18 36 0C 18                          DB $18, $36, $0C, $18
  33++EC97 18 47 14 18                          DB $18, $47, $14, $18
  34++EC9B 18 58 10 14                          DB $18, $58, $10, $14
  35++EC9F 1F 28 00 10                          DB $1F, $28, $00, $10
  36++ECA3 0F 67 04 18                          DB $0F, $67, $04, $18
  37++ECA7 0F 78 00 14                          DB $0F, $78, $00, $14
  38++ECAB 0F 02 00 08                          DB $0F, $02, $00, $08
  39++ECAF 0F 01 04 08                          DB $0F, $01, $04, $08
  40++ECB3 11 13 08 0C                          DB $11, $13, $08, $0C
  41++ECB7 11 25 08 10                          DB $11, $25, $08, $10
  42++ECBB 0D 45 08 14                          DB $0D, $45, $08, $14
  43++ECBF 0D 34 08 18                          DB $0D, $34, $08, $18
  44++ECC3 05 44 1C 20                          DB $05, $44, $1C, $20
  45++ECC7 07 44 1C 24                          DB $07, $44, $1C, $24
  46++ECCB 07 44 20 24                          DB $07, $44, $20, $24
  47++ECCF 05 00 28 2C                          DB $05, $00, $28, $2C
  48++ECD3 05 00 30 34                          DB $05, $00, $30, $34
  49++ECD7              MorayEdgesSize:         equ $ - MorayEdges
  50++ECD7              MorayEdgesCnt:          equ MorayEdgesSize/4
  51++ECD7 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  52++ECDB 9F 0A 31 07                          DB $9F, $0A, $31, $07
  53++ECDF 1F 0A 31 07                          DB $1F, $0A, $31, $07
  54++ECE3 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  55++ECE7 78 00 34 4E                          DB $78, $00, $34, $4E
  56++ECEB 78 3B 1C 65                          DB $78, $3B, $1C, $65
  57++ECEF DF 48 63 32                          DB $DF, $48, $63, $32
  58++ECF3 5F 00 53 1E                          DB $5F, $00, $53, $1E
  59++ECF7 5F 48 63 32                          DB $5F, $48, $63, $32
  60++ECFB
  61++ECFB              MorayNormalsSize:       equ $ - MorayNormals
  62++ECFB              MorayLen:               equ $ - Moray
  63++ECFB
# file closed: ./Data/Ships/Moray.asm
 514+ ECFB                                      include "Data/Ships/Ophidian.asm"
# file opened: ./Data/Ships/Ophidian.asm
   1++ECFB 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ECFE 8B ED                                DW OphidianEdges
   3++ED00 78                                   DB OphidianEdgesSize
   4++ED01 00 3C                                DB $00, $3C
   5++ED03 78                                   DB OphidianVertSize
   6++ED04 1E                                   DB OphidianEdgesCnt
   7++ED05 00 32                                DB $00, $32
   8++ED07 30                                   DB OphidianNormalsSize
   9++ED08 14 40 22                             DB $14, $40, $22
  10++ED0B 03 EE                                DW OphidianNormals
  11++ED0D 01 1A                                DB $01, $1A
  12++ED0F 13 ED                                DW OphidianVertices
  13++ED11 00 00                                DB 0,0                      ; Type and Tactics
  14++ED13
  15++ED13 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  15++ED17 68 02
  16++ED19 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  16++ED1D 67 01
  17++ED1F 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  17++ED23 22 01
  18++ED25 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  18++ED29 8A 24
  19++ED2B 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  19++ED2F 79 13
  20++ED31 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  20++ED35 FF FF
  21++ED37 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  21++ED3B 9B 35
  22++ED3D 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  22++ED41 AB 45
  23++ED43 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  23++ED47 BB 4A
  24++ED49 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  24++ED4D FF FF
  25++ED4F 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  25++ED53 FF FF
  26++ED55 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  26++ED59 BB 39
  27++ED5B 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  27++ED5F FF FF
  28++ED61 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  28++ED65 FF FF
  29++ED67 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  29++ED6B BB 9A
  30++ED6D 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  30++ED71 FF FF
  31++ED73 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  31++ED77 BB BB
  32++ED79 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  32++ED7D BB BB
  33++ED7F 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  33++ED83 BB BB
  34++ED85 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  34++ED89 BB BB
  35++ED8B
  36++ED8B              OphidianVertSize:       equ $ - OphidianVertices
  37++ED8B 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  38++ED8F 1F 01 04 08                          DB $1F, $01, $04, $08
  39++ED93 1F 02 00 08                          DB $1F, $02, $00, $08
  40++ED97 1F 12 08 14                          DB $1F, $12, $08, $14
  41++ED9B 1F 13 10 14                          DB $1F, $13, $10, $14
  42++ED9F 1F 24 0C 14                          DB $1F, $24, $0C, $14
  43++EDA3 1F 35 14 18                          DB $1F, $35, $14, $18
  44++EDA7 1F 45 14 1C                          DB $1F, $45, $14, $1C
  45++EDAB 1F 28 00 0C                          DB $1F, $28, $00, $0C
  46++EDAF 1F 17 04 10                          DB $1F, $17, $04, $10
  47++EDB3 1F 39 10 2C                          DB $1F, $39, $10, $2C
  48++EDB7 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  49++EDBB 1F 67 04 3C                          DB $1F, $67, $04, $3C
  50++EDBF 1F 68 00 3C                          DB $1F, $68, $00, $3C
  51++EDC3 1F 79 10 3C                          DB $1F, $79, $10, $3C
  52++EDC7 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  53++EDCB 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  54++EDCF 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  55++EDD3 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  56++EDD7 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  57++EDDB 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  58++EDDF 1F AB 20 38                          DB $1F, $AB, $20, $38
  59++EDE3 10 BB 40 44                          DB $10, $BB, $40, $44
  60++EDE7 10 BB 44 48                          DB $10, $BB, $44, $48
  61++EDEB 10 BB 48 4C                          DB $10, $BB, $48, $4C
  62++EDEF 10 BB 4C 40                          DB $10, $BB, $4C, $40
  63++EDF3 10 39 30 34                          DB $10, $39, $30, $34
  64++EDF7 10 39 2C 30                          DB $10, $39, $2C, $30
  65++EDFB 10 4A 28 24                          DB $10, $4A, $28, $24
  66++EDFF 10 4A 24 20                          DB $10, $4A, $24, $20
  67++EE03              OphidianEdgesSize:      equ $ - OphidianEdges
  68++EE03              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  69++EE03
  70++EE03 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  71++EE07 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  72++EE0B 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  73++EE0F 1F 10 22 02                          DB $1F, $10, $22, $02
  74++EE13 9F 10 22 02                          DB $9F, $10, $22, $02
  75++EE17 3F 00 25 03                          DB $3F, $00, $25, $03
  76++EE1B 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  77++EE1F 5F 0A 14 02                          DB $5F, $0A, $14, $02
  78++EE23 DF 0A 14 02                          DB $DF, $0A, $14, $02
  79++EE27 7F 12 20 02                          DB $7F, $12, $20, $02
  80++EE2B FF 12 20 02                          DB $FF, $12, $20, $02
  81++EE2F 3F 00 00 25                          DB $3F, $00, $00, $25
  82++EE33
  83++EE33              OphidianNormalsSize:    equ $ - OphidianNormals
  84++EE33              OphidianLen:            equ $ - Ophidian
  85++EE33
# file closed: ./Data/Ships/Ophidian.asm
 515+ EE33                                      include "Data/Ships/Plate.asm"
# file opened: ./Data/Ships/Plate.asm
   1++EE33 80 00 64     Plate:	DB $80, $00, $64
   2++EE36 5D EE        	DW PlateEdges
   3++EE38 10           	DB PlateEdgesSize
   4++EE39 00 0A        	DB $00, $0A
   5++EE3B 12           	DB PlateVertSize
   6++EE3C 04           	DB PlateEdgesCnt
   7++EE3D 00 00        	DB $00, $00
   8++EE3F 04           	DB PlateNormalsSize
   9++EE40 05 10 10     	DB $05, $10, $10
  10++EE43 6D EE        	DW PlateNormals
  11++EE45 03 00        	DB $03, $00
  12++EE47 4B EE        	DW PlateVertices
  13++EE49 00 00                                DB 0,0                      ; Type and Tactics
  14++EE4B
  15++EE4B
  16++EE4B 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  16++EE4F FF FF
  17++EE51 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  17++EE55 FF FF
  18++EE57 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  18++EE5B FF FF
  19++EE5D
  20++EE5D              PlateVertSize: equ $ - PlateVertices
  21++EE5D
  22++EE5D
  23++EE5D
  24++EE5D 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  25++EE61 10 FF 04 08  	DB $10, $FF, $04, $08
  26++EE65 14 FF 08 0C  	DB $14, $FF, $08, $0C
  27++EE69 10 FF 0C 00  	DB $10, $FF, $0C, $00
  28++EE6D
  29++EE6D              PlateEdgesSize: equ $ - PlateEdges
  30++EE6D
  31++EE6D
  32++EE6D              PlateEdgesCnt: equ PlateEdgesSize/4
  33++EE6D
  34++EE6D
  35++EE6D 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  36++EE71
  37++EE71
  38++EE71              PlateNormalsSize: equ $ - PlateNormals
  39++EE71              PlateLen: equ $ - Plate
  40++EE71
# file closed: ./Data/Ships/Plate.asm
 516+ EE71                                      include "Data/Ships/Python.asm"
# file opened: ./Data/Ships/Python.asm
   1++EE71              ;\ -> &5BA1 \ Python = Type 12
   2++EE71 05 00 19     Python:                 DB $05, $00, $19
   3++EE74 CB EE                                DW PythonEdges
   4++EE76 68                                   DB PythonEdgesSize
   5++EE77 00 2A                                DB $00,$2A
   6++EE79 42                                   DB PythonVertSize
   7++EE7A 1A                                   DB PythonEdgesCnt
   8++EE7B 00 00                                DB $00,$00
   9++EE7D 34                                   DB PythonNormalsSize
  10++EE7E 28 FA 14                             DB $28,$FA,$14
  11++EE81 33 EF                                DW PythonNormals
  12++EE83 00 1B                                DB $00, $1B
  13++EE85 89 EE                                DW PythonVertices
  14++EE87 00 00                                DB 0,0                      ; Type and Tactics
  15++EE89
  16++EE89 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  16++EE8D 10 32
  17++EE8F 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  17++EE93 10 54
  18++EE95 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  18++EE99 FF FF
  19++EE9B 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  19++EE9F FF FF
  20++EEA1 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  20++EEA5 54 98
  21++EEA7 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  21++EEAB 89 CC
  22++EEAD 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  22++EEB1 B8 CC
  23++EEB3 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  23++EEB7 A9 CC
  24++EEB9 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  24++EEBD 32 76
  25++EEBF 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  25++EEC3 76 BA
  26++EEC5 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  26++EEC9 BA CC
  27++EECB              PythonVertSize          equ $  - PythonVertices
  28++EECB 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  28++EECF 1F 20 00 0C
  29++EED3 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  29++EED7 1E 10 00 04
  30++EEDB 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  30++EEDF 1D 51 04 08
  31++EEE3 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  31++EEE7 1D 40 04 0C
  32++EEEB 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  32++EEEF 1D A7 08 24
  33++EEF3 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  33++EEF7 1D B6 0C 24
  34++EEFB 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  34++EEFF 05 BB 0C 28
  35++EF03 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  35++EF07 05 AA 08 28
  36++EF0B 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  36++EF0F 1F B8 0C 18
  37++EF13 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  37++EF17 1F C9 14 1C
  38++EF1B 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  38++EF1F 1D CB 18 28
  39++EF23 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  39++EF27 1D BA 24 28
  40++EF2B 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  40++EF2F 1D 76 20 24
  41++EF33              PythonEdgesSize         equ $  - PythonEdges
  42++EF33              PythonEdgesCnt          equ PythonEdgesSize/4
  43++EF33 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  43++EF37 1E 1B 28 0B
  44++EF3B DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  44++EF3F 5E 1B 28 0B
  45++EF43 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  45++EF47 1E 13 26 00
  46++EF4B DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  46++EF4F 5E 13 26 00
  47++EF53 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  47++EF57 3E 19 25 0B
  48++EF5B 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  48++EF5F FE 19 25 0B
  49++EF63 3E 00 00 70                          DB $3E, $00, $00, $70
  50++EF67              PythonNormalsSize       equ $  - PythonNormals
  51++EF67              PythonLen               equ $  - Python
  52++EF67
# file closed: ./Data/Ships/Python.asm
 517+ EF67                                      include "Data/Ships/Python_P.asm"
# file opened: ./Data/Ships/Python_P.asm
   1++EF67 02 19 00     Python_P:	DB $02, $19, $00
   2++EF6A C1 EF        	DW Python_PEdges
   3++EF6C 68           	DB Python_PEdgesSize
   4++EF6D 00 2A        	DB $00, $2A
   5++EF6F 42           	DB Python_PVertSize
   6++EF70 1A           	DB Python_PEdgesCnt
   7++EF71 00 C8        	DB $00, $C8
   8++EF73 34           	DB Python_PNormalsSize
   9++EF74 28 FA 14     	DB $28, $FA, $14
  10++EF77 29 F0        	DW Python_PNormals
  11++EF79 00 1B        	DB $00, $1B
  12++EF7B 7F EF        	DW Python_PVertices
  13++EF7D 00 00                                DB 0,0                      ; Type and Tactics
  14++EF7F
  15++EF7F 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  15++EF83 10 32
  16++EF85 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  16++EF89 10 54
  17++EF8B 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  17++EF8F FF FF
  18++EF91 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  18++EF95 FF FF
  19++EF97 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  19++EF9B 54 98
  20++EF9D 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  20++EFA1 89 CC
  21++EFA3 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  21++EFA7 B8 CC
  22++EFA9 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  22++EFAD A9 CC
  23++EFAF 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  23++EFB3 32 76
  24++EFB5 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  24++EFB9 76 BA
  25++EFBB 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  25++EFBF BA CC
  26++EFC1
  27++EFC1              Python_PVertSize: equ $ - Python_PVertices
  28++EFC1
  29++EFC1
  30++EFC1
  31++EFC1 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  32++EFC5 1F 20 00 0C  	DB $1F, $20, $00, $0C
  33++EFC9 1F 31 00 08  	DB $1F, $31, $00, $08
  34++EFCD 1F 10 00 04  	DB $1F, $10, $00, $04
  35++EFD1 1F 59 08 10  	DB $1F, $59, $08, $10
  36++EFD5 1F 51 04 08  	DB $1F, $51, $04, $08
  37++EFD9 1F 37 08 20  	DB $1F, $37, $08, $20
  38++EFDD 1F 40 04 0C  	DB $1F, $40, $04, $0C
  39++EFE1 1F 62 0C 20  	DB $1F, $62, $0C, $20
  40++EFE5 1F A7 08 24  	DB $1F, $A7, $08, $24
  41++EFE9 1F 84 0C 10  	DB $1F, $84, $0C, $10
  42++EFED 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  43++EFF1 07 88 0C 14  	DB $07, $88, $0C, $14
  44++EFF5 07 BB 0C 28  	DB $07, $BB, $0C, $28
  45++EFF9 07 99 08 14  	DB $07, $99, $08, $14
  46++EFFD 07 AA 08 28  	DB $07, $AA, $08, $28
  47++F001 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  48++F005 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  49++F009 1F C8 14 18  	DB $1F, $C8, $14, $18
  50++F00D 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  51++F011 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  52++F015 1F CB 18 28  	DB $1F, $CB, $18, $28
  53++F019 1F 98 10 14  	DB $1F, $98, $10, $14
  54++F01D 1F BA 24 28  	DB $1F, $BA, $24, $28
  55++F021 1F 54 04 10  	DB $1F, $54, $04, $10
  56++F025 1F 76 20 24  	DB $1F, $76, $20, $24
  57++F029
  58++F029              Python_PEdgesSize: equ $ - Python_PEdges
  59++F029
  60++F029
  61++F029              Python_PEdgesCnt: equ Python_PEdgesSize/4
  62++F029
  63++F029
  64++F029 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  65++F02D 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  66++F031 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  67++F035 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  68++F039 9F 13 26 00  	DB $9F, $13, $26, $00
  69++F03D 1F 13 26 00  	DB $1F, $13, $26, $00
  70++F041 DF 13 26 00  	DB $DF, $13, $26, $00
  71++F045 5F 13 26 00  	DB $5F, $13, $26, $00
  72++F049 BF 19 25 0B  	DB $BF, $19, $25, $0B
  73++F04D 3F 19 25 0B  	DB $3F, $19, $25, $0B
  74++F051 7F 19 25 0B  	DB $7F, $19, $25, $0B
  75++F055 FF 19 25 0B  	DB $FF, $19, $25, $0B
  76++F059 3F 00 00 70  	DB $3F, $00, $00, $70
  77++F05D
  78++F05D
  79++F05D              Python_PNormalsSize: equ $ - Python_PNormals
  80++F05D              Python_PLen: equ $ - Python_P
  81++F05D
# file closed: ./Data/Ships/Python_P.asm
 518+ F05D                                      ENDIF
 519+ F05D                                      IFDEF SHIPBANKC
 520+ F05D ~                                    include "Data/Ships/Rattler.asm"
 521+ F05D ~                                    include "Data/Ships/Rock_Hermit.asm"
 522+ F05D ~                                    include "Data/Ships/ShuttleType9.asm"
 523+ F05D ~                                    include "Data/Ships/Shuttle_Mk_2.asm"
 524+ F05D ~                                    include "Data/Ships/Sidewinder.asm"
 525+ F05D ~                                    include "Data/Ships/Splinter.asm"
 526+ F05D ~                                    include "Data/Ships/TestVector.asm"
 527+ F05D ~                                    include "Data/Ships/Thargoid.asm"
 528+ F05D ~                                    include "Data/Ships/Thargon.asm"
 529+ F05D ~                                    include "Data/Ships/TransportType10.asm"
 530+ F05D ~                                    include "Data/Ships/Viper.asm"
 531+ F05D ~                                    include "Data/Ships/Worm.asm"
 532+ F05D                                      ENDIF
 533+ F05D
 534+ F05D
 535+ F05D              ; TODO Later reorg these offsets for better 16 bit read - Done
 536+ F05D              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 537+ F05D
 538+ F05D
 539+ F05D              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 540+ F05D              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 541+ F05D              ; Scoop: 0 = no scoop 1= scoop , anything more?
 542+ F05D              ; hull byte#1-2 area for missile lock, lo, hi
 543+ F05D              ; hull byte#3   edges data info offset lo
 544+ F05D              ; hull byte#4   faces data info offset lo
 545+ F05D              ; hull byte#5   4*maxlines+1 for ship lines stack
 546+ F05D              ; hull byte#6   gun vertex*4
 547+ F05D              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 548+ F05D              ; hull byte#8   vertices*6
 549+ F05D              ; hull byte#9	edge Count
 550+ F05D              ; hull bytes#10-11 bounty lo hi
 551+ F05D              ; hull byte#12  faces*4
 552+ F05D              ; hull byte#13  dot beyond distance
 553+ F05D              ; hull byte#14  energy
 554+ F05D              ; hull byte#15  speed (end of 4th row)
 555+ F05D              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 556+ F05D              ; hull byte#17  faces offset hi
 557+ F05D              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 558+ F05D              ; hull byte#19  laser|missile(=lower 3 bits)
 559+ F05D              ; hull byte#20  Added Vertices for 20,21
 560+ F05D
 561+ F05D              ; Optimised version to be applied to add data brought in to here:
 562+ F05D              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 563+ F05D              ; hull byte#1-2 area for missile lock, lo, hi
 564+ F05D              ; hull byte#3   edges data info offset lo
 565+ F05D              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 566+ F05D              ; hull byte#5   4*maxlines+1 for ship lines stack
 567+ F05D              ; hull byte#6   gun vertex*4
 568+ F05D              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 569+ F05D              ; hull byte#8   vertices*6
 570+ F05D              ; hull byte#9	edge Count
 571+ F05D              ; hull bytes#10-11 bounty lo hi
 572+ F05D              ; hull byte#12  faces*4
 573+ F05D              ; hull byte#13  dot beyond distance
 574+ F05D              ; hull byte#14  energy
 575+ F05D              ; hull byte#15  speed (end of 4th row)
 576+ F05D              ; hull byte#16  faces data info offset lo (was 4)
 577+ F05D              ; hull byte#17  faces offset hi
 578+ F05D              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 579+ F05D              ; hull bute#19  laser|missile(=lower 3 bits)
 580+ F05D              ; hull byte#20  Added Vertices for 20,21
 581+ F05D              ;
 582+ F05D              ; Vertex Data Structure
 583+ F05D              ; Byte 0 X1Lo
 584+ F05D              ; Byte 1 X1Hi
 585+ F05D              ; Byte 2 Y1Lo
 586+ F05D              ; Byte 3 Y1Hi
 587+ F05D              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 588+ F05D              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 589+ F05D              ;
 590+ F05D              ;
 591+ F05D              ; Edge Data Structure
 592+ F05D              ; Byte 0
 593+ F05D              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 594+ F05D              ; Byte 2 - Index to Vertex 1
 595+ F05D              ; Byte 3 - Index to Vertex 2
 596+ F05D              ;
 597+ F05D              ; Normal/Faces Data Structure
 598+ F05D              ;
 599+ F05D              ;
 600+ F05D              ;
 601+ F05D              ; Original Data:
 602+ F05D              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 603+ F05D              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 604+ F05D              ;		\ hull byte#1-2 area for missile lock, lo, hi
 605+ F05D              ;		\ hull byte#3   edges data info offset lo
 606+ F05D              ;		\ hull byte#4   faces data info offset lo
 607+ F05D              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 608+ F05D              ;		\ hull byte#6   gun vertex*4
 609+ F05D              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 610+ F05D              ;		\ hull byte#8   vertices*6
 611+ F05D              ;		\ hull bytes#10-11 bounty lo hi
 612+ F05D              ;		\ hull byte#12  faces*4
 613+ F05D              ;		\ hull byte#13  dot beyond distance
 614+ F05D              ;		\ hull byte#14  energy
 615+ F05D              ;		\ hull byte#15  speed (end of 4th row)
 616+ F05D              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 617+ F05D              ;		\ hull byte#17  faces offset hi
 618+ F05D              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 619+ F05D              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 620+ F05D              ; Corrected pointers
 621+ F05D              ; &565D \ Cargo cannister = Type 5
 622+ F05D              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 623+ F05D              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 624+ F05D              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 625+ F05D              ; Mapping Orginal to new
 626+ F05D              ; 0    => 0
 627+ F05D              ; 1-2  => 1-2
 628+ F05D              ; 3    => EQU Edges
 629+ F05D              ; 4    => EQU Normals
 630+ F05D              ; 5    => EQU EdgesCnt
 631+ F05D              ; 6    => 6
 632+ F05D              ; 7    => 7
 633+ F05D              ; 8    => EQU VertSize
 634+ F05D              ; 9    => EQU EdgesCnt
 635+ F05D              ; 10-11=> 10-11
 636+ F05D              ; 12   => EQU  NormalsSize
 637+ F05D              ; 13   => 13
 638+ F05D              ; 14   => 14
 639+ F05D              ; 15   => 15
 640+ F05D              ; 16   => EQU Edges
 641+ F05D              ; 17   => EQU Normals
 642+ F05D              ; 18   => 18
 643+ F05D              ; 19   => 19
# file closed: ./Data/ShipModels.asm
 984  F05D              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 985  F05D                  SLOT    ShipModelsAddr
 986  F05D                  PAGE    BankShipModelsC
 987  F05D              	ORG     ShipModelsAddr, BankShipModelsC
 988  E000                  UNDEFINE SHIPBANKB
 989  E000                  DEFINE   SHIPBANKC 1
 990  E000                  INCLUDE "./Data/ShipModels.asm"
# file opened: ./Data/ShipModels.asm
   1+ E000                              IFNDEF SHIPEQUATES
   2+ E000 ~                            DEFINE SHIPEQUATES
   3+ E000 ~            ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   4+ E000 ~            MissileLockLoOffset	    equ 1
   5+ E000 ~            MissileLockHiOffset	    equ 2
   6+ E000 ~            EdgeAddyOffset		    equ 3
   7+ E000 ~            LineX4Offset		    equ 5
   8+ E000 ~            GunVertexOffset		    equ 6
   9+ E000 ~            ExplosionCtOffset	    equ 7
  10+ E000 ~            VertexCtX6Offset	    equ 8
  11+ E000 ~            EdgeCountOffset		    equ 9
  12+ E000 ~            BountyLoOffset		    equ 10
  13+ E000 ~            BountyHiOffset		    equ 11
  14+ E000 ~            FaceCtX4Offset		    equ 12
  15+ E000 ~            DotOffset			    equ 13
  16+ E000 ~            EnergyOffset		    equ 14
  17+ E000 ~            SpeedOffset			    equ 15
  18+ E000 ~            FaceAddyOffset		    equ 16
  19+ E000 ~            QOffset				    equ 18
  20+ E000 ~            LaserOffset			    equ 19
  21+ E000 ~            VerticiesAddyOffset     equ 20
  22+ E000 ~            ShipTypeOffset          equ 22
  23+ E000 ~            ShipNewBitsOffset       equ 23
  24+ E000 ~            ShipDataLength          equ ShipNewBitsOffset+1
  25+ E000 ~
  26+ E000 ~            CobraTablePointer       equ 43
  27+ E000 ~            ;29 faulty
  28+ E000 ~            BankThreshold           equ 16
  29+ E000 ~
  30+ E000 ~            ShipTableALast          equ 23
  31+ E000 ~            ShipTableBLast          equ 39
  32+ E000 ~            ShipTableCLast          equ 55
  33+ E000                             ENDIF
  34+ E000
  35+ E000
  36+ E000
  37+ E000
  38+ E000
  39+ E000              ; For ship number A fetch the adjusted ship number in B and bank number in A for the respective ship based on the ship table
  40+ E000                                      IFDEF SHIPBANKA
  41+ E000 ~            GetShipModelAddress:
  42+ E000 ~            GetShipModelAddressA:   ld      c,a
  43+ E000 ~                                    ld      hl,ShipModelBankA                   ; Ship Model BankA, B and C are all the same value
  44+ E000                                      ENDIF
  45+ E000                                      IFDEF SHIPBANKB
  46+ E000 ~            GetShipModelAddressB:   ld      c,a
  47+ E000 ~                                    ld      hl,ShipModelBankB
  48+ E000                                      ENDIF
  49+ E000                                      IFDEF SHIPBANKC
  50+ E000 4F           GetShipModelAddressC:   ld      c,a
  51+ E001 21 A6 E0                             ld      hl,ShipModelBankC
  52+ E004                                      ENDIF
  53+ E004                                      JumpIfALTNusng ShipTableALast+1, .ShipBankA
  53+ E004 FE 18       >                        cp      ShipTableALast+1
  53+ E006 DA 15 E0    >                        jp		c,.ShipBankA
  54+ E009                                      JumpIfALTNusng ShipTableBLast+1, .ShipBankB
  54+ E009 FE 28       >                        cp      ShipTableBLast+1
  54+ E00B DA 19 E0    >                        jp		c,.ShipBankB
  55+ E00E                                      JumpIfALTNusng ShipTableCLast+1, .ShipBankC
  55+ E00E FE 38       >                        cp      ShipTableCLast+1
  55+ E010 DA 1E E0    >                        jp		c,.ShipBankC
  56+ E013              .Failed:                SetCarryFlag                                ; if its over current bank max then a failure
  56+ E013 37          >                        scf
  57+ E014 C9                                   ret
  58+ E015 47           .ShipBankA:             ld      b,a
  59+ E016 C3 20 E0                             jp      .Done
  60+ E019 D6 18        .ShipBankB:             sub     a,ShipTableALast+1
  61+ E01B C3 20 E0                             jp      .Done
  62+ E01E D6 28        .ShipBankC:             sub     a,ShipTableBLast+1
  63+ E020 3E 3B        .Done:                  ld      a,BankShipModelsA
  64+ E022                                      ClearCarryFlag
  64+ E022 B7          >                        or a
  65+ E023 C9                                   ret
  66+ E024
  67+ E024              ;GINF:
  68+ E024                                      IFDEF SHIPBANKA
  69+ E024 ~            GetInfo:                                    ; gets pointer to ship data for ship type in a
  70+ E024 ~            GetInfoA:                                   ; gets pointer to ship data for ship type in a
  71+ E024                                      ENDIF
  72+ E024                                      IFDEF SHIPBANKB
  73+ E024 ~            GetInfoB:
  74+ E024                                      ENDIF
  75+ E024                                      IFDEF SHIPBANKC
  76+ E024              GetInfoC:
  77+ E024                                      ENDIF
  78+ E024 4F                                   ld          c,a
  79+ E025 CB 2F                                sra         a
  80+ E027 CB 2F                                sra         a
  81+ E029 CB 2F                                sra         a
  82+ E02B CB 2F                                sra         a       ; Divide by 16 to get bank table offset
  83+ E02D 47                                   ld          b,a     ; save it as this is the number of x16 we need to subtract
  84+ E02E 21 A6 E0                             ld          hl,ShipModelBankA
  85+ E031 ED 31                                add         hl,a
  86+ E033 7E                                   ld          a,(hl)
  87+ E034                                      MMUSelectShipModelA
  87+ E034 ED 92 57    >					 nextreg ShipModelMMU,	    a
  88+ E037 79                                   ld          a,c
  89+ E038 50                                   ld          d,b
  90+ E039 1E 10                                ld          e,16
  91+ E03B ED 30                                mul
  92+ E03D 93                                   sub         a,e
  93+ E03E 21 A9 E0                             ld          hl,ShipModelTable
  94+ E041 ED 31                                add         hl,a
  95+ E043 ED 31                                add         hl,a
  96+ E045 5E                                   ld          e,(hl)
  97+ E046 23                                   inc         hl
  98+ E047 56                                   ld          d,(hl)
  99+ E048 C9                                   ret
 100+ E049
 101+ E049
 102+ E049              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
 103+ E049                                      IFDEF SHIPBANKA
 104+ E049 ~            CopyVerticesDataToUBnk:
 105+ E049 ~            CopyVerticesDataToUBnkA:
 106+ E049                                      ENDIF
 107+ E049                                      IFDEF SHIPBANKB
 108+ E049 ~            CopyVerticesDataToUBnkB:
 109+ E049                                      ENDIF
 110+ E049                                      IFDEF SHIPBANKC
 111+ E049              CopyVerticesDataToUBnkC:
 112+ E049                                      ENDIF
 113+ E049 2A 12 C3                             ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 114+ E04C 11 16 C3                             ld          de,UBnkHullVerticies
 115+ E04F 06 00                                ld          b,0
 116+ E051 3A 06 C3                             ld			a,(VertexCtX6Addr)
 117+ E054 4F                                   ld          c,a
 118+ E055 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 119+ E056 CD AD 90                             call        memcopy_dma
 120+ E059 C9                                   ret
 121+ E05A
 122+ E05A                                      IFDEF SHIPBANKA
 123+ E05A ~            CopyEdgeDataToUBnk:
 124+ E05A ~            CopyEdgeDataToUBnkA:
 125+ E05A                                      ENDIF
 126+ E05A                                      IFDEF SHIPBANKB
 127+ E05A ~            CopyEdgeDataToUBnkB:
 128+ E05A                                      ENDIF
 129+ E05A                                      IFDEF SHIPBANKC
 130+ E05A              CopyEdgeDataToUBnkC:
 131+ E05A                                      ENDIF
 132+ E05A 2A 01 C3                             ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 133+ E05D 11 42 C4                             ld          de,UBnkHullEdges
 134+ E060 06 00                                ld          b,0
 135+ E062 3A 03 C3                             ld			a,(LineX4Addr)
 136+ E065 4F                                   ld          c,a
 137+ E066 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 138+ E067 CD AD 90                             call        memcopy_dma
 139+ E06A C9                                   ret
 140+ E06B
 141+ E06B                                      IFDEF SHIPBANKA
 142+ E06B ~            CopyNormalDataToUBnk:
 143+ E06B ~            CopyNormalDataToUBnkA:
 144+ E06B                                      ENDIF
 145+ E06B                                      IFDEF SHIPBANKB
 146+ E06B ~            CopyNormalDataToUBnkB:
 147+ E06B                                      ENDIF
 148+ E06B                                      IFDEF SHIPBANKC
 149+ E06B              CopyNormalDataToUBnkC:
 150+ E06B                                      ENDIF
 151+ E06B 2A 0E C3                             ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 152+ E06E 11 F2 C8                             ld          de,UBnkHullNormals
 153+ E071 06 00                                ld          b,0
 154+ E073 3A 0A C3                             ld          a,(FaceCtX4Addr)
 155+ E076 4F                                   ld          c,a
 156+ E077 EB                                   ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 157+ E078 CD AD 90                             call        memcopy_dma
 158+ E07B C9                                   ret
 159+ E07C
 160+ E07C
 161+ E07C                                      IFDEF SHIPBANKA
 162+ E07C ~            CopyShipDataToUBnk:
 163+ E07C ~            CopyShipDataToUBnkA:    push        af
 164+ E07C ~                                    ld          a,BankShipModelsA
 165+ E07C                                      ENDIF
 166+ E07C                                      IFDEF SHIPBANKB
 167+ E07C ~            CopyShipDataToUBnkB:    push        af
 168+ E07C ~                                    ld          a,BankShipModelsB
 169+ E07C                                      ENDIF
 170+ E07C                                      IFDEF SHIPBANKC
 171+ E07C F5           CopyShipDataToUBnkC:    push        af
 172+ E07D 3E 44                                ld          a,BankShipModelsC
 173+ E07F                                      ENDIF
 174+ E07F 32 FC C2                             ld          (UBnkShipModelBank),a
 175+ E082 F1                                   pop         af                              ; save the current ship number and bank in case we need it later, say for a space station
 176+ E083 32 FD C2                             ld			(UBnkShipModelNbr),a			; mark ship type in bank
 177+ E086
 178+ E086 21 39 E1     .GetHullDataLength:     ld          hl,ShipModelSizeTable
 179+ E089 ED 31                                add         hl,a
 180+ E08B ED 31                                add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 181+ E08D 4E                                   ld          c,(hl)
 182+ E08E 23                                   inc         hl
 183+ E08F 46                                   ld          b,(hl)                      ; bc now equals length of data set
 184+ E090 CD 24 E0     .GetHullDataAddress:    call        GetInfo                     ; de = address of Ship Data
 185+ E093 EB                                   ex          de,hl                       ; hl = address of Ship Data
 186+ E094 11 FE C2                             ld          de,UBnkHullCopy             ; Universe bank
 187+ E097 01 18 00                             ld          bc,ShipDataLength
 188+ E09A ED B0                                ldir
 189+ E09C CD 49 E0                             call        CopyVerticesDataToUBnk
 190+ E09F CD 5A E0                             call        CopyEdgeDataToUBnk
 191+ E0A2 CD 6B E0                             call        CopyNormalDataToUBnk
 192+ E0A5 C9                                   ret
 193+ E0A6
 194+ E0A6              ; change to there are two banks
 195+ E0A6              ; the master table in both has the bank and ship replicated in boht banks to simplify quick bank switch
 196+ E0A6              ;
 197+ E0A6
 198+ E0A6
 199+ E0A6
 200+ E0A6
 201+ E0A6              ; Ships in Bank A
 202+ E0A6                                       IFDEF SHIPBANKA
 203+ E0A6 ~            ShipModelBankA           DB BankShipModelsA
 204+ E0A6 ~                                     DB BankShipModelsB
 205+ E0A6 ~                                     DB BankShipModelsC
 206+ E0A6                                       ENDIF
 207+ E0A6                                       IFDEF SHIPBANKB
 208+ E0A6 ~            ShipModelBankB           DB BankShipModelsA
 209+ E0A6 ~                                     DB BankShipModelsB
 210+ E0A6 ~                                     DB BankShipModelsC
 211+ E0A6                                       ENDIF
 212+ E0A6                                       IFDEF SHIPBANKC
 213+ E0A6 3B           ShipModelBankC           DB BankShipModelsA
 214+ E0A7 43                                    DB BankShipModelsB
 215+ E0A8 44                                    DB BankShipModelsC
 216+ E0A9                                       ENDIF
 217+ E0A9                                       IFDEF SHIPBANKA
 218+ E0A9 ~            ShipModelTableA:         DW Adder                                   ;00
 219+ E0A9 ~                                     DW Anaconda                                ;01
 220+ E0A9 ~                                     DW Asp_Mk_2                                ;02
 221+ E0A9 ~                                     DW Asteroid                                ;03
 222+ E0A9 ~                                     DW Boa                                     ;04
 223+ E0A9 ~                                     DW Boulder                                 ;05
 224+ E0A9 ~                                     DW Bushmaster                              ;06
 225+ E0A9 ~                                     DW CargoType5                              ;07
 226+ E0A9 ~                                     DW Chameleon                               ;08
 227+ E0A9 ~                                     DW CobraMk3                                ;09
 228+ E0A9 ~                                     DW Cobra_Mk_1                              ;10
 229+ E0A9 ~                                     DW Cobra_Mk_3_P                            ;11
 230+ E0A9 ~                                     DW Constrictor                             ;12
 231+ E0A9 ~                                     DW Coriolis                                ;13
 232+ E0A9 ~                                     DW Cougar                                  ;14
 233+ E0A9 ~                                     DW Dodo                                    ;15
 234+ E0A9 ~                                     DW Dragon                                  ;16
 235+ E0A9 ~                                     DW Escape_Pod                              ;17
 236+ E0A9 ~                                     DW Fer_De_Lance                            ;18
 237+ E0A9 ~                                     DW Gecko                                   ;19
 238+ E0A9 ~                                     DW Ghavial                                 ;20
 239+ E0A9 ~                                     DW Iguana                                  ;21
 240+ E0A9 ~                                     DW Krait                                   ;22
 241+ E0A9 ~                                     DW Logo                                    ;23
 242+ E0A9 ~            ShipVertexTableA:        DW AdderVertices
 243+ E0A9 ~                                     DW AnacondaVertices
 244+ E0A9 ~                                     DW Asp_Mk_2Vertices
 245+ E0A9 ~                                     DW AsteroidVertices
 246+ E0A9 ~                                     DW BoaVertices
 247+ E0A9 ~                                     DW BoulderVertices
 248+ E0A9 ~                                     DW BushmasterVertices
 249+ E0A9 ~                                     DW CargoType5Vertices
 250+ E0A9 ~                                     DW ChameleonVertices
 251+ E0A9 ~                                     DW CobraMk3Vertices
 252+ E0A9 ~                                     DW Cobra_Mk_1Vertices
 253+ E0A9 ~                                     DW Cobra_Mk_3_PVertices
 254+ E0A9 ~                                     DW ConstrictorVertices
 255+ E0A9 ~                                     DW CoriolisVertices
 256+ E0A9 ~                                     DW CougarVertices
 257+ E0A9 ~                                     DW DodoVertices
 258+ E0A9 ~            ShipEdgeTableA:          DW AdderEdges
 259+ E0A9 ~                                     DW AnacondaEdges
 260+ E0A9 ~                                     DW Asp_Mk_2Edges
 261+ E0A9 ~                                     DW AsteroidEdges
 262+ E0A9 ~                                     DW BoaEdges
 263+ E0A9 ~                                     DW BoulderEdges
 264+ E0A9 ~                                     DW BushmasterEdges
 265+ E0A9 ~                                     DW CargoType5Edges
 266+ E0A9 ~                                     DW ChameleonEdges
 267+ E0A9 ~                                     DW CobraMk3Edges
 268+ E0A9 ~                                     DW Cobra_Mk_1Edges
 269+ E0A9 ~                                     DW Cobra_Mk_3_PEdges
 270+ E0A9 ~                                     DW ConstrictorEdges
 271+ E0A9 ~                                     DW CoriolisEdges
 272+ E0A9 ~                                     DW CougarEdges
 273+ E0A9 ~                                     DW DodoEdges
 274+ E0A9 ~            ShipNormalTableA:        DW AdderNormals
 275+ E0A9 ~                                     DW AnacondaNormals
 276+ E0A9 ~                                     DW Asp_Mk_2Normals
 277+ E0A9 ~                                     DW AsteroidNormals
 278+ E0A9 ~                                     DW BoaNormals
 279+ E0A9 ~                                     DW BoulderNormals
 280+ E0A9 ~                                     DW BushmasterNormals
 281+ E0A9 ~                                     DW CargoType5Normals
 282+ E0A9 ~                                     DW ChameleonNormals
 283+ E0A9 ~                                     DW CobraMk3Normals
 284+ E0A9 ~                                     DW Cobra_Mk_1Normals
 285+ E0A9 ~                                     DW Cobra_Mk_3_PNormals
 286+ E0A9 ~                                     DW ConstrictorNormals
 287+ E0A9 ~                                     DW CoriolisNormals
 288+ E0A9 ~                                     DW CougarNormals
 289+ E0A9 ~                                     DW DodoNormals
 290+ E0A9 ~            ShipModelSizeTableA:     DW AdderLen
 291+ E0A9 ~                                     DW AnacondaLen
 292+ E0A9 ~                                     DW Asp_Mk_2Len
 293+ E0A9 ~                                     DW AsteroidLen
 294+ E0A9 ~                                     DW BoaLen
 295+ E0A9 ~                                     DW BoulderLen
 296+ E0A9 ~                                     DW BushmasterLen
 297+ E0A9 ~                                     DW CargoType5Len
 298+ E0A9 ~                                     DW ChameleonLen
 299+ E0A9 ~                                     DW CobraMk3Len
 300+ E0A9 ~                                     DW Cobra_Mk_1Len
 301+ E0A9 ~                                     DW Cobra_Mk_3_PLen
 302+ E0A9 ~                                     DW ConstrictorLen
 303+ E0A9 ~                                     DW CoriolisLen
 304+ E0A9 ~                                     DW CougarLen
 305+ E0A9 ~                                     DW DodoLen
 306+ E0A9                                       ENDIF
 307+ E0A9                                       IFDEF SHIPBANKB
 308+ E0A9 ~            ShipModelTableB:         DW Dragon                                  ;24
 309+ E0A9 ~                                     DW Escape_Pod                              ;25
 310+ E0A9 ~                                     DW Fer_De_Lance                            ;26
 311+ E0A9 ~                                     DW Gecko                                   ;27
 312+ E0A9 ~                                     DW Ghavial                                 ;28
 313+ E0A9 ~                                     DW Iguana                                  ;29
 314+ E0A9 ~                                     DW Krait                                   ;30
 315+ E0A9 ~                                     DW Logo                                    ;31
 316+ E0A9 ~                                     DW Mamba                                   ;32
 317+ E0A9 ~                                     DW Missile                                 ;33
 318+ E0A9 ~                                     DW Monitor                                 ;34
 319+ E0A9 ~                                     DW Moray                                   ;35
 320+ E0A9 ~                                     DW Ophidian                                ;36
 321+ E0A9 ~                                     DW Plate                                   ;37
 322+ E0A9 ~                                     DW Python                                  ;38
 323+ E0A9 ~                                     DW Python_P                                ;39
 324+ E0A9 ~            ShipVertexTableB:        DW DragonVertices
 325+ E0A9 ~                                     DW Escape_PodVertices
 326+ E0A9 ~                                     DW Fer_De_LanceVertices
 327+ E0A9 ~                                     DW GeckoVertices
 328+ E0A9 ~                                     DW GhavialVertices
 329+ E0A9 ~                                     DW IguanaVertices
 330+ E0A9 ~                                     DW KraitVertices
 331+ E0A9 ~                                     DW LogoVertices
 332+ E0A9 ~                                     DW MambaVertices
 333+ E0A9 ~                                     DW MissileVertices
 334+ E0A9 ~                                     DW MonitorVertices
 335+ E0A9 ~                                     DW MorayVertices
 336+ E0A9 ~                                     DW OphidianVertices
 337+ E0A9 ~                                     DW PlateVertices
 338+ E0A9 ~                                     DW PythonVertices
 339+ E0A9 ~                                     DW Python_PVertices
 340+ E0A9 ~            ShipEdgeTableB:          DW DragonEdges
 341+ E0A9 ~                                     DW Escape_PodEdges
 342+ E0A9 ~                                     DW Fer_De_LanceEdges
 343+ E0A9 ~                                     DW GeckoEdges
 344+ E0A9 ~                                     DW GhavialEdges
 345+ E0A9 ~                                     DW IguanaEdges
 346+ E0A9 ~                                     DW KraitEdges
 347+ E0A9 ~                                     DW LogoEdges
 348+ E0A9 ~                                     DW MambaEdges
 349+ E0A9 ~                                     DW MissileEdges
 350+ E0A9 ~                                     DW MonitorEdges
 351+ E0A9 ~                                     DW MorayEdges
 352+ E0A9 ~                                     DW OphidianEdges
 353+ E0A9 ~                                     DW PlateEdges
 354+ E0A9 ~                                     DW PythonEdges
 355+ E0A9 ~                                     DW Python_PEdges
 356+ E0A9 ~            ShipNormalTableB:        DW DragonNormals
 357+ E0A9 ~                                     DW Escape_PodNormals
 358+ E0A9 ~                                     DW Fer_De_LanceNormals
 359+ E0A9 ~                                     DW GeckoNormals
 360+ E0A9 ~                                     DW GhavialNormals
 361+ E0A9 ~                                     DW IguanaNormals
 362+ E0A9 ~                                     DW KraitNormals
 363+ E0A9 ~                                     DW LogoNormals
 364+ E0A9 ~                                     DW MambaNormals
 365+ E0A9 ~                                     DW MissileNormals
 366+ E0A9 ~                                     DW MonitorNormals
 367+ E0A9 ~                                     DW MorayNormals
 368+ E0A9 ~                                     DW OphidianNormals
 369+ E0A9 ~                                     DW PlateNormals
 370+ E0A9 ~                                     DW PythonNormals
 371+ E0A9 ~                                     DW Python_PNormals
 372+ E0A9 ~            ShipModelSizeTableB:     DW DragonLen
 373+ E0A9 ~                                     DW Escape_PodLen
 374+ E0A9 ~                                     DW Fer_De_LanceLen
 375+ E0A9 ~                                     DW GeckoLen
 376+ E0A9 ~                                     DW GhavialLen
 377+ E0A9 ~                                     DW IguanaLen
 378+ E0A9 ~                                     DW KraitLen
 379+ E0A9 ~                                     DW LogoLen
 380+ E0A9 ~                                     DW MambaLen
 381+ E0A9 ~                                     DW MissileLen
 382+ E0A9 ~                                     DW MonitorLen
 383+ E0A9 ~                                     DW MorayLen
 384+ E0A9 ~                                     DW OphidianLen
 385+ E0A9 ~                                     DW PlateLen
 386+ E0A9 ~                                     DW PythonLen
 387+ E0A9 ~                                     DW Python_PLen
 388+ E0A9                                       ENDIF
 389+ E0A9                                       IFDEF SHIPBANKC
 390+ E0A9 49 E1        ShipModelTableC:         DW Rattler                                 ;40
 391+ E0AB 57 E2                                 DW Rock_Hermit                             ;41
 392+ E0AD 31 E3                                 DW ShuttleType9                            ;42
 393+ E0AF 67 E4                                 DW Shuttle_Mk_2                            ;43
 394+ E0B1 89 E5                                 DW Sidewinder                              ;44
 395+ E0B3 35 E6                                 DW Splinter                                ;45
 396+ E0B5 8D E6                                 DW TestVector                              ;46
 397+ E0B7 EF E6                                 DW Thargoid                                ;47
 398+ E0B9 0F E8                                 DW Thargon                                 ;48
 399+ E0BB BB E8                                 DW TransportType10                         ;49
 400+ E0BD A1 EA                                 DW Viper                                   ;50
 401+ E0BF 7F EB                                 DW Worm                                    ;51
 402+ E0C1 00 00                                 DW 0                                       ;52
 403+ E0C3 00 00                                 DW 0                                       ;53
 404+ E0C5 00 00                                 DW 0                                       ;54
 405+ E0C7 00 00                                 DW 0                                       ;55
 406+ E0C9 61 E1        ShipVertexTableC:        DW RattlerVertices
 407+ E0CB 6F E2                                 DW Rock_HermitVertices
 408+ E0CD 49 E3                                 DW ShuttleType9Vertices
 409+ E0CF 7F E4                                 DW Shuttle_Mk_2Vertices
 410+ E0D1 A1 E5                                 DW SidewinderVertices
 411+ E0D3 4D E6                                 DW SplinterVertices
 412+ E0D5 A5 E6                                 DW TestVectorVertices
 413+ E0D7 07 E7                                 DW ThargoidVertices
 414+ E0D9 27 E8                                 DW ThargonVertices
 415+ E0DB D3 E8                                 DW TransportType10Vertices
 416+ E0DD B9 EA                                 DW ViperVertices
 417+ E0DF 97 EB                                 DW WormVertices
 418+ E0E1 00 00                                 DW 0
 419+ E0E3 00 00                                 DW 0
 420+ E0E5 00 00                                 DW 0
 421+ E0E7 00 00                                 DW 0
 422+ E0E9 BB E1        ShipEdgeTableC:          DW RattlerEdges
 423+ E0EB A5 E2                                 DW Rock_HermitEdges
 424+ E0ED BB E3                                 DW ShuttleType9Edges
 425+ E0EF E5 E4                                 DW Shuttle_Mk_2Edges
 426+ E0F1 DD E5                                 DW SidewinderEdges
 427+ E0F3 65 E6                                 DW SplinterEdges
 428+ E0F5 CF E6                                 DW TestVectorEdges
 429+ E0F7 7F E7                                 DW ThargoidEdges
 430+ E0F9 63 E8                                 DW ThargonEdges
 431+ E0FB B1 E9                                 DW TransportType10Edges
 432+ E0FD 13 EB                                 DW ViperEdges
 433+ E0FF D3 EB                                 DW WormEdges
 434+ E101 00 00                                 DW 0
 435+ E103 00 00                                 DW 0
 436+ E105 00 00                                 DW 0
 437+ E107 00 00                                 DW 0
 438+ E109 23 E2        ShipNormalTableC:        DW RattlerNormals
 439+ E10B F9 E2                                 DW Rock_HermitNormals
 440+ E10D 33 E4                                 DW ShuttleType9Normals
 441+ E10F 55 E5                                 DW Shuttle_Mk_2Normals
 442+ E111 19 E6                                 DW SidewinderNormals
 443+ E113 7D E6                                 DW SplinterNormals
 444+ E115 DF E6                                 DW TestVectorNormals
 445+ E117 E7 E7                                 DW ThargoidNormals
 446+ E119 9F E8                                 DW ThargonNormals
 447+ E11B 69 EA                                 DW TransportType10Normals
 448+ E11D 63 EB                                 DW ViperNormals
 449+ E11F 13 EC                                 DW WormNormals
 450+ E121 00 00                                 DW 0
 451+ E123 00 00                                 DW 0
 452+ E125 00 00                                 DW 0
 453+ E127 00 00                                 DW 0
 454+ E129 0E 01        ShipModelSizeTableC:     DW RattlerLen
 455+ E12B DA 00                                 DW Rock_HermitLen
 456+ E12D 36 01                                 DW ShuttleType9Len
 457+ E12F 22 01                                 DW Shuttle_Mk_2Len
 458+ E131 AC 00                                 DW SidewinderLen
 459+ E133 58 00                                 DW SplinterLen
 460+ E135 62 00                                 DW TestVectorLen
 461+ E137 20 01                                 DW ThargoidLen
 462+ E139 AC 00                                 DW ThargonLen
 463+ E13B E6 01                                 DW TransportType10Len
 464+ E13D DE 00                                 DW ViperLen
 465+ E13F B4 00                                 DW WormLen
 466+ E141 00 00                                 DW 0
 467+ E143 00 00                                 DW 0
 468+ E145 00 00                                 DW 0
 469+ E147 00 00                                 DW 0
 470+ E149                                       ENDIF
 471+ E149
 472+ E149
 473+ E149                                      IFNDEF SHIPMODELTABLES
 474+ E149 ~                                    DEFINE SHIPMODELTABLES
 475+ E149 ~            ShipModelSizeTable:     EQU ShipModelSizeTableA
 476+ E149 ~            ShipModelBank:          EQU ShipModelBankA
 477+ E149 ~            ShipModelTable:         EQU ShipModelTableA
 478+ E149 ~            ShipVertexTable:        EQU ShipVertexTableA
 479+ E149 ~            ShipEdgeTable:          EQU ShipEdgeTableA
 480+ E149 ~            ShipNormalTable:        EQU ShipNormalTableA
 481+ E149                                      ENDIF
 482+ E149
 483+ E149                                      IFDEF SHIPBANKA
 484+ E149 ~                                    include "Data/Ships/Adder.asm"
 485+ E149 ~                                    include "Data/Ships/Anaconda.asm"
 486+ E149 ~                                    include "Data/Ships/Asp_Mk_2.asm"
 487+ E149 ~                                    include "Data/Ships/Asteroid.asm"
 488+ E149 ~                                    include "Data/Ships/Boa.asm"
 489+ E149 ~                                    include "Data/Ships/Boulder.asm"
 490+ E149 ~                                    include "Data/Ships/Bushmaster.asm"
 491+ E149 ~                                    include "Data/Ships/CargoType5.asm"
 492+ E149 ~                                    include "Data/Ships/Chameleon.asm"
 493+ E149 ~                                    include "Data/Ships/CobraMk3.asm"
 494+ E149 ~                                    include "Data/Ships/Cobra_Mk_1.asm"
 495+ E149 ~                                    include "Data/Ships/Cobra_Mk_3_P.asm"
 496+ E149 ~                                    include "Data/Ships/Constrictor.asm"
 497+ E149 ~                                    include "Data/Ships/Coriolis.asm"
 498+ E149 ~                                    include "Data/Ships/Cougar.asm"
 499+ E149 ~                                    include "Data/Ships/Dodo.asm"
 500+ E149                                      ENDIF
 501+ E149                                      IFDEF SHIPBANKB
 502+ E149 ~                                    include "Data/Ships/Dragon.asm"
 503+ E149 ~                                    include "Data/Ships/Escape_Pod.asm"
 504+ E149 ~                                    include "Data/Ships/Fer_De_Lance.asm"
 505+ E149 ~                                    include "Data/Ships/Gecko.asm"
 506+ E149 ~                                    include "Data/Ships/Ghavial.asm"
 507+ E149 ~                                    include "Data/Ships/Iguana.asm"
 508+ E149 ~                                    include "Data/Ships/Krait.asm"
 509+ E149 ~                                    include "Data/Ships/Logo.asm"
 510+ E149 ~                                    include "Data/Ships/Mamba.asm"
 511+ E149 ~                                    include "Data/Ships/Missile.asm"
 512+ E149 ~                                    include "Data/Ships/Monitor.asm"
 513+ E149 ~                                    include "Data/Ships/Moray.asm"
 514+ E149 ~                                    include "Data/Ships/Ophidian.asm"
 515+ E149 ~                                    include "Data/Ships/Plate.asm"
 516+ E149 ~                                    include "Data/Ships/Python.asm"
 517+ E149 ~                                    include "Data/Ships/Python_P.asm"
 518+ E149                                      ENDIF
 519+ E149                                      IFDEF SHIPBANKC
 520+ E149                                      include "Data/Ships/Rattler.asm"
# file opened: ./Data/Ships/Rattler.asm
   1++E149 02 17 70     Rattler:	DB $02, $17, $70
   2++E14C BB E1                    DW RattlerEdges
   3++E14E 68                       DB RattlerEdgesSize
   4++E14F 00 2A                    DB $00, $2A
   5++E151 5A                       DB RattlerVertSize
   6++E152 1A                       DB RattlerEdgesCnt
   7++E153 00 96                    DB $00, $96
   8++E155 34                       DB RattlerNormalsSize
   9++E156 0A 71 1F                 DB $0A, $71, $1F
  10++E159 23 E2                    DW RattlerNormals
  11++E15B 01 22                    DB $01, $22
  12++E15D 61 E1                    DW RattlerVertices
  13++E15F 00 00                                DB 0,0                      ; Type and Tactics
  14++E161
  15++E161
  16++E161 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  16++E165 89 23
  17++E167 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  17++E16B 9A 34
  18++E16D 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  18++E171 78 12
  19++E173 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  19++E177 AB 45
  20++E179 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  20++E17D 67 01
  21++E17F 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  21++E183 CC 5B
  22++E185 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  22++E189 CC 06
  23++E18B 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  23++E18F FF FF
  24++E191 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  24++E195 FF FF
  25++E197 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  25++E19B CC CC
  26++E19D 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  26++E1A1 CC CC
  27++E1A3 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  27++E1A7 CC CC
  28++E1A9 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  28++E1AD CC CC
  29++E1AF 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  29++E1B3 CC CC
  30++E1B5 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  30++E1B9 CC CC
  31++E1BB
  32++E1BB              RattlerVertSize: equ $ - RattlerVertices
  33++E1BB
  34++E1BB
  35++E1BB 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  36++E1BF 1F 17 08 10  	DB $1F, $17, $08, $10
  37++E1C3 1F 28 00 08  	DB $1F, $28, $00, $08
  38++E1C7 1F 39 00 04  	DB $1F, $39, $00, $04
  39++E1CB 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  40++E1CF 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  41++E1D3 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  42++E1D7 1F 6C 18 20  	DB $1F, $6C, $18, $20
  43++E1DB 1F 01 10 1C  	DB $1F, $01, $10, $1C
  44++E1DF 1F 67 10 20  	DB $1F, $67, $10, $20
  45++E1E3 1F 12 08 1C  	DB $1F, $12, $08, $1C
  46++E1E7 1F 78 08 20  	DB $1F, $78, $08, $20
  47++E1EB 1F 23 00 1C  	DB $1F, $23, $00, $1C
  48++E1EF 1F 89 00 20  	DB $1F, $89, $00, $20
  49++E1F3 1F 34 04 1C  	DB $1F, $34, $04, $1C
  50++E1F7 1F 9A 04 20  	DB $1F, $9A, $04, $20
  51++E1FB 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  52++E1FF 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  53++E203 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  54++E207 1F BC 14 20  	DB $1F, $BC, $14, $20
  55++E20B 0A CC 24 28  	DB $0A, $CC, $24, $28
  56++E20F 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  57++E213 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  58++E217 0A CC 30 34  	DB $0A, $CC, $30, $34
  59++E21B 0A CC 34 38  	DB $0A, $CC, $34, $38
  60++E21F 0A CC 38 30  	DB $0A, $CC, $38, $30
  61++E223
  62++E223              RattlerEdgesSize: equ $ - RattlerEdges
  63++E223
  64++E223
  65++E223              RattlerEdgesCnt: equ RattlerEdgesSize/4
  66++E223
  67++E223
  68++E223 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  69++E227 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  70++E22B 9F 09 5D 12  	DB $9F, $09, $5D, $12
  71++E22F 1F 09 5D 12  	DB $1F, $09, $5D, $12
  72++E233 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  73++E237 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  74++E23B DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  75++E23F DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  76++E243 DF 09 5D 12  	DB $DF, $09, $5D, $12
  77++E247 5F 09 5D 12  	DB $5F, $09, $5D, $12
  78++E24B 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  79++E24F 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  80++E253 3F 00 00 60  	DB $3F, $00, $00, $60
  81++E257
  82++E257              RattlerNormalsSize: equ $ - RattlerNormals
  83++E257              RattlerLen: equ $ - Rattler
  84++E257
# file closed: ./Data/Ships/Rattler.asm
 521+ E257                                      include "Data/Ships/Rock_Hermit.asm"
# file opened: ./Data/Ships/Rock_Hermit.asm
   1++E257 07 19 00     Rock_Hermit:	DB $07, $19, $00
   2++E25A A5 E2        	DW Rock_HermitEdges
   3++E25C 54           	DB Rock_HermitEdgesSize
   4++E25D 00 32        	DB $00, $32
   5++E25F 36           	DB Rock_HermitVertSize
   6++E260 15           	DB Rock_HermitEdgesCnt
   7++E261 00 00        	DB $00, $00
   8++E263 38           	DB Rock_HermitNormalsSize
   9++E264 32 B4 1E     	DB $32, $B4, $1E
  10++E267 F9 E2        	DW Rock_HermitNormals
  11++E269 01 02        	DB $01, $02
  12++E26B 6F E2        	DW Rock_HermitVertices
  13++E26D 00 00                                DB 0,0                      ; Type and Tactics
  14++E26F
  15++E26F
  16++E26F 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  16++E273 FF FF
  17++E275 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  17++E279 FF FF
  18++E27B 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  18++E27F FF FF
  19++E281 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  19++E285 FF FF
  20++E287 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  20++E28B 65 DC
  21++E28D 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  21++E291 FF FF
  22++E293 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  22++E297 10 32
  23++E299 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  23++E29D FF FF
  24++E29F 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  24++E2A3 98 BA
  25++E2A5
  26++E2A5
  27++E2A5              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  28++E2A5
  29++E2A5
  30++E2A5
  31++E2A5 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  32++E2A9 1F D6 00 10  	DB $1F, $D6, $00, $10
  33++E2AD 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  34++E2B1 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  35++E2B5 1F A3 04 08  	DB $1F, $A3, $04, $08
  36++E2B9 1F 32 04 18  	DB $1F, $32, $04, $18
  37++E2BD 1F 31 08 18  	DB $1F, $31, $08, $18
  38++E2C1 1F 41 08 14  	DB $1F, $41, $08, $14
  39++E2C5 1F 10 14 18  	DB $1F, $10, $14, $18
  40++E2C9 1F 60 00 14  	DB $1F, $60, $00, $14
  41++E2CD 1F 54 0C 14  	DB $1F, $54, $0C, $14
  42++E2D1 1F 20 00 18  	DB $1F, $20, $00, $18
  43++E2D5 1F 65 10 14  	DB $1F, $65, $10, $14
  44++E2D9 1F A8 04 20  	DB $1F, $A8, $04, $20
  45++E2DD 1F 87 04 1C  	DB $1F, $87, $04, $1C
  46++E2E1 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  47++E2E5 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  48++E2E9 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  49++E2ED 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  50++E2F1 1F BA 08 20  	DB $1F, $BA, $08, $20
  51++E2F5 1F 98 1C 20  	DB $1F, $98, $1C, $20
  52++E2F9
  53++E2F9              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  54++E2F9
  55++E2F9
  56++E2F9              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  57++E2F9
  58++E2F9
  59++E2F9 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  60++E2FD 5F 09 42 51  	DB $5F, $09, $42, $51
  61++E301 9F 48 40 1F  	DB $9F, $48, $40, $1F
  62++E305 DF 40 49 2F  	DB $DF, $40, $49, $2F
  63++E309 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  64++E30D 1F 87 0F 23  	DB $1F, $87, $0F, $23
  65++E311 1F 26 4C 46  	DB $1F, $26, $4C, $46
  66++E315 BF 42 3B 27  	DB $BF, $42, $3B, $27
  67++E319 FF 43 0F 50  	DB $FF, $43, $0F, $50
  68++E31D 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  69++E321 FF 46 50 28  	DB $FF, $46, $50, $28
  70++E325 7F 3A 66 33  	DB $7F, $3A, $66, $33
  71++E329 3F 51 09 43  	DB $3F, $51, $09, $43
  72++E32D 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  73++E331
  74++E331
  75++E331              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  76++E331              Rock_HermitLen: equ $ - Rock_Hermit
  77++E331
# file closed: ./Data/Ships/Rock_Hermit.asm
 522+ E331                                      include "Data/Ships/ShuttleType9.asm"
# file opened: ./Data/Ships/ShuttleType9.asm
   1++E331 0F 09 C4     ShuttleType9:	DB $0F, $09, $C4
   2++E334 BB E3        	DW ShuttleType9Edges
   3++E336 78           	DB ShuttleType9EdgesSize
   4++E337 00 26        	DB $00, $26
   5++E339 72           	DB ShuttleType9VertSize
   6++E33A 1E           	DB ShuttleType9EdgesCnt
   7++E33B 00 00        	DB $00, $00
   8++E33D 34           	DB ShuttleType9NormalsSize
   9++E33E 16 20 08     	DB $16, $20, $08
  10++E341 33 E4        	DW ShuttleType9Normals
  11++E343 02 00        	DB $02, $00
  12++E345 49 E3        	DW ShuttleType9Vertices
  13++E347 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E349
  15++E349
  16++E349 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  16++E34D FF FF
  17++E34F 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  17++E353 FF FF
  18++E355 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  18++E359 FF FF
  19++E35B 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  19++E35F FF FF
  20++E361 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  20++E365 12 39
  21++E367 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  21++E36B 34 59
  22++E36D 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  22++E371 56 79
  23++E373 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  23++E377 17 89
  24++E379 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  24++E37D 99 99
  25++E37F 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  25++E383 99 99
  26++E385 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  26++E389 99 99
  27++E38B 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  27++E38F 99 99
  28++E391 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  28++E395 0A BC
  29++E397 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  29++E39B FF 02
  30++E39D 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  30++E3A1 01 F4
  31++E3A3 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  31++E3A7 A1 3F
  32++E3A9 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  32++E3AD 6B 23
  33++E3AF 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  33++E3B3 F8 C0
  34++E3B5 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  34++E3B9 4F 18
  35++E3BB
  36++E3BB              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  37++E3BB
  38++E3BB
  39++E3BB
  40++E3BB 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  41++E3BF 1F 4A 04 08  	DB $1F, $4A, $04, $08
  42++E3C3 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  43++E3C7 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  44++E3CB 1F 18 00 1C  	DB $1F, $18, $00, $1C
  45++E3CF 18 12 00 10  	DB $18, $12, $00, $10
  46++E3D3 1F 23 04 10  	DB $1F, $23, $04, $10
  47++E3D7 18 34 04 14  	DB $18, $34, $04, $14
  48++E3DB 1F 45 08 14  	DB $1F, $45, $08, $14
  49++E3DF 0C 56 08 18  	DB $0C, $56, $08, $18
  50++E3E3 1F 67 0C 18  	DB $1F, $67, $0C, $18
  51++E3E7 18 78 0C 1C  	DB $18, $78, $0C, $1C
  52++E3EB 1F 39 10 14  	DB $1F, $39, $10, $14
  53++E3EF 1F 59 14 18  	DB $1F, $59, $14, $18
  54++E3F3 1F 79 18 1C  	DB $1F, $79, $18, $1C
  55++E3F7 1F 19 10 1C  	DB $1F, $19, $10, $1C
  56++E3FB 10 0C 00 30  	DB $10, $0C, $00, $30
  57++E3FF 10 0A 04 30  	DB $10, $0A, $04, $30
  58++E403 10 AB 08 30  	DB $10, $AB, $08, $30
  59++E407 10 BC 0C 30  	DB $10, $BC, $0C, $30
  60++E40B 10 99 20 24  	DB $10, $99, $20, $24
  61++E40F 07 99 24 28  	DB $07, $99, $24, $28
  62++E413 09 99 28 2C  	DB $09, $99, $28, $2C
  63++E417 07 99 20 2C  	DB $07, $99, $20, $2C
  64++E41B 05 BB 34 38  	DB $05, $BB, $34, $38
  65++E41F 08 BB 38 3C  	DB $08, $BB, $38, $3C
  66++E423 07 BB 34 3C  	DB $07, $BB, $34, $3C
  67++E427 05 AA 40 44  	DB $05, $AA, $40, $44
  68++E42B 08 AA 44 48  	DB $08, $AA, $44, $48
  69++E42F 07 AA 40 48  	DB $07, $AA, $40, $48
  70++E433              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  71++E433              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  72++E433
  73++E433 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  74++E437 5F 00 4A 04  	DB $5F, $00, $4A, $04
  75++E43B DF 33 33 17  	DB $DF, $33, $33, $17
  76++E43F 9F 4A 00 04  	DB $9F, $4A, $00, $04
  77++E443 9F 33 33 17  	DB $9F, $33, $33, $17
  78++E447 1F 00 4A 04  	DB $1F, $00, $4A, $04
  79++E44B 1F 33 33 17  	DB $1F, $33, $33, $17
  80++E44F 1F 4A 00 04  	DB $1F, $4A, $00, $04
  81++E453 5F 33 33 17  	DB $5F, $33, $33, $17
  82++E457 3F 00 00 6B  	DB $3F, $00, $00, $6B
  83++E45B 9F 29 29 5A  	DB $9F, $29, $29, $5A
  84++E45F 1F 29 29 5A  	DB $1F, $29, $29, $5A
  85++E463 5F 37 37 28  	DB $5F, $37, $37, $28
  86++E467
  87++E467
  88++E467              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  89++E467              ShuttleType9Len: equ $ - ShuttleType9
  90++E467
# file closed: ./Data/Ships/ShuttleType9.asm
 523+ E467                                      include "Data/Ships/Shuttle_Mk_2.asm"
# file opened: ./Data/Ships/Shuttle_Mk_2.asm
   1++E467 0F 09 C4     Shuttle_Mk_2:	DB $0F, $09, $C4
   2++E46A E5 E4        	DW Shuttle_Mk_2Edges
   3++E46C 70           	DB Shuttle_Mk_2EdgesSize
   4++E46D 00 26        	DB $00, $26
   5++E46F 66           	DB Shuttle_Mk_2VertSize
   6++E470 1C           	DB Shuttle_Mk_2EdgesCnt
   7++E471 00 00        	DB $00, $00
   8++E473 34           	DB Shuttle_Mk_2NormalsSize
   9++E474 0A 20 09     	DB $0A, $20, $09
  10++E477 55 E5        	DW Shuttle_Mk_2Normals
  11++E479 02 00        	DB $02, $00
  12++E47B 7F E4        	DW Shuttle_Mk_2Vertices
  13++E47D 00 00                                DB 0,0                      ; Type and Tactics
  14++E47F
  15++E47F
  16++E47F 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  16++E483 23 01
  17++E485 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  17++E489 34 00
  18++E48B 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  18++E48F 15 00
  19++E491 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  19++E495 26 11
  20++E497 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  20++E49B 37 22
  21++E49D 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  21++E4A1 58 04
  22++E4A3 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  22++E4A7 69 15
  23++E4A9 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  23++E4AD 7A 26
  24++E4AF 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  24++E4B3 7B 34
  25++E4B5 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  25++E4B9 BC 48
  26++E4BB 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  26++E4BF 9C 58
  27++E4C1 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  27++E4C5 AC 69
  28++E4C7 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  28++E4CB BC 7A
  29++E4CD 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  29++E4D1 CC CC
  30++E4D3 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  30++E4D7 CC CC
  31++E4D9 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  31++E4DD CC CC
  32++E4DF 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  32++E4E3 CC CC
  33++E4E5
  34++E4E5              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  35++E4E5
  36++E4E5
  37++E4E5
  38++E4E5 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  39++E4E9 1F 12 00 0C  	DB $1F, $12, $00, $0C
  40++E4ED 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E4F1 1F 30 00 04  	DB $1F, $30, $00, $04
  42++E4F5 1F 04 04 14  	DB $1F, $04, $04, $14
  43++E4F9 1F 05 08 14  	DB $1F, $05, $08, $14
  44++E4FD 1F 15 08 18  	DB $1F, $15, $08, $18
  45++E501 1F 16 0C 18  	DB $1F, $16, $0C, $18
  46++E505 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  47++E509 1F 27 10 1C  	DB $1F, $27, $10, $1C
  48++E50D 1F 37 10 20  	DB $1F, $37, $10, $20
  49++E511 1F 34 04 20  	DB $1F, $34, $04, $20
  50++E515 1F 48 14 24  	DB $1F, $48, $14, $24
  51++E519 1F 58 14 28  	DB $1F, $58, $14, $28
  52++E51D 1F 59 18 28  	DB $1F, $59, $18, $28
  53++E521 1F 69 18 2C  	DB $1F, $69, $18, $2C
  54++E525 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  55++E529 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  56++E52D 1F 7B 20 30  	DB $1F, $7B, $20, $30
  57++E531 1F 4B 20 24  	DB $1F, $4B, $20, $24
  58++E535 1F 8C 24 28  	DB $1F, $8C, $24, $28
  59++E539 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  60++E53D 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  61++E541 1F BC 30 24  	DB $1F, $BC, $30, $24
  62++E545 0A CC 34 38  	DB $0A, $CC, $34, $38
  63++E549 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  64++E54D 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  65++E551 0A CC 40 34  	DB $0A, $CC, $40, $34
  66++E555
  67++E555              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  68++E555
  69++E555
  70++E555              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  71++E555
  72++E555
  73++E555 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  74++E559 DF 27 27 4E  	DB $DF, $27, $27, $4E
  75++E55D 5F 27 27 4E  	DB $5F, $27, $27, $4E
  76++E561 1F 27 27 4E  	DB $1F, $27, $27, $4E
  77++E565 1F 00 60 00  	DB $1F, $00, $60, $00
  78++E569 9F 60 00 00  	DB $9F, $60, $00, $00
  79++E56D 5F 00 60 00  	DB $5F, $00, $60, $00
  80++E571 1F 60 00 00  	DB $1F, $60, $00, $00
  81++E575 BF 42 42 16  	DB $BF, $42, $42, $16
  82++E579 FF 42 42 16  	DB $FF, $42, $42, $16
  83++E57D 7F 42 42 16  	DB $7F, $42, $42, $16
  84++E581 3F 42 42 16  	DB $3F, $42, $42, $16
  85++E585 3F 00 00 60  	DB $3F, $00, $00, $60
  86++E589
  87++E589
  88++E589              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  89++E589              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  90++E589
# file closed: ./Data/Ships/Shuttle_Mk_2.asm
 524+ E589                                      include "Data/Ships/Sidewinder.asm"
# file opened: ./Data/Ships/Sidewinder.asm
   1++E589 00 10 81     Sidewinder:	DB $00, $10, $81
   2++E58C DD E5        	DW SidewinderEdges
   3++E58E 3C           	DB SidewinderEdgesSize
   4++E58F 00 1E        	DB $00, $1E
   5++E591 3C           	DB SidewinderVertSize
   6++E592 0F           	DB SidewinderEdgesCnt
   7++E593 00 32        	DB $00, $32
   8++E595 1C           	DB SidewinderNormalsSize
   9++E596 14 46 25     	DB $14, $46, $25
  10++E599 19 E6        	DW SidewinderNormals
  11++E59B 02 10        	DB $02, $10
  12++E59D A1 E5        	DW SidewinderVertices
  13++E59F 00 00                                DB 0,0                      ; Type and Tactics
  14++E5A1
  15++E5A1 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  15++E5A5 10 54
  16++E5A7 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  16++E5AB 20 65
  17++E5AD 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  17++E5B1 32 66
  18++E5B3 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  18++E5B7 31 44
  19++E5B9 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  19++E5BD 10 32
  20++E5BF 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  20++E5C3 43 65
  21++E5C5 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  21++E5C9 33 33
  22++E5CB 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  22++E5CF 33 33
  23++E5D1 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  23++E5D5 33 33
  24++E5D7 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  24++E5DB 33 33
  25++E5DD
  26++E5DD
  27++E5DD              SidewinderVertSize: equ $ - SidewinderVertices
  28++E5DD
  29++E5DD
  30++E5DD
  31++E5DD 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  32++E5E1 1F 62 04 08  	DB $1F, $62, $04, $08
  33++E5E5 1F 20 04 10  	DB $1F, $20, $04, $10
  34++E5E9 1F 10 00 10  	DB $1F, $10, $00, $10
  35++E5ED 1F 41 00 0C  	DB $1F, $41, $00, $0C
  36++E5F1 1F 31 0C 10  	DB $1F, $31, $0C, $10
  37++E5F5 1F 32 08 10  	DB $1F, $32, $08, $10
  38++E5F9 1F 43 0C 14  	DB $1F, $43, $0C, $14
  39++E5FD 1F 63 08 14  	DB $1F, $63, $08, $14
  40++E601 1F 65 04 14  	DB $1F, $65, $04, $14
  41++E605 1F 54 00 14  	DB $1F, $54, $00, $14
  42++E609 0F 33 18 1C  	DB $0F, $33, $18, $1C
  43++E60D 0C 33 1C 20  	DB $0C, $33, $1C, $20
  44++E611 0C 33 18 24  	DB $0C, $33, $18, $24
  45++E615 0C 33 20 24  	DB $0C, $33, $20, $24
  46++E619
  47++E619              SidewinderEdgesSize: equ $ - SidewinderEdges
  48++E619
  49++E619
  50++E619              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  51++E619
  52++E619
  53++E619 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  54++E61D 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  55++E621 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  56++E625 3F 00 00 70  	DB $3F, $00, $00, $70
  57++E629 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  58++E62D 5F 00 20 08  	DB $5F, $00, $20, $08
  59++E631 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  60++E635
  61++E635
  62++E635              SidewinderNormalsSize: equ $ - SidewinderNormals
  63++E635              SidewinderLen: equ $ - Sidewinder
  64++E635
# file closed: ./Data/Ships/Sidewinder.asm
 525+ E635                                      include "Data/Ships/Splinter.asm"
# file opened: ./Data/Ships/Splinter.asm
   1++E635 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E638 65 E6                                DW SplinterEdges
   3++E63A 18                                   DB SplinterEdgesSize
   4++E63B 00 16                                DB $00, $16
   5++E63D 18                                   DB SplinterVertSize
   6++E63E 06                                   DB SplinterEdgesCnt
   7++E63F 00 00                                DB $00, $00
   8++E641 10                                   DB SplinterNormalsSize
   9++E642 08 14 0A                             DB $08, $14, $0A
  10++E645 7D E6                                DW SplinterNormals
  11++E647 05 00                                DB $05, $00
  12++E649 4D E6                                DW SplinterVertices
  13++E64B 00 00                                DB 0,0                      ; Type and Tactics
  14++E64D
  15++E64D 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  15++E651 12 33
  16++E653 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  16++E657 02 33
  17++E659 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  17++E65D 01 33
  18++E65F 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  18++E663 01 22
  19++E665              SplinterVertSize:       equ $ - SplinterVertices
  20++E665 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  21++E669 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E66D 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E671 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E675 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E679 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E67D              SplinterEdgesSize:      equ $ - SplinterEdges
  27++E67D              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  28++E67D 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  29++E681 1F 03 04 08                          DB $1F, $03, $04, $08
  30++E685 1F 01 08 0C                          DB $1F, $01, $08, $0C
  31++E689 1F 12 0C 00                          DB $1F, $12, $0C, $00
  32++E68D              SplinterNormalsSize:    equ $ - SplinterNormals
  33++E68D              SplinterLen:            equ $ - Splinter
  34++E68D
# file closed: ./Data/Ships/Splinter.asm
 526+ E68D                                      include "Data/Ships/TestVector.asm"
# file opened: ./Data/Ships/TestVector.asm
   1++E68D 03 41 23     TestVector:             DB $03, $41, $23
   2++E690 CF E6                                DW TestVectorEdges
   3++E692 10                                   DB TestVectorEdgesSize
   4++E693 54 2A                                DB $54,$2A
   5++E695 2A                                   DB TestVectorVertSize
   6++E696 04                                   DB TestVectorEdgesCnt
   7++E697 00 00                                DB $00,$00
   8++E699 10                                   DB TestVectorNormalsSize
   9++E69A 32 96 1C                             DB $32,$96,$1C
  10++E69D DF E6                                DW TestVectorNormals
  11++E69F 04 01                                DB $04,$01
  12++E6A1 A5 E6                                DW TestVectorVertices
  13++E6A3 00 00                                DB 0,0                      ; Type and Tactics
  14++E6A5
  15++E6A5 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  15++E6A9 00 00
  16++E6AB 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  16++E6AF 00 00
  17++E6B1 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  17++E6B5 01 01
  18++E6B7 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  18++E6BB 01 01
  19++E6BD 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  19++E6C1 02 02
  20++E6C3 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  20++E6C7 02 02
  21++E6C9 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  21++E6CD 03 03
  22++E6CF              TestVectorVertSize      equ $  - TestVectorVertices
  23++E6CF 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  24++E6D3 1F 00 08 0C                          DB $1F,$00,$08,$0C
  25++E6D7 1F 00 10 14                          DB $1F,$00,$10,$14
  26++E6DB 1F 00 18 18                          DB $1F,$00,$18,$18
  27++E6DF              TestVectorEdgesSize     equ $  - TestVectorEdges
  28++E6DF              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  29++E6DF              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  30++E6DF 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  31++E6E3 1F 10 00 00                          DB $1F,$10,$00,$00
  32++E6E7 1F 00 00 10                          DB $1F,$00,$00,$10
  33++E6EB 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E6EF              TestVectorNormalsSize   equ $  - TestVectorNormals
  35++E6EF              TestVectorLen           equ $  - TestVector
  36++E6EF
# file closed: ./Data/Ships/TestVector.asm
 527+ E6EF                                      include "Data/Ships/Thargoid.asm"
# file opened: ./Data/Ships/Thargoid.asm
   1++E6EF 00 26 49     Thargoid:	DB $00, $26, $49
   2++E6F2 7F E7                    DW ThargoidEdges
   3++E6F4 68                       DB ThargoidEdgesSize
   4++E6F5 3C 26                    DB $3C, $26
   5++E6F7 78                       DB ThargoidVertSize
   6++E6F8 1A                       DB ThargoidEdgesCnt
   7++E6F9 01 F4                    DB $01, $F4
   8++E6FB 28                       DB ThargoidNormalsSize
   9++E6FC 37 F0 27                 DB $37, $F0, $27
  10++E6FF E7 E7                    DW ThargoidNormals
  11++E701 02 16                    DB $02, $16
  12++E703 07 E7                    DW ThargoidVertices
  13++E705 00 00                    DB 0,0                      ; Type and Tactics
  14++E707
  15++E707 20 30 30 5F  ThargoidVertices:	DB $20, $30, $30, $5F, $40, $88
  15++E70B 40 88
  16++E70D 20 44 00 5F                      DB $20, $44, $00, $5F, $10, $44
  16++E711 10 44
  17++E713 20 30 30 7F                      DB $20, $30, $30, $7F, $21, $44
  17++E717 21 44
  18++E719 20 00 44 3F                      DB $20, $00, $44, $3F, $32, $44
  18++E71D 32 44
  19++E71F 20 30 30 3F                      DB $20, $30, $30, $3F, $43, $55
  19++E723 43 55
  20++E725 20 44 00 1F                      DB $20, $44, $00, $1F, $54, $66
  20++E729 54 66
  21++E72B 20 30 30 1F                      DB $20, $30, $30, $1F, $64, $77
  21++E72F 64 77
  22++E731 20 00 44 1F                      DB $20, $00, $44, $1F, $74, $88
  22++E735 74 88
  23++E737 18 74 74 DF                      DB $18, $74, $74, $DF, $80, $99
  23++E73B 80 99
  24++E73D 18 A4 00 DF                      DB $18, $A4, $00, $DF, $10, $99
  24++E741 10 99
  25++E743 18 74 74 FF                      DB $18, $74, $74, $FF, $21, $99
  25++E747 21 99
  26++E749 18 00 A4 BF                      DB $18, $00, $A4, $BF, $32, $99
  26++E74D 32 99
  27++E74F 18 74 74 BF                      DB $18, $74, $74, $BF, $53, $99
  27++E753 53 99
  28++E755 18 A4 00 9F                      DB $18, $A4, $00, $9F, $65, $99
  28++E759 65 99
  29++E75B 18 74 74 9F                      DB $18, $74, $74, $9F, $76, $99
  29++E75F 76 99
  30++E761 18 00 A4 9F                      DB $18, $00, $A4, $9F, $87, $99
  30++E765 87 99
  31++E767 18 40 50 9E                      DB $18, $40, $50, $9E, $99, $99
  31++E76B 99 99
  32++E76D 18 40 50 BE                      DB $18, $40, $50, $BE, $99, $99
  32++E771 99 99
  33++E773 18 40 50 FE                      DB $18, $40, $50, $FE, $99, $99
  33++E777 99 99
  34++E779 18 40 50 DE                      DB $18, $40, $50, $DE, $99, $99
  34++E77D 99 99
  35++E77F
  36++E77F              ThargoidVertSize: equ $ - ThargoidVertices
  37++E77F
  38++E77F
  39++E77F
  40++E77F 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C
  41++E783 1F 40 00 04  	DB $1F, $40, $00, $04
  42++E787 1F 41 04 08  	DB $1F, $41, $04, $08
  43++E78B 1F 42 08 0C  	DB $1F, $42, $08, $0C
  44++E78F 1F 43 0C 10  	DB $1F, $43, $0C, $10
  45++E793 1F 54 10 14  	DB $1F, $54, $10, $14
  46++E797 1F 64 14 18  	DB $1F, $64, $14, $18
  47++E79B 1F 74 18 1C  	DB $1F, $74, $18, $1C
  48++E79F 1F 80 00 20  	DB $1F, $80, $00, $20
  49++E7A3 1F 10 04 24  	DB $1F, $10, $04, $24
  50++E7A7 1F 21 08 28  	DB $1F, $21, $08, $28
  51++E7AB 1F 32 0C 2C  	DB $1F, $32, $0C, $2C
  52++E7AF 1F 53 10 30  	DB $1F, $53, $10, $30
  53++E7B3 1F 65 14 34  	DB $1F, $65, $14, $34
  54++E7B7 1F 76 18 38  	DB $1F, $76, $18, $38
  55++E7BB 1F 87 1C 3C  	DB $1F, $87, $1C, $3C
  56++E7BF 1F 98 20 3C  	DB $1F, $98, $20, $3C
  57++E7C3 1F 90 20 24  	DB $1F, $90, $20, $24
  58++E7C7 1F 91 24 28  	DB $1F, $91, $24, $28
  59++E7CB 1F 92 28 2C  	DB $1F, $92, $28, $2C
  60++E7CF 1F 93 2C 30  	DB $1F, $93, $2C, $30
  61++E7D3 1F 95 30 34  	DB $1F, $95, $30, $34
  62++E7D7 1F 96 34 38  	DB $1F, $96, $34, $38
  63++E7DB 1F 97 38 3C  	DB $1F, $97, $38, $3C
  64++E7DF 1E 99 40 44  	DB $1E, $99, $40, $44
  65++E7E3 1E 99 48 4C  	DB $1E, $99, $48, $4C
  66++E7E7
  67++E7E7              ThargoidEdgesSize: equ $ - ThargoidEdges
  68++E7E7
  69++E7E7              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  70++E7E7
  71++E7E7 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  72++E7EB 7F 67 3C 19  	DB $7F, $67, $3C, $19
  73++E7EF 7F 67 19 3C  	DB $7F, $67, $19, $3C
  74++E7F3 3F 67 19 3C  	DB $3F, $67, $19, $3C
  75++E7F7 1F 40 00 00  	DB $1F, $40, $00, $00
  76++E7FB 3F 67 3C 19  	DB $3F, $67, $3C, $19
  77++E7FF 1F 67 3C 19  	DB $1F, $67, $3C, $19
  78++E803 1F 67 19 3C  	DB $1F, $67, $19, $3C
  79++E807 5F 67 19 3C  	DB $5F, $67, $19, $3C
  80++E80B 9F 30 00 00  	DB $9F, $30, $00, $00
  81++E80F
  82++E80F
  83++E80F              ThargoidNormalsSize: equ $ - ThargoidNormals
  84++E80F              ThargoidLen: equ $ - Thargoid
  85++E80F
# file closed: ./Data/Ships/Thargoid.asm
 528+ E80F                                      include "Data/Ships/Thargon.asm"
# file opened: ./Data/Ships/Thargon.asm
   1++E80F F0 06 40     Thargon:	DB $F0, $06, $40
   2++E812 63 E8        	DW ThargonEdges
   3++E814 3C           	DB ThargonEdgesSize
   4++E815 00 12        	DB $00, $12
   5++E817 3C           	DB ThargonVertSize
   6++E818 0F           	DB ThargonEdgesCnt
   7++E819 00 32        	DB $00, $32
   8++E81B 1C           	DB ThargonNormalsSize
   9++E81C 14 14 1E     	DB $14, $14, $1E
  10++E81F 9F E8        	DW ThargonNormals
  11++E821 02 10        	DB $02, $10
  12++E823 27 E8        	DW ThargonVertices
  13++E825 00 00                                DB 0,0                      ; Type and Tactics
  14++E827
  15++E827
  16++E827 09 00 28 9F  ThargonVertices:	DB $09, $00, $28, $9F, $01, $55
  16++E82B 01 55
  17++E82D 09 26 0C DF  	DB $09, $26, $0C, $DF, $01, $22
  17++E831 01 22
  18++E833 09 18 20 FF  	DB $09, $18, $20, $FF, $02, $33
  18++E837 02 33
  19++E839 09 18 20 BF  	DB $09, $18, $20, $BF, $03, $44
  19++E83D 03 44
  20++E83F 09 26 0C 9F  	DB $09, $26, $0C, $9F, $04, $55
  20++E843 04 55
  21++E845 09 00 08 3F  	DB $09, $00, $08, $3F, $15, $66
  21++E849 15 66
  22++E84B 09 0A 0F 7F  	DB $09, $0A, $0F, $7F, $12, $66
  22++E84F 12 66
  23++E851 09 06 1A 7F  	DB $09, $06, $1A, $7F, $23, $66
  23++E855 23 66
  24++E857 09 06 1A 3F  	DB $09, $06, $1A, $3F, $34, $66
  24++E85B 34 66
  25++E85D 09 0A 0F 3F  	DB $09, $0A, $0F, $3F, $45, $66
  25++E861 45 66
  26++E863
  27++E863              ThargonVertSize: equ $ - ThargonVertices
  28++E863
  29++E863
  30++E863 1F 10 00 04  ThargonEdges:	DB $1F, $10, $00, $04
  31++E867 1F 20 04 08  	DB $1F, $20, $04, $08
  32++E86B 1F 30 08 0C  	DB $1F, $30, $08, $0C
  33++E86F 1F 40 0C 10  	DB $1F, $40, $0C, $10
  34++E873 1F 50 00 10  	DB $1F, $50, $00, $10
  35++E877 1F 51 00 14  	DB $1F, $51, $00, $14
  36++E87B 1F 21 04 18  	DB $1F, $21, $04, $18
  37++E87F 1F 32 08 1C  	DB $1F, $32, $08, $1C
  38++E883 1F 43 0C 20  	DB $1F, $43, $0C, $20
  39++E887 1F 54 10 24  	DB $1F, $54, $10, $24
  40++E88B 1F 61 14 18  	DB $1F, $61, $14, $18
  41++E88F 1F 62 18 1C  	DB $1F, $62, $18, $1C
  42++E893 1F 63 1C 20  	DB $1F, $63, $1C, $20
  43++E897 1F 64 20 24  	DB $1F, $64, $20, $24
  44++E89B 1F 65 24 14  	DB $1F, $65, $24, $14
  45++E89F
  46++E89F              ThargonEdgesSize: equ $ - ThargonEdges
  47++E89F
  48++E89F
  49++E89F              ThargonEdgesCnt: equ ThargonEdgesSize/4
  50++E89F
  51++E89F
  52++E89F 9F 24 00 00  ThargonNormals:	DB $9F, $24, $00, $00
  53++E8A3 5F 14 05 07  	DB $5F, $14, $05, $07
  54++E8A7 7F 2E 2A 0E  	DB $7F, $2E, $2A, $0E
  55++E8AB 3F 24 00 68  	DB $3F, $24, $00, $68
  56++E8AF 3F 2E 2A 0E  	DB $3F, $2E, $2A, $0E
  57++E8B3 1F 14 05 07  	DB $1F, $14, $05, $07
  58++E8B7 1F 24 00 00  	DB $1F, $24, $00, $00
  59++E8BB
  60++E8BB
  61++E8BB              ThargonNormalsSize: equ $ - ThargonNormals
  62++E8BB              ThargonLen: equ $ - Thargon
  63++E8BB
# file closed: ./Data/Ships/Thargon.asm
 529+ E8BB                                      include "Data/Ships/TransportType10.asm"
# file opened: ./Data/Ships/TransportType10.asm
   1++E8BB 00 09 C4     TransportType10:	DB $00, $09, $C4
   2++E8BE B1 E9        	DW TransportType10Edges
   3++E8C0 B8           	DB TransportType10EdgesSize
   4++E8C1 30 1A        	DB $30, $1A
   5++E8C3 DE           	DB TransportType10VertSize
   6++E8C4 2E           	DB TransportType10EdgesCnt
   7++E8C5 00 00        	DB $00, $00
   8++E8C7 38           	DB TransportType10NormalsSize
   9++E8C8 10 20 0A     	DB $10, $20, $0A
  10++E8CB 69 EA        	DW TransportType10Normals
  11++E8CD 02 00        	DB $02, $00
  12++E8CF D3 E8        	DW TransportType10Vertices
  13++E8D1 00 00                                DB 0,0                      ; Type and Tactics
  14++E8D3
  15++E8D3 00 0A 1A 3F  TransportType10Vertices:	DB $00, $0A, $1A, $3F, $06, $77
  15++E8D7 06 77
  16++E8D9 19 04 1A BF  	DB $19, $04, $1A, $BF, $01, $77
  16++E8DD 01 77
  17++E8DF 1C 03 1A FF  	DB $1C, $03, $1A, $FF, $01, $22
  17++E8E3 01 22
  18++E8E5 19 08 1A FF  	DB $19, $08, $1A, $FF, $02, $33
  18++E8E9 02 33
  19++E8EB 1A 08 1A 7F  	DB $1A, $08, $1A, $7F, $03, $44
  19++E8EF 03 44
  20++E8F1 1D 03 1A 7F  	DB $1D, $03, $1A, $7F, $04, $55
  20++E8F5 04 55
  21++E8F7 1A 04 1A 3F  	DB $1A, $04, $1A, $3F, $05, $66
  21++E8FB 05 66
  22++E8FD 00 06 0C 13  	DB $00, $06, $0C, $13, $FF, $FF
  22++E901 FF FF
  23++E903 1E 01 0C DF  	DB $1E, $01, $0C, $DF, $17, $89
  23++E907 17 89
  24++E909 21 08 0C DF  	DB $21, $08, $0C, $DF, $12, $39
  24++E90D 12 39
  25++E90F 21 08 0C 5F  	DB $21, $08, $0C, $5F, $34, $5A
  25++E913 34 5A
  26++E915 1E 01 0C 5F  	DB $1E, $01, $0C, $5F, $56, $AB
  26++E919 56 AB
  27++E91B 0B 02 1E DF  	DB $0B, $02, $1E, $DF, $89, $CD
  27++E91F 89 CD
  28++E921 0D 08 1E DF  	DB $0D, $08, $1E, $DF, $39, $DD
  28++E925 39 DD
  29++E927 0E 08 1E 5F  	DB $0E, $08, $1E, $5F, $3A, $DD
  29++E92B 3A DD
  30++E92D 0B 02 1E 5F  	DB $0B, $02, $1E, $5F, $AB, $CD
  30++E931 AB CD
  31++E933 05 06 02 87  	DB $05, $06, $02, $87, $77, $77
  31++E937 77 77
  32++E939 12 03 02 87  	DB $12, $03, $02, $87, $77, $77
  32++E93D 77 77
  33++E93F 05 07 07 A7  	DB $05, $07, $07, $A7, $77, $77
  33++E943 77 77
  34++E945 12 04 07 A7  	DB $12, $04, $07, $A7, $77, $77
  34++E949 77 77
  35++E94B 0B 06 0E A7  	DB $0B, $06, $0E, $A7, $77, $77
  35++E94F 77 77
  36++E951 0B 05 07 A7  	DB $0B, $05, $07, $A7, $77, $77
  36++E955 77 77
  37++E957 05 07 0E 27  	DB $05, $07, $0E, $27, $66, $66
  37++E95B 66 66
  38++E95D 12 04 0E 27  	DB $12, $04, $0E, $27, $66, $66
  38++E961 66 66
  39++E963 0B 05 07 27  	DB $0B, $05, $07, $27, $66, $66
  39++E967 66 66
  40++E969 05 06 03 27  	DB $05, $06, $03, $27, $66, $66
  40++E96D 66 66
  41++E96F 12 03 03 27  	DB $12, $03, $03, $27, $66, $66
  41++E973 66 66
  42++E975 0B 04 08 07  	DB $0B, $04, $08, $07, $66, $66
  42++E979 66 66
  43++E97B 0B 05 03 27  	DB $0B, $05, $03, $27, $66, $66
  43++E97F 66 66
  44++E981 10 08 0D E6  	DB $10, $08, $0D, $E6, $33, $33
  44++E985 33 33
  45++E987 10 08 10 C6  	DB $10, $08, $10, $C6, $33, $33
  45++E98B 33 33
  46++E98D 11 08 0D 66  	DB $11, $08, $0D, $66, $33, $33
  46++E991 33 33
  47++E993 11 08 10 46  	DB $11, $08, $10, $46, $33, $33
  47++E997 33 33
  48++E999 0D 03 1A E8  	DB $0D, $03, $1A, $E8, $00, $00
  48++E99D 00 00
  49++E99F 0D 03 1A 68  	DB $0D, $03, $1A, $68, $00, $00
  49++E9A3 00 00
  50++E9A5 09 03 1A 25  	DB $09, $03, $1A, $25, $00, $00
  50++E9A9 00 00
  51++E9AB 08 03 1A A5  	DB $08, $03, $1A, $A5, $00, $00
  51++E9AF 00 00
  52++E9B1
  53++E9B1              TransportType10VertSize: equ $ - TransportType10Vertices
  54++E9B1
  55++E9B1
  56++E9B1
  57++E9B1 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04
  58++E9B5 1F 01 04 08  	DB $1F, $01, $04, $08
  59++E9B9 1F 02 08 0C  	DB $1F, $02, $08, $0C
  60++E9BD 1F 03 0C 10  	DB $1F, $03, $0C, $10
  61++E9C1 1F 04 10 14  	DB $1F, $04, $10, $14
  62++E9C5 1F 05 14 18  	DB $1F, $05, $14, $18
  63++E9C9 1F 06 00 18  	DB $1F, $06, $00, $18
  64++E9CD 10 67 00 1C  	DB $10, $67, $00, $1C
  65++E9D1 1F 17 04 20  	DB $1F, $17, $04, $20
  66++E9D5 0B 12 08 24  	DB $0B, $12, $08, $24
  67++E9D9 1F 23 0C 24  	DB $1F, $23, $0C, $24
  68++E9DD 1F 34 10 28  	DB $1F, $34, $10, $28
  69++E9E1 0B 45 14 28  	DB $0B, $45, $14, $28
  70++E9E5 1F 56 18 2C  	DB $1F, $56, $18, $2C
  71++E9E9 11 78 1C 20  	DB $11, $78, $1C, $20
  72++E9ED 11 19 20 24  	DB $11, $19, $20, $24
  73++E9F1 11 5A 28 2C  	DB $11, $5A, $28, $2C
  74++E9F5 11 6B 1C 2C  	DB $11, $6B, $1C, $2C
  75++E9F9 13 BC 1C 3C  	DB $13, $BC, $1C, $3C
  76++E9FD 13 8C 1C 30  	DB $13, $8C, $1C, $30
  77++EA01 10 89 20 30  	DB $10, $89, $20, $30
  78++EA05 1F 39 24 34  	DB $1F, $39, $24, $34
  79++EA09 1F 3A 28 38  	DB $1F, $3A, $28, $38
  80++EA0D 10 AB 2C 3C  	DB $10, $AB, $2C, $3C
  81++EA11 1F 9D 30 34  	DB $1F, $9D, $30, $34
  82++EA15 1F 3D 34 38  	DB $1F, $3D, $34, $38
  83++EA19 1F AD 38 3C  	DB $1F, $AD, $38, $3C
  84++EA1D 1F CD 30 3C  	DB $1F, $CD, $30, $3C
  85++EA21 07 77 40 44  	DB $07, $77, $40, $44
  86++EA25 07 77 48 4C  	DB $07, $77, $48, $4C
  87++EA29 07 77 4C 50  	DB $07, $77, $4C, $50
  88++EA2D 07 77 48 50  	DB $07, $77, $48, $50
  89++EA31 07 77 50 54  	DB $07, $77, $50, $54
  90++EA35 07 66 58 5C  	DB $07, $66, $58, $5C
  91++EA39 07 66 5C 60  	DB $07, $66, $5C, $60
  92++EA3D 07 66 60 58  	DB $07, $66, $60, $58
  93++EA41 07 66 64 68  	DB $07, $66, $64, $68
  94++EA45 07 66 68 6C  	DB $07, $66, $68, $6C
  95++EA49 07 66 64 6C  	DB $07, $66, $64, $6C
  96++EA4D 07 66 6C 70  	DB $07, $66, $6C, $70
  97++EA51 06 33 74 78  	DB $06, $33, $74, $78
  98++EA55 06 33 7C 80  	DB $06, $33, $7C, $80
  99++EA59 08 00 84 88  	DB $08, $00, $84, $88
 100++EA5D 05 00 88 8C  	DB $05, $00, $88, $8C
 101++EA61 05 00 8C 90  	DB $05, $00, $8C, $90
 102++EA65 05 00 90 84  	DB $05, $00, $90, $84
 103++EA69
 104++EA69              TransportType10EdgesSize: equ $ - TransportType10Edges
 105++EA69
 106++EA69
 107++EA69              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 108++EA69
 109++EA69
 110++EA69 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67
 111++EA6D BF 6F 30 07  	DB $BF, $6F, $30, $07
 112++EA71 FF 69 3F 15  	DB $FF, $69, $3F, $15
 113++EA75 5F 00 22 00  	DB $5F, $00, $22, $00
 114++EA79 7F 69 3F 15  	DB $7F, $69, $3F, $15
 115++EA7D 3F 6F 30 07  	DB $3F, $6F, $30, $07
 116++EA81 1F 08 20 03  	DB $1F, $08, $20, $03
 117++EA85 9F 08 20 03  	DB $9F, $08, $20, $03
 118++EA89 93 08 22 0B  	DB $93, $08, $22, $0B
 119++EA8D 9F 4B 20 4F  	DB $9F, $4B, $20, $4F
 120++EA91 1F 4B 20 4F  	DB $1F, $4B, $20, $4F
 121++EA95 13 08 22 0B  	DB $13, $08, $22, $0B
 122++EA99 1F 00 26 11  	DB $1F, $00, $26, $11
 123++EA9D 1F 00 00 79  	DB $1F, $00, $00, $79
 124++EAA1
 125++EAA1
 126++EAA1              TransportType10NormalsSize: equ $ - TransportType10Normals
 127++EAA1              TransportType10Len: equ $ - TransportType10
 128++EAA1
# file closed: ./Data/Ships/TransportType10.asm
 530+ EAA1                                      include "Data/Ships/Viper.asm"
# file opened: ./Data/Ships/Viper.asm
   1++EAA1              ; Mapping Orginal to new
   2++EAA1              ; 0    => 0
   3++EAA1              ; 1-2  => 1-2
   4++EAA1              ; 3    => EQU Edges
   5++EAA1              ; 4    => EQU Normals
   6++EAA1              ; 5    => EQU EdgesCnt
   7++EAA1              ; 6    => 6
   8++EAA1              ; 7    => 7
   9++EAA1              ; 8    => EQU VertSize
  10++EAA1              ; 9    => EQU EdgesCnt
  11++EAA1              ; 10-11=> 10-11
  12++EAA1              ; 12   => EQU  NormalsSize
  13++EAA1              ; 13   => 13
  14++EAA1              ; 14   => 14
  15++EAA1              ; 15   => 15
  16++EAA1              ; 16   => EQU Edges
  17++EAA1              ; 17   => EQU Normals
  18++EAA1              ; 18   => 18
  19++EAA1              ; 19   => 19
  20++EAA1              ;\ -> &5C93  \ Viper = Type 16
  21++EAA1 00 F9 15     Viper:                  DB $00, $F9, $15
  22++EAA4 13 EB                                DW ViperEdges
  23++EAA6 50                                   DB ViperEdgesSize
  24++EAA7 00 2A                                DB $00,$2A
  25++EAA9 5A                                   DB ViperVertSize
  26++EAAA 14                                   DB ViperEdgesCnt
  27++EAAB 00 00                                DB $00,$00
  28++EAAD 1C                                   DB ViperNormalsSize
  29++EAAE 17 64 20                             DB $17, $64, $20
  30++EAB1 63 EB                                DW ViperNormals
  31++EAB3 01 11                                DB $01, $11
  32++EAB5 B9 EA                                DW ViperVertices
  33++EAB7 00 00                                DB 0,0                      ; Type and Tactics
  34++EAB9
  35++EAB9 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  35++EABD 21 43
  36++EABF 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  36++EAC3 10 22
  37++EAC5 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  37++EAC9 43 55
  38++EACB 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  38++EACF 42 66
  39++EAD1 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  39++EAD5 31 66
  40++EAD7 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  40++EADB 54 66
  41++EADD 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  41++EAE1 35 66
  42++EAE3 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  42++EAE7 20 66
  43++EAE9 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  43++EAED 10 66
  44++EAEF 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  44++EAF3 66 66
  45++EAF5 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  45++EAF9 66 66
  46++EAFB 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  46++EAFF 66 66
  47++EB01 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  47++EB05 66 66
  48++EB07 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  48++EB0B 66 66
  49++EB0D 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  49++EB11 66 66
  50++EB13              ViperVertSize           equ $  - ViperVertices
  51++EB13 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  51++EB17 1E 21 00 04
  52++EB1B 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  52++EB1F 1F 31 00 10
  53++EB23 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  53++EB27 1E 10 04 20
  54++EB2B 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  54++EB2F 1E 53 08 18
  55++EB33 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  55++EB37 1E 65 14 18
  56++EB3B 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  56++EB3F 1E 63 10 18
  57++EB43 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  57++EB47 1E 46 0C 14
  58++EB4B 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  58++EB4F 12 66 24 34
  59++EB53 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  59++EB57 12 66 28 38
  60++EB5B 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  60++EB5F 10 66 30 34
  61++EB63              ViperEdgesSize          equ $  - ViperEdges
  62++EB63              ViperEdgesCnt           equ ViperEdgesSize/4
  63++EB63 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  63++EB67 9F 16 21 0B
  64++EB6B 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  64++EB6F DF 16 21 0B
  65++EB73 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  65++EB77 5F 00 20 00
  66++EB7B 3F 00 00 30                          DB $3F, $00, $00, $30
  67++EB7F              ViperNormalsSize        equ $  - ViperNormals
  68++EB7F              ViperLen                equ $  - Viper
  69++EB7F
# file closed: ./Data/Ships/Viper.asm
 531+ EB7F                                      include "Data/Ships/Worm.asm"
# file opened: ./Data/Ships/Worm.asm
   1++EB7F 00 26 49     Worm:	                DB $00, $26, $49
   2++EB82 D3 EB                                DW WormEdges
   3++EB84 40                                   DB WormEdgesSize
   4++EB85 00 12                                DB $00, $12
   5++EB87 3C                                   DB WormVertSize
   6++EB88 10                                   DB WormEdgesCnt
   7++EB89 00 00                                DB $00, $00
   8++EB8B 20                                   DB WormNormalsSize
   9++EB8C 13 1E 17                             DB $13, $1E, $17
  10++EB8F 13 EC                                DW WormNormals
  11++EB91 03 08                                DB $03, $08
  12++EB93 97 EB                                DW WormVertices
  13++EB95 00 00                                DB 0,0                      ; Type and Tactics
  14++EB97 0A 0A 23 5F  WormVertices:	DB $0A, $0A, $23, $5F, $02, $77
  14++EB9B 02 77
  15++EB9D 0A 0A 23 DF  	DB $0A, $0A, $23, $DF, $03, $77
  15++EBA1 03 77
  16++EBA3 05 06 0F 1F  	DB $05, $06, $0F, $1F, $01, $24
  16++EBA7 01 24
  17++EBA9 05 06 0F 9F  	DB $05, $06, $0F, $9F, $01, $35
  17++EBAD 01 35
  18++EBAF 0F 0A 19 5F  	DB $0F, $0A, $19, $5F, $24, $77
  18++EBB3 24 77
  19++EBB5 0F 0A 19 DF  	DB $0F, $0A, $19, $DF, $35, $77
  19++EBB9 35 77
  20++EBBB 1A 0A 19 7F  	DB $1A, $0A, $19, $7F, $46, $77
  20++EBBF 46 77
  21++EBC1 1A 0A 19 FF  	DB $1A, $0A, $19, $FF, $56, $77
  21++EBC5 56 77
  22++EBC7 08 0E 19 3F  	DB $08, $0E, $19, $3F, $14, $66
  22++EBCB 14 66
  23++EBCD 08 0E 19 BF  	DB $08, $0E, $19, $BF, $15, $66
  23++EBD1 15 66
  24++EBD3
  25++EBD3              WormVertSize: equ $ - WormVertices
  26++EBD3
  27++EBD3
  28++EBD3 1F 07 00 04  WormEdges:	DB $1F, $07, $00, $04
  29++EBD7 1F 37 04 14  	DB $1F, $37, $04, $14
  30++EBDB 1F 57 14 1C  	DB $1F, $57, $14, $1C
  31++EBDF 1F 67 1C 18  	DB $1F, $67, $1C, $18
  32++EBE3 1F 47 18 10  	DB $1F, $47, $18, $10
  33++EBE7 1F 27 10 00  	DB $1F, $27, $10, $00
  34++EBEB 1F 02 00 08  	DB $1F, $02, $00, $08
  35++EBEF 1F 03 04 0C  	DB $1F, $03, $04, $0C
  36++EBF3 1F 24 10 08  	DB $1F, $24, $10, $08
  37++EBF7 1F 35 14 0C  	DB $1F, $35, $14, $0C
  38++EBFB 1F 14 08 20  	DB $1F, $14, $08, $20
  39++EBFF 1F 46 20 18  	DB $1F, $46, $20, $18
  40++EC03 1F 15 0C 24  	DB $1F, $15, $0C, $24
  41++EC07 1F 56 24 1C  	DB $1F, $56, $24, $1C
  42++EC0B 1F 01 08 0C  	DB $1F, $01, $08, $0C
  43++EC0F 1F 16 20 24  	DB $1F, $16, $20, $24
  44++EC13
  45++EC13              WormEdgesSize: equ $ - WormEdges
  46++EC13
  47++EC13
  48++EC13              WormEdgesCnt: equ WormEdgesSize/4
  49++EC13
  50++EC13
  51++EC13 1F 00 58 46  WormNormals:	DB $1F, $00, $58, $46
  52++EC17 1F 00 45 0E  	DB $1F, $00, $45, $0E
  53++EC1B 1F 46 42 23  	DB $1F, $46, $42, $23
  54++EC1F 9F 46 42 23  	DB $9F, $46, $42, $23
  55++EC23 1F 40 31 0E  	DB $1F, $40, $31, $0E
  56++EC27 9F 40 31 0E  	DB $9F, $40, $31, $0E
  57++EC2B 3F 00 00 C8  	DB $3F, $00, $00, $C8
  58++EC2F 5F 00 50 00  	DB $5F, $00, $50, $00
  59++EC33
  60++EC33
  61++EC33              WormNormalsSize: equ $ - WormNormals
  62++EC33              WormLen: equ $ - Worm
  63++EC33
# file closed: ./Data/Ships/Worm.asm
 532+ EC33                                      ENDIF
 533+ EC33
 534+ EC33
 535+ EC33              ; TODO Later reorg these offsets for better 16 bit read - Done
 536+ EC33              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
 537+ EC33
 538+ EC33
 539+ EC33              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 540+ EC33              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 541+ EC33              ; Scoop: 0 = no scoop 1= scoop , anything more?
 542+ EC33              ; hull byte#1-2 area for missile lock, lo, hi
 543+ EC33              ; hull byte#3   edges data info offset lo
 544+ EC33              ; hull byte#4   faces data info offset lo
 545+ EC33              ; hull byte#5   4*maxlines+1 for ship lines stack
 546+ EC33              ; hull byte#6   gun vertex*4
 547+ EC33              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 548+ EC33              ; hull byte#8   vertices*6
 549+ EC33              ; hull byte#9	edge Count
 550+ EC33              ; hull bytes#10-11 bounty lo hi
 551+ EC33              ; hull byte#12  faces*4
 552+ EC33              ; hull byte#13  dot beyond distance
 553+ EC33              ; hull byte#14  energy
 554+ EC33              ; hull byte#15  speed (end of 4th row)
 555+ EC33              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
 556+ EC33              ; hull byte#17  faces offset hi
 557+ EC33              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 558+ EC33              ; hull byte#19  laser|missile(=lower 3 bits)
 559+ EC33              ; hull byte#20  Added Vertices for 20,21
 560+ EC33
 561+ EC33              ; Optimised version to be applied to add data brought in to here:
 562+ EC33              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 563+ EC33              ; hull byte#1-2 area for missile lock, lo, hi
 564+ EC33              ; hull byte#3   edges data info offset lo
 565+ EC33              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
 566+ EC33              ; hull byte#5   4*maxlines+1 for ship lines stack
 567+ EC33              ; hull byte#6   gun vertex*4
 568+ EC33              ; hull byte#7   explosion count e.g. &2A = 4*n+6
 569+ EC33              ; hull byte#8   vertices*6
 570+ EC33              ; hull byte#9	edge Count
 571+ EC33              ; hull bytes#10-11 bounty lo hi
 572+ EC33              ; hull byte#12  faces*4
 573+ EC33              ; hull byte#13  dot beyond distance
 574+ EC33              ; hull byte#14  energy
 575+ EC33              ; hull byte#15  speed (end of 4th row)
 576+ EC33              ; hull byte#16  faces data info offset lo (was 4)
 577+ EC33              ; hull byte#17  faces offset hi
 578+ EC33              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 579+ EC33              ; hull bute#19  laser|missile(=lower 3 bits)
 580+ EC33              ; hull byte#20  Added Vertices for 20,21
 581+ EC33              ;
 582+ EC33              ; Vertex Data Structure
 583+ EC33              ; Byte 0 X1Lo
 584+ EC33              ; Byte 1 X1Hi
 585+ EC33              ; Byte 2 Y1Lo
 586+ EC33              ; Byte 3 Y1Hi
 587+ EC33              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 588+ EC33              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 589+ EC33              ;
 590+ EC33              ;
 591+ EC33              ; Edge Data Structure
 592+ EC33              ; Byte 0
 593+ EC33              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
 594+ EC33              ; Byte 2 - Index to Vertex 1
 595+ EC33              ; Byte 3 - Index to Vertex 2
 596+ EC33              ;
 597+ EC33              ; Normal/Faces Data Structure
 598+ EC33              ;
 599+ EC33              ;
 600+ EC33              ;
 601+ EC33              ; Original Data:
 602+ EC33              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
 603+ EC33              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
 604+ EC33              ;		\ hull byte#1-2 area for missile lock, lo, hi
 605+ EC33              ;		\ hull byte#3   edges data info offset lo
 606+ EC33              ;		\ hull byte#4   faces data info offset lo
 607+ EC33              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 608+ EC33              ;		\ hull byte#6   gun vertex*4
 609+ EC33              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 610+ EC33              ;		\ hull byte#8   vertices*6
 611+ EC33              ;		\ hull bytes#10-11 bounty lo hi
 612+ EC33              ;		\ hull byte#12  faces*4
 613+ EC33              ;		\ hull byte#13  dot beyond distance
 614+ EC33              ;		\ hull byte#14  energy
 615+ EC33              ;		\ hull byte#15  speed (end of 4th row)
 616+ EC33              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 617+ EC33              ;		\ hull byte#17  faces offset hi
 618+ EC33              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 619+ EC33              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 620+ EC33              ; Corrected pointers
 621+ EC33              ; &565D \ Cargo cannister = Type 5
 622+ EC33              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 623+ EC33              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 624+ EC33              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 625+ EC33              ; Mapping Orginal to new
 626+ EC33              ; 0    => 0
 627+ EC33              ; 1-2  => 1-2
 628+ EC33              ; 3    => EQU Edges
 629+ EC33              ; 4    => EQU Normals
 630+ EC33              ; 5    => EQU EdgesCnt
 631+ EC33              ; 6    => 6
 632+ EC33              ; 7    => 7
 633+ EC33              ; 8    => EQU VertSize
 634+ EC33              ; 9    => EQU EdgesCnt
 635+ EC33              ; 10-11=> 10-11
 636+ EC33              ; 12   => EQU  NormalsSize
 637+ EC33              ; 13   => 13
 638+ EC33              ; 14   => 14
 639+ EC33              ; 15   => 15
 640+ EC33              ; 16   => EQU Edges
 641+ EC33              ; 17   => EQU Normals
 642+ EC33              ; 18   => 18
 643+ EC33              ; 19   => 19
# file closed: ./Data/ShipModels.asm
 991  EC33              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 992  EC33                  SLOT    SpritemembankAddr
 993  EC33                  PAGE    BankSPRITE
 994  EC33              	ORG     SpritemembankAddr, BankSPRITE
 995  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              glactic_pattern_1					equ 0
  19+ E000              glactic_hyper_pattern_1             equ 2
  20+ E000              local_pattern_1                     equ 4
  21+ E000              local_hyper_pattern_1               equ 6
  22+ E000
  23+ E000              spritecursoroffset					equ 17
  24+ E000
  25+ E000
  26+ E000
  27+ E000
  28+ E000              sprite_big:
  29+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  30+ E000              .SetAnchor:
  31+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  32+ E001 F5           	push	af									; save id for next few
  33+ E002 D5           	push	de
  34+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  35+ E006              ; write out X position bits 1 to 8
  36+ E006 79           	ld		a,c
  37+ E007 21 11 00         ld      hl,spritecursoroffset
  38+ E00A ED 31        	add		hl,a                                ; hl = full x position
  39+ E00C 7D           	ld		a,l
  40+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  41+ E010              ; write out Y position bits 1 to 8
  42+ E010 EB           	ex		de,hl								; de = full x position
  43+ E011 78           	ld		a,b
  44+ E012 21 11 00         ld      hl,spritecursoroffset
  45+ E015 ED 31        	add		hl,a
  46+ E017 7D           	ld		a,l                                 ; hl = full y position
  47+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  48+ E01B              ; write out MSB of X as its an anchor
  49+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  50+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  51+ E01F              ; write out sprite pattern
  52+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  53+ E020 7B           	ld		a,e
  54+ E021 F6 C0        	or		%11000000							;
  55+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  56+ E026              ; write out msb of y in h must be bit 0 only
  57+ E026 3E 00        	ld		a,%00000000							; big unified composite
  58+ E028 B4           	or		h									; MSB Y
  59+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  60+ E02C              .BigSprite1:
  61+ E02C F1           	pop		af
  62+ E02D 3C           	inc		a
  63+ E02E F5           	push	af
  64+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  65+ E032 3E 10        	ld		a,16
  66+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  67+ E037 AF           	xor 	a
  68+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  69+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  70+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
  71+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  72+ E043 3E 41        	ld		a,%01000001							; big unified composite
  73+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  74+ E048              .BigSprite2:
  75+ E048 F1           	pop		af
  76+ E049 3C           	inc		a
  77+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  78+ E04D AF           	xor		a
  79+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  80+ E051 3E 10        	ld		a,16
  81+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  82+ E056 AF           	xor		a
  83+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  84+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
  85+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  86+ E05F 3E 41        	ld		a,%01000001							; big unified composite
  87+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  88+ E064 C9           	ret
  89+ E065
  90+ E065              sprite_galactic_cursor:
  91+ E065              ; ">sprite_galactic_cursor BC = rowcol"
  92+ E065 16 00        	ld		d,galactic_cursor_sprite
  93+ E067 1E 00        	ld		e,0
  94+ E069 78           	ld		a,b
  95+ E06A C6 18        	add		a,galactic_chart_y_offset
  96+ E06C 47           	ld		b,a
  97+ E06D CD 00 E0     	call	sprite_big
  97+ E070
  98+ E070 C9           	ret
  99+ E071
 100+ E071              sprite_galactic_hyper_cursor:
 101+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 102+ E071 78           	ld		a,b
 103+ E072 C6 18        	add		a,galactic_chart_y_offset
 104+ E074 47           	ld		b,a
 105+ E075 16 04        	ld		d,galactic_hyper_sprite
 106+ E077 1E 03        	ld		e,3
 107+ E079 CD 00 E0     	call	sprite_big
 107+ E07C
 108+ E07C C9           	ret
 109+ E07D
 110+ E07D              sprite_ghc_move:
 111+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 112+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 113+ E082              ; write out X position bits 1 to 8
 114+ E082 79           	ld		a,c
 115+ E083 21 11 00         ld      hl,spritecursoroffset
 116+ E086 ED 31        	add		hl,a                                ; hl = full x position
 117+ E088 7D           	ld		a,l
 118+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 119+ E08C              ; write out Y position bits 1 to 8
 120+ E08C EB           	ex		de,hl								; de = full x position
 121+ E08D 78               ld      a,b
 122+ E08E C6 18        	add		a,galactic_chart_y_offset
 123+ E090 47           	ld		b,a
 124+ E091 78           	ld		a,b
 125+ E092 21 11 00         ld      hl,spritecursoroffset
 126+ E095 ED 31        	add		hl,a
 127+ E097 7D           	ld		a,l                                 ; hl = full y position
 128+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 129+ E09B              ; write out MSB of X as its an anchor
 130+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 131+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 132+ E09F              ; write out msb of y in h must be bit 0 only
 133+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 134+ E0A1 B2           	or		d									; MSB Y
 135+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E0A5 C9               ret
 137+ E0A6
 138+ E0A6
 139+ E0A6              sprite_lhc_move:
 140+ E0A6              ;DBG:jp DBG
 141+ E0A6              ;DBX:
 142+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 143+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 144+ E0AB              ; write out X position bits 1 to 8
 145+ E0AB 79           	ld		a,c
 146+ E0AC 21 11 00         ld      hl,spritecursoroffset
 147+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 148+ E0B1 7D           	ld		a,l
 149+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 150+ E0B5              ; write out Y position bits 1 to 8
 151+ E0B5 EB           	ex		de,hl								; de = full x position
 152+ E0B6 78           	ld		a,b
 153+ E0B7 21 11 00         ld      hl,spritecursoroffset
 154+ E0BA ED 31        	add		hl,a
 155+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 156+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 157+ E0C0              ; write out MSB of X as its an anchor
 158+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 159+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 160+ E0C4              ; write out msb of y in h must be bit 0 only
 161+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 162+ E0C6 B2           	or		d									; MSB Y
 163+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 164+ E0CA C9               ret
 165+ E0CB
 166+ E0CB              sprite_local_cursor:
 167+ E0CB              ; "sprite_local_cursor BC = rowcol"
 168+ E0CB 16 07        	ld		d,local_cursor_sprite
 169+ E0CD 1E 06        	ld		e,6
 170+ E0CF CD 00 E0     	call	sprite_big
 171+ E0D2 C9           	ret
 172+ E0D3
 173+ E0D3              sprite_local_hyper_cursor:
 174+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 175+ E0D3 16 0A        	ld		d,local_hyper_sprite
 176+ E0D5 1E 09        	ld		e,9
 177+ E0D7 CD 00 E0     	call	sprite_big
 178+ E0DA C9           	ret
 179+ E0DB
 180+ E0DB
 181+ E0DB              sprite_galactic_hide:
 182+ E0DB ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 183+ E0DF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 184+ E0E3 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 185+ E0E7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 186+ E0EB ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 187+ E0EF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 188+ E0F3 C9           	ret
 189+ E0F4
 190+ E0F4              sprite_galactic_hyper_hide:
 191+ E0F4 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 192+ E0F8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 193+ E0FC ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 194+ E100 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 195+ E104 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 196+ E108 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 197+ E10C C9           	ret
 198+ E10D
 199+ E10D              sprite_local_hide:
 200+ E10D ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 201+ E111 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 202+ E115 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 203+ E119 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 204+ E11D ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 205+ E121 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 206+ E125 C9           	ret
 207+ E126
 208+ E126              sprite_local_hyper_hide:
 209+ E126 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 210+ E12A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 211+ E12E ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 212+ E132 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 213+ E136 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 214+ E13A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 215+ E13E C9           	ret
 216+ E13F
 217+ E13F              sprite_cls_cursors:
 218+ E13F CD DB E0     	call	sprite_galactic_hide
 219+ E142 CD F4 E0     	call	sprite_galactic_hyper_hide
 220+ E145 CD 0D E1     	call	sprite_local_hide
 221+ E148 CD 26 E1     	call	sprite_local_hyper_hide
 222+ E14B C9           	ret
 223+ E14C
 224+ E14C              init_sprites:
 225+ E14C CD 3F E1     	call		sprite_cls_cursors
 226+ E14F ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 227+ E153 C9           	ret
 228+ E154
# file closed: ./Layer3Sprites/sprite_routines.asm
 996  E154                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E154              sprite_load_sprite_data:
   2+ E154 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E157 AF           	xor			a
   4+ E158 ED 79        	out			(c),a							; Prime slot upload
   5+ E15A 11 00 0C     	ld			de,12	* 256						; nbr of sprites to upload
   6+ E15D 21 6B E1     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E160              SpriteLoadLoop:
   8+ E160 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E163 ED 90        	outinb											; do final 256th sprite
  10+ E165 1B           	dec			de
  11+ E166 7A           	ld			a,d
  12+ E167 B3           	or			e
  13+ E168 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E16A C9           	ret
  15+ E16B
# file closed: ./Layer3Sprites/sprite_load.asm
 997  E16B                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E16B              Sprite1:
   2+ E16B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E16F E3 E3 E3 E3
   2+ E173 E3 E3 E3 E3
   2+ E177 E3 E3 E3 E3
   3+ E17B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E17F E3 E3 E3 E3
   3+ E183 E3 E3 E3 E3
   3+ E187 E3 E3 E3 E3
   4+ E18B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E18F E3 E3 E3 E3
   4+ E193 E3 E3 E3 E3
   4+ E197 E3 E3 E3 E3
   5+ E19B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E19F E3 E3 E3 E3
   5+ E1A3 E3 E3 E3 E3
   5+ E1A7 E3 E3 E3 E3
   6+ E1AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E1AF E3 E3 E3 E3
   6+ E1B3 E3 E3 E3 E3
   6+ E1B7 E3 E3 E3 E3
   7+ E1BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E1BF E3 E3 E3 E3
   7+ E1C3 E3 E3 E3 E3
   7+ E1C7 E3 E3 E3 E3
   8+ E1CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E1CF E3 E3 E3 E3
   8+ E1D3 E3 E3 E3 E3
   8+ E1D7 E3 E3 E3 E3
   9+ E1DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E1DF E3 E3 E3 E3
   9+ E1E3 E3 E3 E3 E3
   9+ E1E7 E3 E3 E3 E3
  10+ E1EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E1EF E3 E3 E3 E3
  10+ E1F3 E3 E3 E3 E3
  10+ E1F7 E3 E3 E3 90
  11+ E1FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E1FF E3 E3 E3 E3
  11+ E203 E3 E3 E3 E3
  11+ E207 E3 E3 E3 B4
  12+ E20B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E20F E3 E3 E3 E3
  12+ E213 E3 E3 E3 E3
  12+ E217 E3 E3 E3 B4
  13+ E21B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E21F E3 E3 E3 E3
  13+ E223 E3 E3 E3 E3
  13+ E227 E3 E3 E3 D8
  14+ E22B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E22F E3 E3 E3 E3
  14+ E233 E3 E3 E3 E3
  14+ E237 E3 E3 E3 D8
  15+ E23B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E23F E3 E3 E3 E3
  15+ E243 E3 E3 E3 E3
  15+ E247 E3 E3 E3 FC
  16+ E24B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E24F E3 E3 E3 E3
  16+ E253 E3 E3 E3 E3
  16+ E257 E3 E3 E3 FC
  17+ E25B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E25F E3 E3 E3 E3
  17+ E263 90 B4 B4 D8
  17+ E267 D8 FC FC E3
  18+ E26B
  19+ E26B
  20+ E26B
  21+ E26B              Sprite2:
  22+ E26B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E26F E3 E3 E3 E3
  22+ E273 E3 E3 E3 E3
  22+ E277 E3 E3 E3 E3
  23+ E27B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E27F E3 E3 E3 E3
  23+ E283 E3 E3 E3 E3
  23+ E287 E3 E3 E3 E3
  24+ E28B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E28F E3 E3 E3 E3
  24+ E293 E3 E3 E3 E3
  24+ E297 E3 E3 E3 E3
  25+ E29B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E29F E3 E3 E3 E3
  25+ E2A3 E3 E3 E3 E3
  25+ E2A7 E3 E3 E3 E3
  26+ E2AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E2AF E3 E3 E3 E3
  26+ E2B3 E3 E3 E3 E3
  26+ E2B7 E3 E3 E3 E3
  27+ E2BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E2BF E3 E3 E3 E3
  27+ E2C3 E3 E3 E3 E3
  27+ E2C7 E3 E3 E3 E3
  28+ E2CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E2CF E3 E3 E3 E3
  28+ E2D3 E3 E3 E3 E3
  28+ E2D7 E3 E3 E3 E3
  29+ E2DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E2DF E3 E3 E3 E3
  29+ E2E3 E3 E3 E3 E3
  29+ E2E7 E3 E3 E3 E3
  30+ E2EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E2EF E3 E3 E3 E3
  30+ E2F3 E3 E3 E3 E3
  30+ E2F7 E3 E3 E3 E3
  31+ E2FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E2FF E3 E3 E3 E3
  31+ E303 E3 E3 E3 E3
  31+ E307 E3 E3 E3 E3
  32+ E30B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E30F E3 E3 E3 E3
  32+ E313 E3 E3 E3 E3
  32+ E317 E3 E3 E3 E3
  33+ E31B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E31F E3 E3 E3 E3
  33+ E323 E3 E3 E3 E3
  33+ E327 E3 E3 E3 E3
  34+ E32B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E32F E3 E3 E3 E3
  34+ E333 E3 E3 E3 E3
  34+ E337 E3 E3 E3 E3
  35+ E33B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E33F E3 E3 E3 E3
  35+ E343 E3 E3 E3 E3
  35+ E347 E3 E3 E3 E3
  36+ E34B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E34F E3 E3 E3 E3
  36+ E353 E3 E3 E3 E3
  36+ E357 E3 E3 E3 E3
  37+ E35B FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E35F B4 B4 90 E3
  37+ E363 E3 E3 E3 E3
  37+ E367 E3 E3 E3 E3
  38+ E36B
  39+ E36B
  40+ E36B
  41+ E36B              Sprite3:
  42+ E36B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E36F E3 E3 E3 E3
  42+ E373 E3 E3 E3 E3
  42+ E377 E3 E3 E3 FC
  43+ E37B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E37F E3 E3 E3 E3
  43+ E383 E3 E3 E3 E3
  43+ E387 E3 E3 E3 FC
  44+ E38B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E38F E3 E3 E3 E3
  44+ E393 E3 E3 E3 E3
  44+ E397 E3 E3 E3 D8
  45+ E39B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E39F E3 E3 E3 E3
  45+ E3A3 E3 E3 E3 E3
  45+ E3A7 E3 E3 E3 D8
  46+ E3AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E3AF E3 E3 E3 E3
  46+ E3B3 E3 E3 E3 E3
  46+ E3B7 E3 E3 E3 B4
  47+ E3BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E3BF E3 E3 E3 E3
  47+ E3C3 E3 E3 E3 E3
  47+ E3C7 E3 E3 E3 B4
  48+ E3CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E3CF E3 E3 E3 E3
  48+ E3D3 E3 E3 E3 E3
  48+ E3D7 E3 E3 E3 90
  49+ E3DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E3DF E3 E3 E3 E3
  49+ E3E3 E3 E3 E3 E3
  49+ E3E7 E3 E3 E3 E3
  50+ E3EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E3EF E3 E3 E3 E3
  50+ E3F3 E3 E3 E3 E3
  50+ E3F7 E3 E3 E3 E3
  51+ E3FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E3FF E3 E3 E3 E3
  51+ E403 E3 E3 E3 E3
  51+ E407 E3 E3 E3 E3
  52+ E40B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E40F E3 E3 E3 E3
  52+ E413 E3 E3 E3 E3
  52+ E417 E3 E3 E3 E3
  53+ E41B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E41F E3 E3 E3 E3
  53+ E423 E3 E3 E3 E3
  53+ E427 E3 E3 E3 E3
  54+ E42B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E42F E3 E3 E3 E3
  54+ E433 E3 E3 E3 E3
  54+ E437 E3 E3 E3 E3
  55+ E43B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E43F E3 E3 E3 E3
  55+ E443 E3 E3 E3 E3
  55+ E447 E3 E3 E3 E3
  56+ E44B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E44F E3 E3 E3 E3
  56+ E453 E3 E3 E3 E3
  56+ E457 E3 E3 E3 E3
  57+ E45B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E45F E3 E3 E3 E3
  57+ E463 E3 E3 E3 E3
  57+ E467 E3 E3 E3 E3
  58+ E46B
  59+ E46B
  60+ E46B
  61+ E46B              Sprite4:
  62+ E46B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E46F E3 E3 E3 E3
  62+ E473 E3 E3 E3 E3
  62+ E477 E3 E3 E3 E3
  63+ E47B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E47F E3 E3 E3 E3
  63+ E483 E3 E3 E3 E3
  63+ E487 E3 E3 E3 E3
  64+ E48B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E48F E3 E3 E3 E3
  64+ E493 E3 E3 E3 E3
  64+ E497 E3 E3 E3 E3
  65+ E49B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E49F E3 E3 E3 E3
  65+ E4A3 E3 E3 E3 E3
  65+ E4A7 E3 E3 E3 E3
  66+ E4AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E4AF E3 E3 E3 E3
  66+ E4B3 E3 E3 E3 E3
  66+ E4B7 E3 E3 E3 E3
  67+ E4BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E4BF E3 E3 E3 E3
  67+ E4C3 E3 E3 E3 E3
  67+ E4C7 E3 E3 E3 E3
  68+ E4CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E4CF E3 E3 E3 E3
  68+ E4D3 E3 E3 E3 E3
  68+ E4D7 E3 E3 E3 E3
  69+ E4DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E4DF E3 E3 E3 E3
  69+ E4E3 E3 E3 E3 E3
  69+ E4E7 E3 E3 E3 E3
  70+ E4EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E4EF E3 E3 E3 E3
  70+ E4F3 E3 E3 E3 E3
  70+ E4F7 E3 E3 E3 E3
  71+ E4FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E4FF E3 E3 E3 E3
  71+ E503 E3 E3 E3 E3
  71+ E507 E3 E3 E3 E3
  72+ E50B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E50F E3 E3 E3 E3
  72+ E513 E3 E3 E3 E3
  72+ E517 E3 E3 E3 E3
  73+ E51B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E51F E3 E3 E3 E3
  73+ E523 E3 E3 E3 E3
  73+ E527 E3 E3 E3 12
  74+ E52B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E52F E3 E3 E3 E3
  74+ E533 E3 E3 E3 E3
  74+ E537 E3 E3 E3 16
  75+ E53B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E53F E3 E3 E3 E3
  75+ E543 E3 E3 E3 E3
  75+ E547 E3 E3 E3 1A
  76+ E54B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E54F E3 E3 E3 E3
  76+ E553 E3 E3 E3 E3
  76+ E557 E3 E3 E3 1F
  77+ E55B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E55F E3 E3 E3 E3
  77+ E563 E3 E3 E3 12
  77+ E567 16 1A 1F E3
  78+ E56B
  79+ E56B
  80+ E56B
  81+ E56B              Sprite5:
  82+ E56B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E56F E3 E3 E3 E3
  82+ E573 E3 E3 E3 E3
  82+ E577 E3 E3 E3 E3
  83+ E57B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E57F E3 E3 E3 E3
  83+ E583 E3 E3 E3 E3
  83+ E587 E3 E3 E3 E3
  84+ E58B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E58F E3 E3 E3 E3
  84+ E593 E3 E3 E3 E3
  84+ E597 E3 E3 E3 E3
  85+ E59B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E59F E3 E3 E3 E3
  85+ E5A3 E3 E3 E3 E3
  85+ E5A7 E3 E3 E3 E3
  86+ E5AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E5AF E3 E3 E3 E3
  86+ E5B3 E3 E3 E3 E3
  86+ E5B7 E3 E3 E3 E3
  87+ E5BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E5BF E3 E3 E3 E3
  87+ E5C3 E3 E3 E3 E3
  87+ E5C7 E3 E3 E3 E3
  88+ E5CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E5CF E3 E3 E3 E3
  88+ E5D3 E3 E3 E3 E3
  88+ E5D7 E3 E3 E3 E3
  89+ E5DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E5DF E3 E3 E3 E3
  89+ E5E3 E3 E3 E3 E3
  89+ E5E7 E3 E3 E3 E3
  90+ E5EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E5EF E3 E3 E3 E3
  90+ E5F3 E3 E3 E3 E3
  90+ E5F7 E3 E3 E3 E3
  91+ E5FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E5FF E3 E3 E3 E3
  91+ E603 E3 E3 E3 E3
  91+ E607 E3 E3 E3 E3
  92+ E60B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E60F E3 E3 E3 E3
  92+ E613 E3 E3 E3 E3
  92+ E617 E3 E3 E3 E3
  93+ E61B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E61F E3 E3 E3 E3
  93+ E623 E3 E3 E3 E3
  93+ E627 E3 E3 E3 E3
  94+ E62B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E62F E3 E3 E3 E3
  94+ E633 E3 E3 E3 E3
  94+ E637 E3 E3 E3 E3
  95+ E63B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E63F E3 E3 E3 E3
  95+ E643 E3 E3 E3 E3
  95+ E647 E3 E3 E3 E3
  96+ E64B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E64F E3 E3 E3 E3
  96+ E653 E3 E3 E3 E3
  96+ E657 E3 E3 E3 E3
  97+ E65B 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E65F E3 E3 E3 E3
  97+ E663 E3 E3 E3 E3
  97+ E667 E3 E3 E3 E3
  98+ E66B
  99+ E66B
 100+ E66B
 101+ E66B              Sprite6:
 102+ E66B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E66F E3 E3 E3 E3
 102+ E673 E3 E3 E3 E3
 102+ E677 E3 E3 E3 1F
 103+ E67B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E67F E3 E3 E3 E3
 103+ E683 E3 E3 E3 E3
 103+ E687 E3 E3 E3 1A
 104+ E68B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E68F E3 E3 E3 E3
 104+ E693 E3 E3 E3 E3
 104+ E697 E3 E3 E3 16
 105+ E69B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E69F E3 E3 E3 E3
 105+ E6A3 E3 E3 E3 E3
 105+ E6A7 E3 E3 E3 12
 106+ E6AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E6AF E3 E3 E3 E3
 106+ E6B3 E3 E3 E3 E3
 106+ E6B7 E3 E3 E3 E3
 107+ E6BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E6BF E3 E3 E3 E3
 107+ E6C3 E3 E3 E3 E3
 107+ E6C7 E3 E3 E3 E3
 108+ E6CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E6CF E3 E3 E3 E3
 108+ E6D3 E3 E3 E3 E3
 108+ E6D7 E3 E3 E3 E3
 109+ E6DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E6DF E3 E3 E3 E3
 109+ E6E3 E3 E3 E3 E3
 109+ E6E7 E3 E3 E3 E3
 110+ E6EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E6EF E3 E3 E3 E3
 110+ E6F3 E3 E3 E3 E3
 110+ E6F7 E3 E3 E3 E3
 111+ E6FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E6FF E3 E3 E3 E3
 111+ E703 E3 E3 E3 E3
 111+ E707 E3 E3 E3 E3
 112+ E70B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ E70F E3 E3 E3 E3
 112+ E713 E3 E3 E3 E3
 112+ E717 E3 E3 E3 E3
 113+ E71B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ E71F E3 E3 E3 E3
 113+ E723 E3 E3 E3 E3
 113+ E727 E3 E3 E3 E3
 114+ E72B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ E72F E3 E3 E3 E3
 114+ E733 E3 E3 E3 E3
 114+ E737 E3 E3 E3 E3
 115+ E73B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ E73F E3 E3 E3 E3
 115+ E743 E3 E3 E3 E3
 115+ E747 E3 E3 E3 E3
 116+ E74B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ E74F E3 E3 E3 E3
 116+ E753 E3 E3 E3 E3
 116+ E757 E3 E3 E3 E3
 117+ E75B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ E75F E3 E3 E3 E3
 117+ E763 E3 E3 E3 E3
 117+ E767 E3 E3 E3 E3
 118+ E76B
 119+ E76B
 120+ E76B
 121+ E76B              Sprite7:
 122+ E76B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ E76F E3 E3 E3 E3
 122+ E773 E3 E3 E3 E3
 122+ E777 E3 E3 E3 E3
 123+ E77B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ E77F E3 E3 E3 E3
 123+ E783 E3 E3 E3 E3
 123+ E787 E3 E3 E3 09
 124+ E78B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ E78F E3 E3 E3 E3
 124+ E793 E3 E3 E3 E3
 124+ E797 E3 E3 E3 09
 125+ E79B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ E79F E3 E3 E3 E3
 125+ E7A3 E3 E3 E3 E3
 125+ E7A7 E3 E3 E3 2C
 126+ E7AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ E7AF E3 E3 E3 E3
 126+ E7B3 E3 E3 E3 E3
 126+ E7B7 E3 E3 E3 2C
 127+ E7BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ E7BF E3 E3 E3 E3
 127+ E7C3 E3 E3 E3 E3
 127+ E7C7 E3 E3 E3 50
 128+ E7CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ E7CF E3 E3 E3 E3
 128+ E7D3 E3 E3 E3 E3
 128+ E7D7 E3 E3 E3 50
 129+ E7DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ E7DF E3 E3 E3 E3
 129+ E7E3 E3 E3 E3 E3
 129+ E7E7 E3 E3 E3 50
 130+ E7EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ E7EF E3 E3 E3 E3
 130+ E7F3 E3 E3 E3 E3
 130+ E7F7 E3 E3 E3 15
 131+ E7FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ E7FF E3 E3 E3 E3
 131+ E803 E3 E3 E3 E3
 131+ E807 E3 E3 E3 15
 132+ E80B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ E80F E3 E3 E3 E3
 132+ E813 E3 E3 E3 E3
 132+ E817 E3 E3 E3 15
 133+ E81B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ E81F E3 E3 E3 E3
 133+ E823 E3 E3 E3 E3
 133+ E827 E3 E3 E3 7C
 134+ E82B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ E82F E3 E3 E3 E3
 134+ E833 E3 E3 E3 E3
 134+ E837 E3 E3 E3 7C
 135+ E83B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ E83F E3 E3 E3 E3
 135+ E843 E3 E3 E3 E3
 135+ E847 E3 E3 E3 7C
 136+ E84B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ E84F E3 E3 E3 E3
 136+ E853 E3 E3 E3 E3
 136+ E857 E3 E3 E3 7C
 137+ E85B E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ E85F 2C 50 50 50
 137+ E863 15 15 15 7C
 137+ E867 7C 7C 7C E3
 138+ E86B
 139+ E86B
 140+ E86B
 141+ E86B              Sprite8:
 142+ E86B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ E86F E3 E3 E3 E3
 142+ E873 E3 E3 E3 E3
 142+ E877 E3 E3 E3 E3
 143+ E87B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ E87F E3 E3 E3 E3
 143+ E883 E3 E3 E3 E3
 143+ E887 E3 E3 E3 E3
 144+ E88B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ E88F E3 E3 E3 E3
 144+ E893 E3 E3 E3 E3
 144+ E897 E3 E3 E3 E3
 145+ E89B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ E89F E3 E3 E3 E3
 145+ E8A3 E3 E3 E3 E3
 145+ E8A7 E3 E3 E3 E3
 146+ E8AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ E8AF E3 E3 E3 E3
 146+ E8B3 E3 E3 E3 E3
 146+ E8B7 E3 E3 E3 E3
 147+ E8BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ E8BF E3 E3 E3 E3
 147+ E8C3 E3 E3 E3 E3
 147+ E8C7 E3 E3 E3 E3
 148+ E8CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ E8CF E3 E3 E3 E3
 148+ E8D3 E3 E3 E3 E3
 148+ E8D7 E3 E3 E3 E3
 149+ E8DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ E8DF E3 E3 E3 E3
 149+ E8E3 E3 E3 E3 E3
 149+ E8E7 E3 E3 E3 E3
 150+ E8EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ E8EF E3 E3 E3 E3
 150+ E8F3 E3 E3 E3 E3
 150+ E8F7 E3 E3 E3 E3
 151+ E8FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ E8FF E3 E3 E3 E3
 151+ E903 E3 E3 E3 E3
 151+ E907 E3 E3 E3 E3
 152+ E90B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ E90F E3 E3 E3 E3
 152+ E913 E3 E3 E3 E3
 152+ E917 E3 E3 E3 E3
 153+ E91B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ E91F E3 E3 E3 E3
 153+ E923 E3 E3 E3 E3
 153+ E927 E3 E3 E3 E3
 154+ E92B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ E92F E3 E3 E3 E3
 154+ E933 E3 E3 E3 E3
 154+ E937 E3 E3 E3 E3
 155+ E93B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ E93F E3 E3 E3 E3
 155+ E943 E3 E3 E3 E3
 155+ E947 E3 E3 E3 E3
 156+ E94B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ E94F E3 E3 E3 E3
 156+ E953 E3 E3 E3 E3
 156+ E957 E3 E3 E3 E3
 157+ E95B 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ E95F 15 15 15 50
 157+ E963 50 50 2C 2C
 157+ E967 09 09 E3 E3
 158+ E96B
 159+ E96B
 160+ E96B
 161+ E96B              Sprite9:
 162+ E96B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ E96F E3 E3 E3 E3
 162+ E973 E3 E3 E3 E3
 162+ E977 E3 E3 E3 7C
 163+ E97B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ E97F E3 E3 E3 E3
 163+ E983 E3 E3 E3 E3
 163+ E987 E3 E3 E3 7C
 164+ E98B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ E98F E3 E3 E3 E3
 164+ E993 E3 E3 E3 E3
 164+ E997 E3 E3 E3 7C
 165+ E99B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ E99F E3 E3 E3 E3
 165+ E9A3 E3 E3 E3 E3
 165+ E9A7 E3 E3 E3 7C
 166+ E9AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ E9AF E3 E3 E3 E3
 166+ E9B3 E3 E3 E3 E3
 166+ E9B7 E3 E3 E3 15
 167+ E9BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ E9BF E3 E3 E3 E3
 167+ E9C3 E3 E3 E3 E3
 167+ E9C7 E3 E3 E3 15
 168+ E9CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ E9CF E3 E3 E3 E3
 168+ E9D3 E3 E3 E3 E3
 168+ E9D7 E3 E3 E3 15
 169+ E9DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ E9DF E3 E3 E3 E3
 169+ E9E3 E3 E3 E3 E3
 169+ E9E7 E3 E3 E3 50
 170+ E9EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ E9EF E3 E3 E3 E3
 170+ E9F3 E3 E3 E3 E3
 170+ E9F7 E3 E3 E3 50
 171+ E9FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ E9FF E3 E3 E3 E3
 171+ EA03 E3 E3 E3 E3
 171+ EA07 E3 E3 E3 50
 172+ EA0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ EA0F E3 E3 E3 E3
 172+ EA13 E3 E3 E3 E3
 172+ EA17 E3 E3 E3 2C
 173+ EA1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ EA1F E3 E3 E3 E3
 173+ EA23 E3 E3 E3 E3
 173+ EA27 E3 E3 E3 2C
 174+ EA2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ EA2F E3 E3 E3 E3
 174+ EA33 E3 E3 E3 E3
 174+ EA37 E3 E3 E3 09
 175+ EA3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ EA3F E3 E3 E3 E3
 175+ EA43 E3 E3 E3 E3
 175+ EA47 E3 E3 E3 09
 176+ EA4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EA4F E3 E3 E3 E3
 176+ EA53 E3 E3 E3 E3
 176+ EA57 E3 E3 E3 E3
 177+ EA5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ EA5F E3 E3 E3 E3
 177+ EA63 E3 E3 E3 E3
 177+ EA67 E3 E3 E3 E3
 178+ EA6B
 179+ EA6B
 180+ EA6B
 181+ EA6B              Sprite10:
 182+ EA6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EA6F E3 E3 E3 E3
 182+ EA73 E3 E3 E3 E3
 182+ EA77 E3 E3 E3 E3
 183+ EA7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EA7F E3 E3 E3 E3
 183+ EA83 E3 E3 E3 E3
 183+ EA87 E3 E3 E3 44
 184+ EA8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EA8F E3 E3 E3 E3
 184+ EA93 E3 E3 E3 E3
 184+ EA97 E3 E3 E3 64
 185+ EA9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EA9F E3 E3 E3 E3
 185+ EAA3 E3 E3 E3 E3
 185+ EAA7 E3 E3 E3 64
 186+ EAAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EAAF E3 E3 E3 E3
 186+ EAB3 E3 E3 E3 E3
 186+ EAB7 E3 E3 E3 64
 187+ EABB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EABF E3 E3 E3 E3
 187+ EAC3 E3 E3 E3 E3
 187+ EAC7 E3 E3 E3 A8
 188+ EACB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EACF E3 E3 E3 E3
 188+ EAD3 E3 E3 E3 E3
 188+ EAD7 E3 E3 E3 A8
 189+ EADB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EADF E3 E3 E3 E3
 189+ EAE3 E3 E3 E3 E3
 189+ EAE7 E3 E3 E3 A8
 190+ EAEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EAEF E3 E3 E3 E3
 190+ EAF3 E3 E3 E3 E3
 190+ EAF7 E3 E3 E3 CC
 191+ EAFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EAFF E3 E3 E3 E3
 191+ EB03 E3 E3 E3 E3
 191+ EB07 E3 E3 E3 CC
 192+ EB0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EB0F E3 E3 E3 E3
 192+ EB13 E3 E3 E3 E3
 192+ EB17 E3 E3 E3 CC
 193+ EB1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EB1F E3 E3 E3 E3
 193+ EB23 E3 E3 E3 E3
 193+ EB27 E3 E3 E3 EC
 194+ EB2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EB2F E3 E3 E3 E3
 194+ EB33 E3 E3 E3 E3
 194+ EB37 E3 E3 E3 EC
 195+ EB3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EB3F E3 E3 E3 E3
 195+ EB43 E3 E3 E3 E3
 195+ EB47 E3 E3 E3 EC
 196+ EB4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EB4F E3 E3 E3 E3
 196+ EB53 E3 E3 E3 E3
 196+ EB57 E3 E3 E3 EC
 197+ EB5B E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EB5F 64 A8 A8 A8
 197+ EB63 CC CC CC EC
 197+ EB67 EC EC EC E3
 198+ EB6B
 199+ EB6B
 200+ EB6B
 201+ EB6B              Sprite11:
 202+ EB6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EB6F E3 E3 E3 E3
 202+ EB73 E3 E3 E3 E3
 202+ EB77 E3 E3 E3 E3
 203+ EB7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EB7F E3 E3 E3 E3
 203+ EB83 E3 E3 E3 E3
 203+ EB87 E3 E3 E3 E3
 204+ EB8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EB8F E3 E3 E3 E3
 204+ EB93 E3 E3 E3 E3
 204+ EB97 E3 E3 E3 E3
 205+ EB9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EB9F E3 E3 E3 E3
 205+ EBA3 E3 E3 E3 E3
 205+ EBA7 E3 E3 E3 E3
 206+ EBAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EBAF E3 E3 E3 E3
 206+ EBB3 E3 E3 E3 E3
 206+ EBB7 E3 E3 E3 E3
 207+ EBBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EBBF E3 E3 E3 E3
 207+ EBC3 E3 E3 E3 E3
 207+ EBC7 E3 E3 E3 E3
 208+ EBCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EBCF E3 E3 E3 E3
 208+ EBD3 E3 E3 E3 E3
 208+ EBD7 E3 E3 E3 E3
 209+ EBDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EBDF E3 E3 E3 E3
 209+ EBE3 E3 E3 E3 E3
 209+ EBE7 E3 E3 E3 E3
 210+ EBEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EBEF E3 E3 E3 E3
 210+ EBF3 E3 E3 E3 E3
 210+ EBF7 E3 E3 E3 E3
 211+ EBFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EBFF E3 E3 E3 E3
 211+ EC03 E3 E3 E3 E3
 211+ EC07 E3 E3 E3 E3
 212+ EC0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EC0F E3 E3 E3 E3
 212+ EC13 E3 E3 E3 E3
 212+ EC17 E3 E3 E3 E3
 213+ EC1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EC1F E3 E3 E3 E3
 213+ EC23 E3 E3 E3 E3
 213+ EC27 E3 E3 E3 E3
 214+ EC2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EC2F E3 E3 E3 E3
 214+ EC33 E3 E3 E3 E3
 214+ EC37 E3 E3 E3 E3
 215+ EC3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EC3F E3 E3 E3 E3
 215+ EC43 E3 E3 E3 E3
 215+ EC47 E3 E3 E3 E3
 216+ EC4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EC4F E3 E3 E3 E3
 216+ EC53 E3 E3 E3 E3
 216+ EC57 E3 E3 E3 E3
 217+ EC5B EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EC5F CC CC CC A8
 217+ EC63 A8 A8 64 64
 217+ EC67 64 44 E3 E3
 218+ EC6B
 219+ EC6B
 220+ EC6B
 221+ EC6B              Sprite12:
 222+ EC6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EC6F E3 E3 E3 E3
 222+ EC73 E3 E3 E3 E3
 222+ EC77 E3 E3 E3 EC
 223+ EC7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EC7F E3 E3 E3 E3
 223+ EC83 E3 E3 E3 E3
 223+ EC87 E3 E3 E3 EC
 224+ EC8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EC8F E3 E3 E3 E3
 224+ EC93 E3 E3 E3 E3
 224+ EC97 E3 E3 E3 EC
 225+ EC9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EC9F E3 E3 E3 E3
 225+ ECA3 E3 E3 E3 E3
 225+ ECA7 E3 E3 E3 EC
 226+ ECAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ ECAF E3 E3 E3 E3
 226+ ECB3 E3 E3 E3 E3
 226+ ECB7 E3 E3 E3 CC
 227+ ECBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ ECBF E3 E3 E3 E3
 227+ ECC3 E3 E3 E3 E3
 227+ ECC7 E3 E3 E3 CC
 228+ ECCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ ECCF E3 E3 E3 E3
 228+ ECD3 E3 E3 E3 E3
 228+ ECD7 E3 E3 E3 CC
 229+ ECDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ ECDF E3 E3 E3 E3
 229+ ECE3 E3 E3 E3 E3
 229+ ECE7 E3 E3 E3 A8
 230+ ECEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ ECEF E3 E3 E3 E3
 230+ ECF3 E3 E3 E3 E3
 230+ ECF7 E3 E3 E3 A8
 231+ ECFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ ECFF E3 E3 E3 E3
 231+ ED03 E3 E3 E3 E3
 231+ ED07 E3 E3 E3 A8
 232+ ED0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ ED0F E3 E3 E3 E3
 232+ ED13 E3 E3 E3 E3
 232+ ED17 E3 E3 E3 64
 233+ ED1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ ED1F E3 E3 E3 E3
 233+ ED23 E3 E3 E3 E3
 233+ ED27 E3 E3 E3 64
 234+ ED2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ ED2F E3 E3 E3 E3
 234+ ED33 E3 E3 E3 E3
 234+ ED37 E3 E3 E3 64
 235+ ED3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ ED3F E3 E3 E3 E3
 235+ ED43 E3 E3 E3 E3
 235+ ED47 E3 E3 E3 44
 236+ ED4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ ED4F E3 E3 E3 E3
 236+ ED53 E3 E3 E3 E3
 236+ ED57 E3 E3 E3 E3
 237+ ED5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ ED5F E3 E3 E3 E3
 237+ ED63 E3 E3 E3 E3
 237+ ED67 E3 E3 E3 E3
 238+ ED6B
# file closed: ./Layer3Sprites/SpriteSheet.asm
 998  ED6B              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 999  ED6B                  SLOT    ConsoleImageAddr
1000  ED6B                  PAGE    BankConsole
1001  ED6B              	ORG     ConsoleImageAddr, BankConsole
1002  E000
1003  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: ./Images/ConsoleImageData.asm
1004  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1005  E900                  SLOT    ViewFrontAddr
1006  E900                  PAGE    BankFrontView
1007  E900                  ORG     ViewFrontAddr
1008  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 E0 93                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 E1 93                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A DC 93                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 DF 93     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 DE 93                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 C9                                   ret
  22+ C038
  23+ C038              ; Do the same for pitch
  24+ C038
  25+ C038              draw_front_view:        MMUSelectLayer1
  25+ C038 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  26+ C03C CD 47 E0                             call    l1_cls
  27+ C03F CD 52 E0                             call    l1_attr_cls
  28+ C042                                      MMUSelectLayer2
  28+ C042 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  29+ C046 CD 02 E0                             call     asm_l2_double_buffer_on
  30+ C049                                      MMUSelectSpriteBank
  30+ C049 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  31+ C04D CD 3F E1                             call    sprite_cls_cursors
  32+ C050                                      MMUSelectConsoleBank
  32+ C050 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  33+ C054 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  34+ C057 11 00 E0                             ld          de,ConsoleImageData
  35+ C05A 01 00 08                             ld          bc, ScreenL1BottomLen
  36+ C05D CD AD 90                             call        memcopy_dma
  37+ C060 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  38+ C063 11 00 E8                             ld          de,ConsoleAttributes
  39+ C066 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  40+ C069 CD AD 90                             call        memcopy_dma
  41+ C06C CD 0F 8D                             call        InitialiseStars
  42+ C06F AF                                   xor         a
  43+ C070 32 31 94                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  44+ C073 C9                                   ret
  45+ C074
  46+ C074              dampenRate:             equ     $04
  47+ C074 04           dampenRcounter:         DB      dampenRate
  48+ C075 04           dampenPcounter:         DB      dampenRate
  49+ C076 AF           input_front_view:       xor         a
  50+ C077 2A 12 91                             ld      hl,(addr_Pressed_Accellerate)
  51+ C07A 7E                                   ld      a,(hl)
  52+ C07B                                      IfAIsZeroGoto     TestDecellerate
  52+ C07B A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  52+ C07C CA 98 C0    >				jp	z,TestDecellerate
  53+ C07F 3A 1B 94                             ld      a,(SHIPMAXSPEED)
  54+ C082 57                                   ld      d,a
  55+ C083 3A 1C 94                             ld      a,(DELTA)
  56+ C086                                      JumpIfAGTENusng d,TestDecellerate
  56+ C086 BA          >                        cp     d
  56+ C087 D2 98 C0    >                        jp		nc,TestDecellerate
  57+ C08A 3C                                   inc     a
  58+ C08B 32 1C 94                             ld      (DELTA),a
  59+ C08E 2A 1D 94                             ld      hl,(DELT4Lo)
  60+ C091 ED 34 04 00                          add     hl,4
  61+ C095 22 1D 94                             ld      (DELT4Lo),hl
  62+ C098 2A 14 91     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
  63+ C09B 7E                                   ld      a,(hl)
  64+ C09C                                      IfAIsZeroGoto   TestLeftPressed
  64+ C09C A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  64+ C09D CA B5 C0    >				jp	z,TestLeftPressed
  65+ C0A0 3A 1C 94                             ld      a,(DELTA)
  66+ C0A3                                      IfAIsZeroGoto   TestLeftPressed
  66+ C0A3 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  66+ C0A4 CA B5 C0    >				jp	z,TestLeftPressed
  67+ C0A7 3D                                   dec     a
  68+ C0A8 32 1C 94                             ld      (DELTA),a
  69+ C0AB 2A 1D 94                             ld      hl,(DELT4Lo)
  70+ C0AE 2B                                   dec     hl
  71+ C0AF 2B                                   dec     hl
  72+ C0B0 2B                                   dec     hl
  73+ C0B1 2B                                   dec     hl
  74+ C0B2 22 1D 94                             ld      (DELT4Lo),hl
  75+ C0B5 2A 0A 91     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
  76+ C0B8 7E                                   ld      a,(hl)
  77+ C0B9                                      IfAIsZeroGoto   TestRightPressed
  77+ C0B9 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  77+ C0BA CA CD C0    >				jp	z,TestRightPressed
  78+ C0BD 3A DC 93                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  79+ C0C0 21 E3 93                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
  80+ C0C3 BE                                   cp      (hl)
  81+ C0C4 28 07                                jr      z,TestRightPressed
  82+ C0C6                                      ;break
  83+ C0C6 3D                                   dec     a                                   ; increase joystick roll
  84+ C0C7 32 DC 93                             ld      (JSTX),a
  85+ C0CA CD 10 C0                             call    draw_front_calc_alpha
  86+ C0CD 2A 0C 91     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
  87+ C0D0 7E                                   ld      a,(hl)
  88+ C0D1                                      IfAIsZeroGoto   .DampenRoll
  88+ C0D1 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  88+ C0D2 CA E7 C0    >				jp	z,.DampenRoll
  89+ C0D5 3A DC 93                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  90+ C0D8 21 E2 93                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
  91+ C0DB BE                                   cp      (hl)
  92+ C0DC 28 23                                jr      z,TestDivePressed                   ; if its held then we don't dampen
  93+ C0DE                                      ;break
  94+ C0DE 3C                                   inc     a                                   ; increase joystick roll
  95+ C0DF 32 DC 93     .UpdateAlphRoll:        ld      (JSTX),a
  96+ C0E2 CD 10 C0                             call    draw_front_calc_alpha
  97+ C0E5 18 1A                                jr      TestDivePressed
  98+ C0E7 21 74 C0     .DampenRoll:            ld      hl,dampenRcounter
  99+ C0EA 35                                   dec     (hl)
 100+ C0EB 20 14                                jr      nz,TestDivePressed
 101+ C0ED 3E 04                                ld      a,dampenRate
 102+ C0EF 77                                   ld      (hl),a
 103+ C0F0 3A DC 93                             ld      a,(JSTX)
 104+ C0F3 FE 00                                cp      0
 105+ C0F5 28 0A                                jr      z, TestDivePressed
 106+ C0F7 CB 7F                                bit     7,a
 107+ C0F9 28 03                                jr      z,.PosRollDampen
 108+ C0FB 3C           .NegRollDampen:         inc     a
 109+ C0FC 18 01                                jr      .ApplyRollDampen
 110+ C0FE 3D           .PosRollDampen:         dec     a
 111+ C0FF 18 DE        .ApplyRollDampen:       jr      .UpdateAlphRoll
 112+ C101              ; Dive and Climb input
 113+ C101 2A 0E 91     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 114+ C104 7E                                   ld      a,(hl)
 115+ C105                                      IfAIsZeroGoto   TestClimbPressed
 115+ C105 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 115+ C106 CA 38 C1    >				jp	z,TestClimbPressed
 116+ C109 3A D1 93                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 117+ C10C 21 D6 93                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 118+ C10F BE                                   cp      (hl)
 119+ C110 28 26                                jr      z,TestClimbPressed
 120+ C112                                      ;break
 121+ C112 3D                                   dec     a                                   ; increase joystick roll
 122+ C113 32 D1 93                             ld      (JSTY),a
 123+ C116 47                                   ld      b,a                                 ; b = current roll
 124+ C117 E6 80                                and     $80                                 ; a= sign of current rol
 125+ C119 32 D3 93                             ld      (BET2),a                            ; set sign
 126+ C11C EE 80                                xor     $80
 127+ C11E 32 D4 93                             ld      (BET2FLIP),a                        ; and oppsite sign
 128+ C121 3A D1 93                             ld      a,(JSTY)
 129+ C124                                      JumpOnBitClear a,7,.PositiveClimb
 129+ C124 CB 7F       >                        bit 	7,a
 129+ C126 CA 2B C1    >                        jp      z,.PositiveClimb
 130+ C129 ED 44        .NegativeClimb:         neg
 131+ C12B CB 3F        .PositiveClimb          srl     a
 132+ C12D CB 3F                                srl     a
 133+ C12F FE 08                                cp      8
 134+ C131 38 02                                jr      c,.NotIncreasedDamp
 135+ C133 CB 3F        .IncreasedDamp          srl     a
 136+ C135 32 D2 93     .NotIncreasedDamp:      ld      (BET1),a
 137+ C138 2A 10 91     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 138+ C13B 7E                                   ld      a,(hl)
 139+ C13C                                      IfAIsZeroGoto   .DampenPitch
 139+ C13C A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 139+ C13D CA 71 C1    >				jp	z,.DampenPitch
 140+ C140 3A D1 93                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 141+ C143 21 D5 93                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 142+ C146 BE                                   cp      (hl)
 143+ C147 28 42                                jr      z,ForwardViewDoneKeys
 144+ C149                                      ;break
 145+ C149 3C                                   inc     a                                   ; increase joystick roll
 146+ C14A 32 D1 93     .UpdateAlphPitch:       ld      (JSTY),a
 147+ C14D 47                                   ld      b,a                                 ; b = current roll
 148+ C14E E6 80                                and     $80                                 ; a= sign of current rol
 149+ C150 32 D3 93                             ld      (BET2),a                            ; set sign
 150+ C153 EE 80                                xor     $80
 151+ C155 32 D4 93                             ld      (BET2FLIP),a                        ; and oppsite sign
 152+ C158 3A D1 93                             ld      a,(JSTY)
 153+ C15B                                      JumpOnBitClear a,7,.PositiveClimb
 153+ C15B CB 7F       >                        bit 	7,a
 153+ C15D CA 62 C1    >                        jp      z,.PositiveClimb
 154+ C160 ED 44        .NegativeClimb:         neg
 155+ C162 CB 3F        .PositiveClimb          srl     a
 156+ C164 CB 3F                                srl     a
 157+ C166 FE 08                                cp      8
 158+ C168 38 02                                jr      c,.NotIncreasedDamp
 159+ C16A CB 3F        .IncreasedDamp          srl     a
 160+ C16C 32 D2 93     .NotIncreasedDamp:      ld      (BET1),a
 161+ C16F 18 1A                                jr      ForwardViewDoneKeys
 162+ C171 21 75 C0     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 163+ C174 35                                   dec     (hl)
 164+ C175 20 14                                jr      nz,ForwardViewDoneKeys
 165+ C177 3E 04                                ld      a,dampenRate
 166+ C179 77                                   ld      (hl),a
 167+ C17A 3A D1 93                             ld      a,(JSTY)
 168+ C17D FE 00                                cp      0
 169+ C17F 28 0A                                jr      z,ForwardViewDoneKeys
 170+ C181 CB 7F                                bit     7,a
 171+ C183 28 03                                jr      z,.PosPitchDampen
 172+ C185 3C           .NegPitchDampen:        inc     a
 173+ C186 18 01                                jr      .ApplyPitchDampen
 174+ C188 3D           .PosPitchDampen:        dec     a
 175+ C189 18 BF        .ApplyPitchDampen:      jr      .UpdateAlphPitch
 176+ C18B C9           ForwardViewDoneKeys:    ret
 177+ C18C
 178+ C18C
 179+ C18C
 180+ C18C
 181+ C18C
 182+ C18C
 183+ C18C
# file closed: ./Views/Front_View.asm
1009  C18C              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1010  C18C                  SLOT    MenuStatusAddr
1011  C18C                  PAGE    BankMenuStatus
1012  C18C                  ORG     MenuStatusAddr
1013  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 0B AC  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 C5 94  						DW $0290,CommanderName
   5+ C018 08 0B 1F AC  						DW $0B08,txt_present_system
   6+ C01C 08 13 32 AC  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 45 AC  						DW $1B08,txt_condition
   8+ C024 08 23 53 AC  						DW $2308,txt_fuel
   9+ C028 08 2B 61 AC  						DW $2B08,txt_cash
  10+ C02C 08 33 6F AC  						DW $3308,txt_legal_status
  11+ C030 08 3B 7D AC  						DW $3B08,txt_rating
  12+ C034 08 4B 8B AC  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A A2 97     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A A0 97                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     EQ_CARGO_BAY
 156+ CD95 3A D8 94     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 87 90                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 170+ CDB5 DD 21 BD 97                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A D8 94     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B CF 94                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A D8 94     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B 1C 95                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 F5 99                             ld		hl, ConditionNameIdx
 223+ CE45 CD F7 9A                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD E8 AC     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 96 AC                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A E1 94     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 D6 9B                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 E5 9B     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 DC 9B     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B F4 94  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD 02 9B                             call	getRankIndex
 260+ CEA9 21 E1 9A                             ld		hl, RankingNameIdx
 261+ CEAC CD F7 9A                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 47 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c,.FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD 80 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A 31 94     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 9A 94     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A FA 94     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E              ;;;PrintEquipment:         ld		a,(hl)
 324+ CF1E              ;;;                        cp		0
 325+ CF1E              ;;;                        ret		z
 326+ CF1E              ;;;                        ld		a,b
 327+ CF1E              ;;;PrintEquipmentDirect:	call	expandTokenToString
 328+ CF1E              ;;;                        ld		hl,TextBuffer
 329+ CF1E              ;;;                        ld		de,(equipment_cursor)
 330+ CF1E              ;;;                        call	l1_print_at
 331+ CF1E              ;;;                        ld		bc,(equipment_cursor)
 332+ CF1E              ;;;                        ld		a,b
 333+ CF1E              ;;;                        add		a,8
 334+ CF1E              ;;;                        ld		b,a
 335+ CF1E              ;;;                        ld		(equipment_cursor),bc
 336+ CF1E              ;;;                        cp		equipmax_row
 337+ CF1E              ;;;                        jr		c,.SkipColUpdate
 338+ CF1E              ;;;.ColUpdate:             ld		hl,equipment_position2
 339+ CF1E              ;;;                        ld		(equipment_cursor),hl
 340+ CF1E              ;;;                        ret
 341+ CF1E              ;;;.SkipColUpdate:	        ld		a,b
 342+ CF1E              ;;;                        ld		(equipment_cursor+1), a
 343+ CF1E              ;;;                        ret
 344+ CF1E
 345+ CF1E              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF1E
   2++CF1E                  MMUSelectLayer1
   2++CF1E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF22 CD 47 E0     	call	l1_cls
   4++CF25 3E 07        	ld		a,7
   5++CF27 CD 53 E0     	call	l1_attr_cls_to_a
   6++CF2A                  MMUSelectLayer2
   6++CF2A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF2E CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF31 CD C9 E0     	call	l2_cls	; Get some space
   9++CF34              	MMUSelectSpriteBank
   9++CF34 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF38 CD 3F E1     	call    sprite_cls_cursors
  11++CF3B
  12++CF3B
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF3B 3E 08                                ld		a,8
 347+ CF3D 32 2C 94                             ld		(MenuIdMax),a
 348+ CF40 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF43 11 FD BE                             ld		de,$BEFD
 350+ CF46 3E C0                                ld		a,$C0
 351+ CF48                                      MMUSelectLayer2
 351+ CF48 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF4C CD F6 E1                             call	l2_draw_box
 353+ CF4F 01 01 0A                             ld		bc,$0A01
 354+ CF52 11 C0 FE                             ld		de,$FEC0
 355+ CF55 CD 62 E2                             call	l2_draw_horz_line
 356+ CF58 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF5B CD BC CE                             call    draw_STAT_items
 358+ CF5E CD F3 CD                             call    draw_STAT_maintext
 359+ CF61 C9                                   ret
 360+ CF62
 361+ CF62              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF62              ; Handles all the input whilst in the market menu
 363+ CF62 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF64 CD 0D 92                             call    is_key_pressed
 365+ CF67 CC 73 CF                             call    z,STAT_UpPressed
 366+ CF6A 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF6C CD 0D 92                             call    is_key_pressed
 368+ CF6F CC 85 CF                             call    z,STAT_DownPressed
 369+ CF72 C9                                   ret
 370+ CF73
 371+ CF73              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CF73 AF           STAT_UpPressed:         xor     a
 373+ CF74 32 3A C0                             ld      (STAT_selected_row),a
 374+ CF77 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CF7A FE 00                                cp      0
 376+ CF7C C8                                   ret     z
 377+ CF7D 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CF7E 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CF81 CD BC CE                             call    draw_STAT_items
 380+ CF84 C9                                   ret
 381+ CF85              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CF85 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CF87 32 3A C0                             ld      (STAT_selected_row),a
 384+ CF8A 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CF8D 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CF8E 05                                   dec     b
 387+ CF8F 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CF92 B8                                   cp      b
 389+ CF93 C8                                   ret     z
 390+ CF94 FE 09                                cp      STAT_eqip_window_len-1
 391+ CF96 28 05                                jr      z, .check_scroll_down
 392+ CF98 21 3A C0                             ld      hl,STAT_selected_row
 393+ CF9B 34                                   inc     (hl)
 394+ CF9C C9                                   ret
 395+ CF9D 47           .check_scroll_down:     ld      b,a
 396+ CF9E 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFA1 80                                   add     b
 398+ CFA2 3C                                   inc     a
 399+ CFA3 21 3C C0                             ld      hl,STAT_current_end
 400+ CFA6                                      ReturnIfAGTEusng      (hl)
 400+ CFA6 BE          >				  cp    (hl)
 400+ CFA7 D0          >                  ret	 nc
 401+ CFA8 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFAB 34                                   inc     (hl)
 403+ CFAC CD BC CE                             call    draw_STAT_items
 404+ CFAF C9                                   ret
 405+ CFB0
# file closed: ./Menus/status_menu.asm
1014  CFB0
1015  CFB0              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1016  CFB0
1017  CFB0                  SLOT    MenuEquipSAddr
1018  CFB0                  PAGE    BankMenuEquipS
1019  CFB0                  ORG     MenuEquipSAddr
1020  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 44 A0  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD 80 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A A2 97     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A A0 97                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD 80 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 87 90                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 47 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c,.FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD 80 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 47 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 53 E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 3F E1     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 2C 94                             ld      (MenuIdMax),a
 380+ D40C 3A D8 94     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B CF 94                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A D8 94     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD BF 9F                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 0D 92                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 0D 92                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 0D 92                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 0D 92                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >				  cp    (hl)
 481+ D4EA D0          >                  ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A D8 94     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD EE A0                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 BB 97                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 A5 97     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD EE A0                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A D8 94     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 E0 94     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A A2 97     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A A0 97                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 BB 97     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 A4 97    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 E0 94     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 A5 97                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD EE A0                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 BB 97                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 BB 97     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 A5 97                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 01 A1                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1021  D651
1022  D651
1023  D651                  SLOT    LaunchShipAddr
1024  D651                  PAGE    BankLaunchShip
1025  D651                  ORG     LaunchShipAddr
1026  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 55 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 55 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 0B E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 0B E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD AD 90                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD AD 90                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 47 E0                             call    l1_cls
 129+ C180 CD 52 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 3F E1                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 160+ C1D7 32 31 94                             ld      (DockedFlag),a
 161+ C1DA                                      MaxThrottle
 161+ C1DA 3A 1B 94    >                        ld      a,(SHIPMAXSPEED)
 161+ C1DD 32 1C 94    >                        ld      (DELTA),a
 161+ C1E0 57          >                        ld      d,a
 161+ C1E1 1E 04       >                        ld      e,4
 161+ C1E3 ED 30       >                        mul
 161+ C1E5 ED 53 1D 94 >                        ld      (DELT4Lo),de
 162+ C1E9                                      ZeroThrottle; DEBUG
 162+ C1E9 AF          >                        xor     a
 162+ C1EA 32 1C 94    >                        ld      (DELTA),a
 162+ C1ED 32 1D 94    >                        ld      (DELT4Lo),a
 162+ C1F0 32 1E 94    >                        ld      (DELT4Lo+1),a
 163+ C1F3 C9                                   ret
 164+ C1F4
 165+ C1F4
 166+ C1F4              draw_docking_ship:      MMUSelectLayer1
 166+ C1F4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 167+ C1F8 CD 47 E0                             call    l1_cls
 168+ C1FB CD 52 E0                             call    l1_attr_cls
 169+ C1FE                                      MMUSelectSpriteBank
 169+ C1FE ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C202 CD 3F E1                             call    sprite_cls_cursors
 171+ C205                                      MMUSelectLayer2
 171+ C205 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 172+ C209 CD 02 E0                             call    asm_l2_double_buffer_on
 173+ C20C 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 174+ C20E 32 72 E0                             ld      (l2_cls_byte),a
 175+ C211 CD 92 E0                             call    l2_set_color_upper2
 176+ C214 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 177+ C216 32 72 E0                             ld      (l2_cls_byte),a
 178+ C219 CD BE E0                             call    l2_cls_lower_third
 179+ C21C CD 07 C1                             call    LaunchTubeEdges
 180+ C21F CD 5C C1                             call    LaunchConsole
 181+ C222              .NextBuffer:            MMUSelectLayer2
 181+ C222 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 182+ C226 CD DD E0                             call    l2_flip_buffers
 183+ C229 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 184+ C22B 32 72 E0                             ld      (l2_cls_byte),a
 185+ C22E CD 92 E0                             call    l2_set_color_upper2
 186+ C231 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 187+ C233 32 72 E0                             ld      (l2_cls_byte),a
 188+ C236 CD BE E0                             call    l2_cls_lower_third
 189+ C239 CD 07 C1                             call    LaunchTubeEdges
 190+ C23C CD 5C C1                             call    LaunchConsole
 191+ C23F 3E FF        .SetUpTimers:           ld      a,init_countdown
 192+ C241 32 00 C1                             ld      (launch_countdown),a
 193+ C244 21 87 C0                             ld      hl,dockingdraw_table
 194+ C247 22 03 C1                             ld      (docking_table_idx),hl
 195+ C24A AF                                   xor     a
 196+ C24B 32 05 C1                             ld      (current_offsetX),a
 197+ C24E 32 06 C1                             ld      (current_offsetY),a
 198+ C251 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 199+ C252                                      ZeroThrottle
 199+ C252 AF          >                        xor     a
 199+ C253 32 1C 94    >                        ld      (DELTA),a
 199+ C256 32 1D 94    >                        ld      (DELT4Lo),a
 199+ C259 32 1E 94    >                        ld      (DELT4Lo+1),a
 200+ C25C 3E FF                                ld      a,$FF
 201+ C25E 32 31 94                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 202+ C261 C9                                   ret
 203+ C262
 204+ C262 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 205+ C265 3E FF                                ld      a,init_countdown
 206+ C267 32 00 C1                             ld      (launch_countdown),a
 207+ C26A 2A 01 C1                             ld      hl,(launch_table_idx)
 208+ C26D 4E                                   ld      c,(hl)
 209+ C26E 79                                   ld      a,c
 210+ C26F FE FF                                cp      $FF
 211+ C271 28 1E                                jr      z,.FinishedLaunch
 212+ C273 23                                   inc     hl
 213+ C274 46                                   ld      b,(hl)                 ; bc = top left
 214+ C275 23                                   inc     hl
 215+ C276 5E                                   ld      e,(hl)
 216+ C277 23                                   inc     hl
 217+ C278 56                                   ld      d,(hl)                 ;de = width and height
 218+ C279 23                                   inc     hl
 219+ C27A 7E                                   ld      a,(hl)                 ; a = colour
 220+ C27B 23                                   inc     hl
 221+ C27C 22 01 C1                             ld      (launch_table_idx),hl
 222+ C27F 67                                   ld      h,a
 223+ C280 C5 D5                                push    bc,,de
 224+ C282                                      MMUSelectLayer2
 224+ C282 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 225+ C286 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 226+ C289 D1 C1                                pop     bc,,de
 227+ C28B 3E 80                                ld      a,$80
 228+ C28D CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 229+ C290 C9                                   ret
 230+ C291 3E 09        .FinishedLaunch:        ld      a,ScreenFront
 231+ C293 32 BE 83                             ld      (ScreenTransitionForced),a
 232+ C296 C9                                   ret
 233+ C297
 234+ C297 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 235+ C29A 3E FF                                ld      a,init_countdown
 236+ C29C 32 00 C1                             ld      (launch_countdown),a
 237+ C29F 2A 03 C1                             ld      hl,(docking_table_idx)
 238+ C2A2 4E                                   ld      c,(hl)
 239+ C2A3 79                                   ld      a,c
 240+ C2A4 FE FF                                cp      $FF
 241+ C2A6 28 1E                                jr      z,.FinishedDocking
 242+ C2A8 23                                   inc     hl
 243+ C2A9 46                                   ld      b,(hl)                 ; bc = top left
 244+ C2AA 23                                   inc     hl
 245+ C2AB 5E                                   ld      e,(hl)
 246+ C2AC 23                                   inc     hl
 247+ C2AD 56                                   ld      d,(hl)                 ;de = width and height
 248+ C2AE 23                                   inc     hl
 249+ C2AF 7E                                   ld      a,(hl)
 250+ C2B0 23                                   inc     hl
 251+ C2B1 22 03 C1                             ld      (docking_table_idx),hl
 252+ C2B4 67                                   ld      h,a
 253+ C2B5 C5 D5                                push    bc,,de
 254+ C2B7                                      MMUSelectLayer2
 254+ C2B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 255+ C2BB CD E6 E1                             call    l2_draw_fill_box
 256+ C2BE D1 C1                                pop     bc,,de
 257+ C2C0 3E 80                                ld      a,$80
 258+ C2C2 CD F6 E1                             call    l2_draw_box
 259+ C2C5 C9                                   ret
 260+ C2C6 3E 04        .FinishedDocking        ld      a,ScreenStatus              ; Force move to status screen
 261+ C2C8 32 BE 83                             ld      (ScreenTransitionForced),a
 262+ C2CB C9                                   ret
 263+ C2CC
 264+ C2CC
 265+ C2CC
# file closed: ./Transitions/launch_ship.asm
1027  C2CC
1028  C2CC              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1029  C2CC                  SLOT    UniverseBankAddr
1030  C2CC                  PAGE    BankUNIVDATA0
1031  C2CC              	ORG	    UniverseBankAddr,BankUNIVDATA0
1032  C000                  INCLUDE "./Universe/univ_ship_data.asm"
# file opened: ./Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   8+ C000              ; This means each gets its own line list, inwork etc
   9+ C000
  10+ C000              ; "Runtime Ship Data paged into in Bank 7"
  11+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  11+ C004 65 72 73 65
  11+ C008 20 50 47
  12+ C00B              ; NOTE we can cheat and pre allocate segs just using a DS for now
  13+ C00B
  14+ C00B              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  15+ C00B              ; Universe map substibute for INWK
  16+ C00B              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  17+ C00B                                      INCLUDE "./Variables/ShipPosVars.asm"
# file opened: ././Variables/ShipPosVars.asm
   1++C00B              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00B 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00C 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00D 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00E 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C00F 00           UbnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C010 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C011 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C012 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C013 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C014
  12++C014              INWKxlo                     equ UBnKxlo
  13++C014              INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  14++C014              INWKxsgn                    equ UBnKzsgn                ; INWK+2
  15++C014              INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  16++C014              INWKyhi                     equ UbnKyhi                 ; Y Hi???
  17++C014              INWKysgn                    equ UBnKysgn                ; INWK +5
  18++C014              INWKzlo                     equ UBnKzlo                 ; INWK +6
  19++C014              INWKzhi                     equ UBnKzhi                 ; INWK +7
  20++C014              INWKzsgn                    equ UBnKzsgn                ; INWK +8
# file closed: ././Variables/ShipPosVars.asm
  18+ C014                                      INCLUDE "./Variables/RotationMatrixVars.asm"
# file opened: ././Variables/RotationMatrixVars.asm
   1++C014              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C014              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C014 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
   4++C016              UBnkrotmatSidev             equ UBnkrotmatSidevX
   5++C016 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
   6++C018 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
   7++C01A 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
   8++C01C              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
   9++C01C 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  10++C01E 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  11++C020 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  12++C022              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  13++C022 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  14++C024 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  15++C026
# file closed: ././Variables/RotationMatrixVars.asm
  19+ C026                                      INCLUDE "./Variables/AIRuntimeData.asm"
# file opened: ././Variables/AIRuntimeData.asm
   1++C026              ; -- Ship AI data
   2++C026
   3++C026 00           UBnkspeed                   DB  0                       ; INWK +27
   4++C027 00           UBnkAccel                   DB  0                       ; INWK +28
   5++C028 00           UBnkrotXCounter             DB  0                       ; INWK +29
   6++C029 00           UBnkrotZCounter             DB  0                       ; INWK +30
   7++C02A 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
   8++C02B              ; Flags work as follows:
   9++C02B              ; 7 - Flag ship to be killed with debris
  10++C02B              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  11++C02B              ; 5 - Ship is exploding if set
  12++C02B              ; 4 -
  13++C02B              ; 3 - Display state - Plot as a Dot
  14++C02B              ; 2 - Nbr of Missiles bit 2
  15++C02B              ; 1 - Nbr of Missiles bit 1
  16++C02B              ; 0 - Nbr of Missiles bit 0
  17++C02B 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  18++C02C 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  19++C02D 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  20++C02E 00           UbnKEnergy                  DB  0                       ; INWK +35
  21++C02F              ; Flags work as follows:
  22++C02F              ;Bit	Description
  23++C02F              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  24++C02F              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  25++C02F              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  26++C02F              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  27++C02F              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  28++C02F              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  29++C02F              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  30++C02F              ;                       Hostile ships will attack us on sight; there are quite a few of them
  31++C02F              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  32++C02F              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  33++C02F              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  34++C02F              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  35++C02F              ;#4	Docking flag        * 0 = not docking * 1 = docking
  36++C02F              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  37++C02F              ;                       This flag is randomly set for traders when they are spawned
  38++C02F              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  39++C02F              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  40++C02F              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  41++C02F              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  42++C02F              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  43++C02F              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  44++C02F              ;                       Ships that are cops: Viper, Transporter
  45++C02F              ;#7	Scooped, docked, escape pod flag
  46++C02F              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  47++C02F              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  48++C02F              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  49++C02F
# file closed: ././Variables/AIRuntimeData.asm
  20+ C02F
  21+ C02F              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  22+ C02F              ;                    [roofv x y z ] roof vector (up)
  23+ C02F              ;                    [sidev x y z ] side vector (right)
  24+ C02F              ;INWKspeed                   equ UBnkspeed               ; INWK +27UBnkTransmat2zLo  DB  0               ; XX16+16
  25+ C02F              ;INWKAccel                   equ UBnkAccel               ; INWK +28          UBnkTransmat2zHi    DB  0               ; XX16+17
  26+ C02F              rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  27+ C02F              rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  28+ C02F              ;--explDsp                     equ UBnkexplDsp             ; INWK +31 clear exploding/display state|missiles UBnkDrawCam0xHi   DB  0               ; XX18+1
  29+ C02F              ;--aiatkecm                    equ UBnkaiatkecm            ; INWK +32 ai_attack_univ_ecm i.e. AI typeUBnkDrawCam0xSgn      DB  0               ; XX18+2
  30+ C02F              ;INWKDrawCam0yLo             equ UBnkDrawCam0yLo         ; INWK +33UBnkDrawCam0yLo   DB  0               ; XX18+3
  31+ C02F              ;INWKDrawCam0yHi             equ UBnkDrawCam0yHi         ; INWK +34UBnkDrawCam0yHi   DB  0               ; XX18+4
  32+ C02F              ;INWKEnergy                  equ UbnKEnergy              ; INWK +35UBnkDrawCam0ySgn      DB  0               ; XX18+5
  33+ C02F              ;UBnkDrawCam0ySgn    equ UbnKEnergy              ; Reycles but not a good idea TODO
  34+ C02F              ;INWKNewb                    equ UbnKNewb                ; INWK +36 INWK+36 \ NEWB bit 7 remove ship?UBnkDrawCam0zLo     DB  0               ; XX18+6
  35+ C02F                                      INCLUDE "./Variables/XX16Vars.asm"
# file opened: ././Variables/XX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C031 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        UBnkTransmatRoofvX          DW 0
   7++C037              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C037 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        UBnkTransmatNosevX          DW 0
  11++C03D              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C03D 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        UbnkTransmatTransX          DW 0
  15++C043 00 00        UbnkTransmatTransY          DW 0
  16++C045 00 00        UbnkTransmatTransZ          DW 0
  17++C047              XX16                        equ UBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        UbnkTransInvRow0x0          DW 0
  20++C049 00 00        UbnkTransInvRow0x1          DW 0
  21++C04B 00 00        UbnkTransInvRow0x2          DW 0
  22++C04D 00 00        UbnkTransInvRow0x3          DW 0
  23++C04F 00 00        UbnkTransInvRow1y0          DW 0
  24++C051 00 00        UbnkTransInvRow1y1          DW 0
  25++C053 00 00        UbnkTransInvRow1y2          DW 0
  26++C055 00 00        UbnkTransInvRow1y3          DW 0
  27++C057 00 00        UbnkTransInvRow2z0          DW 0
  28++C059 00 00        UbnkTransInvRow2z1          DW 0
  29++C05B 00 00        UbnkTransInvRow2z2          DW 0
  30++C05D 00 00        UbnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              XX16Inv             equ UbnkTransInvRow0x0
  33++C05F
# file closed: ././Variables/XX16Vars.asm
  36+ C05F                                      INCLUDE "./Variables/XX25Vars.asm"
# file opened: ././Variables/XX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           UbnkProjxLo                 DB  0
   3++C060 00           UbnkProjxHi                 DB  0
   4++C061 00           UbnkProjxSgn                DB  0
   5++C062              UbnkProjx                   EQU UbnkProjxLo
   6++C062 00           UbnkProjyLo                 DB  0
   7++C063 00           UbnkProjyHi                 DB  0
   8++C064 00           UbnkProjySgn                DB  0
   9++C065              UbnkProjy                   EQU UbnkProjyLo
  10++C065 00           UbnkProjzLo                 DB  0
  11++C066 00           UbnkProjzHi                 DB  0
  12++C067 00           UbnkProjzSgn                DB  0
  13++C068              UbnkProjz                   EQU UbnkProjzLo
  14++C068              XX25                        EQU UbnkProjxLo
  15++C068
# file closed: ././Variables/XX25Vars.asm
  37+ C068                                      INCLUDE "./Variables/XX18Vars.asm"
# file opened: ././Variables/XX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C06B 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C06E 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C071              XX18                        equ UBnkDrawCam0xLo
  15++C071
# file closed: ././Variables/XX18Vars.asm
  38+ C071
  39+ C071              ; Used to make 16 bit reads a little cleaner in source code
  40+ C071 00 00 00     UbnkZPoint                  DS  3
  41+ C074              UbnkZPointLo                equ UbnkZPoint
  42+ C074              UbnkZPointHi                equ UbnkZPoint+1
  43+ C074              UbnkZPointSign              equ UbnkZPoint+2
  44+ C074                                      INCLUDE "./Variables/XX15Vars.asm"
# file opened: ././Variables/XX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              XX15                        equ UBnkXScaled
  10++C07A              XX15VecX                    equ XX15
  11++C07A              XX15VecY                    equ XX15+1
  12++C07A              XX15VecZ                    equ XX15+2
  13++C07A              UbnkXPoint                  equ XX15
  14++C07A              UbnkXPointLo                equ XX15+0
  15++C07A              UbnkXPointHi                equ XX15+1
  16++C07A              UbnkXPointSign              equ XX15+2
  17++C07A              UbnkYPoint                  equ XX15+3
  18++C07A              UbnkYPointLo                equ XX15+3
  19++C07A              UbnkYPointHi                equ XX15+4
  20++C07A              UbnkYPointSign              equ XX15+5
  21++C07A              ; Repurposed XX15 pre clip plines
  22++C07A              UbnkPreClipX1               equ XX15+0
  23++C07A              UbnkPreClipY1               equ XX15+2
  24++C07A              UbnkPreClipX2               equ XX15+4
  25++C07A              UbnkPreClipY2               equ XX15+6
  26++C07A              ; Repurposed XX15 post clip lines
  27++C07A              UBnkNewX1                   equ XX15+0
  28++C07A              UBnkNewY1                   equ XX15+1
  29++C07A              UBnkNewX2                   equ XX15+2
  30++C07A              UBnkNewY2                   equ XX15+3
  31++C07A              ; Repurposed XX15
  32++C07A              regXX15fx                   equ UBnkXScaled
  33++C07A              regXX15fxSgn                equ UBnkXScaledSign
  34++C07A              regXX15fy                   equ UBnkYScaled
  35++C07A              regXX15fySgn                equ UBnkYScaledSign
  36++C07A              regXX15fz                   equ UBnkZScaled
  37++C07A              regXX15fzSgn                equ UBnkZScaledSign
  38++C07A              ; Repurposed XX15
  39++C07A              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C07A              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C07A              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C07A              ; After clipping the coords are two 8 bit pairs
  43++C07A              UBnkPoint1Clipped           equ UBnkXScaled
  44++C07A              UBnkPoint2Clipped           equ UBnkYScaled
  45++C07A              ; Repurposed XX15 when plotting lines
  46++C07A              ; Repurposed XX15 before calling clip routine
  47++C07A              UBnkX1                      equ XX15
  48++C07A              UBnKx1Lo                    equ XX15
  49++C07A              UBnKx1Hi                    equ XX15+1
  50++C07A              UBnkY1                      equ XX15+2
  51++C07A              UbnKy1Lo                    equ XX15+2
  52++C07A              UBnkY1Hi                    equ XX15+3
  53++C07A              UBnkX2                      equ XX15+4
  54++C07A              UBnkX2Lo                    equ XX15+4
  55++C07A              UBnkX2Hi                    equ XX15+5
  56++C07A
# file closed: ././Variables/XX15Vars.asm
  45+ C07A                                      INCLUDE "./Variables/XX12Vars.asm"
# file opened: ././Variables/XX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C07C 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C07E 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  XX12Save                    DS  6
  10++C086 00 00 00...  XX12Save2                   DS  6
  11++C08C              XX12                        equ UBnkXX12xLo
  12++C08C              varXX12                     equ UBnkXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              UBnkY2                      equ XX12+0
  15++C08C              UbnKy2Lo                    equ XX12+0
  16++C08C              UBnkY2Hi                    equ XX12+1
  17++C08C              UBnkDeltaXLo                equ XX12+2
  18++C08C              UBnkDeltaXHi                equ XX12+3
  19++C08C              UBnkDeltaYLo                equ XX12+4
  20++C08C              UBnkDeltaYHi                equ XX12+5
  21++C08C              UbnkGradient                equ XX12+2
  22++C08C              UBnkTemp1                   equ XX12+2
  23++C08C              UBnkTemp1Lo                 equ XX12+2
  24++C08C              UBnkTemp1Hi                 equ XX12+3
  25++C08C              UBnkTemp2                   equ XX12+3
  26++C08C              UBnkTemp2Lo                 equ XX12+3
  27++C08C              UBnkTemp2Hi                 equ XX12+4
  28++C08C
# file closed: ././Variables/XX12Vars.asm
  46+ C08C
  47+ C08C
  48+ C08C              ; Post clipping the results are now 8 bit
  49+ C08C 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  50+ C08D
  51+ C08D 00           UBnkProjectedY              DB  0
  52+ C08E 00           UBnkProjectedX              DB  0
  53+ C08F              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  54+ C08F 00 00 00...  XX15Save                    DS  8
  55+ C097 00 00 00...  XX15Save2                   DS  8
  56+ C09F 00           VarBackface                 DB 0
  57+ C0A0              ; Heap (or array) information for lines and normals
  58+ C0A0              ; Coords are stored XY,XY,XY,XY
  59+ C0A0              ; Normals
  60+ C0A0              ; This needs re-oprganising now.
  61+ C0A0              ; Runtime Calculation Store
  62+ C0A0
  63+ C0A0              FaceArraySize               equ 30
  64+ C0A0              EdgeHeapSize                equ 40
  65+ C0A0              NodeArraySize               equ 40
  66+ C0A0              LineArraySize               equ 50
  67+ C0A0              ; Storage arrays for data
  68+ C0A0              ; Structure of arrays
  69+ C0A0              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  70+ C0A0              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  71+ C0A0              ; NodeArray         -  4 bytes per element      0           1            2          3
  72+ C0A0              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  73+ C0A0              ; Line Array        -  4 bytes per eleement     0           1            2          3
  74+ C0A0              ;                                               X1          Y1           X2         Y2
  75+ C0A0 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  76+ C0BE 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  77+ C15E 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  78+ C1FE 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  79+ C2C6              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  80+ C2C6 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  81+ C2EE              ; Array current Lengths
  82+ C2EE 00           UbnkFaceVisArrayLen         DS 1
  83+ C2EF 00           UBnkNodeArrayLen            DS 1
  84+ C2F0 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  85+ C2F1 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  86+ C2F2              XX20                        equ UbnkLineArrayLen
  87+ C2F2              varXX20                     equ UbnkLineArrayLen
  88+ C2F2
  89+ C2F2
  90+ C2F2 00           UbnkEdgeHeapSize            DS 1
  91+ C2F3 00           UbnkEdgeHeapBytes           DS 1
  92+ C2F4 00           UBnkLinesHeapLen            DS 1
  93+ C2F5 00           UbnKEdgeHeapCounter         DS 1
  94+ C2F6 00           UbnKEdgeRadius              DS 1
  95+ C2F7 00           UbnKEdgeShipType            DS 1
  96+ C2F8 00           UbnKEdgeExplosionType       DS 1
  97+ C2F9
  98+ C2F9              ; Node heap is used to write out transformed Vertexs
  99+ C2F9
 100+ C2F9              ; Lines
 101+ C2F9 00 00 00     UBnkXX19                    DS  3
 102+ C2FC
 103+ C2FC
 104+ C2FC              ; Used to make 16 bit reads a little cleaner in source code
 105+ C2FC
 106+ C2FC              ;rotmatFx            equ rotmat0xHi
 107+ C2FC              ;rotmatFy            equ rotmat0yHi
 108+ C2FC              ;rotmatFz            equ rotmat0zHi
 109+ C2FC              ;rotmatUx            equ rotmat1xHi
 110+ C2FC              ;rotmatUy            equ rotmat1yHi
 111+ C2FC              ;rotmatUz            equ rotmat1zHi
 112+ C2FC
 113+ C2FC 00           UBnkShipModelBank           DB  0
 114+ C2FD 00           UBnkShipModelNbr            DB  0
 115+ C2FE 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 116+ C316              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 117+ C316              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 118+ C316              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 119+ C316              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 120+ C316              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 121+ C316              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 122+ C316              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 123+ C316              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 124+ C316              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 125+ C316              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 126+ C316              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 127+ C316              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 128+ C316              DotAddr                     equ UBnkHullCopy + DotOffset
 129+ C316              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 130+ C316              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 131+ C316              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 132+ C316              QAddr                       equ UBnkHullCopy + QOffset
 133+ C316              LaserAddr                   equ UBnkHullCopy + LaserOffset
 134+ C316              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 135+ C316              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 136+ C316              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 137+ C316              ; Static Ship Data. This is copied in when creating the universe object
 138+ C316              XX0                         equ UBnkHullCopy        ; general hull index pointer
 139+ C316 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 140+ C442 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 141+ C8F2 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 142+ CA1E 0C           OrthagCountdown             DB  12
 143+ CA1F
 144+ CA1F              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 145+ CA1F              UBnk_Data_len               EQU $ - StartOfUniv
 146+ CA1F
 147+ CA1F
 148+ CA1F 47           RequAby256DivQOLD:      ld      b,a ;.LL28  BFRDIV R=A*256/Q   byte from remainder of division
 149+ CA20 3A 20 94                             ld      a,(varQ)
 150+ CA23 4F                                   ld      c,a
 151+ CA24 78                                   ld      a,b
 152+ CA25
 153+ CA25
 154+ CA25 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 155+ CA28 11 1F 0A                             ld      de,UBnk_Data_len
 156+ CA2B AF                                   xor     a
 157+ CA2C CD 87 90                             call    memfill_dma
 158+ CA2F C9                                   ret
 159+ CA30
 160+ CA30              ;divdide by 16 using undocumented instrunctions
 161+ CA30              ;Input: BC = Dividend, DE = Divisor, HL = 0
 162+ CA30              ;Output: BC = Quotient, HL = Remainder
 163+ CA30 47           PROJ256mulAdivQ:        ld      b,a
 164+ CA31 0E 00                                ld      c,0
 165+ CA33 16 00                                ld      d,0
 166+ CA35 3A 20 94                             ld      a,(varQ)
 167+ CA38 5F                                   ld      e,a
 168+ CA39 21 00 00     PROJDIV16UNDOC:         ld      hl,0
 169+ CA3C 78                                   ld      a,b
 170+ CA3D 06 10                                ld      b,16
 171+ CA3F CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
 172+ CA41 17                                   rla             ; ...
 173+ CA42 ED 6A                                adc     hl,hl       ; ...
 174+ CA44 ED 52                                sbc     hl,de       ; ...
 175+ CA46 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
 176+ CA48 19                                   add     hl,de       ; ...
 177+ CA49 0D                                   dec     c       ; ...
 178+ CA4A 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
 179+ CA4C 79                                   ld      a,c
 180+ CA4D 32 21 94                             ld      (varR),a
 181+ CA50 C9                                   ret
 182+ CA51              ;
 183+ CA51                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 184+ CA51              ;Output: BC = Quotient, HL = Remainder
 185+ CA51
 186+ CA51              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 187+ CA51              ;OUTPUTS:   cahl = quotient cde = divisor
 188+ CA51 32 C7 93     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 189+ CA54                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 189+ CA54 2A 11 C0    >               ld       hl,(UBnKzlo)
 189+ CA57 22 20 94    >               ld       (varQ),hl
 190+ CA5A 3A 13 C0                             ld      a,(UBnKzsgn)                    ;
 191+ CA5D 32 22 94                             ld      (varS),a                        ; S = inkw z sign
 192+ CA60 ED 5B C5 93  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 193+ CA64 7B                                   ld      a,e                             ; num lo
 194+ CA65 F6 01                                or      1                               ; must be at least 1
 195+ CA67 32 C5 93                             ld      (varP),a                        ; store
 196+ CA6A 5F                                   ld      e,a                             ; update DE too
 197+ CA6B 3A C7 93                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 198+ CA6E 21 22 94                             ld      hl,varS                         ; hl = address of VarS
 199+ CA71 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 200+ CA72 E6 80                                and     $80                             ;
 201+ CA74 32 40 94                             ld      (varT),a                        ; T = Sign bit of A
 202+ CA77 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 203+ CA7A 3A C7 93                             ld      a,(varPhi2)                     ;
 204+ CA7D E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 205+ CA7F              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 205+ CA7F FE 40       >                        cp     $40
 205+ CA81 D2 8F CA    >                        jp		nc,DV14
 206+ CA84                                      ShiftDELeft1                            ; de (or P,P1) > 1
 206+ CA84 CB 23       >			   sla e
 206+ CA86 CB 12       >			   rl  d
 207+ CA88 CB 17                                rl      a                               ; and accumulator as 3rd byte
 208+ CA8A FD 2C                                inc     iyl
 209+ CA8C C2 7F CA                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 210+ CA8F 32 C7 93     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 211+ CA92 ED 53 C5 93                          ld      (varP),de                       ; store off the value so far
 212+ CA96 3A 22 94                             ld      a,(varS)                        ; zsign
 213+ CA99 E6 7F                                and     $7F                             ; denom sg7
 214+ CA9B                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 215+ CA9B 2A 20 94                             ld      hl,(varQ)                       ; demon lo
 216+ CA9E FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 217+ CAA0                                      ShiftHLLeft1
 217+ CAA0 CB 25       >			   sla l
 217+ CAA2 CB 14       >			   rl  h
 218+ CAA4 CB 17                                rl      a                               ; mulitply QRS by 2
 219+ CAA6 F2 9E CA                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 220+ CAA9 22 20 94     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 221+ CAAC 32 20 94                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 222+ CAAF 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 223+ CAB1 32 21 94                             ld      (varR),a                        ;  R
 224+ CAB4 3A C7 93                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 225+ CAB7 CD 30 CA                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 226+ CABA 3E 00                                ld      a,0
 227+ CABC 32 38 94                             ld      (varKp1),a
 228+ CABF 32 39 94                             ld      (varKp2),a
 229+ CAC2 32 3A 94                             ld      (varKp3),a                      ; clear out K+1 to K+3
 230+ CAC5 FD 7D                                ld      a,iyl                           ; Y counter for scale
 231+ CAC7                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 231+ CAC7 CB 7F       >                        bit 	7,a
 231+ CAC9 CA F4 CA    >                        jp      z,DV12
 232+ CACC 3A 21 94                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 233+ CACF ED 5B 37 94                          ld      de,(varK)                       ; d= k1
 234+ CAD3 2A 3B 94                             ld      hl,(varK2)                      ; h = k3, l = k2
 235+ CAD6 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 236+ CAD7 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 237+ CAD9 CB 12                                rl      d                               ; k1
 238+ CADB CB 15                                rl      l                               ; k2
 239+ CADD CB 14                                rl      h                               ; k3
 240+ CADF FD 2C                                inc     iyl
 241+ CAE1 20 F4                                jr      nz,DVL8                         ;
 242+ CAE3 ED 53 37 94  DVL8Save:               ld      (varK),de
 243+ CAE7 22 3B 94                             ld      (varK2),hl                      ; save back K0 to k3
 244+ CAEA 3A 40 94                             ld      a,(varT)
 245+ CAED 4F                                   ld      c,a                             ; get varT into c reg
 246+ CAEE 7C                                   ld      a,h                             ; a= k3 (sign)
 247+ CAEF B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 248+ CAF0 32 4A 94                             ld      (varK3),a                       ; load sign bit back into K3
 249+ CAF3 C9                                   ret
 250+ CAF4              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 250+ CAF4 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
 250+ CAF5 CA 0C CB    >				jp	z,DV13
 251+ CAF8 3A 21 94                             ld      a,(varR)                        ; Reduce Remainder
 252+ CAFB CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 253+ CAFD FD 2D                                dec     iyl
 254+ CAFF C2 FB CA                             jp      nz,DVL10                        ; loop y reduce until y is zero
 255+ CB02 32 37 94                             ld      (varK),a                        ; k Lo
 256+ CB05                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 256+ CB05 3A 40 94    >               ld       a,(varT)
 256+ CB08 32 3A 94    >               ld       (varKp3),a
 257+ CB0B C9                                   ret
 258+ CB0C              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 258+ CB0C 3A 21 94    >               ld       a,(varR)
 258+ CB0F 32 37 94    >               ld       (varK),a
 259+ CB12                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 259+ CB12 3A 40 94    >               ld       a,(varT)
 259+ CB15 32 3A 94    >               ld       (varKp3),a
 260+ CB18 C9                                   ret
 261+ CB19
 262+ CB19
 263+ CB19 CD 51 CA     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 264+ CB1C 3A 3A 94                             ld      a,(varKp3)
 265+ CB1F E6 7F                                and     $7F
 266+ CB21 21 39 94                             ld      hl,varKp2
 267+ CB24 B6                                   or      (hl)
 268+ CB25 C2 3A CB                             jp      nz,PL44TooBig
 269+ CB28 3A 38 94                             ld      a,(varKp1)
 270+ CB2B FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 271+ CB2D 30 0B                                jr      nc,PL44TooBig
 272+ CB2F                                      ClearCarryFlag                          ; we have a good result regardless
 272+ CB2F B7          >                        or a
 273+ CB30 2A 37 94                             ld      hl,(varK)                       ; get K (0 1)
 274+ CB33 3A 3A 94                             ld      a,(varKp3)                      ; if sign bit high?
 275+ CB36 CB 7F                                bit     7,a
 276+ CB38 C8                                   ret     z                               ; no so we can just return
 277+ CB39 C9           PL44:                   ret
 278+ CB3A 37           PL44TooBig:             scf
 279+ CB3B C9                                   ret
 280+ CB3C
 281+ CB3C                                      include "./Maths/ADDHLDESignBC.asm"
# file opened: ././Maths/ADDHLDESignBC.asm
   1++CB3C              ;; calcs HLB + DEC where B and C are signs
   2++CB3C              ;; result HL with A as sign
   3++CB3C              ;; special handling if result is zero forcign sign bit to be zero
   4++CB3C 78           ADDHLDESignBC:          ld      a,b
   5++CB3D E6 80                                and     SignOnly8Bit
   6++CB3F A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7++CB40                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7++CB40 FA 4E CB    >                        jp		m, ADDHLDEsBCOppSGN
   8++CB43 78           ADDHLDEsBCSameSigns:    ld      a,b
   9++CB44 B1                                   or      c
  10++CB45                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10++CB45 FA 4A CB    >                        jp		m, ADDHLDEsBCSameNeg
  11++CB48 19                                   add     hl,de                       ; both positive so a will already be zero
  12++CB49 C9                                   ret
  13++CB4A 19           ADDHLDEsBCSameNeg:      add     hl,de
  14++CB4B 78                                   ld      a,b
  15++CB4C B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16++CB4D C9                                   ret
  17++CB4E B7           ADDHLDEsBCOppSGN:       or      a
  18++CB4F ED 52                                sbc     hl,de
  19++CB51 38 02                                jr      c,ADDHLDEsBCOppInvert
  20++CB53 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21++CB54 C9                                   ret
  22++CB55              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22++CB55 AF          >                xor a
  22++CB56 95          >                sub l
  22++CB57 6F          >                ld l,a
  22++CB58 9F          >                sbc a,a
  22++CB59 94          >                sub h
  22++CB5A 67          >                ld h,a
  23++CB5B 78                                   ld      a,b
  24++CB5C EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25++CB5E C9                                   ret
  26++CB5F
# file closed: ././Maths/ADDHLDESignBC.asm
 282+ CB5F
 283+ CB5F 7C           ADDHLDESignedv3:        ld      a,h
 284+ CB60 E6 80                                and     SignOnly8Bit
 285+ CB62 47                                   ld      b,a                         ;save sign bit in b
 286+ CB63 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 287+ CB64                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 287+ CB64 FA 7C CB    >                        jp		m, ADDHLDEOppSGN
 288+ CB67 78           ADDHLDESameSigns:       ld      a,b
 289+ CB68 B2                                   or      d
 290+ CB69                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 290+ CB69 FA 6E CB    >                        jp		m, ADDHLDESameNeg
 291+ CB6C 19                                   add     hl,de
 292+ CB6D C9                                   ret
 293+ CB6E 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 294+ CB6F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 295+ CB71 67                                   ld      h,a
 296+ CB72 7A                                   ld      a,d
 297+ CB73 E6 7F                                and     SignMask8Bit
 298+ CB75 57                                   ld      d,a
 299+ CB76 19                                   add     hl,de
 300+ CB77 3E 80                                ld      a,SignOnly8Bit
 301+ CB79 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 302+ CB7A 67                                   ld      h,a
 303+ CB7B C9                                   ret
 304+ CB7C 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 305+ CB7D E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 306+ CB7F 67                                   ld      h,a
 307+ CB80 7A                                   ld      a,d
 308+ CB81 E6 7F                                and     SignMask8Bit
 309+ CB83 57                                   ld      d,a
 310+ CB84 B7                                   or      a
 311+ CB85 ED 52                                sbc     hl,de
 312+ CB87 38 04                                jr      c,ADDHLDEOppInvert
 313+ CB89 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 314+ CB8A B4                                   or      h
 315+ CB8B 67                                   ld      h,a                         ; set the previou sign value
 316+ CB8C C9                                   ret
 317+ CB8D              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 317+ CB8D AF          >                xor a
 317+ CB8E 95          >                sub l
 317+ CB8F 6F          >                ld l,a
 317+ CB90 9F          >                sbc a,a
 317+ CB91 94          >                sub h
 317+ CB92 67          >                ld h,a
 318+ CB93 78                                   ld      a,b
 319+ CB94 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 320+ CB96 B4                                   or      h
 321+ CB97 67                                   ld      h,a                         ; recover sign
 322+ CB98 C9                                   ret
 323+ CB99
 324+ CB99              ; we could cheat, flip the sign of DE and just add but its not very optimised
 325+ CB99 7C           SUBHLDESignedv3:        ld      a,h
 326+ CB9A E6 80                                and     SignOnly8Bit
 327+ CB9C 47                                   ld      b,a                         ;save sign bit in b
 328+ CB9D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 329+ CB9E                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 329+ CB9E FA CC CB    >                        jp		m, SUBHLDEOppSGN
 330+ CBA1 78           SUBHLDESameSigns:       ld      a,b
 331+ CBA2 B2                                   or      d
 332+ CBA3                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 332+ CBA3 FA AD CB    >                        jp		m, SUBHLDESameNeg
 333+ CBA6 B7                                   or      a
 334+ CBA7 ED 52                                sbc     hl,de
 335+ CBA9                                      JumpIfNegative SUBHLDESameOvrFlw
 335+ CBA9 FA C0 CB    >                        jp		m, SUBHLDESameOvrFlw
 336+ CBAC C9                                   ret
 337+ CBAD 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 338+ CBAE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 339+ CBB0 67                                   ld      h,a
 340+ CBB1 7A                                   ld      a,d
 341+ CBB2 E6 7F                                and     SignMask8Bit
 342+ CBB4 57                                   ld      d,a
 343+ CBB5 B7                                   or      a
 344+ CBB6 ED 52                                sbc     hl,de
 345+ CBB8                                      JumpIfNegative SUBHLDESameOvrFlw
 345+ CBB8 FA C0 CB    >                        jp		m, SUBHLDESameOvrFlw
 346+ CBBB 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 347+ CBBC F6 80                                or      SignOnly8Bit
 348+ CBBE 67                                   ld      h,a
 349+ CBBF C9                                   ret
 350+ CBC0              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 350+ CBC0 AF          >                xor a
 350+ CBC1 95          >                sub l
 350+ CBC2 6F          >                ld l,a
 350+ CBC3 9F          >                sbc a,a
 350+ CBC4 94          >                sub h
 350+ CBC5 67          >                ld h,a
 351+ CBC6 78                                   ld      a,b
 352+ CBC7 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 353+ CBC9 B4                                   or      h
 354+ CBCA 67                                   ld      h,a                         ; recover sign
 355+ CBCB C9                                   ret
 356+ CBCC B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 357+ CBCD 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 358+ CBCE E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 359+ CBD0 67                                   ld      h,a
 360+ CBD1 7A                                   ld      a,d
 361+ CBD2 E6 7F                                and     SignMask8Bit
 362+ CBD4 57                                   ld      d,a
 363+ CBD5 19                                   add     hl,de
 364+ CBD6 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 365+ CBD7 B4                                   or      h
 366+ CBD8 67                                   ld      h,a                         ; set the previou sign value
 367+ CBD9 C9                                   ret
 368+ CBDA
 369+ CBDA
 370+ CBDA              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 370+ CBDA CB 7C       >                        bit 	7,h
 370+ CBDC C2 ED CB    >                        jp      nz,SBCHLDEhlNeg
 371+ CBDF              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 371+ CBDF CB 7C       >                        bit 	7,h
 371+ CBE1 C2 ED CB    >                        jp      nz,SBCHLDEhlNeg
 372+ CBE4 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 373+ CBE6 C9                                   ret
 374+ CBE7 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 375+ CBE9 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 376+ CBEA CB FA                                set     7,d
 377+ CBEC C9                                   ret
 378+ CBED CB BC        SBCHLDEhlNeg:           res     7,h
 379+ CBEF                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 379+ CBEF CB 7A       >                        bit 	7,d
 379+ CBF1 C2 F9 CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 380+ CBF4 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 381+ CBF6 CB FC                                set     7,h
 382+ CBF8 C9                                   ret
 383+ CBF9 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 384+ CBFB 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 385+ CBFC CB FA                                set     7,d
 386+ CBFE CB FC                                set     7,h
 387+ CC00 C9                                   ret
 388+ CC01
 389+ CC01              ; Roate around axis
 390+ CC01              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 391+ CC01              ; so the axis x1 points to roofv  x , y or z
 392+ CC01              ;             x2           nosev or sidev  x, y or z
 393+ CC01              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 394+ CC01              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 395+ CC01              ; var RAT2 gives direction
 396+ CC01              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 397+ CC01              ;-Set up S R -----------------------------------------
 398+ CC01              ; optimised we don't deal with sign here just the value of roof axis / 512
 399+ CC01 2A AE 93     MVS5XRotateXAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 400+ CC04 5E                                   ld      e,(hl)
 401+ CC05 23                                   inc     hl
 402+ CC06 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 403+ CC07 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 404+ CC08 7C                                   ld      a,h
 405+ CC09 E6 80                                and     SignOnly8Bit
 406+ CC0B FD 67                                ld      iyh,a           ; iyh = sign Axis1
 407+ CC0D 7C                                   ld      a,h
 408+ CC0E E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 409+ CC10 CB 3F                                srl     a               ; a = Axis1/2
 410+ CC12 5F                                   ld      e,a             ;
 411+ CC13 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 412+ CC15 57                                   ld      d,a             ; de = signed Axis1 / 512
 413+ CC16 B7                                   or      a               ; clear carry
 414+ CC17 CD 99 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 415+ CC1A              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 416+ CC1A E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 417+ CC1B 7D                                   ld      a,l
 418+ CC1C 32 21 94                             ld      (varR),a
 419+ CC1F 7C                                   ld      a,h
 420+ CC20 32 22 94                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 421+ CC23              ;-calculate roofv latter half of calc
 422+ CC23 2A B0 93                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 423+ CC26 5E                                   ld      e,(hl)
 424+ CC27 23                                   inc     hl
 425+ CC28 56                                   ld      d,(hl)          ; de = value of roof axis
 426+ CC29 7A                                   ld      a,d
 427+ CC2A E6 80                                and     SignOnly8Bit
 428+ CC2C FD 67                                ld      iyh,a           ; save sign
 429+ CC2E 7A                                   ld      a,d
 430+ CC2F E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 431+ CC31 57                                   ld      d,a             ; de = abs (nosev)
 432+ CC32                                      ShiftDERight1
 432+ CC32 CB 3A       >			   srl d
 432+ CC34 CB 1B       >			   rr  e
 433+ CC36                                      ShiftDERight1
 433+ CC36 CB 3A       >			   srl d
 433+ CC38 CB 1B       >			   rr  e
 434+ CC3A                                      ShiftDERight1
 434+ CC3A CB 3A       >			   srl d
 434+ CC3C CB 1B       >			   rr  e
 435+ CC3E                                      ShiftDERight1           ; de = nosev /16 unsigned
 435+ CC3E CB 3A       >			   srl d
 435+ CC40 CB 1B       >			   rr  e
 436+ CC42 3A 36 94                             ld      a,(varRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 437+ CC45 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 438+ CC47 E6 80                                and     SignOnly8Bit
 439+ CC49 B2                                   or      d
 440+ CC4A 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 441+ CC4B              ;;; ld      a,e
 442+ CC4B              ;;;     or      iyh
 443+ CC4B              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 444+ CC4B              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 445+ CC4B E1                                   pop     hl              ; get back RS POP ID 1
 446+ CC4C                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 447+ CC4C              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 448+ CC4C CD 5F CB                             call    ADDHLDESignedv3 ; do add using hl and de
 449+ CC4F E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 450+ CC50              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 451+ CC50              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 452+ CC50 2A B0 93                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 453+ CC53 5E                               ld      e,(hl)
 454+ CC54 23                               inc     hl
 455+ CC55 56                               ld      d,(hl)
 456+ CC56 EB                               ex      de,hl
 457+ CC57 7C                               ld      a,h
 458+ CC58 E6 80                            and     $80
 459+ CC5A FD 67                            ld      iyh,a
 460+ CC5C 7C                               ld      a,h
 461+ CC5D E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 462+ CC5F CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 463+ CC61 5F                               ld      e,a
 464+ CC62 FD 7C                            ld      a,iyh
 465+ CC64 57                               ld      d,a
 466+ CC65 B7                               or      a               ; clear carry
 467+ CC66 CD 99 CB                         call    SUBHLDESignedv3
 468+ CC69              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 469+ CC69 E5                               push    hl              ; save hl on stack  PUSH ID 3
 470+ CC6A 7D                               ld      a,l
 471+ CC6B 32 C5 93                         ld      (varP),a        ; p = low of resuilt
 472+ CC6E 7C                               ld      a,h
 473+ CC6F E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 474+ CC71 32 40 94                         ld      (varT),a        ; t = high of result
 475+ CC74              ;-- Set up TQ
 476+ CC74 2A AE 93                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 477+ CC77              ;   ld      hl,(varAxis2)   ; work on nosev again
 478+ CC77 5E                               ld      e,(hl)
 479+ CC78 23                               inc     hl
 480+ CC79 56                               ld      d,(hl)
 481+ CC7A 7A                               ld      a,d
 482+ CC7B E6 80                            and     $80
 483+ CC7D FD 67                            ld      iyh,a           ; save sign
 484+ CC7F 7A                               ld      a,d
 485+ CC80 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 486+ CC82 57                               ld      d,a             ; de = abs (nosev)
 487+ CC83                                  ShiftDERight1
 487+ CC83 CB 3A       >			   srl d
 487+ CC85 CB 1B       >			   rr  e
 488+ CC87                                  ShiftDERight1
 488+ CC87 CB 3A       >			   srl d
 488+ CC89 CB 1B       >			   rr  e
 489+ CC8B                                  ShiftDERight1
 489+ CC8B CB 3A       >			   srl d
 489+ CC8D CB 1B       >			   rr  e
 490+ CC8F                                  ShiftDERight1           ; de = nosev /16 unsigned
 490+ CC8F CB 3A       >			   srl d
 490+ CC91 CB 1B       >			   rr  e
 491+ CC93 3A 36 94                         ld      a,(varRAT2)
 492+ CC96 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 493+ CC98 E6 80                            and     $80
 494+ CC9A B2                               or      d
 495+ CC9B 57                               ld      d,a
 496+ CC9C              ;;; ld      a,e
 497+ CC9C              ;;;     or      iyh
 498+ CC9C              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 499+ CC9C E1                               pop     hl              ; get back RS   POP ID 3
 500+ CC9D              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 501+ CC9D CD 99 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 502+ CCA0              ;-- Update nosev ---------------------------------------
 503+ CCA0 EB                               ex      de,hl           ; save hl to de
 504+ CCA1 2A B0 93                         ld      hl,(varAxis2)
 505+ CCA4 73                               ld      (hl),e
 506+ CCA5 23                               inc     hl
 507+ CCA6 72                               ld      (hl),d          ; copy result into nosev
 508+ CCA7              ;-- Update roofv ---------------------------------------
 509+ CCA7 D1                               pop     de              ; get calc saved on stack POP ID 2
 510+ CCA8 2A AE 93                         ld      hl,(varAxis1)
 511+ CCAB 73                               ld      (hl),e
 512+ CCAC 23                               inc     hl
 513+ CCAD 72                               ld      (hl),d          ; copy result into nosev
 514+ CCAE C9                               ret
 515+ CCAF
 516+ CCAF                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CCAF              InitialiseOrientation:
   2++CCAF              ZI1:
   3++CCAF              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CCAF              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCAF              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   6++CCAF 21 00 00         ld      hl, 0
   7++CCB2 22 16 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCB5 22 18 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCB8 22 1A C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCBB 22 1E C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCBE 22 20 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCC1 22 22 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCC4 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCC7                  ;ld      hl,1
  15++CCC7 22 14 C0         ld      (UBnkrotmatSidevX),hl
  16++CCCA 22 1C C0         ld      (UBnkrotmatRoofvY),hl
  17++CCCD 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCD0 22 24 C0         ld      (UBnkrotmatNosevZ),hl
  19++CCD3 C9               ret
  20++CCD4
# file closed: ./Universe/InitialiseOrientation.asm
 517+ CCD4              ;----------------------------------------------------------------------------------------------------------------------------------
 518+ CCD4              OrientateVertex:
 519+ CCD4
 520+ CCD4              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 521+ CCD4              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 522+ CCD4              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 523+ CCD4              ;
 524+ CCD4
 525+ CCD4              ;----------------------------------------------------------------------------------------------------------------------------------
 526+ CCD4              TransposeVertex:
 527+ CCD4              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 528+ CCD4              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 529+ CCD4              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 530+ CCD4              VectorToVertex:
 531+ CCD4              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 532+ CCD4              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 533+ CCD4              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 534+ CCD4
 535+ CCD4              Project:
 536+ CCD4 2A 0B C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 537+ CCD7 22 C5 93                             ld      (varP),hl
 538+ CCDA 3A 0D C0                             ld      a,(UBnKxsgn)
 539+ CCDD CD 19 CB                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 540+ CCE0 D8                                   ret     c                               ; carry means don't print
 541+ CCE1 2A 37 94                             ld      hl,(varK)                       ; hl = k (0 1)
 542+ CCE4                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 543+ CCE4 3E 80                                ld      a,ViewCenterX
 544+ CCE6 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 545+ CCE8 22 4A 94                             ld      (varK3),hl                      ; K3 = X position on screen
 546+ CCEB 2A 0E C0     ProjectY:               ld      hl,(UBnKylo)
 547+ CCEE 22 C5 93                             ld      (varP),hl
 548+ CCF1 3A 10 C0                             ld      a,(UBnKysgn)
 549+ CCF4 CD 19 CB                             call    PLS6
 550+ CCF7 D8                                   ret     c
 551+ CCF8 2A 37 94                             ld      hl,(varK)                       ; hl = k (0 1)
 552+ CCFB 3E 40                                ld      a,ViewCenterY
 553+ CCFD ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 554+ CCFF 22 50 94                             ld      (varK4),hl                      ; K3 = X position on screen
 555+ CD02 C9                                   ret
 556+ CD03              ;--------------------------------------------------------------------------------------------------------
 557+ CD03                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CD03              ;
   2++CD03              ; EraseOldLines:
   3++CD03              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CD03              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CD03              ;	 	loop + 4
   6++CD03              ; Return
   7++CD03
   8++CD03              EraseOldLines:
   9++CD03              EE51:										; if bit3 set draw lines in XX19 heap
  10++CD03              	ReturnOnMemBitClear UBnkexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CD03 3A 2A C0    >                        ld     a,(UBnkexplDsp)
  10++CD06 CB 5F       >                        bit 	3,a
  10++CD08 C8          >                        ret		z
  11++CD09 CB DF        	set		3,a
  12++CD0B 32 2A C0     	ld		(UBnkexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CD0E C3 CC E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD11              ; We use the ret from the clearLines so not needed here
  15++CD11
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 558+ CD11                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CD11              ;TrimToScreenGrad:
   2++CD11              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD11              ;ret
   4++CD11              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD11              ;TODO        bit     7,a
   6++CD11              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD11              ;TODO        ld      a,h
   8++CD11              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD11              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD11              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD11
  12++CD11              ;18                      CLC
  13++CD11              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD11              ;85 36                   STA &36			 \ XX15+2
  15++CD11              ;98                      TYA 			 \ step Y1 hi
  16++CD11              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD11              ;85 37                   STA &37			 \ XX15+3
  18++CD11              ;A9 00                   LDA #0			 \ xleft min
  19++CD11              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD11              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD11              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD11              ;	.LL119	\ x1 hi +ve from LL118
  23++CD11              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD11              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD11              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD11              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD11              ;8A                      TXA 			 \ step Y1 lo
  28++CD11              ;18                      CLC
  29++CD11              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD11              ;85 36                   STA &36			 \ XX15+2
  31++CD11              ;98                      TYA 			 \ step Y1 hi
  32++CD11              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD11              ;85 37                   STA &37			 \ XX15+3
  34++CD11              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD11              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD11              ;E8                      INX 			 \ X = 0
  37++CD11              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD11              ;	.LL134	\ Ytrim
  39++CD11              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD11              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD11              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD11              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD11              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD11              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD11              ;8A                      TXA 			 \ step X1 lo
  46++CD11              ;18                      CLC
  47++CD11              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD11              ;85 34                   STA &34			 \ XX15+0
  49++CD11              ;98                      TYA 			 \ step X1 hi
  50++CD11              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD11              ;85 35                   STA &35			 \ XX15+1
  52++CD11              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD11              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD11              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD11              ;	.LL135	\ y1 hi +ve from LL134
  56++CD11              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD11              ;38                      SEC
  58++CD11              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD11              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD11              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD11              ;E9 00                   SBC #0			 \ any hi
  62++CD11              ;85 83                   STA &83			 \ S
  63++CD11              ;90 16                   BCC LL136		 \ failed, rts
  64++CD11              ;	.LL139
  65++CD11              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD11              ;8A                      TXA 			 \ step X1 lo
  67++CD11              ;18                      CLC
  68++CD11              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD11              ;85 34                   STA &34			 \ XX15+0
  70++CD11              ;98                      TYA 			 \ step X1 hi
  71++CD11              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD11              ;85 35                   STA &35			 \ XX15+1
  73++CD11              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD11              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD11              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD11              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD11              ;	.LL136	\ rts
  78++CD11              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD11              ;
  80++CD11
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 559+ CD11                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CD11              ;--------------------------------------------------------------------------------------------------------------------
   2++CD11
   3++CD11 00           clipDx                  DB      0           ; also XX12+2
   4++CD12 00           clipDxHigh              DB      0           ; also XX12+3
   5++CD13 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CD14 00           clipDy                  DB      0           ; also XX12+4
   7++CD15 00           clipDyHigh              DB      0           ; also XX12+5
   8++CD16 00           clipGradient            DB      0
   9++CD17 00           clipDxySign             DB      0
  10++CD18              varX12p3                equ     clipDxySign
  11++CD18 00           clipXGTY                DB      0
  12++CD19 00           clipFlags               DB      0
  13++CD1A 00           SWAP                    DB      0
  14++CD1B 00 00        varYX                   DW      0
  15++CD1D              ;varRegX                 DB      0
  16++CD1D              ;varXX12p2               DB      0
  17++CD1D 00           clipXX13                 DB      0
  18++CD1E
  19++CD1E
  20++CD1E              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CD1E              ;ClipXX15XX12Line:
  22++CD1E ED 4B 76 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CD22 DD 2A 7A C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CD26 2A 74 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CD29 ED 5B 78 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CD2D AF                                   xor     a
  27++CD2E 32 1A CD                             ld      (SWAP),a                    ; SWAP = 0
  28++CD31 7A                                   ld      a,d                         ; A = X2Hi
  29++CD32 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CD35                                      ;       push    af
  31++CD35                                      ;       ld      a,iyh
  32++CD35                                      ;       ld      (regX),a
  33++CD35                                      ;       pop     af
  34++CD35 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CD37 20 0A                                jr      nz, .LL107
  36++CD39 DD 7D                                ld      a,ixl
  37++CD3B ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CD3E 20 03                                jr      nz,.LL107
  39++CD40 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CD43                                      ;        push    af
  41++CD43                                      ;        ld      a,iyh
  42++CD43                                      ;        ld      (regX),a
  43++CD43                                      ;        pop     af
  44++CD43              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CD43              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CD43 FD 7C        .LL107                  ld      a,iyh
  47++CD45 32 1D CD                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CD48 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CD49 B0                                   or      b                           ;
  50++CD4A 20 27                                jr      nz,.LL83                    ;
  51++CD4C 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CD4D ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CD50 20 21                                jr      nz,.LL83
  54++CD52              ; If we get here, (x1, y1) is on-screen
  55++CD52 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CD54 FE 00                                cp      0
  57++CD56 20 15                                jr      nz, .LL108
  58++CD58              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CD58 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CD59 32 75 C0                             ld      (UBnkNewY1),a
  61++CD5C DD 7D                                ld      a,ixl
  62++CD5E 32 77 C0                             ld      (UBnkNewY2),a
  63++CD61 7D                                   ld      a,l
  64++CD62 32 74 C0                             ld      (UBnkNewX1),a
  65++CD65 7B                                   ld      a,e
  66++CD66 32 76 C0                             ld      (UBnkNewX2),a
  67++CD69                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CD69 B7          >                        or a
  68++CD6A C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CD6B              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CD6B 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CD6C C9                                   ret
  72++CD6D FD 7C        .LL108:                 ld      a,iyh
  73++CD6F B7                                   or      a
  74++CD70 1F                                   rra
  75++CD71 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CD73                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CD73                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CD73                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CD73                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CD73 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CD75 ED 27 80                             test    $80                         ;
  82++CD78 28 28                                jr      z, .LL115                   ;
  83++CD7A 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CD7B A2                                   and     d
  85++CD7C                                      JumpIfNegative  .PointsOutofBounds
  85++CD7C FA 6B CD    >                        jp		m, .PointsOutofBounds
  86++CD7F 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CD80 DD A4                                and     ixh
  88++CD82                                      JumpIfNegative  .PointsOutofBounds
  88++CD82 FA 6B CD    >                        jp		m, .PointsOutofBounds
  89++CD85 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CD86 3D                                   dec     a
  91++CD87 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CD89                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CD89                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CD89                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CD89                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CD89 7A                                   ld      a,d                         ; a = x2 hi
  97++CD8A 3D                                   dec     a
  98++CD8B FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CD8D                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CD8D F2 6B CD    >                        jp		p, .PointsOutofBounds
 100++CD90              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CD90 DD 7C                                ld      a,ixh
 102++CD92 3D                                   dec     a
 103++CD93 FD 6F                                ld      iyl,a
 104++CD95 78                                   ld      a,b
 105++CD96 3D                                   dec     a
 106++CD97 FD B5                                or      iyl
 107++CD99                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CD99 F2 6B CD    >                        jp		p, .PointsOutofBounds
 108++CD9C 79                                   ld      a,c
 109++CD9D DD A5                                and     ixl
 110++CD9F                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CD9F FA 6B CD    >                        jp		m, .PointsOutofBounds
 111++CDA2              ; Clip line: calulate the line's gradient
 112++CDA2              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CDA2              .LL115:                 ClearCarryFlag
 113++CDA2 B7          >                        or a
 114++CDA3 E5 D5        .CalcDX:                push    hl,,de
 115++CDA5 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CDA6 ED 52                                sbc     hl,de
 117++CDA8                                     ; pop     de                          ; we need de back
 118++CDA8 22 11 CD                             ld      (clipDx),hl
 119++CDAB 7C                                   ld      a,h
 120++CDAC 32 13 CD                             ld      (clipDxHighNonABS),a
 121++CDAF                                     ; ld      a,e                         ;a = x2 lo
 122++CDAF                                     ; sbc     a,l                         ;a= a - x1
 123++CDAF                                     ; ld      (clipDx),a
 124++CDAF                                     ; ld      a,d
 125++CDAF                                     ; sbc     a,h
 126++CDAF                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CDAF                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CDAF              .CalcDy:                ClearCarryFlag
 128++CDAF B7          >                        or a
 129++CDB0 DD E5 E1                             ld      hl,ix
 130++CDB3 ED 42                                sbc     hl,bc
 131++CDB5 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CDB7 22 14 CD                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CDBA 7C           .CalcQuadrant:          ld      a,h
 134++CDBB                                     ; ld      a,ixl
 135++CDBB                                     ; sbc     c
 136++CDBB                                     ; ld      (clipDy),a
 137++CDBB                                     ; ld      a,ixh
 138++CDBB                                     ; sbc     a,b
 139++CDBB                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CDBB                                     ; pop     hl
 141++CDBB
 142++CDBB              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CDBB                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CDBB 21 12 CD                             ld      hl,clipDxHigh
 145++CDBE AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CDBF 32 22 94                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CDC2 32 17 CD                             ld      (clipDxySign),a
 148++CDC5 3A 15 CD     .AbsDy:                 ld      a,(clipDyHigh)
 149++CDC8 ED 27 80                             test    $80
 150++CDCB 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CDCD 2A 14 CD                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CDD0                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CDD0 AF          >					xor 	a
 152++CDD1 93          >                    sub 	e
 152++CDD2 5F          >                    ld 		e,a
 152++CDD3 9F          >                    sbc 	a,a
 152++CDD4 92          >                    sub 	d
 152++CDD5 57          >                    ld 		d,a
 153++CDD6 22 14 CD                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CDD9 2A 11 CD     .LL110:                 ld      hl,(clipDx)
 155++CDDC 3A 12 CD                             ld      a,(clipDxHigh)
 156++CDDF ED 27 80                             test    $80                         ; is it a negative X
 157++CDE2 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CDE4                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CDE4                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CDE4 AF          >					xor 	a
 159++CDE5 95          >					sub 	l
 159++CDE6 6F          >					ld 		l,a
 159++CDE7 9F          >					sbc 	a,a
 159++CDE8 94          >					sub 	h
 159++CDE9 67          >					ld 		h,a
 160++CDEA                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CDEA              .LL111:               ;  push    de
 162++CDEA                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CDEA                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CDEA 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CDEB B2                                   or      d
 166++CDEC 28 0A                                jr      z,.CalculateDelta
 166++CDEE
 167++CDEE                                      ShiftDERight1
 167++CDEE CB 3A       >			   srl d
 167++CDF0 CB 1B       >			   rr  e
 168++CDF2                                      ShiftHLRight1
 168++CDF2 CB 3C       >			   srl h
 168++CDF4 CB 1D       >			   rr  l
 169++CDF6 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CDF8              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CDF8                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CDF8              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CDF8 AF           .LL113:                 xor     a
 174++CDF9 32 40 94                             ld      (varT),a                    ; t = 0
 175++CDFC 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CDFD                                      JumpIfALTNusng  e, .LL114           ;
 176++CDFD BB          >                        cp      e
 176++CDFE DA 0E CE    >                        jp		c,.LL114
 177++CE01              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CE01 32 20 94     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CE04 57                                   ld      d,a                         ; d = also Q for calc
 180++CE05 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CE06 CD 1D AB                             call    LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CE09 32 21 94                             ld      (varR),a                    ;
 183++CE0C 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CE0E              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CE0E 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CE0F 57                                   ld      d,a
 187++CE10 32 20 94                             ld      (varQ),a
 188++CE13 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CE14 CD 1D AB                             call    LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CE17 32 21 94                             ld      (varR),a                    ;
 191++CE1A 21 40 94                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CE1D 35                                   dec     (hl)
 193++CE1E D1           .LL116:                 pop     de                          ; get back X2
 194++CE1F E1                                   pop     hl                          ; get back X1 into hl,
 195++CE20 3A 21 94                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CE23 32 16 CD                             ld      (clipGradient),a
 197++CE26 FD 6F                                ld      iyl,a
 198++CE28                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CE28                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CE28                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CE28                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CE28 3A 22 94                             ld      a,(varS)
 203++CE2B 32 17 CD                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CE2E                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CE2E FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CE30 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CE32 28 05                                jr      z,.LL138                    ;
 208++CE34 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CE37 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CE39              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CE39 CD 60 CE     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CE3C FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CE3E ED 27 80                             test    $80
 214++CE41 28 1A                                jr      z,.LL124
 215++CE43              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CE43 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CE44 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CE45 C2 6B CD                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CE48 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CE49 FA 6B CD                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CE4C              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CE4C              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CE4C EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CE4D DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CE4F C5                                   push    bc
 226++CE50 DD E1                                pop     ix
 227++CE52 C1                                   pop     bc
 228++CE53 CD 60 CE                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CE56 3A 1A CD                             ld      a,(SWAP)
 230++CE59 3D                                   dec     a
 231++CE5A 32 1A CD                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CE5D C3 58 CD     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CE60
 234++CE60              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CE60              ; iyh still holds XX13 iyl still holds gradient
 236++CE60 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CE61 ED 27 80                             test    $80
 238++CE64 28 17                                jr      z,.LL119
 239++CE66 32 22 94     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CE69 E5 D5 C5                             push    hl,,de,,bc
 241++CE6C CD E2 CE                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CE6F                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CE6F                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CE6F C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CE72 2A 1B CD                             ld      hl,(varYX)
 246++CE75              ;                        ex      hl,de
 247++CE75                                  ;    ld      hl,bc
 248++CE75 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CE76 44 4D                                ld      bc,hl
 250++CE78 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CE7B               ;                       pop     de
 252++CE7B 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CE7D FE 00        .LL119:                 cp      0
 254++CE7F 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CE81 3D                                   dec     a
 256++CE82 32 22 94                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CE85 E5 D5 C5                             push    hl,,de,,bc
 258++CE88 CD E2 CE                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CE8B                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CE8B                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CE8B C1 D1 E1                             pop     hl,,de,,bc
 262++CE8E                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CE8E 2A 1B CD                             ld      hl,(varYX)
 264++CE91                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CE91 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CE92 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CE94                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CE94                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CE94                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CE94 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CE97                                    ;  pop     de
 272++CE97              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CE97 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CE98 ED 27 80                             test    $80                         ;
 275++CE9B 28 1A                                jr      z,.LL135                    ;
 276++CE9D 32 22 94                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CEA0 79                                   ld      a,c                         ; Set R = y1_lo
 278++CEA1 32 21 94                             ld      (varR),a                    ;
 279++CEA4 E5 D5 C5                             push    hl,,de,,bc
 280++CEA7 CD 09 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CEAA                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CEAA                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CEAA C1 D1 E1                             pop     hl,,de,,bc
 284++CEAD D5                                   push    de
 285++CEAE EB                                   ex      hl,de                       ; de = x1
 286++CEAF 2A 1B CD                             ld      hl,(varYX)                  ; hl = varYX
 287++CEB2 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CEB3 D1                                   pop     de                          ; de = x2 again
 289++CEB4 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CEB7 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CEB8 E6 80                                and     $80
 292++CEBA B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CEBB C8                                   ret     z
 294++CEBC E5                                   push    hl
 295++CEBD 60 69                                ld      hl,bc
 296++CEBF 01 80 00                             ld      bc,128
 297++CEC2 B7                                   or      a
 298++CEC3 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CEC5 22 21 94                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CEC8 7C                                   ld      a,h
 301++CEC9 E1                                   pop     hl
 302++CECA ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CECD C0                                   ret     nz
 304++CECE              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CECE E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CED1 CD 09 CF                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CED4                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CED4                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CED4 C1 D1 E1                             pop     hl,,de,,bc
 310++CED7 D5                                   push    de
 311++CED8 EB                                   ex      hl,de
 312++CED9 2A 1B CD                             ld      hl,(varYX)
 313++CEDC 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CEDD 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CEE0 D1                                   pop     de
 316++CEE1 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CEE2
 318++CEE2
 319++CEE2              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CEE2              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CEE2              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CEE2              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CEE2 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CEE3 32 21 94                             ld      (varR),a
 325++CEE6 CD 51 CF                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CEE9 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CEEA C5                                   push    bc
 328++CEEB 47                                   ld      b,a
 329++CEEC 3A 40 94                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CEEF FE 00                                cp      0
 331++CEF1 78                                   ld      a,b
 332++CEF2 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CEF3 20 23                                jr      nz, LL121
 334++CEF5              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CEF5 3A 16 CD     LL122:                  ld      a,(clipGradient)
 336++CEF8 32 20 94                             ld      (varQ),a; optimise
 337++CEFB CD 30 A1                             call    HLequSRmulQdiv256
 338++CEFE 22 1B CD                             ld      (varYX),hl
 339++CF01 F1                                   pop     af
 340++CF02 ED 27 80                             test    $80
 341++CF05 CA 44 CF                             jp      z,LL133
 342++CF08 C9                                   ret
 343++CF09              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CF09              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CF09              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CF09              ;
 347++CF09              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CF09              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CF09              ;                          LL128                Contains an RTS
 350++CF09 CD 51 CF     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CF0C F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CF0D C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CF0E 47                                   ld      b,a
 354++CF0F 3A 40 94                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CF12 FE 00                                cp      0
 356++CF14 78                                   ld      a,b
 357++CF15 C1                                   pop     bc
 358++CF16 20 DD                                jr      nz, LL122
 359++CF18              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CF18 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CF1B 2A 21 94                             ld      hl,(varRS)                  ; hl = RS
 362++CF1E 3A 20 94                             ld      a,(varQ)
 363++CF21 47                                   ld      b,a                         ; b = q
 364++CF22              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CF22 CB 25       >			   sla l
 364++CF24 CB 14       >			   rl  h
 365++CF26 7C                                   ld      a,h
 366++CF27 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CF29                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CF29 B8          >                        cp      b
 367++CF2A DA 35 CF    >                        jp		c,.LL132
 368++CF2D 3F           .LL131:                 ccf                                 ; compliment carry
 369++CF2E 98                                   sbc     a,b                         ; q
 370++CF2F 67                                   ld      h,a                         ; h (s)
 371++CF30 7D                                   ld      a,l                         ; r
 372++CF31 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CF33 37                                   scf                                 ; set carry for next rolls
 374++CF34 3F                                   ccf
 375++CF35              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CF35 CB 13       >               rl  e
 375++CF37 CB 12       >               rl  d
 376++CF39 38 E7                                jr      c,.LL130                    ;
 377++CF3B ED 53 1B CD                          ld      (varYX),de
 378++CF3F F1                                   pop     af              ; get back sign
 379++CF40 ED 27 80                             test    $80
 380++CF43 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CF44 2A 1B CD     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CF47                                      NegHL
 382++CF47 AF          >                xor a
 382++CF48 95          >                sub l
 382++CF49 6F          >                ld l,a
 382++CF4A 9F          >                sbc a,a
 382++CF4B 94          >                sub h
 382++CF4C 67          >                ld h,a
 383++CF4D 22 1B CD                             ld      (varYX),hl
 384++CF50 C9           LL128:                  ret
 385++CF51              ; Do the following, in this order:  Q = XX12+2
 386++CF51              ;                                   A = S EOR XX12+3
 387++CF51              ;                                   (S R) = |S R|
 388++CF51              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CF51 3A 16 CD     LL129:                  ld      a,(clipGradient)
 390++CF54 32 20 94                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CF57 3A 22 94                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CF5A E5 F5                                push    hl,,af
 393++CF5C ED 27 80                             test    $80
 394++CF5F 28 0C                                jr      z,.LL127
 395++CF61 2A 21 94                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CF64                                      NegHL
 396++CF64 AF          >                xor a
 396++CF65 95          >                sub l
 396++CF66 6F          >                ld l,a
 396++CF67 9F          >                sbc a,a
 396++CF68 94          >                sub h
 396++CF69 67          >                ld h,a
 397++CF6A 22 21 94                             ld      (varRS),hl
 398++CF6D 21 17 CD     .LL127:                 ld      hl,clipDxySign
 399++CF70 F1                                   pop     af
 400++CF71 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CF72 E1                                   pop     hl
 402++CF73 C9                                   ret
 403++CF74
# file closed: ././ModelRender/CLIP-LL145.asm
 560+ CF74              ;--------------------------------------------------------------------------------------------------------
 561+ CF74                                      include "./Variables/CopyRotmatToTransMat.asm"
# file opened: ././Variables/CopyRotmatToTransMat.asm
   1++CF74              ; Set TransMatTo
   2++CF74              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CF74              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CF74              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CF74              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CF74              CopyRotmatToTransMat:                       ; Tested
   7++CF74              LL15_CopyRotMat:                            ; unrolled loop
   8++CF74 21 14 C0             ld      hl,UBnkrotmatSidevX
   9++CF77 11 2F C0             ld      de,UBnkTransmatSidevX
  10++CF7A                      SixLDIInstrunctions
  10++CF7A ED A0       >                        ldi
  10++CF7C ED A0       >                        ldi
  10++CF7E ED A0       >                        ldi
  10++CF80 ED A0       >                        ldi
  10++CF82 ED A0       >                        ldi
  10++CF84 ED A0       >                        ldi
  11++CF86 21 1A C0             ld      hl,UBnkrotmatRoofvX
  12++CF89 11 35 C0             ld      de, UBnkTransmatRoofvX
  13++CF8C                      SixLDIInstrunctions
  13++CF8C ED A0       >                        ldi
  13++CF8E ED A0       >                        ldi
  13++CF90 ED A0       >                        ldi
  13++CF92 ED A0       >                        ldi
  13++CF94 ED A0       >                        ldi
  13++CF96 ED A0       >                        ldi
  14++CF98 21 20 C0             ld      hl,UBnkrotmatNosevX
  15++CF9B 11 3B C0             ld      de, UBnkTransmatNosevX
  16++CF9E                      SixLDIInstrunctions
  16++CF9E ED A0       >                        ldi
  16++CFA0 ED A0       >                        ldi
  16++CFA2 ED A0       >                        ldi
  16++CFA4 ED A0       >                        ldi
  16++CFA6 ED A0       >                        ldi
  16++CFA8 ED A0       >                        ldi
  17++CFAA C9                   ret
  18++CFAB
# file closed: ././Variables/CopyRotmatToTransMat.asm
 562+ CFAB              ;--------------------------------------------------------------------------------------------------------
 563+ CFAB 21 A0 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 564+ CFAE ED 31                                add     hl,a
 565+ CFB0 3E FF                                ld      a,$FF
 566+ CFB2 77                                   ld      (hl),a
 567+ CFB3 C9                                   ret
 568+ CFB4              ;--------------------------------------------------------------------------------------------------------
 569+ CFB4 21 A0 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 570+ CFB7 ED 31                                add     hl,a
 571+ CFB9 AF                                   xor     a
 572+ CFBA 77                                   ld      (hl),a
 573+ CFBB C9                                   ret
 574+ CFBC              ;--------------------------------------------------------------------------------------------------------
 575+ CFBC 3A 0A C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 576+ CFBF CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 577+ CFC1 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 578+ CFC3 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 579+ CFC4 21 A0 C0                             ld      hl,UbnkFaceVisArray
 580+ CFC7 3E FF                                ld      a,$FF
 581+ CFC9              SetAllFacesVisibleLoop:
 582+ CFC9 77           EE30:                   ld      (hl),a
 583+ CFCA 23                                   inc     hl
 584+ CFCB 10 FC                                djnz    SetAllFacesVisibleLoop
 585+ CFCD C9                                   ret
 586+ CFCE              ;--------------------------------------------------------------------------------------------------------
 587+ CFCE 3A 0A C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 588+ CFD1 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 589+ CFD3 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 590+ CFD5 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 591+ CFD6 06 10                                ld      b,16
 592+ CFD8 21 A0 C0                             ld      hl,UbnkFaceVisArray
 593+ CFDB 3E 00                                ld      a,$00
 594+ CFDD 77           SetAllFacesHiddenLoop:  ld      (hl),a
 595+ CFDE 23                                   inc     hl
 596+ CFDF 10 FC                                djnz    SetAllFacesHiddenLoop
 597+ CFE1 C9                                   ret
 598+ CFE2
 599+ CFE2              ;;;;X = normal scale
 600+ CFE2              ;;;;ZtempHi = zhi
 601+ CFE2              ;;;;......................................................
 602+ CFE2              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 603+ CFE2              ;;;;  Loop                                              ::LL90
 604+ CFE2              ;;;;     inc X
 605+ CFE2              ;;;;     divide X, Y & ZtempHiLo by 2
 606+ CFE2              ;;;;  Until ZtempHi = 0
 607+ CFE2              ;;;;......................................................
 608+ CFE2              ;-LL21---------------------------------------------------------------------------------------------------
 609+ CFE2                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++CFE2              ;divdide by 16 using undocumented instrunctions
   2++CFE2              Norm256mulAdivQ:
   3++CFE2 47               ld      b,a
   4++CFE3 0E 00            ld      c,0
   5++CFE5 16 00            ld      d,0
   6++CFE7 3A 20 94         ld      a,(varQ)
   7++CFEA 5F               ld      e,a
   8++CFEB              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CFEB              ;Output: BC = Quotient, HL = Remainder
  10++CFEB              NormDIV16UNDOC:
  11++CFEB 21 00 00         ld      hl,0
  12++CFEE 78               ld      a,b
  13++CFEF 06 10            ld      b,16
  14++CFF1              NormDIV16UNDOCLOOP:
  15++CFF1 CB 31        	sll	    c		; unroll 16 times
  16++CFF3 17           	rla	    		; ...
  17++CFF4 ED 6A        	adc	    hl,hl		; ...
  18++CFF6 ED 52        	sbc	    hl,de		; ...
  19++CFF8 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CFFA 19           	add	    hl,de		; ...
  21++CFFB 0D           	dec	    c		; ...
  22++CFFC              NormDIV16UNDOCSKIP:
  23++CFFC 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CFFE 79               ld      a,c
  25++CFFF 32 21 94         ld      (varR),a
  26++D002 C9               ret
  27++D003
  28++D003              ; Tested OK
  29++D003              NormaliseTransMat:
  30++D003              ;LL21
  31++D003 21 40 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D006 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D008 79                   ld      a,c
  34++D009 32 20 94             ld      (varQ),a                    ; set up varQ
  35++D00C 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D00E              LL21Loop:
  37++D00E 56                   ld      d,(hl)
  38++D00F 2B                   dec     hl
  39++D010 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D011                      ShiftDELeft1                        ; De = DE * 2
  40++D011 CB 23       >			   sla e
  40++D013 CB 12       >			   rl  d
  41++D015 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D016 E5           		push	hl
  43++D017 C5           		push	bc
  44++D018 CD E2 CF             call    Norm256mulAdivQ
  45++D01B              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D01B 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D01C C1           		pop		bc
  48++D01D E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D01E 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D01F 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D020 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D022 C9                   ret
  53++D023
# file closed: ./Universe/NormaliseTransMat.asm
 610+ D023              ;-LL91---------------------------------------------------------------------------------------------------
 611+ D023
 612+ D023              ; Now we have
 613+ D023              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 614+ D023              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 615+ D023              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 616+ D023              ;
 617+ D023              ;--------------------------------------------------------------------------------------------------------
 618+ D023                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D023              ; TESTEDOK
   2++D023
   3++D023              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D023              ;        ld      a,(XX17)
   5++D023              ;        ld      ixl,a
   6++D023              ;        ld      ixh,9
   7++D023              ;        ld      hl,UBnkTransInv0x
   8++D023              ;        ld      a,(hl)
   9++D023              ;ScaleNode:
  10++D023              ;        ld      b,ixl
  11++D023              ;ScaleNodeLoop:
  12++D023              ;        sla      a
  13++D023              ;        djnz    ScaleNodeLoop
  14++D023              ;        ld      (hl),a
  15++D023              ;        inc     hl
  16++D023              ;        inc     hl
  17++D023              ;        dec     ixh
  18++D023              ;        jr      nz,ScaleNode
  19++D023              ;        ret
  20++D023
  21++D023
  22++D023              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D023              ; we coudl combine this with move to transmat later as an optimisation
  24++D023              ; INPUT - All Scaled
  25++D023              ;  They transmat has already been put into side, roof nose order
  26++D023              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D023              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D023              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D023              ; OUTPUT
  30++D023              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D023              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D023              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D023              ; First all side values become compoment 0 of each vector
  34++D023 2A 2F C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D026 ED 5B 35 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D02A ED 4B 3B C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D02E 22 47 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D031 ED 53 49 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D035 ED 43 4B C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D039 2A 31 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D03C ED 5B 37 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D040 ED 4B 3D C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D044 22 4F C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D047 ED 53 51 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D04B ED 43 53 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D04F 2A 33 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D052 ED 5B 39 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D056 ED 4B 3F C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D05A 22 57 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D05D ED 53 59 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D061 ED 43 5B C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D065 C9                   ret
  53++D066
  54++D066
# file closed: ./Universe/InverseXX16.asm
 619+ D066              ;--------------------------------------------------------------------------------------------------------
 620+ D066              ;--------------------------------------------------------------------------------------------------------
 621+ D066              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 622+ D066              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 623+ D066              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 624+ D066              ; Returns
 625+ D066              ;
 626+ D066              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 627+ D066              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 628+ D066              ;
 629+ D066              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 630+ D066              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 631+ D066              ;
 632+ D066              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 633+ D066              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 634+ D066              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 635+ D066 ~                                    ld      c,0
 636+ D066 ~                                    ld      a,param3                      ;
 637+ D066 ~                                    bit     7,a
 638+ D066 ~                                    jr      z,.val2Pos
 639+ D066 ~            ;HandleSignebits
 640+ D066 ~                                    neg
 641+ D066 ~                                    ld      c,$80
 642+ D066 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 643+ D066 ~                                    ld      a,param2                        ; A = XX16 element
 644+ D066 ~                                    bit     7,a
 645+ D066 ~                                    jr      z,.val1Pos
 646+ D066 ~            ;HandleSignebits
 647+ D066 ~                                    neg
 648+ D066 ~                                    ld      b,a
 649+ D066 ~                                    ld      a,c
 650+ D066 ~                                    xor     $80
 651+ D066 ~                                    ld      c,a
 652+ D066 ~                                    ld      a,b
 653+ D066 ~            .val1Pos:               ld      d,a
 654+ D066 ~            ;AequAmulQdiv256:
 655+ D066 ~                                    mul
 656+ D066 ~                                    ld      a,c
 657+ D066 ~                                    bit     7,a
 658+ D066 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 659+ D066 ~                                    jr      z,.resultPos
 660+ D066 ~                                    neg
 661+ D066 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 662+ D066                                      ENDM
 663+ D066
 664+ D066              AequN1xorN2:            MACRO  param1,param2
 665+ D066 ~                                    ld      a,(param1)
 666+ D066 ~                                    xor     param2
 667+ D066                                      ENDM
 668+ D066
 669+ D066              N0equN1byN2div256:      MACRO param1,param2,param3
 670+ D066 ~                                    ld      a,param3                        ;
 671+ D066 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 672+ D066 ~                                    ld      a,param2                        ; A = XX16 element
 673+ D066 ~                                    ld      d,a
 674+ D066 ~                                    mul
 675+ D066 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 676+ D066 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 677+ D066                                      ENDM
 678+ D066
 679+ D066               ; TESTEDOK
 680+ D066              XX12DotOneRow:
 681+ D066              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 681+ D066 3A 74 C0    >                        ld      a,(UBnkXScaled)                        ;
 681+ D069 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 681+ D06A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 681+ D06B 57          >                        ld      d,a
 681+ D06C ED 30       >                        mul
 681+ D06E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 681+ D06F 32 40 94    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 682+ D072 23                                   inc     hl                                  ; move to sign byte
 683+ D073              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 683+ D073 3A 75 C0    >                        ld      a,(UBnkXScaledSign)
 683+ D076 AE          >                        xor     (hl)
 684+ D077 32 22 94                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 685+ D07A 23                                   inc     hl
 686+ D07B              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 686+ D07B 3A 76 C0    >                        ld      a,(UBnkYScaled)                        ;
 686+ D07E 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 686+ D07F 7E          >                        ld      a,(hl)                        ; A = XX16 element
 686+ D080 57          >                        ld      d,a
 686+ D081 ED 30       >                        mul
 686+ D083 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 686+ D084 32 20 94    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 687+ D087                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 687+ D087 3A 40 94    >               ld       a,(varT)
 687+ D08A 32 21 94    >               ld       (varR),a
 688+ D08D 23                                   inc     hl
 689+ D08E                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 689+ D08E 3A 77 C0    >                        ld      a,(UBnkYScaledSign)
 689+ D091 AE          >                        xor     (hl)
 690+ D092              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 691+ D092 E5           STequSRplusAQ           push    hl
 692+ D093 CD DF A7                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 693+ D096 E1                                   pop     hl
 694+ D097 32 40 94                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 695+ D09A 23                                   inc     hl
 696+ D09B              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 696+ D09B 3A 78 C0    >                        ld      a,(UBnkZScaled)                        ;
 696+ D09E 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 696+ D09F 7E          >                        ld      a,(hl)                        ; A = XX16 element
 696+ D0A0 57          >                        ld      d,a
 696+ D0A1 ED 30       >                        mul
 696+ D0A3 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 696+ D0A4 32 20 94    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 697+ D0A7                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 697+ D0A7 3A 40 94    >               ld       a,(varT)
 697+ D0AA 32 21 94    >               ld       (varR),a
 698+ D0AD 23                                   inc     hl
 699+ D0AE                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 699+ D0AE 3A 79 C0    >                        ld      a,(UBnkZScaledSign)
 699+ D0B1 AE          >                        xor     (hl)
 700+ D0B2              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 701+ D0B2 CD DF A7                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 702+ D0B5              ; Now we exit with A = result S = Sign
 703+ D0B5 C9                                   ret
 704+ D0B6
 705+ D0B6              ; added where sign is separate byte
 706+ D0B6              ;;;XX12DotOneRowV2:
 707+ D0B6              ;;;XX12CalcXV2:
 708+ D0B6              ;;;        ld      a,(hl)
 709+ D0B6              ;;;        ld      de,(UBnkXScaled)
 710+ D0B6              ;;;        ld      b,d
 711+ D0B6              ;;;        ld      d,a
 712+ D0B6              ;;;        mul
 713+ D0B6              ;;;        ld      a,e
 714+ D0B6              ;;;        ld      (varT),a
 715+ D0B6              ;;;XX12CalcXSignV2:
 716+ D0B6              ;;;        inc     hl
 717+ D0B6              ;;;        ld      a,(hl)
 718+ D0B6              ;;;        xor     b
 719+ D0B6              ;;;        ld      (varS),a
 720+ D0B6              ;;;XX12CalcYV2:
 721+ D0B6              ;;;        inc     hl
 722+ D0B6              ;;;        ld      de,(UBnkYScaled)
 723+ D0B6              ;;;        ld      b,d
 724+ D0B6              ;;;        ld      d,a
 725+ D0B6              ;;;        mul
 726+ D0B6              ;;;        ld      a,e
 727+ D0B6              ;;;        ld      (varQ),a
 728+ D0B6              ;;;        ld      a,(varT)
 729+ D0B6              ;;;        ld      (varR),a
 730+ D0B6              ;;;XX12CalcYSignV2:
 731+ D0B6              ;;;        inc     hl
 732+ D0B6              ;;;        ld      a,(hl)
 733+ D0B6              ;;;        xor     b
 734+ D0B6              ;;;        ld      (varS),a
 735+ D0B6              ;;;XX12CalcXPlusYV2:
 736+ D0B6              ;;;        push    hl
 737+ D0B6              ;;;        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 738+ D0B6              ;;;        pop     hl
 739+ D0B6              ;;;        ld      (varT),a                            ; var S already holds sign
 740+ D0B6              ;;;       ret
 741+ D0B6
 742+ D0B6
 743+ D0B6              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 744+ D0B6              ;TESTED OK
 745+ D0B6              XX12EquXX15DotProductXX16:
 746+ D0B6              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 747+ D0B6 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 748+ D0B9 21 2F C0                             ld      hl,UBnkTransmatSidevX
 749+ D0BC CD 66 D0                             call    XX12DotOneRow
 750+ D0BF 32 7A C0                             ld      (UBnkXX12xLo),a
 751+ D0C2 3A 22 94                             ld      a,(varS)
 752+ D0C5 32 7B C0                             ld      (UBnkXX12xSign),a
 753+ D0C8 21 35 C0                             ld      hl,UBnkTransmatRoofvX
 754+ D0CB CD 66 D0                             call    XX12DotOneRow
 755+ D0CE 32 7C C0                             ld      (UBnkXX12yLo),a
 756+ D0D1 3A 22 94                             ld      a,(varS)
 757+ D0D4 32 7D C0                             ld      (UBnkXX12ySign),a
 758+ D0D7 21 3B C0                             ld      hl,UBnkTransmatNosevX
 759+ D0DA CD 66 D0                             call    XX12DotOneRow
 760+ D0DD 32 7E C0                             ld      (UBnkXX12zLo),a
 761+ D0E0 3A 22 94                             ld      a,(varS)
 762+ D0E3 32 7F C0                             ld      (UBnkXX12zSign),a
 763+ D0E6 C9                                   ret
 764+ D0E7              ;--------------------------------------------------------------------------------------------------------
 765+ D0E7                                      include "./Variables/CopyXX12ScaledToXX18.asm"
# file opened: ././Variables/CopyXX12ScaledToXX18.asm
   1++D0E7              CopyXX12ScaledToXX18:
   2++D0E7              CopyResultToDrawCam:
   3++D0E7                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D0E7 3A 7A C0    >               ld       a,(XX12)
   3++D0EA 32 68 C0    >               ld       (XX18),a
   4++D0ED                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D0ED 3A 7B C0    >               ld       a,(XX12+1)
   4++D0F0 32 6A C0    >               ld       (XX18+2),a
   5++D0F3                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D0F3 3A 7C C0    >               ld       a,(XX12+2)
   5++D0F6 32 6B C0    >               ld       (XX18+3),a
   6++D0F9                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D0F9 3A 7D C0    >               ld       a,(XX12+3)
   6++D0FC 32 6D C0    >               ld       (XX18+5),a
   7++D0FF                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D0FF 3A 7E C0    >               ld       a,(XX12+4)
   7++D102 32 6E C0    >               ld       (XX18+6),a
   8++D105                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D105 3A 7F C0    >               ld       a,(XX12+5)
   8++D108 32 70 C0    >               ld       (XX18+8),a
   9++D10B C9                   ret
  10++D10C
# file closed: ././Variables/CopyXX12ScaledToXX18.asm
 766+ D10C                                      include "./Variables/CopyXX12toXX15.asm"
# file opened: ././Variables/CopyXX12toXX15.asm
   1++D10C              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D10C 3A 7A C0    >               ld       a,(UBnkXX12xLo)
   1++D10F 32 74 C0    >               ld       (UBnkXScaled),a
   2++D112                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D112 3A 7B C0    >               ld       a,(UBnkXX12xSign)
   2++D115 32 75 C0    >               ld       (UBnkXScaledSign),a
   3++D118                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D118 3A 7C C0    >               ld       a,(UBnkXX12yLo)
   3++D11B 32 76 C0    >               ld       (UBnkYScaled),a
   4++D11E                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D11E 3A 7D C0    >               ld       a,(UBnkXX12ySign)
   4++D121 32 77 C0    >               ld       (UBnkYScaledSign),a
   5++D124                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D124 3A 7E C0    >               ld       a,(UBnkXX12zLo)
   5++D127 32 78 C0    >               ld       (UBnkZScaled),a
   6++D12A                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D12A 3A 7F C0    >               ld       a,(UBnkXX12zSign)
   6++D12D 32 79 C0    >               ld       (UBnkZScaledSign),a
   7++D130 C9                                   ret
   8++D131
# file closed: ././Variables/CopyXX12toXX15.asm
 767+ D131                                      include "./Variables/CopyXX18toXX15.asm"
# file opened: ././Variables/CopyXX18toXX15.asm
   1++D131              CopyXX18toXX15:
   2++D131              CopyDrawCamToScaled:
   3++D131                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D131 3A 68 C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D134 32 74 C0    >               ld       (UBnkXScaled),a
   4++D137                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D137 3A 6A C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D13A 32 75 C0    >               ld       (UBnkXScaledSign),a
   5++D13D                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D13D 3A 6B C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D140 32 76 C0    >               ld       (UBnkYScaled),a
   6++D143                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D143 3A 6D C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D146 32 77 C0    >               ld       (UBnkYScaledSign),a
   7++D149                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D149 3A 6E C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D14C 32 78 C0    >               ld       (UBnkZScaled),a
   8++D14F                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D14F 3A 70 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D152 32 79 C0    >               ld       (UBnkZScaledSign),a
   9++D155 C9                   ret
  10++D156
# file closed: ././Variables/CopyXX18toXX15.asm
 768+ D156                                      include "./Variables/CopyXX18ScaledToXX15.asm"
# file opened: ././Variables/CopyXX18ScaledToXX15.asm
   1++D156 21 0B C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D159 11 68 C0                             ld      de,UBnkDrawCam0xLo
   3++D15C                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D15C ED A0       >		                ldi
   3++D15E ED A0       >		                ldi
   3++D160 ED A0       >		                ldi
   3++D162 ED A0       >		                ldi
   3++D164 ED A0       >		                ldi
   3++D166 ED A0       >		                ldi
   3++D168 ED A0       >		                ldi
   3++D16A ED A0       >		                ldi
   3++D16C ED A0       >		                ldi
   4++D16E C9                                   ret
   5++D16F
   6++D16F              CopyCameraToXX15Signed:
   7++D16F 2A 68 C0             ld  hl,(UBnkDrawCam0xLo)
   8++D172 3A 6A C0             ld  a,(UBnkDrawCam0xSgn)
   9++D175 B4                   or  h
  10++D176 67                   ld  h,a
  11++D177 22 74 C0             ld  (UBnkXScaled),hl
  12++D17A 2A 6B C0             ld  hl,(UBnkDrawCam0yLo)
  13++D17D 3A 6D C0             ld  a,(UBnkDrawCam0ySgn)
  14++D180 B4                   or  h
  15++D181 67                   ld  h,a
  16++D182 22 76 C0             ld  (UBnkYScaled),hl
  17++D185 2A 6E C0             ld  hl,(UBnkDrawCam0zLo)
  18++D188 3A 70 C0             ld  a,(UBnkDrawCam0zSgn)
  19++D18B B4                   or  h
  20++D18C 67                   ld  h,a
  21++D18D 22 78 C0             ld  (UBnkZScaled),hl
  22++D190 C9                   ret
  23++D191
  24++D191              CopyXX18ScaledToXX15:
  25++D191              CopyDrawCamToScaledMatrix:
  26++D191                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D191 3A 70 C0    >               ld       a,(UBnkDrawCam0zSgn)
  26++D194 32 79 C0    >               ld       (UBnkZScaledSign),a
  27++D197                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D197 3A 68 C0    >               ld       a,(UBnkDrawCam0xLo)
  27++D19A 32 74 C0    >               ld       (UBnkXScaled),a
  28++D19D                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D19D 3A 6A C0    >               ld       a,(UBnkDrawCam0xSgn)
  28++D1A0 32 75 C0    >               ld       (UBnkXScaledSign),a
  29++D1A3                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D1A3 3A 6B C0    >               ld       a,(UBnkDrawCam0yLo)
  29++D1A6 32 76 C0    >               ld       (UBnkYScaled),a
  30++D1A9                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D1A9 3A 6D C0    >               ld       a,(UBnkDrawCam0ySgn)
  30++D1AC 32 77 C0    >               ld       (UBnkYScaledSign),a
  31++D1AF                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D1AF 3A 6E C0    >               ld       a,(UBnkDrawCam0zLo)
  31++D1B2 32 78 C0    >               ld       (UBnkZScaled),a
  32++D1B5 C9                   ret
  33++D1B6
  34++D1B6              CopyXX15ToXX18Scaled:
  35++D1B6              CopyScaledMatrixToDrawCam:
  36++D1B6                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D1B6 3A 79 C0    >               ld       a,(UBnkZScaledSign)
  36++D1B9 32 70 C0    >               ld       (UBnkDrawCam0zSgn),a
  37++D1BC                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D1BC 3A 74 C0    >               ld       a,(UBnkXScaled)
  37++D1BF 32 68 C0    >               ld       (UBnkDrawCam0xLo),a
  38++D1C2                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D1C2 3A 75 C0    >               ld       a,(UBnkXScaledSign)
  38++D1C5 32 6A C0    >               ld       (UBnkDrawCam0xSgn),a
  39++D1C8                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D1C8 3A 76 C0    >               ld       a,(UBnkYScaled)
  39++D1CB 32 6B C0    >               ld       (UBnkDrawCam0yLo),a
  40++D1CE                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D1CE 3A 77 C0    >               ld       a,(UBnkYScaledSign)
  40++D1D1 32 6D C0    >               ld       (UBnkDrawCam0ySgn),a
  41++D1D4                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D1D4 3A 78 C0    >               ld       a,(UBnkZScaled)
  41++D1D7 32 6E C0    >               ld       (UBnkDrawCam0zLo),a
  42++D1DA C9                   ret
  43++D1DB
  44++D1DB
  45++D1DB              XX15EquXX15AddXX18:
  46++D1DB              LL94Z:
  47++D1DB 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D1DD 16 00                ld      d,0                                                     ;
  49++D1DF 3A 78 C0             ld      a,(UBnkZScaled)                                         ;
  50++D1E2 6F                   ld      l,a                                                     ;
  51++D1E3 3A 79 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D1E6 47                   ld      b,a                                                     ;
  53++D1E7 3A 6E C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D1EA 5F                   ld      e,a                                                     ;
  55++D1EB 3A 70 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D1EE 4F                   ld      c,a                                                     ;
  57++D1EF CD 3C CB             call    ADDHLDESignBC                                           ;
  58++D1F2 47                   ld      b,a                                                     ;
  59++D1F3 7C                   ld      a,h                                                     ;
  60++D1F4 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D1F5 32 79 C0             ld      (UBnkZScaledSign),a                                     ;
  62++D1F8 7D                   ld      a,l                                                     ;
  63++D1F9 32 78 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D1FC              LL94X:
  65++D1FC 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D1FE 16 00                ld      d,0                                                     ;
  67++D200 3A 74 C0             ld      a,(UBnkXScaled)                                         ;
  68++D203 6F                   ld      l,a                                                     ;
  69++D204 3A 75 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D207 47                   ld      b,a                                                     ;
  71++D208 3A 68 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D20B 5F                   ld      e,a                                                     ;
  73++D20C 3A 6A C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D20F 4F                   ld      c,a                                                     ;
  75++D210 CD 3C CB             call    ADDHLDESignBC                                           ;
  76++D213 47                   ld      b,a                                                     ;
  77++D214 7C                   ld      a,h                                                     ;
  78++D215 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D216 32 75 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D219 7D                   ld      a,l                                                     ;
  81++D21A 32 74 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D21D              LL94Y:
  83++D21D 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D21F 16 00                ld      d,0                                                     ;
  85++D221 3A 76 C0             ld      a,(UBnkYScaled)                                         ;
  86++D224 6F                   ld      l,a                                                     ;
  87++D225 3A 77 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D228 47                   ld      b,a                                                     ;
  89++D229 3A 6B C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D22C 5F                   ld      e,a                                                     ;
  91++D22D 3A 6D C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D230 4F                   ld      c,a                                                     ;
  93++D231 CD 3C CB             call    ADDHLDESignBC                                           ;
  94++D234 47                   ld      b,a                                                     ;
  95++D235 7C                   ld      a,h                                                     ;
  96++D236 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D237 32 77 C0             ld      (UBnkYScaledSign),a                                     ;
  98++D23A 7D                   ld      a,l                                                     ;
  99++D23B 32 76 C0             ld      (UBnkYScaled),a                                         ;
 100++D23E C9                   ret
 101++D23F
# file closed: ././Variables/CopyXX18ScaledToXX15.asm
 769+ D23F                                      include "./Variables/CopyXX12ToScaled.asm"
# file opened: ././Variables/CopyXX12ToScaled.asm
   1++D23F              CopyXX12ToScaled:
   2++D23F              CopyResultToScaled:
   3++D23F                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D23F 3A 7A C0    >               ld       a,(XX12+0)
   3++D242 32 74 C0    >               ld       (UBnkXScaled),a
   4++D245                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D245 3A 7C C0    >               ld       a,(XX12+2)
   4++D248 32 76 C0    >               ld       (UBnkYScaled),a
   5++D24B                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D24B 3A 7E C0    >               ld       a,(XX12+4)
   5++D24E 32 78 C0    >               ld       (UBnkZScaled),a
   6++D251 C9                   ret
   7++D252
# file closed: ././Variables/CopyXX12ToScaled.asm
 770+ D252              ;--------------------------------------------------------------------------------------------------------
 771+ D252                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D252              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D252              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D252              ;;; S = XX12 XSign Xor XX15 XSign
   4++D252              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D252              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D252              ;;; R = T
   7++D252              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D252              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D252              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D252              ;;; Q = A * Q /256 usigned (zdot)
  11++D252              ;;; R = T
  12++D252              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D252
  14++D252
  15++D252
  16++D252
  17++D252
  18++D252              MacroAequDxEdiv256usgn:	MACRO
  19++D252 ~            						mul
  20++D252 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D252              						ENDM
  22++D252              DotProductXX12XX15:
  23++D252 3A 7A C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D255                      IfAIsZeroGoto dotxskipzero
  24++D255 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D256 CA 73 D2    >				jp	z,dotxskipzero
  25++D259 5F                   ld          e,a
  26++D25A 3A 74 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D25D 57                   ld          d,a                     ; de = xx12 x signed
  28++D25E                      IfAIsZeroGoto dotxskipzero
  28++D25E A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D25F CA 73 D2    >				jp	z,dotxskipzero
  29++D262 ED 30        		mul
  30++D264 42                   ld          b,d                     ; b = result
  31++D265 3A 7B C0             ld          a,(UBnkXX12xSign)
  32++D268 21 75 C0             ld          hl,UBnkXScaledSign
  33++D26B AE                   xor         (hl)
  34++D26C E6 80                and         $80                     ; so sign bit only
  35++D26E FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D270 C3 77 D2             jp          dotmuly
  37++D273              dotxskipzero:
  38++D273 AF                   xor         a
  39++D274 47                   ld          b,a
  40++D275 FD 67                ld          iyh,a
  41++D277              dotmuly:
  42++D277              ; now we have b = XX12 x &d  norm x signed
  43++D277 3A 7C C0             ld          a,(UBnkXX12yLo)
  44++D27A                      IfAIsZeroGoto dotyskipzero
  44++D27A A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D27B CA 9A D2    >				jp	z,dotyskipzero
  45++D27E 5F                   ld          e,a
  46++D27F 3A 76 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D282                      IfAIsZeroGoto dotyskipzero
  47++D282 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D283 CA 9A D2    >				jp	z,dotyskipzero
  48++D286 57                   ld          d,a                     ; de = xx12 x signed
  49++D287 ED 30                mul
  50++D289 4A                   ld          c,d                     ; c = result
  51++D28A DD 69                ld          ixl,c
  52++D28C 3A 7D C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D28F 21 77 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D292 AE                   xor         (hl)                    ; XX15+3
  55++D293 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D295 DD 67                ld          ixh,a
  57++D297 C3 9E D2             jp          dotaddxy
  58++D29A              dotyskipzero:
  59++D29A AF                   xor         a
  60++D29B 4F                   ld          c,a
  61++D29C DD 67                ld          ixh,a
  62++D29E              dotaddxy:
  63++D29E              ; Optimise later as this is 16 bit
  64++D29E 26 00                ld          h,0                     ;
  65++D2A0 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D2A1 16 00                ld          d,0                     ;
  67++D2A3 59                   ld          e,c                     ; de = ylo + yscaled
  68++D2A4 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D2A6 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D2A7 CD 3C CB             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D2AA 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D2AB 3A 7E C0             ld          a,(UBnkXX12zLo)         ;
  73++D2AE                      IfAIsZeroGoto dotzskipzero
  73++D2AE A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D2AF CA D4 D2    >				jp	z,dotzskipzero
  74++D2B2 5F                   ld          e,a                     ;
  75++D2B3 3A 78 C0             ld          a,(UBnkZScaled)         ;
  76++D2B6                      IfAIsZeroGoto dotzskipzero
  76++D2B6 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D2B7 CA D4 D2    >				jp	z,dotzskipzero
  77++D2BA 57                   ld          d,a
  78++D2BB ED 30                mul
  79++D2BD E5                   push        hl                      ; save prev result
  80++D2BE 3A 79 C0             ld          a,(UBnkZScaledSign)
  81++D2C1 21 7F C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D2C4 AE                   xor         (hl)                    ; hi sign
  83++D2C5 E6 80                and         $80                     ; a = sign of multiply
  84++D2C7 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D2C8 E1                   pop         hl
  86++D2C9 5A                   ld          e,d
  87++D2CA 16 00                ld          d,0
  88++D2CC CD 3C CB             call ADDHLDESignBC
  89++D2CF 32 22 94             ld          (varS),a
  90++D2D2 7D                   ld          a,l
  91++D2D3 C9                   ret                                 ; returns with A = value, varS = sign
  92++D2D4              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D2D4 78                   ld          a,b
  94++D2D5 32 22 94             ld          (varS),a
  95++D2D8 7D                   ld          a,l
  96++D2D9 C9                   ret
  97++D2DA              ;;;;       DotProductXX12XX15:
  98++D2DA              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D2DA              ;;;;       ld          e,a
 100++D2DA              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D2DA              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D2DA              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D2DA              ;;;;		mul
 104++D2DA              ;;;;       ld          b,d                     ; b as var T
 105++D2DA              ;;;;       ld          a,(UBnkXX12xSign)
 106++D2DA              ;;;;       ld          hl,UBnkXScaledSign
 107++D2DA              ;;;;       xor         (hl)
 108++D2DA              ;;;;       and         $80                     ; so sign bit only
 109++D2DA              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D2DA              ;;;; now we have b = XX12 x & norm x signed
 111++D2DA              ;;;; by here B = xlo & xscaled C = result sign
 112++D2DA              ;;;;       ld          a,(UBnkXX12yLo)
 113++D2DA              ;;;;       ld          e,a
 114++D2DA              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D2DA              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D2DA              ;;;;       mul
 117++D2DA              ;;;;       ld          a,d
 118++D2DA              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D2DA              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D2DA              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D2DA              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D2DA              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D2DA              ;;;;       xor         (hl)                    ; XX15+3
 124++D2DA              ;;;;       and         $80
 125++D2DA              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D2DA              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D2DA              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D2DA              ;;;;       ld          e,a                     ; use e as var Q
 129++D2DA              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D2DA              ;;;;       ld          d,a
 131++D2DA              ;;;;       mul
 132++D2DA              ;;;;       ld          a,d
 133++D2DA              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D2DA              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D2DA              ;;;;       ld          a,(UBnkZScaledSign)
 136++D2DA              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D2DA              ;;;;       xor         (hl)                    ; hi sign
 138++D2DA              ;;;;       and         $80
 139++D2DA              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D2DA              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D2DA
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 772+ D2DA              ;--------------------------------------------------------------------------------------------------------
 773+ D2DA              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 774+ D2DA                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D2DA              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D2DA              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D2DA              ScaleNormal:
   4++D2DA              LL93:
   5++D2DA 3A 27 94             ld      a,(XX17)                    ; scale--
   6++D2DD DD 6F        		ld		ixl,a
   7++D2DF 3A 78 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D2E2 DD 2D        		dec		ixl
   9++D2E4 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D2E5              ScaleLoop:
  11++D2E5              LL933:
  12++D2E5 21 74 C0             ld      hl,XX15
  13++D2E8 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D2EA 23                   inc     hl							; looking at XX15 x sign now
  15++D2EB 23                   inc     hl							; looking at XX15 y Lo now
  16++D2EC CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D2EE 23           		inc		hl							; looking at XX15 y sign now
  18++D2EF 23           		inc		hl							; looking at XX15 z Lo now
  19++D2F0 CB 3E        		srl		(hl)
  20++D2F2 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D2F3 DD 2D                dec     ixl                         ; reduce scale
  22++D2F5 F2 E5 D2             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D2F8 C9                   ret
  24++D2F9
# file closed: ./Universe/ScaleNormal.asm
 775+ D2F9              ;--------------------------------------------------------------------------------------------------------
 776+ D2F9                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D2F9              ScaleObjectDistance:
   2++D2F9              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D2F9 3A 10 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D2FC 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D2FD              LL90:                                       ; scaling object distance
   6++D2FD 3A 6F C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D300 47                   ld      b,a                         ; z_hi (yReg)
   8++D301                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D301 FE 00       >                 cp     0
   8++D303 C8          >                 ret    z
   9++D304              LL90Loop:
  10++D304              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D304 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D305                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D305 2A 6B C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D308 CB 3C       >                    srl   h
  12++D30A CB 1D       >                    rr    l
  12++D30C 22 6B C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D30F                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D30F 2A 68 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D312 CB 3C       >                    srl   h
  13++D314 CB 1D       >                    rr    l
  13++D316 22 68 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D319                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D319 2A 6E C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D31C CB 3C       >                    srl   h
  14++D31E CB 1D       >                    rr    l
  14++D320 22 6E C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D323 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D324                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D324 FE 00       >				cp	0
  16++D326 C2 04 D3    >				jp	nz,LL90Loop
  17++D329 C9                   ret
  18++D32A
# file closed: ./Universe/ScaleObjectDistance.asm
 777+ D32A              ;--------------------------------------------------------------------------------------------------------
 778+ D32A
 779+ D32A              ; Backface cull
 780+ D32A              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 781+ D32A              ; normal vector = cross product of ship ccordinates
 782+ D32A              ;
 783+ D32A
 784+ D32A                                      include "./Variables/CopyFaceToXX15.asm"
# file opened: ././Variables/CopyFaceToXX15.asm
   1++D32A 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D32B 47                                   ld      b,a                                                    ;;;
   3++D32C E6 80                                and     $80
   4++D32E 32 75 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D331 78                                   ld      a,b
   6++D332 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D334 47                                   ld      b,a
   8++D335 E6 80                                and     $80
   9++D337 32 77 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D33A 78                                   ld      a,b
  11++D33B CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D33D E6 80                                and     $80
  13++D33F 32 79 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D342 23                                   inc     hl                          ; move to X ccord
  15++D343 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D344 32 74 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D347 23                                   inc     hl                                                                                                                 ;;;
  18++D348 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D349 32 76 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D34C 23                                   inc     hl                                                                                                                 ;;;
  21++D34D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D34E 32 78 C0                             ld      (UBnkZScaled),a
  23++D351 C9                                   ret
  24++D352
# file closed: ././Variables/CopyFaceToXX15.asm
 785+ D352                                      include "./Variables/CopyFaceToXX12.asm"
# file opened: ././Variables/CopyFaceToXX12.asm
   1++D352 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D353 47                                   ld      b,a                         ; save sign bits to b
   3++D354 E6 80                                and     $80
   4++D356 32 7B C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D359 78                                   ld      a,b
   6++D35A CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D35C 47                                   ld      b,a
   8++D35D E6 80                                and     $80
   9++D35F 32 7D C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D362 78                                   ld      a,b
  11++D363 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D365 E6 80                                and     $80
  13++D367 32 7F C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D36A 23                                   inc     hl                          ; move to X ccord
  15++D36B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D36C 32 7A C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D36F 23                                   inc     hl                                                                                                                 ;;;
  18++D370 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D371 32 7C C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D374 23                                   inc     hl                                                                                                                 ;;;
  21++D375 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D376 32 7E C0                             ld      (UBnkXX12zLo),a
  23++D379 C9                                   ret
  24++D37A
# file closed: ././Variables/CopyFaceToXX12.asm
 786+ D37A              ;--------------------------------------------------------------
 787+ D37A              ; Original loginc in EE29 (LL9 4 of 12)
 788+ D37A              ; Enters with XX4 = z distnace scaled to 1 .. 31
 789+ D37A              ; get number of faces * 4      FaceCntX4
 790+ D37A              ; return if no faces
 791+ D37A              ; get Face Normal scale factor FaceScale (XX17)
 792+ D37A              ; get ship pos z hi     (XX18)
 793+ D37A              ; While Z hi <> 0
 794+ D37A              ;    FaceScale = FaceScale + 1           (XX17)
 795+ D37A              ;    Ship pos y = ship pos y / 2         (XX18)
 796+ D37A              ;    ship pos x = ship pos x / 2         (XX18)
 797+ D37A              ;    ship pos z = ship pos z / 2         (XX18)
 798+ D37A              ; Loop
 799+ D37A              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 800+ D37A              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 801+ D37A              ; Copy XX12 into XX18
 802+ D37A              ; For each face
 803+ D37A              ;     Get Face sign and visibility distance byte
 804+ D37A              ;     if normal visibility range  < XX4
 805+ D37A              ;        Get Face data into XX12
 806+ D37A              ;        if FaceScale (XX17) >= 4
 807+ D37A              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 808+ D37A              ;        else
 809+ D37A              ;           Copy FaceScale scaled to X  (XX17)
 810+ D37A              ;LabelOverflowLoop:
 811+ D37A              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 812+ D37A              ;           While X >= 0
 813+ D37A              ;              X--                                                                                                  ::LL93
 814+ D37A              ;              if  x >= 0
 815+ D37A              ;                  XX15x = XX15x / 2
 816+ D37A              ;                  XX15y = XX15y / 2
 817+ D37A              ;                  XX15y = XX15y / 2
 818+ D37A              ;           loop
 819+ D37A              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 820+ D37A              ;           if A > 256 (i.e. was overflow)
 821+ D37A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 822+ D37A              ;               X = 1
 823+ D37A              ;               Goto LabelOverflowLoop
 824+ D37A              ;           else
 825+ D37A              ;              Scaled (XX15) Z = AddZ
 826+ D37A              ;           endif
 827+ D37A              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 828+ D37A              ;           if A > 256 (i.e. was overflow)
 829+ D37A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 830+ D37A              ;               X = 1
 831+ D37A              ;               Goto LabelOverflowLoop
 832+ D37A              ;           else
 833+ D37A              ;              Scaled (XX15) X = AddX
 834+ D37A              ;           endif
 835+ D37A              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 836+ D37A              ;           if A > 256 (i.e. was overflow)
 837+ D37A              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 838+ D37A              ;               X = 1
 839+ D37A              ;               Goto LabelOverflowLoop
 840+ D37A              ;           else
 841+ D37A              ;              Scaled (XX15) Y = AddY
 842+ D37A              ;           endif
 843+ D37A              ;        endif
 844+ D37A              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 845+ D37A              ;        if dot product < 0
 846+ D37A              ;           set face visible
 847+ D37A              ;        else
 848+ D37A              ;           set face invisible
 849+ D37A              ;        end if
 850+ D37A              ;     else
 851+ D37A              ;       Set FaceVisibility to true
 852+ D37A              ;     end if
 853+ D37A              ; Next Face
 854+ D37A
 855+ D37A DD 25        ScaleDownXX15byIXH:     dec     ixh
 856+ D37C F8                                   ret     m
 857+ D37D 21 74 C0                             ld      hl,UBnkXScaled
 858+ D380 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 859+ D382 23                                   inc     hl                          ; looking at XX15 x sign now
 860+ D383 23                                   inc     hl                          ; looking at XX15 y Lo now
 861+ D384 CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 862+ D386 23                                   inc     hl                          ; looking at XX15 y sign now
 863+ D387 23                                   inc     hl                          ; looking at XX15 z Lo now
 864+ D388 CB 3E                                srl     (hl)
 865+ D38A C3 7A D3                             jp      ScaleDownXX15byIXH
 866+ D38D C9                                   ret
 867+ D38E
 868+ D38E 21 68 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 869+ D391 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 870+ D393 23                                   inc     hl                          ; looking at XX18 x sign now
 871+ D394 23                                   inc     hl                          ; looking at XX18 y Lo now
 872+ D395 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 873+ D397 23                                   inc     hl                          ; looking at XX18 y sign now
 874+ D398 23                                   inc     hl                          ; looking at XX18 z Lo now
 875+ D399 CB 3E                                srl     (hl)
 876+ D39B C9                                   ret
 877+ D39C
 878+ D39C              ;line of sight vector = [x y z] + face normal vector
 879+ D39C
 880+ D39C              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 881+ D39C              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 882+ D39C              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 883+ D39C              ;
 884+ D39C              ;--------------------------------------------------------------
 885+ D39C              ; line of sight (eye outwards dot face normal vector < 0
 886+ D39C              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 887+ D39C              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 888+ D39C              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 889+ D39C
 890+ D39C              RotateXX15ByTransMatXX16:
 891+ D39C 21 2F C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 892+ D39F CD C7 88                             call    XX12ProcessOneRow
 893+ D3A2 47                                   ld      b,a                                 ; get
 894+ D3A3 7D                                   ld      a,l
 895+ D3A4 B0                                   or      b
 896+ D3A5 32 7B C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 897+ D3A8 7D                                   ld      a,l
 898+ D3A9 32 7A C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 899+ D3AC
 900+ D3AC 21 35 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 901+ D3AF CD C7 88                             call    XX12ProcessOneRow
 902+ D3B2 47                                   ld      b,a                                 ; get
 903+ D3B3 7D                                   ld      a,l
 904+ D3B4 B0                                   or      b
 905+ D3B5 32 7D C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 906+ D3B8 7D                                   ld      a,l
 907+ D3B9 32 7C C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 908+ D3BC
 909+ D3BC 21 3B C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 910+ D3BF CD C7 88                             call    XX12ProcessOneRow
 911+ D3C2 47                                   ld      b,a                                 ; get
 912+ D3C3 7D                                   ld      a,l
 913+ D3C4 B0                                   or      b
 914+ D3C5 32 7F C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 915+ D3C8 7D                                   ld      a,l
 916+ D3C9 32 7E C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 917+ D3CC C9                                   ret
 918+ D3CD
 919+ D3CD                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D3CD 00           CurrentNormIdx  DB 0
   2++D3CE              ; SomeFacesVisible:
   3++D3CE              ; EE29:
   4++D3CE
   5++D3CE              ;   Backface cull logic  line of sight vector . face normal vector
   6++D3CE              ;       line of sight vector . face normal vector
   7++D3CE              ;       => line of sight vector = [x y z] + face normal vector
   8++D3CE              ;       Where [x y z] =
   9++D3CE              ;                                               [ [x y z] . sidev ]
  10++D3CE              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D3CE              ;                                               [ [x y z] . nosev ]
  12++D3CE              ;
  13++D3CE              ;   so project the [x y z] vector into the face's normal space
  14++D3CE              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D3CE              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D3CE              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D3CE              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D3CE              ;
  19++D3CE              ;                         [ [x y z] . sidev + normal_x ]
  20++D3CE              ;                       = [ [x y z] . roofv + normal_y ]
  21++D3CE              ;                         [ [x y z] . nosev + normal_z ]
  22++D3CE              ;
  23++D3CE              ; so
  24++D3CE              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D3CE              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D3CE              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D3CE              ;
  28++D3CE              ; where face is visible if visibility < 0
  29++D3CE              ;
  30++D3CE              ;   so we set XX15 to [x y z] . sidev
  31++D3CE              ;                     [x y z] . roofv
  32++D3CE              ;                     [x y z] . nosev
  33++D3CE              ;
  34++D3CE
  35++D3CE
  36++D3CE
  37++D3CE 3A 6F C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D3D1                                      IfAIsZeroGoto .ScaleDone            ;
  38++D3D1 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D3D2 CA FF D3    >				jp	z,.ScaleDone
  39++D3D5 2A 68 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D3D8 ED 5B 6B C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D3DC ED 4B 6E C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D3E0 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D3E2                                      ShiftHLRight1                       ; divide cam position by 2
  43++D3E2 CB 3C       >			   srl h
  43++D3E4 CB 1D       >			   rr  l
  44++D3E6                                      ShiftDERight1                       ;
  44++D3E6 CB 3A       >			   srl d
  44++D3E8 CB 1B       >			   rr  e
  45++D3EA                                      ShiftBCRight1                       ;
  45++D3EA CB 38       >			   srl b
  45++D3EC CB 19       >			   rr  c
  46++D3EE 78                                   ld      a,b                         ; loop if not scaled down
  47++D3EF                                      IfANotZeroGoto .ScaleNormalLoop     ;
  47++D3EF FE 00       >				cp	0
  47++D3F1 C2 E0 D3    >				jp	nz,.ScaleNormalLoop
  48++D3F4 22 68 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D3F7 ED 53 6B C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D3FB ED 43 6E C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D3FF FD 7D        .ScaleDone:             ld      a,iyl
  52++D401 32 27 94                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D404 C9                                   ret
  54++D405
  55++D405              ;;--BackFaceCull:
  56++D405              ;;--;debug:jp debug
  57++D405              ;;--; DEBUG  force for now
  58++D405              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D405              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D405              ;;--;
  61++D405              ;;--; DEBUG
  62++D405              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D405              ;;--                       ; break
  64++D405              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D405              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D405              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D405              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D405              ;;--
  69++D405              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D405              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D405              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D405              ;;--                        call    ScaleDrawcam
  73++D405              ;;--                        call    CopyDrawCamToScaled
  74++D405              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D405              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D405              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D405              ;;--                        ld      (varV),hl
  78++D405              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D405              ;;--                        srl     a                                                       ;
  80++D405              ;;--                        srl     a                                                       ;
  81++D405              ;;--                        ld      b,a                                                     ;
  82++D405              ;;--                        xor     a
  83++D405              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D405              ;;--ProcessNormalsLoop:     push    hl
  85++D405              ;;--                        push    bc
  86++D405              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D405              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D405              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D405              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D405              ;;--                        jp      .FaceVisible
  91++D405              ;;--; This bit needs to be added to force face visible
  92++D405              ;;--.LL87:                  call    CopyFaceToXX12
  93++D405              ;;--                        ld      a,(XX17)
  94++D405              ;;--                        JumpIfALTNusng 4,.LL92
  95++D405              ;;--.LL143:                 call    CopyXX18toXX15
  96++D405              ;;--                        jp      .LL89
  97++D405              ;;--.Ovflw:                 ld      a,(XX18)
  98++D405              ;;--                        srl     a
  99++D405              ;;--                        ld      (XX18),a
 100++D405              ;;--                        ld      a,(XX18+6)
 101++D405              ;;--                        srl     a
 102++D405              ;;--                        ld      (XX18+6),a
 103++D405              ;;--                        ld      a,(XX18+3)
 104++D405              ;;--                        srl     a
 105++D405              ;;--                        ld      (XX18+3),a
 106++D405              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D405              ;;--.LL92:                   ld      b,a
 108++D405              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D405              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D405              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D405              ;;--.LL93                   dec     b
 112++D405              ;;--                        jp      m, .LL94
 113++D405              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D405              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D405              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D405              ;;--                        dec     b
 117++D405              ;;--                        jp      p,.LL93Loop
 118++D405              ;;--; Add normal to XX15
 119++D405              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D405              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D405              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D405              ;;--                        ld      a,(XX18+8)
 123++D405              ;;--                        call    SAEquSRPlusAQ
 124++D405              ;;--                        jp      c,.Ovflw
 125++D405              ;;--                        ld      (UBnkZScaled),a
 126++D405              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D405              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D405              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D405              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D405              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D405              ;;--                        call    SAEquSRPlusAQ
 132++D405              ;;--                        jp      c,.Ovflw
 133++D405              ;;--                        ld      (UBnkXScaled),a
 134++D405              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D405              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D405              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D405              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D405              ;;--                        call    SAEquSRPlusAQ
 139++D405              ;;--                        jp      c,.Ovflw
 140++D405              ;;--                        ld      (UBnkYScaled),a
 141++D405              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D405              ;;--; calculate dot product:
 143++D405              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D405              ;;--                        ld      a,(UBnkXScaled)
 145++D405              ;;--                        call    AequAmulQdiv256
 146++D405              ;;--                        ld      (varT),a
 147++D405              ;;--                        ld      a,(UBnkXX12xSign)
 148++D405              ;;--                        ld      hl,UBnkXScaledSign
 149++D405              ;;--                        xor     (hl)
 150++D405              ;;--                        ld      (varS),a
 151++D405              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D405              ;;--                        ld      a,(UBnkYScaled)
 153++D405              ;;--                        call    AequAmulQdiv256
 154++D405              ;;--                        ld      (varQ),a
 155++D405              ;;--                        ldCopyByte  varT,varR
 156++D405              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D405              ;;--                        ld      hl, UBnkYScaledSign
 158++D405              ;;--                        xor     (hl)
 159++D405              ;;--                        call    SAEquSRPlusAQ
 160++D405              ;;--                        ld      (varT),a
 161++D405              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D405              ;;--                        ld      a,  (UBnkZScaled)
 163++D405              ;;--                        call    AequAmulQdiv256
 164++D405              ;;--                        ld      (varQ),a
 165++D405              ;;--                        ldCopyByte  varT, varR
 166++D405              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D405              ;;--                        ld      hl, UBnkXX12zSign
 168++D405              ;;--                        xor     (hl)
 169++D405              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D405              ;;--                        test    $80
 171++D405              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D405              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D405              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D405              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D405              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D405              ;;--                        call        SetFaceAVisible
 177++D405              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D405              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D405              ;;--                        pop         bc
 180++D405              ;;--                        pop         hl                      ; get normal data pointer back
 181++D405              ;;--                        ld          a,4
 182++D405              ;;--                        add         hl,a                    ; move to next normal entry
 183++D405              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D405              ;;--                        dec         b
 185++D405              ;;--                        jp          nz,ProcessNormalsLoop
 186++D405              ;;--                        ret
 187++D405
 188++D405
 189++D405
 190++D405
 191++D405              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D405              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D405              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D405              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D405              ;;;;;                        test    $80
 196++D405              ;;;;;                        jp      nz, FaceVisible
 197++D405              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D405              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D405              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D405              ;;;;;                        IfAIsZeroGoto .ScaleDone            ;
 201++D405              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D405              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D405              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D405              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D405              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D405              ;;;;;                        ShiftDERight1                       ;
 207++D405              ;;;;;                        ShiftBCRight1                       ;
 208++D405              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D405              ;;;;;                        IfANotZeroGoto .ScaleNormalLoop     ;
 210++D405              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D405              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D405              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D405              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D405              ;;;;;.ScaleDone:             ld      a,iyl
 215++D405              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D405              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D405              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D405              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D405              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D405              ;;;;;
 221++D405              ;;;;;
 222++D405              ;;;;;
 223++D405              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D405              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D405              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D405              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D405              ;;;;;                        ld      (varV),hl
 228++D405              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D405              ;;;;;                        srl     a                                                       ;
 230++D405              ;;;;;                        srl     a                                                       ;
 231++D405              ;;;;;                        ld      b,a                                                     ;
 232++D405              ;;;;;                        xor     a
 233++D405              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D405              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D405              ;;;;;                        push    bc
 236++D405              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D405              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D405              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D405              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D405              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D405              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D405              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D405              ;;;;;                        jp      .LL89
 244++D405              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D405              ;;;;;                        srl     a
 246++D405              ;;;;;                        ld      (XX18),a
 247++D405              ;;;;;                        ld      a,(XX18+6)
 248++D405              ;;;;;                        srl     a
 249++D405              ;;;;;                        ld      (XX18+6),a
 250++D405              ;;;;;                        ld      a,(XX18+3)
 251++D405              ;;;;;                        srl     a
 252++D405              ;;;;;                        ld      (XX18+3),a
 253++D405              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D405              ;;;;;.LL92:                  ld      b,a
 255++D405              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D405              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D405              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D405              ;;;;;.LL93                   dec     b
 259++D405              ;;;;;                        jp      m, .LL94
 260++D405              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D405              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D405              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D405              ;;;;;                        dec     b
 264++D405              ;;;;;                        jp      p,.LL93Loop
 265++D405              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D405              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D405              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D405              ;;;;;                        ld      a,(XX18+8)
 269++D405              ;;;;;                        call    SAEquSRPlusAQ
 270++D405              ;;;;;                        jp      c,.Ovflw
 271++D405              ;;;;;                        ld      (UBnkZScaled),a
 272++D405              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D405              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D405              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D405              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D405              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D405              ;;;;;                        call    SAEquSRPlusAQ
 278++D405              ;;;;;                        jp      c,.Ovflw
 279++D405              ;;;;;                        ld      (UBnkXScaled),a
 280++D405              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D405              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D405              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D405              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D405              ;;;;;                        call    SAEquSRPlusAQ
 285++D405              ;;;;;                        jp      c,.Ovflw
 286++D405              ;;;;;                        ld      (UBnkYScaled),a
 287++D405              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D405              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D405              ;;;;;                        ld      a,(UBnkXScaled)
 290++D405              ;;;;;                        call    AequAmulQdiv256
 291++D405              ;;;;;                        ld      (varT),a
 292++D405              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D405              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D405              ;;;;;                        xor     (hl)
 295++D405              ;;;;;                        ld      (varS),a
 296++D405              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D405              ;;;;;                        ld      a,(UBnkYScaled)
 298++D405              ;;;;;                        call    AequAmulQdiv256
 299++D405              ;;;;;                        ld      (varQ),a
 300++D405              ;;;;;                        ldCopyByte  varT,varR
 301++D405              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D405              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D405              ;;;;;                        xor     (hl)
 304++D405              ;;;;;                        call    SAEquSRPlusAQ
 305++D405              ;;;;;                        ld      (varT),a
 306++D405              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D405              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D405              ;;;;;                        call    AequAmulQdiv256
 309++D405              ;;;;;                        ld      (varQ),a
 310++D405              ;;;;;                        ldCopyByte  varT, varR
 311++D405              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D405              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D405              ;;;;;                        xor     (hl)
 314++D405              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D405              ;;;;;                        test    $80
 316++D405              ;;;;;                        jr      nz,.FaceVisible
 317++D405              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D405              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D405              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D405              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D405              ;;;;;                        call    SetFaceAVisible
 322++D405              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D405              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D405              ;;;;;                        pop         bc
 325++D405              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D405              ;;;;;                        ld          a,4
 327++D405              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D405              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D405              ;;;;;                        dec         b
 330++D405              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D405              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D405              ;;;;;
 333++D405
 334++D405              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 334++D405 3A 0A C3    >                   ld   a,(FaceCtX4Addr)
 334++D408 FE 00       >                   cp     0
 334++D40A C8          >                   ret    z
 335++D40B                                     ; break
 336++D40B CD 74 CF                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 337++D40E CD DC 86                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 338++D411 CD 56 D1                             call    LoadCraftToCamera           ; XX18 = camera
 339++D414                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 340++D414 3A 10 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 341++D417 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 342++D419              ; By this point XX18 = scaled draw cam and iyl = scale factor
 343++D419 CD CE D3                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 344++D41C CD 6F D1                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 345++D41F CD B2 89     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 346++D422 CD E7 D0                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 347++D425 21 F2 C8     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 348++D428 22 CA 93                             ld      (varV),hl
 349++D42B 3A 0A C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 350++D42E CB 3F                                srl     a                                                       ;
 351++D430 CB 3F                                srl     a                                                       ;
 352++D432 47                                   ld      b,a                                                     ;
 353++D433 AF                                   xor     a
 354++D434 32 CD D3                             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 355++D437 E5           .ProcessNormalsLoop:     push    hl
 356++D438 C5                                   push    bc
 357++D439 7E           .LL86:                  ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 358++D43A E6 1F                                and     $1F                                                     ;     if normal visibility range  < XX4
 359++D43C                                      JumpIfAGTENusng c,.FaceVisible                                  ; commented out for debuggging the skip
 359++D43C B9          >                        cp     c
 359++D43D D2 82 D5    >                        jp		nc,.FaceVisible
 360++D440              ; This bit needs to be added to force face visible
 361++D440 CD 52 D3     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 362++D443 3A 27 94                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 363++D446 47                                   ld      b,a
 364++D447                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 364++D447 FE 04       >                        cp      4
 364++D449 DA 84 D4    >                        jp		c,.ScaleNormByXX17
 365++D44C CD 31 D1     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 366++D44F C3 13 D5                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 367++D452 3A 68 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 368++D455 CB 3F                                srl     a                           ; which is held in XX18
 369++D457 32 68 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 370++D45A 3A 6E C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 371++D45D CB 3F                                srl     a                           ; .
 372++D45F 32 6E C0                             ld      (UBnkDrawCam0zLo),a         ; .
 373++D462 3A 6B C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 374++D465 CB 3F                                srl     a                           ; .
 375++D467 32 6B C0                             ld      (UBnkDrawCam0yLo),a        ; .
 376++D46A 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 377++D46C                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 377++D46C 3A 74 C0    >                    ld      a,(UBnkXScaled)
 377++D46F CB 3F       >                    srl     a
 377++D471 32 74 C0    >                    ld      (UBnkXScaled),a
 378++D474                                      ShiftMem8Right1 UBnkYScaled         ;
 378++D474 3A 76 C0    >                    ld      a,(UBnkYScaled)
 378++D477 CB 3F       >                    srl     a
 378++D479 32 76 C0    >                    ld      (UBnkYScaled),a
 379++D47C                                      ShiftMem8Right1 UBnkZScaled         ;
 379++D47C 3A 78 C0    >                    ld      a,(UBnkZScaled)
 379++D47F CB 3F       >                    srl     a
 379++D481 32 78 C0    >                    ld      (UBnkZScaled),a
 380++D484              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 381++D484              .ScaleNormByXX17:       ;ld      b,a
 382++D484 CD 0C D1                             call    CopyXX12toXX15
 383++D487 05           .LL93                   dec     b
 384++D488 FA A7 D4                             jp      m, .ScaledNorm
 385++D48B              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 385++D48B 3A 74 C0    >                    ld      a,(UBnkXScaled)
 385++D48E CB 3F       >                    srl     a
 385++D490 32 74 C0    >                    ld      (UBnkXScaled),a
 386++D493                                      ShiftMem8Right1 UBnkYScaled        ;
 386++D493 3A 76 C0    >                    ld      a,(UBnkYScaled)
 386++D496 CB 3F       >                    srl     a
 386++D498 32 76 C0    >                    ld      (UBnkYScaled),a
 387++D49B                                      ShiftMem8Right1 UBnkZScaled        ;
 387++D49B 3A 78 C0    >                    ld      a,(UBnkZScaled)
 387++D49E CB 3F       >                    srl     a
 387++D4A0 32 78 C0    >                    ld      (UBnkZScaled),a
 388++D4A3 05                                   dec     b                          ;
 389++D4A4 F2 8B D4                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 390++D4A7              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 391++D4A7              ; Add normal to XX15
 392++D4A7              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 393++D4A7              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 394++D4A7              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 395++D4A7              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 396++D4A7              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 396++D4A7 3A 78 C0    >               ld       a,(UBnkZScaled)
 396++D4AA 32 21 94    >               ld       (varR),a
 397++D4AD                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 397++D4AD 3A 7F C0    >               ld       a,(UBnkXX12zSign)
 397++D4B0 32 22 94    >               ld       (varS),a
 398++D4B3                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 398++D4B3 3A 6E C0    >               ld       a,(UBnkDrawCam0zLo)
 398++D4B6 32 20 94    >               ld       (varQ),a
 399++D4B9 3A 70 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 400++D4BC CD DF A7                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 401++D4BF DA 52 D4                             jp      c,.Ovflw
 402++D4C2 32 78 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 403++D4C5                                      ldCopyByte  varS, UBnkZScaledSign   ;
 403++D4C5 3A 22 94    >               ld       a,(varS)
 403++D4C8 32 79 C0    >               ld       (UBnkZScaledSign),a
 404++D4CB                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 404++D4CB 3A 74 C0    >               ld       a,(UBnkXScaled)
 404++D4CE 32 21 94    >               ld       (varR),a
 405++D4D1                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 405++D4D1 3A 7B C0    >               ld       a,(UBnkXX12xSign)
 405++D4D4 32 22 94    >               ld       (varS),a
 406++D4D7                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 406++D4D7 3A 68 C0    >               ld       a,(UBnkDrawCam0xLo)
 406++D4DA 32 20 94    >               ld       (varQ),a
 407++D4DD 3A 6A C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 408++D4E0 CD DF A7                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 409++D4E3 DA 52 D4                             jp      c,.Ovflw
 410++D4E6 32 74 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 411++D4E9                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 411++D4E9 3A 22 94    >               ld       a,(varS)
 411++D4EC 32 75 C0    >               ld       (UBnkXScaledSign),a
 412++D4EF                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 412++D4EF 3A 76 C0    >               ld       a,(UBnkYScaled)
 412++D4F2 32 21 94    >               ld       (varR),a
 413++D4F5                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 413++D4F5 3A 7D C0    >               ld       a,(UBnkXX12ySign)
 413++D4F8 32 22 94    >               ld       (varS),a
 414++D4FB                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 414++D4FB 3A 6B C0    >               ld       a,(UBnkDrawCam0yLo)
 414++D4FE 32 20 94    >               ld       (varQ),a
 415++D501 3A 6D C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 416++D504 CD DF A7                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 417++D507 DA 52 D4                             jp      c,.Ovflw                    ; .
 418++D50A 32 76 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 419++D50D                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 419++D50D 3A 22 94    >               ld       a,(varS)
 419++D510 32 77 C0    >               ld       (UBnkYScaledSign),a
 420++D513              ; calculate dot product LL89
 421++D513              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 421++D513 3A 7A C0    >               ld       a,(UBnkXX12xLo)
 421++D516 32 20 94    >               ld       (varQ),a
 422++D519 3A 74 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 423++D51C CD 4B A7                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 424++D51F 32 40 94                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 425++D522 3A 7B C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 426++D525 21 75 C0                             ld      hl,UBnkXScaledSign          ; .
 427++D528 AE                                   xor     (hl)                        ; .
 428++D529 32 22 94                             ld      (varS),a                    ; .
 429++D52C                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 429++D52C 3A 7C C0    >               ld       a,(UBnkXX12yLo)
 429++D52F 32 20 94    >               ld       (varQ),a
 430++D532 3A 76 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 431++D535 CD 4B A7                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 432++D538 32 20 94                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 433++D53B                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 433++D53B 3A 40 94    >               ld       a,(varT)
 433++D53E 32 21 94    >               ld       (varR),a
 434++D541 3A 7D C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 435++D544 21 77 C0                             ld      hl, UBnkYScaledSign         ; .
 436++D547 AE                                   xor     (hl)                        ; .
 437++D548 CD DF A7                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 438++D54B 32 40 94                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 439++D54E                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 439++D54E 3A 7E C0    >               ld       a,(UBnkXX12zLo)
 439++D551 32 20 94    >               ld       (varQ),a
 440++D554 3A 78 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 441++D557 CD 4B A7                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 442++D55A 32 20 94                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 443++D55D                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 443++D55D 3A 40 94    >               ld       a,(varT)
 443++D560 32 21 94    >               ld       (varR),a
 444++D563 3A 79 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 445++D566 21 7F C0                             ld      hl, UBnkXX12zSign           ; .
 446++D569 AE                                   xor     (hl)                        ; .
 447++D56A CD DF A7                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 448++D56D FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 449++D56F 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 450++D571 3A 22 94                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 451++D574 ED 27 80                             test    $80                         ; this should test S not A
 452++D577 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 453++D579 3A CD D3     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 454++D57C CD B4 CF                             call        SetFaceAHidden                                      ;           set face invisible
 455++D57F C3 88 D5                             jp          .ProcessNormalLoopEnd                                ;        end if
 456++D582 3A CD D3     .FaceVisible:            ld          a,(CurrentNormIdx)
 457++D585 CD AB CF                             call        SetFaceAVisible
 458++D588 21 CD D3     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 459++D58B 34                                   inc         (hl)                    ; move index pointer up by one
 460++D58C C1                                   pop         bc
 461++D58D E1                                   pop         hl                      ; get normal data pointer back
 462++D58E 3E 04                                ld          a,4
 463++D590 ED 31                                add         hl,a                    ; move to next normal entry
 464++D592 22 CA 93                             ld          (varV),hl               ; save as we need it again
 465++D595 05                                   dec         b
 466++D596 C2 37 D4                             jp          nz,.ProcessNormalsLoop
 467++D599 C9                                   ret
 468++D59A
# file closed: ././ModelRender/BackfaceCull.asm
 920+ D59A              ;--------------------------------------------------------------------------------------------------------
 921+ D59A              ; Process edges
 922+ D59A              ; .....................................................
 923+ D59A              TransposeNodeVal:   MACRO arg0?
 924+ D59A ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 925+ D59A ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 926+ D59A ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 927+ D59A ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 928+ D59A ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 929+ D59A ~            NodeXPositive\1
 929+ D59A ~
 930+ D59A ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 931+ D59A ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 932+ D59A ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 933+ D59A ~                    ld          h,0                                 ; but we don;t want the sign
 934+ D59A ~                    add         hl,bc                               ; its a 16 bit add
 935+ D59A ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 936+ D59A ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 937+ D59A ~                    ld          (UbnkXPointSign),a
 938+ D59A ~                    jp          FinishedThisNode\1
 939+ D59A ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 940+ D59A ~            NodeNegative\1
 940+ D59A ~
 941+ D59A ~            LL52\1
 941+ D59A ~                                                              ;
 942+ D59A ~                    ld          hl,(UBnK\0lo)                       ; Coord
 943+ D59A ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 944+ D59A ~                    ld          b,0                                 ; XX12 lo byte only
 945+ D59A ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 946+ D59A ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 947+ D59A ~            NodeXNegSignChange\1
 947+ D59A ~
 948+ D59A ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 949+ D59A ~                    call        negate16hl                          ; Convert back to positive and flip sign
 950+ D59A ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 951+ D59A ~                    xor         $80                                 ; Flip bit 7
 952+ D59A ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 953+ D59A ~            SetAndMop\1
 953+ D59A ~
 954+ D59A ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 955+ D59A ~            FinishedThisNode\1
 956+ D59A                                  ENDM
 957+ D59A
 958+ D59A              ;------------------------------------------------------------------------------------------------------------------------------
 959+ D59A              CopyByteAtNextHL:   MACRO targetaddr
 960+ D59A ~                                inc         hl                                  ; vertex byte#1
 961+ D59A ~                                ld          a,(hl)                              ;
 962+ D59A ~                                ld          (targetaddr),a                     ; XX15+2 = (V),Y
 963+ D59A                                  ENDM
 964+ D59A              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 965+ D59A
 966+ D59A              TransposeXX12NodeToXX15:
 967+ D59A                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 967+ D59A 3A 0D C0    >               ld       a,(UBnKxsgn)
 967+ D59D 32 76 C0    >               ld       (UbnkXPointSign),a
 968+ D5A0 ED 4B 7A C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 969+ D5A4 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 970+ D5A5 FA BB D5             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 971+ D5A8              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 972+ D5A8              NodeXPositiveX:
 973+ D5A8 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 974+ D5A9 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 975+ D5AB 2A 0B C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 976+ D5AE 26 00                ld          h,0                                 ; but we don;t want the sign
 977+ D5B0 09                   add         hl,bc                               ; its a 16 bit add
 978+ D5B1 22 74 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 979+ D5B4 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 980+ D5B5 32 76 C0             ld          (UbnkXPointSign),a
 981+ D5B8 C3 D7 D5             jp          FinishedThisNodeX
 982+ D5BB              ; If we get here then _sign and vertv_ have different signs so do subtract
 983+ D5BB              NodeNegativeX:
 984+ D5BB              LL52X:                                                 ;
 985+ D5BB 2A 0B C0             ld          hl,(UBnKxlo)                       ; Coord
 986+ D5BE ED 4B 7A C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 987+ D5C2 06 00                ld          b,0                                 ; XX12 lo byte only
 988+ D5C4 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 989+ D5C6 F2 D4 D5             jp          p,SetAndMopX                       ; if result is positive skip to write back
 990+ D5C9              NodeXNegSignChangeX:
 991+ D5C9              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 992+ D5C9 CD D8 A4             call        negate16hl                          ; Convert back to positive and flip sign
 993+ D5CC 3A 76 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 994+ D5CF EE 80                xor         $80                                 ; Flip bit 7
 995+ D5D1 32 76 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 996+ D5D4              SetAndMopX:
 997+ D5D4 22 0B C0             ld          (UBnKxlo),hl                       ; XX15+0
 998+ D5D7              FinishedThisNodeX:
 999+ D5D7
1000+ D5D7              LL53:
1001+ D5D7
1002+ D5D7                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1002+ D5D7 3A 10 C0    >               ld       a,(UBnKysgn)
1002+ D5DA 32 79 C0    >               ld       (UbnkYPointSign),a
1003+ D5DD ED 4B 7C C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1004+ D5E1 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1005+ D5E2 FA F8 D5             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1006+ D5E5              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1007+ D5E5              NodeXPositiveY:
1008+ D5E5 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1009+ D5E6 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1010+ D5E8 2A 0E C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1011+ D5EB 26 00                ld          h,0                                 ; but we don;t want the sign
1012+ D5ED 09                   add         hl,bc                               ; its a 16 bit add
1013+ D5EE 22 77 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1014+ D5F1 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1015+ D5F2 32 76 C0             ld          (UbnkXPointSign),a
1016+ D5F5 C3 14 D6             jp          FinishedThisNodeY
1017+ D5F8              ; If we get here then _sign and vertv_ have different signs so do subtract
1018+ D5F8              NodeNegativeY:
1019+ D5F8              LL52Y:                                                 ;
1020+ D5F8 2A 0E C0             ld          hl,(UBnKylo)                       ; Coord
1021+ D5FB ED 4B 7C C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1022+ D5FF 06 00                ld          b,0                                 ; XX12 lo byte only
1023+ D601 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1024+ D603 F2 11 D6             jp          p,SetAndMopY                       ; if result is positive skip to write back
1025+ D606              NodeXNegSignChangeY:
1026+ D606              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1027+ D606 CD D8 A4             call        negate16hl                          ; Convert back to positive and flip sign
1028+ D609 3A 79 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1029+ D60C EE 80                xor         $80                                 ; Flip bit 7
1030+ D60E 32 79 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1031+ D611              SetAndMopY:
1032+ D611 22 0E C0             ld          (UBnKylo),hl                       ; XX15+0
1033+ D614              FinishedThisNodeY:
1034+ D614
1035+ D614
1036+ D614              TransposeZ:
1037+ D614              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1038+ D614 3A 7F C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1039+ D617                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1039+ D617 CB 7F       >                        bit 	7,a
1039+ D619 C2 2D D6    >                        jp      nz,NegativeNodeZ
1040+ D61C 3A 7E C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1041+ D61F 2A 11 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1042+ D622 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1043+ D624 7D                   ld          a,l
1044+ D625 32 40 94             ld          (varT),a                            ;                                                                           ;;;
1045+ D628 7C                   ld          a,h
1046+ D629 32 1F 94             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1047+ D62C C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1048+ D62D              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1049+ D62D              NegativeNodeZ:
1050+ D62D              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1051+ D62D 2A 11 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1052+ D630 ED 4B 7E C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1053+ D634 06 00                ld          b,0                                 ; upper byte will be garbage
1054+ D636                      ClearCarryFlag
1054+ D636 B7          >                        or a
1055+ D637 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1056+ D639 7D                   ld          a,l
1057+ D63A 32 40 94             ld          (varT),a                            ; t = result low
1058+ D63D 7C                   ld          a,h
1059+ D63E 32 1F 94             ld          (varU),a                            ; u = result high
1060+ D641 E2 4E D6             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1061+ D644              LL56Overflow:
1062+ D644 FE 00                cp          0                                   ; is varU 0?
1063+ D646 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1064+ D648 3A 40 94             ld          a,(varT)                            ; T \ restore z lo
1065+ D64B                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1065+ D64B FE 04       >                   cp    4
1065+ D64D D0          >                   ret	 nc
1066+ D64E              MakeNodeClose:
1067+ D64E              LL140:                                                  ; else make node close
1068+ D64E AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1069+ D64F 32 1F 94             ld          (varU),a                            ; U
1070+ D652 3E 04                ld          a,4                                 ; lo
1071+ D654 32 40 94             ld          (varT),a                            ; T
1072+ D657 C9                   ret
1073+ D658              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1074+ D658              ProcessVisibleNode:
1075+ D658              RotateNode:                                                                                                                         ;;;
1076+ D658 CD B6 D0             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1077+ D65B              LL52LL53LL54LL55
1078+ D65B              TransposeNode:
1079+ D65B CD 9A D5             call        TransposeXX12NodeToXX15
1080+ D65E
1081+ D65E              ; ......................................................                                                         ;;;
1082+ D65E              NodeAdditionsDone:
1083+ D65E              Scale16BitTo8Bit:
1084+ D65E              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1085+ D65E 3A 1F 94             ld          a,(varU)                            ; U \ z hi
1086+ D661 21 75 C0             ld          hl,UbnkXPointHi
1087+ D664 B6                   or          (hl)                                ; XX15+1    \ x hi
1088+ D665 21 78 C0             ld          hl,UbnkYPointHi
1089+ D668 B6                   or          (hl)                                ; XX15+4    \ y hi
1090+ D669              AreXYZHiAllZero:
1091+ D669 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1092+ D66B              DivideXYZBy2:
1093+ D66B                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1093+ D66B 2A 74 C0    >                    ld    hl,(UbnkXPoint)
1093+ D66E CB 3C       >                    srl   h
1093+ D670 CB 1D       >                    rr    l
1093+ D672 22 74 C0    >                    ld    (UbnkXPoint),hl
1094+ D675                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1094+ D675 2A 77 C0    >                    ld    hl,(UbnkYPoint)
1094+ D678 CB 3C       >                    srl   h
1094+ D67A CB 1D       >                    rr    l
1094+ D67C 22 77 C0    >                    ld    (UbnkYPoint),hl
1095+ D67F 3A 1F 94             ld          a,(varU)                            ; U \ z hi
1096+ D682 67                   ld          h,a
1097+ D683 3A 40 94             ld          a,(varT)                            ; T \ z lo
1098+ D686 6F                   ld          l,a
1099+ D687                      ShiftHLRight1
1099+ D687 CB 3C       >			   srl h
1099+ D689 CB 1D       >			   rr  l
1100+ D68B 7C                   ld          a,h
1101+ D68C 32 1F 94             ld          (varU),a
1102+ D68F 7D                   ld          a,l
1103+ D690 32 40 94             ld          (varT),a                            ; T \ z lo
1104+ D693 C3 5E D6             jp          Scale16BitTo8Bit                    ; loop U
1105+ D696              NodeScalingDone:
1106+ D696              LL60:                                                   ; hi U rolled to 0, exited loop above.
1107+ D696              ProjectNodeToScreen:
1108+ D696                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1108+ D696 3A 40 94    >               ld       a,(varT)
1108+ D699 32 20 94    >               ld       (varQ),a
1109+ D69C 3A 74 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1110+ D69F 21 20 94             ld          hl,varQ
1111+ D6A2 BE                   cp          (hl)                                ; Q
1112+ D6A3                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1112+ D6A3 DA AC D6    >                        jp		c,DoSmallAngle
1113+ D6A6 CD E6 A8             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1114+ D6A9 C3 B4 D6             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1115+ D6AC              DoSmallAngle:                                           ; small x angle
1116+ D6AC              LL69:
1117+ D6AC              ; TODO check if we need to retain BC as this trashes it
1118+ D6AC              ;Input: BC = Dividend, DE = Divisor, HL = 0
1119+ D6AC              ;Output: BC = Quotient, HL = Remainder
1120+ D6AC 47                   ld      b,a
1121+ D6AD CD 31 A3             call    DIV16UNDOC
1122+ D6B0 79                   ld      a,c
1123+ D6B1 32 21 94             ld      (varR),a
1124+ D6B4               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1125+ D6B4              SkipSmallAngle:
1126+ D6B4              ScaleX:
1127+ D6B4              LL65:                                                   ; both continue for scaling based on z
1128+ D6B4 3A 76 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1129+ D6B7                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1129+ D6B7 CB 7F       >                        bit 	7,a
1129+ D6B9 C2 CC D6    >                        jp      nz,NegativeXPoint
1130+ D6BC              ; ......................................................
1131+ D6BC              PositiveXPoint:
1132+ D6BC 3A 21 94             ld          a,(varR)
1133+ D6BF 6F                   ld          l,a
1134+ D6C0 3A 1F 94             ld          a,(varU)
1135+ D6C3 67                   ld          h,a
1136+ D6C4 3E 80                ld          a,ScreenCenterX
1137+ D6C6 ED 31                add         hl,a
1138+ D6C8 EB                   ex          de,hl
1139+ D6C9 C3 DC D6             jp          StoreXPoint
1140+ D6CC              NegativeXPoint:
1141+ D6CC              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1142+ D6CC 3A 21 94             ld          a,(varR)
1143+ D6CF 6F                   ld          l,a
1144+ D6D0 3A 1F 94             ld          a,(varU)
1145+ D6D3 67                   ld          h,a
1146+ D6D4 0E 80                ld          c,ScreenCenterX
1147+ D6D6 06 00                ld          b,0
1148+ D6D8                      ClearCarryFlag
1148+ D6D8 B7          >                        or a
1149+ D6D9 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1150+ D6DB EB                   ex          de,hl
1151+ D6DC              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1152+ D6DC FD 73 00             ld          (iy+0),e                            ; Update X Point
1153+ D6DF FD 72 01             ld          (iy+1),d                            ; Update X Point
1154+ D6E2 FD 23                inc         iy
1155+ D6E4 FD 23                inc         iy
1156+ D6E6              ; ......................................................
1157+ D6E6              LL66:
1158+ D6E6              ProcessYPoint:
1159+ D6E6 AF                   xor         a                                   ; y hi = 0
1160+ D6E7 32 1F 94             ld          (varU),a                            ; U
1161+ D6EA                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1161+ D6EA 3A 40 94    >               ld       a,(varT)
1161+ D6ED 32 20 94    >               ld       (varQ),a
1162+ D6F0 3A 77 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1163+ D6F3 21 20 94             ld          hl,varQ
1164+ D6F6 BE                   cp          (hl)                                ; Q
1165+ D6F7                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1165+ D6F7 DA 00 D7    >                        jp		c,SmallYHop
1166+ D6FA              SmallYPoint:
1167+ D6FA CD E6 A8             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1168+ D6FD C3 03 D7             jp          SkipYScale                          ; LL68 hop over small y yangle
1169+ D700              SmallYHop:
1170+ D700              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1171+ D700 CD C3 A8             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1172+ D703              SkipYScale:
1173+ D703              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1174+ D703 3A 79 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1175+ D706 CB 7F                bit         7,a
1176+ D708 C2 1B D7             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1177+ D70B              PositiveYPoint:
1178+ D70B 3A 21 94             ld          a,(varR)
1179+ D70E 6F                   ld          l,a
1180+ D70F 3A 1F 94             ld          a,(varU)
1181+ D712 67                   ld          h,a
1182+ D713 3E 60                ld          a,ScreenHeightHalf
1183+ D715 ED 31                add         hl,a
1184+ D717 EB                   ex          de,hl
1185+ D718 C3 2B D7             jp          LL50
1186+ D71B              NegativeYPoint:
1187+ D71B              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1188+ D71B 3A 21 94             ld          a,(varR)
1189+ D71E 6F                   ld          l,a
1190+ D71F 3A 1F 94             ld          a,(varU)
1191+ D722 67                   ld          h,a
1192+ D723 0E 60                ld          c,ScreenHeightHalf
1193+ D725 06 00                ld          b,0
1194+ D727                      ClearCarryFlag
1194+ D727 B7          >                        or a
1195+ D728 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1196+ D72A EB                   ex          de,hl
1197+ D72B              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1198+ D72B FD 73 00             ld          (iy+0),e                            ; Update X Point
1199+ D72E FD 72 01             ld          (iy+1),d                            ; Update X Point
1200+ D731 FD 23                inc         iy
1201+ D733 FD 23                inc         iy
1202+ D735 C9                   ret
1203+ D736              ;--------------------------------------------------------------------------------------------------------
1204+ D736              ;;;     Byte 0 = X magnitide with origin at middle of ship
1205+ D736              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1206+ D736              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1207+ D736              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1208+ D736              CopyNodeToXX15:
1209+ D736                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1209+ D736 7E          >               ld       a,(hl)
1209+ D737 32 74 C0    >               ld       (UBnkXScaled),a
1210+ D73A 23                   inc         hl
1211+ D73B                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1211+ D73B 7E          >               ld       a,(hl)
1211+ D73C 32 76 C0    >               ld       (UBnkYScaled),a
1212+ D73F 23                   inc         hl
1213+ D740                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1213+ D740 7E          >               ld       a,(hl)
1213+ D741 32 78 C0    >               ld       (UBnkZScaled),a
1214+ D744 23                   inc         hl
1215+ D745              PopulateXX15SignBits:
1216+ D745              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1217+ D745 7E                   ld          a,(hl)
1218+ D746 4F                   ld          c,a                                 ; copy sign and visibility to c
1219+ D747 47                   ld          b,a
1220+ D748 E6 80                and         $80                                 ; keep high 3 bits
1221+ D74A 32 75 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1222+ D74D 78                   ld          a,b
1223+ D74E E6 40                and         $40
1224+ D750 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1225+ D752 32 77 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1226+ D755 78                   ld          a,b
1227+ D756 E6 20                and         $20
1228+ D758 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1229+ D75A CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1230+ D75C 32 79 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1231+ D75F 79                   ld          a,c                                 ; returns a with visibility sign byte
1232+ D760 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1233+ D762 32 40 94             ld          (varT),a                            ; and store in varT as its needed later
1234+ D765 C9                   ret
1235+ D766
1236+ D766              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1237+ D766              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1238+ D766              ;..............................................................................................................................
1239+ D766              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1240+ D766              LL48GetScale:
1241+ D766 3A BA 93             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1242+ D769 5F                   ld          e,a
1243+ D76A CD 36 D7             call        CopyNodeToXX15
1244+ D76D              LL48GetVertices:
1245+ D76D              LL48GetVertSignAndVisDist:
1246+ D76D                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1246+ D76D BB          >                        cp      e
1246+ D76E DA AF D7    >                        jp		c,NodeIsNotVisible
1247+ D771              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1248+ D771                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1248+ D771 23          >                    inc         hl                                  ; vertex byte#1
1248+ D772 7E          >                    ld          a,(hl)                              ;
1248+ D773 32 C5 93    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1249+ D776 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1250+ D777 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1251+ D779 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1252+ D77A                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1252+ D77A 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
1252+ D77D ED 31       >                    add         hl,a
1252+ D77F 7E          >                    ld          a,(hl)
1253+ D780 E1                   pop         hl                                  ;                                                                           ;;;
1254+ D781                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1254+ D781 FE 00       >				cp	0
1254+ D783 C2 B5 D7    >				jp	nz,NodeIsVisible
1255+ D786              CheckFace2:                                                                                                                         ;;;
1256+ D786 7A                   ld          a,d                                                                                                             ;;;
1257+ D787 ED 23                swapnib                                                                                                                     ;;;
1258+ D789 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1259+ D78B                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1259+ D78B FE 00       >				cp	0
1259+ D78D C2 B5 D7    >				jp	nz,NodeIsVisible
1260+ D790              CheckFace3:                                                                                                                         ;;;
1261+ D790                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1261+ D790 23          >                    inc         hl                                  ; vertex byte#1
1261+ D791 7E          >                    ld          a,(hl)                              ;
1261+ D792 32 C5 93    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1262+ D795 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1263+ D796 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1264+ D798 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1265+ D799                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1265+ D799 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
1265+ D79C ED 31       >                    add         hl,a
1265+ D79E 7E          >                    ld          a,(hl)
1266+ D79F E1                   pop         hl                                  ;                                                                           ;;;
1267+ D7A0                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1267+ D7A0 FE 00       >				cp	0
1267+ D7A2 C2 B5 D7    >				jp	nz,NodeIsVisible
1268+ D7A5              CheckFace4:                                                                                                                         ;;;
1269+ D7A5 7A                   ld          a,d                                                                                                             ;;;
1270+ D7A6 ED 23                swapnib                                                                                                                     ;;;
1271+ D7A8 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1272+ D7AA                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1272+ D7AA FE 00       >				cp	0
1272+ D7AC C2 B5 D7    >				jp	nz,NodeIsVisible
1273+ D7AF              NodeIsNotVisible:                                                                                                                   ;;;
1274+ D7AF 01 04 00             ld          bc,4
1275+ D7B2 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1276+ D7B4                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1277+ D7B4 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1278+ D7B5              NodeIsVisible:
1279+ D7B5              LL49:
1280+ D7B5 CD 58 D6             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1281+ D7B8 C9                   ret
1282+ D7B9
1283+ D7B9
1284+ D7B9              ProjectNodeToEye:
1285+ D7B9 ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1286+ D7BD 79           	ld			a,c                                 ;  so no need for a negative check
1287+ D7BE 32 20 94     	ld			(varQ),a		                    ; VarQ = z
1288+ D7C1 3A 74 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1289+ D7C4 CD 1A A3     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1290+ D7C7 3A 75 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1291+ D7CA                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1291+ D7CA CB 7F       >                        bit 	7,a
1291+ D7CC C2 D7 D7    >                        jp      nz,EyeNegativeXPoint
1292+ D7CF              EyePositiveXPoint:									; x was positive result
1293+ D7CF 2E 80            ld          l,ScreenCenterX						;
1294+ D7D1 26 00            ld          h,0
1295+ D7D3 09               add         hl,bc								; hl = Screen Centre + X
1296+ D7D4 C3 DE D7         jp          EyeStoreXPoint
1297+ D7D7              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1298+ D7D7 2E 80            ld          l,ScreenCenterX
1299+ D7D9 26 00            ld          h,0
1300+ D7DB                  ClearCarryFlag
1300+ D7DB B7          >                        or a
1301+ D7DC ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1302+ D7DE              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1303+ D7DE EB               ex          de,hl
1304+ D7DF FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1305+ D7E2 FD 72 01         ld          (iy+1),d                            ; Update X Point
1306+ D7E5              EyeProcessYPoint:
1307+ D7E5 ED 4B 78 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1308+ D7E9 79           	ld			a,c
1309+ D7EA 32 20 94     	ld			(varQ),a
1310+ D7ED 3A 76 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1311+ D7F0 CD 1A A3     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1312+ D7F3 3A 77 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1313+ D7F6                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1313+ D7F6 CB 7F       >                        bit 	7,a
1313+ D7F8 C2 03 D8    >                        jp      nz,EyeNegativeYPoint
1314+ D7FB              EyePositiveYPoint:									; Y is positive so above the centre line
1315+ D7FB 2E 60            ld          l,ScreenCenterY
1316+ D7FD                  ClearCarryFlag
1316+ D7FD B7          >                        or a
1317+ D7FE ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1318+ D800 C3 08 D8         jp          EyeStoreYPoint
1319+ D803              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1320+ D803 2E 60            ld          l,ScreenCenterY
1321+ D805 26 00            ld          h,0
1322+ D807 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1323+ D808              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1324+ D808 EB               ex          de,hl
1325+ D809 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1326+ D80C FD 72 03         ld          (iy+3),d                            ; Update Y Point
1327+ D80F C9               ret
1328+ D810
1329+ D810
1330+ D810
1331+ D810              ; Pitch and roll are 2 phases
1332+ D810              ; 1 - we apply our pitch and roll to the ship position
1333+ D810              ;       x -> x + alpha * (y - alpha * x)
1334+ D810              ;       y -> y - alpha * x - beta * z
1335+ D810              ;       z -> z + beta * (y - alpha * x - beta * z)
1336+ D810              ; which can be simplified as:
1337+ D810              ;       1. K2 = y - alpha * x
1338+ D810              ;       2. z = z + beta * K2
1339+ D810              ;       3. y = K2 - beta * z
1340+ D810              ;       4. x = x + alpha * y
1341+ D810              ; 2 - we apply our patch and roll to the ship orientation
1342+ D810              ;      Roll calculations:
1343+ D810              ;
1344+ D810              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1345+ D810              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1346+ D810              ;      Pitch calculations:
1347+ D810              ;
1348+ D810              ;        nosev_y = nosev_y - beta * nosev_z_hi
1349+ D810              ;        nosev_z = nosev_z + beta * nosev_y_hi
1350+ D810
1351+ D810
1352+ D810              ApplyMyRollToVector:    MACRO vectorX, vectorY
1353+ D810 ~                                    ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1354+ D810 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
1355+ D810 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
1356+ D810 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
1357+ D810 ~                                    xor $80                             ;
1358+ D810 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1359+ D810 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1360+ D810 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
1361+ D810 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
1362+ D810 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1363+ D810 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1364+ D810                                      ENDM
1365+ D810
1366+ D810              ApplyMyRollToNosevY:    ApplyMyRollToVector UBnkrotmatNosevX, UBnkrotmatNosevY
1366+ D810             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1366+ D810 3A DE 93    >               ld       a,(ALPHA)
1366+ D813 32 20 94    >               ld       (varQ),a
1366+ D816             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
1366+ D816 2A 22 C0    >               ld       hl,(UBnkrotmatNosevY)
1366+ D819 22 21 94    >               ld       (varR),hl
1366+ D81C             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
1366+ D81C 3A 20 C0    >               ld       a,(UBnkrotmatNosevX)
1366+ D81F 32 C5 93    >               ld       (varP),a
1366+ D822 3A 21 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
1366+ D825 EE 80       >                        xor $80                             ;
1366+ D827 CD 55 A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1366+ D82A ED 53 22 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1366+ D82E             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
1366+ D82E 2A 20 C0    >               ld       hl,(UBnkrotmatNosevX)
1366+ D831 22 21 94    >               ld       (varR),hl
1366+ D834 3A 23 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
1366+ D837 CD 55 A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1366+ D83A ED 53 20 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1367+ D83E C9                                   ret
1368+ D83F
1369+ D83F              ApplyMyRollToSidevY:    ApplyMyRollToVector UBnkrotmatSidevX, UBnkrotmatSidevY
1369+ D83F             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1369+ D83F 3A DE 93    >               ld       a,(ALPHA)
1369+ D842 32 20 94    >               ld       (varQ),a
1369+ D845             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
1369+ D845 2A 16 C0    >               ld       hl,(UBnkrotmatSidevY)
1369+ D848 22 21 94    >               ld       (varR),hl
1369+ D84B             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
1369+ D84B 3A 14 C0    >               ld       a,(UBnkrotmatSidevX)
1369+ D84E 32 C5 93    >               ld       (varP),a
1369+ D851 3A 15 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
1369+ D854 EE 80       >                        xor $80                             ;
1369+ D856 CD 55 A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1369+ D859 ED 53 16 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1369+ D85D             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
1369+ D85D 2A 14 C0    >               ld       hl,(UBnkrotmatSidevX)
1369+ D860 22 21 94    >               ld       (varR),hl
1369+ D863 3A 17 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
1369+ D866 CD 55 A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1369+ D869 ED 53 14 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1370+ D86D C9                                   ret
1371+ D86E
1372+ D86E              ApplyMyRollToRoofvY:    ApplyMyRollToVector UBnkrotmatRoofvX, UBnkrotmatRoofvY
1372+ D86E             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
1372+ D86E 3A DE 93    >               ld       a,(ALPHA)
1372+ D871 32 20 94    >               ld       (varQ),a
1372+ D874             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
1372+ D874 2A 1C C0    >               ld       hl,(UBnkrotmatRoofvY)
1372+ D877 22 21 94    >               ld       (varR),hl
1372+ D87A             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
1372+ D87A 3A 1A C0    >               ld       a,(UBnkrotmatRoofvX)
1372+ D87D 32 C5 93    >               ld       (varP),a
1372+ D880 3A 1B C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
1372+ D883 EE 80       >                        xor $80                             ;
1372+ D885 CD 55 A1    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1372+ D888 ED 53 1C C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
1372+ D88C             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
1372+ D88C 2A 1A C0    >               ld       hl,(UBnkrotmatRoofvX)
1372+ D88F 22 21 94    >               ld       (varR),hl
1372+ D892 3A 1D C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
1372+ D895 CD 55 A1    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
1372+ D898 ED 53 1A C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
1373+ D89C C9                                   ret
1374+ D89D
1375+ D89D
1376+ D89D              ; 1> (-a)-(-b)=  if ABS(a)> ABS(B), 1A> (ABS(a)-abs(b))*-1 Else 1B> (ABS(b)-abs(a))
1377+ D89D              ; 2> (+a)-(+b)=  if ABS(a) > ABS(B),2A>  ABS(a)- abs (B)   else 2B> (ABS(B) - abs(A) * -1
1378+ D89D              ; 3> (-a)-(+b)=  3A> (ABS(a) + ABS(b)) * -1
1379+ D89D              ; 4> (+a)-(-b)=  4A> ABS(a) + ABS(b)
1380+ D89D 47           AHLequUbnkYminusAHL:    ld      b,a                 ; b =sign of subtraction
1381+ D89E EB                                   ex      de,hl               ; de = amount to subtract
1382+ D89F 2A 0E C0                             ld      hl,(UBnKylo)        ; hl = unsigned Y position
1383+ D8A2 3A 10 C0                             ld      a,(UBnKysgn)        ; ahl = signed Y corrodinate
1384+ D8A5 4F                                   ld      c,a                 ; we may need the sign later
1385+ D8A6 A8                                   xor     b                   ; now we need to see if signs were different or same
1386+ D8A7                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1386+ D8A7 FA C8 D8    >                        jp		m, .SignsDifferent
1387+ D8AA CD D2 A4     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1388+ D8AD 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1389+ D8AF B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1390+ D8B2 7C                                   ld      a,h
1391+ D8B3 B5                                   or      l
1392+ D8B4 28 02                                jr      z,.HLGTDEZero
1393+ D8B6 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1394+ D8B7 C9                                   ret
1395+ D8B8 AF           .HLGTDEZero:            xor     a
1396+ D8B9 C9                                   ret                         ; if the result was zero set sign to zero too
1397+ D8BA EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1398+ D8BB B7 ED 52                             sub     hl,de               ;
1399+ D8BE 7C                                   ld      a,h
1400+ D8BF B5                                   or      l
1401+ D8C0 28 04                                jr      z,.HLLTDEZero
1402+ D8C2 79                                   ld      a,c
1403+ D8C3 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1404+ D8C5 C9                                   ret
1405+ D8C6 AF           .HLLTDEZero:            xor     a
1406+ D8C7 C9                                   ret
1407+ D8C8 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1408+ D8C9 7C                                   ld      a,h
1409+ D8CA B5                                   or      l
1410+ D8CB 28 F9                                jr      z,.HLLTDEZero
1411+ D8CD 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1412+ D8CE C9                                   ret
1413+ D8CF
1414+ D8CF              ;----------------------------------------------------------------------------------------------------------
1415+ D8CF 47           AHLequKminusAHL:        ld      b,a                 ; b =sign of subtraction
1416+ D8D0 EB                                   ex      de,hl               ; de = amount to subtract
1417+ D8D1 2A 38 94                             ld      hl,(varKp1)         ; Ahl = K
1418+ D8D4 3A 3A 94                             ld      a,(varKp3)          ;
1419+ D8D7 4F                                   ld      c,a                 ; we may need the sign later
1420+ D8D8 A8                                   xor     b                   ; now we need to see if signs were different or same
1421+ D8D9                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1421+ D8D9 FA FA D8    >                        jp		m, .SignsDifferent
1422+ D8DC CD D2 A4     .SignsTheSame:          call    compare16HLDE       ; if signs were the saem tehn
1423+ D8DF 38 0B                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1424+ D8E1 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1425+ D8E4 7C                                   ld      a,h
1426+ D8E5 B5                                   or      l
1427+ D8E6 28 02                                jr      z,.HLGTDEZero
1428+ D8E8 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1429+ D8E9 C9                                   ret
1430+ D8EA AF           .HLGTDEZero:            xor     a
1431+ D8EB C9                                   ret                         ; if the result was zero set sign to zero too
1432+ D8EC EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1433+ D8ED B7 ED 52                             sub     hl,de               ;
1434+ D8F0 7C                                   ld      a,h
1435+ D8F1 B5                                   or      l
1436+ D8F2 28 04                                jr      z,.HLLTDEZero
1437+ D8F4 79                                   ld      a,c
1438+ D8F5 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1439+ D8F7 C9                                   ret
1440+ D8F8 AF           .HLLTDEZero:            xor     a
1441+ D8F9 C9                                   ret
1442+ D8FA 19           .SignsDifferent:        add     hl,de               ; if they are oppos
1443+ D8FB 7C                                   ld      a,h
1444+ D8FC B5                                   or      l
1445+ D8FD 28 F9                                jr      z,.HLLTDEZero
1446+ D8FF 79                                   ld      a,c                 ; then we always use the sign of y even if hl > de or de < hl
1447+ D900 C9                                   ret
1448+ D901              ;-------------------------------------------------------------------------------------------------------------
1449+ D901
1450+ D901 47           AHLequUbnkZplusAHL:     ld      b,a                 ; b =sign of subtraction
1451+ D902 EB                                   ex      de,hl               ; de = amount to subtract
1452+ D903 2A 11 C0                             ld      hl,(UBnKzlo)        ; hl = unsigned Y position
1453+ D906 3A 13 C0                             ld      a,(UBnKzsgn)        ; ahl = signed Y corrodinate
1454+ D909 4F                                   ld      c,a                 ; we may need the sign later
1455+ D90A A8                                   xor     b                   ; now we need to see if signs were different or same
1456+ D90B                                      JumpIfNegative .SignsDifferent  ; if zer fk==
1456+ D90B FA 19 D9    >                        jp		m, .SignsDifferent
1457+ D90E 19           .SignsTheSame:          add     hl,de
1458+ D90F 7C                                   ld      a,h
1459+ D910 B5                                   or      l
1460+ D911 28 02                                jr      z,.HLGTDEZero
1461+ D913 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1462+ D914 C9                                   ret
1463+ D915 AF           .HLGTDEZero:            xor     a
1464+ D916 C9                                   ret                         ; if the result was zero set sign to zero too
1465+ D917 AF           .HLLTDEZero:            xor     a
1466+ D918 C9                                   ret
1467+ D919 CD D2 A4     .SignsDifferent:        call    compare16HLDE       ; if signs were the saem tehn
1468+ D91C 38 09                                jr      c,.HLLessThanDE     ; if abs(y) < ABS (hl) then do scenario 2B
1469+ D91E B7 ED 52     .HLGreaterDE:           sub     hl,de               ; Scenario 1A> & 2A> sub hl from de and leave sign the same
1470+ D921 7C                                   ld      a,h
1471+ D922 B5                                   or      l
1472+ D923 28 F0                                jr      z,.HLGTDEZero
1473+ D925 79                                   ld      a,c                 ; get back ubnkysign as hl > de we use y sign
1474+ D926 C9                                   ret
1475+ D927 EB           .HLLessThanDE:          ex      de,hl               ; if signs were same but DE > ypos then cover secnario 1B and 2B
1476+ D928 B7 ED 52                             sub     hl,de               ;
1477+ D92B 7C                                   ld      a,h
1478+ D92C B5                                   or      l
1479+ D92D 28 E8                                jr      z,.HLLTDEZero
1480+ D92F 79                                   ld      a,c
1481+ D930 EE 80                                xor     $80                 ; flip sign bit to cover 1B> and 2B?
1482+ D932 C9                                   ret
1483+ D933
1484+ D933
1485+ D933
1486+ D933              ; Full version
1487+ D933              ; 1. K2 = y - alpha * x
1488+ D933              ; 2. z = z + beta * K2
1489+ D933              ; 3. y = K2 - beta * z
1490+ D933              ; 4. x = x + alpha * y
1491+ D933
1492+ D933
1493+ D933                                      MACRO   APPequPosPlusAPP Position, PositionSign
1494+ D933 ~                                    push    bc
1495+ D933 ~                                    ld      c,a                         ; save original value of a into c
1496+ D933 ~                                    ld      a,(PositionSign)
1497+ D933 ~                                    ld      b,a
1498+ D933 ~                                    ld      a,c
1499+ D933 ~                                    xor     b                           ; a = a xor x postition sign
1500+ D933 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1501+ D933 ~            ; Signs are the same to we just add and take which ever sign
1502+ D933 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1503+ D933 ~                                    ld      hl,(Position)
1504+ D933 ~                                    add     hl,de
1505+ D933 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1506+ D933 ~                                    ld      a,c                         ; and a = original sign as they were both the same
1507+ D933 ~                                    pop     bc
1508+ D933 ~                                    ret
1509+ D933 ~            ; Signs are opposite so we subtract
1510+ D933 ~            .MV50:                  ld      de,(varPp1)
1511+ D933 ~                                    ld      hl,(Position)
1512+ D933 ~                                    or      a
1513+ D933 ~                                    sbc     hl,de
1514+ D933 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
1515+ D933 ~                                    ld      a,c                         ; get back the original sign
1516+ D933 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
1517+ D933 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1518+ D933 ~                                    pop     bc
1519+ D933 ~                                    ret
1520+ D933 ~            .MV51:                  NegHL
1521+ D933 ~                                    ld      (varPp1),hl
1522+ D933 ~                                    ld      a,c                         ; the original sign will still be good
1523+ D933 ~                                    pop     bc
1524+ D933 ~                                    ret
1525+ D933                                      ENDM
1526+ D933
1527+ D933
1528+ D933              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
1528+ D933 C5          >                        push    bc
1528+ D934 4F          >                        ld      c,a                         ; save original value of a into c
1528+ D935 3A 0D C0    >                        ld      a,(UBnKxsgn)
1528+ D938 47          >                        ld      b,a
1528+ D939 79          >                        ld      a,c
1528+ D93A A8          >                        xor     b                           ; a = a xor x postition sign
1528+ D93B FA 4C D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1528+ D93E             >; Signs are the same to we just add and take which ever sign
1528+ D93E ED 5B C6 93 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1528+ D942 2A 0B C0    >                        ld      hl,(UBnKxlo)
1528+ D945 19          >                        add     hl,de
1528+ D946 22 C6 93    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1528+ D949 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1528+ D94A C1          >                        pop     bc
1528+ D94B C9          >                        ret
1528+ D94C             >; Signs are opposite so we subtract
1528+ D94C ED 5B C6 93 >.MV50:                  ld      de,(varPp1)
1528+ D950 2A 0B C0    >                        ld      hl,(UBnKxlo)
1528+ D953 B7          >                        or      a
1528+ D954 ED 52       >                        sbc     hl,de
1528+ D956 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1528+ D958 79          >                        ld      a,c                         ; get back the original sign
1528+ D959 22 C6 93    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1528+ D95C EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1528+ D95E C1          >                        pop     bc
1528+ D95F C9          >                        ret
1528+ D960             >.MV51:                  NegHL
1528+ D960 AF          >                xor a
1528+ D961 95          >                sub l
1528+ D962 6F          >                ld l,a
1528+ D963 9F          >                sbc a,a
1528+ D964 94          >                sub h
1528+ D965 67          >                ld h,a
1528+ D966 22 C6 93    >                        ld      (varPp1),hl
1528+ D969 79          >                        ld      a,c                         ; the original sign will still be good
1528+ D96A C1          >                        pop     bc
1528+ D96B C9          >                        ret
1529+ D96C
1530+ D96C              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
1530+ D96C C5          >                        push    bc
1530+ D96D 4F          >                        ld      c,a                         ; save original value of a into c
1530+ D96E 3A 10 C0    >                        ld      a,(UBnKysgn)
1530+ D971 47          >                        ld      b,a
1530+ D972 79          >                        ld      a,c
1530+ D973 A8          >                        xor     b                           ; a = a xor x postition sign
1530+ D974 FA 85 D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1530+ D977             >; Signs are the same to we just add and take which ever sign
1530+ D977 ED 5B C6 93 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1530+ D97B 2A 0E C0    >                        ld      hl,(UBnKylo)
1530+ D97E 19          >                        add     hl,de
1530+ D97F 22 C6 93    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1530+ D982 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1530+ D983 C1          >                        pop     bc
1530+ D984 C9          >                        ret
1530+ D985             >; Signs are opposite so we subtract
1530+ D985 ED 5B C6 93 >.MV50:                  ld      de,(varPp1)
1530+ D989 2A 0E C0    >                        ld      hl,(UBnKylo)
1530+ D98C B7          >                        or      a
1530+ D98D ED 52       >                        sbc     hl,de
1530+ D98F 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1530+ D991 79          >                        ld      a,c                         ; get back the original sign
1530+ D992 22 C6 93    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1530+ D995 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1530+ D997 C1          >                        pop     bc
1530+ D998 C9          >                        ret
1530+ D999             >.MV51:                  NegHL
1530+ D999 AF          >                xor a
1530+ D99A 95          >                sub l
1530+ D99B 6F          >                ld l,a
1530+ D99C 9F          >                sbc a,a
1530+ D99D 94          >                sub h
1530+ D99E 67          >                ld h,a
1530+ D99F 22 C6 93    >                        ld      (varPp1),hl
1530+ D9A2 79          >                        ld      a,c                         ; the original sign will still be good
1530+ D9A3 C1          >                        pop     bc
1530+ D9A4 C9          >                        ret
1531+ D9A5
1532+ D9A5              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
1532+ D9A5 C5          >                        push    bc
1532+ D9A6 4F          >                        ld      c,a                         ; save original value of a into c
1532+ D9A7 3A 13 C0    >                        ld      a,(UBnKzsgn)
1532+ D9AA 47          >                        ld      b,a
1532+ D9AB 79          >                        ld      a,c
1532+ D9AC A8          >                        xor     b                           ; a = a xor x postition sign
1532+ D9AD FA BE D9    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
1532+ D9B0             >; Signs are the same to we just add and take which ever sign
1532+ D9B0 ED 5B C6 93 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
1532+ D9B4 2A 11 C0    >                        ld      hl,(UBnKzlo)
1532+ D9B7 19          >                        add     hl,de
1532+ D9B8 22 C6 93    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
1532+ D9BB 79          >                        ld      a,c                         ; and a = original sign as they were both the same
1532+ D9BC C1          >                        pop     bc
1532+ D9BD C9          >                        ret
1532+ D9BE             >; Signs are opposite so we subtract
1532+ D9BE ED 5B C6 93 >.MV50:                  ld      de,(varPp1)
1532+ D9C2 2A 11 C0    >                        ld      hl,(UBnKzlo)
1532+ D9C5 B7          >                        or      a
1532+ D9C6 ED 52       >                        sbc     hl,de
1532+ D9C8 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
1532+ D9CA 79          >                        ld      a,c                         ; get back the original sign
1532+ D9CB 22 C6 93    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
1532+ D9CE EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
1532+ D9D0 C1          >                        pop     bc
1532+ D9D1 C9          >                        ret
1532+ D9D2             >.MV51:                  NegHL
1532+ D9D2 AF          >                xor a
1532+ D9D3 95          >                sub l
1532+ D9D4 6F          >                ld l,a
1532+ D9D5 9F          >                sbc a,a
1532+ D9D6 94          >                sub h
1532+ D9D7 67          >                ld h,a
1532+ D9D8 22 C6 93    >                        ld      (varPp1),hl
1532+ D9DB 79          >                        ld      a,c                         ; the original sign will still be good
1532+ D9DC C1          >                        pop     bc
1532+ D9DD C9          >                        ret
1533+ D9DE
1534+ D9DE              ; rollWork holds Alpha intermidate results
1535+ D9DE 00 00 00     rollWork      DS 3
1536+ D9E1              rollWorkp1    equ rollWork
1537+ D9E1              rollWorkp2    equ rollWork+1
1538+ D9E1              rollWorkp3    equ rollWork+2
1539+ D9E1
1540+ D9E1
1541+ D9E1              ;----------------------------------------------------------------------------------------------------------------------------------
1542+ D9E1              ; based on MVEIT part 4 of 9
1543+ D9E1 3A DF 93     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
1544+ D9E4 21 D2 93                             ld      hl,BET1                     ; and pitch
1545+ D9E7 B6                                   or      (hl)
1546+ D9E8 CA 99 DA                             jp      z,.NoRotation               ; if both zero then don't compute
1547+ D9EB                                      ;break
1548+ D9EB              ; P[210] = x * alph (we use P[2]P[1] later as result/256
1549+ D9EB 5F                                   ld      e,a                         ; e = roll magnitude
1550+ D9EC 2A 0B C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
1551+ D9EF CD B1 A1                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
1552+ D9F2 32 C7 93                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
1553+ D9F5 22 C5 93                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
1554+ D9F8              ; A = Flip sign
1555+ D9F8 3A E1 93                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
1556+ D9FB 21 0D C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
1557+ D9FE AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
1558+ D9FF              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
1559+ D9FF CD 6C D9                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
1560+ DA02              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
1561+ DA02 32 E0 D9                             ld      (rollWorkp3),a               ; k2+3 = sign of result
1562+ DA05 22 DE D9                             ld      (rollWorkp1),hl             ; k2+1,2 = result
1563+ DA08              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
1564+ DA08 3A D2 93                             ld      a,(BET1)                    ; a = magnitude of pitch
1565+ DA0B 5F                                   ld      e,a
1566+ DA0C CD B1 A1                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
1567+ DA0F 32 C7 93                             ld      (varPp2),a                   ; save highest byte in P2
1568+ DA12 22 C5 93                             ld      (varP),hl
1569+ DA15              ; Fetch sign of previosu cal and xor with BETA inverted
1570+ DA15 3A E0 D9                             ld      a,(rollWorkp3)
1571+ DA18 5F                                   ld      e,a
1572+ DA19 3A D3 93                             ld      a,(BET2)
1573+ DA1C AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
1574+ DA1D              ; Z = P[210] =Z + APP
1575+ DA1D CD A5 D9                             call    APPequZPosPlusAPP           ; MVT6
1576+ DA20 32 13 C0                             ld      (UBnKzsgn),a                ; save result back into z
1577+ DA23 22 11 C0                             ld      (UBnKzlo),hl
1578+ DA26              ; A[P1]P[0] = z * Beta
1579+ DA26 3A D2 93                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
1580+ DA29 5F                                   ld      e,a
1581+ DA2A CD B1 A1                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
1582+ DA2D 32 C7 93                             ld      (varPp2),a                  ; P2 = high byte of result
1583+ DA30 22 C5 93                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
1584+ DA33              ; A xor BET2,Zsign
1585+ DA33 3A E0 D9                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
1586+ DA36 32 10 C0                             ld      (UBnKysgn),a                ; save result back into y
1587+ DA39 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
1588+ DA3A 3A D3 93                             ld      a,(BET2)                    ;
1589+ DA3D AB                                   xor     e                           ;
1590+ DA3E 5F                                   ld      e,a                         ; now xor it with z sign too
1591+ DA3F 3A 13 C0                             ld      a,(UBnKzsgn)                ;
1592+ DA42 AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
1593+ DA43 F2 52 DA                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
1594+ DA46 2A C6 93                             ld      hl,(varPp1)
1595+ DA49 ED 5B DE D9                          ld      de,(rollWorkp1)
1596+ DA4D B7                                   or      a
1597+ DA4E 19                                   add     hl,de
1598+ DA4F C3 6C DA                             jp      .MV44
1599+ DA52 2A DE D9     .MV43:                  ld      hl,(rollWorkp1)
1600+ DA55 ED 5B C6 93                          ld      de,(varPp1)
1601+ DA59 B7                                   or      a
1602+ DA5A ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
1603+ DA5C 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
1604+ DA5E                                      NegHL
1604+ DA5E AF          >                xor a
1604+ DA5F 95          >                sub l
1604+ DA60 6F          >                ld l,a
1604+ DA61 9F          >                sbc a,a
1604+ DA62 94          >                sub h
1604+ DA63 67          >                ld h,a
1605+ DA64 3A 10 C0                             ld      a,(UBnKysgn)                ; flip sign bit
1606+ DA67 EE 80                                xor     SignOnly8Bit
1607+ DA69 32 10 C0                             ld      (UBnKysgn),a
1608+ DA6C              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
1609+ DA6C 22 0E C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
1610+ DA6F 3A DF 93                             ld      a,(ALP1)                    ; get roll magnitude
1611+ DA72 5F                                   ld      e,a
1612+ DA73 2A 0E C0                             ld      hl,(UBnKylo)
1613+ DA76 CD B1 A1                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
1614+ DA79 32 C7 93                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
1615+ DA7C 22 C5 93                             ld      (varP),hl
1616+ DA7F 3A E0 93                             ld      a,(ALP2)
1617+ DA82 5F                                   ld      e,a
1618+ DA83 3A 10 C0                             ld      a,(UBnKysgn)
1619+ DA86 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
1620+ DA87 CD 33 D9                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
1621+ DA8A 32 0D C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
1622+ DA8D 22 0B C0                             ld      (UBnKxlo),hl
1623+ DA90                                      ;break
1624+ DA90                                      ; if its not a sun then apply to local orientation
1625+ DA90
1626+ DA90 CD 10 D8                             call    ApplyMyRollToNosevY
1627+ DA93 CD 3F D8                             call    ApplyMyRollToSidevY
1628+ DA96 CD 6E D8                             call    ApplyMyRollToRoofvY
1629+ DA99 3A 1C 94     .NoRotation:            ld      a,(DELTA)                   ; get speed
1630+ DA9C 16 00                                ld      d,0
1631+ DA9E 5F                                   ld      e,a                         ; de = speed in low byte
1632+ DA9F 2A 11 C0                             ld      hl,(UBnKzlo)                ; hl = z position
1633+ DAA2 3A 13 C0                             ld      a,(UBnKzsgn)                ; b = z sign
1634+ DAA5 47                                   ld      b,a                         ;
1635+ DAA6 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
1636+ DAA8 CD 3C CB                             call    ADDHLDESignBC               ; update speed
1637+ DAAB 22 11 C0                             ld      (UBnKzlo),hl                ; write back to zpos
1638+ DAAE 32 13 C0                             ld      (UBnKzsgn),a                ;
1639+ DAB1 C9                                   ret
1640+ DAB2              ; .....................................................
1641+ DAB2              ; Process Nodes does the following:
1642+ DAB2              ; for each node:
1643+ DAB2              ;     see if node >
1644+ DAB2 00           PNXX20DIV6          DB      0
1645+ DAB3 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1646+ DAB5 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1647+ DAB7 00           PNLASTNORM          DB      0
1648+ DAB8              ProcessNodes:
1649+ DAB8 AF               xor     a
1650+ DAB9 32 F0 C2         ld      (UbnkLineArrayLen),a
1651+ DABC CD 74 CF         call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1652+ DABF CD DC 86         call    ScaleXX16Matrix197               ;#02; Normalise XX16
1653+ DAC2 CD 56 D1         call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1654+ DAC5 CD 23 D0         call    InverseXX16                      ;#11; Invert rotation matrix
1655+ DAC8 21 16 C3         ld      hl,UBnkHullVerticies
1656+ DACB 3A 06 C3         ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1657+ DACE              GetActualVertexCount:
1658+ DACE 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1659+ DACF 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1660+ DAD0 16 06            ld      d,6
1661+ DAD2 CD 4A A3         call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1662+ DAD5 41               ld      b,c                              ; c = number of vertices
1663+ DAD6 FD 21 BE C0      ld      iy,UBnkNodeArray
1664+ DADA              LL48:
1665+ DADA              PointLoop:
1666+ DADA C5           	push	bc                                  ; save counters
1667+ DADB E5           	push	hl                                  ; save verticies list pointer
1668+ DADC FD E5        	push	iy                                  ; save Screen plot array pointer
1669+ DADE 78               ld      a,b
1670+ DADF                  ;break
1671+ DADF CD 36 D7         call    CopyNodeToXX15                      ; copy verices at hl to xx15
1672+ DAE2 3A 75 C0     	ld		a,(UBnkXScaledSign)
1673+ DAE5 CD 81 89     	call    XX12EquNodeDotOrientation
1674+ DAE8 CD E3 89     	call    TransposeXX12ByShipToXX15
1675+ DAEB CD 5C 87     	call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1676+ DAEE FD E1        	pop		iy                                  ; get back screen plot array pointer
1677+ DAF0 CD B9 D7     	call    ProjectNodeToEye                     ; set up screen plot list entry
1678+ DAF3                 ; ld      hl,UbnkLineArrayLen
1679+ DAF3                ;  inc     (hl)                                ; another node done
1680+ DAF3              ReadyForNextPoint:
1681+ DAF3 FD E5        	push	iy                                  ; copy screen plot pointer to hl
1682+ DAF5 E1           	pop		hl
1683+ DAF6 3E 04        	ld		a,4
1684+ DAF8 ED 31        	add		hl,a
1685+ DAFA E5           	push	hl                                  ; write it back at iy + 4
1686+ DAFB FD E1        	pop		iy								    ; and put it in iy again
1687+ DAFD E1           	pop		hl                                  ; get hl back as vertex list
1688+ DAFE 3E 06        	ld		a,6
1689+ DB00 ED 31        	add 	hl,a                                ; and move to next vertex
1690+ DB02 C1           	pop		bc                                  ; get counter back
1691+ DB03 10 D5        	djnz	PointLoop
1692+ DB05              ; ......................................................
1693+ DB05 C9               ret
1694+ DB06              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1695+ DB06              ;  Entering Here we have the following:
1696+ DB06              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1697+ DB06              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1698+ DB06              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1699+ DB06              ;
1700+ DB06              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1701+ DB06              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1702+ DB06              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1703+ DB06              ;--------------------------------------------------------------------------------------------------------
1704+ DB06              AddLaserBeamLine:
1705+ DB06              ; this code is a bag of shit and needs re-writing
1706+ DB06              GetGunVertexNode:
1707+ DB06 3A 04 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1708+ DB09 21 BE C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1709+ DB0C ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1710+ DB0E FD 2E 00             ld          iyl,0
1711+ DB11              MoveX1PointToXX15:
1712+ DB11 4E                   ld          c,(hl)                              ;
1713+ DB12 23                   inc         hl
1714+ DB13 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1715+ DB14 23                   inc         hl
1716+ DB15 ED 43 74 C0          ld          (UBnkX1),bc
1717+ DB19 0C                   inc         c
1718+ DB1A C8                   ret         z                                   ; was c 255?
1719+ DB1B 04                   inc         b
1720+ DB1C C8                   ret         z                                   ; was c 255?
1721+ DB1D              MoveY1PointToXX15:
1722+ DB1D 4E                   ld          c,(hl)                              ;
1723+ DB1E 23                   inc         hl
1724+ DB1F 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1725+ DB20 23                   inc         hl
1726+ DB21 ED 43 76 C0          ld          (UBnkY1),bc
1727+ DB25              SetX2PointToXX15:
1728+ DB25 01 00 00             ld          bc,0                                ; set X2 to 0
1729+ DB28 ED 43 78 C0          ld          (UBnkX2),bc
1730+ DB2C 3A 11 C0             ld          a,(UBnKzlo)
1731+ DB2F 4F                   ld          c,a
1732+ DB30              SetY2PointToXX15:
1733+ DB30 ED 43 7A C0          ld          (UBnkY2),bc                         ; set Y2to 0
1734+ DB34 3A 0D C0             ld          a,(UBnKxsgn)
1735+ DB37                      JumpOnBitClear a,7,LL74SkipDec
1735+ DB37 CB 7F       >                        bit 	7,a
1735+ DB39 CA 41 DB    >                        jp      z,LL74SkipDec
1736+ DB3C              LL74DecX2:
1737+ DB3C 3E FF                ld          a,$FF
1738+ DB3E 32 78 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1739+ DB41              LL74SkipDec:
1740+ DB41 CD 1E CD             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1741+ DB44 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1742+ DB46              ; Here we are usign hl to replace VarU as index
1743+ DB46 2A 23 94             ld          hl,(varU16)
1744+ DB49 3A 74 C0             ld          a,(UBnKx1Lo)
1745+ DB4C 77                   ld          (hl),a
1746+ DB4D 23                   inc         hl
1747+ DB4E 3A 76 C0             ld          a,(UbnKy1Lo)
1748+ DB51 77                   ld          (hl),a
1749+ DB52 23                   inc         hl
1750+ DB53 3A 78 C0             ld          a,(UBnkX2Lo)
1751+ DB56 77                   ld          (hl),a
1752+ DB57 23                   inc         hl
1753+ DB58 3A 7A C0             ld          a,(UbnKy2Lo)
1754+ DB5B 77                   ld          (hl),a
1755+ DB5C FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1756+ DB5E 23                   inc         hl
1757+ DB5F FD 2C                inc         iyl                                 ; ready for next byte
1758+ DB61 22 23 94             ld          (varU16),hl
1759+ DB64 C9                   ret
1760+ DB65
1761+ DB65                  INCLUDE "PrepLines.asm"
# file opened: ./Universe/PrepLines.asm
   1++DB65              ;--------------------------------------------------------------------------------------------------------
   2++DB65                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DB65              ;--------------------------------------------------------------------------------------------------------
   2++DB65              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DB65 21 BE C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DB68 ED 31                                add         hl,a                                ; hl = address of Node
   5++DB6A 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DB6B 11 74 C0                             ld          de,UBnkX1
   7++DB6E ED A0                                ldi                                             ; x1 lo
   8++DB70 ED A0                                ldi                                             ; x1 hi
   9++DB72 ED A0                                ldi                                             ; y1 lo
  10++DB74 ED A0                                ldi                                             ; y1 hi
  11++DB76 C9                                   ret
  12++DB77
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DB77                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DB77              ;--------------------------------------------------------------------------------------------------------
   2++DB77              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DB77 21 BE C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DB7A ED 31                                add         hl,a                                ; hl = address of Node
   5++DB7C 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DB7D 11 78 C0                             ld          de,UBnkX2
   7++DB80 ED A0                                ldi                                             ; x1 lo
   8++DB82 ED A0                                ldi                                             ; x1 hi
   9++DB84 ED A0                                ldi                                             ; y1 lo
  10++DB86 ED A0                                ldi                                             ; y1 hi
  11++DB88 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DB89                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DB89              ;--------------------------------------------------------------------------------------------------------
   2++DB89              GetFaceAtA:         MACRO
   3++DB89 ~                                ld          hl,UbnkFaceVisArray
   4++DB89 ~                                add         hl,a
   5++DB89 ~                                ld          a,(hl)                              ; get face visibility
   6++DB89                                  ENDM
   7++DB89
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DB89              ;--------------------------------------------------------------------------------------------------------
   6++DB89              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DB89               ;   DEFINE NOBACKFACECULL 1
   8++DB89 00           PLEDGECTR           DB          0
   9++DB8A
  10++DB8A              PrepLines:
  11++DB8A              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DB8A
  13++DB8A              ; TODO add in onced DOEXP is finished
  14++DB8A              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DB8A              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DB8A              ;        or          8
  17++DB8A              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DB8A              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DB8A              ;EE31:                                                   ; no explosion
  20++DB8A              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DB8A              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DB8A              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DB8A              ;
  24++DB8A              ;--------------------------------------------------------------------------------------------------------
  25++DB8A              InitialiseLineRead:
  26++DB8A                      ;break
  27++DB8A                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DB8A AF          >               xor      a
  27++DB8B 32 F0 C2    >               ld       (UbnkLineArrayLen),a
  28++DB8E                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DB8E AF          >               xor      a
  28++DB8F 32 F1 C2    >               ld       (UbnkLineArrayBytes),a
  29++DB92                      ldWriteZero PLEDGECTR
  29++DB92 AF          >               xor      a
  29++DB93 32 89 DB    >               ld       (PLEDGECTR),a
  30++DB96 3A 07 C3             ld          a,(EdgeCountAddr)
  31++DB99 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DB9B FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DB9E 21 FE C1             ld          hl,UbnkLineArray                    ; head of array
  34++DBA1 22 23 94             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DBA4                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DBA4 3A 07 C3    >               ld       a,(EdgeCountAddr)
  35++DBA7 32 27 94    >               ld       (XX17),a
  36++DBAA 3A 2A C0             ld          a,(UBnkexplDsp)                     ; get explosion status
  37++DBAD                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DBAD CB 77       >                        bit 	6,a
  37++DBAF CA B7 DB    >                        jp      z,CalculateNewLines
  38++DBB2 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DBB4 32 2A C0             ld          (UBnkexplDsp),a                     ; INWK+31
  40++DBB7              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DBB7              ; NOw we can calculate hull after including laser line
  42++DBB7              CalculateNewLines:
  43++DBB7              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DBB7              CheckEdgesForVisibility:
  45++DBB7 21 42 C4             ld          hl,UBnkHullEdges
  46++DBBA                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DBBA 22 CA 93             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DBBD 3A 03 C3             ld          a,(LineX4Addr)
  49++DBC0 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DBC1              LL75Loop:                                               ; count Visible edges
  51++DBC1              IsEdgeInVisibilityRange:
  52++DBC1 2A CA 93             ld          hl,(varV)
  53++DBC4 E5                   push        hl
  54++DBC5 FD E1                pop         iy
  55++DBC7                      IFDEF NOBACKFACECULL
  56++DBC7 ~                        jp          VisibileEdge; DEBUGTODO
  57++DBC7                      ENDIF
  58++DBC7 3A BA 93             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DBCA 57                   ld          d,a                                 ; d holds copy of XX4
  60++DBCB              ; Get Edge Byte 0
  61++DBCB FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DBCE                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DBCE BA          >                        cp      d
  62++DBCF DA 22 DC    >                        jp		c,LL78EdgeNotVisible
  63++DBD2              EdgeMayBeVisibile:
  64++DBD2              ; Get Edge Byte 1
  65++DBD2              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DBD2 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DBD5 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DBD6 E6 0F                and         $0F                                 ;
  69++DBD8                      GetFaceAtA
  69++DBD8 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
  69++DBDB ED 31       >                    add         hl,a
  69++DBDD 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DBDE              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DBDE                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
  71++DBDE FE 00       >				cp	0
  71++DBE0 C2 F4 DB    >				jp	nz,VisibileEdge
  72++DBE3              IsFace2Visibile:
  73++DBE3 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DBE4 ED 23                swapnib                                         ;
  75++DBE6 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DBE8 E5                   push        hl
  77++DBE9                      GetFaceAtA
  77++DBE9 21 A0 C0    >                    ld          hl,UbnkFaceVisArray
  77++DBEC ED 31       >                    add         hl,a
  77++DBEE 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DBEF E1                   pop         hl
  79++DBF0                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
  79++DBF0 A7          >				and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DBF1 CA 22 DC    >				jp	z,LL78EdgeNotVisible
  80++DBF4              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DBF4              ;LL79--Visible edge--------------------------------------
  82++DBF4              ; Get Edge Byte 2
  83++DBF4 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DBF7 CD 65 DB             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DBFA FD 7E 03             ld          a,(IY+3)
  86++DBFD CD 77 DB             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DC00 CD 1E CD             call        ClipLine
  88++DC03 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DC05              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DC05 ED 5B 23 94          ld          de,(varU16)                         ; clipped edges heap address
  91++DC09 21 74 C0             ld          hl,UBnkNewX1
  92++DC0C                      FourLDIInstrunctions
  92++DC0C ED A0       >                        ldi
  92++DC0E ED A0       >                        ldi
  92++DC10 ED A0       >                        ldi
  92++DC12 ED A0       >                        ldi
  93++DC14 ED 53 23 94          ld          (varU16),de                         ; update U16 with current address
  94++DC18 21 F0 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DC1B 34                   inc         (hl)
  96++DC1C 7E                   ld          a,(hl)
  97++DC1D                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DC1D FE 32       >                        cp     LineArraySize
  97++DC1F D2 38 DC    >                        jp		nc,CompletedLineGeneration
  98++DC22              ; If we hit here we skip the write of line arryay u16
  99++DC22              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DC22              LL78:
 101++DC22 2A CA 93             ld          hl,(varV)                           ; varV is current edge address
 102++DC25 3E 04                ld          a,4
 103++DC27 ED 31                add         hl,a
 104++DC29 22 CA 93             ld          (varV),hl
 105++DC2C 21 89 DB             ld          hl,PLEDGECTR                        ;
 106++DC2F 34                   inc         (hl)                                ;
 107++DC30 7E                   ld          a,(hl)                              ; current edge index ++
 108++DC31                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DC31 21 27 94    >                  ld    hl,XX17
 108++DC34 BE          >                  cp    (hl)
 108++DC35 C2 C1 DB    >                  jp      nz,LL75Loop
 109++DC38              CompletedLineGeneration:
 110++DC38              LL81:
 111++DC38              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DC38 3A F0 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DC3B CB 27                sla         a
 114++DC3D CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DC3F 32 F1 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DC42              ExitEdgeDataLoop:
 117++DC42 C9                   ret
 118++DC43
# file closed: ./Universe/PrepLines.asm
1762+ DC43
1763+ DC43              UnivBankSize  EQU $ - StartOfUniv
1764+ DC43
# file closed: ./Universe/univ_ship_data.asm
1033  DC43
1034  DC43                  SLOT    UniverseBankAddr
1035  DC43                  PAGE    BankUNIVDATA1
1036  DC43              	ORG	UniverseBankAddr,BankUNIVDATA1
1037  C000 FF           UNIVDATABlock1      DB $FF
1038  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1039  E000
1040  E000                  SLOT    UniverseBankAddr
1041  E000                  PAGE    BankUNIVDATA2
1042  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1043  C000 FF           UNIVDATABlock2      DB $FF
1044  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1045  E000
1046  E000                  SLOT    UniverseBankAddr
1047  E000                  PAGE    BankUNIVDATA3
1048  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1049  C000 FF           UNIVDATABlock3      DB $FF
1050  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1051  E000
1052  E000                  SLOT    UniverseBankAddr
1053  E000                  PAGE    BankUNIVDATA4
1054  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1055  C000 FF           UNIVDATABlock4      DB $FF
1056  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1057  E000
1058  E000                  SLOT    UniverseBankAddr
1059  E000                  PAGE    BankUNIVDATA5
1060  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1061  C000 FF           UNIVDATABlock5      DB $FF
1062  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1063  E000
1064  E000                  SLOT    UniverseBankAddr
1065  E000                  PAGE    BankUNIVDATA6
1066  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1067  C000 FF           UNIVDATABlock6      DB $FF
1068  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1069  E000
1070  E000                  SLOT    UniverseBankAddr
1071  E000                  PAGE    BankUNIVDATA7
1072  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1073  C000 FF           UNIVDATABlock7      DB $FF
1074  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1075  E000
1076  E000                  SLOT    UniverseBankAddr
1077  E000                  PAGE    BankUNIVDATA8
1078  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1079  C000 FF           UNIVDATABlock8      DB $FF
1080  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1081  E000
1082  E000                  SLOT    UniverseBankAddr
1083  E000                  PAGE    BankUNIVDATA8
1084  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1085  C000 FF           UNIVDATABlock9      DB $FF
1086  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1087  E000
1088  E000                  SLOT    UniverseBankAddr
1089  E000                  PAGE    BankUNIVDATA10
1090  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1091  C000 FF           UNIVDATABlock10     DB $FF
1092  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1093  E000
1094  E000                  SLOT    UniverseBankAddr
1095  E000                  PAGE    BankUNIVDATA11
1096  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1097  C000 FF           UNIVDATABlock11     DB $FF
1098  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1099  E000
1100  E000                  SLOT    UniverseBankAddr
1101  E000                  PAGE    BankUNIVDATA12
1102  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1103  C000 FF           UNIVDATABlock12     DB $FF
1104  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1105  E000
1106  E000                  SLOT    GalaxyDataAddr
1107  E000                  PAGE    BankGalaxyData0
1108  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1109  E000                  INCLUDE "./Universe/galaxy_data.asm"
# file opened: ./Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F405
   2++F405              EQ_FUEL                 EQU 0
   3++F405              EQ_MISSILE              EQU 1
   4++F405              EQ_CARGO_BAY            EQU 2
   5++F405              EQ_ECM                  EQU 3
   6++F405              EQ_FUEL_SCOOPS          EQU 4
   7++F405              EQ_ESCAPE_POD           EQU 5
   8++F405              EQ_ENERGY_BOMB          EQU 6
   9++F405              EQ_ENERGY_UNIT          EQU 7
  10++F405              EQ_DOCK_COMP            EQU 8
  11++F405              EQ_GAL_DRIVE            EQU 9
  12++F405              EQ_FRONT_PULSE          EQU 10
  13++F405              EQ_REAR_PULSE           EQU 11
  14++F405              EQ_LEFT_PULSE           EQU 12
  15++F405              EQ_RIGHT_PULSE          EQU 13
  16++F405              EQ_FRONT_BEAM           EQU 14
  17++F405              EQ_REAR_BEAM            EQU 15
  18++F405              EQ_LEFT_BEAM            EQU 16
  19++F405              EQ_RIGHT_BEAM           EQU 17
  20++F405              EQ_FRONT_MINING         EQU 18
  21++F405              EQ_REAR_MINING          EQU 19
  22++F405              EQ_LEFT_MINING          EQU 20
  23++F405              EQ_RIGHT_MINING         EQU 21
  24++F405              EQ_FRONT_MILITARY       EQU 22
  25++F405              EQ_REAR_MILITARY        EQU 23
  26++F405              EQ_LEFT_MILITARY        EQU 24
  27++F405              EQ_RIGHT_MILITARY       EQU 25
  28++F405
  29++F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F405
# file closed: ././Data/EquipmentEquates.asm
 311+ F405
 312+ F405              EquipNameTableRowLen    EQU 8
 313+ F405 51 9B 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 313+ F409 00 00 00 00
 314+ F40D 06 9E 00 00                          DW  WordMissile,    0,              0,          0
 314+ F411 00 00 00 00
 315+ F415 36 9B 47 9B                          DW  WordLarge,      WordCargo,      WordBay,    0
 315+ F419 4D 9B 00 00
 316+ F41D 5D 9B 64 9B                          DW  WordECM,        WordSystem,     0,          0
 316+ F421 00 00 00 00
 317+ F425 51 9B 56 9B                          DW  WordFuel,       WordScoops,     0,          0
 317+ F429 00 00 00 00
 318+ F42D 3C 9B 43 9B                          DW  WordEscape,     WordPod,        0,          0
 318+ F431 00 00 00 00
 319+ F435 6B 9B 72 9B                          DW  WordEnergy,     WordBomb,       0,          0
 319+ F439 00 00 00 00
 320+ F43D D0 9B 6B 9B                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 320+ F441 9E 9B 00 00
 321+ F445 AA 9B B2 9B                          DW  WordDocking,    WordComputers,  0,          0
 321+ F449 00 00 00 00
 322+ F44D C7 9B 0E 9E                          DW  WordGalactic,   WordHyperdrive, 0,          0
 322+ F451 00 00 00 00
 323+ F455 20 9B 7D 9B                          DW  WordFront,      WordPulse,      WordLaser,  0
 323+ F459 77 9B 00 00
 324+ F45D 31 9B 7D 9B                          DW  WordRear,       WordPulse,      WordLaser,  0
 324+ F461 77 9B 00 00
 325+ F465 2C 9B 7D 9B                          DW  WordLeft,       WordPulse,      WordLaser,  0
 325+ F469 77 9B 00 00
 326+ F46D 26 9B 7D 9B                          DW  WordRight,      WordPulse,      WordLaser,  0
 326+ F471 77 9B 00 00
 327+ F475 20 9B 83 9B                          DW  WordFront,      WordBeam,       WordLaser,  0
 327+ F479 77 9B 00 00
 328+ F47D 31 9B 83 9B                          DW  WordRear,       WordBeam,       WordLaser,  0
 328+ F481 77 9B 00 00
 329+ F485 2C 9B 83 9B                          DW  WordLeft,       WordBeam,       WordLaser,  0
 329+ F489 77 9B 00 00
 330+ F48D 26 9B 83 9B                          DW  WordRight,      WordBeam,       WordLaser,  0
 330+ F491 77 9B 00 00
 331+ F495 20 9B 90 9B                          DW  WordFront,      WordMining,     WordLaser,  0
 331+ F499 77 9B 00 00
 332+ F49D 31 9B 90 9B                          DW  WordRear,       WordMining,     WordLaser,  0
 332+ F4A1 77 9B 00 00
 333+ F4A5 2C 9B 90 9B                          DW  WordLeft,       WordMining,     WordLaser,  0
 333+ F4A9 77 9B 00 00
 334+ F4AD 26 9B 90 9B                          DW  WordRight,      WordMining,     WordLaser,  0
 334+ F4B1 77 9B 00 00
 335+ F4B5 20 9B 19 9E                          DW  WordFront,      WordMilitary,   WordLaser,  0
 335+ F4B9 77 9B 00 00
 336+ F4BD 31 9B 19 9E                          DW  WordRear,       WordMilitary,   WordLaser,  0
 336+ F4C1 77 9B 00 00
 337+ F4C5 2C 9B 19 9E                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 337+ F4C9 77 9B 00 00
 338+ F4CD 26 9B 19 9E                          DW  WordRight,      WordMilitary,   WordLaser,  0
 338+ F4D1 77 9B 00 00
 339+ F4D5
 340+ F4D5              ;Each row is 7 bytes
 341+ F4D5              ;                                                               12345  6  789012345678901
 342+ F4D5              ;	canbuy;
 343+ F4D5              ;	y;
 344+ F4D5              ;	show;
 345+ F4D5              ;	level;
 346+ F4D5              ;	price 2 bytes;
 347+ F4D5              ;	type;
 348+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 349+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 350+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 351+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 352+ F4D5              ;                           c  y  s  t
 353+ F4D5              ;                           a  p  h  e                                            fi     P
 354+ F4D5              ;                           n  o  o  c                                            tt     o
 355+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 356+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 356+ F4D9 02 00 00 00
 356+ F4DD FF 00 00 00
 356+ F4E1 00 00 00 00
 357+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4E9 2C 01 01 00
 357+ F4ED FF 00 00 00
 357+ F4F1 00 00 00 00
 358+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4F9 A0 0F 02 00
 358+ F4FD FF 00 00 00
 358+ F501 00 00 00 00
 359+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F509 70 17 03 00
 359+ F50D FF 00 00 00
 359+ F511 00 00 00 00
 360+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F519 82 14 04 00
 360+ F51D FF 00 00 00
 360+ F521 00 00 00 00
 361+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F529 10 27 05 00
 361+ F52D FF 00 00 00
 361+ F531 00 00 00 00
 362+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F539 28 23 06 00
 362+ F53D FF 00 00 00
 362+ F541 00 00 00 00
 363+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F549 98 3A 07 00
 363+ F54D FF 00 00 00
 363+ F551 00 00 00 00
 364+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F559 98 3A 08 00
 364+ F55D FF 00 00 00
 364+ F561 00 00 00 00
 365+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F569 50 C3 09 00
 365+ F56D FF 00 00 00
 365+ F571 00 00 00 00
 366+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F579 A0 0F 0A 00
 366+ F57D 00 00 00 00
 366+ F581 00 00 00 00
 367+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F589 A0 0F 0B 00
 367+ F58D 01 00 00 00
 367+ F591 00 00 00 00
 368+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F599 A0 0F 0C 00
 368+ F59D 02 00 00 00
 368+ F5A1 00 00 00 00
 369+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F5A9 A0 0F 0D 00
 369+ F5AD 03 00 00 00
 369+ F5B1 00 00 00 00
 370+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5B9 10 27 0E 00
 370+ F5BD 00 00 00 00
 370+ F5C1 00 00 00 00
 371+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5C9 10 27 0F 00
 371+ F5CD 01 00 00 00
 371+ F5D1 00 00 00 00
 372+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5D9 10 27 10 00
 372+ F5DD 02 00 00 00
 372+ F5E1 00 00 00 00
 373+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5E9 10 27 11 00
 373+ F5ED 03 00 00 00
 373+ F5F1 00 00 00 00
 374+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5F9 40 1F 12 00
 374+ F5FD 00 00 00 00
 374+ F601 00 00 00 00
 375+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F609 40 1F 13 00
 375+ F60D 01 00 00 00
 375+ F611 00 00 00 00
 376+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F619 40 1F 14 00
 376+ F61D 02 00 00 00
 376+ F621 00 00 00 00
 377+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F629 40 1F 15 00
 377+ F62D 03 00 00 00
 377+ F631 00 00 00 00
 378+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F639 60 EA 16 00
 378+ F63D 00 00 00 00
 378+ F641 00 00 00 00
 379+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F649 60 EA 17 00
 379+ F64D 01 00 00 00
 379+ F651 00 00 00 00
 380+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F659 60 EA 18 00
 380+ F65D 02 00 00 00
 380+ F661 00 00 00 00
 381+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F669 60 EA 19 00
 381+ F66D 03 00 00 00
 381+ F671 00 00 00 00
 382+ F675              ShipEquipTableRowLen    EQU 16
 383+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 384+ F675
 385+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 386+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 387+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 388+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 389+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 390+ F679              GalaxySeedRandom:
 391+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 392+ F679 CD 2E 98     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 393+ F67C 18 03                                jr		GetDigramWorkingSeed
 394+ F67E CD 46 98     GetDigramSystemSeed:    call	copy_system_to_working
 395+ F681 11 44 A0     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 396+ F684 06 03                                ld		b,3
 397+ F686 3A 05 95                             ld		a,(WorkingSeeds)
 398+ F689 E6 40                                and		$40
 399+ F68B 28 03                                jr		z,.SmallSizeName
 400+ F68D CD 65 A0     .LargeSizeName:         call	NamingLoop
 401+ F690 CD 65 A0     .SmallSizeName:         call	NamingLoop
 402+ F693 CD 65 A0                             call	NamingLoop
 403+ F696 CD 65 A0                             call	NamingLoop
 404+ F699 EB           .DoneName:              ex		de,hl
 405+ F69A 36 00                                ld		(hl),0
 406+ F69C EB                                   ex		de,hl
 407+ F69D C9                                   ret
 408+ F69E
 409+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 410+ F6A1              ; Uses registers a,b and hl
 411+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 412+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 413+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 414+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 415+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 416+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 417+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 418+ F6AF 78                                   ld      a,b
 419+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 420+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 421+ F6B6 47                                   ld      b,a                                             ; b = r1
 422+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 423+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 424+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 425+ F6BE 4F                                   ld      c,a
 426+ F6BF 78                                   ld      a,b
 427+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 428+ F6C3 79                                   ld      a,c
 429+ F6C4 C9                                   ret
 430+ F6C5
 431+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 432+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 433+ F6C7 ED 31                                add     hl,a
 434+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 435+ F6CA 47                                   ld      b,a
 436+ F6CB 23                                   inc     hl
 437+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 438+ F6CD 68                                   ld      l,b
 439+ F6CE 67                                   ld      h,a
 440+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 441+ F6D0 FE 00                                cp      0
 442+ F6D2 C8                                   ret     z
 443+ F6D3 12                                   ld      (de),a
 444+ F6D4 23                                   inc     hl
 445+ F6D5 13                                   inc     de
 446+ F6D6 18 F7                                jr      GalaxyCopyLoop
 447+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 448+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 449+ F6DB 3E 28                                ld      a,"("
 450+ F6DD 12                                   ld      (de),a
 451+ F6DE 13                                   inc     de
 452+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 453+ F6E2 CB 7F                                bit     7,a
 454+ F6E4 20 0A                                jr      nz,.NonHuman
 455+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 456+ F6E9 AF                                   xor     a
 457+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 458+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 459+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 460+ F6F3 CB 3F                                srl     a
 461+ F6F5 CB 3F                                srl     a
 462+ F6F7 E6 07                                and     $07
 463+ F6F9 FE 03                                cp      3
 464+ F6FB 30 0A                                jr      nc,.NotDesc1
 465+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 466+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 467+ F703 3E 20                                ld      a," "
 468+ F705 12                                   ld      (de),a
 469+ F706 13                                   inc     de
 470+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 471+ F70A CB 3F                                srl     a
 472+ F70C CB 3F                                srl     a
 473+ F70E CB 3F                                srl     a
 474+ F710 CB 3F                                srl     a
 475+ F712 CB 3F                                srl     a
 476+ F714 FE 06                                cp      6
 477+ F716 30 0A                                jr      nc,.NotDesc2
 478+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 479+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 480+ F71E 3E 20                                ld      a," "
 481+ F720 12                                   ld      (de),a
 482+ F721 13                                   inc     de
 483+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 484+ F725 47                                   ld      b,a
 485+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 486+ F729 A8                                   xor     b
 487+ F72A E6 07                                and     $07
 488+ F72C F5                                   push    af
 489+ F72D FE 06                                cp      6
 490+ F72F 30 0A                                jr      nc,.NotDesc3
 491+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 492+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 493+ F737 3E 20                                ld      a," "
 494+ F739 12                                   ld      (de),a
 495+ F73A 13                                   inc     de
 496+ F73B F1           .NotDesc3:              pop     af
 497+ F73C 47                                   ld      b,a
 498+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 499+ F740 E6 03                                and     $03
 500+ F742 80                                   add     a,b
 501+ F743 E6 07                                and     $07
 502+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 503+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 504+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 505+ F74D 12                                   ld      (de),a
 506+ F74E 13                                   inc     de
 507+ F74F 3E 29                                ld      a,")"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 AF                                   xor     a
 511+ F754 12                                   ld      (de),a
 512+ F755 C9                                   ret
 513+ F756
 514+ F756
 515+ F756              ; To copy seed, loops from 3 to 0
 516+ F756              ; copy seed X + 2 to target X
 517+ F756              ; x = x -1
 518+ F756
 519+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 520+ F756
 521+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 522+ F756 23                                   inc		hl
 523+ F757 7E                                   ld		a,(hl)
 524+ F758 FE 00                                cp		0
 525+ F75A C8                                   ret		z
 526+ F75B FE 5B                                cp		'Z'+1
 527+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 528+ F75F FE 41                                cp		'A'
 529+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 530+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 531+ F765 77                                   ld		(hl),a
 532+ F766 18 EE                                jr		GalaxyCapitaliseString
 533+ F768
 534+ F768
 535+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 536+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 537+ F768                                      ;cp      $FF
 538+ F768                                      ;jr      z,.NoSystemFound
 539+ F768 3A 07 95     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 540+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 541+ F76E 3A 08 95                             ld      a,(WorkingSeeds+3)                              ;
 542+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 543+ F774 3A 09 95                             ld      a,(WorkingSeeds+4)                              ;
 544+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 545+ F77A 3A 0A 95                             ld      a,(WorkingSeeds+5)                              ;
 546+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 547+ F780 C9                                   ret
 548+ F781              ; For later......
 549+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 550+ F783 F5           .GalaxyExpandDesc:      push    af
 551+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 552+ F785 C5                                   push    bc                                              ; save Y reg
 553+ F786
 554+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 555+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 556+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 557+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 558+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 559+ F78D                                      ;cp      $FF
 560+ F78D                                      ;jr      z,.NoSystemFound
 561+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 562+ F78D
 563+ F78D
 564+ F78D
 565+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 566+ F78D
 567+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 568+ F7AB
 569+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 570+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 571+ F7AE FE 3E                                cp      ">"
 572+ F7B0 C8                                   ret     z
 573+ F7B1 23                                   inc     hl
 574+ F7B2 16 0A                                ld      d,10
 575+ F7B4 ED 30                                mul
 576+ F7B6 D6 30                                sub     "0"
 577+ F7B8 83                                   add     a,e
 578+ F7B9 5F                                   ld      e,a
 579+ F7BA 18 F1                                jr      .ExpandTokenLoop
 580+ F7BC
 581+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 582+ F7BD C5                                   push    bc                                          ;+2
 583+ F7BE CD A1 F6                             call    GalaxyDoRandom
 584+ F7C1 C1                                   pop     bc                                          ;+1
 585+ F7C2 E1                                   pop     hl                                          ;+0
 586+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 587+ F7C5 FE 33                                cp      $33
 588+ F7C7 DA CB F7                             jp      c,.Check66
 589+ F7CA 14           .IsGTE33:               inc     d
 590+ F7CB FE 66        .Check66:               cp      $66
 591+ F7CD DA D1 F7                             jp      c,.Check99
 592+ F7D0 14           .IsGTE66:               inc     d
 593+ F7D1 FE 99        .Check99:               cp      $99
 594+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 595+ F7D6 14                                   inc     d
 596+ F7D7 FE CC        .CheckCC:               cp      $CC
 597+ F7D9 38 01                                jr      c,.TokenIdToAddress
 598+ F7DB 14           .ItGETCC:               inc     d
 599+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 600+ F7DF 7B                                   ld      a,e
 601+ F7E0 CB 27                                sla     a                                               ; x 2
 602+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 603+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 604+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 605+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 606+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 607+ F7EC 7A                                   ld      a,d
 608+ F7ED ED 31                                add     hl,a
 609+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 610+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 611+ F7F2 DD 6F                                ld      ixl,a
 612+ F7F4 23                                   inc     hl
 613+ F7F5 7E                                   ld      a,(hl)
 614+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 615+ F7F8 DD E5                                push    ix                                              ;+2
 616+ F7FA E1                                   pop     hl                                              ;+1
 617+ F7FB C9                                   ret
 618+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 619+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 620+ F7FD D5                                   push    de                                              ;+2
 621+ F7FE C5                                   push    bc                                              ;+3
 622+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 623+ F802 FD 54                                ld      d,iyh
 624+ F804 FD 5D                                ld      e,iyl
 625+ F806 CD CF F6                             call    GalaxyCopyLoop
 626+ F809 FD 62                                ld      iyh,d
 627+ F80B FD 6B                                ld      iyl,e
 628+ F80D C1                                   pop     bc                                              ;+2
 629+ F80E D1                                   pop     de                                              ;+1
 630+ F80F E1                                   pop     hl
 631+ F810 C9                                   ret
 632+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 633+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 634+ F812 D5                                   push    de                                              ;+2
 635+ F813 C5                                   push    bc                                              ;+3
 636+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 637+ F817 FD 54                                ld      d,iyh
 638+ F819 FD 5D                                ld      e,iyl
 639+ F81B CD CF F6                             call    GalaxyCopyLoop
 640+ F81E FD 62                                ld      iyh,d
 641+ F820 FD 6B                                ld      iyl,e
 642+ F822 3E 69                                ld      a,"i"
 643+ F824 EB                                   ex      de,hl
 644+ F825 77                                   ld      (hl),a
 645+ F826 23                                   inc     hl
 646+ F827 3E 61                                ld      a,"a"
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 6E                                ld      a,"n"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F E5                                   push    hl
 653+ F830 FD E1                                pop     iy
 654+ F832 C1                                   pop     bc                                              ;+2
 655+ F833 D1                                   pop     de                                              ;+1
 656+ F834 E1                                   pop     hl                                              ;+0
 657+ F835 C9                                   ret
 658+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 659+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 660+ F837 D5                                   push    de                                              ;+2
 661+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 662+ F83B E6 03                                and     $03
 663+ F83D 47                                   ld      b,a
 664+ F83E 04                                   inc     b
 665+ F83F AF                                   xor     a
 666+ F840 4F                                   ld      c,a
 667+ F841 C5           .RLoop:                 push    bc                                              ;+3
 668+ F842 CD A1 F6                             call    GalaxyDoRandom
 669+ F845 C1                                   pop     bc                                              ;+2
 670+ F846 E6 3E                                and     $3E
 671+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 672+ F84B ED 31                                add     hl,a
 673+ F84D 7E                                   ld      a,(hl)
 674+ F84E FE 41                                cp      "A"
 675+ F850 38 01                                jr      c,.NotLowercase
 676+ F852 81                                   add     a,c
 677+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 678+ F856 23                                   inc     hl
 679+ F857 FD 23                                inc     iy
 680+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 681+ F85B 7E                                   ld      a,(hl)
 682+ F85C FE 41                                cp      "A"
 683+ F85E 38 01                                jr      c,.NotLowercase2
 684+ F860 81                                   add     a,c
 685+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 686+ F864 FD 23                                inc     iy
 687+ F866 10 D9                                djnz    .RLoop
 688+ F868 D1                                   pop     de                                              ;+1
 689+ F869 E1                                   pop     hl                                              ;+0
 690+ F86A C9                                   ret
 691+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 692+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 693+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 694+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 695+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 696+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 697+ F87B CD CF F6                             call    GalaxyCopyLoop
 698+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 699+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 700+ F884                                      ; we will also capitalise the local copy here later
 701+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 702+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 703+ F88A CD CF F6                             call    GalaxyCopyLoop
 704+ F88D AF           .ClearOutDescription:   xor     a
 705+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 706+ F891 77                                   ld      (hl),a
 707+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 708+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 709+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 710+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 711+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 712+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 713+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 714+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 715+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 716+ F8A5 FE 00                                cp      0
 717+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 718+ F8AA FE 3C                                cp      "<"
 719+ F8AC C2 BF F8                             jp      nz,.NotToken
 720+ F8AF 23           .ItIsAToken:            inc     hl
 721+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 722+ F8B3 23                                   inc     hl
 723+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 724+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 725+ F8B8 CD A4 F8                             call    .ExpRecursive
 726+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 727+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 728+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 729+ F8BF FE 25        .NotToken:              cp      "%"
 730+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 731+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 732+ F8C5 7E                                   ld      a,(hl)
 733+ F8C6 FE 48                                cp      "H"
 734+ F8C8 20 07                                jr      nz,.IsItI
 735+ F8CA 23           .ItIsAnH:               inc     hl
 736+ F8CB CD FC F7                             call    ProcessHSymbol
 737+ F8CE C3 A4 F8                             jp      .ExpRecursive
 738+ F8D1 FE 49        .IsItI:                 cp      "I"
 739+ F8D3 20 07                                jr      nz,.ItIsR
 740+ F8D5 23           .ItIsAnI:               inc     hl
 741+ F8D6 CD 11 F8                             call    ProcessISymbol
 742+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 743+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 744+ F8DF 23                                   inc     hl
 745+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 746+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 747+ F8E6 FD 23                                inc     iy
 748+ F8E8 23                                   inc     hl
 749+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 750+ F8EC AF           .ExpansionComplete:     xor     a
 751+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 752+ F8F0 C9                                   ret
 753+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 754+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 755+ F8F4 3C                                   inc     a
 756+ F8F5 67                                   ld      h,a
 757+ F8F6 0E 00                                ld      c,0
 758+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 759+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 760+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 761+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 762+ F904 FE 00                                cp      0
 763+ F906                                      ; Check Cash TODO
 764+ F906 28 00                                jr      z,.CheckTechLevel
 765+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 766+ F90B BC                                   cp      h
 767+ F90C                                      ;jr      nc,.DoNotShowItem
 768+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 769+ F90F FE 00                                cp      0
 770+ F911                                    ;  jr      z,.DoNotShowItem
 771+ F911 79           .ShowItem:              ld      a,c
 772+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 773+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 774+ F918 FE 00                                cp      EQ_FUEL
 775+ F91A 28 18                                jr      z,.FuelLevel
 776+ F91C FE 01                                cp      EQ_MISSILE
 777+ F91E 28 25                                jr      z,.CountMissiles
 778+ F920 21 BB 97     .IsFitted:              ld      hl,EquipmentFitted
 779+ F923 ED 31                                add     hl,a
 780+ F925 7E                                   ld      a,(hl)
 781+ F926 FE 00                                cp      0
 782+ F928 28 05                                jr      z,.NotFittedItem
 783+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 784+ F92C C3 56 F9                             jp      .MoreToDoCheck
 785+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 786+ F931 C3 56 F9                             jp      .MoreToDoCheck
 787+ F934 3A A4 97     .FuelLevel:             ld      a,(Fuel)
 788+ F937 FE 46                                cp      MaxFuelLevel
 789+ F939 28 05                                jr      z,.FullFuel
 790+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 791+ F93D C3 56 F9                             jp      .MoreToDoCheck
 792+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 793+ F942 C3 56 F9                             jp      .MoreToDoCheck
 794+ F945 3A E0 94     .CountMissiles:         ld      a,(NbrMissiles)
 795+ F948 FE 00                                cp      0
 796+ F94A 28 05                                jr      z,.NoMissiles
 797+ F94C C6 30                                add     "0"
 798+ F94E C3 56 F9                             jp      .MoreToDoCheck
 799+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 800+ F953 C3 56 F9                             jp      .MoreToDoCheck
 801+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 802+ F959 0C                                   inc     c
 803+ F95A DD 19                                add     ix,de
 804+ F95C 10 A3                                djnz    .ItemCheckLoop
 805+ F95E C9                                   ret
 806+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 807+ F961 DD 77 01                             ld      (ix+1),a
 808+ F964 DD 19                                add     ix,de
 809+ F966 10 99                                djnz    .ItemCheckLoop
 810+ F968 C9                                   ret
 811+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 812+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 813+ F96C B7           .GenerateGovernment:    or      a
 814+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 815+ F96F CB 3F                                srl	    a
 816+ F971 CB 3F                                srl	    a                                                   ;
 817+ F973 E6 07                                and     $07                                             ;
 818+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 819+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 820+ F97B E6 07                                and     $07
 821+ F97D 47                                   ld      b,a
 822+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 823+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 823+ F981 FE 01       >                        cp     1
 823+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 824+ F986 78           .OneOrZero:             ld      a,b
 825+ F987 F6 02                                or      2
 826+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 827+ F98C C3 93 F9                             jp      .GenerateTechLevel
 828+ F98F 78           .GreaterThan1:          ld      a,b
 829+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 830+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 831+ F995 47                                   ld      b,a
 832+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 833+ F999 E6 03                                and     $03
 834+ F99B 80                                   add     b
 835+ F99C 47                                   ld      b,a
 836+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 837+ F9A0 4F                                   ld      c,a
 838+ F9A1 CB 2F                                sra     a
 839+ F9A3 80                                   add     b
 840+ F9A4 47                                   ld      b,a
 841+ F9A5 79                                   ld      a,c
 842+ F9A6 E6 01                                and     $1
 843+ F9A8 80                                   add     b
 844+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 845+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 846+ F9AE CB 27                                sla     a
 847+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 848+ F9B3 86                                   add     a,(hl)
 849+ F9B4 47                                   ld      b,a
 850+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 851+ F9B8 80                                   add     a,b
 852+ F9B9 3C                                   inc     a
 853+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 854+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 855+ F9C0 EE 07                                xor     7
 856+ F9C2 C6 03                                add     3
 857+ F9C4 57                                   ld      d,a
 858+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 859+ F9C8 C6 04                                add     4
 860+ F9CA 5F                                   ld      e,a
 861+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 862+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 863+ F9D0 26 00                                ld      h,0
 864+ F9D2 6F                                   ld      l,a
 865+ F9D3 CD E0 A1                             call    mulDEbyHL
 866+ F9D6 EB                                   ex      de,hl
 867+ F9D7                                      ShiftDELeft1
 867+ F9D7 CB 23       >			   sla e
 867+ F9D9 CB 12       >			   rl  d
 868+ F9DB                                      ShiftDELeft1
 868+ F9DB CB 23       >			   sla e
 868+ F9DD CB 12       >			   rl  d
 869+ F9DF                                      ShiftDELeft1
 869+ F9DF CB 23       >			   sla e
 869+ F9E1 CB 12       >			   rl  d
 870+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 871+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 872+ F9EA E6 0F                                and		$0F
 873+ F9EC C6 0B                                add     11
 874+ F9EE 47                                   ld      b,a
 875+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 876+ F9F2 4F                                   ld      c,a
 877+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 878+ F9F7 C9                                   ret
 879+ F9F8
 880+ F9F8              galaxy_master_seed_to_system:
 881+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 882+ F9FB 11 0C 94     		ld		de,SystemSeed
 883+ F9FE              galaxy_copy_seed:
 884+ F9FE ED A0        		ldi
 885+ FA00 ED A0        		ldi
 886+ FA02 ED A0        		ldi
 887+ FA04 ED A0        		ldi
 888+ FA06 ED A0        		ldi
 889+ FA08 ED A0        		ldi
 890+ FA0A C9           		ret
 891+ FA0B
 892+ FA0B              galaxy_master_to_galaxy_working:
 893+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 894+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 895+ FA11 18 EB        		jr		galaxy_copy_seed
 896+ FA13
 897+ FA13              galaxy_master_to_galaxy_naming:
 898+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 899+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 900+ FA19 18 E3        		jr		galaxy_copy_seed
 901+ FA1B
 902+ FA1B              working_seed_to_galaxy_working:
 903+ FA1B 21 05 95             ld      hl,WorkingSeeds
 904+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 905+ FA21 18 DB        		jr		galaxy_copy_seed
 906+ FA23
 907+ FA23              working_seed_to_galaxy_naming:
 908+ FA23 21 05 95             ld      hl,WorkingSeeds
 909+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 910+ FA29 18 D3        		jr		galaxy_copy_seed
 911+ FA2B
 912+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 913+ FA2B DD E5                push    ix
 914+ FA2D E1                   pop     hl
 915+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 916+ FA31 18 CB        		jr		galaxy_copy_seed
 917+ FA33
 918+ FA33
 919+ FA33              galaxy_working_seed_to_galaxy_naming:
 920+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 921+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 922+ FA39 18 C3        		jr		galaxy_copy_seed
 923+ FA3B
 924+ FA3B              galaxy_working_seed_to_system:
 925+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 926+ FA3E 11 0C 94     		ld		de,SystemSeed
 927+ FA41 18 BB        		jr		galaxy_copy_seed
 928+ FA43
 929+ FA43              system_seed_to_galaxy_working:
 930+ FA43 21 0C 94     		ld		hl,SystemSeed
 931+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 932+ FA49 18 B3        		jr		galaxy_copy_seed
 933+ FA4B
 934+ FA4B
 935+ FA4B              system_seed_to_galaxy_naming:
 936+ FA4B 21 0C 94     		ld		hl,SystemSeed
 937+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA51 18 AB        		jr		galaxy_copy_seed
 939+ FA53
 940+ FA53              ix_seed_to_galaxy_working:
 941+ FA53 DD E5                push    ix
 942+ FA55 E1                   pop     hl
 943+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 944+ FA59 18 A3        		jr		galaxy_copy_seed
 945+ FA5B
 946+ FA5B              ; Here we twist just once rather than the usual4 for a system
 947+ FA5B 3A FD E8     NextGalaxyNamingSeed:  ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 948+ FA5E B7                                   or		a							; clear carry flag
 949+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 950+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 951+ FA63 47                                   ld		b,a							; partial sum lo [x]
 952+ FA64              ; y = b + d	+ carry
 953+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 954+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 955+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 956+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 957+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 958+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 959+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 960+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 961+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 962+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 963+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 964+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 965+ FA84 B7                                   or		a
 966+ FA85 78                                   ld		a,b
 967+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 968+ FA89 86                                   add	    a,(hl)
 969+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 970+ FA8D 79                                   ld		a,c
 971+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 972+ FA91 8E                                   adc		a,(hl)
 973+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 974+ FA95 C9                                   ret
 975+ FA96
 976+ FA96
 977+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 978+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 979+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
 980+ FA9D 28 12                                jr		z,.SkipPhrase
 981+ FA9F C6 0C                                add		a,12
 982+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
 983+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
 984+ FAA6 ED 31                                add		hl,a
 985+ FAA8 ED A0                                ldi
 986+ FAAA 7E                                   ld		a,(hl)
 987+ FAAB FE 3F                                cp		'?'
 988+ FAAD 28 02                                jr		z,.SkipPhrase
 989+ FAAF ED A0        .AddExtra:              ldi
 990+ FAB1 D5           .SkipPhrase:            push	de
 991+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
 992+ FAB5 D1                                   pop		de
 993+ FAB6 C9                                   ret
 994+ FAB7
 995+ FAB7              ; takes location in BC, finds seed and expands the name
 996+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
 997+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
 998+ FABE FE 00                                cp      0
 999+ FAC0 C8                                   ret     z
1000+ FAC1
1001+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1002+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1003+ FAC7
1004+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1005+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1006+ FACD
1007+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1008+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1009+ FAD3
1010+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1011+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1012+ FAD9
1013+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1014+ FADC
1015+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1016+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1017+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1018+ FAE4 E6 40                                and		$40
1019+ FAE6 28 03                                jr		z,.SmallSizeName
1020+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1021+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1022+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1023+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1024+ FAF4 EB           .DoneName:              ex		de,hl
1025+ FAF5 36 00                                ld		(hl),0
1026+ FAF7 EB                                   ex		de,hl
1027+ FAF8 AF                                   xor     a
1028+ FAF9 3D                                   dec     a
1029+ FAFA C9                                   ret
1030+ FAFB              ;reorte X 13 Y 97
1031+ FAFB
1032+ FAFB              set_names_lowercase:
1033+ FAFB                  ;- to do, for case insensitive match
1034+ FAFB C9               ret
1035+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFC              is_system_found:        ; search string does not have /0
1037+ FAFC              ; search for riinus then ra you get seardh of rainus
1038+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1039+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1040+ FB02 0E 00        .getsearchlen:          ld      c,0
1041+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1042+ FB05 FE 00                                cp      0
1043+ FB07 28 07                                jr      z,.readyToSearch
1044+ FB09 23                                   inc     hl
1045+ FB0A 0C                                   inc     c
1046+ FB0B C3 04 FB                             jp      .getsearchlenloop
1047+ FB0E 06 20                                ld      b,32
1048+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1049+ FB13 1A           .searchLoop:            ld      a,(de)
1050+ FB14 FE 00                                cp      0
1051+ FB16 28 0D                                jr      z,.EndOfMatch
1052+ FB18 0D                                   dec     c
1053+ FB19 C5                                   push    bc
1054+ FB1A ED A1                                cpi
1055+ FB1C C1                                   pop     bc
1056+ FB1D 20 03                                jr      nz,.noMatch
1057+ FB1F 13                                   inc     de
1058+ FB20
1059+ FB20 10 F1                                djnz    .searchLoop
1060+ FB22 3E FF        .noMatch:               ld      a,$FF
1061+ FB24 C9                                   ret
1062+ FB25 79           .EndOfMatch:            ld      a,c
1063+ FB26 FE 00                                cp      0
1064+ FB28 C8                                   ret     z
1065+ FB29 3E FF                                ld      a,$FF
1066+ FB2B C9                                   ret
1067+ FB2C
1068+ FB2C AF           find_system_by_name:    xor     a
1069+ FB2D 32 25 94                             ld      (XSAV),a
1070+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1071+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1072+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1073+ FB3A CD FC FA                             call    is_system_found
1074+ FB3D FE 00                                cp      0
1075+ FB3F 28 19                                jr      z,.FoundAtIX
1076+ FB41 3A 25 94                             ld      a,(XSAV)
1077+ FB44 3D                                   dec     a
1078+ FB45 28 10                                jr      z,.NoMoreSystems
1079+ FB47 32 25 94                             ld      (XSAV),a
1080+ FB4A DD E5                                push    ix
1081+ FB4C E1                                   pop     hl
1082+ FB4D ED 34 08 00                          add     hl,8
1083+ FB51 E5                                   push    hl
1084+ FB52 DD E1                                pop     ix
1085+ FB54 C3 34 FB                             jp      .nextSystem
1086+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1087+ FB59 C9                                   ret
1088+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1089+ FB5D C9                                   ret
1090+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1091+ FB5E 00 00        nearestfound:           DW 0
1092+ FB60              ; In here de carries current nearest and loads into nearest found
1093+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1094+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1095+ FB64 FD 26 00                             ld      iyh,0
1096+ FB67 FD 2E 78                             ld      iyl,120
1097+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1098+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1099+ FB71 5F                                   ld      e,a                             ; e= current seed x
1100+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1100+ FB72 B9          >                        cp      c
1100+ FB73 DA 84 FB    >                        jp		c,nearestXPosLT
1101+ FB76 D5           nearestXPosGTE:         push    de                              ;
1102+ FB77 26 00                                ld      h,0                             ;
1103+ FB79 6F                                   ld      l,a                             ; hl = seed x
1104+ FB7A 16 00                                ld      d,0                             ;
1105+ FB7C 59                                   ld      e,c                             ; de = nearest x
1106+ FB7D B7                                   or      a                               ;
1107+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1108+ FB80 D1                                   pop     de
1109+ FB81 C3 8E FB                             jp      nearestDistXPos
1110+ FB84 D5           nearestXPosLT:          push    de                              ;
1111+ FB85 26 00                                ld      h,0                             ;
1112+ FB87 69                                   ld      l,c                             ; hl = nearest x
1113+ FB88 16 00                                ld      d,0                             ;
1114+ FB8A B7                                   or      a                               ; de = seed x
1115+ FB8B ED 52                                sbc     hl,de                           ;
1116+ FB8D D1                                   pop     de                              ; hl = distance between the two
1117+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1118+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1119+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1120+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1121+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1122+ FB96 57                                   ld      d,a                             ; d = seed y
1123+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1123+ FB97 B8          >                        cp      b
1123+ FB98 DA AC FB    >                        jp		c,nearestYPosLT
1124+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1125+ FB9C D5                                   push    de                              ;
1126+ FB9D 26 00                                ld      h,0                             ;
1127+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1128+ FBA0 16 00                                ld      d,0                             ;
1129+ FBA2 58                                   ld      e,b                             ; de = nearest y
1130+ FBA3 B7                                   or      a                               ;
1131+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1132+ FBA6 7D                                   ld      a,l
1133+ FBA7 D1                                   pop     de
1134+ FBA8 E1                                   pop     hl
1135+ FBA9 C3 BA FB                             jp      nearestDistYPos
1136+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1137+ FBAD D5                                   push    de                              ;
1138+ FBAE 26 00                                ld      h,0                             ;
1139+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1140+ FBB1 5A                                   ld      e,d                             ;
1141+ FBB2 16 00                                ld      d,0                             ; de = seed y
1142+ FBB4 B7                                   or      a                               ;
1143+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1144+ FBB7 7D                                   ld      a,l
1145+ FBB8 D1                                   pop     de
1146+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1147+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1148+ FBBC 30 12                                jr      nc, find_nearest_miss
1149+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1150+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1151+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1152+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1153+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1154+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1155+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1156+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1156+ FBCD FE 02       >                   cp    2
1156+ FBCF D8          >                   ret	 c
1157+ FBD0 DD E5        find_nearest_miss:      push     ix
1158+ FBD2 E1                                   pop      hl
1159+ FBD3 ED 34 08 00                          add      hl,8
1160+ FBD7 E5                                   push     hl
1161+ FBD8 DD E1                                pop      ix
1162+ FBDA FD 25                                dec     iyh
1163+ FBDC FD 7C                                ld      a,iyh
1164+ FBDE                                      IfANotZeroGoto find_nearest_loop
1164+ FBDE FE 00       >				cp	0
1164+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1165+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1166+ FBE7 C9                                   ret
1167+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1168+ FBE8              ; Does a sqare root distance
1169+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1170+ FBEA 26 00                                ld      h,0
1171+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1172+ FBEF 47                                   ld      b,a
1173+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1174+ FBF3 B8                                   cp      b
1175+ FBF4 20 0E                                jr      nz,.NotSame
1176+ FBF6 C5           .XSame:                 push    bc
1177+ FBF7 F5                                   push    af
1178+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1179+ FBFB 47                                   ld      b,a
1180+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1181+ FBFF B8                                   cp      b
1182+ FC00 C1                                   pop     bc
1183+ FC01 F1                                   pop     af
1184+ FC02 28 49                                jr      z,.ZeroDistance
1185+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1186+ FC06 68           .DestinationLTPresentX: ld      l,b
1187+ FC07 5F                                   ld      e,a
1188+ FC08 B7                                   or      a
1189+ FC09 ED 52                                sbc     hl,de
1190+ FC0B C3 13 FC                             jp      .SquareXDist
1191+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1192+ FC0F 58                                   ld      e,b
1193+ FC10 B7                                   or      a
1194+ FC11 ED 52                                sbc     hl,de
1195+ FC13 55           .SquareXDist:           ld      d,l
1196+ FC14 5D                                   ld      e,l
1197+ FC15 ED 30                                mul
1198+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1199+ FC1A 47                                   ld      b,a
1200+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1201+ FC1E B8                                   cp      b
1202+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1203+ FC21 4F           .DestinationLTPresentY: ld      c,a
1204+ FC22 68                                   ld      l,b
1205+ FC23 06 00                                ld      b,0
1206+ FC25 26 00                                ld      h,0
1207+ FC27 ED 42                                sbc     hl,bc
1208+ FC29 C3 34 FC                             jp      .DestinationYDone
1209+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1210+ FC2D 6F                                   ld      l,a
1211+ FC2E 06 00                                ld      b,0
1212+ FC30 26 00                                ld      h,0
1213+ FC32 ED 42                                sbc     hl,bc
1214+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1215+ FC36 7D                                   ld      a,l
1216+ FC37 EB                                   ex      de,hl
1217+ FC38 57                                   ld      d,a
1218+ FC39 5F                                   ld      e,a
1219+ FC3A ED 30        .SquareYDist:           mul
1220+ FC3C 19                                   add     hl,de
1221+ FC3D EB                                   ex      de,hl
1222+ FC3E CD 5B A2                             call    asm_sqrt            ; distance via pythagoras in hl
1223+ FC41                                      ShiftHLLeft1
1223+ FC41 CB 25       >			   sla l
1223+ FC43 CB 14       >			   rl  h
1224+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1224+ FC45 CB 25       >			   sla l
1224+ FC47 CB 14       >			   rl  h
1225+ FC49 22 18 95                             ld      (Distance),hl       ; Distance is now caulated distance
1226+ FC4C C9                                   ret
1227+ FC4D AF           .ZeroDistance:          xor     a
1228+ FC4E 32 18 95                             ld      (Distance),a
1229+ FC51 32 19 95                             ld      (Distance+1),a
1230+ FC54 C9                                   ret
1231+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1232+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds, this needs to chagne to galaxyresultseed or galayxworkingseed
1233+ FC55 AF           galaxy_system_under_cursor:xor     a
1234+ FC56 32 25 94                             ld		(XSAV),a
1235+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1236+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1237+ FC60 DD E5                                push    ix
1238+ FC62 7D                                   ld      a,l
1239+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1240+ FC66 20 14                                jr      nz,.ItsNotThisX
1241+ FC68 7C                                   ld      a,h
1242+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1243+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1244+ FC6E DD E5                                push    ix
1245+ FC70 E1                                   pop     hl
1246+ FC71 11 05 95                             ld      de,WorkingSeeds
1247+ FC74 CD 19 98                             call    copy_seed
1248+ FC77 3E FF                                ld      a,$FF
1249+ FC79 DD E1                                pop     ix
1250+ FC7B C9                                   ret
1251+ FC7C E1           .ItsNotThisX:           pop     hl
1252+ FC7D ED 34 08 00                          add     hl,8
1253+ FC81 E5                                   push    hl
1254+ FC82 DD E1                                pop     ix
1255+ FC84 3A 25 94                             ld		a,(XSAV)
1256+ FC87 3D                                   dec		a
1257+ FC88 32 25 94                             ld      (XSAV),a
1258+ FC8B FE 00                                cp		0
1259+ FC8D C8                                   ret		z
1260+ FC8E 18 CD                                jr		.GCCounterLoop
1261+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1262+ FC90 21 0C 94     SeedGalaxy:             ld      hl,SystemSeed
1263+ FC93 11 10 E0                             ld      de,galaxy_master_seed
1264+ FC96 ED A0                                ldi
1265+ FC98 ED A0                                ldi
1266+ FC9A ED A0                                ldi
1267+ FC9C ED A0                                ldi
1268+ FC9E ED A0                                ldi
1269+ FCA0 ED A0                                ldi
1270+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data
1271+ FCA6 AF                                   xor		a
1272+ FCA7 32 25 94                             ld		(XSAV),a
1273+ FCAA DD E5        SeedGalaxyLoop:         push    ix
1274+ FCAC D1                                   pop     de
1275+ FCAD 21 0C 94                             ld      hl,SystemSeed
1276+ FCB0 CD 19 98                             call    copy_seed
1277+ FCB3 DD E5                                push    ix
1278+ FCB5 E1                                   pop     hl
1279+ FCB6 ED 34 08 00                          add     hl,8
1280+ FCBA E5                                   push    hl
1281+ FCBB DD E1                                pop     ix
1282+ FCBD CD 4E 98                             call    next_system_seed
1283+ FCC0 3A 25 94                             ld		a,(XSAV)
1284+ FCC3 3D                                   dec		a
1285+ FCC4 FE 00                                cp		0
1286+ FCC6 C8                                   ret		z
1287+ FCC7 32 25 94                             ld		(XSAV),a
1288+ FCCA 18 DE                                jr      SeedGalaxyLoop
1289+ FCCC C9                                   ret
1290+ FCCD
1291+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1292+ FCCD
# file closed: ./Universe/galaxy_data.asm
1110  FCCD
1111  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1112  FCCD
1113  FCCD
1114  FCCD                  SLOT    GalaxyDataAddr
1115  FCCD                  PAGE    BankGalaxyData1
1116  FCCD              	ORG GalaxyDataAddr, BankGalaxyData1
1117  E000 FF           GALAXYDATABlock1         DB $FF
1118  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1119  0000
1120  0000                  SLOT    GalaxyDataAddr
1121  0000                  PAGE    BankGalaxyData2
1122  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1123  E000 FF           GALAXYDATABlock2         DB $FF
1124  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1125  0000                  SLOT    GalaxyDataAddr
1126  0000                  PAGE    BankGalaxyData3
1127  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1128  E000 FF           GALAXYDATABlock3         DB $FF
1129  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1130  0000                  SLOT    GalaxyDataAddr
1131  0000                  PAGE    BankGalaxyData4
1132  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1133  E000 FF           GALAXYDATABlock4         DB $FF
1134  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1135  0000                  SLOT    GalaxyDataAddr
1136  0000                  PAGE    BankGalaxyData5
1137  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1138  E000 FF           GALAXYDATABlock5         DB $FF
1139  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1140  0000                  SLOT    GalaxyDataAddr
1141  0000                  PAGE    BankGalaxyData6
1142  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1143  E000 FF           GALAXYDATABlock6         DB $FF
1144  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1145  0000                  SLOT    GalaxyDataAddr
1146  0000                  PAGE    BankGalaxyData7
1147  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1148  E000 FF           GALAXYDATABlock7         DB $FF
1149  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1150  0000
1151  0000
1152  0000
1153  0000
1154  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1155  0000                  SAVENEX CFG  0,0,0,1
1156  0000                  SAVENEX AUTO
1157  0000                  SAVENEX CLOSE
1158  0000
# file closed: eliteNext.asm
