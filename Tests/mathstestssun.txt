# file opened: mathstestssun.asm
  1   0000                                      DEVICE ZXSPECTRUMNEXT
  2   0000                                      DEFINE  DOUBLEBUFFER 1
  3   0000                                      CSPECTMAP testMaths.map
  4   0000                                      OPT --zxnext=cspect --syntax=a --reversepop
  5   0000
  6   0000              testStartup:            ORG         $8000
  7   8000
  8   8000 DD 21 6C 86                          ld      ix, TestCase1
  9   8004 3A 0D 87     .TestLoop:              ld      a,(testCounter)
 10   8007 21 0C 87                             ld      hl, testTotal
 11   800A BE                                   cp      (hl)
 12   800B 28 5C                                jr      z,.Done
 13   800D DD 7E 00                             ld      a,(ix+testCase.XLo)
 14   8010 5F                                   ld      e,a
 15   8011 DD 7E 01                             ld      a,(ix+testCase.XHi)
 16   8014 6F                                   ld      l,a
 17   8015 DD 7E 02                             ld      a,(ix+testCase.XSgn)
 18   8018 67                                   ld      h,a
 19   8019 DD 7E 03                             ld      a,(ix+testCase.DVal)
 20   801C 57                                   ld      d,a
 21   801D CD 5D 81                             call    mulHLEbyDSigned
 22   8020 FD 2E 50                             ld      iyl,'P'
 23   8023 7A                                   ld      a,d
 24   8024 DD 77 0B                             ld      (ix+testCase.ActualD),a
 25   8027 DD BE 07                             cp      (ix+testCase.ExpectedD)
 26   802A 28 03                                jr      z,.DOK
 27   802C FD 2E 31                             ld      iyl,'1'
 28   802F              .DOK:
 29   802F 7B                                   ld      a,e
 30   8030 DD 77 0A                             ld      (ix+testCase.ActualE),a
 31   8033 DD BE 06                             cp      (ix+testCase.ExpectedE)
 32   8036 28 03                                jr      z,.EOK
 33   8038 FD 2E 32                             ld      iyl,'2'
 34   803B              .EOK:
 35   803B 7D                                   ld      a,l
 36   803C DD 77 09                             ld      (ix+testCase.ActualL),a
 37   803F DD BE 05                             cp      (ix+testCase.ExpectedL)
 38   8042 28 03                                jr      z,.LOK
 39   8044 FD 2E 33                             ld      iyl,'3'
 40   8047              .LOK:
 41   8047 79                                   ld      a,c
 42   8048 DD 77 08                             ld      (ix+testCase.ActualC),a
 43   804B DD BE 04                             cp      (ix+testCase.ExpectedC)
 44   804E 28 03                                jr      z,.COK
 45   8050 FD 2E 34                             ld      iyl,'4'
 46   8053              .COK:
 47   8053 FD 7D                                ld      a,iyl
 48   8055 DD 77 0F                             ld      (ix+testCase.PassFail),a
 49   8058 21 0D 87                             ld      hl,testCounter
 50   805B 34                                   inc     (hl)
 51   805C DD E5                                push    ix
 52   805E E1                                   pop     hl
 53   805F 3E 10                                ld      a,16
 54   8061 ED 31                                add     hl,a
 55   8063 E5                                   push    hl
 56   8064 DD E1                                pop     ix
 57   8066 C3 04 80                             jp      .TestLoop
 58   8069
 59   8069 DD 01        .Done                   break
 60   806B C3 69 80                             jp      .Done                   ; complete tight loop
 61   806E
 62   806E                                      INCLUDE "../Variables/constant_equates.asm"
# file opened: ../Variables/constant_equates.asm
  1+  806E              ;Contants
  2+  806E
  3+  806E              SignMask8Bit		equ %01111111
  4+  806E              SignMask16Bit		equ %0111111111111111
  5+  806E              SignOnly8Bit		equ $80
  6+  806E              SignOnly16Bit		equ $8000
  7+  806E
  8+  806E              Bit7Only            equ %10000000
  9+  806E              Bit6Only            equ %01000000
 10+  806E              Bit5Only            equ %00100000
 11+  806E              Bit4Only            equ %00010000
 12+  806E              Bit3Only            equ %00001000
 13+  806E              Bit2Only            equ %00000100
 14+  806E              Bit1Only            equ %00000010
 15+  806E              Bit0Only            equ %00000001
 16+  806E              Bit7Clear           equ %01111111
 17+  806E              Bit6Clear           equ %10111111
 18+  806E              Bit5Clear           equ %11011111
 19+  806E              Bit4Clear           equ %11101111
 20+  806E              Bit3Clear           equ %11110111
 21+  806E              Bit2Clear           equ %11111011
 22+  806E              Bit1Clear           equ %11111101
 23+  806E              Bit0Clear           equ %11111110
 24+  806E              ConstPi				equ $80
 25+  806E              ConstNorm           equ 197
 26+  806E
 27+  806E              ;Text Tokens
 28+  806E              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
 29+  806E              BrabenBellToken 	equ $0D
 30+  806E              AcorToken			equ $0C
 31+  806E
 32+  806E              ; Intro Screen
 33+  806E              TitleShip			equ	$8C
 34+  806E              RotationUnity		equ $60
 35+  806E              DBCheckCode			equ $DB
 36+  806E              MaxVisibility		equ $1F
 37+  806E              FarInFront			equ $C0
 38+  806E
 39+  806E              ; Universe Managment
 40+  806E              ShipTypeJunk        equ 3
 41+  806E              ShipTypeStation     equ 2
 42+  806E              ShipTypeMissile     equ 1
 43+  806E              ShipTypeNormal      equ 0
 44+  806E              ShipTypeText        equ 253
 45+  806E              ShipTypeDebug       equ 254
 46+  806E              ShipTypeEmpty       equ 255
 47+  806E              ; TacticsControl
 48+  806E              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 49+  806E              ShipIsBountyHunter  equ Bit1Only   ;
 50+  806E              ShipIsHostile       equ Bit2Only   ;
 51+  806E              ShipNotHostile      equ Bit2Clear   ;
 52+  806E              ShipIsPirate        equ Bit3Only   ;
 53+  806E              ShipIsDocking       equ Bit4Only   ;
 54+  806E              ShipIsBystander     equ Bit5Only   ;
 55+  806E              ShipIsCop           equ Bit6Only   ;
 56+  806E              ShipIsScoopDockEsc  equ Bit7Only   ;
 57+  806E              ShipAIEnabled       equ Bit7Only   ;
 58+  806E              ShipExploding       equ Bit5Only
 59+  806E              ShipKilled          equ Bit7Clear
 60+  806E
 61+  806E              ; UniverseAIControl
 62+  806E              ShipCanAnger        equ %00000001
 63+  806E
 64+  806E
 65+  806E              ShipMaxDistance     equ 192
 66+  806E              HyperSpaceTimers    equ $0B0B
 67+  806E
 68+  806E
 69+  806E              MaxNumberOfStars	equ 11
 70+  806E              ConsoleRefreshInterval  equ 4
 71+  806E
 72+  806E              ShipTypeSize		equ	32 			;??????? just a guess for now
 73+  806E              ShipSST				equ 4			; its a space station
 74+  806E              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 75+  806E              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 76+  806E              ShipCountMax		equ	2			; For now just 2 ships to debug
 77+  806E              LineLimitPerShip	equ 70			; Max lines per ship
 78+  806E              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 79+  806E              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 80+  806E              PlayerDocked		equ	$FF
 81+  806E
 82+  806E              ; Memory page managment	(Refers to a memory slot as a place to access data)
 83+  806E              ShipDataSlot		equ	6			; this may move into rom swap out space later
 84+  806E              UniverseObjectSlot	equ	7
 85+  806E
 86+  806E              KeyForwardsView		equ	$20
 87+  806E              ; Game specific equates
 88+  806E              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 89+  806E
 90+  806E              ;...Game Colour Mapping
 91+  806E              L2DustColour        equ L2ColourGREY_1
 92+  806E              L2SunScannerBright  equ 252
 93+  806E              L2SunScanner        equ 180
 94+  806E
 95+  806E
 96+  806E              ; Ship Data
 97+  806E              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 98+  806E              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 99+  806E              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
100+  806E              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
101+  806E              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
102+  806E              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
103+  806E              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
104+  806E              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
105+  806E              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
106+  806E              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
107+  806E              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
108+  806E              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
109+  806E              ;;;;00 00			 EQUW 0     \ type 12 is       Python
110+  806E              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
111+  806E              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
112+  806E              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
113+  806E              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
114+  806E              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
115+  806E              ;;;;00 00			 EQUW 0     \ type 18 is
116+  806E              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
117+  806E              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
118+  806E              ;;;;00 00			 EQUW 0     \ type 21 is
119+  806E              ;;;;00 00			 EQUW 0     \ type 22 is
120+  806E              ;;;;00 00			 EQUW 0     \ type 23 is
121+  806E              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
122+  806E              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
123+  806E              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
124+  806E              ;;;;00 00			 EQUW 0     \ type 27 is
125+  806E              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
126+  806E              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
127+  806E              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
128+  806E              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
129+  806E              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
130+  806E              ;;;;			\ NEWB examples
131+  806E              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
132+  806E              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
133+  806E              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
134+  806E              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
135+  806E              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
136+  806E
# file closed: ../Variables/constant_equates.asm
 63   806E                                      INCLUDE "../Hardware/L2ColourDefines.asm"
# file opened: ../Hardware/L2ColourDefines.asm
  1+  806E              L2ColourBLACK           EQU   0
  2+  806E              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
  3+  806E              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
  4+  806E              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
  5+  806E              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
  6+  806E              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
  7+  806E              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
  8+  806E              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
  9+  806E              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
 10+  806E              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
 11+  806E              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
 12+  806E              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
 13+  806E              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
 14+  806E              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
 15+  806E              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
 16+  806E              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
 17+  806E              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
 18+  806E              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
 19+  806E              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
 20+  806E              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
 21+  806E              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
 22+  806E              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
 23+  806E              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
 24+  806E              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
 25+  806E
 26+  806E
 27+  806E              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
 28+  806E              L2ColourWHITE_2         EQU 146
 29+  806E              L2ColourGREY_1		    EQU L2ColourWHITE_2
 30+  806E              L2ColourGREY_2		    EQU 109
 31+  806E              L2ColourGREY_3		    EQU  73
 32+  806E              L2ColourGREY_4		    EQU  37
 33+  806E
 34+  806E              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
 35+  806E              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
 36+  806E              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
 37+  806E              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
 38+  806E              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
 39+  806E
 40+  806E              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
 41+  806E              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
 42+  806E              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
 43+  806E              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
 44+  806E              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
 45+  806E              L2ColourORANGE_1        EQU 236                 ; RGB
 46+  806E              L2ColourORANGE_2        EQU 168                 ; RGB
 47+  806E              L2ColourORANGE_3        EQU  68                 ; RGB
 48+  806E              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
 49+  806E              L2ColourCYAN_2          EQU  18                 ; RGB
 50+  806E              L2ColourCYAN_3          EQU   9                 ; RGB
 51+  806E              L2ColourPURPLE_1        EQU 109                 ; RGB
 52+  806E              L2ColourPURPLE_2        EQU  66                 ; RGB
 53+  806E              L2ColourPURPLE_3        EQU  33                 ; RGB
 54+  806E              L2ColourPINK_1		    EQU 231                 ; RGB
 55+  806E              L2ColourPINK_2		    EQU 226                 ; RGB
 56+  806E              L2ColourPINK_3		    EQU 225                 ; RGB
 57+  806E              L2ColourPINK_4		    EQU 224                 ; RGB
 58+  806E
# file closed: ../Hardware/L2ColourDefines.asm
 64   806E                                      INCLUDE "../Macros/carryFlagMacros.asm"
# file opened: ../Macros/carryFlagMacros.asm
  1+  806E
  2+  806E              SetCarryFlag:           MACRO
  3+  806E ~                                    scf
  4+  806E                                      ENDM
  5+  806E
  6+  806E              ClearCarryFlag:	        MACRO
  7+  806E ~                                    or a
  8+  806E                                      ENDM
  9+  806E
 10+  806E              FlipCarryFlag:          MACRO
 11+  806E ~                                    ccf
 12+  806E                                      ENDM
 13+  806E
# file closed: ../Macros/carryFlagMacros.asm
 65   806E                                      INCLUDE "../Macros/jumpMacros.asm"
# file opened: ../Macros/jumpMacros.asm
  1+  806E              JumpIfPositive:	        MACRO target
  2+  806E ~                                    jp		p, target
  3+  806E                                      ENDM
  4+  806E
  5+  806E              JumpIfNegative:	        MACRO target
  6+  806E ~                                    jp		m, target
  7+  806E                                      ENDM
  8+  806E
  9+  806E
 10+  806E              JumpIfUnderflow:	    MACRO target
 11+  806E ~                                    jp		po, target
 12+  806E                                      ENDM
 13+  806E
 14+  806E              JumpIfOverflow:	        MACRO target
 15+  806E ~                                    jp		po, target
 16+  806E                                      ENDM
 17+  806E
 18+  806E
 19+  806E              JumpIfNotZero:	        MACRO target
 20+  806E ~                                    jp	nz,target
 21+  806E                                      ENDM
 22+  806E
 23+  806E              JumpIfZero:	            MACRO target
 24+  806E ~                                    jp	z,target
 25+  806E                                      ENDM
 26+  806E
 27+  806E              ;.. Bit routines
 28+  806E              JumpOnLeadSignSet:      MACRO   reg, target
 29+  806E ~                                    ld      a,reg
 30+  806E ~                                    and     SignOnly8Bit
 31+  806E ~                                    jp      nz,target
 32+  806E                                      ENDM
 33+  806E
 34+  806E              JumpOnLeadSignClear:    MACRO   reg, target
 35+  806E ~                                    ld      a,reg
 36+  806E ~                                    and     SignOnly8Bit
 37+  806E ~                                    jp      z,target
 38+  806E                                      ENDM
 39+  806E
 40+  806E              JumpOnLeadSignSetA:     MACRO   target
 41+  806E ~                                    and     SignOnly8Bit
 42+  806E ~                                    jp      nz,target
 43+  806E                                      ENDM
 44+  806E
 45+  806E              JumpOnLeadSignClearA:   MACRO   target
 46+  806E ~                                    and     SignOnly8Bit
 47+  806E ~                                    jp      z,target
 48+  806E                                      ENDM
 49+  806E
 50+  806E              JumpOnMemBitSet:        MACRO mem, bitnbr, target
 51+  806E ~                                    ld      a,(mem)
 52+  806E ~                                    bit 	bitnbr,a
 53+  806E ~                                    jp      nz,target
 54+  806E                                      ENDM
 55+  806E
 56+  806E              JumpOnMemBitClear:      MACRO mem, bitnbr, target
 57+  806E ~                                    ld      a,(mem)
 58+  806E ~                                    bit 	bitnbr,a
 59+  806E ~                                    jp      z,target
 60+  806E                                      ENDM
 61+  806E
 62+  806E              JumpOnABit5Set:         MACRO   target
 63+  806E ~                                    and     Bit5Only
 64+  806E ~                                    jp      nz,target
 65+  806E                                      ENDM
 66+  806E
 67+  806E              JumpOnABit5Clear:       MACRO   target
 68+  806E ~                                    and     Bit5Only
 69+  806E ~                                    jp      z,target
 70+  806E                                      ENDM
 71+  806E
 72+  806E              JumpOnBitMaskSet:       MACRO   bitmask, target
 73+  806E ~                                    and     bitmask
 74+  806E ~                                    jp      nz,target
 75+  806E                                      ENDM
 76+  806E
 77+  806E              JumpOnBitMaskClear:     MACRO   bitmask, target
 78+  806E ~                                    and     bitmask
 79+  806E ~                                    jp      z,target
 80+  806E                                      ENDM
 81+  806E
 82+  806E              JumpOnBitSet:           MACRO  reg, bitnbr, target
 83+  806E ~                                    bit 	bitnbr,reg
 84+  806E ~                                    jp      nz,target
 85+  806E                                      ENDM
 86+  806E
 87+  806E              JumpOnBitClear:         MACRO  reg, bitnbr, target
 88+  806E ~                                    bit 	bitnbr,reg
 89+  806E ~                                    jp      z,target
 90+  806E                                      ENDM
 91+  806E
 92+  806E              ; Comparison Routines
 93+  806E              JumpIfAGTEusng:         MACRO
 94+  806E ~                                    jp		nc,target
 95+  806E                                      ENDM
 96+  806E
 97+  806E              JumpIfAGTENusng:        MACRO reg,target
 98+  806E ~                                    cp     reg
 99+  806E ~                                    jp		nc,target
100+  806E                                      ENDM
101+  806E
102+  806E              JumpIfAGTEMemusng:      MACRO mem,target
103+  806E ~                                    ld      hl,mem
104+  806E ~                                    cp      (hl)
105+  806E ~                                    jp		nc,target
106+  806E                                      ENDM
107+  806E
108+  806E              JumpIfALTMemusng:       MACRO mem,target
109+  806E ~                                    ld      hl,mem
110+  806E ~                                    cp      (hl)
111+  806E ~                                    jp		c,target
112+  806E                                      ENDM
113+  806E
114+  806E              JumpIfMemGTENusng:      MACRO mem, value, target
115+  806E ~                                    ld     a,(mem)
116+  806E ~                                    cp     value
117+  806E ~                                    jp	  nc,target
118+  806E                                      ENDM
119+  806E
120+  806E              JumpIfMemGTEMemusng:    MACRO mem, address, target
121+  806E ~                                    ld   a,(mem)
122+  806E ~                                    ld   hl,address
123+  806E ~                                    cp   (hl)
124+  806E ~                                    jp	  nc,target
125+  806E                                      ENDM
126+  806E
127+  806E              JumpIfMemEqMemusng:     MACRO mem, address, target
128+  806E ~                                    ld   a,(mem)
129+  806E ~                                    ld   hl,address
130+  806E ~                                    cp   (hl)
131+  806E ~                                    jp	  z,target
132+  806E                                      ENDM
133+  806E
134+  806E              JumpIfMemNeMemusng:     MACRO mem, address, target
135+  806E ~                                    ld   a,(mem)
136+  806E ~                                    ld   hl,address
137+  806E ~                                    cp   (hl)
138+  806E ~                                    jp	  nz,target
139+  806E                                      ENDM
140+  806E
141+  806E              JumpIfMemTrue:          MACRO mem, target
142+  806E ~                                    ld      a,(mem)
143+  806E ~                                    and     a
144+  806E ~                                    jp      z, target
145+  806E                                      ENDM
146+  806E
147+  806E              JumpIfMemFalse:         MACRO mem, target
148+  806E ~                                    ld      a,(mem)
149+  806E ~                                    and     a
150+  806E ~                                    jp      nz, target
151+  806E                                      ENDM
152+  806E
153+  806E              JumpIfATrue:            MACRO target
154+  806E ~                                    and     a
155+  806E ~                                    jp      z, target
156+  806E                                      ENDM
157+  806E
158+  806E              JumpIfAFalse:           MACRO target
159+  806E ~                                    and     a
160+  806E ~                                    jp      nz, target
161+  806E                                      ENDM
162+  806E
163+  806E              JumpIfALTusng:          MACRO target
164+  806E ~                                    jp		c,target
165+  806E                                      ENDM
166+  806E
167+  806E              JumpIfALTNusng:         MACRO value, target
168+  806E ~                                    cp      value
169+  806E ~                                    jp		c, target
170+  806E                                      ENDM
171+  806E
172+  806E              JumpIfMemLTNusng:       MACRO mem, value, target
173+  806E ~                                    ld      a,(mem)
174+  806E ~                                    cp      value
175+  806E ~                                    jp	  c,target
176+  806E                                      ENDM
177+  806E
178+  806E              JumpIfMemLTMemusng:     MACRO mem, value, target
179+  806E ~                                    ld    a,(mem)
180+  806E ~                                    ld    hl,value
181+  806E ~                                    cp    (hl)
182+  806E ~                                    jp	  c,target
183+  806E                                      ENDM
184+  806E
185+  806E              JumpIfMemEqNusng:       MACRO mem,value,target
186+  806E ~                                    ld  a,(mem)
187+  806E ~                                    cp  value
188+  806E ~                                    jp  z,target
189+  806E                                      ENDM
190+  806E
191+  806E              JumpIfMemNeNusng:       MACRO mem,value,target
192+  806E ~                                    ld  a,(mem)
193+  806E ~                                    cp  value
194+  806E ~                                    jp  nz,target
195+  806E                                      ENDM
196+  806E
197+  806E              JumpIfMemZero:          MACRO mem,target
198+  806E ~                                    ld  a,(mem)
199+  806E ~                                    and a
200+  806E ~                                    jp  z,target
201+  806E                                      ENDM
202+  806E
203+  806E              JumpIfMemNotZero:       MACRO mem,target
204+  806E ~                                    ld  a,(mem)
205+  806E ~                                    and a
206+  806E ~                                    jp  nz,target
207+  806E                                      ENDM
208+  806E
209+  806E              JumpIfALTMemHLusng:     MACRO target
210+  806E ~                                    cp    (hl)
211+  806E ~                                    jp	  c,target
212+  806E                                      ENDM
213+  806E
214+  806E              JumpIfANENusng:         MACRO value, target
215+  806E ~                                    cp     value
216+  806E ~                                    jp      nz,target
217+  806E                                      ENDM
218+  806E
219+  806E              JumpIfANEMemusng:       MACRO  value, target
220+  806E ~                                    ld    hl,value
221+  806E ~                                    cp    (hl)
222+  806E ~                                    jp      nz,target
223+  806E                                      ENDM
224+  806E
225+  806E              JumpIfAEqNusng:         MACRO value, target
226+  806E ~                                    cp     value
227+  806E ~                                    jp      z,target
228+  806E                                      ENDM
229+  806E
230+  806E              JumpIfAIsZero:	        MACRO target
231+  806E ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
232+  806E ~                                    jp	z, target
233+  806E                                      ENDM
234+  806E
235+  806E              JumpIfAIsNotZero:       MACRO target
236+  806E ~                                    cp	0
237+  806E ~                                    jp	nz,target
238+  806E                                      ENDM
239+  806E
240+  806E              IfResultZeroGoto:	    MACRO target
241+  806E ~                                    jp	z,target
242+  806E                                      ENDM
243+  806E
244+  806E              IfResultNotZeroGoto:    MACRO target
245+  806E ~                                    jp	nz,target
246+  806E                                      ENDM
247+  806E
# file closed: ../Macros/jumpMacros.asm
 66   806E                                      INCLUDE "../Macros/ldCopyMacros.asm"
# file opened: ../Macros/ldCopyMacros.asm
  1+  806E              ZeroA:		            MACRO
  2+  806E ~                                    xor a
  3+  806E                                      ENDM
  4+  806E
  5+  806E              SetATrue:               MACRO
  6+  806E ~                                    xor     a
  7+  806E                                      ENDM
  8+  806E
  9+  806E              SetAFalse:              MACRO
 10+  806E ~                                    ld      a,$FF
 11+  806E                                      ENDM
 12+  806E
 13+  806E              SetMemFalse             MACRO   mem
 14+  806E ~                                    ld      a,$FF
 15+  806E ~                                    ld      (mem),a
 16+  806E                                      ENDM
 17+  806E
 18+  806E              SetMemTrue              MACRO   mem
 19+  806E ~                                    xor     a
 20+  806E ~                                    ld      (mem),a
 21+  806E                                      ENDM
 22+  806E
 23+  806E              SetMemToN:              MACRO   mem,value
 24+  806E ~                                    ld      a,value
 25+  806E ~                                    ld      (mem),a
 26+  806E                                      ENDM
 27+  806E
 28+  806E              ldCopyStringLen:        MACRO   source, target, strlen
 29+  806E ~                                    ld      hl,source
 30+  806E ~                                    ld      de, target
 31+  806E ~                                    ld      bc, strlen
 32+  806E ~                                    ldir
 33+  806E                                      ENDM
 34+  806E
 35+  806E              ldCopyTextAtHLtoDE:     MACRO
 36+  806E ~            .CopyLoop:              ld      a,(hl)
 37+  806E ~                                    ld      (de),a
 38+  806E ~                                    cp      0
 39+  806E ~                                    jp      z,.DoneCopy
 40+  806E ~                                    inc     hl
 41+  806E ~                                    inc     de
 42+  806E ~                                    jr      .CopyLoop
 43+  806E ~            .DoneCopy:
 44+  806E                                      ENDM
 45+  806E
 46+  806E              ldClearTextLoop:        MACRO   TextSize
 47+  806E ~                                    ld      b,a
 48+  806E ~                                    ld      a,TextSize
 49+  806E ~            .ClearLoop:             ld      (hl),a
 50+  806E ~                                    inc     hl
 51+  806E ~                                    djnz    .ClearLoop
 52+  806E                                      ENDM
 53+  806E
 54+  806E              ldCopyByte:             MACRO memfrom, memto
 55+  806E ~                                    ld       a,(memfrom)
 56+  806E ~                                    ld       (memto),a
 57+  806E                                      ENDM
 58+  806E
 59+  806E
 60+  806E              ldCopyByteABS:          MACRO memfrom, memto
 61+  806E ~                                    ld       a,(memfrom)
 62+  806E ~                                    and		$7F
 63+  806E ~                                    ld       (memto),a
 64+  806E                                      ENDM
 65+  806E
 66+  806E              ldAtHLtoMem:            MACRO   memto
 67+  806E ~                                    ld      a,(hl)
 68+  806E ~                                    ld      (memto),a
 69+  806E                                      ENDM
 70+  806E
 71+  806E              ldCopy2Byte             MACRO  memfrom, memto
 72+  806E ~                                    ld       hl,(memfrom)
 73+  806E ~                                    ld       (memto),hl
 74+  806E                                      ENDM
 75+  806E
 76+  806E              ldWriteConst            MACRO  memfrom, memto
 77+  806E ~                                    ld       a,memfrom
 78+  806E ~                                    ld       (memto),a
 79+  806E                                      ENDM
 80+  806E
 81+  806E              ldWriteZero             MACRO  memto
 82+  806E ~                                    xor      a
 83+  806E ~                                    ld       (memto),a
 84+  806E                                      ENDM
 85+  806E
 86+  806E              ldIXLaFromN:	        MACRO memfrom
 87+  806E ~                                    ld		a,(memfrom)
 88+  806E ~                                    ld		ixl,a
 89+  806E                                      ENDM
 90+  806E
 91+  806E              ldIXHaFromN:	        MACRO memfrom
 92+  806E ~                                    ld		a,(memfrom)
 93+  806E ~                                    ld		ixh,a
 94+  806E                                      ENDM
 95+  806E
 96+  806E              ldIYLaFromN:	        MACRO memfrom
 97+  806E ~                                    ld		a,(memfrom)
 98+  806E ~                                    ld		iyl,a
 99+  806E                                      ENDM
100+  806E
101+  806E              ldIYHaFromN:	        MACRO memfrom
102+  806E ~                                    ld		a,(memfrom)
103+  806E ~                                    ld		iyh,a
104+  806E                                      ENDM
105+  806E
106+  806E              ldhlde:			        MACRO
107+  806E ~                                    ld		h,d
108+  806E ~                                    ld		l,e
109+  806E                                      ENDM
110+  806E
111+  806E              ldhlbc:			        MACRO
112+  806E ~                                    ld		h,b
113+  806E ~                                    ld		l,c
114+  806E                                      ENDM
115+  806E
116+  806E              ldbcde:			        MACRO
117+  806E ~                                    ld		b,d
118+  806E ~                                    ld		c,e
119+  806E                                      ENDM
120+  806E
121+  806E              lddebc:			        MACRO
122+  806E ~                                    ld		d,b
123+  806E ~                                    ld		e,c
124+  806E                                      ENDM
125+  806E
126+  806E              ldbchl:			        MACRO
127+  806E ~                                    ld		b,h
128+  806E ~                                    ld		c,l
129+  806E                                      ENDM
130+  806E
131+  806E              lddeiy:			        MACRO
132+  806E ~                                    ld		d,iyh
133+  806E ~                                    ld		e,iyl
134+  806E                                      ENDM
135+  806E
136+  806E              ldiyde:			        MACRO
137+  806E ~                                    ld		iyh,d
138+  806E ~                                    ld		iyl,e
139+  806E                                      ENDM
140+  806E
141+  806E
142+  806E              FourLDIInstrunctions:   MACRO
143+  806E ~                                    ldi
144+  806E ~                                    ldi
145+  806E ~                                    ldi
146+  806E ~                                    ldi
147+  806E                                      ENDM
148+  806E
149+  806E              FiveLDIInstrunctions:   MACRO
150+  806E ~                                    ldi
151+  806E ~                                    ldi
152+  806E ~                                    ldi
153+  806E ~                                    ldi
154+  806E ~                                    ldi
155+  806E                                      ENDM
156+  806E
157+  806E              SixLDIInstrunctions:    MACRO
158+  806E ~                                    ldi
159+  806E ~                                    ldi
160+  806E ~                                    ldi
161+  806E ~                                    ldi
162+  806E ~                                    ldi
163+  806E ~                                    ldi
164+  806E                                      ENDM
165+  806E
166+  806E              EightLDIInstrunctions:  MACRO
167+  806E ~            		                ldi
168+  806E ~            		                ldi
169+  806E ~            		                ldi
170+  806E ~            		                ldi
171+  806E ~            		                ldi
172+  806E ~            		                ldi
173+  806E ~            		                ldi
174+  806E ~            		                ldi
175+  806E                                      ENDM
176+  806E
177+  806E              NineLDIInstrunctions:  MACRO
178+  806E ~            		                ldi
179+  806E ~            		                ldi
180+  806E ~            		                ldi
181+  806E ~            		                ldi
182+  806E ~            		                ldi
183+  806E ~            		                ldi
184+  806E ~            		                ldi
185+  806E ~            		                ldi
186+  806E ~            		                ldi
187+  806E                                      ENDM
# file closed: ../Macros/ldCopyMacros.asm
 67   806E                                      INCLUDE "../Macros/ShiftMacros.asm"
# file opened: ../Macros/ShiftMacros.asm
  1+  806E              ShiftIYRight1: MACRO
  2+  806E ~            			   ld 	a,iyh
  3+  806E ~            			   srl 	a
  4+  806E ~            			   ld	iyh,a
  5+  806E ~            			   ld 	a,iyl
  6+  806E ~            			   rra
  7+  806E ~            			   ld	iyl,a
  8+  806E              			   ENDM
  9+  806E
 10+  806E              ShiftHLRight1: MACRO
 11+  806E ~            			   srl h
 12+  806E ~            			   rr  l
 13+  806E              			   ENDM
 14+  806E
 15+  806E              ShiftDERight1: MACRO
 16+  806E ~            			   srl d
 17+  806E ~            			   rr  e
 18+  806E              			   ENDM
 19+  806E
 20+  806E              ShiftBCRight1: MACRO
 21+  806E ~            			   srl b
 22+  806E ~            			   rr  c
 23+  806E              			   ENDM
 24+  806E
 25+  806E
 26+  806E
 27+  806E              ShiftHLDiv8:   MACRO
 28+  806E ~            			   srl h
 29+  806E ~            			   rr  l
 30+  806E ~            			   srl h
 31+  806E ~            			   rr  l
 32+  806E ~            			   srl h
 33+  806E ~            			   rr  l
 34+  806E              			   ENDM
 35+  806E
 36+  806E              ShiftHLLeft1:  MACRO
 37+  806E ~            			   sla l
 38+  806E ~            			   rl  h
 39+  806E              			   ENDM
 40+  806E
 41+  806E              ShiftDELeft1:  MACRO
 42+  806E ~            			   sla e
 43+  806E ~            			   rl  d
 44+  806E              			   ENDM
 45+  806E
 46+  806E
 47+  806E              RollDELeft1:   MACRO
 48+  806E ~                           rl  e
 49+  806E ~                           rl  d
 50+  806E                             ENDM
 51+  806E
 52+  806E              ShiftBCLeft1:  MACRO
 53+  806E ~            			   sla c
 54+  806E ~            			   rl  b
 55+  806E              			   ENDM
 56+  806E
 57+  806E
 58+  806E              ShiftMem16Right1:   MACRO memaddr
 59+  806E ~                                ld    hl,(memaddr)
 60+  806E ~                                srl   h
 61+  806E ~                                rr    l
 62+  806E ~                                ld    (memaddr),hl
 63+  806E                                  ENDM
 64+  806E
 65+  806E              ShiftMem8Right1:    MACRO memaddr
 66+  806E ~                                ld      a,(memaddr)
 67+  806E ~                                srl     a
 68+  806E ~                                ld      (memaddr),a
 69+  806E                                  ENDM
 70+  806E
 71+  806E
 72+  806E              ShiftMem8Left1A:    MACRO memaddr
 73+  806E ~                                ld      a,(memaddr)
 74+  806E ~                                sla     a
 75+  806E ~                                ld      (memaddr),a
 76+  806E                                  ENDM
 77+  806E
# file closed: ../Macros/ShiftMacros.asm
 68   806E                                      INCLUDE "../Macros/NegateMacros.asm"
# file opened: ../Macros/NegateMacros.asm
  1+  806E
  2+  806E              NegIY:			    MACRO
  3+  806E ~                                xor a
  4+  806E ~                                sub iyl
  5+  806E ~                                ld iyl,a
  6+  806E ~                                sbc a,a
  7+  806E ~                                sub iyh
  8+  806E ~                                ld iyh,a
  9+  806E                                  ENDM
 10+  806E
 11+  806E              NegHL:			    MACRO
 12+  806E ~                                xor a
 13+  806E ~                                sub l
 14+  806E ~                                ld l,a
 15+  806E ~                                sbc a,a
 16+  806E ~                                sub h
 17+  806E ~                                ld h,a
 18+  806E                                  ENDM
 19+  806E
 20+  806E              NegDE:			    MACRO
 21+  806E ~                                xor a
 22+  806E ~                                sub e
 23+  806E ~                                ld e,a
 24+  806E ~                                sbc a,a
 25+  806E ~                                sub d
 26+  806E ~                                ld d,a
 27+  806E                                  ENDM
 28+  806E
 29+  806E              NegBC:			    MACRO
 30+  806E ~                                xor a
 31+  806E ~                                sub c
 32+  806E ~                                ld c,a
 33+  806E ~                                sbc a,a
 34+  806E ~                                sub  b
 35+  806E ~                                ld b,a
 36+  806E                                  ENDM
 37+  806E
 38+  806E              NegH                MACRO
 39+  806E ~                                ld      a,h
 40+  806E ~                                neg
 41+  806E ~                                ld      h,a
 42+  806E                                  ENDM
 43+  806E
 44+  806E              NegD                MACRO
 45+  806E ~                                ld      a,d
 46+  806E ~                                neg
 47+  806E ~                                ld      d,a
 48+  806E                                  ENDM
 49+  806E
 50+  806E              NegB                MACRO
 51+  806E ~                                ld      a,b
 52+  806E ~                                neg
 53+  806E ~                                ld      b,a
 54+  806E                                  ENDM
 55+  806E
# file closed: ../Macros/NegateMacros.asm
 69   806E                                      INCLUDE "../Variables/general_variables_macros.asm"
# file opened: ../Variables/general_variables_macros.asm
  1+  806E              ; limited to 255 character length
  2+  806E              CountLengthHL:          MACRO   Limiter
  3+  806E ~                                    ld      de,hl
  4+  806E ~                                    ld      bc,Limiter
  5+  806E ~                                    xor     a
  6+  806E ~                                    cpir
  7+  806E ~                                    ClearCarryFlag
  8+  806E ~                                    sbc     hl,de
  9+  806E ~                                    ld      a,l
 10+  806E ~                                    ret
 11+  806E                                      ENDM
 12+  806E
 13+  806E              HalfLengthHL:           MACRO
 14+  806E ~                                    ld      b,0
 15+  806E ~            .CountLenLoop:          ld      a,(hl)
 16+  806E ~                                    cp      0
 17+  806E ~                                    jr      z,.DoneCount
 18+  806E ~                                    inc     b
 19+  806E ~                                    inc     hl
 20+  806E ~                                    jr      .CountLenLoop
 21+  806E ~            .DoneCount:             ld      a,32
 22+  806E ~                                    sub     b
 23+  806E ~                                    sra     a
 24+  806E                                      ENDM
 25+  806E
 26+  806E              MakeInnocentMacro:		MACRO
 27+  806E ~            						xor		a
 28+  806E ~            						ld		(FugitiveInnocentStatus),a
 29+  806E              						ENDM
 30+  806E
 31+  806E              NoEscapePodMacro:		MACRO
 32+  806E ~            						xor		a
 33+  806E ~            						ld		(EscapePod),a
 34+  806E              						ENDM
 35+  806E
 36+  806E              MaxFuelLevel            EQU     70              ; 7.0 light years max
 37+  806E              MaxFuelMacro:			MACRO
 38+  806E ~            						ld		a,MaxFuelLevel
 39+  806E ~            						ld		(Fuel),a
 40+  806E              						ENDM
 41+  806E
 42+  806E              MaxThrottle:            MACRO
 43+  806E ~                                    ld      a,(SHIPMAXSPEED)
 44+  806E ~                                    ld      (DELTA),a
 45+  806E ~                                    ld      d,a
 46+  806E ~                                    ld      e,4
 47+  806E ~                                    mul
 48+  806E ~                                    ld      (DELT4Lo),de
 49+  806E                                      ENDM
 50+  806E
 51+  806E              ZeroThrottle:           MACRO
 52+  806E ~                                    xor     a
 53+  806E ~                                    ld      (DELTA),a
 54+  806E ~                                    ld      (DELT4Lo),a
 55+  806E ~                                    ld      (DELT4Lo+1),a
 56+  806E                                      ENDM
 57+  806E
 58+  806E              ZeroPitch:              MACRO
 59+  806E ~                                    xor     a
 60+  806E ~                                    ld      (BET2),a
 61+  806E ~                                    ld      (BET2FLIP),a
 62+  806E ~                                    ld      (JSTY),a
 63+  806E ~                                    ld      (BETA),a
 64+  806E                                      ENDM
 65+  806E
 66+  806E              ZeroRoll:               MACRO
 67+  806E ~                                    xor     a                              ; zero roll and climb
 68+  806E ~                                    ld      (ALP2),a
 69+  806E ~                                    ld      (ALP2FLIP),a
 70+  806E ~                                    ld      (JSTX),a
 71+  806E ~                                    ld      (ALPHA),a
 72+  806E                                      ENDM
 73+  806E
 74+  806E              CorrectPostJumpFuel:    MACRO
 75+  806E ~                                    ld      a,(Fuel)
 76+  806E ~                                    ld      hl,Distance
 77+  806E ~                                    sub     a,(hl)
 78+  806E ~                                    ld      (Fuel),a
 79+  806E                                      ENDM
 80+  806E
 81+  806E              AnyMissilesLeft:        MACRO
 82+  806E ~                                    ld      a,(NbrMissiles)
 83+  806E ~                                    and     a
 84+  806E                                      ENDM
 85+  806E
 86+  806E              SetMissileTargetA:      MACRO
 87+  806E ~                                    ld      (MissileTarget),a
 88+  806E                                      ENDM
 89+  806E
 90+  806E              IsMissileLockedOn:      MACRO
 91+  806E ~                                    ld      a,(MissileTarget)
 92+  806E ~                                    cp      $FF
 93+  806E ~                                    ret     z
 94+  806E ~                                    ReturnIfSlotAEmpty                  ; if target slot is empty
 95+  806E ~                                    ret                                 ; will return as nz now
 96+  806E                                      ENDM
 97+  806E
 98+  806E              ClearMissileTarget:     MACRO
 99+  806E ~                                    xor     a                           ; Set missile target to FF
100+  806E ~                                    dec     a
101+  806E ~                                    ld      (MissileTarget),a
102+  806E ~                                    SetMemFalse MissileLaunchFlag
103+  806E                                      ENDM
104+  806E
105+  806E              ClearECM:               MACRO
106+  806E ~                                    xor     a
107+  806E ~                                    ld      (ECMLoopA),a
108+  806E ~                                    ld      (ECMLoopB),a
109+  806E                                      ENDM
110+  806E
111+  806E              ChargeEnergyAndShields: MACRO
112+  806E ~                                    ld      a,$FF
113+  806E ~                                    ld      (PlayerEnergy),a
114+  806E ~                                    ld      (ForeShield),a
115+  806E ~                                    ld      (AftShield),a
116+  806E                                      ENDM
117+  806E
118+  806E              CopyPresentSystemToTarget: MACRO
119+  806E ~                                    ld      hl,(PresentSystemX)
120+  806E ~                                    ld      (TargetSystemX),hl
121+  806E                                      ENDM
122+  806E
123+  806E              CopyTargetSystemToPresent: MACRO
124+  806E ~                                    ld      hl,(TargetSystemX)
125+  806E ~                                    ld      (PresentSystemX),hl
126+  806E                                      ENDM
127+  806E
128+  806E              HalveFugitiveStatus:    MACRO
129+  806E ~                                    ld      hl,FugitiveInnocentStatus
130+  806E ~                                    srl     (hl)
131+  806E                                      ENDM
132+  806E
133+  806E              ClearForceTransition    MACRO
134+  806E ~                                    ld      a,$FF
135+  806E ~                                    ld      (ScreenTransitionForced),a
136+  806E                                      ENDM
137+  806E
138+  806E              ForceTransition:        MACRO newScreen
139+  806E ~                                    ld      a,newScreen
140+  806E ~                                    ld      (ScreenTransitionForced), a
141+  806E                                      ENDM
142+  806E
143+  806E              IsSpaceStationPresent:  MACRO
144+  806E ~                                    ld      a,(SpaceStationSafeZone)
145+  806E ~                                    and     a
146+  806E                                      ENDM
147+  806E
148+  806E              SetSafeZone:            MACRO
149+  806E ~                                    xor     a
150+  806E ~                                    ld      (SpaceStationSafeZone),a
151+  806E                                      ENDM
152+  806E
153+  806E              ClearSafeZone:          MACRO
154+  806E ~                                    ld      a,$FF
155+  806E ~                                    ld      (SpaceStationSafeZone),a
156+  806E                                      ENDM
157+  806E
158+  806E              ClearTemperatures:      MACRO
159+  806E ~                                    xor     a
160+  806E ~                                    ld      (CabinTemperature),a
161+  806E ~                                    ld      (GunTemperature),a
162+  806E                                      ENDM
163+  806E
164+  806E              CoolCabin:              MACRO
165+  806E ~                                    ld      a,(CabinTemperature)
166+  806E ~                                    and     a
167+  806E ~                                    jr      z,.AlreadyCool
168+  806E ~                                    dec     a
169+  806E ~                                    ld      (CabinTemperature),a
170+  806E ~            .AlreadyCool:
171+  806E                                      ENDM
172+  806E
173+  806E              CoolLasers:             MACRO
174+  806E ~                                    ld      a,(GunTemperature)
175+  806E ~                                    and     a
176+  806E ~                                    jr      z,.AlreadyCool
177+  806E ~                                    dec     a
178+  806E ~                                    ld      (GunTemperature),a
179+  806E ~            .AlreadyCool:
180+  806E                                      ENDM
181+  806E
182+  806E              ; type 255 is "not fitted"
183+  806E
184+  806E
185+  806E              InitEventCounter:       MACRO
186+  806E ~                                    xor     a
187+  806E ~                                    ld      (EventCounter),a
188+  806E                                      ENDM
189+  806E
190+  806E              ClearMissJump:          MACRO
191+  806E ~                                    ld      a,$FF
192+  806E ~                                    ld      (MissJumpFlag),a
193+  806E                                      ENDM
194+  806E
195+  806E
196+  806E              DrainSystem:            MACRO   SystemMem, DrainMem
197+  806E ~                                    ld      a,(DrainMem)
198+  806E ~                                    ld      b,a
199+  806E ~                                    ld      a,(SystemMem)
200+  806E ~                                    sub     a,b
201+  806E ~                                    ld      (SystemMem),a
202+  806E ~                                    jr      c,.ZeroSystem
203+  806E ~                                    jp      .ExitPoint
204+  806E ~            .ZeroSystem:            ZeroA
205+  806E ~                                    ld      (SystemMem),a
206+  806E ~            .ExitPoint
207+  806E                                      ENDM
208+  806E
209+  806E              BoostSystem:            MACRO   SystemMem, BoostMem
210+  806E ~                                    ld      a,(BoostMem)
211+  806E ~                                    ld      b,a
212+  806E ~                                    ld      a,(SystemMem)
213+  806E ~                                    add     b
214+  806E ~                                    ld      (SystemMem),a
215+  806E ~                                    jr      c, .MaxSystem
216+  806E ~                                    jp      .ExitPoint
217+  806E ~            .MaxSystem:             ld      a,255
218+  806E ~                                    ld      (SystemMem),a
219+  806E ~            .ExitPoint
220+  806E                                      ENDM
221+  806E
# file closed: ../Variables/general_variables_macros.asm
 70   806E                                      INCLUDE "../Maths/multiply.asm"
# file opened: ../Maths/multiply.asm
  1+  806E              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
  2+  806E 2A F7 82                             ld  hl,(varRS)
  3+  8071 3A F6 82                             ld  a,(varQ)
  4+  8074 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
  5+  8076 11 00 00                             ld  de,0        ; de = XY
  6+  8079 47                                   ld  b,a         ; b = Q
  7+  807A                                      ShiftHLRight1
  7+  807A CB 3C       >			   srl h
  7+  807C CB 1D       >			   rr  l
  8+  807E CB 20                                sla b
  9+  8080 30 03                                jr  nc,.LL126
 10+  8082 EB           .LL125:                 ex de,hl
 11+  8083 19                                   add hl,de
 12+  8084 EB                                   ex  de,hl       ; de = de + rs
 13+  8085              .LL126:                 ShiftHLRight1
 13+  8085 CB 3C       >			   srl h
 13+  8087 CB 1D       >			   rr  l
 14+  8089 CB 20                                sla b
 15+  808B 38 F5                                jr      c,.LL125
 16+  808D 20 F6                                jr      nz,.LL126
 17+  808F EB                                   ex      de,hl   ; hl = result
 18+  8090 D1 C1                                pop     bc,,de
 19+  8092 C9                                   ret
 20+  8093
 21+  8093
 22+  8093              MacroDEEquQmulASigned:  MACRO
 23+  8093 ~                                    ld      d,a                         ; save a into d
 24+  8093 ~                                    ld      a,(varQ)
 25+  8093 ~                                    ld      e,a
 26+  8093 ~                                    xor     d                           ; a = a xor var Q
 27+  8093 ~                                    and     SignOnly8Bit
 28+  8093 ~                                    ld      b,a                         ; b = sign of a xor q
 29+  8093 ~                                    ld      a,d                         ; d = abs d (or a reg)
 30+  8093 ~                                    and     SignMask8Bit
 31+  8093 ~                                    ld      d,a
 32+  8093 ~                                    ld      a,e                         ; e = abs e (or varQ)
 33+  8093 ~                                    and     SignMask8Bit
 34+  8093 ~                                    ld      e,a
 35+  8093 ~                                    mul                                 ; de = a * Q
 36+  8093 ~                                    ld      a,d
 37+  8093 ~                                    or      b                           ; de = a * Q leading sign bit
 38+  8093 ~                                    ld      d,a
 39+  8093                                      ENDM
 40+  8093
 41+  8093
 42+  8093
 43+  8093                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
 44+  8093              madXAequQmulAaddRS:     MacroDEEquQmulASigned
 44+  8093 57          >                        ld      d,a                         ; save a into d
 44+  8094 3A F6 82    >                        ld      a,(varQ)
 44+  8097 5F          >                        ld      e,a
 44+  8098 AA          >                        xor     d                           ; a = a xor var Q
 44+  8099 E6 80       >                        and     SignOnly8Bit
 44+  809B 47          >                        ld      b,a                         ; b = sign of a xor q
 44+  809C 7A          >                        ld      a,d                         ; d = abs d (or a reg)
 44+  809D E6 7F       >                        and     SignMask8Bit
 44+  809F 57          >                        ld      d,a
 44+  80A0 7B          >                        ld      a,e                         ; e = abs e (or varQ)
 44+  80A1 E6 7F       >                        and     SignMask8Bit
 44+  80A3 5F          >                        ld      e,a
 44+  80A4 ED 30       >                        mul                                 ; de = a * Q
 44+  80A6 7A          >                        ld      a,d
 44+  80A7 B0          >                        or      b                           ; de = a * Q leading sign bit
 44+  80A8 57          >                        ld      d,a
 45+  80A9 2A F7 82     madDEaddRS:             ld		hl,(varR)
 46+  80AC CD B5 80                             call	madXAAddHLDESigned
 47+  80AF EB                                   ex      de,hl                       ; de = R.S + DE
 48+  80B0                                      ClearCarryFlag
 48+  80B0 B7          >                        or a
 49+  80B1 DD 6B                                ld      ixl,e
 50+  80B3 7A                                   ld      a,d
 51+  80B4 C9                                   ret
 52+  80B5
 53+  80B5
 54+  80B5 7C           madXAAddHLDESigned:     ld      a,h
 55+  80B6 E6 80                                and     SignOnly8Bit
 56+  80B8 47                                   ld      b,a                         ;save sign bit in b
 57+  80B9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 58+  80BA                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 58+  80BA FA D2 80    >                        jp		m, .ADDHLDEOppSGN
 59+  80BD 78           .ADDHLDESameSigns:       ld      a,b
 60+  80BE B2                                   or      d
 61+  80BF                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 61+  80BF FA C4 80    >                        jp		m, .ADDHLDESameNeg
 62+  80C2 19                                   add     hl,de
 63+  80C3 C9                                   ret
 64+  80C4 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 65+  80C5 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 66+  80C7 67                                   ld      h,a
 67+  80C8 7A                                   ld      a,d
 68+  80C9 E6 7F                                and     SignMask8Bit
 69+  80CB 57                                   ld      d,a
 70+  80CC 19                                   add     hl,de
 71+  80CD 3E 80                                ld      a,SignOnly8Bit
 72+  80CF B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 73+  80D0 67                                   ld      h,a
 74+  80D1 C9                                   ret
 75+  80D2 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 76+  80D3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 77+  80D5 67                                   ld      h,a
 78+  80D6 7A                                   ld      a,d
 79+  80D7 E6 7F                                and     SignMask8Bit
 80+  80D9 57                                   ld      d,a
 81+  80DA B7                                   or      a
 82+  80DB ED 52                                sbc     hl,de
 83+  80DD 38 04                                jr      c,.ADDHLDEOppInvert
 84+  80DF 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 85+  80E0 B4                                   or      h
 86+  80E1 67                                   ld      h,a                         ; set the previou sign value
 87+  80E2 C9                                   ret
 88+  80E3              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 88+  80E3 AF          >                    xor a
 88+  80E4 95          >                    sub l
 88+  80E5 6F          >                    ld l,a
 88+  80E6 9F          >                    sbc a,a
 88+  80E7 94          >                    sub h
 88+  80E8 67          >                    ld h,a
 89+  80E9 78                                   ld      a,b
 90+  80EA EE 80                                xor     SignOnly8Bit                ; flip sign bit
 91+  80EC B4                                   or      h
 92+  80ED 67                                   ld      h,a                         ; recover sign
 93+  80EE C9                                   ret
 94+  80EF
 95+  80EF
 96+  80EF                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 97+  80EF                  ;
 98+  80EF                  ; enter : hl = 16-bit multiplier   = x
 99+  80EF                  ;          e =  8-bit multiplicand = y
100+  80EF                  ;
101+  80EF                  ; exit  : ahl = 24-bit product
102+  80EF                  ;         carry reset
103+  80EF                  ;
104+  80EF                  ; uses  : af, de, hl
105+  80EF 54           AHLequHLmulE:           ld d,h                      ; xh
106+  80F0 63                                   ld h,e                      ; yl
107+  80F1 ED 30                                mul de                      ; xh*yl
108+  80F3 EB                                   ex de,hl
109+  80F4 ED 30                                mul de                      ; yl*xl, hl = xh*yl
110+  80F6
111+  80F6 7A                                   ld  a,d                     ; sum products
112+  80F7 85                                   add a,l
113+  80F8 57                                   ld  d,a
114+  80F9 EB                                   ex de,hl
115+  80FA
116+  80FA 7A                                   ld  a,d
117+  80FB CE 00                                adc a,0
118+  80FD C9                                   ret
119+  80FE
120+  80FE
121+  80FE
122+  80FE                 ; multiplication of two 16-bit numbers into a 32-bit product
123+  80FE                 ;
124+  80FE                 ; enter : de = 16-bit multiplicand = y
125+  80FE                 ;         hl = 16-bit multiplicand = x
126+  80FE                 ;
127+  80FE                 ; exit  : dehl = 32-bit product
128+  80FE                 ;         carry reset
129+  80FE                 ;
130+  80FE                 ; uses  : af, bc, de, hl
131+  80FE
132+  80FE
133+  80FE
134+  80FE 45           DEHLequDEmulHL:         ld b,l                      ; x0
135+  80FF 4B                                   ld c,e                      ; y0
136+  8100 5D                                   ld e,l                      ; x0
137+  8101 6A                                   ld l,d
138+  8102 E5                                   push hl                     ; x1 y1
139+  8103 69                                   ld l,c                      ; y0
140+  8104              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
141+  8104 ED 30                                mul de                      ; y1*x0
142+  8106 EB                                   ex de,hl
143+  8107 ED 30                                mul de                      ; x1*y0
144+  8109
145+  8109 AF                                   xor a                       ; zero A
146+  810A 19                                   add hl,de                   ; sum cross products p2 p1
147+  810B 8F                                   adc a,a                     ; capture carry p3
148+  810C
149+  810C 59                                   ld e,c                      ; x0
150+  810D 50                                   ld d,b                      ; y0
151+  810E ED 30                                mul de                      ; y0*x0
152+  8110
153+  8110 47                                   ld b,a                      ; carry from cross products
154+  8111 4C                                   ld c,h                      ; LSB of MSW from cross products
155+  8112
156+  8112 7A                                   ld a,d
157+  8113 85                                   add a,l
158+  8114 67                                   ld h,a
159+  8115 6B                                   ld l,e                      ; LSW in HL p1 p0
160+  8116
161+  8116 D1                                   pop de
162+  8117 ED 30                                mul de                      ; x1*y1
163+  8119
164+  8119 EB                                   ex de,hl
165+  811A ED 4A                                adc hl,bc
166+  811C EB                                   ex de,hl                    ; de = final MSW
167+  811D
168+  811D C9                                   ret
169+  811E
170+  811E              ; multiplication of two 16-bit numbers into a 16-bit product
171+  811E              ; enter : de = 16-bit multiplicand
172+  811E              ;         hl = 16-bit multiplicand
173+  811E              ; exit  : hl = 16-bit product
174+  811E              ;         carry reset
175+  811E              ; maths is
176+  811E              ;        hl = y , de= x
177+  811E              ;        hl = xhi,ylo + (yhigh * xlow)
178+  811E              ;        hl = yhih & xlo + x
179+  811E              ;
180+  811E              ;
181+  811E              ; uses  : af, bc, de, hl
182+  811E C5           mulDEbyHL:              push    bc
183+  811F 7A                                   ld a,d                      ; a = xh
184+  8120 54                                   ld d,h                      ; d = yh
185+  8121 67                                   ld h,a                      ; h = xh
186+  8122 4B                                   ld c,e                      ; c = xl
187+  8123 45                                   ld b,l                      ; b = yl
188+  8124 ED 30                                mul                         ; yh * yl
189+  8126 EB                                   ex de,hl
190+  8127 ED 30                                mul                         ; xh * yl
191+  8129 19                                   add hl,de                   ; add cross products
192+  812A 59                                   ld e,c
193+  812B 50                                   ld d,b
194+  812C ED 30                                mul                         ; yl * xl
195+  812E 7D                                   ld a,l                      ; cross products lsb
196+  812F 82                                   add a,d                     ; add to msb final
197+  8130 67                                   ld h,a
198+  8131 6B                                   ld l,e                      ; hl = final
199+  8132                                      ; 83 cycles, 19 bytes
200+  8132 AF                                   xor a                       ; reset carry
201+  8133 C1                                   pop     bc
202+  8134 C9                                   ret
203+  8135
204+  8135
205+  8135              ; CHL = multiplicand D = multiplier
206+  8135              ; DCHL = CHL * D
207+  8135 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
208+  8136 AC                                   xor     h                   ; xor with h to get resultant sign
209+  8137 E6 80                                and     SignOnly8Bit        ; .
210+  8139 FD 67                                ld      iyh,a               ; iyh = copy of sign
211+  813B 79                                   ld      a,c                 ; now CHL = ABS (CHL)
212+  813C E6 7F                                and     SignMask8Bit        ; .
213+  813E 4F                                   ld      c,a                 ; .
214+  813F 7A                                   ld      a,d                 ; d = ABS D
215+  8140 E6 7F                                and     SignMask8Bit        ; .
216+  8142              ; At this point CHL = ABS (HLE), A = ABS(D)
217+  8142 57           .mul1:                  ld      d,a                 ; first do D * L
218+  8143 5D                                   ld      e,l                 ; .
219+  8144 ED 30                                mul     de                  ; DE = L * D
220+  8146 08                                   ex      af,af'              ; save multiplier
221+  8147 6B                                   ld      l,e                 ; L = p0
222+  8148 7A                                   ld      a,d                 ; carry byte
223+  8149 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
224+  814A 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
225+  814B 57                                   ld      d,a                 ; and multiplier
226+  814C ED 30                                mul     de                  ; now its D & L
227+  814E 08                                   ex      af,af'              ; get back carry byte with flags
228+  814F 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
229+  8150 67                                   ld      h,a                 ; h = P1
230+  8151 7A                                   ld      a,d                 ; a = carry byte
231+  8152 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
232+  8153 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
233+  8154 57                                   ld      d,a                 ;
234+  8155 ED 30                                mul     de                  ;
235+  8157 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
236+  8158 8B                                   adc     a,e                 ;
237+  8159 FD B4                                or      iyh                 ; recover saved resultant sign
238+  815B 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
239+  815C C9                                   ret
240+  815D
241+  815D              ;  CHL = 53456 D = 1E
242+  815D              ;  56 * 1E = A14 L = 14 carry = 0A
243+  815D              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
244+  815D              ;  5  * 1E = 096 C = 96 + 6 = 9C
245+  815D              ;  CHL = 9C2214
246+  815D
247+  815D              ; DELC = HLE * D, uses HL, DE, C , A , IYH
248+  815D              ; HLE = multiplicand D = multiplier
249+  815D              ; tested by mathstestsun.asm all passed
250+  815D 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
251+  815E AC                                   xor     h                   ; xor with h to get resultant sign
252+  815F E6 80                                and     SignOnly8Bit        ; .
253+  8161 FD 67                                ld      iyh,a               ; iyh = copy of sign
254+  8163 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
255+  8164 E6 7F                                and     SignMask8Bit        ; .
256+  8166 67                                   ld      h,a                 ; .
257+  8167 7A                                   ld      a,d                 ; d = ABS D
258+  8168 E6 7F                                and     SignMask8Bit        ; .
259+  816A 57                                   ld      d,a                 ; .
260+  816B              ; At this point HLE = ABS (HLE), A = ABS(D)
261+  816B ED 30        .mul1:                  mul     de                  ; C = E * D
262+  816D 08                                   ex      af,af'              ; save mulitplier
263+  816E 4B                                   ld      c,e                 ; C = p0
264+  816F 7A                                   ld      a,d                 ; save carry and get back multiplier
265+  8170 08                                   ex      af,af'
266+  8171 5D           .mul2:                  ld      e,l                 ; L = L * D
267+  8172 57                                   ld      d,a                 ; .
268+  8173 ED 30                                mul     de                  ; .
269+  8175 08                                   ex      af,af'              ; .
270+  8176 83           .carrybyte1:            add     a,e                 ; L = L + carry byte
271+  8177 6F                                   ld      l,a                 ; .
272+  8178 7A                                   ld      a,d
273+  8179 08                                   ex      af,af'              ; save new carry byte
274+  817A 5C           .mul3:                  ld      e,h                 ; e = H * D
275+  817B 57                                   ld      d,a
276+  817C ED 30                                mul     de
277+  817E 08                                   ex      af,af'
278+  817F 8B                                   adc     a,e                 ;
279+  8180 5F                                   ld      e,a
280+  8181 FD 54                                ld      d,iyh
281+  8183 C9                                   ret
282+  8184
283+  8184
284+  8184              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
285+  8184              ; enter : de = 16-bit multiplicand
286+  8184              ;         hl = 16-bit multiplicand
287+  8184              ; exit  : hl = 16-bit product
288+  8184              ;         carry reset
289+  8184              ;
290+  8184              ; uses  : af, bc, de, hl
291+  8184 00           mulDEbyHLSignByte       DB      0
292+  8185 AF           mulDEbyHLSgnTo2c:       xor     a
293+  8186 32 84 81                             ld      (mulDEbyHLSignByte),a
294+  8189 7A           .SignDE:                ld      a,d
295+  818A ED 27 80                             test    $80
296+  818D 28 08                                jr      z,.SignHL
297+  818F E6 7F        .NegativeDE:            and     $7F
298+  8191 57                                   ld      d,a
299+  8192 3E 80                                ld      a,$80
300+  8194 32 84 81                             ld      (mulDEbyHLSignByte),a
301+  8197 7C           .SignHL:                ld      a,h
302+  8198 ED 27 80                             test    $80
303+  819B 28 0B                                jr      z,.AbsoluteMultiply
304+  819D E6 7F        .NegativeHL:            and     $7F
305+  819F 67                                   ld      h,a
306+  81A0 3A 84 81                             ld      a,(mulDEbyHLSignByte)
307+  81A3 EE 80                                xor     $80
308+  81A5 32 84 81                             ld      (mulDEbyHLSignByte),a
309+  81A8 CD 1E 81     .AbsoluteMultiply:      call    mulDEbyHL
310+  81AB 3A 84 81     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
311+  81AE ED 27 80                             test    $80
312+  81B1 C8                                   ret     z
313+  81B2 AF           .Negateghl: 			xor 	a
314+  81B3 95                                   sub 	l
315+  81B4 6F                                   ld 		l,a
316+  81B5 9F                                   sbc 	a,a
317+  81B6 94                                   sub 	h
318+  81B7 67                                   ld 		h,a
319+  81B8 C9                                   ret
320+  81B9
321+  81B9 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
322+  81BA 32 84 81                             ld      (mulDEbyHLSignByte),a
323+  81BD 7A           .SignDE:                ld      a,d
324+  81BE ED 27 80                             test    $80
325+  81C1 28 08                                jr      z,.AbsoluteMultiply
326+  81C3 E6 7F        .NegativeDE:            and     $7F
327+  81C5 57                                   ld      d,a
328+  81C6 3E 80                                ld      a,$80
329+  81C8 32 84 81                             ld      (mulDEbyHLSignByte),a
330+  81CB CD 1E 81     .AbsoluteMultiply:      call    mulDEbyHL
331+  81CE 3A 84 81     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
332+  81D1 ED 27 80                             test    $80
333+  81D4 C8                                   ret     z
334+  81D5 AF           .Negateghl:             xor 	a
335+  81D6 95                                   sub 	l
336+  81D7 6F                                   ld 		l,a
337+  81D8 9F                                   sbc 	a,a
338+  81D9 94                                   sub 	h
339+  81DA 67                                   ld 		h,a
340+  81DB C9                                   ret
341+  81DC
342+  81DC
# file closed: ../Maths/multiply.asm
 71   81DC                                      INCLUDE "../Variables/general_variables.asm"
# file opened: ../Variables/general_variables.asm
  1+  81DC
  2+  81DC
  3+  81DC 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  4+  81DE 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  5+  81E0              ; Variables to simulate 6502 registers until code fixed
  6+  81E0              ; These must be here in this order as reading Y and X can then be a 16 bit read
  7+  81E0 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  8+  81E1 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  9+  81E2 00           regA		DB	0
 10+  81E3
 11+  81E3
 12+  81E3 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 13+  81E4 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 14+  81E6 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 15+  81E8
 16+  81E8
 17+  81E8
 18+  81E8              ;XX16		DS	16				; 16 byte Matrix
 19+  81E8
 20+  81E8              P0INWK							; page 0 & 46
 21+  81E8              p0INWK31						; page 0 & 65
 22+  81E8              P0INWK36						; PAGE 0 &6A
 23+  81E8
 24+  81E8 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 25+  81E9              LastNormalVisible	equ	XX4
 26+  81E9              varXX4              equ XX4
 27+  81E9
 28+  81E9
 29+  81E9
 30+  81E9 00           PATG		DB	0				; 6502 &03C9
 31+  81EA 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 32+  81EC
 33+  81EC
 34+  81EC              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 35+  81EC              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 36+  81EC
 37+  81EC              ; Present System Variables
 38+  81EC
 39+  81EC 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 40+  81ED 20           RandomSeed1				DB	32	; 01
 41+  81EE 0C           RandomSeed2				DB	12			; 02
 42+  81EF 42           RandomSeed3				DB	66			; 03
 43+  81F0
 44+  81F0 00           varT1					DB	0				; 06
 45+  81F1 00           SClo					DB 0				; 07
 46+  81F2 00           SChi					DB 0				; 08
 47+  81F3 00           varP					DB 0 				; 10	XX16+7
 48+  81F4 00           varPhi					DB 0 				; 11	XX16+8
 49+  81F5 00           varPhi2					DB 0 				; 12	XX16+9
 50+  81F6              varPp1                  equ varPhi
 51+  81F6              varPp2                  equ varPhi2
 52+  81F6 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 53+  81F7 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 54+  81F8              UnivPointer				equ	UnivPointerLo
 55+  81F8 00           varV					DB 0				; 22                          XX0+4
 56+  81F9 00           varVHi					DB 0				; 23                          XX0+5
 57+  81FA 00           varXXlo                 DB 0                ; 24
 58+  81FB 00           varXXHi                 DB 0                ; 25
 59+  81FC              varXX					equ	varXXlo
 60+  81FC 00           YYlo                    DB 0                ; 26
 61+  81FD 00           YYHi                    DB 0                ; 27
 62+  81FE              varYY					equ	YYlo
 63+  81FE              											;	28
 64+  81FE              											;	29
 65+  81FE              ;PlayerShipPositionData - Must be contiguous for setup
 66+  81FE 00           BETA 					DB	0               ; 2A        (pitch done)
 67+  81FF 00           JSTY                    DB  0               ; Joystick analog
 68+  8200 00           BET1 					DB	0               ; 2B        lower7 magnitude
 69+  8201 00           BET2                    DB  0               ;            climb sign
 70+  8202 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 71+  8203 1F           BET1MAXC                DB  31              ; max climb
 72+  8204 E1           BET1MAXD                DB  -31             ; max dive
 73+  8205 00           XC						DB	0               ; 2C
 74+  8206 00           YC						DB 	0               ; 2D
 75+  8207              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
 76+  8207 00           ECMActive				DB 	0				; 30		ECM Active flag
 77+  8208 00           ECMLoopA                DB  0
 78+  8209 00           ECMLoopB                DB  0
 79+  820A 00 00        JSTX                    DW  0               ;           Joystick analog value
 80+  820C 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 81+  820D 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 82+  820E 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 83+  820F 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 84+  8210 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 85+  8211 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 86+  8212
 87+  8212
 88+  8212
 89+  8212              MAXMESSAGES             EQU 5
 90+  8212              MESSAGETIMELIMIT        EQU 20
 91+  8212              MESSAGESIZE             EQU 33
 92+  8212              MESSAGELINE             EQU $0001
 93+  8212
 94+  8212 00           MessageCount            DB  0                ; used for enquing messages later
 95+  8213 00           MessageCurrent          DB  0
 96+  8214 05 00        MessageIndex            DW  MAXMESSAGES
 97+  8216 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 98+  82BB 05           MessageTimeout          DB  MAXMESSAGES
 99+  82BC 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
100+  82E1
101+  82E1              ; MOVED TO Universe XX19					DB	0				; page 0 &67
102+  82E1              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
103+  82E1              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
104+  82E1 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
105+  82E2              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
106+  82E2
107+  82E2
108+  82E2 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
109+  82E7              											;	6D		QQ15+1
110+  82E7              											;	6E		QQ15+2
111+  82E7              											;	6F		QQ15+3
112+  82E7              											;	70		QQ15+4
113+  82E7              											;	71		QQ15+5
114+  82E7 00           QQ17					DB	0				;   72
115+  82E8 00           XX18xlo                 DB  0               ;	72		XX18   xlo
116+  82E9 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
117+  82EA 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
118+  82EB 00           XX18ylo                 DB  0               ;	75		XX18   ylo
119+  82EC 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
120+  82ED 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
121+  82EE 00           XX18zlo                 DB  0               ;	78		XX18   zlo
122+  82EF 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
123+  82F0 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
124+  82F1
125+  82F1 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
126+  82F2 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
127+  82F3 00           DELT4Lo					DB 	0				; 7E
128+  82F4 00           DELT4Hi					DB 	0				; 7F
129+  82F5              DELTA4                  equ                 DELT4Lo
130+  82F5
131+  82F5
132+  82F5              ; Not thise must be in this order else 16 bit fetches will fail
133+  82F5 00           varU                    DB  0               ;   80
134+  82F6 00           varQ					DB  0 				;	81
135+  82F7 00           varR					DB  0 				;	82
136+  82F8 00           varS					DB  0 				;	83
137+  82F9              varRS                   equ varR
138+  82F9
139+  82F9 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
140+  82FB
141+  82FB 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
142+  82FC 00           YSAV                    DB  0               ; 85
143+  82FD 00           XX17					DB	0				; 86
144+  82FE              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
145+  82FE              varXX17                 equ  XX17
146+  82FE 00           ScreenChanged           DB  0
147+  82FF 00           ScreenIndex             DB  0
148+  8300 00           InvertedYAxis           DB  0
149+  8301 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
150+  8302              											; Bit 7 Set  ShortRangeChart    $80
151+  8302              											; Bit 6 Set  Galactic Chart     $40
152+  8302              											; Bit 5 Set  Market Place       $20
153+  8302              											; Bit 4 Set  Status Screen      $10
154+  8302              											; Bit 3 Set  Display Inventory  $08
155+  8302                                                          ; Bit 2 Set  Planet Data        $04
156+  8302                                                          ; View bit combinations if the ones above not matched
157+  8302                                                          ; bits 1 0
158+  8302                                                          ;      1 1  Front view , i.e. $03
159+  8302                                                          ;      1 0  Aft View          $02
160+  8302                                                          ;      0 1  Left View         $01
161+  8302                                                          ;      0 0  Right view        $00
162+  8302              											; Bit 0 Set  Data On System
163+  8302              											; 0  Space View (Not a menu)
164+  8302 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
165+  8303 00           XX13                    DB  0               ;   89
166+  8304 00           TYPE					DB	0				; 8C used for ship type in drawing
167+  8305              ;Docked flag = 00 = in free space
168+  8305              ;              FF = Docked
169+  8305              ;              FE = transition
170+  8305              ;              FD = Setup open space and transition to not docked
171+  8305              ;              FC = Hyperspace manimation
172+  8305              ;              FB = Hyperspace complete
173+  8305 00           DockedFlag				DB	0				; 8E -
174+  8306 00           GamePaused              DB  0
175+  8307 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
176+  8308 00           varCNT                  DB  0               ; 93
177+  8309
178+  8309 00           varK					DB	0				; 40
179+  830A 00           varKp1					DB	0				; 41
180+  830B 00           varKp2					DB	0				; 42
181+  830C 00           varKp3					DB	0				; 43
182+  830D
183+  830D 00           varK2                   DB  0               ; 9B
184+  830E 00           varK2p1                 DB  0               ; 9C K2 plus 1
185+  830F 00           varK2p2                 DB  0               ; 9D K2 plus 2
186+  8310 00           varK2p3                 DB  0               ; 9E K2 plus 3
187+  8311
188+  8311 00           Point                   DB  0               ; 9F      POINT
189+  8312
190+  8312 00           varT					DB	0				; D1
191+  8313
192+  8313 00 00 00...  varVector9ByteWork      DS  9
193+  831C
194+  831C 00 00 00 00  varK3					DS	4				; D2
195+  8320 00           varK3p2					DB	0				; 42
196+  8321 00           varK3p3					DB	0				; 43
197+  8322              varK3p1					equ varK3+1			; D3
198+  8322 00 00 00 00  varK4					DS	4				; E0
199+  8326              varK4p1					equ varK4+1			; D3
200+  8326
201+  8326
202+  8326              ;Heap
203+  8326
204+  8326 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
205+  8328 00 00 00...  HeapData				DS	50
206+  835A              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
207+  835A              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
208+  835A              ; i.e. a list of programmed missiles in universe slot list code
209+  835A 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
210+  8361              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
211+  8361              ;  #&5 Does J reverse both joystick channels
212+  8361              ;  #&4 Does Y reverse joystick Y channel			03CB
213+  8361              ;  #&2 Does X toggle startup message display ? PATG?	03C9
214+  8361              ;  #&3 Does F toggle flashing information			03CA
215+  8361              ;  #&1 Does A toggle keyboard auto-recentering ?
216+  8361              ;  #&0 Caps-lock toggles keyboard flight damping
217+  8361 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
218+  8362 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
219+  8363 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
220+  8373 00           AlienItemsAvaliability  DB	0				; 039D
221+  8374 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
222+  8375 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
223+  8377 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
224+  8378              											;
225+  8378 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
226+  8379 00           MarketPrice				DB	0				; 03AA QQ24
227+  837A 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
228+  837B 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
229+  837C 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
230+  837D 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
231+  837F              											; this is ship lines stack pointer so may be redundant with paging
232+  837F              											; LS = line stack so we will have one for now to remove later
233+  837F 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
234+  8380 00           DisplayEcononmy			DB	0				; 03B8
235+  8381 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
236+  8382 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
237+  8383 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
238+  8385 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
239+  8387 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
240+  8389 00 00        DisplayRadius			DW	0
241+  838B              ; --- Used in creation of sun and planet----;
242+  838B 00           PlanetXPos              DS  1
243+  838C 00           PlanetYPos              DS  1
244+  838D 00           PlanetZPos              DS  1
245+  838E 00           PlanetType              DS  1
246+  838F 00           SunXPos                 DS  1
247+  8390 00           SunYPos                 DS  1
248+  8391 00           SunZPos                 DS  1
249+  8392              ; -- Current Missile Runbtime data
250+  8392 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
251+  8393 00 00        MissileXPos             DW      0
252+  8395 00           MissileXSgn             DB      0
253+  8396 00 00        MissileYPos             DW      0
254+  8398 00           MissileYSgn             DB      0
255+  8399 00 00        MissileZPos             DW      0
256+  839B 00           MissileZSgn             DB      0
257+  839C 00 00        CurrentTargetXpos       DS      2
258+  839E 00 00        CurrentTargetXsgn       DS      2
259+  83A0 00 00        CurrentTargetYpos       DS      2
260+  83A2 00 00        CurrentTargetYsgn       DS      2
261+  83A4 00 00        CurrentTargetZpos       DS      2
262+  83A6 00 00        CurrentTargetZsgn       DS      2
263+  83A8 00 00        TargetVectorXpos        DS      2
264+  83AA 00 00        TargetVectorXsgn        DS      2
265+  83AC 00 00        TargetVectorYpos        DS      2
266+  83AE 00 00        TargetVectorYsgn        DS      2
267+  83B0 00 00        TargetVectorZpos        DS      2
268+  83B2 00 00        TargetVectorZsgn        DS      2
269+  83B4 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
270+  83B5 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
271+  83B6 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
272+  83B7 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
273+  83B8
274+  83B8              ; --- Main Loop Data -----------------------;
275+  83B8 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
276+  83B9 00           SelectedUniverseSlot    DB  0
277+  83BA 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
278+  83BB 00           ShipBlastCheckCounter   DB  0
279+  83BC 00           InnerHyperCount			DB 	0				; 2F QQ22+1
280+  83BD 00           OuterHyperCount			DB 	0				; 2E QQ22
281+  83BE 00           EventCounter            DB  0
282+  83BF 00           HyperCircle             DB  0
283+  83C0 00           MissJumpFlag            DB  0
284+  83C1 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
285+  83C2 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
286+  83C3 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
287+  83C4 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
288+  83C5 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
289+  83C6 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
290+  83C7              UniverseSlotListSize    equ	12
291+  83C7 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
292+  83D3 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
293+  83DF              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
294+  83DF 04           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
295+  83E0 00           ConsoleRedrawFlag       DB  0
296+  83E1 00           TextInputMode           DB  0
297+  83E2 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
298+  83E3                                                          ; 7    6    5    4     3    2        1    0
299+  83E3                                                          ; Up   Down Left Right Home Recentre
300+  83E3 00           FireLaserPressed        DB  0
301+  83E4              ; --- Current System Data ------------------;
302+  83E4 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
303+  83E5 00           ExtraVesselsCounter     DB  0
304+  83E6 00           JunkCount				DB  0				; $033E
305+  83E7 00           AsteroidCount           DB  0               ; Not used as yet
306+  83E8 00           TransporterCount        DB  0
307+  83E9 00           CopCount                DB  0
308+  83EA 00           PirateCount             DB  0
309+  83EB              ; --- Galaxy Data --------------------------;
310+  83EB 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
311+  83EC 00 00 00...  WorkingSeeds			DS	6
312+  83F2 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
313+  83F8 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
314+  83FE 00           PresentSystemX			DB	0				; System we are currently in
315+  83FF 00           PresentSystemY			DB  0				; System we are currently in
316+  8400 00           TargetSystemX			DB	0				; System we are targeting for jump
317+  8401 00           TargetSystemY			DB	0				; System we are targeting for jump
318+  8402 00           GovPresentSystem		DB	0				; 03AE Govenment
319+  8403 00           TekPresentSystem		DB	0				; 03AF Technology
320+  8404
321+  8404 00           CompassColor			DB	0				; 03C5
322+  8405 00           SoundToggle				DB	0				; 03C6
323+  8406 00           KeyboardRecenterToggle	DB	0				; 03C8
324+  8407 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
325+  8408 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
326+  8409 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
327+  840A 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
328+  840B 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
329+  840C 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
330+  840D
331+  840D              ; Working Data
332+  840D
333+  840D              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
334+  840D              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
335+  840D              ; $0925 =	EQUW page9+37* 1
336+  840D              ; $094A =	EQUW page9+37* 2
337+  840D              ; $096F =	EQUW page9+37* 3
338+  840D              ; $0994 =	EQUW page9+37* 4
339+  840D              ; $09B9 =	EQUW page9+37* 5
340+  840D              ; $09DE =	EQUW page9+37* 6
341+  840D              ; $0A03 =	EQUW page9+37* 7
342+  840D              ; $0A28 =	EQUW page9+37* 8
343+  840D              ; $0A4D =	EQUW page9+37* 9
344+  840D              ; $0A72 =	EQUW page9+37*10
345+  840D              ; $0A97 =	EQUW page9+37*11
346+  840D              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
347+  840D
348+  840D
349+  840D
350+  840D              ; 0b00 is start address of data to save
351+  840D              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
352+  840D              											; Bit mask XXXX10XX - Thargoid plan mission
353+  840D
354+  840D 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
355+  840E
356+  840E 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
357+  8410 00 00        CommanderLoadAddress	DW	0				;0C03
358+  8412 00 00        LengthOfFile			DW	0				;0C0B
359+  8414 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
360+  8416
361+  8416 00 00 00...  EdgesBuffer				DS 50
362+  8448              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
363+  8448              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
364+  8448
365+  8448 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
366+  848E              ShipLineStackTop		equ $ - ShipLineStack
367+  848E
368+  848E 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
369+  854E              ; LSX vector overlaps with LSO
370+  854E 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
371+  854F 00           LSY2					DB	0           	; &0F0E	    \ LSY2
372+  8550
373+  8550              ; Star Positions are 16 bit 3d coordinates
374+  8550 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
375+  8592 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
376+  85A8 00           varStarX                DB  0
377+  85A9 00           varStarY                DB  0
378+  85AA 00 00 00...  varDustX                DS MaxNumberOfStars *2
379+  85C0 00 00 00...  varDustY                DS MaxNumberOfStars *2
380+  85D6 00 00 00...  varDustZ                DS MaxNumberOfStars *2
381+  85EC              ; -- Player Runtime Data
382+  85EC 00           GunTemperature          DB  0
383+  85ED 00           CabinTemperature        DB  0
384+  85EE 00           PlayerForwardSheild0	DB	0 ; ?????
385+  85EF 00           PlayerForwardSheild1    DB	0
386+  85F0 00           PlayerForwardSheild2    DB	0
387+  85F1 00           ForeShield				DB	0				; 03A5
388+  85F2 00           AftShield				DB	0				; 03A6
389+  85F3 00           PlayerEnergy			DB	0				; 03A7
390+  85F4 00           CompassX				DB	0				; 03A8
391+  85F5 00           CompassY				DB	0				; 03A9
392+  85F6 00           MissileTarget			DB  0				; 45
393+  85F7 00           MissileLaunchFlag       DB  0
394+  85F8 00 00 00...  CommanderName           DS  15
395+  8607 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
396+  8608 00           BadnessStatus           DB  0
397+  8609              ; need to add copy table routines
398+  8609 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
399+  860A 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
400+  860B 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
401+  860C 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
402+  860D 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
403+  860E 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
404+  860F              ; Count down timers must be aligned like this to work
405+  860F 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
406+  8610 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
407+  8611 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
408+  8612 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
409+  8613              ;note rapidly changing views could reset these so need to consider it in an array
410+  8613
411+  8613              ; LaserType
412+  8613              ; LaserPulseRate                          ; how many pulses can be fired before long pause
413+  8613              ; LaserPulsePause                         ; time before next pulse - 0 = beam
414+  8613              ; LaserPulseRest                          ; time before pulse count resets to 0
415+  8613              ; LaserDamageOutput                       ; amount of damage for a laser hit
416+  8613              ; LaserEnergyDrain                        ; amount of energy drained by cycle
417+  8613              ; LaserHeat                               ; amount of heat generated
418+  8613              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
419+  8613              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
420+  8613              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
421+  8613              ; LaserTechLevel                          ; minimum tech level system to buy from
422+  8613
423+  8613 00           CurrLaserBurstRate      DB  0
424+  8614 00           CurrLaserBurstCount     DB  0
425+  8615 00           CurrLaserDamageOutput   DB  0
426+  8616 00           CurrLaserEnergyDrain    DB  0
427+  8617 00           CurrLaserHeat           DB  0
428+  8618 00           CurrLaserDurability     DB  0
429+  8619 00           CurrLaserDurabilityAmount DB  0
430+  861A
431+  861A              ; -- Input variables
432+  861A 00           JoystickX				DB	0				; 034C JSTX
433+  861B 00           JoystickY				DB	0				; 034D JSTY
434+  861C 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
435+  861D 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
436+  861E
437+  861E              ; -- Console drawing data
438+  861E              FShieldStart            equ $8410
439+  861E              AShieldStart            equ $8D10
440+  861E              FuelStart               equ $9410
441+  861E
442+  861E              EnergyBar4Start         equ $A5D5
443+  861E              EnergyBar3Start         equ $ADD5
444+  861E              EnergyBar2Start         equ $B5D5
445+  861E              EnergyBar1Start         equ $BDD5
446+  861E              ; 70 /2 = 35 values
447+  861E              ;                            0                             1                             2                             3
448+  861E              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
449+  861E 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
449+  8622 04 04 05 06
449+  8626 06 07 08 09
449+  862A 0A 0A 0B 0C
449+  862E 0D 0E 0E 0F
449+  8632 10 10 11 13
449+  8636 14 15 15 16
449+  863A 17 18 19 1A
449+  863E 1B 1C 1E 1F
449+  8642 1F
450+  8643              SpeedoStart             equ $84D1
451+  8643              ;                            0                             1                             2                             3                             4
452+  8643              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
453+  8643 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
453+  8647 04 04 05 06
453+  864B 06 07 08 09
453+  864F 0A 0A 0B 0C
453+  8653 0D 0E 0E 0F
453+  8657 10 10 11 12
453+  865B 13 14 14 15
453+  865F 16 17 18 18
453+  8663 19 1A 1A 1B
453+  8667 1C 1C 1D 1E
453+  866B 1F
454+  866C
455+  866C              DialMiddleXPos          equ $E1
456+  866C              RollMiddle              equ $8CE0
457+  866C              PitchMiddle             equ $94E0
458+  866C
459+  866C
460+  866C
461+  866C
462+  866C
# file closed: ../Variables/general_variables.asm
 72   866C
 73   866C                                      STRUCT testCase
 74   866C ~            XLo                     BYTE 1
 75   866C ~            XHi                     BYTE 2
 76   866C ~            XSgn                    BYTE 3
 77   866C ~            DVal                    BYTE 4
 78   866C ~            ExpectedC               BYTE 5
 79   866C ~            ExpectedL               BYTE 6
 80   866C ~            ExpectedE               BYTE 7
 81   866C ~            ExpectedD               BYTE 8
 82   866C ~            ActualC                 BYTE 9
 83   866C ~            ActualL                 BYTE 10
 84   866C ~            ActualE                 BYTE 11
 85   866C ~            ActualD                 BYTE 12
 86   866C ~            Padding1                BYTE 13
 87   866C ~            Padding2                BYTE 14
 88   866C ~            Padding3                BYTE 15
 89   866C ~            PassFail                BYTE 16
 90   866C                                      ENDS
 91   866C              ;                            01   02   03   04   05   06   07   08   09   10   11   12   13   14   15   16
 92   866C 05 05 00 05  TestCase1               DB  $05, $05, $00, $05, $19, $19, $00, $00, $00, $00, $00, $00, $00, $00, $01, $00
 92   8670 19 19 00 00
 92   8674 00 00 00 00
 92   8678 00 00 01 00
 93   867C 05 05 03 05  TestCase2               DB  $05, $05, $03, $05, $19, $19, $0F, $00, $00, $00, $00, $00, $00, $00, $02, $00
 93   8680 19 19 0F 00
 93   8684 00 00 00 00
 93   8688 00 00 02 00
 94   868C 05 05 83 05  TestCase3               DB  $05, $05, $83, $05, $19, $19, $0F, $80, $00, $00, $00, $00, $00, $00, $03, $00
 94   8690 19 19 0F 80
 94   8694 00 00 00 00
 94   8698 00 00 03 00
 95   869C 05 05 03 85  TestCase4               DB  $05, $05, $03, $85, $19, $19, $0F, $80, $00, $00, $00, $00, $00, $00, $04, $00
 95   86A0 19 19 0F 80
 95   86A4 00 00 00 00
 95   86A8 00 00 04 00
 96   86AC 05 0A 00 05  TestCase5               DB  $05, $0A, $00, $05, $19, $32, $00, $00, $00, $00, $00, $00, $00, $00, $05, $00
 96   86B0 19 32 00 00
 96   86B4 00 00 00 00
 96   86B8 00 00 05 00
 97   86BC 0A 05 80 05  TestCase6               DB  $0A, $05, $80, $05, $32, $19, $00, $80, $00, $00, $00, $00, $00, $00, $06, $00
 97   86C0 32 19 00 80
 97   86C4 00 00 00 00
 97   86C8 00 00 06 00
 98   86CC 05 05 80 05  TestCase7               DB  $05, $05, $80, $05, $19, $19, $00, $80, $00, $00, $00, $00, $00, $00, $07, $00
 98   86D0 19 19 00 80
 98   86D4 00 00 00 00
 98   86D8 00 00 07 00
 99   86DC 05 05 83 0A  TestCase8               DB  $05, $05, $83, $0A, $32, $32, $1E, $80, $00, $00, $00, $00, $00, $00, $08, $00
 99   86E0 32 32 1E 80
 99   86E4 00 00 00 00
 99   86E8 00 00 08 00
100   86EC 05 05 83 CA  TestCase9               DB  $05, $05, $83, $CA, $72, $73, $DF, $00, $00, $00, $00, $00, $00, $00, $09, $00
100   86F0 72 73 DF 00
100   86F4 00 00 00 00
100   86F8 00 00 09 00
101   86FC 05 05 03 CA  TestCase10              DB  $05, $05, $03, $CA, $72, $73, $DF, $80, $00, $00, $00, $00, $00, $00, $10, $00
101   8700 72 73 DF 80
101   8704 00 00 00 00
101   8708 00 00 10 00
102   870C 0A           testTotal               DB  ($-TestCase1)/16
103   870D 00           testCounter             DB   0
104   870E
105   870E
106   870E                  SAVENEX OPEN "mathssun.nex", $8000 , $7F00
107   870E                  SAVENEX CFG  0,0,0,1
108   870E                  SAVENEX AUTO
109   870E                  SAVENEX CLOSE
110   870E
# file closed: mathstestssun.asm
