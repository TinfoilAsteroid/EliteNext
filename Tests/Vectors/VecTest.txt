# file opened: VecTest.asm
   1  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
   2  0000                              DISPLAY "3D Test Code"
   3  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
   4  0000                              DISPLAY "TODO: Odd Single pixel bug "
   5  0000                  DEVICE ZXSPECTRUMNEXT
   6  0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   7  0000
   8  0000
   9  0000                  DEFINE  SHIP_DRAW_FULL_SCREEN 1
  10  0000                  DEFINE  USE_NORMALISE_IX  1
  11  0000                  DEFINE  INTERRUPS_DISABLE 1
  12  0000                  DEFINE  DEBUG_NO_TACTICS_CODE 1
  13  0000               CSPECTMAP VecTest.map
  14  0000               OPT --zxnext=cspect --syntax=a --reversepop
  15  0000              ;-- Key Definitions
  16  0000              ;   Q/A pitch       O/P roll        W/A Thrust
  17  0000              ;   T/G ship pitch, F/H ship roll   U/J Ship Thrust
  18  0000              ;   P   Cycle through ships
  19  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  20  0000              ; Game Defines
  21  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  22  0000              ; Colour Defines
  23  0000                                      INCLUDE "../../Hardware/L1ColourDefines.asm"
# file opened: ../../Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ../../Hardware/L1ColourDefines.asm
  24  0000                                      INCLUDE "../../Hardware/L2ColourDefines.asm"
# file opened: ../../Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ../../Hardware/L2ColourDefines.asm
  25  0000                                      INCLUDE "../../Hardware/register_defines.asm"
# file opened: ../../Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU $00
 120+ 0000              VERSION_REGISTER						EQU $01
 121+ 0000              RESET_REGISTER		    				EQU $02
 122+ 0000              MACHINE_TYPE_REGISTER					EQU $03
 123+ 0000              PAGE_RAM_REGISTER						EQU $04
 124+ 0000              PERIPHERAL_1_REGISTER					EQU $05   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU $06   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU $07
 127+ 0000              PERIPHERAL_3_REGISTER					EQU $08   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU $09   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU $0A  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU $0E
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU $10
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU $11
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU $12
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU $13
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU $14
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU $15
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU $16
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU $17
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU $18
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU $19
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU $1A
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU $1B
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU $1C
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU $1E
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU $1F
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU $22
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU $23
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU $26
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU $27
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU $28
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU $29
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU $2A
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU $2B
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU $2C
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU $2D
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU $2E
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU $2F
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU $30
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU $31
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU $32
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU $33
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU $34
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU $35
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU $36
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU $37
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU $38
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU $39
 170+ 0000              PALETTE_INDEX_REGISTER					EQU $40
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU $41
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU $42
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU $43
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU $44
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU $4A
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU $4B
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU $4C
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU $50
 180+ 0000              MMU_SLOT_1_REGISTER						EQU $51
 181+ 0000              MMU_SLOT_2_REGISTER						EQU $52
 182+ 0000              MMU_SLOT_3_REGISTER						EQU $53
 183+ 0000              MMU_SLOT_4_REGISTER						EQU $54
 184+ 0000              MMU_SLOT_5_REGISTER						EQU $55
 185+ 0000              MMU_SLOT_6_REGISTER						EQU $56
 186+ 0000              MMU_SLOT_7_REGISTER						EQU $57
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU $60
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU $61
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU $62
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU $63
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU $64
 193+ 0000              ULA_CONTROL_REGISTER                    EQU $68
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU $69
 195+ 0000              LORES_CONTROL_REGISTER                  EQU $6A
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU $6B
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU $6C
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU $6E
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU $6F
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU $70
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU $71
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_0_WITH_INC EQU $75
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1_WITH_INC EQU $76
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2_WITH_INC EQU $77
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3_WITH_INC EQU $78
 207+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC EQU $79
 208+ 0000              USER_STORAGE_0_REGISTER                 EQU $7F ; general purpose variable, e.g. for copper
 209+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU $80
 210+ 0000              EXPANSION_BUS_CONTROL_REGISTER          EQU $81
 211+ 0000              INTERNAL_PORT_DECODING_B0_7_REGISTER    EQU $82
 212+ 0000              INTERNAL_PORT_DECODING_B8_15_REGISTER   EQU $83
 213+ 0000              INTERNAL_PORT_DECODING_B16_23_REGISTER  EQU $84
 214+ 0000              INTERNAL_PORT_DECODING_B24_31_REGISTER  EQU $85
 215+ 0000              EXPANSION_BUS_DECODING_B0_7_REGISTER    EQU $86
 216+ 0000              EXPANSION_BUS_DECODING_B8_15_REGISTER   EQU $87
 217+ 0000              EXPANSION_BUS_DECODING_B16_23_REGISTER  EQU $88
 218+ 0000              EXPANSION_BUS_DECODING_B24_31_REGISTER  EQU $89
 219+ 0000              EXPANSION_BUS_IO_PROPAGE_REGISTER       EQU $8A
 220+ 0000              ALTERNATE_ROM_REGISTER                  EQU $8C
 221+ 0000              MEMORY_MAPPING_REGISTER                 EQU $8E
 222+ 0000              PI_GPI_OUTPUT_ENABLE_0_REIGISTER        EQU $98
 223+ 0000              PI_GPI_OUTPUT_ENABLE_1_REIGISTER        EQU $99
 224+ 0000              PI_GPI_OUTPUT_ENABLE_2_REIGISTER        EQU $9A
 225+ 0000              PI_GPI_OUTPUT_ENABLE_3_REIGISTER        EQU $9B
 226+ 0000              PI_PERPIPHERAL_ENABLE_REGISTER          EQU $A0
 227+ 0000              PI_I2S_AUDIO_CONTROL_REGISTER           EQU $A2
 228+ 0000              PI_I2S_CLOCK_DIVIDE_REGISTER            EQU $A3
 229+ 0000              ESP_WIFI_GPIO_OUTPUT_REGISTER           EQU $A8
 230+ 0000              ESP_WIFI_GPIO_REGISTER                  EQU $A9
 231+ 0000              EXTENDED_KEYS_0_REGISTER                EQU $B0
 232+ 0000              EXTENDED_KEYS_1_REGISTER                EQU $B1
 233+ 0000              DIVMMC_TRAP_ENABLE_1                    EQU $B2
 234+ 0000              DIVMMC_TRAP_ENABLE_2                    EQU $B4
 235+ 0000              DEBUG_LED_CONTROL_REGISTER              EQU $FF
 236+ 0000
 237+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 238+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 239+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 240+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 241+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 242+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 243+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 244+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 245+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 246+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 247+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 248+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 249+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 250+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 251+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 252+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 253+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 254+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 255+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 256+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 257+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 258+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 259+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 260+ 0000
 261+ 0000
 262+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 263+ 0000
 264+ 0000
 265+ 0000              GetNextRegSaveBC:	MACRO register
 266+ 0000 ~                                push bc
 267+ 0000 ~                                ld bc,$243B
 268+ 0000 ~                                ld a,register
 269+ 0000 ~                                out (c),a
 270+ 0000 ~                                inc b
 271+ 0000 ~                                in a,(c)
 272+ 0000 ~                                pop bc
 273+ 0000                                  ENDM
 274+ 0000
 275+ 0000              GetNextReg:	MACRO register
 276+ 0000 ~                        ld bc,$243B
 277+ 0000 ~                        ld a,register
 278+ 0000 ~                        out (c),a
 279+ 0000 ~                        inc b
 280+ 0000 ~                        in a,(c)
 281+ 0000                          ENDM
 282+ 0000
# file closed: ../../Hardware/register_defines.asm
  26  0000                                      INCLUDE "../../Layer2Graphics/layer2_defines.asm"
# file opened: ../../Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ../../Layer2Graphics/layer2_defines.asm
  27  0000                                      INCLUDE	"../../Hardware/memory_bank_defines.asm"
# file opened: ../../Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              SpaceStationBankAddr    equ $c000
  28+ 0000              UniverseBankAddr	    equ $c000
  29+ 0000              LaunchShipAddr          equ $c000
  30+ 0000              membank7 			    equ $e000
  31+ 0000              L1membankAddr   	    equ $e000
  32+ 0000              L2membankAddr   	    equ $e000
  33+ 0000              ShipModelsAddr	        equ $e000
  34+ 0000              SpritemembankAddr       equ $e000
  35+ 0000              ResetUniverseAddr       equ $e000
  36+ 0000              StockTableAddr	        equ $e000
  37+ 0000              CommanderAddr           equ $e000
  38+ 0000              LAYER2Addr              equ $e000
  39+ 0000              LAYER1Addr              equ $e000
  40+ 0000              SPRITEAddr              equ $e000
  41+ 0000              ConsoleImageAddr        equ $e000
  42+ 0000              GalaxyDataAddr          equ $e000
  43+ 0000              SoundAddr               equ $e000
  44+ 0000              KeyboardAddr            equ $e000
  45+ 0000              MathsBankedFnsAddr      equ $0000
  46+ 0000
  47+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  48+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  49+ 0000              MathsBankedFnsMMU       equ MMU_SLOT_0_REGISTER
  50+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  51+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  52+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  53+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  54+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  55+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  56+ 0000              SpaceStationMMU         equ MMU_SLOT_6_REGISTER
  57+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  63+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  64+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  65+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  66+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  67+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  68+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  69+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  70+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  71+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  72+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  73+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  74+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  75+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  76+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  77+ 0000              KeyboardMMU             equ MMU_SLOT_7_REGISTER
  78+ 0000
  79+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  80+ 0000              BankResetUniv           equ 49
  81+ 0000              BankMenuShrCht          equ 50
  82+ 0000              BankMenuGalCht          equ 51
  83+ 0000              BankMenuInvent          equ 52
  84+ 0000              BankMenuSystem          equ 53
  85+ 0000              BankMenuMarket          equ 54
  86+ 0000              BankStockTable          equ 55
  87+ 0000              BankCommander           equ 56
  88+ 0000              BankLAYER2              equ 57
  89+ 0000              BankLAYER1              equ 58
  90+ 0000              BankShipModels1         equ 59
  91+ 0000              BankSPRITE              equ 60
  92+ 0000              BankConsole             equ 61
  93+ 0000              BankFrontView           equ 62
  94+ 0000              BankMenuStatus          equ 63
  95+ 0000              BankMenuEquipS          equ 64
  96+ 0000              BankLaunchShip          equ 65
  97+ 0000              BankDispMarket          equ 66
  98+ 0000              BankShipModels2         equ 67
  99+ 0000              BankShipModels3         equ 68
 100+ 0000              BankShipModels4         equ 69
 101+ 0000
 102+ 0000              BankUNIVDATA0           equ 70
 103+ 0000              BankSpaceStationData    equ 70
 104+ 0000              BankUNIVDATA1           equ 71
 105+ 0000              BankUNIVDATA2           equ 72
 106+ 0000              BankUNIVDATA3           equ 73
 107+ 0000              BankUNIVDATA4           equ 74
 108+ 0000              BankUNIVDATA5           equ 75
 109+ 0000              BankUNIVDATA6           equ 76
 110+ 0000              BankUNIVDATA7           equ 77
 111+ 0000              BankUNIVDATA8           equ 78
 112+ 0000              BankUNIVDATA9           equ 79
 113+ 0000              BankUNIVDATA10          equ 80
 114+ 0000              BankUNIVDATA11          equ 81
 115+ 0000              BankUNIVDATA12          equ 82
 116+ 0000              BankSunData             equ 83
 117+ 0000              BankPlanetData          equ 84
 118+ 0000
 119+ 0000              BankGalaxyData0         equ 91
 120+ 0000              BankGalaxyData1         equ 92
 121+ 0000              BankGalaxyData2         equ 93
 122+ 0000              BankGalaxyData3         equ 94
 123+ 0000              BankGalaxyData4         equ 95
 124+ 0000              BankGalaxyData5         equ 96
 125+ 0000              BankGalaxyData6         equ 97
 126+ 0000              BankGalaxyData7         equ 98
 127+ 0000
 128+ 0000              BankMathsTables         equ 99
 129+ 0000              BankSound               equ 100
 130+ 0000              BankKeyboard            equ 101
 131+ 0000              BankMathsBankedFns      equ 102
 132+ 0000
 133+ 0000              BankROM                 equ 255
 134+ 0000
 135+ 0000
# file closed: ../../Hardware/memory_bank_defines.asm
  28  0000                                      INCLUDE "../../Hardware/screen_equates.asm"
# file opened: ../../Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000                                      DISPLAY "TODO: place odler for debugging"
  19+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  20+ 0000              ScreenL1Bottom      equ $5000
  21+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  22+ 0000              ScreenL1AttrBtm     equ $5A00
  23+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  24+ 0000
# file closed: ../../Hardware/screen_equates.asm
  29  0000                                      INCLUDE "../../Data/ShipModelEquates.asm"
# file opened: ../../Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ../../Data/ShipModelEquates.asm
  30  0000                                      INCLUDE "../../Macros/graphicsMacros.asm"
# file opened: ../../Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000
  28+ 0000              ErrorEquStepMinusDelta: MACRO   delta_step, delta_value
  29+ 0000 ~                                    ld      hl,(delta_step)
  30+ 0000 ~                                    ld      de,(delta_value)
  31+ 0000 ~                                    ClearCarryFlag
  32+ 0000 ~                                    sbc     hl,de
  33+ 0000 ~                                    ld      (error),hl
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ; we could hold steps and deltas in alternate registers later
  37+ 0000              ErrorPlusStep:          MACRO   delta_step
  38+ 0000 ~                                    ld      hl,(error)
  39+ 0000 ~                                    ld      de,(delta_step)
  40+ 0000 ~                                    add     hl,de
  41+ 0000 ~                                    ld      (error),hl
  42+ 0000                                      ENDM
  43+ 0000
  44+ 0000              ErrorMinusStep:         MACRO   delta_step
  45+ 0000 ~                                    ld      hl,(error)
  46+ 0000 ~                                    ld      de,(delta_step)
  47+ 0000 ~                                    ClearCarryFlag
  48+ 0000 ~                                    sbc     hl,de
  49+ 0000 ~                                    ld      (error),hl
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              SetExitFalse:           MACRO
  53+ 0000 ~                                    xor     a
  54+ 0000 ~                                    ld      (set_exit),a
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ; pulls axis high byte to a, returns nz if negative, z if positive
  58+ 0000              IsAxisLT0:              MACRO   axis
  59+ 0000 ~                                    ld      a,(axis+1)
  60+ 0000 ~                                    and     $80
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              ; modifies HL, loaded with register, returns z if >=0, nz if negative
  64+ 0000              IsMemld16GTE0           MACRO   mem
  65+ 0000 ~                                    ld      hl, (mem)
  66+ 0000 ~                                    bit     7,h
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsMemNegative8JumpFalse:MACRO   mem, target
  70+ 0000 ~                                    ld      a,(mem)
  71+ 0000 ~                                    and     $80
  72+ 0000 ~                                    jp      z, target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              IsMem16GT0JumpFalse:    MACRO   mem, target
  76+ 0000 ~                                    ld      hl, (mem)
  77+ 0000 ~                                    bit     7,h
  78+ 0000 ~                                    jp      nz, target
  79+ 0000 ~                                    ld      a,h
  80+ 0000 ~                                    or      l
  81+ 0000 ~                                    jp      z,  target
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              FloorHLdivDETarget:     MACRO   target
  85+ 0000 ~                                    call    l_div                   ;       .  (so we swap and call l_div) HL = DE / HL, DE = DE % HL
  86+ 0000 ~                                    ld      a,d                     ;       .  get bit 7 into carry (set if negative)
  87+ 0000 ~                                    sla     a                       ;
  88+ 0000 ~                                    jr      nc,.FloorIsOK           ;
  89+ 0000 ~            .FloorAdjust:           dec     hl                      ;       .  if remainder >= adjust by 1 for negative
  90+ 0000 ~            .FloorIsOK:             ld      (target),hl             ;       .  now save the msd value
  91+ 0000                                      ENDM
  92+ 0000
# file closed: ../../Macros/graphicsMacros.asm
  31  0000                                      INCLUDE "../../Macros/callMacros.asm"
# file opened: ../../Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ../../Macros/callMacros.asm
  32  0000                                      INCLUDE "../../Macros/carryFlagMacros.asm"
# file opened: ../../Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ../../Macros/carryFlagMacros.asm
  33  0000                                      INCLUDE "../../Macros/CopyByteMacros.asm"
# file opened: ../../Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ../../Macros/CopyByteMacros.asm
  34  0000                                      INCLUDE "../../Macros/ldCopyMacros.asm"
# file opened: ../../Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopyWord:             MACRO memfrom, memto
  77+ 0000 ~                                    ldCopy2Byte memfrom, memto
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ldCopy2Byte:            MACRO  memfrom, memto
  81+ 0000 ~                                    ld       hl,(memfrom)
  82+ 0000 ~                                    ld       (memto),hl
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ldWriteConst            MACRO  memfrom, memto
  86+ 0000 ~                                    ld       a,memfrom
  87+ 0000 ~                                    ld       (memto),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ldWriteZero             MACRO  memto
  91+ 0000 ~                                    xor      a
  92+ 0000 ~                                    ld       (memto),a
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ldIXLaFromN:	        MACRO memfrom
  96+ 0000 ~                                    ld		a,(memfrom)
  97+ 0000 ~                                    ld		ixl,a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ldIXHaFromN:	        MACRO memfrom
 101+ 0000 ~                                    ld		a,(memfrom)
 102+ 0000 ~                                    ld		ixh,a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ldIYLaFromN:	        MACRO memfrom
 106+ 0000 ~                                    ld		a,(memfrom)
 107+ 0000 ~                                    ld		iyl,a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ldIYHaFromN:	        MACRO memfrom
 111+ 0000 ~                                    ld		a,(memfrom)
 112+ 0000 ~                                    ld		iyh,a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Read a 32 bit value from address HL into BCDE
 116+ 0000              ldBCDEatHL:             MACRO
 117+ 0000 ~                                    ld      e,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      d,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      c,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000 ~                                    ld      b,(hl)
 124+ 0000 ~                                    inc     hl
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              ldBCatHL:               MACRO
 128+ 0000 ~                                    ld      c,(hl)
 129+ 0000 ~                                    inc     hl
 130+ 0000 ~                                    ld      b,(hl)
 131+ 0000 ~                                    inc     hl
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ldhlde:			        MACRO
 135+ 0000 ~                                    ld		h,d
 136+ 0000 ~                                    ld		l,e
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ldhlbc:			        MACRO
 140+ 0000 ~                                    ld		h,b
 141+ 0000 ~                                    ld		l,c
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              ldbcde:			        MACRO
 145+ 0000 ~                                    ld		b,d
 146+ 0000 ~                                    ld		c,e
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              lddebc:			        MACRO
 150+ 0000 ~                                    ld		d,b
 151+ 0000 ~                                    ld		e,c
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ldbchl:			        MACRO
 155+ 0000 ~                                    ld		b,h
 156+ 0000 ~                                    ld		c,l
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              lddeiy:			        MACRO
 160+ 0000 ~                                    ld		d,iyh
 161+ 0000 ~                                    ld		e,iyl
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              ldiyde:			        MACRO
 165+ 0000 ~                                    ld		iyh,d
 166+ 0000 ~                                    ld		iyl,e
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000
 170+ 0000              FourLDIInstrunctions:   MACRO
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000 ~                                    ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              FiveLDIInstrunctions:   MACRO
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              SixLDIInstrunctions:    MACRO
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000 ~                                    ldi
 189+ 0000 ~                                    ldi
 190+ 0000 ~                                    ldi
 191+ 0000 ~                                    ldi
 192+ 0000                                      ENDM
 193+ 0000
 194+ 0000              EightLDIInstrunctions:  MACRO
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              NineLDIInstrunctions:  MACRO
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000 ~            		                ldi
 212+ 0000 ~            		                ldi
 213+ 0000 ~            		                ldi
 214+ 0000 ~            		                ldi
 215+ 0000                                      ENDM
# file closed: ../../Macros/ldCopyMacros.asm
  35  0000                                      INCLUDE "../../Macros/ldIndexedMacros.asm"
# file opened: ../../Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
  67+ 0000
  68+ 0000              ;-- Performs HL = |HL| - 1
  69+ 0000              DecHLABS:           MACRO
  70+ 0000 ~                                bit         7,h
  71+ 0000 ~                                jp          nz,.NegativeDec
  72+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  73+ 0000 ~                                or          l
  74+ 0000 ~                                jp          z,.HLZero
  75+ 0000 ~            .PositiveDec:       dec         hl
  76+ 0000 ~                                jp          .Done
  77+ 0000 ~            .NegativeDec:       ld          a,h
  78+ 0000 ~                                and         $7F
  79+ 0000 ~                                ld          h,a
  80+ 0000 ~                                dec         hl
  81+ 0000 ~                                set         7,h
  82+ 0000 ~                                jp          .Done
  83+ 0000 ~            .HLZero:            ld          hl,$8001
  84+ 0000 ~            .Done:
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000              ;-- Performs HL = HL - 1
  88+ 0000              DecHLSigned:        MACRO
  89+ 0000 ~                                bit         7,h
  90+ 0000 ~                                jp          nz,.NegativeDec
  91+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  92+ 0000 ~                                or          l
  93+ 0000 ~                                jp          z,.HLZero
  94+ 0000 ~            .PositiveDec:       dec         hl
  95+ 0000 ~                                jp          .Done
  96+ 0000 ~            .NegativeDec:       ld          a,h
  97+ 0000 ~                                and         $7F
  98+ 0000 ~                                ld          h,a
  99+ 0000 ~                                inc         hl                  ; if its already negative then add 1 to make it further
 100+ 0000 ~                                set         7,h
 101+ 0000 ~                                jp          .Done
 102+ 0000 ~            .HLZero:            ld          hl,$8001
 103+ 0000 ~            .Done:
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ../../Macros/ldIndexedMacros.asm
  36  0000                                      INCLUDE "../../Macros/jumpMacros.asm"
# file opened: ../../Macros/jumpMacros.asm
   1+ 0000              JumpIfHLNegative:       MACRO target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    jp      nz,target
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              JumpIfPositive:	        MACRO target
   7+ 0000 ~                                    jp		p, target
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              JumpIfNegative:	        MACRO target
  11+ 0000 ~                                    jp		m, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000
  15+ 0000              JumpIfUnderflow:	    MACRO target
  16+ 0000 ~                                    jp		po, target
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              JumpIfOverflow:	        MACRO target
  20+ 0000 ~                                    jp		po, target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              JumpIfNotZero:	        MACRO target
  25+ 0000 ~                                    jp	nz,target
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              JumpIfZero:	            MACRO target
  29+ 0000 ~                                    jp	z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ;.. Bit routines
  33+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  34+ 0000 ~                                    ld      a,reg
  35+ 0000 ~                                    and     SignOnly8Bit
  36+ 0000 ~                                    jp      nz,target
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  40+ 0000 ~                                    ld      a,reg
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      z,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignSetA:     MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      nz,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnLeadSignClearA:   MACRO   target
  51+ 0000 ~                                    and     SignOnly8Bit
  52+ 0000 ~                                    jp      z,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    bit 	bitnbr,a
  58+ 0000 ~                                    jp      nz,target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    bit 	bitnbr,a
  64+ 0000 ~                                    jp      z,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000
  68+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      nz,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  74+ 0000 ~                                    bit 	bitnbr, a
  75+ 0000 ~                                    jp      z,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Set:         MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      nz,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnABit5Clear:       MACRO   target
  84+ 0000 ~                                    and     Bit5Only
  85+ 0000 ~                                    jp      z,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      nz,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  94+ 0000 ~                                    and     bitmask
  95+ 0000 ~                                    jp      z,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  99+ 0000 ~                                    ld      a,(mem)
 100+ 0000 ~                                    and     bitmask
 101+ 0000 ~                                    jp      nz,target
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 105+ 0000 ~                                    ld      a,(mem)
 106+ 0000 ~                                    and     bitmask
 107+ 0000 ~                                    jp      z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      nz,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 116+ 0000 ~                                    bit 	bitnbr,reg
 117+ 0000 ~                                    jp      z,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Comparison Routines
 121+ 0000              JumpIfAGTEusng:         MACRO
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTENusng:        MACRO reg,target
 126+ 0000 ~                                    cp     reg
 127+ 0000 ~                                    jp		nc,target
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 131+ 0000 ~                                    ld      hl,mem
 132+ 0000 ~                                    cp      (hl)
 133+ 0000 ~                                    jp		nc,target
 134+ 0000                                      ENDM
 135+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 136+ 0000 ~                                    ld     a,(mem)
 137+ 0000 ~                                    cp     value
 138+ 0000 ~                                    jp	  nc,target
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 142+ 0000 ~                                    ld   a,(mem)
 143+ 0000 ~                                    ld   hl,address
 144+ 0000 ~                                    cp   (hl)
 145+ 0000 ~                                    jp	  nc,target
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 149+ 0000 ~                                    ld   a,(mem)
 150+ 0000 ~                                    ld   hl,address
 151+ 0000 ~                                    cp   (hl)
 152+ 0000 ~                                    jp	  z,target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 156+ 0000 ~                                    ld   a,(mem)
 157+ 0000 ~                                    ld   hl,address
 158+ 0000 ~                                    cp   (hl)
 159+ 0000 ~                                    jp	  nz,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemTrue:          MACRO mem, target
 163+ 0000 ~                                    ld      a,(mem)
 164+ 0000 ~                                    and     a
 165+ 0000 ~                                    jp      z, target
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              JumpIfMemFalse:         MACRO mem, target
 169+ 0000 ~                                    ld      a,(mem)
 170+ 0000 ~                                    and     a
 171+ 0000 ~                                    jp      nz, target
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              JumpIfATrue:            MACRO target
 175+ 0000 ~                                    and     a
 176+ 0000 ~                                    jp      z, target
 177+ 0000                                      ENDM
 178+ 0000
 179+ 0000              JumpIfAFalse:           MACRO target
 180+ 0000 ~                                    and     a
 181+ 0000 ~                                    jp      nz, target
 182+ 0000                                      ENDM
 183+ 0000
 184+ 0000              JumpIfANotFalse:        MACRO target
 185+ 0000 ~                                    cp      $FF
 186+ 0000 ~                                    jp      nz, target
 187+ 0000                                      ENDM
 188+ 0000
 189+ 0000              ;-- Less than Macros -------------------------------------------
 190+ 0000              JumpIfALTMemHLusng:     MACRO target
 191+ 0000 ~                                    cp    (hl)
 192+ 0000 ~                                    jp	  c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfRegLTE:           MACRO   reg, value, target
 196+ 0000 ~                                    ld      a,reg
 197+ 0000 ~                                    cp      value
 198+ 0000 ~                                    jp	    z,target
 199+ 0000 ~                                    jp		c, target
 200+ 0000                                      ENDM
 201+ 0000
 202+ 0000              JumpIfALTMemusng:       MACRO mem,target
 203+ 0000 ~                                    ld      hl,mem
 204+ 0000 ~                                    cp      (hl)
 205+ 0000 ~                                    jp		c,target
 206+ 0000                                      ENDM
 207+ 0000
 208+ 0000
 209+ 0000              JumpIfALTusng:          MACRO target
 210+ 0000 ~                                    jp		c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfALTNusng:         MACRO value, target
 214+ 0000 ~                                    cp      value
 215+ 0000 ~                                    jp		c, target
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              JumpIfALTNsigned:       MACRO   value, target
 219+ 0000 ~                                    cp      value
 220+ 0000 ~                                    jp      m,.SignSet
 221+ 0000 ~            .SignClear:             jp      pe,target       ; Sign (0), P/V (1)
 222+ 0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (0)
 223+ 0000 ~            .SignSet:               jp      po,target
 224+ 0000 ~            .CheckComplete:
 225+ 0000                                      ENDM
 226+ 0000
 227+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 228+ 0000 ~                                    ld      a,(mem)
 229+ 0000 ~                                    cp      value
 230+ 0000 ~                                    jp	  c,target
 231+ 0000                                      ENDM
 232+ 0000
 233+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 234+ 0000 ~                                    ld    a,(mem)
 235+ 0000 ~                                    ld    hl,value
 236+ 0000 ~                                    cp    (hl)
 237+ 0000 ~                                    jp	  c,target
 238+ 0000                                      ENDM
 239+ 0000              ;-- ------------------------------------------------------------
 240+ 0000              JumpIfAGTENsigned       MACRO   value, target
 241+ 0000 ~                                    cp      value
 242+ 0000 ~                                    jp      m,.SignSet
 243+ 0000 ~            .SignClear:             jp      po,target       ; Sign (0), P/V (0)
 244+ 0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (1)
 245+ 0000 ~            .SignSet:               jp      pe,target
 246+ 0000 ~            .CheckComplete:
 247+ 0000                                      ENDM
 248+ 0000
 249+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 250+ 0000 ~                                    ld  a,(mem)
 251+ 0000 ~                                    cp  value
 252+ 0000 ~                                    jp  z,target
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 256+ 0000 ~                                    ld  a,(mem)
 257+ 0000 ~                                    cp  value
 258+ 0000 ~                                    jp  nz,target
 259+ 0000                                      ENDM
 260+ 0000
 261+ 0000              JumpIfMemZero:          MACRO mem,target
 262+ 0000 ~                                    ld  a,(mem)
 263+ 0000 ~                                    and a
 264+ 0000 ~                                    jp  z,target
 265+ 0000                                      ENDM
 266+ 0000
 267+ 0000              JumpIfMemNotZero:       MACRO mem,target
 268+ 0000 ~                                    ld  a,(mem)
 269+ 0000 ~                                    and a
 270+ 0000 ~                                    jp  nz,target
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              JumpIfANENusng:         MACRO value, target
 274+ 0000 ~                                    cp     value
 275+ 0000 ~                                    jp      nz,target
 276+ 0000                                      ENDM
 277+ 0000
 278+ 0000              JumpIfANEquNusng:       MACRO value, target
 279+ 0000 ~                                    cp     value
 280+ 0000 ~                                    jp     z,target
 281+ 0000                                      ENDM
 282+ 0000
 283+ 0000              JumpIfANEMemusng:       MACRO  value, target
 284+ 0000 ~                                    ld    hl,value
 285+ 0000 ~                                    cp    (hl)
 286+ 0000 ~                                    jp      nz,target
 287+ 0000                                      ENDM
 288+ 0000
 289+ 0000              JumpIfAEqNusng:         MACRO value, target
 290+ 0000 ~                                    cp     value
 291+ 0000 ~                                    jp      z,target
 292+ 0000                                      ENDM
 293+ 0000
 294+ 0000              JumpIfAIsZero:	        MACRO target
 295+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 296+ 0000 ~                                    jp	    z, target
 297+ 0000                                      ENDM
 298+ 0000
 299+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 300+ 0000 ~                                    ld      a,reg
 301+ 0000 ~                                    and     a
 302+ 0000 ~                                    jp	    nz,target
 303+ 0000                                      ENDM
 304+ 0000
 305+ 0000
 306+ 0000              JumpIfAIsNotZero:       MACRO target
 307+ 0000 ~                                    and     a
 308+ 0000 ~                                    jp	    nz,target
 309+ 0000                                      ENDM
 310+ 0000
 311+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 312+ 0000 ~                                    ld      a,(value)
 313+ 0000 ~                                    and     a
 314+ 0000 ~                                    jp	    nz,target
 315+ 0000                                      ENDM
 316+ 0000              IfResultZeroGoto:	    MACRO target
 317+ 0000 ~                                    jp	z,target
 318+ 0000                                      ENDM
 319+ 0000
 320+ 0000              IfResultNotZeroGoto:    MACRO target
 321+ 0000 ~                                    jp	nz,target
 322+ 0000                                      ENDM
 323+ 0000
# file closed: ../../Macros/jumpMacros.asm
  37  0000                                      INCLUDE "../../Macros/MathsMacros.asm"
# file opened: ../../Macros/MathsMacros.asm
   1+ 0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
   2+ 0000              IsHLGT255:              MACRO
   3+ 0000 ~                                    bit     7,h
   4+ 0000 ~                                    ret     z
   5+ 0000 ~                                    ld      a,h
   6+ 0000 ~                                    and     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              ; Sets z flat if HL = 255 else sets it to nz
  10+ 0000              IsHLEqu255:             MACRO
  11+ 0000 ~                                    ld      a,h
  12+ 0000 ~                                    and     a               ; if its non zero then it can't be 255
  13+ 0000 ~                                    ret     nz
  14+ 0000 ~                                    ld      a,l
  15+ 0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              ; Sets Z flag if GT 127 else nz
  19+ 0000              IsHLGT127:              MACRO
  20+ 0000 ~                                    bit     7,h             ; -ve?
  21+ 0000 ~                                    jr      nz,.DoneCheck
  22+ 0000 ~                                    ld      a,h             ; +ve > 256?
  23+ 0000 ~                                    and     a
  24+ 0000 ~                                    jr      nz,.DoneCheck
  25+ 0000 ~                                    ld      a,l
  26+ 0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
  27+ 0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
  28+ 0000 ~            .DoneCheck:
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              ReturnIfHLGT127:        MACRO
  32+ 0000 ~                                    bit     7,h             ; -ve?
  33+ 0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
  34+ 0000 ~                                    ld      a,h             ; +ve > 256?
  35+ 0000 ~                                    and     a               ;
  36+ 0000 ~                                    ret     nz              ; forces a return
  37+ 0000 ~                                    bit     7,l             ; bit 7 of lower set?
  38+ 0000 ~                                    ret     nz              ; forces a return
  39+ 0000 ~            .DoneCheck:
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              IsDEGT127:              MACRO
  43+ 0000 ~                                    bit     7,d
  44+ 0000 ~                                    jr      nz,.DoneCheck
  45+ 0000 ~                                    ld      a,d
  46+ 0000 ~                                    jr      nz,.DoneCheck
  47+ 0000 ~                                    ld      a,e
  48+ 0000 ~                                    and     $80
  49+ 0000 ~            .DoneCheck:
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ABSa2c:                 MACRO
  53+ 0000 ~                                    bit     7,a
  54+ 0000 ~                                    jp      z,.DoneABSa
  55+ 0000 ~                                    neg
  56+ 0000 ~            .DoneABSa:
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              DEEquSquareA:           MACRO
  60+ 0000 ~                                    ld  d,a
  61+ 0000 ~                                    ld  e,a
  62+ 0000 ~                                    mul de
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  66+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  67+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  68+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  69+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  70+ 0000 ~                                    xor $80                             ;
  71+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  72+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  73+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  74+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  75+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  76+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              SignedHLTo2C:           MACRO
  80+ 0000 ~                                    bit     7,h
  81+ 0000 ~                                    jr      z,.Done2c
  82+ 0000 ~                                    ld      a,h
  83+ 0000 ~                                    and     SignMask8Bit
  84+ 0000 ~                                    ld      h,a
  85+ 0000 ~                                    NegHL
  86+ 0000 ~            .Done2c:
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              MemSignedTo2C:          MACRO   memfrom
  90+ 0000 ~                                    ld      hl,(memfrom)
  91+ 0000 ~                                    bit     7,h
  92+ 0000 ~                                    jr      z,.Done2c
  93+ 0000 ~                                    ld      a,h
  94+ 0000 ~                                    and     SignMask8Bit
  95+ 0000 ~                                    ld      h,a
  96+ 0000 ~            .Done2c:                ld      (memfrom),hl
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000
 100+ 0000                  ;returns result in H
 101+ 0000              EDiv10Inline:           MACRO
 102+ 0000 ~                                    ld      d,0
 103+ 0000 ~                                    ld      hl,de
 104+ 0000 ~                                    add     hl,hl
 105+ 0000 ~                                    add     hl,de
 106+ 0000 ~                                    add     hl,hl
 107+ 0000 ~                                    add     hl,hl
 108+ 0000 ~                                    add     hl,de
 109+ 0000 ~                                    add     hl,hl
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              cpHLDE:                 MACRO
 113+ 0000 ~                                    push    hl
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    sbc     hl,de
 116+ 0000 ~                                    pop     hl
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              cpABSDEHL:              MACRO
 120+ 0000 ~                                    push     hl,,de
 121+ 0000 ~                                    ld      a,h
 122+ 0000 ~                                    and     $7F
 123+ 0000 ~                                    ld      h,a
 124+ 0000 ~                                    ld      a,d
 125+ 0000 ~                                    and     $7F
 126+ 0000 ~                                    ld      d,a
 127+ 0000 ~                                    ex      de,hl
 128+ 0000 ~                                    sbc     hl,de
 129+ 0000 ~                                    pop     hl,,de
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              ; Simple are they both the same setting z if they are
 133+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
 134+ 0000              ; so jp needs to be to a target
 135+ 0000              cpHLEquDE:              MACRO   passedCheck
 136+ 0000 ~                                    ld      a,h
 137+ 0000 ~                                    cp      d
 138+ 0000 ~                                    jp      nz, passedCheck
 139+ 0000 ~                                    ld      a,l
 140+ 0000 ~                                    cp      e
 141+ 0000 ~            .NoTheSame:
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              cpHLEquBC:              MACRO   passedCheck
 145+ 0000 ~                                    ld      a,h
 146+ 0000 ~                                    cp      b
 147+ 0000 ~                                    jp      nz, passedCheck
 148+ 0000 ~                                    ld      a,l
 149+ 0000 ~                                    cp      c
 150+ 0000 ~            .NoTheSame:
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              cpDEEquBC:              MACRO   passedCheck
 154+ 0000 ~                                    ld      a,d
 155+ 0000 ~                                    cp      b
 156+ 0000 ~                                    jp      nz, passedCheck
 157+ 0000 ~                                    ld      a,e
 158+ 0000 ~                                    cp      c
 159+ 0000 ~            .NoTheSame:
 160+ 0000                                      ENDM
 161+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 162+ 0000              cpHLDELeadSign:         MACRO
 163+ 0000 ~                                    ld      a,h
 164+ 0000 ~                                    cp      d
 165+ 0000 ~                                    jr      nz,.FullCompare
 166+ 0000 ~                                    ld      a,l
 167+ 0000 ~                                    cp      e
 168+ 0000 ~                                    ret     z
 169+ 0000 ~            .FullCompare:           ld      a,h
 170+ 0000 ~                                    xor     d
 171+ 0000 ~                                    and     $80
 172+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 173+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 174+ 0000 ~                                    and     $80
 175+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 176+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 177+ 0000 ~            .OppositeSigns:         ld      a,h
 178+ 0000 ~                                    and     $80
 179+ 0000 ~                                    and     $80
 180+ 0000 ~                                    jp      z,.HLGTDE
 181+ 0000 ~            .HLLTDE:                SetCarryFlag
 182+ 0000 ~                                    ret
 183+ 0000 ~            .HLGTDE:                ClearCarryFlag
 184+ 0000 ~                                    ret
 185+ 0000                                      ENDM
 186+ 0000
 187+ 0000              ;Unsigned
 188+ 0000              ;If HL == DE, then Z flag is set.
 189+ 0000              ;If HL != DE, then Z flag is reset.
 190+ 0000              ;If HL <  DE, then C flag is set.
 191+ 0000              ;If HL >= DE, then C flag is reset.
 192+ 0000              ;
 193+ 0000              ;Signed
 194+ 0000              ;If HL == DE, then Z flag is set.
 195+ 0000              ;If HL != DE, then Z flag is reset.
 196+ 0000              ;If HL <  DE, then S and P/V are different.
 197+ 0000              ;If HL >= DE, then S and P/V are the same.
 198+ 0000
 199+ 0000
 200+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
 201+ 0000 ~                                    ld      a,param3                        ;
 202+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 203+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 204+ 0000 ~                                    ld      d,a
 205+ 0000 ~                                    mul
 206+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 207+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              AequN1xorN2:            MACRO  param1,param2
 211+ 0000 ~                                    ld      a,(param1)
 212+ 0000 ~                                    xor     param2
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 216+ 0000 ~                                    ld      e,speedreg
 217+ 0000 ~                                    ld      hl,(axis)
 218+ 0000 ~                                    ld      a,h
 219+ 0000 ~                                    ClearSignBitA
 220+ 0000 ~                                    ld      d,a
 221+ 0000 ~                                    mul     de
 222+ 0000 ~                                    ld      a,h
 223+ 0000 ~                                    SignBitOnlyA
 224+ 0000 ~                                    ld      b,a;ld      c,a
 225+ 0000 ~                                    ld      h,d;ld      e,d
 226+ 0000 ~                                    ld      c,0;ld      d,0
 227+ 0000                                      ENDM
 228+ 0000
 229+ 0000              ; Adds speed (8 bit) to vertex (24 bit signed)
 230+ 0000              AddSpeedToVert:         MACRO   vertex
 231+ 0000 ~                                    ld      de,(vertex+1)
 232+ 0000 ~                                    ld      a,(vertex)
 233+ 0000 ~                                    ld      l,a
 234+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 235+ 0000 ~                                    ld      a,l
 236+ 0000 ~                                    ld      (vertex),a
 237+ 0000 ~                                    ld      (vertex+1),de
 238+ 0000                                      ENDM
# file closed: ../../Macros/MathsMacros.asm
  38  0000                                      INCLUDE "../../Macros/MMUMacros.asm"
# file opened: ../../Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectKeyboard:   MACRO
  15+ 0000 ~                                 nextreg KeyboardMMU,       BankKeyboard
  16+ 0000                                   ENDM
  17+ 0000
  18+ 0000              MMUSelectSpriteBank: MACRO
  19+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectConsoleBank: MACRO
  23+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer1: 	 MACRO
  27+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectLayer2: 	 MACRO
  31+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectResetUniv:  MACRO
  35+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  36+ 0000                                   ENDM
  37+ 0000
  38+ 0000              MMUSelectShipARead:  MACRO
  39+ 0000 ~                                 add    a,BankUNIVDATA0
  40+ 0000 ~                                 nextreg ShipReadMMU,       a
  41+ 0000                                   ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBank1:  MACRO
  44+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  45+ 0000              					 ENDM
  46+ 0000              MMUSelectShipBank2:  MACRO
  47+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  48+ 0000              					 ENDM
  49+ 0000              MMUSelectShipBank3:  MACRO
  50+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  51+ 0000              					 ENDM
  52+ 0000              MMUSelectShipBank4:  MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankA   MACRO
  57+ 0000 ~            					 nextreg ShipModelMMU,	    a
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectShipBankN:  MACRO value
  61+ 0000 ~            					 nextreg ShipModelMMU,	    value
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectCommander:	 MACRO
  65+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectStockTable: MACRO
  69+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcA:    MACRO
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectCpySrcN:    MACRO value
  77+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectSun:        MACRO
  81+ 0000 ~                                 nextreg SunMMU,            BankSunData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectPlanet:     MACRO
  85+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  86+ 0000                                   ENDM
  87+ 0000
  88+ 0000              MMUSelectUniverseA:  MACRO
  89+ 0000 ~                                 add    a,BankUNIVDATA0
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  93+ 0000              MMUSelectUnivBankA:  MACRO
  94+ 0000 ~                                 nextreg UniverseMMU,       a
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectUniverseN:  MACRO value
  98+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectSpaceStation: MACRO
 102+ 0000 ~                                 nextreg SpaceStationMMU,   BankSpaceStationData
 103+ 0000                                   ENDM
 104+ 0000
 105+ 0000              MMUSelectMathsBankedFns   MACRO
 106+ 0000 ~                                 nextreg MathsBankedFnsMMU, BankMathsBankedFns
 107+ 0000                                   ENDM
 108+ 0000
 109+ 0000              MMUSelectGalaxyA:    MACRO
 110+ 0000 ~                                 nextreg GalaxyDataMMU,     a
 111+ 0000                                   ENDM
 112+ 0000
 113+ 0000              MMUSelectGalaxyN:    MACRO value
 114+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 115+ 0000                                   ENDM
 116+ 0000              MMUSelectGalaxyACopy:MACRO
 117+ 0000 ~                                 nextreg UniverseMMU,       a
 118+ 0000                                   ENDM
 119+ 0000
 120+ 0000              MMUSelectUniverseAbs:MACRO value
 121+ 0000 ~                                 nextreg UniverseMMU,       value
 122+ 0000                                   ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuGalCht: MACRO
 125+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuShrCht: MACRO
 129+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuInvent: MACRO
 133+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectMenuSystem: MACRO
 137+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectMenuMarket: MACRO
 141+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectMenuStatus: MACRO
 145+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 146+ 0000              					 ENDM
 147+ 0000
 148+ 0000              MMUSelectViewFront:  MACRO
 149+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 150+ 0000              					 ENDM
 151+ 0000
 152+ 0000              MMUSelectScreenA:    MACRO
 153+ 0000 ~                                 nextreg ScreenBankMMU,		a
 154+ 0000              					 ENDM
 155+ 0000
 156+ 0000              MMUSelectSound:      MACRO
 157+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 158+ 0000              					 ENDM
 159+ 0000
 160+ 0000
 161+ 0000
 162+ 0000              SaveMMU6:           MACRO
 163+ 0000 ~                                GetNextReg  MMU_SLOT_6_REGISTER
 164+ 0000 ~                                ld      (SavedMMU6),a
 165+ 0000                                  ENDM
 166+ 0000
 167+ 0000              RestoreMMU6:        MACRO
 168+ 0000 ~                                ld      a,(SavedMMU6)               ; now restore up post interrupt
 169+ 0000 ~                                nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 170+ 0000                                  ENDM
 171+ 0000
 172+ 0000              SaveMMU7:           MACRO
 173+ 0000 ~                                GetNextReg  MMU_SLOT_7_REGISTER
 174+ 0000 ~                                ld      (SavedMMU7),a
 175+ 0000                                  ENDM
 176+ 0000
 177+ 0000              RestoreMMU7:        MACRO
 178+ 0000 ~                                ld      a,(SavedMMU7)               ; now restore up post interrupt
 179+ 0000 ~                                nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 180+ 0000                                  ENDM
# file closed: ../../Macros/MMUMacros.asm
  39  0000                                      INCLUDE "../../Macros/NegateMacros.asm"
# file opened: ../../Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              macronegate16hl:	MACRO
   3+ 0000 ~            					xor 	a
   4+ 0000 ~            					sub 	l
   5+ 0000 ~            					ld 		l,a
   6+ 0000 ~            					sbc 	a,a
   7+ 0000 ~            					sub 	h
   8+ 0000 ~            					ld 		h,a
   9+ 0000              					ENDM
  10+ 0000
  11+ 0000
  12+ 0000              macroAbsHL:         MACRO
  13+ 0000 ~                                bit     7,h
  14+ 0000 ~                                jp      z,.alreadyABS
  15+ 0000 ~            					xor 	a
  16+ 0000 ~            					sub 	l
  17+ 0000 ~            					ld 		l,a
  18+ 0000 ~            					sbc 	a,a
  19+ 0000 ~            					sub 	h
  20+ 0000 ~            					ld 		h,a
  21+ 0000 ~            .alreadyABS:
  22+ 0000                                  ENDM
  23+ 0000
  24+ 0000              macronegate16de:	MACRO
  25+ 0000 ~            					xor 	a
  26+ 0000 ~                                sub 	e
  27+ 0000 ~                                ld 		e,a
  28+ 0000 ~                                sbc 	a,a
  29+ 0000 ~                                sub 	d
  30+ 0000 ~                                ld 		d,a
  31+ 0000              					ENDM
  32+ 0000
  33+ 0000              macronegate16bc:	MACRO
  34+ 0000 ~            					xor 	a
  35+ 0000 ~                                sub 	c
  36+ 0000 ~                                ld 		c,a
  37+ 0000 ~                                sbc 	a,a
  38+ 0000 ~                                sub 	b
  39+ 0000 ~                                ld 		b,a
  40+ 0000              					ENDM
  41+ 0000
  42+ 0000              macronegate16ix:	MACRO
  43+ 0000 ~            					xor 	a
  44+ 0000 ~                                sub 	ixl
  45+ 0000 ~                                ld 		ixl,a
  46+ 0000 ~                                sbc 	a,a
  47+ 0000 ~                                sub 	ixh
  48+ 0000 ~                                ld 		ixh,a
  49+ 0000              					ENDM
  50+ 0000
  51+ 0000
  52+ 0000              NegIY:			    MACRO
  53+ 0000 ~                                xor a
  54+ 0000 ~                                sub iyl
  55+ 0000 ~                                ld iyl,a
  56+ 0000 ~                                sbc a,a
  57+ 0000 ~                                sub iyh
  58+ 0000 ~                                ld iyh,a
  59+ 0000                                  ENDM
  60+ 0000
  61+ 0000              NegHL:			    MACRO
  62+ 0000 ~                                xor a
  63+ 0000 ~                                sub l
  64+ 0000 ~                                ld l,a
  65+ 0000 ~                                sbc a,a
  66+ 0000 ~                                sub h
  67+ 0000 ~                                ld h,a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000              NegDE:			    MACRO
  71+ 0000 ~                                xor a
  72+ 0000 ~                                sub e
  73+ 0000 ~                                ld e,a
  74+ 0000 ~                                sbc a,a
  75+ 0000 ~                                sub d
  76+ 0000 ~                                ld d,a
  77+ 0000                                  ENDM
  78+ 0000
  79+ 0000              NegBC:			    MACRO
  80+ 0000 ~                                xor a
  81+ 0000 ~                                sub c
  82+ 0000 ~                                ld c,a
  83+ 0000 ~                                sbc a,a
  84+ 0000 ~                                sub  b
  85+ 0000 ~                                ld b,a
  86+ 0000                                  ENDM
  87+ 0000
  88+ 0000              NegH                MACRO
  89+ 0000 ~                                ld      a,h
  90+ 0000 ~                                neg
  91+ 0000 ~                                ld      h,a
  92+ 0000                                  ENDM
  93+ 0000
  94+ 0000              NegD                MACRO
  95+ 0000 ~                                ld      a,d
  96+ 0000 ~                                neg
  97+ 0000 ~                                ld      d,a
  98+ 0000                                  ENDM
  99+ 0000
 100+ 0000              NegB                MACRO
 101+ 0000 ~                                ld      a,b
 102+ 0000 ~                                neg
 103+ 0000 ~                                ld      b,a
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ../../Macros/NegateMacros.asm
  40  0000                                      INCLUDE "../../Macros/returnMacros.asm"
# file opened: ../../Macros/returnMacros.asm
   1+ 0000              ReturnIfHLNegative:     MACRO   target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnIfDENegative:     MACRO   target
   7+ 0000 ~                                    bit     7,d
   8+ 0000 ~                                    ret     nz
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
  12+ 0000 ~                                    bit 	bitnbr,reg
  13+ 0000 ~                                    ret     nz
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  17+ 0000 ~                                    ld   a,(mem)
  18+ 0000 ~                                    bit 	bitnbr,a
  19+ 0000 ~                                    ret     nz
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    ret		z
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  28+ 0000 ~                                    ld     a,(mem)
  29+ 0000 ~                                    bit 	bitnbr,a
  30+ 0000 ~                                    ret		z
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ReturnIfMemFalse:       MACRO   mem
  34+ 0000 ~                                    ld      a,(mem)
  35+ 0000 ~                                    and     a
  36+ 0000 ~                                    ret     nz
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ReturnIfMemTrue:        MACRO   mem
  40+ 0000 ~                                    ld      a,(mem)
  41+ 0000 ~                                    and     a
  42+ 0000 ~                                    ret     z
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfAIsZero:        MACRO
  46+ 0000 ~                                    and     a
  47+ 0000 ~                                    ret     z
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              ReturnIfMemisZero:      MACRO mem
  51+ 0000 ~                                    ld   a,(mem)
  52+ 0000 ~                                    and a
  53+ 0000 ~                                    ret    z
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemIsNegative:  MACRO mem
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    and     $80
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  63+ 0000 ~                                    and     bitmask
  64+ 0000 ~                                    ret     z
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  68+ 0000 ~                                    and     bitmask
  69+ 0000 ~                                    ret     nz
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              ReturnIfMemEquN:        MACRO mem, value
  73+ 0000 ~                                    ld     a,(mem)
  74+ 0000 ~                                    cp     value
  75+ 0000 ~                                    ret    nz
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  79+ 0000 ~                                    ld   a,(mem)
  80+ 0000 ~                                    cp     value
  81+ 0000 ~                                    ret    z
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ReturnIfRegNotZero:     MACRO reg
  85+ 0000 ~                                    ld      a, reg
  86+ 0000 ~                                    and     a
  87+ 0000 ~                                    ret     nz
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ReturnIfANotZero:       MACRO
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret     nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfNotZero:        MACRO
  96+ 0000 ~                                    ret     nz
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfZero:           MACRO
 100+ 0000 ~                                    ret     z
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ReturnIfNegative:       MACRO
 104+ 0000 ~                                    ret     m
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000
 108+ 0000              ReturnIfMemNotZero:     MACRO mem
 109+ 0000 ~                                    ld     a,(mem)
 110+ 0000 ~                                    and     a
 111+ 0000 ~                                    ret    nz
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ReturnIfAGTEusng:       MACRO value
 115+ 0000 ~                                    cp    value
 116+ 0000 ~                                    ret	 nc
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 120+ 0000 ~                                    ld      a,reg
 121+ 0000 ~                                    cp      value
 122+ 0000 ~                                    ret	    c
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfALTNusng:       MACRO value
 126+ 0000 ~                                    cp    value
 127+ 0000 ~                                    ret	 c
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ReturnIfAGTENusng:      MACRO value
 131+ 0000 ~                                    cp    value
 132+ 0000 ~                                    ret	 nc
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ReturnIfAGTEMemusng:    MACRO value
 136+ 0000 ~                                    ld      hl,value
 137+ 0000 ~                                    cp      (hl)
 138+ 0000 ~                                    ret	    nc
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              ReturnIfANENusng:       MACRO value
 142+ 0000 ~                                    cp      value
 143+ 0000 ~                                    ret     nz
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              ReturnIfAEqNusng:       MACRO value
 147+ 0000 ~                                    cp      value
 148+ 0000 ~                                    ret     z
 149+ 0000                                      ENDM
 150+ 0000
# file closed: ../../Macros/returnMacros.asm
  41  0000                                      INCLUDE "../../Macros/ShiftMacros.asm"
# file opened: ../../Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftIXRight1: MACRO
  11+ 0000 ~            			   ld 	a,ixh
  12+ 0000 ~            			   srl 	a
  13+ 0000 ~            			   ld	ixh,a
  14+ 0000 ~            			   ld 	a,ixl
  15+ 0000 ~            			   rra
  16+ 0000 ~            			   ld	ixl,a
  17+ 0000              			   ENDM
  18+ 0000
  19+ 0000              ShiftIXhHLRight1: MACRO
  20+ 0000 ~                           ld  a,ixh
  21+ 0000 ~                           srl a
  22+ 0000 ~                           ld  ixh,a
  23+ 0000 ~            			   rr  h
  24+ 0000 ~            			   rr  l
  25+ 0000              			   ENDM
  26+ 0000
  27+ 0000              ShiftIYhDERight1: MACRO
  28+ 0000 ~                           ld  a,iyh
  29+ 0000 ~                           srl a
  30+ 0000 ~                           ld  iyh,a
  31+ 0000 ~                           rr  d
  32+ 0000 ~            			   rr  e
  33+ 0000              			   ENDM
  34+ 0000
  35+ 0000              ShiftIYlBCRight1: MACRO
  36+ 0000 ~                           ld  a,iyl
  37+ 0000 ~                           srl a
  38+ 0000 ~                           ld  iyl,a
  39+ 0000 ~            			   rr  b
  40+ 0000 ~                           rr  c
  41+ 0000              			   ENDM
  42+ 0000
  43+ 0000              ShiftIXlBCRight1: MACRO
  44+ 0000 ~                           ld  a,ixl
  45+ 0000 ~                           srl a
  46+ 0000 ~                           ld  ixl,a
  47+ 0000 ~            			   rr  b
  48+ 0000 ~                           rr  c
  49+ 0000              			   ENDM
  50+ 0000
  51+ 0000              ShiftHLRight1: MACRO
  52+ 0000 ~            			   srl h
  53+ 0000 ~            			   rr  l
  54+ 0000              			   ENDM
  55+ 0000
  56+ 0000              ShiftDERight1: MACRO
  57+ 0000 ~            			   srl d
  58+ 0000 ~            			   rr  e
  59+ 0000              			   ENDM
  60+ 0000
  61+ 0000              ShiftBCRight1: MACRO
  62+ 0000 ~            			   srl b
  63+ 0000 ~            			   rr  c
  64+ 0000              			   ENDM
  65+ 0000
  66+ 0000
  67+ 0000
  68+ 0000              ShiftHLDiv8:   MACRO
  69+ 0000 ~            			   srl h
  70+ 0000 ~            			   rr  l
  71+ 0000 ~            			   srl h
  72+ 0000 ~            			   rr  l
  73+ 0000 ~            			   srl h
  74+ 0000 ~            			   rr  l
  75+ 0000              			   ENDM
  76+ 0000
  77+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  78+ 0000 ~            			   sla l
  79+ 0000 ~            			   rl  h
  80+ 0000              			   ENDM
  81+ 0000
  82+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  83+ 0000 ~            			   sla e
  84+ 0000 ~            			   rl  d
  85+ 0000              			   ENDM
  86+ 0000
  87+ 0000              BarrelHLLeft3: MACRO
  88+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  89+ 0000 ~                           push     bc      ; 10
  90+ 0000 ~                           ld       b,3     ; 7
  91+ 0000 ~                           bsrl     de,b    ; 8
  92+ 0000 ~                           pop      bc      ; 10
  93+ 0000 ~                           ex       de,hl   ; 4
  94+ 0000                             ENDM
  95+ 0000
  96+ 0000              BarrelHLRight3: MACRO
  97+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  98+ 0000 ~                           push     bc      ; 10
  99+ 0000 ~                           ld       b,3     ; 7
 100+ 0000 ~                           bsrl     de,b    ; 8
 101+ 0000 ~                           pop      bc      ; 10
 102+ 0000 ~                           ex       de,hl   ; 4
 103+ 0000                             ENDM
 104+ 0000
 105+ 0000              RollBCLeft1:   MACRO	; 16 T states
 106+ 0000 ~                           rl  c
 107+ 0000 ~                           rl  b
 108+ 0000                             ENDM
 109+ 0000
 110+ 0000              RollDELeft1:   MACRO	; 16 T states
 111+ 0000 ~                           rl  e
 112+ 0000 ~                           rl  d
 113+ 0000                             ENDM
 114+ 0000
 115+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
 116+ 0000 ~            			   sla c
 117+ 0000 ~            			   rl  b
 118+ 0000              			   ENDM
 119+ 0000
 120+ 0000              ShiftLeftMem:       MACRO   reg
 121+ 0000 ~                                ld      hl,reg
 122+ 0000 ~                                sla     (hl)
 123+ 0000                                  ENDM
 124+ 0000
 125+ 0000
 126+ 0000
 127+ 0000              ShiftMem16Right1:   MACRO memaddr
 128+ 0000 ~                                ld    hl,(memaddr)
 129+ 0000 ~                                srl   h
 130+ 0000 ~                                rr    l
 131+ 0000 ~                                ld    (memaddr),hl
 132+ 0000                                  ENDM
 133+ 0000
 134+ 0000              ShiftMem8Right1:    MACRO memaddr
 135+ 0000 ~                                ld      a,(memaddr)
 136+ 0000 ~                                srl     a
 137+ 0000 ~                                ld      (memaddr),a
 138+ 0000                                  ENDM
 139+ 0000
 140+ 0000
 141+ 0000              ShiftMem8Left1A:    MACRO memaddr
 142+ 0000 ~                                ld      a,(memaddr)
 143+ 0000 ~                                sla     a
 144+ 0000 ~                                ld      (memaddr),a
 145+ 0000                                  ENDM
 146+ 0000
# file closed: ../../Macros/ShiftMacros.asm
  42  0000                                      INCLUDE "../../Macros/signBitMacros.asm"
# file opened: ../../Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ../../Macros/signBitMacros.asm
  43  0000                                      INCLUDE "../../Macros/KeyboardMacros.asm"
# file opened: ../../Macros/KeyboardMacros.asm
   1+ 0000              MacroIsKeyPressed:      MACRO C_Pressed_keycode
   2+ 0000 ~                                    ld      a,C_Pressed_keycode
   3+ 0000 ~                                    MMUSelectKeyboard
   4+ 0000 ~                                    call    is_key_pressed
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              MacroInitkeyboard:      MACRO
   8+ 0000 ~                                    MMUSelectKeyboard
   9+ 0000 ~                                    call    init_keyboard
  10+ 0000                                      ENDM
  11+ 0000
# file closed: ../../Macros/KeyboardMacros.asm
  44  0000                                      INCLUDE "../../Universe/UniverseMacros/asm_linedraw.asm"
# file opened: ../../Universe/UniverseMacros/asm_linedraw.asm
   1+ 0000              ClippingVarsMacro:   MACRO   prefix1?
   2+ 0000 ~            ;-- Clipping code for universe objects -------------------------------------------
   3+ 0000 ~            prefix1?_XX13        DB 0
   4+ 0000 ~
   5+ 0000 ~
   6+ 0000 ~            prefix1?_varK3		 DS	4				; D2
   7+ 0000 ~            prefix1?_centreX     equ prefix1?_varK3
   8+ 0000 ~            prefix1?_varK3p2	 DB	0				; 42
   9+ 0000 ~            prefix1?_varK3p3	 DB	0				; 43
  10+ 0000 ~            prefix1?_varK3p1	 equ prefix1?_varK3+1			; D3
  11+ 0000 ~            prefix1?_varK4		 DS	4				; E0
  12+ 0000 ~            prefix1?_centreY     equ prefix1?_varK4
  13+ 0000 ~            prefix1?_varK4p1	 equ prefix1?_varK4+1			; D3
  14+ 0000 ~            prefix1?_varK5       DS  6
  15+ 0000 ~            prefix1?_varK5p2     equ prefix1?_varK5+2
  16+ 0000 ~            prefix1?_varK6       DS  6
  17+ 0000 ~            prefix1?_varK6p2     equ prefix1?_varK6+2
  18+ 0000 ~
  19+ 0000 ~            prefix1?_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  20+ 0000 ~            prefix1?_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  21+ 0000 ~            prefix1?_XX12p4      DB 0
  22+ 0000 ~            prefix1?_XX12p5      DB 0
  23+ 0000 ~            prefix1?_Delta_x     EQU prefix1?_XX12p2
  24+ 0000 ~            prefix1?_Delta_y     EQU prefix1?_XX12p4
  25+ 0000 ~            prefix1?_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  26+ 0000 ~            prefix1?_Qvar        DB 0
  27+ 0000 ~            prefix1?_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  28+ 0000 ~            prefix1?_Svar        DB 0    ; sign variable
  29+ 0000 ~            prefix1?_SRvarPair   EQU prefix1?_Rvar
  30+ 0000 ~            prefix1?_Xreg        DB 0
  31+ 0000 ~            prefix1?_Yreg        DB 0
  32+ 0000 ~            prefix1?_YXregPair   EQU prefix1?_Xreg
  33+ 0000                                   ENDM
  34+ 0000
  35+ 0000              ;-- Name: LL28 Calculate R = 256 * A / Q
  36+ 0000              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  37+ 0000              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  38+ 0000              ;   Reg mapping 6502  Z80
  39+ 0000              ;               a     a
  40+ 0000              ;               b     x
  41+ 0000              ;               c     q
  42+ 0000              ;               d     r
  43+ 0000              ;
  44+ 0000              ClippingCodeLL28Macro:      MACRO   prefix1?
  45+ 0000 ~            prefix1?_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  46+ 0000 ~                                        ld      c,(hl)                  ; using c as Q var
  47+ 0000 ~                                        cp      c
  48+ 0000 ~                                        FlipCarryFlag
  49+ 0000 ~                                        jp      c, prefix1?_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
  50+ 0000 ~                                        ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  51+ 0000 ~            prefix1?_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
  52+ 0000 ~                                        jp      c, prefix1?_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  53+ 0000 ~                                        FlipCarryFlag                   ;                          If A < N, then C flag is set.
  54+ 0000 ~                                        JumpIfALTNusng c, prefix1?_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  55+ 0000 ~                                                                            ; BCC P%+4
  56+ 0000 ~                                        sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  57+ 0000 ~                                        ClearCarryFlag
  58+ 0000 ~            prefix1?_LL31_SKIPSUB_6502:  FlipCarryFlag
  59+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  60+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  61+ 0000 ~                                        ld      a,b
  62+ 0000 ~                                        ld      (Rvar),a
  63+ 0000 ~                                        ret                             ; RTS                    \ R left with remainder of division
  64+ 0000 ~            prefix1?_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  65+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  66+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  67+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  68+ 0000 ~                                        ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  69+ 0000 ~                                        ld      (Rvar),a                ; .
  70+ 0000 ~                                        ret                             ; .                      \ remainder of the division
  71+ 0000 ~            prefix1?_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  72+ 0000 ~                                        ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  73+ 0000 ~                                        SetCarryFlag                    ; we failed so need carry flag set
  74+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
  75+ 0000 ~
  76+ 0000 ~            prefix1?_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
  77+ 0000 ~                                        ld      c,a
  78+ 0000 ~                                        ld      b,0
  79+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  80+ 0000 ~                                        ClearCarryFlag
  81+ 0000 ~                                        adc     hl,bc
  82+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  83+ 0000 ~                                        ret
  84+ 0000 ~
  85+ 0000 ~            prefix1?_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
  86+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  87+ 0000 ~                                        ClearCarryFlag
  88+ 0000 ~                                        adc     hl,bc
  89+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  90+ 0000 ~                                        ret
  91+ 0000 ~
  92+ 0000 ~            prefix1?_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
  93+ 0000 ~                                        ld      hl,(prefix1?_XX1510)
  94+ 0000 ~                                        ClearCarryFlag
  95+ 0000 ~                                        adc     hl,bc
  96+ 0000 ~                                        ld      (prefix1?_XX1510),hl
  97+ 0000 ~                                        ret
  98+ 0000 ~
  99+ 0000 ~            prefix1?_SUBBCFromY1:       ld      hl,(prefix1?_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 100+ 0000 ~                                        ClearCarryFlag
 101+ 0000 ~                                        sbc     hl,bc
 102+ 0000 ~                                        ld      (SRvarPair),hl
 103+ 0000 ~                                        ret
 104+ 0000 ~
 105+ 0000 ~            prefix1?_AddSRToYX:         ld      hl,(YXregPair)
 106+ 0000 ~                                        ld      de,(SRvarPair)
 107+ 0000 ~                                        ClearCarryFlag
 108+ 0000 ~                                        adc     hl,de
 109+ 0000 ~                                        ld      (YXregPair),hl
 110+ 0000 ~                                        ret
 111+ 0000 ~
 112+ 0000 ~            prefix1?_ClampX:            ld      a,h
 113+ 0000 ~                                        and     a
 114+ 0000 ~                                        ld      a,l
 115+ 0000 ~                                        ret     z
 116+ 0000 ~                                        jp      p,.Max255
 117+ 0000 ~            .ClampXMin0:                ZeroA
 118+ 0000 ~                                        ret
 119+ 0000 ~            .Max255:                    ld      a,$FF
 120+ 0000 ~                                        ret
 121+ 0000 ~
 122+ 0000 ~            prefix1?_ClampY:            ld      a,h
 123+ 0000 ~                                        and     a
 124+ 0000 ~                                        jp      z,.ClampYlo
 125+ 0000 ~                                        jp      p,.Max127
 126+ 0000 ~            .ClampYMin0:                ZeroA
 127+ 0000 ~                                        ret
 128+ 0000 ~            .Max127:                    ld      a,127
 129+ 0000 ~                                        ret
 130+ 0000 ~            .ClampYlo:                  ld      a,l
 131+ 0000 ~                                        and     a
 132+ 0000 ~                                        ret     p
 133+ 0000 ~                                        ld      a,127
 134+ 0000 ~                                        ret
 135+ 0000                                          ENDM
 136+ 0000              ;-- Rountes to code:
 137+ 0000              ;-- LL118
 138+ 0000              ;-- LL120   Done
 139+ 0000              ;-- LL129   Done
 140+ 0000              ;-- LL123   Done
 141+ 0000                             ; NOTE DOES ABS ONLY
 142+ 0000
 143+ 0000
 144+ 0000                              ;--- LL118 Move along a point until on screen
 145+ 0000              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 146+ 0000              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 147+ 0000              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 148+ 0000              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 149+ 0000              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 150+ 0000              ;  Out  XX150               x1 as an 8-bit coordinate
 151+ 0000              ;       XX152               y1 as an 8-bit coordinate
 152+ 0000              ;----------------------------------------------------------------------------------------------------------------
 153+ 0000
 154+ 0000
 155+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 156+ 0000              ;--  Calculate the following:
 157+ 0000              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 158+ 0000              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 159+ 0000              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 160+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 161+ 0000              ClippingCodeLL120Macro:     MACRO   prefix1?
 162+ 0000 ~            prefix1?_LL120_6502:        ld      a,(prefix1?_XX1510)              ;LDA XX15               \ Set R = x1_lo
 163+ 0000 ~                                        ld      (Rvar),a                ;STA R
 164+ 0000 ~                                        call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 165+ 0000 ~                                        push    af                      ;PHA                    \ Store A on the stack so we can use it later
 166+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 167+ 0000 ~                                        ld      a,(Tvar)                ; .
 168+ 0000 ~                                        ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 169+ 0000 ~                                        and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 170+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 171+ 0000 ~                                        jr      nz,prefix1?_LL121_6502           ;.
 172+ 0000 ~            ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 173+ 0000 ~            prefix1?_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 174+ 0000 ~
 175+ 0000 ~                                        IFDEF DEBUG_LL122_DIRECT"
 176+ 0000 ~                                              DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 177+ 0000 ~                                              push    af
 178+ 0000 ~                                        ENDIF
 179+ 0000 ~                                        ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 180+ 0000 ~                                        ld      (Yreg),a                ;TAY
 181+ 0000 ~                                        ld      hl,Svar
 182+ 0000 ~                                        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 183+ 0000 ~                                        ShiftBCRight1                   ;ROR R                  \ into the C flag
 184+ 0000 ~                                        ld      (SRvarPair),bc
 185+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 186+ 0000 ~                                        sla     (hl)                    ;.
 187+ 0000 ~                                        jr      nc, prefix1?_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 188+ 0000 ~            ; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 189+ 0000 ~            prefix1?_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 190+ 0000 ~            prefix1?_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 191+ 0000 ~                                        ShiftBCRight1                   ;ROR R
 192+ 0000 ~                                        ld      (SRvarPair),bc          ;.
 193+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 194+ 0000 ~                                        sla     (hl)                    ;.
 195+ 0000 ~                                        jr      c,prefix1?_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 196+ 0000 ~                                        jr      nz,prefix1?_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 197+ 0000 ~                                        pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 198+ 0000 ~                                        and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 199+ 0000 ~                                        jp      p,prefix1?_LL133_6502            ;.
 200+ 0000 ~                                        ;.. return from the subroutine using a tail call
 201+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 202+ 0000                                  ENDM
 203+ 0000              ;----------------------------------------------------------------------------------------------------------------------------
 204+ 0000              ;-- Calculate the following:
 205+ 0000              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 206+ 0000              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 207+ 0000              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 208+ 0000              ClippingCodeLL122Macro:      MACRO   prefix1?
 209+ 0000 ~            prefix1?_LL123_6502:         call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 210+ 0000 ~                                         push    af                      ;PHA                    \ Store A on the stack so we can use it later
 211+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 212+ 0000 ~                                         ld      a,(Tvar)                ; .
 213+ 0000 ~                                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 214+ 0000 ~                                         and     a                       ;.
 215+ 0000 ~            ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 216+ 0000 ~                                         jr      nz,prefix1?_LL122_6502           ;.
 217+ 0000 ~            ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 218+ 0000 ~            prefix1?_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 219+ 0000 ~                                         ld      (Yreg),a                ;TAY
 220+ 0000 ~                                         sla     a                       ;ASL A                  \ Set X = %11111110
 221+ 0000 ~                                         ld      (Xreg),a                ;TAX
 222+ 0000 ~            ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 223+ 0000 ~            prefix1?_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 224+ 0000 ~                                        ShiftBCLeft1                    ;.
 225+ 0000 ~                                        ld      (SRvarPair),bc          ;ROL S
 226+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Set A = S
 227+ 0000 ~                                        jr      c, prefix1?_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 228+ 0000 ~                                        ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 229+ 0000 ~                                        cp      (hl)
 230+ 0000 ~                                        FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 231+ 0000 ~                                        jr      nc,prefix1?_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 232+ 0000 ~            prefix1?_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 233+ 0000 ~                                        sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 234+ 0000 ~                                        ld      (Svar),a                ;STA S
 235+ 0000 ~                                        ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 236+ 0000 ~                                        ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 237+ 0000 ~                                        sbc     0                       ;SBC #0
 238+ 0000 ~                                        ld      (Rvar),a                ;STA R
 239+ 0000 ~                                        SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 240+ 0000 ~                                        jp      prefix1?_LL132_6502              ;added so that we can do a 6502 style carry above
 241+ 0000 ~            prefix1?_LL132A_6502:        nop; FlipCarryFlag
 242+ 0000 ~            prefix1?_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 243+ 0000 ~                                        RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 244+ 0000 ~                                        ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 245+ 0000 ~                                        jr      c, prefix1?_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 246+ 0000 ~                    IFDEF DEBUG_LL121_DIRECT
 247+ 0000 ~                          DISPLAY "DIRECT CALL TO LL121 so dummy push"
 248+ 0000 ~                                        push    af
 249+ 0000 ~                    ENDIF
 250+ 0000 ~                                        pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 251+ 0000 ~                                        and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 252+ 0000 ~                                        jp      m, prefix1?_LL128_6502           ; .                      \ subroutine with (Y X) as is
 253+ 0000 ~            prefix1?_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 254+ 0000 ~                                        macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 255+ 0000 ~                                        ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 256+ 0000 ~            prefix1?_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 257+ 0000 ~            ;-------------------------------------------------------------------------------------------------------
 258+ 0000 ~            ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 259+ 0000 ~            ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 260+ 0000 ~            prefix1?_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 261+ 0000 ~                                        ld      a,(prefix1?_XX12p2)              ;.
 262+ 0000 ~                                        ld      (Xreg),a                ;.
 263+ 0000 ~                                        ld      (Qvar),a                ;STX Q
 264+ 0000 ~                                        pop     af                      ;.
 265+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 266+ 0000 ~                                        and     a                       ;BPL LL127
 267+ 0000 ~                                        jp      p,prefix1?_LL127_6502            ;.
 268+ 0000 ~                                        ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 269+ 0000 ~                                        ClearCarryFlag                  ;SEC
 270+ 0000 ~                                        ld      hl, Rvar                ;SBC R
 271+ 0000 ~                                        sbc     (hl)                    ;.
 272+ 0000 ~                                        ld      (Rvar),a                ;STA R
 273+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 274+ 0000 ~                                        push    af                      ;PHA
 275+ 0000 ~                                        xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 276+ 0000 ~                                        adc     0                       ;ADC #0
 277+ 0000 ~                                        ld      (Svar),a                ;STA S
 278+ 0000 ~                                        pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 279+ 0000 ~            prefix1?_LL127_6502:        ld      hl,prefix1?_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 280+ 0000 ~                                        xor     (hl)                    ;.
 281+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 282+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 283+ 0000 ~            ;--- LL118 Move along a point until on screen
 284+ 0000 ~            ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 285+ 0000 ~            ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 286+ 0000 ~            ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 287+ 0000 ~            ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 288+ 0000 ~            ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 289+ 0000 ~            ;  Out  XX150               x1 as an 8-bit coordinate
 290+ 0000 ~            ;       XX152               y1 as an 8-bit coordinate
 291+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 292+ 0000 ~
 293+ 0000 ~            prefix1?_LL118_6502:         ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 294+ 0000 ~                                        and     a                       ; BPL LL119              \ .
 295+ 0000 ~                                        jp      p, prefix1?_LL119_6502           ;                        \ following
 296+ 0000 ~            .X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 297+ 0000 ~                                        call    prefix1?_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 298+ 0000 ~                                                                ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 299+ 0000 ~                                                                ; with the sign of (Y X) set to the opposite of the line's direction of slope
 300+ 0000 ~                                        call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 301+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; .
 302+ 0000 ~                                        ld      hl,0                    ; Set x1 = 0
 303+ 0000 ~                                        ld      (prefix1?_XX1510),hl             ; .
 304+ 0000 ~                                        ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 305+ 0000 ~                                        ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 306+ 0000 ~                                        jp      prefix1?_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 307+ 0000 ~            ;-- Entering LL119 a will always be the value of X1 Hi byte
 308+ 0000 ~            prefix1?_LL119_6502:         jp      z,prefix1?_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 309+ 0000 ~                                                                        ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 310+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 311+ 0000 ~                                        dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 312+ 0000 ~                                        ld      (Svar),a                ;
 313+ 0000 ~                                        call    prefix1?_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 314+ 0000 ~                                                                        ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 315+ 0000 ~                                                                        ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 316+ 0000 ~                                        call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 317+ 0000 ~                                        ld      hl,255                  ; LDX #255               \ Set x1 = 255
 318+ 0000 ~                                        ld      ( prefix1?_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 319+ 0000 ~            ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 320+ 0000 ~            prefix1?_LL134_6502:        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 321+ 0000 ~                                        and     a                       ; BPL LL135              \ the following
 322+ 0000 ~                                        jp      p, prefix1?_LL135_6502           ; .
 323+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 324+ 0000 ~                                        ld      a, ( prefix1?_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 325+ 0000 ~                                        ld      (Rvar),a                ; STA R
 326+ 0000 ~                                        call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 327+ 0000 ~                                                                        ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 328+ 0000 ~                                                                        ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 329+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 330+ 0000 ~                                        ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 331+ 0000 ~                                        ld      ( prefix1?_XX1532),hl             ; STA XX15+2, XX15+3
 332+ 0000 ~            prefix1?_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 333+ 0000 ~                                        call    SUBBCFromY1             ; .                      \ .
 334+ 0000 ~                                        jr      c, prefix1?_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 335+ 0000 ~                                                                ;                        \ to return from the subroutine, as we are done
 336+ 0000 ~            ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 337+ 0000 ~            prefix1?_LL139_6502:         call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 338+ 0000 ~            ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 339+ 0000 ~            ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 340+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 341+ 0000 ~                                        ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 342+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 343+ 0000 ~            prefix1?_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 344+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 345+ 0000 ~            ;-- LL145 LINE CLIP
 346+ 0000 ~            ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 347+ 0000 ~            ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 348+ 0000 ~            ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 349+ 0000 ~            ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 350+ 0000 ~            ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 351+ 0000 ~            ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 352+ 0000 ~            ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 353+ 0000 ~            ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 354+ 0000 ~            ; TODO treat horizonal/vert and single pixel as special cases
 355+ 0000                                  ENDM
 356+ 0000
 357+ 0000              ClippingCodeLL145Macro:     MACRO   prefix1?
 358+ 0000 ~            prefix1?_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 359+ 0000 ~                                        ld      (SWAP),a                ; STA SWAP
 360+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 361+ 0000 ~                                        ld      b,a                     ; .
 362+ 0000 ~            ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 363+ 0000 ~            ; for the screen coord we will use 127 though, we use c as a temporay X register
 364+ 0000 ~            prefix1?_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 365+ 0000 ~                                        ld      (Xreg),a                ; .
 366+ 0000 ~            ;                    ld      a,127
 367+ 0000 ~            ;                    ld      c,a
 368+ 0000 ~            .CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 369+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi    ; .
 370+ 0000 ~                                        or      (hl)                    ; .
 371+ 0000 ~                                        jp      nz,prefix1?_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 372+ 0000 ~            .CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 373+ 0000 ~                                        ld      hl,prefix1?_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 374+ 0000 ~                                        cp      (hl)                    ; .
 375+ 0000 ~                                        jp      c,prefix1?_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 376+ 0000 ~                                        ZeroA                           ; LDX #0                 \ Set X = 0
 377+ 0000 ~                                        ld      (Xreg),a
 378+ 0000 ~            prefix1?_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 379+ 0000 ~                                        ld      ( prefix1?_XX13),a      ; now c is released as a temporary x reg
 380+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 381+ 0000 ~                                        ld      hl,prefix1?_XX15Y1hi    ; ORA XX15+3             \ to LL83
 382+ 0000 ~                                        or      (hl)                    ; .
 383+ 0000 ~                                        jp      nz,prefix1?_LL83_6502            ; BNE LL83
 384+ 0000 ~            ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 385+ 0000 ~                                        ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 386+ 0000 ~                                        ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 387+ 0000 ~                                        cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 388+ 0000 ~                                        jp      nc, prefix1?_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 389+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 390+ 0000 ~                                        and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 391+ 0000 ~                                        jp      nz,prefix1?_LL108_6502
 392+ 0000 ~            ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 393+ 0000 ~            ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 394+ 0000 ~            ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 395+ 0000 ~            prefix1?_LL146_6502:        ld      hl,(prefix1?_XX15X1lo)           ;  Save X1 to XX1510
 396+ 0000 ~                                        call    prefix1?_ClampX
 397+ 0000 ~                                        ld      (prefix1?_XX15X1lo),a
 398+ 0000 ~                                        ld      hl,(prefix1?_XX15Y1lo)           ;  hl = y1
 399+ 0000 ~                                        call    prefix1?_ClampY
 400+ 0000 ~                                        ld      (prefix1?_XX1510+1),a            ;  XX1510... = [X1][Y1]
 401+ 0000 ~
 402+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)           ;  de = x2
 403+ 0000 ~                                        call    prefix1?_ClampX
 404+ 0000 ~                                        ld      (prefix1?_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 405+ 0000 ~
 406+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)           ;  bc = y2
 407+ 0000 ~                                        call    prefix1?_ClampY
 408+ 0000 ~                                        ld      (prefix1?_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 409+ 0000 ~                                        ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 410+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 411+ 0000 ~            prefix1?_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 412+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 413+ 0000 ~            prefix1?_LL108_6502:        ld      hl, prefix1?_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 414+ 0000 ~                                        srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 415+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 416+ 0000 ~            ;-- LL145 (Part 2 of 4)
 417+ 0000 ~            prefix1?_LL83_6502:         ld      a,( prefix1?_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 418+ 0000 ~                                        and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 419+ 0000 ~                                        jp      p,prefix1?_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 420+ 0000 ~            ;-- If we get here, both points are off-screen
 421+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 422+ 0000 ~                                        ld      hl,prefix1?_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 423+ 0000 ~                                        and     (hl)
 424+ 0000 ~                                        jp      m, prefix1?_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 425+ 0000 ~                                        ld      a,(prefix1?_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 426+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 427+ 0000 ~                                        and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 428+ 0000 ~                                        jp      m,prefix1?_LL109_6502            ; .
 429+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 430+ 0000 ~                                        dec     a                                ; DEX
 431+ 0000 ~                                        ld      (Xreg),a                         ; TXA
 432+ 0000 ~                                        push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 433+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; .
 434+ 0000 ~                                        dec     a                                ; DEX
 435+ 0000 ~                                        ld      (Xreg),a                         ; STX XX12+2
 436+ 0000 ~                                        pop     af                               ; .              SP+0    restore a register
 437+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 438+ 0000 ~                                        or      (hl)                             ; .
 439+ 0000 ~                                        jp      p, prefix1?_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 440+ 0000 ~            ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 441+ 0000 ~            ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 442+ 0000 ~            prefix1?_LL83_DEBUG:          ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 443+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 444+ 0000 ~                                        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 445+ 0000 ~                                        sbc     0                       ; SBC #0                 \ .
 446+ 0000 ~                                        ld      (prefix1?_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 447+ 0000 ~                                        ld      a,(prefix1?_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 448+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 449+ 0000 ~                                        ld      a,(prefix1?_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 450+ 0000 ~                                        sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 451+ 0000 ~                                        ld      hl,prefix1?_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 452+ 0000 ~                                        or      (hl)                    ; .
 453+ 0000 ~                                        jp      p,prefix1?_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 454+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 0000 ~            ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 456+ 0000 ~            prefix1?_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 457+ 0000 ~                                        push    af                      ; PHA            SP+1    \ call to this subroutine
 458+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 459+ 0000 ~                                        ld      de,(prefix1?_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 460+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+1
 461+ 0000 ~                                        sbc     hl,de                   ; .
 462+ 0000 ~                                        ld      (delta_x),hl            ; .
 463+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 464+ 0000 ~                                        ld      de,(prefix1?_XX15Y1lo)             ;
 465+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+2
 466+ 0000 ~                                        sbc     hl,de                   ; .
 467+ 0000 ~                                        ld      (delta_y),hl            ; .
 468+ 0000 ~            ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 469+ 0000 ~                                        ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 470+ 0000 ~                                        ld      hl,delta_x+1
 471+ 0000 ~                                        xor     (hl)
 472+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 473+ 0000 ~                                        ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 474+ 0000 ~                                        ld      a,h
 475+ 0000 ~                                        and     a
 476+ 0000 ~                                        jp      p, prefix1?_LL110_6502  ; BPL LL110              \ the following
 477+ 0000 ~                                        NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 478+ 0000 ~                                        ld      (delta_y),hl            ; positive, starting with the low bytes
 479+ 0000 ~            prefix1?_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 480+ 0000 ~                                        ld      a,h                     ; BPL LL111              \ the following
 481+ 0000 ~                                        and     a                       ; .
 482+ 0000 ~                                        jp      p,prefix1?_LL111_6502            ; .
 483+ 0000 ~                                        NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 484+ 0000 ~                                        ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 485+ 0000 ~            ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 486+ 0000 ~            prefix1?_LL111_6502:        ld      hl,(delta_x)
 487+ 0000 ~                                        ld      de,(delta_y)
 488+ 0000 ~                                        ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 489+ 0000 ~                                        or      d                       ; BNE LL112
 490+ 0000 ~                                        jp      z,prefix1?_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 491+ 0000 ~            prefix1?_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 492+ 0000 ~                                        ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 493+ 0000 ~                                        ld      (delta_x),hl
 494+ 0000 ~                                        ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 495+ 0000 ~                                        jp       prefix1?_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 496+ 0000 ~            ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 497+ 0000 ~            prefix1?_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 498+ 0000 ~                                        ld      (Tvar),a
 499+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 500+ 0000 ~                                        ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 501+ 0000 ~                                        cp      (hl)
 502+ 0000 ~                                        jp      c, prefix1?_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 503+ 0000 ~            ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 504+ 0000 ~                                        ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 505+ 0000 ~                                        ld      (Qvar),a                ; .
 506+ 0000 ~                                        ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 507+ 0000 ~                                        call    prefix1?_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 508+ 0000 ~                                        jp      prefix1?_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 509+ 0000 ~            ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 510+ 0000 ~            prefix1?_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 511+ 0000 ~                                        ld      (Qvar),a                ; STA Q
 512+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 513+ 0000 ~                                        call    prefix1?_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 514+ 0000 ~                                        ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 515+ 0000 ~                                        ld      (Tvar),a                ;                        \ line is steep
 516+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 517+ 0000 ~            ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 518+ 0000 ~            ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 519+ 0000 ~            ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 520+ 0000 ~            ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 521+ 0000 ~            prefix1?_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 522+ 0000 ~                                        ld      (prefix1?_XX12p2),a     ; STA XX12+2
 523+ 0000 ~                                        ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 524+ 0000 ~                                        ld      (prefix1?_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 525+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 526+ 0000 ~                                        cp      0                       ; BEQ LL138
 527+ 0000 ~                                        jp      z,prefix1?_LL138_6502            ; .
 528+ 0000 ~                                        jp      p, prefix1?_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 529+ 0000 ~            ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 530+ 0000 ~            prefix1?_LL138_6502:          call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 531+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 532+ 0000 ~                                        and     a
 533+ 0000 ~                                        jp      p,prefix1?_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 534+ 0000 ~            ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 535+ 0000 ~            prefix1?_LL117_6502:          ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 536+ 0000 ~                                        ld      hl,prefix1?_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 537+ 0000 ~                                        or      (hl)
 538+ 0000 ~                                        jp      nz, prefix1?_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 539+ 0000 ~                                        ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 540+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 541+ 0000 ~                                        jp      nc, prefix1?_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 542+ 0000 ~            ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 543+ 0000 ~            prefix1?_LLX117_6502:         ld      hl,( prefix1?_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 544+ 0000 ~                                        ld      de,( prefix1?_XX1554)
 545+ 0000 ~                                        ld      ( prefix1?_XX1510),de
 546+ 0000 ~                                        ld      ( prefix1?_XX1554),hl
 547+ 0000 ~                                        ld      hl,( prefix1?_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 548+ 0000 ~                                        ld      de,( prefix1?_XX1576)
 549+ 0000 ~                                        ld      ( prefix1?_XX1532),de
 550+ 0000 ~                                        ld      ( prefix1?_XX1576),hl
 551+ 0000 ~                                        call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 552+ 0000 ~                                        ld      hl,SWAP
 553+ 0000 ~                                        dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 554+ 0000 ~            prefix1?_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 555+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 556+ 0000 ~                                        call    prefix1?_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 557+ 0000 ~                                        ret                             ; then exit so we don't pop it twice
 558+ 0000 ~            prefix1?_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 559+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 560+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 561+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 562+ 0000 ~
 563+ 0000 ~
 564+ 0000 ~            prefix1?_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 565+ 0000 ~                                        ld      de, prefix1?_XX1510
 566+ 0000 ~                                        ld      bc,4*2
 567+ 0000 ~                                        ldir
 568+ 0000 ~                                        call    prefix1?_LL145_6502                      ; perform 6502 version
 569+ 0000 ~                                        ret     c                               ; returns if carry is set as its a no draw
 570+ 0000 ~            .CopyBackResults:           ld      hl,0
 571+ 0000 ~                                        ld      (x1),hl
 572+ 0000 ~                                        ld      (y1),hl
 573+ 0000 ~                                        ld      (x2),hl
 574+ 0000 ~                                        ld      (y2),hl
 575+ 0000 ~                                        ld      a,( prefix1?_XX1510)
 576+ 0000 ~                                        ld      (x1),a
 577+ 0000 ~                                        ld      c,a
 578+ 0000 ~                                        ld      a,( prefix1?_XX1510+1)
 579+ 0000 ~                                        ld      (y1),a
 580+ 0000 ~                                        ld      b,a
 581+ 0000 ~                                        ld      a,( prefix1?_XX1510+2)
 582+ 0000 ~                                        ld      (x2),a
 583+ 0000 ~                                        ld      e,a
 584+ 0000 ~                                        ld      a,( prefix1?_XX1510+3)
 585+ 0000 ~                                        ld      (y2),a
 586+ 0000 ~                                        ld      d,a
 587+ 0000 ~                                        ld      a,$FF
 588+ 0000 ~                                        ClearCarryFlag
 589+ 0000 ~                                        ret
 590+ 0000                      ENDM
# file closed: ../../Universe/UniverseMacros/asm_linedraw.asm
  45  0000                                      INCLUDE "../../Universe/UniverseMacros/UniverseVarsDefineMacro.asm"
# file opened: ../../Universe/UniverseMacros/UniverseVarsDefineMacro.asm
   1+ 0000              ; -- AI Core data
   2+ 0000              UnivCoreAIVarsMacro:        MACRO  prefix1?
   3+ 0000 ~            prefix1?_BnKRotXCounter             DB  0                       ; INWK +29
   4+ 0000 ~            prefix1?_BnKRotZCounter             DB  0                       ; INWK +30
   5+ 0000 ~            prefix1?_BnkCam0yLo                 DB  0                       ; INWK +33 ????
   6+ 0000 ~            prefix1?_BnkCam0yHi                 DB  0                       ; INWK +34?????
   7+ 0000 ~            prefix1?_BnKShipType                DB  0
   8+ 0000 ~
   9+ 0000 ~            ; Used to make 16 bit reads a little cleaner in source code
  10+ 0000 ~            prefix1?_BnKzPoint                  DS  3
  11+ 0000 ~            prefix1?_BnKzPointLo                equ prefix1?_BnKzPoint
  12+ 0000 ~            prefix1?_BnKzPointHi                equ prefix1?_BnKzPoint+1
  13+ 0000 ~            prefix1?_BnKzPointSign              equ prefix1?_BnKzPoint+2
  14+ 0000 ~
  15+ 0000 ~            ; Used for medridan drawing routines
  16+ 0000 ~            prefix1?_BnKCx                      DW  0
  17+ 0000 ~            prefix1?_BnKCxSign                  EQU prefix1?_BnKCx+1
  18+ 0000 ~            prefix1?_BnKCy                      DW  0
  19+ 0000 ~            prefix1?_BnKCySign                  EQU prefix1?_BnKCy+1
  20+ 0000 ~            prefix1?_BnKUx                      DW  0
  21+ 0000 ~            prefix1?_BnKUxSign                  EQU prefix1?_BnKUx+1
  22+ 0000 ~            prefix1?_BnKUy                      DW  0
  23+ 0000 ~            prefix1?_BnKUySign                  EQU prefix1?_BnKUy+1
  24+ 0000 ~            prefix1?_BnKVx                      DW  0
  25+ 0000 ~            prefix1?_BnKVxSign                  EQU prefix1?_BnKVx+1
  26+ 0000 ~            prefix1?_BnKVy                      DW  0
  27+ 0000 ~            prefix1?_BnKVySign                  EQU prefix1?_BnKVy+1
  28+ 0000 ~            prefix1?_BnKSinCNT2                 DB  0
  29+ 0000 ~            prefix1?_BnKSinCNT2Sign             DB  0
  30+ 0000 ~            prefix1?_BnKCosCNT2                 DB  0
  31+ 0000 ~            prefix1?_BnKCosCNT2Sign             DB  0
  32+ 0000 ~            prefix1?_BnKUxCos                   DB  0
  33+ 0000 ~            prefix1?_BnKUxCosSign               DB  0
  34+ 0000 ~            prefix1?_BnKUyCos                   DB  0
  35+ 0000 ~            prefix1?_BnKUyCosSign               DB  0
  36+ 0000 ~            prefix1?_BnKVxSin                   DB  0
  37+ 0000 ~            prefix1?_BnKVxSinSign               DB  0
  38+ 0000 ~            prefix1?_BnKVySin                   DB  0
  39+ 0000 ~            prefix1?_BnKVySinSign               DB  0
  40+ 0000 ~            prefix1?_BnKVxVySinSign             DB  0
  41+ 0000 ~            prefix1?_BnKUxUyCosSign             DB  0
  42+ 0000 ~            prefix1?_BnKUxCosAddVxSin           DW  0
  43+ 0000 ~            prefix1?_BnKUyCosSubVySin           DW  0
  44+ 0000 ~            prefix1?_BnKAngle                   DB  0
  45+ 0000 ~            s
  46+ 0000 ~
  47+ 0000 ~            ; General local variables used in universe object
  48+ 0000 ~            prefix1?_BnKTGT                     DB  0
  49+ 0000 ~            prefix1?_BnKSTP                     DB  0
  50+ 0000 ~            prefix1?_BnKLSP                     DS  50              ; move to planet or L2 code ?
  51+ 0000 ~            prefix1?_BnKCNT                     DB  0               ; 93
  52+ 0000 ~            prefix1?_BnKCNT2                    DB  0               ; 93
  53+ 0000 ~            ; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  54+ 0000 ~                IFDEF MERIDANLINEDEBUG
  55+ 0000 ~            prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  56+ 0000 ~            prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  57+ 0000 ~                ENDIF
  58+ 0000 ~            prefix1?_BnKPlotIndex               DB  0
  59+ 0000 ~                DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  60+ 0000 ~            prefix1?_BnKFlag					DB  0
  61+ 0000 ~
  62+ 0000 ~            ; Post clipping the results are now 8 bit
  63+ 0000 ~            prefix1?_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  64+ 0000 ~            prefix1?_BnKProjectedY              DB  0
  65+ 0000 ~            prefix1?_BnKProjectedX              DB  0
  66+ 0000 ~            prefix1?_BnKProjected               equ prefix1?_BnKProjectedY  ; resultant projected position
  67+ 0000 ~            prefix1?_XX15Save                   DS  8
  68+ 0000 ~            prefix1?_XX15Save2                  DS  8
  69+ 0000 ~            prefix1?_Radius                     DB  0
  70+ 0000 ~            ; Used when drawing curves for the end value from previous calls to BLINE
  71+ 0000 ~            ; held as 16 bit values pre clipping
  72+ 0000 ~            prefix1?_PrevXPos                   DW 0
  73+ 0000 ~            prefix1?_PrevYPos                   DW 0
  74+ 0000 ~            prefix1?_NewXPos                    DW 0
  75+ 0000 ~            prefix1?_NewYPos                    DW 0
  76+ 0000 ~
  77+ 0000 ~            ; Colouration
  78+ 0000 ~            ; For planets, Colour 1 is main colour, Colour 2 is outer rim
  79+ 0000 ~            ; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  80+ 0000 ~            prefix1?_Colour1                    DB 0
  81+ 0000 ~            prefix1?_Colour2                    DB 0
  82+ 0000 ~            prefix1?_Colour2Thickness           DB 0
  83+ 0000 ~
  84+ 0000 ~            ;        -- _pl(prf .. "Radius                     DW  0
  85+ 0000 ~            ;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  86+ 0000                                           ENDM
  87+ 0000
  88+ 0000              UnivPosVarsMacro:            MACRO  prefix1?
  89+ 0000 ~            prefix1?_BnKxlo                     DB  0                       ; INWK+0
  90+ 0000 ~            prefix1?_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  91+ 0000 ~            prefix1?_BnKxsgn                    DB  0                       ; INWK+2
  92+ 0000 ~            prefix1?_BnKylo                     DB  0                       ; INWK+3 \ ylo
  93+ 0000 ~            prefix1?_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  94+ 0000 ~            prefix1?_BnKysgn                    DB  0                       ; INWK +5
  95+ 0000 ~            prefix1?_BnKzlo                     DB  0                       ; INWK +6
  96+ 0000 ~            prefix1?_BnKzhi                     DB  0                       ; INWK +7
  97+ 0000 ~            prefix1?_BnKzsgn                    DB  0                       ; INWK +8
  98+ 0000 ~            prefix1?_CompassX                   DW  0
  99+ 0000 ~            prefix1?_CompassY                   DW  0
 100+ 0000 ~            prefix1?_BnKElipseCenterX           DW  0
 101+ 0000 ~            prefix1?_BnKElipseCenterY           DW  0
 102+ 0000 ~            prefix1?_BnKElipseRadiusU           DW  0
 103+ 0000 ~            prefix1?_BnKElipseRadiusV           DW  0
 104+ 0000                                          ENDM
 105+ 0000
 106+ 0000              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
 107+ 0000              ;-Rotation Matrix of Universe Object-----------------------------------------------------------------------------------------------
 108+ 0000              UnivRotationVarsMacro:      MACRO prefix1?
 109+ 0000 ~            prefix1?_BnKrotmatSidevX            DW  0                       ; INWK +21
 110+ 0000 ~            prefix1?_BnKrotmatSidev             equ prefix1?_BnKrotmatSidevX
 111+ 0000 ~            prefix1?_BnKrotmatSidevY            DW  0                       ; INWK +23
 112+ 0000 ~            prefix1?_BnKrotmatSidevZ            DW  0                       ; INWK +25
 113+ 0000 ~            prefix1?_BnKrotmatRoofvX            DW  0                       ; INWK +15
 114+ 0000 ~            prefix1?_BnKrotmatRoofv             equ prefix1?_BnKrotmatRoofvX
 115+ 0000 ~            prefix1?_BnKrotmatRoofvY            DW  0                       ; INWK +17
 116+ 0000 ~            prefix1?_BnKrotmatRoofvZ            DW  0                       ; INWK +19
 117+ 0000 ~            prefix1?_BnKrotmatNosevX            DW  0                       ; INWK +9
 118+ 0000 ~            prefix1?_BnKrotmatNosev             EQU prefix1?_BnKrotmatNosevX
 119+ 0000 ~            prefix1?_BnKrotmatNosevY            DW  0                       ; INWK +11
 120+ 0000 ~            prefix1?_BnKrotmatNosevZ            DW  0                       ; INWK +13
 121+ 0000                                          ENDM
 122+ 0000
 123+ 0000
 124+ 0000              XX15DefineMacro: MACRO   prefix1?
 125+ 0000 ~
 126+ 0000 ~            prefix1?_BnKXScaled                  DB  0               ; XX15+0Xscaled
 127+ 0000 ~            prefix1?_BnKXScaledSign              DB  0               ; XX15+1xsign
 128+ 0000 ~            prefix1?_BnKYScaled                  DB  0               ; XX15+2yscaled
 129+ 0000 ~            prefix1?_BnKYScaledSign              DB  0               ; XX15+3ysign
 130+ 0000 ~            prefix1?_BnKZScaled                  DB  0               ; XX15+4zscaled
 131+ 0000 ~            prefix1?_BnKZScaledSign              DB  0               ; XX15+5zsign
 132+ 0000 ~            prefix1?_XX1576                      DW  0    ; y2
 133+ 0000 ~
 134+ 0000 ~            prefix1?_XX15:                       equ prefix1?_BnKXScaled
 135+ 0000 ~            prefix1?_XX15VecX:                   equ prefix1?_XX15
 136+ 0000 ~            prefix1?_XX15VecY:                   equ prefix1?_XX15+1
 137+ 0000 ~            prefix1?_XX15VecZ:                   equ prefix1?_XX15+2
 138+ 0000 ~            prefix1?_BnKXPoint:                  equ prefix1?_XX15
 139+ 0000 ~            prefix1?_BnKXPointLo:                equ prefix1?_XX15+0
 140+ 0000 ~            prefix1?_BnKXPointHi:                equ prefix1?_XX15+1
 141+ 0000 ~            prefix1?_BnKXPointSign:              equ prefix1?_XX15+2
 142+ 0000 ~            prefix1?_BnKYPoint:                  equ prefix1?_XX15+3
 143+ 0000 ~            prefix1?_BnKYPointLo:                equ prefix1?_XX15+3
 144+ 0000 ~            prefix1?_BnKYPointHi:                equ prefix1?_XX15+4
 145+ 0000 ~            prefix1?_BnKYPointSign:              equ prefix1?_XX15+5
 146+ 0000 ~
 147+ 0000 ~            prefix1?_XX1510                      EQU prefix1?_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 148+ 0000 ~            prefix1?_XX1532                      EQU prefix1?_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 149+ 0000 ~            prefix1?_XX1554                      EQU prefix1?_BnKZScaled   ; x2
 150+ 0000 ~            prefix1?_XX1554p1                    EQU prefix1?_XX1554+1
 151+ 0000 ~            prefix1?_XX15X1lo                    EQU prefix1?_XX1510
 152+ 0000 ~            prefix1?_XX15X1hi                    EQU prefix1?_XX1510+1
 153+ 0000 ~            prefix1?_XX15Y1lo                    EQU prefix1?_XX1532
 154+ 0000 ~            prefix1?_XX15Y1hi                    EQU prefix1?_XX1532+1
 155+ 0000 ~            prefix1?_XX15X2lo                    EQU prefix1?_XX1554
 156+ 0000 ~            prefix1?_XX15X2hi                    EQU prefix1?_XX1554+1
 157+ 0000 ~            prefix1?_XX15Y2lo                    EQU prefix1?_XX1210
 158+ 0000 ~            prefix1?_XX15Y2hi                    EQU prefix1?_XX1210+1
 159+ 0000 ~            prefix1?_XX15PlotX1                  EQU prefix1?_XX15
 160+ 0000 ~            prefix1?_XX15PlotY1                  EQU prefix1?_XX15+1
 161+ 0000 ~            prefix1?_XX15PlotX2                  EQU prefix1?_XX15+2
 162+ 0000 ~            prefix1?_XX15PlotY2                  EQU prefix1?_XX15+3
 163+ 0000                          ENDM
 164+ 0000
 165+ 0000              XX12DefineMacro: MACRO   prefix1?
 166+ 0000 ~            ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 167+ 0000 ~            ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 168+ 0000 ~
 169+ 0000 ~            prefix1?_XX1210                     EQU prefix1?_XX1576
 170+ 0000 ~            prefix1?_XX12p1                     EQU prefix1?_XX1210+1
 171+ 0000 ~            prefix1?_XX12                       EQU prefix1?_XX1210
 172+ 0000 ~
 173+ 0000 ~
 174+ 0000 ~            prefix1?_BnKXX12xLo                 EQU prefix1?_XX12               ; XX12+0
 175+ 0000 ~            prefix1?_BnKXX12xSign               EQU prefix1?_XX12+1   ; XX12+1
 176+ 0000 ~            prefix1?_BnKXX12yLo                 EQU prefix1?_XX12+2   ; XX12+2
 177+ 0000 ~            prefix1?_BnKXX12ySign               EQU prefix1?_XX12+3   ; XX12+3
 178+ 0000 ~            prefix1?_BnKXX12zLo                 EQU prefix1?_XX12+4   ; XX12+4
 179+ 0000 ~            prefix1?_BnKXX12zSign               EQU prefix1?_XX12+5   ; XX12+5
 180+ 0000 ~            prefix1?_XX12Save                   DS  6
 181+ 0000 ~            prefix1?_XX12Save2                  DS  6
 182+ 0000 ~
 183+ 0000 ~            prefix1?_varXX12                    EQU prefix1?_XX12
 184+ 0000 ~            ; Repurposed XX12 when plotting lines
 185+ 0000 ~            prefix1?_BnkY2                      equ prefix1?_XX12+0
 186+ 0000 ~            prefix1?_BnKy2Lo                    equ prefix1?_XX12+0
 187+ 0000 ~            prefix1?_BnkY2Hi                    equ prefix1?_XX12+1
 188+ 0000 ~            prefix1?_BnkDeltaXLo                equ prefix1?_XX12+2
 189+ 0000 ~            prefix1?_BnkDeltaXHi                equ prefix1?_XX12+3
 190+ 0000 ~            prefix1?_BnkDeltaYLo                equ prefix1?_XX12+4
 191+ 0000 ~            prefix1?_BnkDeltaYHi                equ prefix1?_XX12+5
 192+ 0000 ~            prefix1?_BnkGradient                equ prefix1?_XX12+2
 193+ 0000 ~            prefix1?_BnkTemp1                   equ prefix1?_XX12+2
 194+ 0000 ~            prefix1?_BnkTemp1Lo                 equ prefix1?_XX12+2
 195+ 0000 ~            prefix1?_BnkTemp1Hi                 equ prefix1?_XX12+3
 196+ 0000 ~            prefix1?_BnkTemp2                   equ prefix1?_XX12+3
 197+ 0000 ~            prefix1?_BnkTemp2Lo                 equ prefix1?_XX12+3
 198+ 0000 ~            prefix1?_BnkTemp2Hi                 equ prefix1?_XX12+4
 199+ 0000                                          ENDM
 200+ 0000
 201+ 0000              XX16DefineMacro: MACRO   prefix1?
 202+ 0000 ~            ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
 203+ 0000 ~            prefix1?_BnkTransmatSidevX          DW  0               ; XX16+0
 204+ 0000 ~            prefix1?_BnkTransmatSidev           EQU prefix1?_BnkTransmatSidevX
 205+ 0000 ~            prefix1?_BnkTransmatSidevY          DW 0                ; XX16+2
 206+ 0000 ~            prefix1?_BnkTransmatSidevZ          DW 0                ; XX16+2
 207+ 0000 ~            prefix1?_BnkTransmatRoofvX          DW 0
 208+ 0000 ~            prefix1?_BnkTransmatRoofv           EQU prefix1?_BnkTransmatRoofvX
 209+ 0000 ~            prefix1?_BnkTransmatRoofvY          DW 0                ; XX16+2
 210+ 0000 ~            prefix1?_BnkTransmatRoofvZ          DW 0                ; XX16+2
 211+ 0000 ~            prefix1?_BnkTransmatNosevX          DW 0
 212+ 0000 ~            prefix1?_BnkTransmatNosev           EQU prefix1?_BnkTransmatNosevX
 213+ 0000 ~            prefix1?_BnkTransmatNosevY          DW 0                ; XX16+2
 214+ 0000 ~            prefix1?_BnkTransmatNosevZ          DW 0                ; XX16+2
 215+ 0000 ~            prefix1?_BnkTransmatTransX          DW 0
 216+ 0000 ~            prefix1?_BnkTransmatTransY          DW 0
 217+ 0000 ~            prefix1?_BnkTransmatTransZ          DW 0
 218+ 0000 ~            prefix1?_XX16                       equ prefix1?_BnkTransmatSidev
 219+ 0000 ~            ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 220+ 0000 ~            prefix1?_BnkTransInvRow0x0          DW 0
 221+ 0000 ~            prefix1?_BnkTransInvRow0x1          DW 0
 222+ 0000 ~            prefix1?_BnkTransInvRow0x2          DW 0
 223+ 0000 ~            prefix1?_BnkTransInvRow0x3          DW 0
 224+ 0000 ~            prefix1?_BnkTransInvRow1y0          DW 0
 225+ 0000 ~            prefix1?_BnkTransInvRow1y1          DW 0
 226+ 0000 ~            prefix1?_BnkTransInvRow1y2          DW 0
 227+ 0000 ~            prefix1?_BnkTransInvRow1y3          DW 0
 228+ 0000 ~            prefix1?_BnkTransInvRow2z0          DW 0
 229+ 0000 ~            prefix1?_BnkTransInvRow2z1          DW 0
 230+ 0000 ~            prefix1?_BnkTransInvRow2z2          DW 0
 231+ 0000 ~            prefix1?_BnkTransInvRow2z3          DW 0
 232+ 0000 ~
 233+ 0000 ~            prefix1?_XX16Inv                    equ prefix1?_BnkTransInvRow0x0
 234+ 0000                                          ENDM
 235+ 0000
 236+ 0000              XX18DefineMacro: MACRO   prefix1?
 237+ 0000 ~            ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 238+ 0000 ~            prefix1?_BnkDrawCam0xLo             DB  0               ; XX18+0
 239+ 0000 ~            prefix1?_BnkDrawCam0xHi             DB  0               ; XX18+1
 240+ 0000 ~            prefix1?_BnkDrawCam0xSgn            DB  0               ; XX18+2
 241+ 0000 ~            prefix1?_BnkDrawCam0x               equ prefix1?_BnkDrawCam0xLo
 242+ 0000 ~            prefix1?_BnkDrawCam0yLo             DB  0               ; XX18+3
 243+ 0000 ~            prefix1?_BnkDrawCam0yHi             DB  0               ; XX18+4
 244+ 0000 ~            prefix1?_BnkDrawCam0ySgn            DB  0               ; XX18+5
 245+ 0000 ~            prefix1?_BnkDrawCam0y               equ prefix1?_BnkDrawCam0yLo
 246+ 0000 ~            prefix1?_BnkDrawCam0zLo             DB  0               ; XX18+6
 247+ 0000 ~            prefix1?_BnkDrawCam0zHi             DB  0               ; XX18+7
 248+ 0000 ~            prefix1?_BnkDrawCam0zSgn            DB  0               ; XX18+8
 249+ 0000 ~            prefix1?_BnkDrawCam0z               equ prefix1?_BnkDrawCam0zLo
 250+ 0000 ~            prefix1?_XX18                       equ prefix1?_BnkDrawCam0xLo
 251+ 0000                                          ENDM
 252+ 0000
 253+ 0000              XX25DefineMacro: MACRO   prefix1?
 254+ 0000 ~            ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 255+ 0000 ~            prefix1?_BnKProjxLo                 DB  0
 256+ 0000 ~            prefix1?_BnKProjxHi                 DB  0
 257+ 0000 ~            prefix1?_BnKProjxSgn                DB  0
 258+ 0000 ~            prefix1?_BnKProjx                   EQU prefix1?_BnKProjxLo
 259+ 0000 ~            prefix1?_BnKProjyLo                 DB  0
 260+ 0000 ~            prefix1?_BnKProjyHi                 DB  0
 261+ 0000 ~            prefix1?_BnKProjySgn                DB  0
 262+ 0000 ~            prefix1?_BnKProjy                   EQU prefix1?_BnKProjyLo
 263+ 0000 ~            prefix1?_BnKProjzLo                 DB  0
 264+ 0000 ~            prefix1?_BnKProjzHi                 DB  0
 265+ 0000 ~            prefix1?_BnKProjzSgn                DB  0
 266+ 0000 ~            prefix1?_BnKProjz                   EQU prefix1?_BnKProjzLo
 267+ 0000 ~            prefix1?_XX25                       EQU prefix1?_BnKProjxLo
 268+ 0000                                          ENDM
 269+ 0000
 270+ 0000              CopyPosToXX15Macro: MACRO   prefix1?
 271+ 0000 ~
 272+ 0000 ~            prefix1?_CopyPosToXX15:    ld hl,prefix1?_Bnkxhi
 273+ 0000 ~                                       ld de,prefix1?_BnkXScaled
 274+ 0000 ~                                       ldi
 275+ 0000 ~                                       ldi
 276+ 0000 ~                                       inc hl ; skip to y high
 277+ 0000 ~                                       ldi
 278+ 0000 ~                                       ldi
 279+ 0000 ~                                       inc hl ; skip to z hig
 280+ 0000 ~                                       ldi
 281+ 0000 ~                                       ldi
 282+ 0000 ~                                       ret
 283+ 0000                                  ENDM
 284+ 0000
 285+ 0000              CopyXX12ScaledToXX18Macro:  MACRO    prefix1?
 286+ 0000 ~            prefix1?_CopyXX12ScaledToXX18:
 287+ 0000 ~            prefix1?_CopyResultToDrawCam:    ld      hl, prefix1?_XX12
 288+ 0000 ~                                             ld      de, prefix1?_XX18
 289+ 0000 ~                                             ldi    ; X12+0 => XX18+0  Set XX18(2 0) = dot_sidev
 290+ 0000 ~                                             inc de ; skip to XX18+2 as it will be on XX18+1
 291+ 0000 ~                                             ldi    ; XX12+1 => XX18+2
 292+ 0000 ~                                             ldi    ; XX12+2 => XX18+3 Set XX12+1 => XX18+2
 293+ 0000 ~                                             inc de ; skip to XX18+5 as it will be on XX18+4
 294+ 0000 ~                                             ldi    ; XX12+3 => XX18+5
 295+ 0000 ~                                             ldi    ; XX12+4 => XX18+6 Set XX18(8 6) = dot_nosev
 296+ 0000 ~                                             inc de ; skip to XX18+8 as it will be on XX18+7
 297+ 0000 ~                                             ldi    ; XX12+5 => XX18+8
 298+ 0000 ~                                             ret
 299+ 0000                                          ENDM
 300+ 0000
 301+ 0000              CopyXX12toXX15Macro:        MACRO    prefix1?
 302+ 0000 ~            prefix1?_CopyXX12toXX15:         ld      hl, prefix1?_BnkXX12xLo
 303+ 0000 ~                                             ld      de, prefix1?_XX18
 304+ 0000 ~                                             ldi      ; xlo
 305+ 0000 ~                                             ldi      ; xsg
 306+ 0000 ~                                             ldi      ; xlo
 307+ 0000 ~                                             ldi      ; xsg
 308+ 0000 ~                                             ldi      ; xlo
 309+ 0000 ~                                             ldi      ; xsg
 310+ 0000 ~                                             ret
 311+ 0000                                          ENDM
 312+ 0000
 313+ 0000              InitialiseUniverseObjMacro: MACRO   prefix1?
 314+ 0000 ~            prefix1?_InitRotMat:    ld      hl, 0
 315+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevY),hl       ; set the zeroes
 316+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevZ),hl       ; set the zeroes
 317+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvX),hl       ; set the zeroes
 318+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvZ),hl       ; set the zeroes
 319+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevX),hl       ; set the zeroes
 320+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevY),hl       ; set the zeroes
 321+ 0000 ~            ; Optimised as already have 0 in l
 322+ 0000 ~                                    ld      h, $60	             				; 96 in hi byte
 323+ 0000 ~                                    ;ld      hl,1
 324+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevX),hl
 325+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvY),hl
 326+ 0000 ~            ; Optimised as already have 0 in l
 327+ 0000 ~                                    ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 328+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevZ),hl
 329+ 0000 ~                                    ret
 330+ 0000                                          ENDM
 331+ 0000
# file closed: ../../Universe/UniverseMacros/UniverseVarsDefineMacro.asm
  46  0000                                      INCLUDE "../../Variables/general_variables_macros.asm"
# file opened: ../../Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if it is set    then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000              ; Will check to see if docking is set, if docking     z flag is clear
 150+ 0000              ;                                      if not docking z flag is set
 151+ 0000              IsShipDocking:          MACRO
 152+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 153+ 0000 ~                                    and     ShipIsDocking
 154+ 0000                                      ENDM
 155+ 0000
 156+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 157+ 0000              ;                                    if hit is set then hostile hence z is not set
 158+ 0000              IsShipFriendly:         MACRO
 159+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 160+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 161+ 0000                                      ENDM
 162+ 0000
 163+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 164+ 0000              ;                                    if set    then exploding     z set
 165+ 0000              IsShipExploding:        MACRO
 166+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 167+ 0000 ~                                    and     ShipExploding
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              ; Checks if ship is a trader, if ship is a trader then z flag is clear
 171+ 0000              ;                             if ship isn't a trader then z flag is set
 172+ 0000              IsShipTrader:           MACRO
 173+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 174+ 0000 ~                                    and     ShipIsTrader
 175+ 0000                                      ENDM
 176+ 0000              ; Will check if the AI bit is set, if set then z is clear, if clear then z is set
 177+ 0000              IsAIEnabled:            MACRO
 178+ 0000 ~                                    ld      hl, UBnkaiatkecm
 179+ 0000 ~                                    bit 	ShipAIEnabledBitNbr,(hl)
 180+ 0000                                      ENDM
 181+ 0000
 182+ 0000              UpdateLaserOnCounter:   MACRO
 183+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 184+ 0000 ~                                    and     a
 185+ 0000 ~                                    jr      z,.LaserOnIsDone
 186+ 0000 ~                                    dec     a
 187+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 188+ 0000 ~                                    jr      z,.LaserOnIsDone
 189+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 190+ 0000 ~            .LaserOnIsDone:
 191+ 0000                                      ENDM
 192+ 0000
 193+ 0000              UpdateLaserOffCounter:  MACRO
 194+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 195+ 0000 ~                                    and     a
 196+ 0000 ~                                    jr      z,.LaserOffIsDone
 197+ 0000 ~                                    dec     a
 198+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 199+ 0000 ~                                    jr      z,.LaserOffIsDone
 200+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 201+ 0000 ~            .LaserOffIsDone:
 202+ 0000                                      ENDM
 203+ 0000
 204+ 0000              UpdateLaserRestCounter: MACRO
 205+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 206+ 0000 ~                                    and     a
 207+ 0000 ~                                    jr      z,.LaserRestIsDone
 208+ 0000 ~                                    dec     a
 209+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 210+ 0000 ~                                    jr      z,.LaserRestIsDone
 211+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 212+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 213+ 0000 ~            .LaserRestIsDone
 214+ 0000                                      ENDM
 215+ 0000
 216+ 0000              ChargeEnergyAndShields: MACRO
 217+ 0000 ~                                    ld      a,$FF
 218+ 0000 ~                                    ld      (PlayerEnergy),a
 219+ 0000 ~                                    ld      (ForeShield),a
 220+ 0000 ~                                    ld      (AftShield),a
 221+ 0000                                      ENDM
 222+ 0000
 223+ 0000              CopyPresentSystemToTarget: MACRO
 224+ 0000 ~                                    ld      hl,(PresentSystemX)
 225+ 0000 ~                                    ld      (TargetSystemX),hl
 226+ 0000                                      ENDM
 227+ 0000
 228+ 0000              CopyTargetSystemToPresent: MACRO
 229+ 0000 ~                                    ld      hl,(TargetSystemX)
 230+ 0000 ~                                    ld      (PresentSystemX),hl
 231+ 0000                                      ENDM
 232+ 0000
 233+ 0000              HalveFugitiveStatus:    MACRO
 234+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 235+ 0000 ~                                    srl     (hl)
 236+ 0000                                      ENDM
 237+ 0000
 238+ 0000              ClearForceTransition    MACRO
 239+ 0000 ~                                    ld      a,$FF
 240+ 0000 ~                                    ld      (ScreenTransitionForced),a
 241+ 0000                                      ENDM
 242+ 0000
 243+ 0000              ForceTransition:        MACRO newScreen
 244+ 0000 ~                                    ld      a,newScreen
 245+ 0000 ~                                    ld      (ScreenTransitionForced), a
 246+ 0000                                      ENDM
 247+ 0000
 248+ 0000              IsSpaceStationPresent:  MACRO
 249+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 250+ 0000 ~                                    and     a
 251+ 0000                                      ENDM
 252+ 0000
 253+ 0000              SetSafeZone:            MACRO
 254+ 0000 ~                                    xor     a
 255+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              ClearSafeZone:          MACRO
 259+ 0000 ~                                    ld      a,$FF
 260+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              ClearTemperatures:      MACRO
 264+ 0000 ~                                    xor     a
 265+ 0000 ~                                    ld      (CabinTemperature),a
 266+ 0000 ~                                    ld      (GunTemperature),a
 267+ 0000                                      ENDM
 268+ 0000
 269+ 0000              ClearWarpPressed:       MACRO
 270+ 0000 ~                                    SetMemFalse WarpPressed
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              CoolCabin:              MACRO
 274+ 0000 ~                                    ld      a,(CabinTemperature)
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jr      z,.AlreadyCool
 277+ 0000 ~                                    dec     a
 278+ 0000 ~                                    ld      (CabinTemperature),a
 279+ 0000 ~            .AlreadyCool:
 280+ 0000                                      ENDM
 281+ 0000
 282+ 0000              CoolLasers:             MACRO
 283+ 0000 ~                                    ld      a,(GunTemperature)
 284+ 0000 ~                                    and     a
 285+ 0000 ~                                    jr      z,.AlreadyCool
 286+ 0000 ~                                    dec     a
 287+ 0000 ~                                    ld      (GunTemperature),a
 288+ 0000 ~            .AlreadyCool:
 289+ 0000                                      ENDM
 290+ 0000
 291+ 0000              ; type 255 is "not fitted"
 292+ 0000
 293+ 0000
 294+ 0000              InitEventCounter:       MACRO
 295+ 0000 ~                                    xor     a
 296+ 0000 ~                                    ld      (EventCounter),a
 297+ 0000                                      ENDM
 298+ 0000
 299+ 0000              ClearMissJump:          MACRO
 300+ 0000 ~                                    ld      a,$FF
 301+ 0000 ~                                    ld      (MissJumpFlag),a
 302+ 0000                                      ENDM
 303+ 0000
 304+ 0000
 305+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 306+ 0000 ~                                    ld      a,(DrainMem)
 307+ 0000 ~                                    ld      b,a
 308+ 0000 ~                                    ld      a,(SystemMem)
 309+ 0000 ~                                    sub     a,b
 310+ 0000 ~                                    ld      (SystemMem),a
 311+ 0000 ~                                    jr      c,.ZeroSystem
 312+ 0000 ~                                    jp      .ExitPoint
 313+ 0000 ~            .ZeroSystem:            ZeroA
 314+ 0000 ~                                    ld      (SystemMem),a
 315+ 0000 ~            .ExitPoint
 316+ 0000                                      ENDM
 317+ 0000
 318+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 319+ 0000 ~                                    ld      a,(BoostMem)
 320+ 0000 ~                                    ld      b,a
 321+ 0000 ~                                    ld      a,(SystemMem)
 322+ 0000 ~                                    add     b
 323+ 0000 ~                                    ld      (SystemMem),a
 324+ 0000 ~                                    jr      c, .MaxSystem
 325+ 0000 ~                                    jp      .ExitPoint
 326+ 0000 ~            .MaxSystem:             ld      a,255
 327+ 0000 ~                                    ld      (SystemMem),a
 328+ 0000 ~            .ExitPoint
 329+ 0000                                      ENDM
 330+ 0000
 331+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 332+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 333+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 334+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 335+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 336+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 337+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 338+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 339+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 340+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 341+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 342+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 343+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 344+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 345+ 0000
# file closed: ../../Variables/general_variables_macros.asm
  47  0000                                      INCLUDE "../../Variables/UniverseSlot_macros.asm"
# file opened: ../../Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ../../Variables/UniverseSlot_macros.asm
  48  0000                                      INCLUDE "../../Data/ShipIdEquates.asm"
# file opened: ../../Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ../../Data/ShipIdEquates.asm
  49  0000
  50  0000              SetBorder:              MACRO   value
  51  0000 ~                                    MMUSelectLayer1
  52  0000 ~                                    ld          a,value
  53  0000 ~                                    call        l1_set_border
  54  0000                                      ENDM
  55  0000
  56  0000              charactersetaddr		equ 15360
  57  0000              STEPDEBUG               equ 1
  58  0000
  59  0000              TopOfStack              equ $5CCB ;$6100
  60  0000
  61  0000                                      ORG $5DCB;      $6200
  62  5DCB F3           EliteNextStartup:       di
  63  5DCC ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
  64  5DD0 ED 91 69 00  .InitialiseLayerOrder:  nextreg     DISPLAY_CONTROL_1_REGISTER, 0   ; no layer 2
  65  5DD4                                      DISPLAY "Starting Assembly At ", EliteNextStartup
  66  5DD4                                      ; "STARTUP"
  67  5DD4                                      ; Make sure  rom is in page 0 during load
  68  5DD4                                      MMUSelectROMS
  68  5DD4 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
  68  5DD8 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
  69  5DDC                                      MMUSelectLayer1
  69  5DDC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  70  5DE0 CD 8F E0                             call		l1_cls
  71  5DE3 3E 38                                ld			a,L1ColourInkBlack | L1ColourPaperWhite
  72  5DE5 CD AA E0                             call		l1_attr_cls_to_a
  73  5DE8                                      SetBorder   $FF
  73  5DE8             >                        MMUSelectLayer1
  73  5DE8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  73  5DEC 3E FF       >                        ld          a,$FF
  73  5DEE CD B4 E0    >                        call        l1_set_border
  74  5DF1              .InitialisingMessage:   MMUSelectUniverseN  0
  74  5DF1 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  75  5DF5 CD DA 66                             call        ResetUniv
  76  5DF8 CD 3E 6D     InitialiseMainLoop:     call        ClearUnivSlotList
  77  5DFB                                      MMUSelectKeyboard
  77  5DFB ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  78  5DFF CD F7 E0                             call        init_keyboard
  79  5E02                                      ZeroA
  79  5E02 AF          >                        xor a
  80  5E03 32 2E 69                             ld          (JSTX),a
  81  5E06 32 24 69                             ld          (JSTY),a
  82  5E09 CD 9A 61     .CreateMissle:          call        CreateMissile
  83  5E0C CD AC 61     .CreateTarget:          call        CreateTarget
  84  5E0F              ;...................................................................................................................................
  85  5E0F CD 60 66                             call        DisplayBoiler
  86  5E12              ;...................................................................................................................................
  87  5E12              InitMainLoop:           ZeroA
  87  5E12 AF          >                        xor a
  88  5E13 32 30 69                             ld      (ALPHA),a
  89  5E16 32 23 69                             ld      (BETA),a
  90  5E19              MainLoop:	            MMUSelectMathsBankedFns                                         ; make sure we are in maths routines in case a save paged out
  90  5E19 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  91  5E1D CD 1A 6E                             call    doRandom                                                ; redo the seeds every frame
  92  5E20              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  93  5E20              InputBlockerCheck:      MMUSelectKeyboard
  93  5E20 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  94  5E24 CD 03 E1                             call    scan_keyboard
  95  5E27              ;-- Key Definitions
  96  5E27              ; Player Pitcn and Roll
  97  5E27              ;   Q/A pitch       O/P roll        W/A Thrust
  98  5E27              ;  Kill Missile and launch from 0,0,0
  99  5E27 3E 22                                ld      a,VK_H
 100  5E29 CD 8D E1                             call    is_vkey_pressed
 101  5E2C CC 9D 5E                             call    z, HomeMissile
 102  5E2F              ;  Kill Missile and launch new one
 103  5E2F 3E 26                                ld      a,VK_N
 104  5E31 CD 8D E1                             call    is_vkey_pressed
 105  5E34 CC CE 5E                             call    z, RandomMissile
 106  5E37              ; Reset missile to identity matrix
 107  5E37 3E 1B                                ld      a,VK_I
 108  5E39 CD 8D E1                             call    is_vkey_pressed
 109  5E3C CC 8B 5E                             call    z, IdentityMissile
 110  5E3F              ; Tidy and Normalise Vector
 111  5E3F 3E 04                                ld      a,VK_V
 112  5E41 CD 8D E1                             call    is_vkey_pressed
 113  5E44 CC D5 5E                             call    z, TidyMissile
 114  5E47              ; Randomise Target Position
 115  5E47 3E 0E                                ld      a,VK_T
 116  5E49 CD 8D E1                             call    is_vkey_pressed
 117  5E4C CC DD 5E                             call    z, RandomTarget
 118  5E4F              ; Run or pause missile
 119  5E4F 3E 19                                ld      a,VK_P
 120  5E51 CD 8D E1                             call    is_vkey_pressed
 121  5E54 CC 94 5E                             call    z, ToggleMissileState
 122  5E57              ;.. Update values based on movekey keys, may likley need damping as this coudl be very fast
 123  5E57 3A 93 5E     UpdateShipsControl:     ld      a,(MissileState)
 124  5E5A A7                                   and     a
 125  5E5B CA 61 5E                             jp      z,.NotRunning
 126  5E5E CD E6 5E     .Running:               call    UpdateUniverseObjects
 127  5E61              .NotRunning:
 128  5E61              ;.. Render Ship ...................................................................................................................
 129  5E61              RenderPositions:        DISPLAY "TODO Copy missile and target to buffers to print"
 130  5E61                                      MMUSelectUniverseN 2
 130  5E61 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 131  5E65 16 0A                                ld      d,RowTarget
 132  5E67 CD 7E 63                             call    DisplayPosition
 133  5E6A                                      MMUSelectUniverseN 1
 133  5E6A ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 134  5E6E 16 02                                ld      d,RowMissle
 135  5E70 CD 7E 63                             call    DisplayPosition
 136  5E73 CD 31 64                             call    DisplayMatrix
 137  5E76 CD 4D 64                             call    DisplayAccellSpeed
 138  5E79 CD 64 64                             call    DisplayRollPitch
 139  5E7C CD C2 63                             call    DisplayRelative
 140  5E7F CD E4 63                             call    DisplayDirection
 141  5E82 CD 06 64                             call    DisplayDotProduct
 142  5E85 CD 62 63                             call    DisplayActionStatus
 143  5E88              ;.. Flip Buffer ..................................................................................................................
 144  5E88 C3 19 5E                             jp MainLoop
 145  5E8B
 146  5E8B              IdentityMissile:        MMUSelectUniverseN 1
 146  5E8B ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 147  5E8F CD C4 C7                             call    InitialiseOrientation
 148  5E92 C9                                   ret
 149  5E93
 150  5E93 00           MissileState            DB      0
 151  5E94
 152  5E94 3A 93 5E     ToggleMissileState:     ld      a,(MissileState)
 153  5E97 EE 80                                xor     $80
 154  5E99 32 93 5E                             ld      (MissileState),a
 155  5E9C C9                                   ret
 156  5E9D
 157  5E9D              ;-- Home Missile Position ---------------------------------------------------------------------------------------------------------
 158  5E9D              HomeMissile:            MMUSelectUniverseN 1
 158  5E9D ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 159  5EA1 21 20 C0                             ld      hl,UBnKxlo
 160  5EA4 36 00                                ld      (hl),0
 161  5EA6 11 21 C0                             ld      de,UBnKxlo+1
 162  5EA9 01 08 00                             ld      bc,8
 163  5EAC ED B0                                ldir
 164  5EAE C9                                   ret
 165  5EAF
 166  5EAF DD 21 20 C0  RandomPosition:         ld      ix,UBnKxlo
 167  5EB3 CD C1 5E                             call    SetS24Random
 168  5EB6 DD 21 23 C0                          ld      ix,UBnKylo
 169  5EBA CD C1 5E                             call    SetS24Random
 170  5EBD DD 21 26 C0                          ld      ix,UBnKzlo
 171  5EC1 CD 09 6E     SetS24Random:           call    doRandomS24
 172  5EC4 DD 77 00                             ld      (ix+0),a
 173  5EC7 DD 73 01                             ld      (ix+1),e
 174  5ECA DD 72 02                             ld      (ix+2),d
 175  5ECD C9                                   ret
 176  5ECE              ;-- Random Missile Position -------------------------------------------------------------------------------------------------------
 177  5ECE              RandomMissile:          MMUSelectUniverseN 1
 177  5ECE ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 178  5ED2 C3 AF 5E                             jp      RandomPosition
 179  5ED5              ;-- Tidy Missile Vectors ---------------------------------------------------------------------------------------------------------
 180  5ED5              TidyMissile:            MMUSelectUniverseN 1
 180  5ED5 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 181  5ED9 CD D2 7B                             call    TidyVectorsIX
 182  5EDC C9                                   ret
 183  5EDD              ;-- Random Target Position --------------------------------------------------------------------------------------------------------
 184  5EDD              RandomTarget:           MMUSelectUniverseN 2
 184  5EDD ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 185  5EE1 C3 AF 5E                             jp      RandomPosition
 186  5EE4 C9                                   ret
 187  5EE5              ;.. Keyboard Routines .............................................................................................................
 188  5EE5
 189  5EE5
 190  5EE5              ;..Update Universe Objects.........................................................................................................
 191  5EE5              ;..................................................................................................................................
 192  5EE5              ;                           DEFINE ROTATIONDEBUG 1
 193  5EE5              ;                           DEFINE CLIPDEBUG 1
 194  5EE5 00           CurrentShipUniv:        DB      0
 195  5EE6              ;..................................................................................................................................
 196  5EE6              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
 197  5EE6              ;..................................................................................................................................
 198  5EE6              ; Replacement for MVEIT routine
 199  5EE6              UpdateUniverseObjects:  MMUSelectUniverseN      1
 199  5EE6 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 200  5EEA              ;.. Missile Tactics ...............................................................................................................
 201  5EEA CD 41 61                             call    LoadTargetData              ; Target position to UBnKTarget Pos
 202  5EED CD 60 61                             call    CalculateRelativePos        ; Target - missile to UBnKOffset
 203  5EF0 CD 14 61                             call    CheckDistance               ; Calculate distance, near far
 204  5EF3 CD CA 5F                             call    CopyOffsetToDirection       ; Copy UBnKOffset to UBnKDirection
 205  5EF6 CD DA 5F                             call    NormaliseDirection          ; Normalise Direction into UBnKDirNorm
 206  5EF9 21 36 C0                             ld      hl,UBnkrotmatNosev          ; Copy nose to tactics matrix and calculate dot product in a
 207  5EFC CD D0 60                             call    CalculateDotProducts        ; .
 208  5EFF 22 7D C0                             ld      (UBnKDotProductNose),hl     ; .
 209  5F02 78                                   ld      a,b
 210  5F03 32 7F C0                             ld      (UBnKDotProductNoseSign),a
 211  5F06 21 30 C0                             ld      hl,UBnkrotmatRoofv          ; Copy roof to tactics matrix and calculate dot product in a
 212  5F09 CD D0 60                             call    CalculateDotProducts        ; .
 213  5F0C 22 80 C0                             ld      (UBnKDotProductRoof),hl     ; .
 214  5F0F 78                                   ld      a,b
 215  5F10 32 82 C0                             ld      (UBnKDotProductRoofSign),a
 216  5F13 CD A0 5F                             call    FlipDirectionSigns
 217  5F16 CD 23 5F                             call    SeekingLogic
 218  5F19              ;.. Update Position ................................................................................................................................
 219  5F19 CD 71 D6                             call    ApplyShipRollAndPitch
 220  5F1C CD B7 D7                             call    ApplyShipSpeed
 221  5F1F CD 08 C7                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
 222  5F22 C9                                   ret
 223  5F23              ;..................................................................................................................................
 224  5F23              ; For now no random numbers
 225  5F23 CD 2D 5F     SeekingLogic:           call    AdjustPitch
 226  5F26 CD 4D 5F                             call    AdjustRoll
 227  5F29 CD 6A 5F                             call    AdjustSpeed
 228  5F2C C9                                   ret
 229  5F2D              ;..................................................................................................................................
 230  5F2D 3A 82 C0     AdjustPitch:            ld      a,(UBnKDotProductRoofSign)
 231  5F30 67                                   ld      h,a
 232  5F31 3A 81 C0                             ld      a,(UBnKDotProductRoof+1)
 233  5F34 CB 27                                sla     a
 234  5F36                                      JumpIfAGTENusng 16, .skipPitchZero
 234  5F36 FE 10       >                        cp     16
 234  5F38 D2 43 5F    >                        jp		nc,.skipPitchZero
 235  5F3B              .pitchZero:             ZeroA
 235  5F3B AF          >                        xor a
 236  5F3C 32 86 C0                             ld      (UBnKRotZCounter),a
 237  5F3F CD 1A 65                             call    ClearStatusPitch
 238  5F42 C9                                   ret
 239  5F43 3E 05        .skipPitchZero:         ld      a,5
 240  5F45 B4                                   or      h
 241  5F46 32 86 C0                             ld      (UBnKRotZCounter),a
 242  5F49 CD E4 64                             call    SetStatusPitch
 243  5F4C C9                                   ret
 244  5F4D              ;..................................................................................................................................
 245  5F4D 3A 7F C0     AdjustRoll:             ld      a,(UBnKDotProductNoseSign)
 246  5F50 67                                   ld      h,a
 247  5F51 3A 7E C0                             ld      a,(UBnKDotProductNose+1)
 248  5F54 CB 27                                sla     a
 249  5F56                                      JumpIfAGTENusng 16, .skipRollZero
 249  5F56 FE 10       >                        cp     16
 249  5F58 D2 60 5F    >                        jp		nc,.skipRollZero
 250  5F5B              .pitchRoll:             ZeroA
 250  5F5B AF          >                        xor a
 251  5F5C 32 85 C0                             ld      (UBnKRotXCounter),a
 252  5F5F                                      ; We don't clear as Adjust pitch may have set it
 253  5F5F C9                                   ret
 254  5F60 3E 05        .skipRollZero:          ld      a,5
 255  5F62 B4                                   or      h
 256  5F63 32 85 C0                             ld      (UBnKRotXCounter),a
 257  5F66 CD DE 64                             call    SetStatusRoll
 258  5F69 C9                                   ret
 259  5F6A              ;..................................................................................................................................
 260  5F6A 3A 7F C0     AdjustSpeed:            ld      a,(UBnKDotProductNoseSign)          ; if negatvie facing away so slow
 261  5F6D A7                                   and     a
 262  5F6E 20 14                                jr      nz,.SlowDown
 263  5F70 3A 7D C0                             ld      a,(UBnKDotProductNose)
 264  5F73                                      JumpIfALTNusng  22,.SlowDown                ; if nose < 22 then slow down
 264  5F73 FE 16       >                        cp      22
 264  5F75 DA 84 5F    >                        jp		c, .SlowDown
 265  5F78              .Accelerate
 265  5F78 3E 03                    ld      a,3                                 ; else
 266  5F7A 32 84 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 267  5F7D CD D8 64                             call    SetStatusFast
 268  5F80 CD 08 65                             call    ClearStatusSlow
 269  5F83 C9                                   ret
 270  5F84              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange           ; if its < 18 then way off so continue
 270  5F84 FE 12       >                        cp      18
 270  5F86 DA 95 5F    >                        jp		c, .NoSpeedChange
 271  5F89 3E FE        .Deccelerate:           ld      a,-2
 272  5F8B 32 84 C0                             ld      (UBnKAccel),a
 273  5F8E CD 0E 65                             call    ClearStatusFast
 274  5F91 CD D2 64                             call    SetStatusSlow
 275  5F94 C9                                   ret
 276  5F95              .NoSpeedChange:         ZeroA                                       ; else no change
 276  5F95 AF          >                        xor a
 277  5F96 32 84 C0                             ld      (UBnKAccel),a
 278  5F99 CD 0E 65                             call    ClearStatusFast
 279  5F9C CD 08 65                             call    ClearStatusSlow
 280  5F9F C9                                   ret
 281  5FA0
 282  5FA0              ;..................................................................................................................................
 283  5FA0 3A 78 C0     FlipDirectionSigns:     ld      a,(UBnKDirNormXSign)
 284  5FA3 EE 80                                xor     $80
 285  5FA5 32 78 C0                             ld      (UBnKDirNormXSign),a
 286  5FA8 3A 7A C0                             ld      a,(UBnKDirNormYSign)
 287  5FAB EE 80                                xor     $80
 288  5FAD 32 7A C0                             ld      (UBnKDirNormYSign),a
 289  5FB0 3A 7C C0                             ld      a,(UBnKDirNormZSign)
 290  5FB3 EE 80                                xor     $80
 291  5FB5 32 7C C0                             ld      (UBnKDirNormZSign),a
 292  5FB8 C9                                   ret
 293  5FB9 3A 7F C0                             ld      a,(UBnKDotProductNoseSign)
 294  5FBC EE 80                                xor     $80
 295  5FBE 32 7F C0                             ld      (UBnKDotProductNoseSign),a
 296  5FC1 3A 82 C0                             ld      a,(UBnKDotProductRoofSign)
 297  5FC4 EE 80                                xor     $80
 298  5FC6 32 82 C0                             ld      (UBnKDotProductRoofSign),a
 299  5FC9 C9                                   ret
 300  5FCA              ;..................................................................................................................................
 301  5FCA              CopyOffsetToDirection:  MMUSelectUniverseN 1
 301  5FCA ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 302  5FCE 21 65 C0                             ld      hl,UBnKOffset
 303  5FD1 11 6E C0                             ld      de,UBnKDirection
 304  5FD4 01 09 00                             ld      bc,9
 305  5FD7 ED B0                                ldir
 306  5FD9 C9                                   ret
 307  5FDA              ;..................................................................................................................................
 308  5FDA              ; Normalises UBnKDirection into UBnKDirNorm with Sign byte and 7 bit normal
 309  5FDA              ; result of 36 means they are directly in align + at - away
 310  5FDA              NormaliseDirection:     MMUSelectUniverseN 1
 310  5FDA ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 311  5FDE 3A 70 C0                             ld      a,(UBnKDirectionXSign)      ; Direction x = abs Direction X , b bit 7 = sign of X
 312  5FE1 4F                                   ld      c,a                         ; .
 313  5FE2 E6 80                                and     $80                         ; .
 314  5FE4 32 78 C0                             ld      (UBnKDirNormXSign),a        ; Save sign into NormSign
 315  5FE7 79                                   ld      a,c                         ; .
 316  5FE8 E6 7F                                and     $7F                         ; .
 317  5FEA 32 70 C0                             ld      (UBnKDirectionXSign),a      ; .
 318  5FED 3A 73 C0     .ABSYComponenet:        ld      a,(UBnKDirectionYSign)      ; Direction y = abs Direction y , b bit 6 = sign of y
 319  5FF0 4F                                   ld      c,a                         ; .
 320  5FF1 E6 80                                and     $80                         ;  get sign bit from a
 321  5FF3 32 7A C0                             ld      (UBnKDirNormYSign),a        ; Save sign into NormSign
 322  5FF6 79                                   ld      a,c
 323  5FF7 E6 7F                                and     $7F                         ; .
 324  5FF9 32 73 C0                             ld      (UBnKDirectionYSign),a      ; .
 325  5FFC 3A 76 C0     .ABSXZomponenet:        ld      a,(UBnKDirectionZSign)      ; Direction y = abs Direction y , b bit 6 = sign of y
 326  5FFF 4F                                   ld      c,a                         ; .
 327  6000 E6 80                                and     $80                         ;  get sign bit from a
 328  6002 32 7C C0                             ld      (UBnKDirNormZSign),a        ; Save sign into NormSign
 329  6005 79                                   ld      a,c
 330  6006 E6 7F                                and     $7F                         ; .
 331  6008 32 76 C0                             ld      (UBnKDirectionZSign),a      ; .
 332  600B              ;.. When we hit here the UBnKTargetX,Y and Z are 24 bit abs values to simplify scaling
 333  600B 2A 6E C0     .Scale:                 ld      hl, (UBnKDirectionX)        ; [ixh h l]  = X
 334  600E 3A 70 C0                             ld      a,(UBnKDirectionXSign)      ; .
 335  6011 DD 67                                ld      ixh,a                       ; .
 336  6013 ED 5B 71 C0                          ld      de, (UBnKDirectionY)        ; [iyh d e ] = Y
 337  6017 3A 73 C0                             ld      a,(UBnKDirectionYSign)      ; .
 338  601A FD 67                                ld      iyh,a                       ; .
 339  601C ED 4B 74 C0                          ld      bc, (UBnKDirectionZ)        ; [iyl b c ] = Z
 340  6020 3A 76 C0                             ld      a,(UBnKDirectionZSign)      ; .
 341  6023 FD 6F                                ld      iyl,a                       ; .
 342  6025 DD 7C        .ScaleLoop1:            ld      a,ixh                       ; first pass get to 16 bit
 343  6027 FD B4                                or      iyh                         ; hl = X
 344  6029 FD B5                                or      iyl                         ; de = Y
 345  602B FD B4                                or      iyh                         ; bc = Z
 346  602D CA 4E 60                             jp      z,.DoneScaling1             ; .
 347  6030                                      ShiftIXhHLRight1                    ; .
 347  6030 DD 7C       >               ld  a,ixh
 347  6032 CB 3F       >               srl a
 347  6034 DD 67       >               ld  ixh,a
 347  6036 CB 1C       >			   rr  h
 347  6038 CB 1D       >			   rr  l
 348  603A                                      ShiftIYhDERight1                    ; .
 348  603A FD 7C       >               ld  a,iyh
 348  603C CB 3F       >               srl a
 348  603E FD 67       >               ld  iyh,a
 348  6040 CB 1A       >               rr  d
 348  6042 CB 1B       >			   rr  e
 349  6044                                      ShiftIYlBCRight1                    ; .
 349  6044 FD 7D       >               ld  a,iyl
 349  6046 CB 3F       >               srl a
 349  6048 FD 6F       >               ld  iyl,a
 349  604A CB 18       >			   rr  b
 349  604C CB 19       >               rr  c
 350  604E              .DoneScaling1:          ;-- Now we have got here hl = X, de = Y, bc = Z
 351  604E                                      ;-- we cal just jump into the Normalize Tactics code
 352  604E 7C           .ScaleLoop2:            ld      a,h                         ; Now scale down to 8 bit
 353  604F B2                                   or      d                           ; so l = X e = Y c = Z
 354  6050 B0                                   or      b                           ; .
 355  6051 28 0F                                jr      z,.DoneScaling2             ; .
 356  6053                                      ShiftHLRight1                       ; .
 356  6053 CB 3C       >			   srl h
 356  6055 CB 1D       >			   rr  l
 357  6057                                      ShiftDERight1                       ; .
 357  6057 CB 3A       >			   srl d
 357  6059 CB 1B       >			   rr  e
 358  605B                                      ShiftBCRight1                       ; .
 358  605B CB 38       >			   srl b
 358  605D CB 19       >			   rr  c
 359  605F C3 4E 60                             jp      .ScaleLoop2                 ; .
 360  6062              ;-- Now we are down to 8 bit values, so we need to scale again to get S7
 361  6062              .DoneScaling2:          ShiftHLRight1                       ; Scale once again to 7 bit with no sign
 361  6062 CB 3C       >			   srl h
 361  6064 CB 1D       >			   rr  l
 362  6066                                      ShiftDERight1                       ; l = X e = Y c = Z
 362  6066 CB 3A       >			   srl d
 362  6068 CB 1B       >			   rr  e
 363  606A                                      ShiftBCRight1                       ; .
 363  606A CB 38       >			   srl b
 363  606C CB 19       >			   rr  c
 364  606E E5 D5 C5     .CalculateLength:       push    hl,,de,,bc                  ; save vector x y and z nwo they are scaled to 1 byte
 365  6071 53                                   ld      d,e                         ; hl = y ^ 2
 366  6072 ED 30                                mul     de                          ; .
 367  6074 EB                                   ex      de,hl                       ; .
 368  6075 53                                   ld      d,e                         ; de = x ^ 2
 369  6076 ED 30                                mul     de                          ; .
 370  6078 19                                   add     hl,de                       ; hl = y^ 2 + x ^ 2
 371  6079 51                                   ld      d,c                         ; de = z * 2
 372  607A 59                                   ld      e,c                         ; .
 373  607B ED 30                                mul     de                          ; .
 374  607D 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 375  607E EB                                   ex      de,hl                       ; fix as hl was holding square
 376  607F CD A8 70                             call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 377  6082                                      ; add in logic if h is low then use lower bytes for all
 378  6082              ;.RetrieveSignBits:      ld      a,(UBnKDirectionSignPacked) ; load sign bits to iyl
 379  6082              ;                        ld      iyl,a                       ;
 380  6082 7D           .NormaliseZ:            ld      a,l                         ; save length into iyh
 381  6083 FD 67                                ld      iyh,a                       ; .
 382  6085 57                                   ld      d,a                         ; and also into d
 383  6086 C1                                   pop     bc                          ; retrive z scaled
 384  6087 79                                   ld      a,c                         ; a = scaled byte
 385  6088 CD 0A 7A                             call    AequAdivDmul967Bit          ; a = z*96/Length
 386  608B 32 7B C0                             ld      (UBnKDirNormZ),a            ; now Tactics Vector Z byte 1 is value
 387  608E D1           .NormaliseY:            pop     de                          ; retrive y scaled
 388  608F 7B                                   ld      a,e                         ; a = scaled byte
 389  6090 FD 54                                ld      d,iyh                       ; d = length
 390  6092 CD 0A 7A                             call    AequAdivDmul967Bit          ; a = z*96/Length
 391  6095 32 79 C0                             ld      (UBnKDirNormY),a            ; now Tactics Vector Y byte 1 is value
 392  6098 E1           .NormaliseX:            pop     hl                          ; retrive x scaled
 393  6099 7D                                   ld      a,l                         ; a = scaled byte
 394  609A FD 54                                ld      d,iyh                       ; d = length
 395  609C CD 0A 7A                             call    AequAdivDmul967Bit          ; a = z*96/Length
 396  609F 32 77 C0                             ld      (UBnKDirNormX),a            ; now Tactics Vector X byte 1 is value
 397  60A2 C9                                   ret
 398  60A3              ;..................................................................................................................................
 399  60A3              ; copy nose and side rotation matricies
 400  60A3 23           CopyRotmatToTactics:    inc     hl                                  ; optimise later by starting at x hi
 401  60A4 7E                                   ld      a,(hl)
 402  60A5 47                                   ld      b,a
 403  60A6 E6 80                                and     $80
 404  60A8 32 60 C0                             ld      (UBnKTacticsRotMatXSign),a
 405  60AB 78                                   ld      a,b
 406  60AC E6 7F                                and     $7F
 407  60AE 32 5F C0                             ld      (UBnKTacticsRotMatX),a
 408  60B1 23                                   inc     hl
 409  60B2 23                                   inc     hl
 410  60B3 7E                                   ld      a,(hl)
 411  60B4 47                                   ld      b,a
 412  60B5 E6 80                                and     $80
 413  60B7 32 62 C0                             ld      (UBnKTacticsRotMatYSign),a
 414  60BA 78                                   ld      a,b
 415  60BB E6 7F                                and     $7F
 416  60BD 32 61 C0                             ld      (UBnKTacticsRotMatY),a
 417  60C0 23                                   inc     hl
 418  60C1 23                                   inc     hl
 419  60C2 7E                                   ld      a,(hl)
 420  60C3 47                                   ld      b,a
 421  60C4 E6 80                                and     $80
 422  60C6 32 64 C0                             ld      (UBnKTacticsRotMatZSign),a
 423  60C9 78                                   ld      a,b
 424  60CA E6 7F                                and     $7F
 425  60CC 32 63 C0                             ld      (UBnKTacticsRotMatZ),a
 426  60CF C9                                   ret
 427  60D0
 428  60D0              ;..................................................................................................................................
 429  60D0              ; Calculate dot products of roof and side against UBnKDirNorm
 430  60D0              ; UBnKDotProductNose = nose . direction = nose.x * dir x + nose.y * diry + nose.z * dirz
 431  60D0              ; UBnKDotProductSide = side . direction = side.x * dir x + side.y * diry + side.z * dirz
 432  60D0 CD A3 60     CalculateDotProducts:   call    CopyRotmatToTactics                 ; get matrix to work area
 433  60D3 3A 5F C0     .CalcXValue:            ld      a,(UBnKTacticsRotMatX)              ; stack value of rotmatx & dir x
 434  60D6 57                                   ld      d,a                                 ; .
 435  60D7 3A 77 C0                             ld      a,(UBnKDirNormX)                    ; .
 436  60DA 5F                                   ld      e,a                                 ; .
 437  60DB ED 30                                mul     de                                  ; .
 438  60DD D5                                   push    de                                  ; save to stack for pulling into hl
 439  60DE 3A 61 C0     .CalcYValue:            ld      a,(UBnKTacticsRotMatY)              ; de = rotmaty & dir y
 440  60E1 57                                   ld      d,a                                 ; .
 441  60E2 3A 79 C0                             ld      a,(UBnKDirNormY)                    ; .
 442  60E5 5F                                   ld      e,a                                 ; .
 443  60E6 ED 30                                mul     de                                  ; .
 444  60E8 3A 78 C0     .CalcXSign:             ld      a,(UBnKDirNormXSign)                ; B  = A = Sign VecX xor sign RotMatX
 445  60EB 21 67 C0                             ld      hl,UBnKOffsetXSign                  ; .
 446  60EE AE                                   xor     (hl)                                ; .
 447  60EF 47                                   ld      b,a                                 ; .
 448  60F0 3A 7A C0     .CalcYSign:             ld      a,(UBnKDirNormYSign)                ; B  = C = Sign VecY xor sign RotMatY
 449  60F3 21 6A C0                             ld      hl,UBnKOffsetYSign                  ; .
 450  60F6 AE                                   xor     (hl)                                ; .
 451  60F7 4F                                   ld      c,a                                 ; .
 452  60F8 E1           .SumSoFar:              pop     hl                                  ; hl = vecx * dirx
 453  60F9 CD 33 00                             call    ADDHLDESignBC                       ; BHL = vecx*dirx + vecy*diry
 454  60FC 3A 63 C0     .CalcZValue:            ld      a,(UBnKTacticsRotMatZ)              ; de = rotmatz & dir z
 455  60FF 57                                   ld      d,a                                 ; .
 456  6100 3A 7B C0                             ld      a,(UBnKDirNormZ)                    ; .
 457  6103 5F                                   ld      e,a                                 ; .
 458  6104 ED 30                                mul     de
 459  6106 E5           .CalcZSign:             push    hl
 460  6107 3A 7C C0                             ld      a,(UBnKDirNormZSign)                ; B  = C = Sign VecY xor sign RotMatY
 461  610A 21 6D C0                             ld      hl,UBnKOffsetZSign                  ; .
 462  610D AE                                   xor     (hl)                                ; .
 463  610E 4F                                   ld      c,a                                 ; so now CDE = z
 464  610F E1                                   pop     hl
 465  6110 CD 33 00     .SumUp:                 call    ADDHLDESignBC                       ; BHL = vecx*dirx + vecy*diry + vecz*dirz
 466  6113 C9                                   ret
 467  6114              ;..................................................................................................................................
 468  6114 2A 66 C0     CheckDistance:          ld      hl,(UBnKOffsetXHi)                 ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 469  6117 ED 5B 69 C0                          ld      de,(UBnKOffsetYHi)                 ; .
 470  611B ED 4B 6C C0                          ld      bc,(UBnKOffsetZHi)                 ; .
 471  611F 7C                                   ld      a,h                                ; sign bytes only ignoring sign bit
 472  6120 B2                                   or      d                                  ; .
 473  6121 B0                                   or      b                                  ; .
 474  6122                                      ClearSignBitA                              ; .
 474  6122 E6 7F       >                        and     SignMask8Bit
 475  6124                                      JumpIfNotZero       .FarAway               ; if upper byte is non zero then very far away
 475  6124 C2 3A 61    >                        jp	nz,.FarAway
 476  6127 B5                                   or      l                                  ; test for low byte bit 7, i.e high of 16 bit values
 477  6128 B3                                   or      e                                  ; .
 478  6129 B1                                   or      c                                  ; .
 479  612A                                      JumpIfNotZero       .NearAway              ; if mid byte is non zero then in near distance
jumpMacros.asm(25): error: Label not found: CheckDistance.NearAway
VecTest.asm(479): ^ emitted from here
 479  612A C2 00 00    >                        jp	nz,.NearAway
 480  612D CD F6 64     .Hit                    call    SetStatusHit                       ; which means if all mid bytes are zero then hit
 481  6130 CD 38 65                             call    ClearStatusFar
 482  6133 CD FC 64     .Near:                  call    SetStatusNear
 483  6136 CD 38 65                             call    ClearStatusFar
 484  6139 C9                                   ret
 485  613A CD 02 65     .FarAway:               call    SetStatusFar
 486  613D CD 32 65                             call    ClearStatusNear
 487  6140 C9                                   ret
 488  6141              ;..................................................................................................................................
 489  6141              LoadTargetData:         MMUSelectUniverseN 2                        ;
 489  6141 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 490  6145 21 20 C0                             ld      hl,UBnKxlo
 491  6148 11 16 6B                             ld      de,CurrentTargetXpos
 492  614B 01 09 00                             ld      bc,9
 493  614E ED B0                                ldir
 494  6150                                      MMUSelectUniverseN 1
 494  6150 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 495  6154 21 16 6B                             ld      hl,CurrentTargetXpos
 496  6157 11 47 C0                             ld      de,UBnKTargetXPos
 497  615A 01 09 00                             ld      bc,9
 498  615D ED B0                                ldir
 499  615F C9                                   ret
 500  6160              ;..................................................................................................................................
 501  6160 FD 21 20 C0  CalculateRelativePos:   ld      iy,UBnKxlo
 502  6164 DD 21 47 C0                          ld      ix,UBnKTargetXPos
 503  6168 CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed
 504  616B 7D                                   ld      a,l
 505  616C 32 65 C0                             ld      (UBnKOffset),a
 506  616F ED 53 66 C0                          ld      (UBnKOffset+1),de
 507  6173 FD 21 23 C0  .RelativeY:             ld      iy,UBnKylo
 508  6177 DD 21 4A C0                          ld      ix,UBnKTargetYPos
 509  617B CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed
 510  617E 7D                                   ld      a,l
 511  617F 32 68 C0                             ld      (UBnKOffset+3),a
 512  6182 ED 53 69 C0                          ld      (UBnKOffset+4),de
 513  6186 FD 21 26 C0  .RelativeZ:             ld      iy,UBnKzlo
 514  618A DD 21 4D C0                          ld      ix,UBnKTargetZPos
 515  618E CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed
 516  6191 7D                                   ld      a,l
 517  6192 32 6B C0                             ld      (UBnKOffset+6),a
 518  6195 ED 53 6C C0                          ld      (UBnKOffset+7),de
 519  6199 C9                                   ret
 520  619A              ;..................................................................................................................................
 521  619A              CreateMissile:          MMUSelectUniverseN  1
 521  619A ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 522  619E 3E 02                                ld      a,2
 523  61A0 32 46 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 524  61A3 CD D0 C6                             call    UnivSetPlayerMissile                ; .
 525  61A6 3E 1F                                ld          a,$1F
 526  61A8 32 44 C4                             ld          (SpeedAddr),a
 527  61AB C9                                   ret
 528  61AC
 529  61AC              CreateTarget:           MMUSelectUniverseN  2
 529  61AC ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 530  61B0 CD B8 C7                             call    UnivInitRuntime
 531  61B3 CD 64 C7                             call    UnivSetSpawnPosition
 532  61B6 C9                                   ret
 533  61B7
 534  61B7              ;----------------------------------------------------------------------------------------------------------------------------------
 535  61B7              ; Display Stats - go for 320 mode to test code
 536  61B7              ; Left side                         Right Side
 537  61B7              ;0123456789012345678901234567890123456789
 538  61B7              ;1Missile
 539  61B7              ;2     X        Y       Z
 540  61B7              ;3+FFFF.FF +FFFF.FF +FFFF.FF
 541  61B7              ;4Matrix    X        Y        Z
 542  61B7              ;5Side +FFFF.FF +FFFF.FF +FFFF.FF
 543  61B7              ;6Roof +FFFF.FF +FFFF.FF +FFFF.FF
 544  61B7              ;7Nose +FFFF.FF +FFFF.FF +FFFF.FF
 545  61B7              ;8
 546  61B7              ;9Speed Roll Pitch
 547  61B7              ;0+FF   +FF  +FF
 548  61B7              ;1Target
 549  61B7              ;2     X        Y       Z
 550  61B7              ;3+FFFF.FF +FFFF.FF +FFFF.FF
 551  61B7              ;4Dot Product
 552  61B7              ;5+FFFF
 553  61B7              ;6Actions
 554  61B7              ;7
 555  61B7              ;8
 556  61B7              ;9
 557  61B7 00 01 4D 69  BoilerPlate1:           DB      00 ,01,  "Missile   X        Y        Z",0
 557  61BB 73 73 69 6C
 557  61BF 65 20 20 20
 557  61C3 58 20 20 20
 557  61C7 20 20 20 20
 557  61CB 20 59 20 20
 557  61CF 20 20 20 20
 557  61D3 20 20 5A 00
 558  61D7 00 03 4D 61  BoilerPlate2:           DB      00 ,03,  "Matrix    X        Y        Z",0
 558  61DB 74 72 69 78
 558  61DF 20 20 20 20
 558  61E3 58 20 20 20
 558  61E7 20 20 20 20
 558  61EB 20 59 20 20
 558  61EF 20 20 20 20
 558  61F3 20 20 5A 00
 559  61F7 00 04 53 69  BoilerPlate3:           DB      00 ,04,  "Side",0
 559  61FB 64 65 00
 560  61FE 00 05 52 6F  BoilerPlate4:           DB      00 ,05,  "Roof",0
 560  6202 6F 66 00
 561  6205 00 06 4E 6F  BoilerPlate5:           DB      00 ,06,  "Nose",0
 561  6209 73 65 00
 562  620C 00 07 41 63  BoilerPlate6:           DB      00 ,07,  "Accell             Speed",0
 562  6210 63 65 6C 6C
 562  6214 20 20 20 20
 562  6218 20 20 20 20
 562  621C 20 20 20 20
 562  6220 20 53 70 65
 562  6224 65 64 00
 563  6227 00 08 52 6F  BoilerPlate7:           DB      00 ,08,  "Roll               Pitch",0
 563  622B 6C 6C 20 20
 563  622F 20 20 20 20
 563  6233 20 20 20 20
 563  6237 20 20 20 20
 563  623B 20 50 69 74
 563  623F 63 68 00
 564  6242 00 09 54 61  BoilerPlate8:           DB      00 ,09,  "Target    X        Y        Z",0
 564  6246 72 67 65 74
 564  624A 20 20 20 20
 564  624E 58 20 20 20
 564  6252 20 20 20 20
 564  6256 20 59 20 20
 564  625A 20 20 20 20
 564  625E 20 20 5A 00
 565  6262 00 0B 54 61  BoilerPlate9:           DB      00 ,11,  "Tactics",0
 565  6266 63 74 69 63
 565  626A 73 00
 566  626C 00 0C 52 65  BoilerPlate10:          DB      00, 12,  "Relative  X        Y        Z",0
 566  6270 6C 61 74 69
 566  6274 76 65 20 20
 566  6278 58 20 20 20
 566  627C 20 20 20 20
 566  6280 20 59 20 20
 566  6284 20 20 20 20
 566  6288 20 20 5A 00
 567  628C 00 0E 44 69  BoilerPlate11           DB      00 ,14,  "Direction X        Y        Z",0
 567  6290 72 65 63 74
 567  6294 69 6F 6E 20
 567  6298 58 20 20 20
 567  629C 20 20 20 20
 567  62A0 20 59 20 20
 567  62A4 20 20 20 20
 567  62A8 20 20 5A 00
 568  62AC 00 10 44 6F  BoilerPlate12:          DB      00 ,16,  "Dot Product Nose      Roof",0
 568  62B0 74 20 50 72
 568  62B4 6F 64 75 63
 568  62B8 74 20 4E 6F
 568  62BC 73 65 20 20
 568  62C0 20 20 20 20
 568  62C4 52 6F 6F 66
 568  62C8 00
 569  62C9 00 11 41 63  BoilerPlate13:          DB      00 ,17,  "Actions",0
 569  62CD 74 69 6F 6E
 569  62D1 73 00
 570  62D3 00 12 53 6C  ActionTextSlow:         DB      00 ,18,  "Slow",0
 570  62D7 6F 77 00
 571  62DA 08 12 46 61  ActionTextFast:         DB      08 ,18,  "Fast",0
 571  62DE 73 74 00
 572  62E1 10 12 52 6F  ActionTextRoll:         DB      16 ,18,  "Roll",0
 572  62E5 6C 6C 00
 573  62E8 18 12 50 69  ActionTextPitch:        DB      24 ,18,  "Pitch",0
 573  62EC 74 63 68 00
 574  62F0 00 13 42 65  ActionTextBehind:       DB      00 ,19,  "Behind",0
 574  62F4 68 69 6E 64
 574  62F8 00
 575  62F9 0A 13 46 6F  ActionTextForward:      DB      10 ,19,  "Forward",0
 575  62FD 72 77 61 72
 575  6301 64 00
 576  6303 00 14 4E 65  ActionTextNear          DB      00 ,20,  "Near",0
 576  6307 61 72 00
 577  630A 0A 14 46 61  ActionTextFar           DB      10 ,20,  "Far",0
 577  630E 72 00
 578  6310 14 14 48 69  ActionTextHit:          DB      20 ,20,  "Hit",0
 578  6314 74 00
 579  6316 00 12 20 20  ClearTextSlow:          DB      00 ,18,  "    ",0
 579  631A 20 20 00
 580  631D 08 12 20 20  ClearTextFast:          DB      08 ,18,  "    ",0
 580  6321 20 20 00
 581  6324 10 12 20 20  ClearTextRoll:          DB      16 ,18,  "    ",0
 581  6328 20 20 00
 582  632B 18 12 20 20  ClearTextPitch:         DB      24 ,18,  "     ",0
 582  632F 20 20 20 00
 583  6333 00 13 20 20  ClearTextBehind:        DB      00 ,19,  "      ",0
 583  6337 20 20 20 20
 583  633B 00
 584  633C 0A 13 20 20  ClearTextForward:       DB      10 ,19,  "       ",0
 584  6340 20 20 20 20
 584  6344 20 00
 585  6346 14 14 20 20  ClearTextHit:           DB      20 ,20,  "   ",0
 585  634A 20 00
 586  634C 00 14 20 20  ClearTextNear           DB      00 ,20,  "    ",0
 586  6350 20 20 00
 587  6353 0A 14 20 20  ClearTextFar            DB      10 ,20,  "   ",0
 587  6357 20 00
 588  6359
 589  6359 00           StatusSlow              DB      0
 590  635A 00           StatusFast              DB      0
 591  635B 00           StatusRoll              DB      0
 592  635C 00           StatusPitch             DB      0
 593  635D 00           StatusBehind            DB      0
 594  635E 00           StatusForward           DB      0
 595  635F 00           StatusNear              DB      0
 596  6360 00           StatusFar               DB      0
 597  6361 00           StatusHit               DB      0
 598  6362              ;                                         0123456789ABCDEF0123456789AB
 599  6362              XPosX                   equ     $06
 600  6362              XPosY                   equ     $0F
 601  6362              XPosZ                   equ     $18
 602  6362              RowMissle               equ     02
 603  6362              RowMatrix1              equ     04
 604  6362              RowMatrix2              equ     05
 605  6362              RowMatrix3              equ     06
 606  6362              RowAccellSpeed          equ     07
 607  6362              RowPitchRoll            equ     08
 608  6362              RowTarget               equ     10
 609  6362              RowRelative             equ     13
 610  6362              RowDirection            equ     15
 611  6362              RowDotProduct           equ     16
 612  6362
 613  6362 CD 3E 65     DisplayActionStatus:    call    UpdateStatusSlow
 614  6365 CD 48 65                             call    UpdateStatusFast
 615  6368 CD 52 65                             call    UpdateStatusRoll
 616  636B CD 5C 65                             call    UpdateStatusPitch
 617  636E CD 66 65                             call    UpdateStatusBehind
 618  6371 CD 70 65                             call    UpdateStatusForward
 619  6374 CD 7A 65                             call    UpdateStatusHit
 620  6377 CD 84 65                             call    UpdateStatusNear
 621  637A CD 8E 65                             call    UpdateStatusFar
 622  637D C9                                   ret
 623  637E
 624  637E D5           DisplayPosition:        push    de
 625  637F 1E 06                                ld      e,XPosX
 626  6381 DD 21 20 C0                          ld      ix,UBnKxlo
 627  6385 CD 89 64                             call    DisplayS24
 628  6388 D1                                   pop     de
 629  6389 D5                                   push    de
 630  638A 1E 0F                                ld      e,XPosY
 631  638C DD 21 23 C0                          ld      ix,UBnKylo
 632  6390 CD 89 64                             call    DisplayS24
 633  6393 D1                                   pop     de
 634  6394 1E 18                                ld      e,XPosZ
 635  6396 DD 21 26 C0                          ld      ix,UBnKzlo
 636  639A CD 89 64                             call    DisplayS24
 637  639D C9                                   ret
 638  639E
 639  639E D5           DisplayMatrixRow:       push    de
 640  639F 1E 06                                ld      e,XPosX
 641  63A1 DD E5                                push    ix
 642  63A3 CD 9C 64                             call    DisplayS16
 643  63A6 DD E1                                pop     ix
 644  63A8 D1                                   pop     de
 645  63A9 D5                                   push    de
 646  63AA 1E 0F                                ld      e,XPosY
 647  63AC DD 23                                inc     ix
 648  63AE DD 23                                inc     ix
 649  63B0 DD E5                                push    ix
 650  63B2 CD 9C 64                             call    DisplayS16
 651  63B5 DD E1                                pop     ix
 652  63B7 D1                                   pop     de
 653  63B8 1E 18                                ld      e,XPosZ
 654  63BA DD 23                                inc     ix
 655  63BC DD 23                                inc     ix
 656  63BE CD 9C 64                             call    DisplayS16
 657  63C1 C9                                   ret
 658  63C2
 659  63C2 16 0D        DisplayRelative:        ld      d,RowRelative
 660  63C4 1E 06                                ld      e,XPosX
 661  63C6 DD 21 65 C0                          ld      ix,UBnKOffset
 662  63CA CD 89 64                             call    DisplayS24
 663  63CD 16 0D                                ld      d,RowRelative
 664  63CF 1E 0F                                ld      e,XPosY
 665  63D1 DD 21 68 C0                          ld      ix,UBnKOffset+3
 666  63D5 CD 89 64                             call    DisplayS24
 667  63D8 16 0D                                ld      d,RowRelative
 668  63DA 1E 18                                ld      e,XPosZ
 669  63DC DD 21 6B C0                          ld      ix,UBnKOffset+6
 670  63E0 CD 89 64                             call    DisplayS24
 671  63E3 C9                                   ret
 672  63E4
 673  63E4 16 0F        DisplayDirection:       ld      d,RowDirection
 674  63E6 1E 06                                ld      e,XPosX
 675  63E8 DD 21 77 C0                          ld      ix,UBnKDirNormX
 676  63EC CD B7 64                             call    DisplayS08
 677  63EF 16 0F                                ld      d,RowDirection
 678  63F1 1E 0F                                ld      e,XPosY
 679  63F3 DD 21 79 C0                          ld      ix,UBnKDirNormY
 680  63F7 CD B7 64                             call    DisplayS08
 681  63FA 16 0F                                ld      d,RowDirection
 682  63FC 1E 18                                ld      e,XPosZ
 683  63FE DD 21 7B C0                          ld      ix,UBnKDirNormZ
 684  6402 CD B7 64                             call    DisplayS08
 685  6405 C9                                   ret
 686  6406
 687  6406 3A 7F C0     DisplayDotProduct:      ld      a,(UBnKDotProductNoseSign)
 688  6409 16 10                                ld      d,RowDotProduct
 689  640B 1E 11                                ld      e,XPosY+2
 690  640D CD EE E1                             call    l1_printSignByte
 691  6410 3A 82 C0                             ld      a,(UBnKDotProductRoofSign)
 692  6413 16 10                                ld      d,RowDotProduct
 693  6415 1E 1A                                ld      e,XPosZ+2
 694  6417 CD EE E1                             call    l1_printSignByte
 695  641A 16 10                                ld      d,RowDotProduct
 696  641C 1E 12                                ld      e,XPosY+3
 697  641E DD 21 7E C0                          ld      ix,UBnKDotProductNose+1
 698  6422 CD C7 64                             call    DisplayU8
 699  6425 16 10                                ld      d,RowDotProduct
 700  6427 1E 1B                                ld      e,XPosZ+3
 701  6429 DD 21 81 C0                          ld      ix,UBnKDotProductRoof+1
 702  642D CD C7 64                             call    DisplayU8
 703  6430 C9                                   ret
 704  6431
 705  6431 16 04        DisplayMatrix:          ld      d,  RowMatrix1
 706  6433 DD 21 2A C0                          ld      ix, UBnkrotmatSidevX
 707  6437 CD 9E 63                             call    DisplayMatrixRow
 708  643A 16 05                                ld      d,  RowMatrix2
 709  643C DD 21 30 C0                          ld      ix, UBnkrotmatRoofvX
 710  6440 CD 9E 63                             call    DisplayMatrixRow
 711  6443 16 06                                ld      d,  RowMatrix3
 712  6445 DD 21 36 C0                          ld      ix, UBnkrotmatNosevX
 713  6449 CD 9E 63                             call    DisplayMatrixRow
 714  644C C9                                   ret
 715  644D
 716  644D DD 21 84 C0  DisplayAccellSpeed:     ld      ix,UBnKAccel
 717  6451 16 07                                ld      d, RowAccellSpeed
 718  6453 1E 06                                ld      e,XPosX
 719  6455 CD AC 64                             call    DisplayS8
 720  6458 DD 21 83 C0                          ld      ix,UBnKSpeed
 721  645C 16 07                                ld      d, RowAccellSpeed
 722  645E 1E 18                                ld      e,XPosZ
 723  6460 CD AC 64                             call    DisplayS8
 724  6463 C9                                   ret
 725  6464
 726  6464 DD 21 85 C0  DisplayRollPitch:       ld      ix,UBnKRotXCounter
 727  6468 16 08                                ld      d, RowPitchRoll
 728  646A 1E 06                                ld      e,XPosX
 729  646C CD AC 64                             call    DisplayS8
 730  646F DD 21 86 C0                          ld      ix,UBnKRotZCounter
 731  6473 16 08                                ld      d, RowPitchRoll
 732  6475 1E 18                                ld      e,XPosZ
 733  6477 CD AC 64                             call    DisplayS8
 734  647A C9                                   ret
 735  647B
 736  647B              DisplayBoilerLine:      MMUSelectLayer1
 736  647B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 737  647F 7E                                   ld      a,(hl)
 738  6480 5F                                   ld      e,a
 739  6481 23                                   inc     hl
 740  6482 7E                                   ld      a,(hl)
 741  6483 57                                   ld      d,a
 742  6484 23                                   inc     hl
 743  6485 CD D7 E0                             call    l1_print_at_char
 744  6488 C9                                   ret
 745  6489
 746  6489              ; Display S24 value at address IX at position DE
 747  6489              DisplayS24:             MMUSelectLayer1
 747  6489 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 748  648D DD 7E 02                             ld      a,(ix+2)
 749  6490 67                                   ld      h,a
 750  6491 DD 7E 01                             ld      a,(ix+1)
 751  6494 6F                                   ld      l,a
 752  6495 DD 7E 00                             ld      a,(ix+0)
 753  6498 CD 4F E1                             call    l1_print_s24_hex_at_char
 754  649B C9                                   ret
 755  649C
 756  649C              DisplayS16:             MMUSelectLayer1
 756  649C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 757  64A0 DD 7E 01                             ld      a,(ix+1)
 758  64A3 67                                   ld      h,a
 759  64A4 DD 7E 00                             ld      a,(ix+0)
 760  64A7 6F                                   ld      l,a
 761  64A8 CD 7B E1                             call    l1_print_s16_hex_at_char
 762  64AB C9                                   ret
 763  64AC
 764  64AC              DisplayS8:              MMUSelectLayer1
 764  64AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 765  64B0 DD 7E 00                             ld      a,(ix+0)
 766  64B3 CD B1 E1                             call    l1_print_s8_hex_at_char
 767  64B6 C9                                   ret
 768  64B7              ; As per S8 but sign is a separate lead byte
 769  64B7              DisplayS08:             MMUSelectLayer1
 769  64B7 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 770  64BB DD 7E 00                             ld      a,(ix+0)
 771  64BE 6F                                   ld      l,a
 772  64BF DD 7E 01                             ld      a,(ix+1)
 773  64C2 67                                   ld      h,a
 774  64C3 CD C8 E1                             call    l1_print_s08_hex_at_char
 775  64C6 C9                                   ret
 776  64C7
 777  64C7              DisplayU8:              MMUSelectLayer1
 777  64C7 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 778  64CB DD 7E 00                             ld      a,(ix+0)
 779  64CE CD DC E1                             call    l1_print_u8_hex_at_char
 780  64D1 C9                                   ret
 781  64D2
 782  64D2 3E FF        SetStatusSlow:          ld      a,$FF
 782  64D4 32 59 63       ld      (StatusSlow),a
 782  64D7 C9             ret
 783  64D8 3E FF        SetStatusFast:          ld      a,$FF
 783  64DA 32 5A 63       ld      (StatusFast),a
 783  64DD C9             ret
 784  64DE 3E FF        SetStatusRoll:          ld      a,$FF
 784  64E0 32 5B 63       ld      (StatusRoll),a
 784  64E3 C9             ret
 785  64E4 3E FF        SetStatusPitch:         ld      a,$FF
 785  64E6 32 5C 63       ld      (StatusPitch),a
 785  64E9 C9             ret
 786  64EA 3E FF        SetStatusBehind:        ld      a,$FF
 786  64EC 32 5D 63       ld      (StatusBehind),a
 786  64EF C9             ret
 787  64F0 3E FF        SetStatusForward:       ld      a,$FF
 787  64F2 32 5E 63       ld      (StatusForward),a
 787  64F5 C9             ret
 788  64F6 3E FF        SetStatusHit:           ld      a,$FF
 788  64F8 32 61 63       ld      (StatusHit),a
 788  64FB C9             ret
 789  64FC 3E FF        SetStatusNear:          ld      a,$FF
 789  64FE 32 5F 63       ld      (StatusNear),a
 789  6501 C9             ret
 790  6502 3E FF        SetStatusFar:           ld      a,$FF
 790  6504 32 60 63       ld      (StatusFar),a
 790  6507 C9             ret
 791  6508
 792  6508 3E 00        ClearStatusSlow:        ld      a,$00
 792  650A 32 59 63       ld      (StatusSlow),a
 792  650D C9             ret
 793  650E 3E 00        ClearStatusFast:        ld      a,$00
 793  6510 32 5A 63       ld      (StatusFast),a
 793  6513 C9             ret
 794  6514 3E 00        ClearStatusRoll:        ld      a,$00
 794  6516 32 5B 63       ld      (StatusRoll),a
 794  6519 C9             ret
 795  651A 3E 00        ClearStatusPitch:       ld      a,$00
 795  651C 32 5C 63       ld      (StatusPitch),a
 795  651F C9             ret
 796  6520 3E 00        ClearStatusBehind:      ld      a,$00
 796  6522 32 5D 63       ld      (StatusBehind),a
 796  6525 C9             ret
 797  6526 3E 00        ClearStatusForward:     ld      a,$00
 797  6528 32 5E 63       ld      (StatusForward),a
 797  652B C9             ret
 798  652C 3E 00        ClearStatusHit:         ld      a,$00
 798  652E 32 61 63       ld      (StatusHit),a
 798  6531 C9             ret
 799  6532 3E 00        ClearStatusNear:        ld      a,$00
 799  6534 32 5F 63       ld      (StatusNear),a
 799  6537 C9             ret
 800  6538 3E 00        ClearStatusFar:         ld      a,$00
 800  653A 32 60 63       ld      (StatusFar),a
 800  653D C9             ret
 801  653E
 802  653E 3A 59 63     UpdateStatusSlow:       ld      a,(StatusSlow)
 803  6541 A7                                   and     a
 804  6542 CA A3 65                             jp      z,HideSlow
 805  6545 C3 98 65                             jp      DisplaySlow
 806  6548                                      ; Implicit Return
 807  6548 3A 5A 63     UpdateStatusFast:       ld      a,(StatusFast)
 808  654B A7                                   and     a
 809  654C CA B9 65                             jp      z,HideFast
 810  654F C3 AE 65                             jp      DisplayFast
 811  6552                                      ; Implicit Return
 812  6552 3A 5B 63     UpdateStatusRoll:       ld      a,(StatusRoll)
 813  6555 A7                                   and     a
 814  6556 CA CF 65                             jp      z,HideRoll
 815  6559 C3 C4 65                             jp      DisplayRoll
 816  655C                                      ; Implicit Return
 817  655C 3A 5C 63     UpdateStatusPitch:      ld      a,(StatusPitch)
 818  655F A7                                   and     a
 819  6560 CA E5 65                             jp      z,HidePitch
 820  6563 C3 DA 65                             jp      DisplayPitch
 821  6566                                      ; Implicit Return
 822  6566 3A 5D 63     UpdateStatusBehind:     ld      a,(StatusBehind)
 823  6569 A7                                   and     a
 824  656A CA FB 65                             jp      z,HideBehind
 825  656D C3 F0 65                             jp      DisplayBehind
 826  6570                                      ; Implicit Return
 827  6570 3A 5E 63     UpdateStatusForward:    ld      a,(StatusForward)
 828  6573 A7                                   and     a
 829  6574 CA 11 66                             jp      z,HideForward
 830  6577 C3 06 66                             jp      DisplayForward
 831  657A                                      ; Implicit Return
 832  657A 3A 61 63     UpdateStatusHit:        ld      a,(StatusHit)
 833  657D A7                                   and     a
 834  657E CA 29 66                             jp      z,HideHit
 835  6581 C3 1C 66                             jp      DisplayHit
 836  6584                                      ; Implicit Return
 837  6584 3A 5F 63     UpdateStatusNear:       ld      a,(StatusNear)
 838  6587 A7                                   and     a
 839  6588 CA 3F 66                             jp      z,HideNear
 840  658B C3 34 66                             jp      DisplayNear
 841  658E                                      ; Implicit Return
 842  658E 3A 60 63     UpdateStatusFar:        ld      a,(StatusFar)
 843  6591 A7                                   and     a
 844  6592 CA 55 66                             jp      z,HideFar
 845  6595 C3 4A 66                             jp      DisplayFar
 846  6598                                      ; Implicit Return
 847  6598
 848  6598              DisplaySlow             MMUSelectLayer1
 848  6598 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 849  659C 21 D3 62                             ld      hl,ActionTextSlow
 850  659F CD 7B 64                             call    DisplayBoilerLine
 851  65A2 C9                                   ret
 852  65A3
 853  65A3              HideSlow                MMUSelectLayer1
 853  65A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 854  65A7 21 16 63                             ld      hl,ClearTextSlow
 855  65AA CD 7B 64                             call    DisplayBoilerLine
 856  65AD C9                                   ret
 857  65AE
 858  65AE              DisplayFast             MMUSelectLayer1
 858  65AE ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 859  65B2 21 DA 62                             ld      hl,ActionTextFast
 860  65B5 CD 7B 64                             call    DisplayBoilerLine
 861  65B8 C9                                   ret
 862  65B9
 863  65B9              HideFast                MMUSelectLayer1
 863  65B9 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 864  65BD 21 1D 63                             ld      hl,ClearTextFast
 865  65C0 CD 7B 64                             call    DisplayBoilerLine
 866  65C3 C9                                   ret
 867  65C4
 868  65C4              DisplayRoll             MMUSelectLayer1
 868  65C4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 869  65C8 21 E1 62                             ld      hl,ActionTextRoll
 870  65CB CD 7B 64                             call    DisplayBoilerLine
 871  65CE C9                                   ret
 872  65CF
 873  65CF              HideRoll                MMUSelectLayer1
 873  65CF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 874  65D3 21 24 63                             ld      hl,ClearTextRoll
 875  65D6 CD 7B 64                             call    DisplayBoilerLine
 876  65D9 C9                                   ret
 877  65DA
 878  65DA              DisplayPitch            MMUSelectLayer1
 878  65DA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 879  65DE 21 E8 62                             ld      hl,ActionTextPitch
 880  65E1 CD 7B 64                             call    DisplayBoilerLine
 881  65E4 C9                                   ret
 882  65E5
 883  65E5              HidePitch               MMUSelectLayer1
 883  65E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 884  65E9 21 2B 63                             ld      hl,ClearTextPitch
 885  65EC CD 7B 64                             call    DisplayBoilerLine
 886  65EF C9                                   ret
 887  65F0
 888  65F0              DisplayBehind           MMUSelectLayer1
 888  65F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 889  65F4 21 F0 62                             ld      hl,ActionTextBehind
 890  65F7 CD 7B 64                             call    DisplayBoilerLine
 891  65FA C9                                   ret
 892  65FB
 893  65FB              HideBehind              MMUSelectLayer1
 893  65FB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 894  65FF 21 33 63                             ld      hl,ClearTextBehind
 895  6602 CD 7B 64                             call    DisplayBoilerLine
 896  6605 C9                                   ret
 897  6606
 898  6606              DisplayForward          MMUSelectLayer1
 898  6606 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 899  660A 21 F9 62                             ld      hl,ActionTextForward
 900  660D CD 7B 64                             call    DisplayBoilerLine
 901  6610 C9                                   ret
 902  6611
 903  6611              HideForward             MMUSelectLayer1
 903  6611 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 904  6615 21 3C 63                             ld      hl,ClearTextForward
 905  6618 CD 7B 64                             call    DisplayBoilerLine
 906  661B C9                                   ret
 907  661C
 908  661C              DisplayHit:             MMUSelectLayer1
 908  661C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 909  6620 21 10 63                             ld      hl,ActionTextHit
 910  6623 CD 7B 64                             call    DisplayBoilerLine
 911  6626 DD 01                                break
 912  6628 C9                                   ret
 913  6629
 914  6629              HideHit:                MMUSelectLayer1
 914  6629 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 915  662D 21 46 63                             ld      hl,ClearTextHit
 916  6630 CD 7B 64                             call    DisplayBoilerLine
 917  6633 C9                                   ret
 918  6634
 919  6634              DisplayNear:            MMUSelectLayer1
 919  6634 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 920  6638 21 03 63                             ld      hl,ActionTextNear
 921  663B CD 7B 64                             call    DisplayBoilerLine
 922  663E C9                                   ret
 923  663F
 924  663F              HideNear:               MMUSelectLayer1
 924  663F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 925  6643 21 4C 63                             ld      hl,ClearTextNear
 926  6646 CD 7B 64                             call    DisplayBoilerLine
 927  6649 C9                                   ret
 928  664A
 929  664A              DisplayFar:             MMUSelectLayer1
 929  664A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 930  664E 21 0A 63                             ld      hl,ActionTextFar
 931  6651 CD 7B 64                             call    DisplayBoilerLine
 932  6654 C9                                   ret
 933  6655
 934  6655              HideFar:                MMUSelectLayer1
 934  6655 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 935  6659 21 53 63                             ld      hl,ClearTextFar
 936  665C CD 7B 64                             call    DisplayBoilerLine
 937  665F C9                                   ret
 938  6660
 939  6660 21 B7 61     DisplayBoiler:          ld      hl, BoilerPlate1
 940  6663 CD 7B 64                             call    DisplayBoilerLine
 941  6666 21 D7 61                             ld      hl, BoilerPlate2
 942  6669 CD 7B 64                             call    DisplayBoilerLine
 943  666C 21 F7 61                             ld      hl, BoilerPlate3
 944  666F CD 7B 64                             call    DisplayBoilerLine
 945  6672 21 FE 61                             ld      hl, BoilerPlate4
 946  6675 CD 7B 64                             call    DisplayBoilerLine
 947  6678 21 05 62                             ld      hl, BoilerPlate5
 948  667B CD 7B 64                             call    DisplayBoilerLine
 949  667E 21 0C 62                             ld      hl, BoilerPlate6
 950  6681 CD 7B 64                             call    DisplayBoilerLine
 951  6684 21 27 62                             ld      hl, BoilerPlate7
 952  6687 CD 7B 64                             call    DisplayBoilerLine
 953  668A 21 42 62                             ld      hl, BoilerPlate8
 954  668D CD 7B 64                             call    DisplayBoilerLine
 955  6690 21 62 62                             ld      hl, BoilerPlate9
 956  6693 CD 7B 64                             call    DisplayBoilerLine
 957  6696 21 6C 62                             ld      hl, BoilerPlate10
 958  6699 CD 7B 64                             call    DisplayBoilerLine
 959  669C 21 8C 62                             ld      hl, BoilerPlate11
 960  669F CD 7B 64                             call    DisplayBoilerLine
 961  66A2 21 AC 62                             ld      hl, BoilerPlate12
 962  66A5 CD 7B 64                             call    DisplayBoilerLine
 963  66A8 21 C9 62                             ld      hl, BoilerPlate13
 964  66AB CD 7B 64                             call    DisplayBoilerLine
 965  66AE C9                                   ret
 966  66AF
 967  66AF              ;----------------------------------------------------------------------------------------------------------------------------------
 968  66AF              ; Set initial ship position as X,Y,Z 000,000,03B4
 969  66AF 21 00 00     SetInitialShipPosition: ld      hl,$0000
 970  66B2 22 20 C0                             ld      (UBnKxlo),hl
 971  66B5 21 00 00                             ld      hl,$0000
 972  66B8 22 23 C0                             ld      (UBnKylo),hl
 973  66BB 21 B4 03                             ld      hl,$03B4
 974  66BE 22 26 C0                             ld      (UBnKzlo),hl
 975  66C1 AF                                   xor     a
 976  66C2 32 22 C0                             ld      (UBnKxsgn),a
 977  66C5 32 25 C0                             ld      (UBnKysgn),a
 978  66C8 32 28 C0                             ld      (UBnKzsgn),a
 979  66CB CD C4 C7                             call	InitialiseOrientation            ;#00;
 980  66CE 3E 01                                ld      a,1
 981  66D0 32 11 6A                             ld      (DELTA),a
 982  66D3 21 04 00                             ld      hl,4
 983  66D6 22 12 6A                             ld      (DELTA4),hl
 984  66D9 C9                                   ret
 985  66DA
 986  66DA              ; Use bank 0 as source and bank 7 as write target
 987  66DA              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
 987  66DA ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
 988  66DE 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
 989  66E0 06 0C                                ld		b,12
 990  66E2 C5 F5        .ResetCopyLoop:         push	bc,,af
 991  66E4                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
 991  66E4 C6 46       >                     add    a,BankUNIVDATA0
 991  66E6 ED 92 56    >                     nextreg UniverseMMU,       a
 992  66E9 21 00 C0                             ld		hl,UniverseBankAddr
 993  66EC 11 00 00                             ld		de,dmaCopySrcAddr
 994  66EF 01 5F 19                             ld		bc,UnivBankSize
 995  66F2 CD B9 68                             call	memcopy_dma
 996  66F5 F1 C1                                pop		bc,,af
 997  66F7 57                                   ld      d,a
 998  66F8 C6 41                                add     "A"
 999  66FA 32 0B C0                             ld      (StartOfUnivN),a
1000  66FD 7A                                   ld      a,d
1001  66FE 3C                                   inc		a
1002  66FF 10 E1                                djnz	.ResetCopyLoop
1003  6701 C9                                   ret
1004  6702
1005  6702                          DISPLAY "../../Maths/Utilities/XX12EquNodeDotOrientation.asm"
1006  6702                          include "../../Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ../../Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 6702              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 6702              ; so xx12 = XX15 * XX16 row
   3+ 6702              XX12ProcessOneRow:
   4+ 6702              XX12CalcXCell:
   5+ 6702 ED 4B E4 C0          ld		bc,(UBnkXScaled)
   6+ 6706 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 6707 23           		inc		hl
   8+ 6708 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 6709 7A           		ld		a,d
  10+ 670A A8                   xor     b
  11+ 670B E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 670D DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 670F 78           		ld		a,b                                     ; now make bc abs bc
  14+ 6710 E6 7F        		and		SignMask8Bit
  15+ 6712 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 6713 E5           		push	hl
  17+ 6714 16 00                ld      d,0                                     ; d = value
  18+ 6716 60           		ld		h,b
  19+ 6717 69           		ld		l,c
  20+ 6718 CD 73 6F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 671B 22 D4 68     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 671E DD 7C        		ld		a,ixh
  23+ 6720 32 DB 68     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 6723 E1           		pop		hl
  25+ 6724              XX12CalcYCell:
  26+ 6724 ED 4B E6 C0          ld		bc,(UBnkYScaled)
  27+ 6728 23           		inc		hl
  28+ 6729 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 672A 23           		inc		hl
  30+ 672B 56           		ld		d,(hl)
  31+ 672C 7A           		ld		a,d
  32+ 672D A8                   xor     b
  33+ 672E E6 80        		and		SignOnly8Bit
  34+ 6730 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 6732 78           		ld		a,b                                     ; now make bc abs bc
  36+ 6733 E6 7F        		and		SignMask8Bit
  37+ 6735 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 6736 E5           		push	hl
  39+ 6737 16 00                ld      d,0                                     ; d = value
  40+ 6739 60           		ld		h,b
  41+ 673A 69           		ld		l,c
  42+ 673B CD 73 6F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 673E 22 D6 68     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 6741 DD 7C        		ld		a,ixh
  45+ 6743 32 DA 68     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 6746 E1           		pop		hl
  47+ 6747              XX12CalcZCell:
  48+ 6747 ED 4B E8 C0          ld		bc,(UBnkZScaled)
  49+ 674B 23           		inc		hl
  50+ 674C 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 674D 23           		inc		hl
  52+ 674E 56           		ld		d,(hl)
  53+ 674F 7A           		ld		a,d
  54+ 6750 A8                   xor     b
  55+ 6751 E6 80        		and		SignOnly8Bit
  56+ 6753 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 6755 78           		ld		a,b                                     ; now make bc abs bc
  58+ 6756 E6 7F        		and		SignMask8Bit
  59+ 6758 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 6759 16 00                ld      d,0                                     ; d = value
  61+ 675B 60           		ld		h,b
  62+ 675C 69           		ld		l,c
  63+ 675D CD 73 6F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 6760 22 D8 68     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 6763 DD 7C        		ld		a,ixh
  66+ 6765 32 DC 68     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 6768              XX12CalcCellResult:
  68+ 6768 2A D4 68     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 676B ED 5B D6 68  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 676F ED 4B DA 68  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 6773              XX12MSBOnly:
  72+ 6773 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 6774 5A           		ld		e,d									    ; for both results
  74+ 6775 AF           		xor		a									    ;
  75+ 6776 67           		ld		h,a									    ;
  76+ 6777 57           		ld		d,a									    ; so set high byte to 0
  77+ 6778 CD 33 00     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 677B 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 677C 3A DC 68     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 677F 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 6780 ED 5B D8 68  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 6784 5A           		ld		e,d                                     ; d = result /256
  83+ 6785 16 00        		ld		d,0									    ; and only us high byte
  84+ 6787 CD 33 00     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 678A C9           		ret											    ; hl = result, a = sign
  86+ 678B              								    ; hl = result, a = sign
  87+ 678B
  88+ 678B              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 678B              ;...X cell
  90+ 678B 21 B7 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 678E CD 02 67             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 6791 47           		ld		b,a                                 ; b = sign
  93+ 6792 7C           		ld		a,h                                 ; a = high byte
  94+ 6793 B0           		or		b
  95+ 6794 32 EB C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 6797 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 6798 32 EA C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 679B              ;...Y cell
  99+ 679B 21 BF C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 679E CD 02 67             call    XX12ProcessOneRow
 101+ 67A1 47           		ld		b,a
 102+ 67A2 7C           		ld		a,h
 103+ 67A3              ;		ld		a,l
 104+ 67A3 B0           		or		b
 105+ 67A4 32 ED C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 67A7 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 67A8 32 EC C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 67AB              ;...Z cell
 109+ 67AB 21 C7 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 67AE CD 02 67             call    XX12ProcessOneRow
 111+ 67B1 47           		ld		b,a
 112+ 67B2 7C                   ld		a,h
 113+ 67B3              ;		ld		a,l
 114+ 67B3 B0           		or		b
 115+ 67B4 32 EF C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 67B7 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 67B8 32 EE C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 67BB C9                   ret
 119+ 67BC
 120+ 67BC              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 67BC              ;...X cell
 122+ 67BC 21 B7 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 67BF CD 02 67             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 67C2 47           		ld		b,a                                 ; b = sign
 125+ 67C3 7C           		ld		a,h                                 ; a = high byte
 126+ 67C4 B0           		or		b
 127+ 67C5 32 EB C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 67C8 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 67C9 32 EA C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 67CC              ;...Y cell
 131+ 67CC 21 BF C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 67CF CD 02 67             call    XX12ProcessOneRow
 133+ 67D2 47           		ld		b,a
 134+ 67D3 7C           		ld		a,h
 135+ 67D4              ;		ld		a,l
 136+ 67D4 B0           		or		b
 137+ 67D5 32 ED C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 67D8 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 67D9 32 EC C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 67DC              ;...Z cell
 141+ 67DC 21 C7 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 67DF CD 02 67             call    XX12ProcessOneRow
 143+ 67E2 47           		ld		b,a
 144+ 67E3 7C                   ld		a,h
 145+ 67E4              ;		ld		a,l
 146+ 67E4 B0           		or		b
 147+ 67E5 32 EF C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 67E8 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 67E9 32 EE C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 67EC C9                   ret
 151+ 67ED
 152+ 67ED              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 67ED              ;...X cell
 154+ 67ED 21 9F C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 67F0 CD 02 67             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 67F3 47           		ld		b,a                                 ; b = sign
 157+ 67F4 7C           		ld		a,h                                 ; a = high byte
 158+ 67F5 B0           		or		b
 159+ 67F6 32 EB C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 67F9 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 67FA 32 EA C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 67FD              ;...Y cell
 163+ 67FD 21 A5 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 6800 CD 02 67             call    XX12ProcessOneRow
 165+ 6803 47           		ld		b,a
 166+ 6804 7C           		ld		a,h
 167+ 6805              ;		ld		a,l
 168+ 6805 B0           		or		b
 169+ 6806 32 ED C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 6809 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 680A 32 EC C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 680D              ;...Z cell
 173+ 680D 21 AB C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 6810 CD 02 67             call    XX12ProcessOneRow
 175+ 6813 47           		ld		b,a
 176+ 6814 7C                   ld		a,h
 177+ 6815              ;		ld		a,l
 178+ 6815 B0           		or		b
 179+ 6816 32 EF C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 6819 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 681A 32 EE C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 681D C9                   ret
# file closed: ../../Maths/Utilities/XX12EquNodeDotOrientation.asm
1007  681E                          DISPLAY "../../ModelRender/CopyXX12ToXX15.asm"
1008  681E                          include "../../ModelRender/CopyXX12ToXX15.asm"
# file opened: ../../ModelRender/CopyXX12ToXX15.asm
   1+ 681E 21 EA C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 6821 11 E4 C0                             ld      de,XX15
   3+ 6824 01 06 00                             ld      bc,6
   4+ 6827 ED B0                                ldir
   5+ 6829 C9                                   ret
   6+ 682A
   7+ 682A 21 EA C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 682D 11 F0 C0                             ld      de,XX12Save
   9+ 6830 01 06 00                             ld      bc,6
  10+ 6833 ED B0                                ldir
  11+ 6835 C9                                   ret
  12+ 6836
  13+ 6836 21 F0 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 6839 11 EA C0                             ld      de,XX12
  15+ 683C 01 06 00                             ld      bc,6
  16+ 683F ED B0                                ldir
  17+ 6841 C9                                   ret
  18+ 6842
  19+ 6842 21 EA C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 6845 11 F6 C0                             ld      de,XX12Save2
  21+ 6848 01 06 00                             ld      bc,6
  22+ 684B ED B0                                ldir
  23+ 684D C9                                   ret
  24+ 684E
  25+ 684E 21 F6 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 6851 11 EA C0                             ld      de,XX12
  27+ 6854 01 06 00                             ld      bc,6
  28+ 6857 ED B0                                ldir
  29+ 6859 C9                                   ret
  30+ 685A
# file closed: ../../ModelRender/CopyXX12ToXX15.asm
1009  685A                          DISPLAY "../../Maths/Utilities/ScaleXX16Matrix197.asm"
1010  685A                          include "../../Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ../../Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 685A              ScaleXX16Matrix197:
   2+ 685A                      IFDEF LOGMATHS
   3+ 685A ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 685A ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 685A ~                                    MMUSelectMathsTables
   6+ 685A ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 685A ~                                    inc		hl                  ;
   8+ 685A ~                                    ld		a,(hl)              ;
   9+ 685A ~                                    ld		d,a                 ;
  10+ 685A ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 685A ~                                    ld		ixl,a				; retain for sign bit
  12+ 685A ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 685A ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 685A ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 685A ~                                    push	hl                  ; save HL
  16+ 685A ~                                    call    AEquAmul256Div197Log;
  17+ 685A ~                                    pop		hl
  18+ 685A ~                                    dec     hl                  ; move back to low byte
  19+ 685A ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 685A ~                                    inc     hl                  ; move back to high byte
  21+ 685A ~                                    ld      a,ixl
  22+ 685A ~                                    ld      (hl),a              ; write back just sign bit
  23+ 685A ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 685A ~                                    inc     hl                  ; no to next vertex value
  25+ 685A ~                                    djnz	.ScaleXX16Loop
  26+ 685A ~                                    MMUSelectROM0
  27+ 685A ~                                    ret
  28+ 685A                      ELSE
  29+ 685A 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 685C 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 685E 21 9F C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 6861 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 6862 5F                                   ld		e,a                 ;
  34+ 6863 23                                   inc		hl                  ;
  35+ 6864 7E                                   ld		a,(hl)              ;
  36+ 6865 57                                   ld		d,a                 ;
  37+ 6866 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 6868 DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 686A                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 686A CB 23       >			   sla e
  39+ 686C CB 12       >			   rl  d
  40+ 686E 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 686F C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 6870 E5                                   push	hl                  ; save HL
  43+ 6871 CD 4C 74                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 6874 E1                                   pop		hl
  45+ 6875 2B                                   dec     hl                  ; move back to low byte
  46+ 6876 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 6877 23                                   inc     hl                  ; move back to high byte
  48+ 6878                                  ;    ld      a,(hl)
  49+ 6878                                  ;    and     $80
  50+ 6878 DD 7D                                ld      a,ixl
  51+ 687A 77                                   ld      (hl),a              ; write back just sign bit
  52+ 687B C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 687C 23                                   inc     hl                  ; no to next vertex value
  54+ 687D 10 E2                                djnz	.ScaleXX16Loop
  55+ 687F C9                                   ret
  56+ 6880                      ENDIF
# file closed: ../../Maths/Utilities/ScaleXX16Matrix197.asm
1011  6880
1012  6880                          ;nclude "../../Universe/StarDust/StarRoutines.asm"
1013  6880
1014  6880                          INCLUDE	"../../Hardware/memfill_dma.asm"
# file opened: ../../Hardware/memfill_dma.asm
   1+ 6880
   2+ 6880 00           memfillvalue		DB 0
   3+ 6881 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 6885 7D
   4+ 6886 80 68        memfill_astrt  		DW memfillvalue
   5+ 6888 00 40        memfill_length 		DB $00,$40
   6+ 688A 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 688D 00 00        memfill_bstrt  		DB $00,$00
   8+ 688F 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 6893              memfill_cmd_len	  	EQU $ - memfill
  10+ 6893
  11+ 6893              memfill_dma:
  12+ 6893              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 6893              .set_fill_value:
  14+ 6893 32 80 68     	ld 		(memfillvalue),a
  15+ 6896              .set_target:
  16+ 6896 22 8D 68     	ld		(memfill_bstrt),hl
  17+ 6899              .set_length:
  18+ 6899 ED 53 88 68  	ld		(memfill_length),de
  19+ 689D              .write_dma:
  20+ 689D 21 81 68     	ld 		hl, memfill
  21+ 68A0 06 12        	ld 		b, memfill_cmd_len
  22+ 68A2 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 68A4 ED B3        	otir
  24+ 68A6 C9           	ret
  25+ 68A7
# file closed: ../../Hardware/memfill_dma.asm
1015  68A7                          INCLUDE	"../../Hardware/memcopy_dma.asm"
# file opened: ../../Hardware/memcopy_dma.asm
   1+ 68A7
   2+ 68A7 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 68AB 7D
   3+ 68AC 00 00        memcopy_astrt  		DB $00,$00
   4+ 68AE 00 40        memcopy_length 		DB $00,$40
   5+ 68B0 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 68B3 00 00        memcopy_bstrt  		DB $00,$00
   7+ 68B5 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 68B9              memcopy_cmd_len	  	equ $ - memcopy
   9+ 68B9
  10+ 68B9              memcopy_dma:
  11+ 68B9              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 68B9              .set_target:
  13+ 68B9 22 B3 68     	ld		(memcopy_bstrt),hl
  14+ 68BC              .set_source:
  15+ 68BC ED 53 AC 68  	ld		(memcopy_astrt),de
  16+ 68C0              .set_length:
  17+ 68C0 ED 43 AE 68  	ld		(memcopy_length),bc
  18+ 68C4              .write_dma:
  19+ 68C4 21 A7 68     	ld 		hl, memcopy
  20+ 68C7 06 12        	ld 		b, memcopy_cmd_len
  21+ 68C9 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 68CB ED B3        	otir
  23+ 68CD C9           	ret
  24+ 68CE
# file closed: ../../Hardware/memcopy_dma.asm
1016  68CE 00 00        XX12PVarQ			DW 0
1017  68D0 00 00        XX12PVarR			DW 0
1018  68D2 00 00        XX12PVarS			DW 0
1019  68D4 00 00        XX12PVarResult1		DW 0
1020  68D6 00 00        XX12PVarResult2		DW 0
1021  68D8 00 00        XX12PVarResult3		DW 0
1022  68DA 00           XX12PVarSign2		DB 0
1023  68DB 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1024  68DC 00           XX12PVarSign3		DB 0
1025  68DD                  INCLUDE "../../Variables/constant_equates.asm"
# file opened: ../../Variables/constant_equates.asm
   1+ 68DD              ;Contants
   2+ 68DD
   3+ 68DD              SignMask8Bit		equ %01111111
   4+ 68DD              SignMask16Bit		equ %0111111111111111
   5+ 68DD              SignOnly8Bit		equ $80
   6+ 68DD              SignOnly16Bit		equ $8000
   7+ 68DD
   8+ 68DD              Bit7Only            equ %10000000
   9+ 68DD              Bit6Only            equ %01000000
  10+ 68DD              Bit5Only            equ %00100000
  11+ 68DD              Bit4Only            equ %00010000
  12+ 68DD              Bit3Only            equ %00001000
  13+ 68DD              Bit2Only            equ %00000100
  14+ 68DD              Bit1Only            equ %00000010
  15+ 68DD              Bit0Only            equ %00000001
  16+ 68DD              Bit7Clear           equ %01111111
  17+ 68DD              Bit6Clear           equ %10111111
  18+ 68DD              Bit5Clear           equ %11011111
  19+ 68DD              Bit4Clear           equ %11101111
  20+ 68DD              Bit3Clear           equ %11110111
  21+ 68DD              Bit2Clear           equ %11111011
  22+ 68DD              Bit1Clear           equ %11111101
  23+ 68DD              Bit0Clear           equ %11111110
  24+ 68DD              ConstPi				equ $80
  25+ 68DD              ConstNorm           equ 197
  26+ 68DD              ;OpCodes
  27+ 68DD              OpCodeSCF           equ $37
  28+ 68DD              OpCodeCCF           equ $3F
  29+ 68DD              OpCodeAndA          equ $A7
  30+ 68DD              OpCodeClearCarryFlag equ OpCodeAndA
  31+ 68DD
  32+ 68DD              TidyInterval        equ 16
  33+ 68DD
  34+ 68DD              ;Text Tokens
  35+ 68DD              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  36+ 68DD              BrabenBellToken 	equ $0D
  37+ 68DD              AcorToken			equ $0C
  38+ 68DD              ; Cursor Bits
  39+ 68DD              CursorClimb         equ %10000000
  40+ 68DD              CursorDive          equ %01000000
  41+ 68DD              CursorLeft          equ %00100000
  42+ 68DD              CursorRight         equ %00010000
  43+ 68DD              CursorHome          equ %00001000
  44+ 68DD              CursorRecenter      equ %00000100
  45+ 68DD
  46+ 68DD              ; Intro Screen
  47+ 68DD              TitleShip			equ	$8C
  48+ 68DD              RotationUnity		equ $60
  49+ 68DD              DBCheckCode			equ $DB
  50+ 68DD              MaxVisibility		equ $1F
  51+ 68DD              FarInFront			equ $C0
  52+ 68DD              ; Equipment Flags
  53+ 68DD              EquipmentItemFitted     equ $FF
  54+ 68DD              EquipmentItemNotFitted  equ 0
  55+ 68DD              ; Universe Managment
  56+ 68DD              PlanetTypeMeridian      equ 128
  57+ 68DD              PlanetMinRadius         equ 6
  58+ 68DD
  59+ 68DD              ShipTotalModelCount     equ 44
  60+ 68DD              ShipTypeNormal          equ 0
  61+ 68DD              ShipTypeMissile         equ 1
  62+ 68DD              ShipTypeStation         equ 2
  63+ 68DD              ShipTypeJunk            equ 3
  64+ 68DD              ShipTypeScoopable       equ 4         ; a sub set of junk
  65+ 68DD              ShipTypeTargoid         equ 5
  66+ 68DD              ShipTypeUndefined1      equ 6
  67+ 68DD              ShipTypeUndefined2      equ 7
  68+ 68DD              ShipTypeUndefined3      equ 8
  69+ 68DD              ShipTypeUndefined4      equ 9
  70+ 68DD              ShipTypeUndefined5      equ 10
  71+ 68DD              ShipTypeUndefined6      equ 11
  72+ 68DD              ShipTypeUndefined7      equ 12
  73+ 68DD              ShipTypeUndefined8      equ 13
  74+ 68DD              ShipTypeUndefined9      equ 14
  75+ 68DD              ShipTypeUndefined10      equ 15
  76+ 68DD              ShipTypeNoAI            equ 16
  77+ 68DD
  78+ 68DD              ShipTypeText            equ 253
  79+ 68DD              ShipTypeDebug           equ 254
  80+ 68DD              ShipTypeEmpty           equ 255
  81+ 68DD
  82+ 68DD              SpawnTypeStation        EQU 0
  83+ 68DD              SpawnTypeBodies         EQU SpawnTypeStation        + 1
  84+ 68DD              SpawnTypeJunk           EQU SpawnTypeBodies         + 1
  85+ 68DD              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  86+ 68DD              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  87+ 68DD              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  88+ 68DD              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  89+ 68DD              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  90+ 68DD              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  91+ 68DD              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  92+ 68DD              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  93+ 68DD              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  94+ 68DD              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  95+ 68DD
  96+ 68DD
  97+ 68DD              ; Laser and Missile Settings
  98+ 68DD              ; Laser and Missile
  99+ 68DD              ShipLaserPower          equ %11110000
 100+ 68DD              ShipMissileCount        equ %00001111
 101+ 68DD              ShipMissiles1           equ %00000001
 102+ 68DD              ShipMissiles2           equ %00000010
 103+ 68DD              ShipMissiles3           equ %00000011
 104+ 68DD              ShipMissiles4           equ %00000100
 105+ 68DD              ShipMissiles5           equ %00000101
 106+ 68DD              ShipMissiles6           equ %00000110
 107+ 68DD              ShipMissiles7           equ %00000111
 108+ 68DD              ShipMissiles8           equ %00001000
 109+ 68DD              ShipMissiles9           equ %00001001
 110+ 68DD              ShipMissiles10          equ %00001010
 111+ 68DD              ShipMissiles11          equ %00001011
 112+ 68DD              ShipMissiles12          equ %00001100
 113+ 68DD              ShipMissiles13          equ %00001101
 114+ 68DD              ShipMissiles14          equ %00001110
 115+ 68DD              ShipMissiles15          equ %00001111
 116+ 68DD              ; AI Flags  UniverseAIControl
 117+ 68DD              ShipCanAnger            equ %10000000   ; Yes or no
 118+ 68DD              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 119+ 68DD              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 120+ 68DD              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 121+ 68DD              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 122+ 68DD              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 123+ 68DD              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 124+ 68DD              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 125+ 68DD              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 126+ 68DD              ShipFighterWorm         equ %00000000
 127+ 68DD              ShipFighterSidewinder   equ %00000100
 128+ 68DD              ShipFighterViper        equ %00001000
 129+ 68DD              ShipFighterThargon      equ %00001100
 130+ 68DD              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 131+ 68DD              ShipFree                equ $00000011   ; Unused bits at present for later
 132+ 68DD              ; NewBTactics
 133+ 68DD              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 134+ 68DD              ShipIsBountyHunter      equ Bit1Only   ;
 135+ 68DD              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 136+ 68DD              ShipIsPirate            equ Bit3Only   ;
 137+ 68DD              ShipIsDocking           equ Bit4Only   ;
 138+ 68DD              ShipIsBystander         equ Bit5Only   ;
 139+ 68DD              ShipIsCop               equ Bit6Only   ;
 140+ 68DD              ShipHasEscapePod        equ Bit7Only   ;
 141+ 68DD              ShipHostileNewBitNbr    equ 2
 142+ 68DD                      DISPLAY "TODO: Add bravery based on rank, new bits and type of ship"
 143+ 68DD
 144+ 68DD              ; UBnkaiatkecm
 145+ 68DD              ;Unused                 equ Bit0Only
 146+ 68DD              ;Unused                 equ Bit1Only
 147+ 68DD              ;Unused                 equ Bit2Only
 148+ 68DD              ShipIsDot               equ Bit3Only
 149+ 68DD              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 150+ 68DD              ShipExploding           equ Bit5Only
 151+ 68DD              ShipIsVisible           equ Bit6Only
 152+ 68DD              ShipAIEnabled           equ Bit7Only   ;
 153+ 68DD
 154+ 68DD
 155+ 68DD              ; UBnkaiakecm 2
 156+ 68DD              ;ShipAngryNewBitNbr      equ 4
 157+ 68DD              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 158+ 68DD              ShipNotHostile          equ Bit2Clear   ;
 159+ 68DD              ShipIsNotDot            equ Bit3Clear
 160+ 68DD              ShipIsDotBitNbr         equ 3
 161+ 68DD              ShipKilledBitNbr        equ 4
 162+ 68DD              ShipIsVisibleBitNbr     equ 6
 163+ 68DD              ShipIsScoopDockEsc      equ Bit7Only   ;
 164+ 68DD              ShipAIDisabled          equ Bit7Clear
 165+ 68DD              ShipAIEnabledBitNbr     equ 7
 166+ 68DD              ShipExplodingBitNbr     equ 5
 167+ 68DD              ; Equipment Defaults
 168+ 68DD              ECMCounterMax           equ $80
 169+ 68DD              ; Main Loop State
 170+ 68DD              StatePlayerDocked       equ $FF
 171+ 68DD              StateCompletedLaunch    equ $FD
 172+ 68DD              StateInTransition       equ $FE
 173+ 68DD              StateHJumping           equ $FC
 174+ 68DD              StateHEntering          equ $FB
 175+ 68DD              StateCompletedHJump     equ $FA
 176+ 68DD              StateNormal             equ 0
 177+ 68DD              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 178+ 68DD              StageMissileNotTargeting equ $FF
 179+ 68DD              StageMissileTargeting   equ $FE
 180+ 68DD
 181+ 68DD
 182+ 68DD              ShipMaxDistance     equ 192
 183+ 68DD              HyperSpaceTimers    equ $0B0B
 184+ 68DD
 185+ 68DD              ; -- game limts
 186+ 68DD              MaxNumberOfStars	equ 11
 187+ 68DD              ConsoleRefreshInterval  equ 5
 188+ 68DD              MaxJunkStation      equ 3
 189+ 68DD              MaxJunkFreeSpace    equ 5
 190+ 68DD              WarpCoolDownPeriod  equ 90
 191+ 68DD
 192+ 68DD              ShipTypeSize		equ	32 			;??????? just a guess for now
 193+ 68DD              ShipSST				equ 4			; its a space station
 194+ 68DD              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 195+ 68DD              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 196+ 68DD              ShipCountMax		equ	2			; For now just 2 ships to debug
 197+ 68DD              LineLimitPerShip	equ 70			; Max lines per ship
 198+ 68DD              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 199+ 68DD              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 200+ 68DD
 201+ 68DD              ; Memory page managment	(Refers to a memory slot as a place to access data)
 202+ 68DD              ShipDataSlot		equ	6			; this may move into rom swap out space later
 203+ 68DD              UniverseObjectSlot	equ	7
 204+ 68DD
 205+ 68DD              KeyForwardsView		equ	$20
 206+ 68DD              ; Game specific equates
 207+ 68DD              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 208+ 68DD              WarpSequenceCount   equ 50
 209+ 68DD
 210+ 68DD              ;...Game Colour Mapping
 211+ 68DD              L2DustColour        equ L2ColourGREY_1
 212+ 68DD              L2SunScannerBright  equ 252
 213+ 68DD              L2SunScanner        equ 180
 214+ 68DD              L2DebrisColour      equ L2ColourYELLOW_1
 215+ 68DD
 216+ 68DD
 217+ 68DD              ; Ship Data
 218+ 68DD              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 219+ 68DD              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 220+ 68DD              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 221+ 68DD              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 222+ 68DD              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 223+ 68DD              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 224+ 68DD              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 225+ 68DD              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 226+ 68DD              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 227+ 68DD              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 228+ 68DD              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 229+ 68DD              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 230+ 68DD              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 231+ 68DD              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 232+ 68DD              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 233+ 68DD              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 234+ 68DD              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 235+ 68DD              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 236+ 68DD              ;;;;00 00			 EQUW 0     \ type 18 is
 237+ 68DD              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 238+ 68DD              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 239+ 68DD              ;;;;00 00			 EQUW 0     \ type 21 is
 240+ 68DD              ;;;;00 00			 EQUW 0     \ type 22 is
 241+ 68DD              ;;;;00 00			 EQUW 0     \ type 23 is
 242+ 68DD              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 243+ 68DD              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 244+ 68DD              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 245+ 68DD              ;;;;00 00			 EQUW 0     \ type 27 is
 246+ 68DD              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 247+ 68DD              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 248+ 68DD              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 249+ 68DD              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 250+ 68DD              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 251+ 68DD              ;;;;			\ NEWB examples
 252+ 68DD              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 253+ 68DD              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 254+ 68DD              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 255+ 68DD              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 256+ 68DD              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 257+ 68DD
# file closed: ../../Variables/constant_equates.asm
1026  68DD                  INCLUDE "../../Variables/general_variables.asm"
# file opened: ../../Variables/general_variables.asm
   1+ 68DD                  IFNDEF LASER_V2
   2+ 68DD                  DEFINE  LASER_V2    1
   3+ 68DD                  ENDIF
   4+ 68DD              ; Debugging data
   5+ 68DD 00 00 00...  failureDiag DS  10              ; 10 bytes to log data before a failure
   6+ 68E7
   7+ 68E7              LogFailure:     MACRO messageAddress
   8+ 68E7 ~                            ld      hl,messageAddress
   9+ 68E7 ~                            ld      de,failureDiag
  10+ 68E7 ~                            ld      bc,10
  11+ 68E7 ~                            ldir
  12+ 68E7                              ENDM
  13+ 68E7              ;-- Memory management variables
  14+ 68E7 00 00 00...  SaveMMU0Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  15+ 68EC 00 00 00...  SaveMMU6Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  16+ 68F1 00 00 00...  SaveMMU7Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  17+ 68F6              ;-- Note these are not counters but initialised to memory locations to simplify code
  18+ 68F6              ;-- Point to the next free memory location to write to
  19+ 68F6 E7 68        SaveMMU0QueueHead:      DW      SaveMMU0Queue       ; Current last saved MMU Entry
  20+ 68F8 EC 68        SaveMMU6QueueHead:      DW      SaveMMU6Queue       ; Current last saved MMU Entry
  21+ 68FA F1 68        SaveMMU7QueueHead:      DW      SaveMMU7Queue       ; Current last saved MMU Entry
  22+ 68FC
  23+ 68FC 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  24+ 68FE 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  25+ 6900              ; Variables to simulate 6502 registers until code fixed
  26+ 6900              ; These must be here in this order as reading Y and X can then be a 16 bit read
  27+ 6900 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  28+ 6901 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  29+ 6902 00           regA		DB	0
  30+ 6903
  31+ 6903
  32+ 6903 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  33+ 6904 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  34+ 6906 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  35+ 6908
  36+ 6908
  37+ 6908
  38+ 6908              ;XX16		DS	16				; 16 byte Matrix
  39+ 6908
  40+ 6908              P0INWK							; page 0 & 46
  41+ 6908              p0INWK31						; page 0 & 65
  42+ 6908              P0INWK36						; PAGE 0 &6A
  43+ 6908
  44+ 6908 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  45+ 6909              LastNormalVisible	equ	XX4
  46+ 6909              varXX4              equ XX4
  47+ 6909
  48+ 6909
  49+ 6909
  50+ 6909 00           PATG		DB	0				; 6502 &03C9
  51+ 690A 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  52+ 690C
  53+ 690C
  54+ 690C              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  55+ 690C              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &F XX21-1,Y
  56+ 690C
  57+ 690C              ; Present System Variables
  58+ 690C
  59+ 690C 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  60+ 690D 20           RandomSeed1				DB	32	            ; 01
  61+ 690E 0C           RandomSeed2				DB	12			    ; 02
  62+ 690F 42           RandomSeed3				DB	66			    ; 03
  63+ 6910 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  64+ 6914 00           varT1					DB	0				; 06
  65+ 6915 00           SClo					DB 0				; 07
  66+ 6916 00           SChi					DB 0				; 08
  67+ 6917 00           varP					DB 0 				; 10	XX16+7
  68+ 6918 00           varPhi					DB 0 				; 11	XX16+8
  69+ 6919 00           varPhi2					DB 0 				; 12	XX16+9
  70+ 691A 00           varPhiSign              DB 0
  71+ 691B              varPp1                  equ varPhi
  72+ 691B              varPp2                  equ varPhi2
  73+ 691B              varPp3                  equ varPhiSign
  74+ 691B 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  75+ 691C 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  76+ 691D              UnivPointer				equ	UnivPointerLo
  77+ 691D 00           varV					DB 0				; 22                          XX0+4
  78+ 691E 00           varVHi					DB 0				; 23                          XX0+5
  79+ 691F 00           varXXlo                 DB 0                ; 24
  80+ 6920 00           varXXHi                 DB 0                ; 25
  81+ 6921              varXX					equ	varXXlo
  82+ 6921 00           YYlo                    DB 0                ; 26
  83+ 6922 00           YYHi                    DB 0                ; 27
  84+ 6923              varYY					equ	YYlo
  85+ 6923              											;	28
  86+ 6923              											;	29
  87+ 6923              ;PlayerShipPositionData - Must be contiguous for setup
  88+ 6923 00           BETA 					DB	0               ; 2A        (pitch done)
  89+ 6924 00           JSTY                    DB  0               ; Joystick analog
  90+ 6925 00           BET1 					DB	0               ; 2B        lower7 magnitude
  91+ 6926 00           BET2                    DB  0               ;            climb sign
  92+ 6927 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  93+ 6928 1F           BET1MAXC                DB  31              ; max climb
  94+ 6929 E1           BET1MAXD                DB  -31             ; max dive
  95+ 692A 00           XC						DB	0               ; 2C
  96+ 692B 00           YC						DB 	0               ; 2D
  97+ 692C              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  98+ 692C 00           ECMCountDown            DB  0
  99+ 692D 00           ECMLoopB                DB  0
 100+ 692E 00 00        JSTX                    DW  0               ;           Joystick analog value
 101+ 6930 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 102+ 6931 00           ALP1					DB 	0				; 31		ALP1	ABS Alpha
 103+ 6932 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 104+ 6933 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 105+ 6934 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 106+ 6935 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 107+ 6936
 108+ 6936
 109+ 6936              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
 110+ 6936              MAXMESSAGES             EQU 5
 111+ 6936              MESSAGETIMELIMIT        EQU 20
 112+ 6936              MESSAGESIZE             EQU 33
 113+ 6936              MESSAGELINE             EQU $0001
 114+ 6936
 115+ 6936 00           MessageCount            DB  0                ; used for enquing messages later
 116+ 6937 00           MessageCurrent          DB  0
 117+ 6938 05 00        MessageIndex            DW  MAXMESSAGES
 118+ 693A 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 119+ 69DF 05           MessageTimeout          DB  MAXMESSAGES
 120+ 69E0 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 121+ 6A05
 122+ 6A05              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 123+ 6A05              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 124+ 6A05              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 125+ 6A05 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 126+ 6A06              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 127+ 6A06
 128+ 6A06
 129+ 6A06 00           QQ17					DB	0				;   72
 130+ 6A07 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 131+ 6A08 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 132+ 6A09 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 133+ 6A0A 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 134+ 6A0B 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 135+ 6A0C 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 136+ 6A0D 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 137+ 6A0E 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 138+ 6A0F 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 139+ 6A10
 140+ 6A10 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 141+ 6A11 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 142+ 6A12 00           DELT4Lo					DB 	0				; 7E
 143+ 6A13 00           DELT4Hi					DB 	0				; 7F
 144+ 6A14              DELTA4                  equ                 DELT4Lo
 145+ 6A14
 146+ 6A14              ; SoundFX Variables -------------------------------------------------------------------------------------------
 147+ 6A14              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 148+ 6A14 FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 149+ 6A15 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 150+ 6A16
 151+ 6A16
 152+ 6A16              ; Not thise must be in this order else 16 bit fetches will fail
 153+ 6A16 00           varU                    DB  0               ;   80
 154+ 6A17 00           varQ					DB  0 				;	81
 155+ 6A18 00           varR					DB  0 				;	82
 156+ 6A19 00           varS					DB  0 				;	83
 157+ 6A1A              varRS                   equ varR
 158+ 6A1A
 159+ 6A1A 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 160+ 6A1C
 161+ 6A1C 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 162+ 6A1D 00           YSAV                    DB  0               ; 85
 163+ 6A1E 00           XX17					DB	0				; 86
 164+ 6A1F              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 165+ 6A1F              varXX17                 equ  XX17
 166+ 6A1F 00           ScreenChanged           DB  0
 167+ 6A20 00           ScreenIndex             DB  0
 168+ 6A21 00 00        ScreenIndexTablePointer DW  0
 169+ 6A23 00           InvertedYAxis           DB  0
 170+ 6A24 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 171+ 6A25              											; Bit 7 Set  ShortRangeChart    $80
 172+ 6A25              											; Bit 6 Set  Galactic Chart     $40
 173+ 6A25              											; Bit 5 Set  Market Place       $20
 174+ 6A25              											; Bit 4 Set  Status Screen      $10
 175+ 6A25              											; Bit 3 Set  Display Inventory  $08
 176+ 6A25                                                          ; Bit 2 Set  Planet Data        $04
 177+ 6A25                                                          ; View bit combinations if the ones above not matched
 178+ 6A25                                                          ; bits 1 0
 179+ 6A25                                                          ;      1 1  Front view , i.e. $03
 180+ 6A25                                                          ;      1 0  Aft View          $02
 181+ 6A25                                                          ;      0 1  Left View         $01
 182+ 6A25                                                          ;      0 0  Right view        $00
 183+ 6A25              											; Bit 0 Set  Data On System
 184+ 6A25              											; 0  Space View (Not a menu)
 185+ 6A25 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 186+ 6A26 00           XX13                    DB  0               ;   89
 187+ 6A27 00           TYPE					DB	0				; 8C used for ship type in drawing
 188+ 6A28              ;Docked flag = 00 = in free space
 189+ 6A28              ;              FF = Docked
 190+ 6A28              ;              FE = transition
 191+ 6A28              ;              FD = Setup open space and transition to not docked
 192+ 6A28              ;              FC = Hyperspace manimation
 193+ 6A28              ;              FB = Hyperspace complete
 194+ 6A28 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 195+ 6A29 00           varCNT                  DB  0               ; 93
 196+ 6A2A
 197+ 6A2A 00           varK					DB	0				; 40
 198+ 6A2B 00           varKp1					DB	0				; 41
 199+ 6A2C 00           varKp2					DB	0				; 42
 200+ 6A2D 00           varKp3					DB	0				; 43
 201+ 6A2E
 202+ 6A2E 00           varK2                   DB  0               ; 9B
 203+ 6A2F 00           varK2p1                 DB  0               ; 9C K2 plus 1
 204+ 6A30 00           varK2p2                 DB  0               ; 9D K2 plus 2
 205+ 6A31 00           varK2p3                 DB  0               ; 9E K2 plus 3
 206+ 6A32
 207+ 6A32 00           Point                   DB  0               ; 9F      POINT
 208+ 6A33
 209+ 6A33 00           varT					DB	0				; D1
 210+ 6A34 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 211+ 6A35
 212+ 6A35 00 00 00...  varVector9ByteWork      DS  9
 213+ 6A3E
 214+ 6A3E 00 00 00 00  varK3					DS	4				; D2
 215+ 6A42 00           varK3p2					DB	0				; 42
 216+ 6A43 00           varK3p3					DB	0				; 43
 217+ 6A44              varK3p1					equ varK3+1			; D3
 218+ 6A44 00 00 00 00  varK4					DS	4				; E0
 219+ 6A48              varK4p1					equ varK4+1			; D3
 220+ 6A48 00 00 00...  varK5                   DS  6
 221+ 6A4E              varK5p2                 equ varK5+2
 222+ 6A4E 00 00 00...  varK6                   DS  6
 223+ 6A54              varK6p2                 equ varK6+2
 224+ 6A54              ;Heap
 225+ 6A54
 226+ 6A54 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 227+ 6A56 00 00 00...  HeapData				DS	50
 228+ 6A88              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 229+ 6A88              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 230+ 6A88              ; i.e. a list of programmed missiles in universe slot list code
 231+ 6A88 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 232+ 6A8F              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 233+ 6A8F              ;  #&5 Does J reverse both joystick channels
 234+ 6A8F              ;  #&4 Does Y reverse joystick Y channel			03CB
 235+ 6A8F              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 236+ 6A8F              ;  #&3 Does F toggle flashing information			03CA
 237+ 6A8F              ;  #&1 Does A toggle keyboard auto-recentering ?
 238+ 6A8F              ;  #&0 Caps-lock toggles keyboard flight damping
 239+ 6A8F
 240+ 6A8F              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 241+ 6A8F 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 242+ 6A94 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 243+ 6AA4 00           AlienItemsAvaliability  DB	0				; 039D
 244+ 6AA5 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 245+ 6AA6 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 246+ 6AA7 00 00 00...  WorkingSeeds			DS	6
 247+ 6AAD 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 248+ 6AB3 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 249+ 6AB9 00           PresentSystemX			DB	0				; System we are currently in
 250+ 6ABA 00           PresentSystemY			DB  0				; System we are currently in
 251+ 6ABB 00           TargetSystemX			DB	0				; System we are targeting for jump
 252+ 6ABC 00           TargetSystemY			DB	0				; System we are targeting for jump
 253+ 6ABD              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 254+ 6ABD 00           GovPresentSystem		DB	0				; 03AE Govenment
 255+ 6ABE 00           TekPresentSystem		DB	0				; 03AF Technology
 256+ 6ABF 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 257+ 6AC0 00           ExtraVesselsCounter     DB  0
 258+ 6AC1 00           JunkCount				DB  0				; $033E
 259+ 6AC2 00           AsteroidCount           DB  0               ; Not used as yet
 260+ 6AC3 00           TransporterCount        DB  0
 261+ 6AC4 00           CopCount                DB  0
 262+ 6AC5 00           PirateCount             DB  0
 263+ 6AC6              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 264+ 6AC6 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 265+ 6AC7 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 266+ 6AC8 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 267+ 6AC9 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 268+ 6ACB 00           CurrentRank             DB  0   			;
 269+ 6ACC 00           MarketPrice				DB	0				; 03AA QQ24
 270+ 6ACD 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 271+ 6ACE 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 272+ 6ACF 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 273+ 6AD0 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 274+ 6AD2              											; this is ship lines stack pointer so may be redundant with paging
 275+ 6AD2              											; LS = line stack so we will have one for now to remove later
 276+ 6AD2              ; - no longer used, holding here intil its safe to delte
 277+ 6AD2 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 278+ 6AD3 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 279+ 6AD4              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 280+ 6AD4              ; - no longer used, holding here intil its safe to delte
 281+ 6AD4
 282+ 6AD4 00           DisplayEcononmy			DB	0				; 03B8
 283+ 6AD5 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 284+ 6AD6 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 285+ 6AD7 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 286+ 6AD9 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 287+ 6ADB 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 288+ 6ADD 00 00        DisplayRadius			DW	0
 289+ 6ADF              ; --- Used in creation of sun and planet and working out ship AI for travel direction ---------------------------------------------------
 290+ 6ADF 00 00 00     ParentPlanetX           DS  3               ; used when spawining space station to determine origin
 291+ 6AE2 00 00 00     ParentPlanetY           DS  3               ; provisioned for 24 bit values
 292+ 6AE5 00 00 00     ParentPlanetZ           DS  3               ; probably later on make station position an equate to planet
 293+ 6AE8 00 00 00     PlanetXPos              DS  3               ; .
 294+ 6AEB 00 00 00     PlanetYPos              DS  3               ; .
 295+ 6AEE 00 00 00     PlanetZPos              DS  3               ; .
 296+ 6AF1 00 00 00     PlanetType              DS  3               ; .
 297+ 6AF4 00 00 00     SunXPos                 DS  3               ; .
 298+ 6AF7 00 00 00     SunYPos                 DS  3               ; .
 299+ 6AFA 00 00 00     SunZPos                 DS  3               ; .
 300+ 6AFD 00 00 00     StationXPos             DS  3               ; .
 301+ 6B00 00 00 00     StationYPos             DS  3               ; .
 302+ 6B03 00 00 00     StationZPos             DS  3               ; .
 303+ 6B06 00 00        DirectionVectorX        DS  2               ; Direction vector from one point to another
 304+ 6B08 00 00        DirectionVectorY        DS  2               ; .
 305+ 6B0A 00 00        DirectionVectorZ        DS  2               ; .
 306+ 6B0C              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 307+ 6B0C 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 308+ 6B0D 00 00        MissileXPos             DW      0
 309+ 6B0F 00           MissileXSgn             DB      0
 310+ 6B10 00 00        MissileYPos             DW      0
 311+ 6B12 00           MissileYSgn             DB      0
 312+ 6B13 00 00        MissileZPos             DW      0
 313+ 6B15 00           MissileZSgn             DB      0
 314+ 6B16 00 00        CurrentTargetXpos       DS      2
 315+ 6B18 00 00        CurrentTargetXsgn       DS      2
 316+ 6B1A 00 00        CurrentTargetYpos       DS      2
 317+ 6B1C 00 00        CurrentTargetYsgn       DS      2
 318+ 6B1E 00 00        CurrentTargetZpos       DS      2
 319+ 6B20 00 00        CurrentTargetZsgn       DS      2
 320+ 6B22 00 00        TargetVectorXpos        DS      2
 321+ 6B24 00           TargetVectorXsgn        DS      1
 322+ 6B25 00 00        TargetVectorYpos        DS      2
 323+ 6B27 00 00        TargetVectorYsgn        DS      2
 324+ 6B29 00 00        TargetVectorZpos        DS      2
 325+ 6B2B 00 00        TargetVectorZsgn        DS      2
 326+ 6B2D 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 327+ 6B2E 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 328+ 6B2F 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 329+ 6B30 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 330+ 6B31              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 331+ 6B31 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 332+ 6B37 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 333+ 6B3D 00 00 00...  ShipClassId             DS 6
 334+ 6B43              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 335+ 6B43 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 336+ 6B59 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 337+ 6B9B 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 338+ 6BB1 00           varStarX                DB 0
 339+ 6BB2 00           varStarY                DB 0
 340+ 6BB3 00 00 00...  varDustX                DS MaxNumberOfStars *2
 341+ 6BC9 00 00 00...  varDustY                DS MaxNumberOfStars *2
 342+ 6BDF 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 343+ 6BF5              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 344+ 6BF5 00           DockedFlag				DB	0				; 8E -
 345+ 6BF6 00           GamePaused              DB  0
 346+ 6BF7 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 347+ 6BF8 00           SelectedUniverseSlot    DB  0
 348+ 6BF9 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 349+ 6BFA 00           ShipBlastCheckCounter   DB  0
 350+ 6BFB 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 351+ 6BFC 00           OuterHyperCount			DB 	0				; 2E QQ22
 352+ 6BFD 00           WarpCooldown            DB  0
 353+ 6BFE 00           EventCounter            DB  0
 354+ 6BFF 00           HyperCircle             DB  0
 355+ 6C00 00           MissJumpFlag            DB  0
 356+ 6C01 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 357+ 6C02 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 358+ 6C03 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 359+ 6C04 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 360+ 6C05 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 361+ 6C06 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 362+ 6C07              UniverseSlotListSize    equ	12
 363+ 6C07 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 364+ 6C13 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 365+ 6C1F              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 366+ 6C1F 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 367+ 6C20 00           ConsoleRedrawFlag       DB  0
 368+ 6C21 00           TextInputMode           DB  0
 369+ 6C22 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 370+ 6C23                                                          ; 7    6    5    4     3    2        1    0
 371+ 6C23                                                          ; Up   Down Left Right Home Recentre
 372+ 6C23 00           FireLaserPressed        DB  0
 373+ 6C24 00           WarpPressed             DB  0
 374+ 6C25 00           CompassColor			DB	0				; 03C5
 375+ 6C26 00           SoundToggle				DB	0				; 03C6
 376+ 6C27 00           KeyboardRecenterToggle	DB	0				; 03C8
 377+ 6C28 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 378+ 6C29 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 379+ 6C2A 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 380+ 6C2B 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 381+ 6C2C 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 382+ 6C2D 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 383+ 6C2E
 384+ 6C2E              ; Working Data
 385+ 6C2E
 386+ 6C2E              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 387+ 6C2E              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 388+ 6C2E              ; $0925 =	EQUW page9+37* 1
 389+ 6C2E              ; $094A =	EQUW page9+37* 2
 390+ 6C2E              ; $096F =	EQUW page9+37* 3
 391+ 6C2E              ; $0994 =	EQUW page9+37* 4
 392+ 6C2E              ; $09B9 =	EQUW page9+37* 5
 393+ 6C2E              ; $09DE =	EQUW page9+37* 6
 394+ 6C2E              ; $0A03 =	EQUW page9+37* 7
 395+ 6C2E              ; $0A28 =	EQUW page9+37* 8
 396+ 6C2E              ; $0A4D =	EQUW page9+37* 9
 397+ 6C2E              ; $0A72 =	EQUW page9+37*10
 398+ 6C2E              ; $0A97 =	EQUW page9+37*11
 399+ 6C2E              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 400+ 6C2E
 401+ 6C2E
 402+ 6C2E
 403+ 6C2E              ; 0b00 is start address of data to save
 404+ 6C2E              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 405+ 6C2E              											; Bit mask XXXX10XX - Thargoid plan mission
 406+ 6C2E
 407+ 6C2E 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 408+ 6C2F
 409+ 6C2F 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 410+ 6C31 00 00        CommanderLoadAddress	DW	0				;0C03
 411+ 6C33 00 00        LengthOfFile			DW	0				;0C0B
 412+ 6C35 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 413+ 6C37
 414+ 6C37 00 00 00...  EdgesBuffer				DS 50
 415+ 6C69              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 416+ 6C69              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 417+ 6C69
 418+ 6C69 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 419+ 6CAF              ShipLineStackTop		equ $ - ShipLineStack
 420+ 6CAF
 421+ 6CAF              ; No longer needed
 422+ 6CAF              ;LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 423+ 6CAF              ; LSX vector overlaps with LSO
 424+ 6CAF              ;LSX2					DS	$C0				; &0EC0	    \ LSX2 bline buffer size?
 425+ 6CAF              ;LSY2					DS  $C)	           	; &0F0E	    \ LSY2
 426+ 6CAF
 427+ 6CAF              ; -- Player Runtime Data
 428+ 6CAF 00           GunTemperature          DB  0
 429+ 6CB0 00           CabinTemperature        DB  0
 430+ 6CB1 00           PlayerForwardSheild0	DB	0 ; ?????
 431+ 6CB2 00           PlayerForwardSheild1    DB	0
 432+ 6CB3 00           PlayerForwardSheild2    DB	0
 433+ 6CB4 00           ForeShield				DB	0				; These three must be contiguous
 434+ 6CB5 00           AftShield				DB	0				; .
 435+ 6CB6 00           PlayerEnergy			DB	0				; and in this order
 436+ 6CB7 00           CompassX				DB	0				; 03A8
 437+ 6CB8 00           CompassY				DB	0				; 03A9
 438+ 6CB9              ; Simplification of missile targetting
 439+ 6CB9              ; $FF no missile targettting enabled
 440+ 6CB9              ; $FE missile targetting, no target selected
 441+ 6CB9              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 442+ 6CB9              ; bit 7 clear launch at selected target in lower nibble
 443+ 6CB9 00           MissileTargettingFlag   DB  0
 444+ 6CBA              ;;MissileTarget			DB  0				; 45
 445+ 6CBA              ;;MissileLaunchFlag       DB  0
 446+ 6CBA 00 00 00...  CommanderName           DS  15
 447+ 6CC9 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 448+ 6CCA 00           BadnessStatus           DB  0
 449+ 6CCB              ;note rapidly changing views could reset these so need to consider it in an array
 450+ 6CCB              ; LaserType
 451+ 6CCB              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 452+ 6CCB              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 453+ 6CCB              ; LaserPulseRest                          ; time before pulse count resets to 0
 454+ 6CCB              ; LaserDamageOutput                       ; amount of damage for a laser hit
 455+ 6CCB              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 456+ 6CCB              ; LaserHeat                               ; amount of heat generated
 457+ 6CCB              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 458+ 6CCB              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 459+ 6CCB              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 460+ 6CCB              ; LaserTechLevel                          ; minimum tech level system to buy from
 461+ 6CCB              ; need to add copy table routines
 462+ 6CCB 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 463+ 6CCC 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 464+ 6CCD 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 465+ 6CCE 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 466+ 6CCF 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 467+ 6CD0 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 468+ 6CD1
 469+ 6CD1                  IFDEF LASER_V2
 470+ 6CD1 00           LaserBeamOn             DB  0
 471+ 6CD2 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 472+ 6CD3 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 473+ 6CD4 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 474+ 6CD5                  ENDIF
 475+ 6CD5 00           CurrLaserBurstRate      DB  0
 476+ 6CD6 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 477+ 6CD7 00           CurrLaserDamageOutput   DB  0
 478+ 6CD8 00           CurrLaserEnergyDrain    DB  0
 479+ 6CD9 00           CurrLaserHeat           DB  0
 480+ 6CDA 00           CurrLaserDurability     DB  0
 481+ 6CDB 00           CurrLaserDurabilityAmount DB  0
 482+ 6CDC
 483+ 6CDC              ; Count down timers must be aligned like this to work
 484+ 6CDC 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 485+ 6CDD 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 486+ 6CDE 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 487+ 6CDF 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 488+ 6CE0
 489+ 6CE0              ; -- Input variables
 490+ 6CE0 00           JoystickX				DB	0				; 034C JSTX
 491+ 6CE1 00           JoystickY				DB	0				; 034D JSTY
 492+ 6CE2 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 493+ 6CE3 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 494+ 6CE4
 495+ 6CE4              ; -- Console drawing data
 496+ 6CE4              FShieldStart            equ $8410
 497+ 6CE4              AShieldStart            equ $8D10
 498+ 6CE4              FuelStart               equ $9410
 499+ 6CE4
 500+ 6CE4              EnergyBar4Start         equ $A5D5
 501+ 6CE4              EnergyBar3Start         equ $ADD5
 502+ 6CE4              EnergyBar2Start         equ $B5D5
 503+ 6CE4              EnergyBar1Start         equ $BDD5
 504+ 6CE4              ; 70 /2 = 35 values
 505+ 6CE4              ;                            0                             1                             2                             3
 506+ 6CE4              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 507+ 6CE4 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 507+ 6CE8 04 04 05 06
 507+ 6CEC 06 07 08 09
 507+ 6CF0 0A 0A 0B 0C
 507+ 6CF4 0D 0E 0E 0F
 507+ 6CF8 10 10 11 13
 507+ 6CFC 14 15 15 16
 507+ 6D00 17 18 19 1A
 507+ 6D04 1B 1C 1E 1F
 507+ 6D08 1F
 508+ 6D09              SpeedoStart             equ $84D1
 509+ 6D09              ;                            0                             1                             2                             3                             4
 510+ 6D09              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 511+ 6D09 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 511+ 6D0D 04 04 05 06
 511+ 6D11 06 07 08 09
 511+ 6D15 0A 0A 0B 0C
 511+ 6D19 0D 0E 0E 0F
 511+ 6D1D 10 10 11 12
 511+ 6D21 13 14 14 15
 511+ 6D25 16 17 18 18
 511+ 6D29 19 1A 1A 1B
 511+ 6D2D 1C 1C 1D 1E
 511+ 6D31 1F
 512+ 6D32
 513+ 6D32              DialMiddleXPos          equ $E1
 514+ 6D32              RollMiddle              equ $8CE0
 515+ 6D32              PitchMiddle             equ $94E0
 516+ 6D32
 517+ 6D32
 518+ 6D32
 519+ 6D32
 520+ 6D32
# file closed: ../../Variables/general_variables.asm
1027  6D32                  ;NCLUDE "../../Variables/general_variablesRoutines.asm"
1028  6D32                  INCLUDE "../../Variables/UniverseSlotRoutines.asm"
# file opened: ../../Variables/UniverseSlotRoutines.asm
   1+ 6D32              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 6D32 AF           ClearSlotCount:         xor     a
   3+ 6D33 21 07 6C                             ld      hl,UniverseSlotList
   4+ 6D36 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 6D38 77           .fillLoop:              ld      (hl),a
   6+ 6D39 23                                   inc     hl
   7+ 6D3A 10 FC                                djnz    .fillLoop
   8+ 6D3C C9                                   ret
   9+ 6D3D
  10+ 6D3D              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 6D3D              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 6D3D              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 6D3D              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 6D3D              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 6D3D              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 6D3D              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 6D3D              ; DOE NOT WORK                         cp      $FF
  18+ 6D3D              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 6D3D              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 6D3D              ; DOE NOT WORK                         inc     hl
  21+ 6D3D              ; DOE NOT WORK                         ld      (hl),1
  22+ 6D3D              ; DOE NOT WORK                         inc     hl
  23+ 6D3D              ; DOE NOT WORK                         inc     hl
  24+ 6D3D              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 6D3D              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 6D3D C9                                   ret
  27+ 6D3E              ; Wipe all items
  28+ 6D3E 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 6D40 21 07 6C                             ld      hl,UniverseSlotList
  30+ 6D43 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 6D45 77           .fillLoop:              ld      (hl),a
  32+ 6D46 23                                   inc     hl
  33+ 6D47 10 FC                                djnz    .fillLoop
  34+ 6D49 C9                                   ret
  35+ 6D4A
  36+ 6D4A 21 07 6C     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 6D4D 36 02                                ld      (hl),ShipTypeStation
  38+ 6D4F 21 13 6C                             ld      hl,UniverseSlotType
  39+ 6D52 36 02                                ld      (hl),ShipTypeStation
  40+ 6D54 C9                                   ret
  41+ 6D55
  42+ 6D55 21 07 6C     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 6D58 ED 31                                add     hl,a
  44+ 6D5A 70                                   ld      (hl),b
  45+ 6D5B C9                                   ret
  46+ 6D5C
  47+ 6D5C 21 13 6C     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 6D5F ED 31                                add     hl,a
  49+ 6D61 70                                   ld      (hl),b
  50+ 6D62 C9                                   ret
  51+ 6D63
  52+ 6D63              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 6D63 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 6D64 0E 00                                ld      c,0
  55+ 6D66 21 07 6C                             ld      hl,UniverseSlotList
  56+ 6D69 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 6D6B 79           .fillLoop:              ld      a,c
  58+ 6D6C BA                                   cp      d
  59+ 6D6D 28 03                                jr      z,.SkipSlot
  60+ 6D6F 3E FF                                ld      a,$FF
  61+ 6D71 77                                   ld      (hl),a
  62+ 6D72 23           .SkipSlot:              inc     hl
  63+ 6D73 23                                   inc     hl
  64+ 6D74 10 F5                                djnz    .fillLoop
  65+ 6D76 C9                                   ret
  66+ 6D77
  67+ 6D77 21 07 6C     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 6D7A ED 31                                add     hl,a
  69+ 6D7C 36 FF                                ld      (hl),$FF
  70+ 6D7E 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 6D80 ED 31                                add     hl,a
  72+ 6D82 36 FF                                ld      (hl),$FF
  73+ 6D84 C9                                   ret
  74+ 6D85
  75+ 6D85              ; Space Station will always be slot 0
  76+ 6D85 21 14 6C     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 6D88 0E 01                                ld      c,1
  78+ 6D8A 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 6D8C 7E           .NextShip:              ld      a,(hl)
  80+ 6D8D FE 03                                cp      ShipTypeJunk
  81+ 6D8F CA A0 6D                             jp      z,.ProcessJunk
  82+ 6D92 FE 04                                cp      ShipTypeScoopable
  83+ 6D94 CA A0 6D                             jp      z,.ProcessJunk
  84+ 6D97 23           .DoneIteration:         inc     hl
  85+ 6D98 0C                                   inc     c
  86+ 6D99 10 F1                                djnz    .NextShip
  87+ 6D9B                                      ClearJunkCount
  87+ 6D9B             >                        ZeroA
  87+ 6D9B AF          >                        xor a
  87+ 6D9C 32 C1 6A    >                        ld      (JunkCount),a
  88+ 6D9F C9                                   ret
  89+ 6DA0 79           .ProcessJunk:           ld      a,c
  90+ 6DA1 CD 77 6D                             call    ClearSlotA
  91+ 6DA4 C3 97 6D                             jp      .DoneIteration
  92+ 6DA7
  93+ 6DA7
  94+ 6DA7 21 14 6C     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 6DAA 0E 01                                ld      c,1
  96+ 6DAC 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 6DAE 7E           .NextShip:              ld      a,(hl)
  98+ 6DAF FE 03                                cp      ShipTypeJunk
  99+ 6DB1 CA BE 6D                             jp      z,.ProcessJunk
 100+ 6DB4 FE 04                                cp      ShipTypeScoopable
 101+ 6DB6 CA BE 6D                             jp      z,.ProcessJunk
 102+ 6DB9 23           .DoneIteration:         inc     hl
 103+ 6DBA 0C                                   inc     c
 104+ 6DBB 10 F1                                djnz    .NextShip
 105+ 6DBD C9                                   ret
 106+ 6DBE 79           .ProcessJunk:           ld      a,c
 107+ 6DBF                                      MMUSelectUniverseA
 107+ 6DBF C6 46       >                     add    a,BankUNIVDATA0
 107+ 6DC1 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 6DC4 CD 9A C6                             call    WarpOffset
 109+ 6DC7 C3 B9 6D                             jp      .DoneIteration
 110+ 6DCA
 111+ 6DCA 21 14 6C     AreShipsPresent:        ld      hl,UniverseSlotType+1
 112+ 6DCD 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 113+ 6DCF 7E           .NextShip:              ld      a,(hl)
 114+ 6DD0 FE 00                                cp      ShipTypeNormal
 115+ 6DD2                                      ClearCarryFlag
 115+ 6DD2 B7          >                        or a
 116+ 6DD3 C8                                   ret     z
 117+ 6DD4 23                                   inc     hl
 118+ 6DD5 10 F8                                djnz    .NextShip
 119+ 6DD7                                      SetCarryFlag
 119+ 6DD7 37          >                        scf
 120+ 6DD8 C9                                   ret
 121+ 6DD9
 122+ 6DD9 21 07 6C     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 123+ 6DDC                                      ClearCarryFlag
 123+ 6DDC B7          >                        or a
 124+ 6DDD 7E           .SearchLoop:            ld      a,(hl)
 125+ 6DDE                                      ReturnIfAEqNusng ShipTypeStation
 125+ 6DDE FE 02       >                        cp      ShipTypeStation
 125+ 6DE0 C8          >                        ret     z
 126+ 6DE1                                      SetCarryFlag
 126+ 6DE1 37          >                        scf
 127+ 6DE2 C9                                   ret
 128+ 6DE3
 129+ 6DE3 21 07 6C     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 130+ 6DE6 ED 31                                add     hl,a
 131+ 6DE8 7E                                   ld      a,(hl)
 132+ 6DE9 C9                                   ret
 133+ 6DEA
 134+ 6DEA 21 08 6C     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 135+ 6DED 7E                                   ld      a,(hl)
 136+ 6DEE C9                                   ret
 137+ 6DEF              ;-----------------------------------------------------------------------------
 138+ 6DEF              ;-- Search the slot list for a free slot and return the result in c register.
 139+ 6DEF              ;-- Carry is clear if successful, else carry is set if all slots full
 140+ 6DEF              ;-- uses hl, bc, a
 141+ 6DEF 21 07 6C     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 142+ 6DF2 06 0C                                ld      b, UniverseSlotListSize
 143+ 6DF4 0E 00                                ld      c, 0
 144+ 6DF6 7E           .SearchLoop:            ld      a,(hl)
 145+ 6DF7                                      JumpIfAEqNusng $FF, .FoundSlot
 145+ 6DF7 FE FF       >                        cp     $FF
 145+ 6DF9 CA 02 6E    >                        jp      z,.FoundSlot
 146+ 6DFC 0C                                   inc     c
 147+ 6DFD 23                                   inc     hl
 148+ 6DFE 10 F6                                djnz    .SearchLoop
 149+ 6E00                                      SetCarryFlag
 149+ 6E00 37          >                        scf
 150+ 6E01 C9                                   ret
 151+ 6E02              .FoundSlot:             ClearCarryFlag
 151+ 6E02 B7          >                        or a
 152+ 6E03 C9                                   ret
 153+ 6E04
 154+ 6E04              ;-----------------------------------------------------------------------------
 155+ 6E04              ;-- calls FindNextFreeSlotInC and returns the result in a and c registers.
 156+ 6E04              ;-- Carry is clear if successful, else carry is set if all slots full
 157+ 6E04              ;-- uses hl, bc, a
 158+ 6E04 CD EF 6D     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 159+ 6E07 79                                   ld      a,c
 160+ 6E08 C9                                   ret
 161+ 6E09
# file closed: ../../Variables/UniverseSlotRoutines.asm
1029  6E09                  ;NCLUDE "../../Variables/EquipmentVariables.asm"
1030  6E09                  INCLUDE "../../Variables/random_number.asm"
# file opened: ../../Variables/random_number.asm
   1+ 6E09              ; dea = random number
   2+ 6E09 CD 1A 6E     doRandomS24:            call    doRandom
   3+ 6E0C 57                                   ld      d,a
   4+ 6E0D E5                                   push    hl
   5+ 6E0E CD 1A 6E                             call    doRandom
   6+ 6E11 E1                                   pop     hl
   7+ 6E12 5F                                   ld      e,a
   8+ 6E13 E5                                   push    hl
   9+ 6E14 CD 1A 6E                             call    doRandom
  10+ 6E17 E1                                   pop     hl
  11+ 6E18 C9                                   ret
  12+ 6E19
  13+ 6E19              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
  14+ 6E19              doRND2:
  15+ 6E19 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
  16+ 6E1A              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
  17+ 6E1A              ; "doRandom, Random Seed update, new value in A & C)"
  18+ 6E1A              ; uses a 'a c h l registers, de not affected
  19+ 6E1A              doRND:                  ;exx                                     ; protect bc,de,hl
  20+ 6E1A 3A 0C 69                             ld		a,(RandomSeed)					; Get Seed 0
  21+ 6E1D CB 17                                rl		a								; Rotate L including carry
  22+ 6E1F 4F                                   ld		c,a								; c =  double lo
  23+ 6E20 21 0E 69     .AddSeed2:              ld		hl,RandomSeed2
  24+ 6E23 8E                                   adc		a,(hl)							; RAND+2
  25+ 6E24 32 0C 69     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  26+ 6E27 08           .SaveBtoSeed2:          ex		af,af'
  27+ 6E28 79                                   ld		a,c
  28+ 6E29 32 0E 69                             ld		(RandomSeed2),a
  29+ 6E2C 08                                   ex		af,af'
  30+ 6E2D 3A 0D 69                             ld		a,(RandomSeed1)
  31+ 6E30 4F                                   ld		c,a								; C = Seed1
  32+ 6E31 21 0F 69     .AddSeed3:              ld		hl,RandomSeed3
  33+ 6E34 8E                                   adc		a,(hl)
  34+ 6E35 32 0D 69                             ld		(RandomSeed1),a
  35+ 6E38 08                                   ex		af,af'
  36+ 6E39 79                                   ld		a,c
  37+ 6E3A 32 0F 69                             ld		(RandomSeed3),a
  38+ 6E3D 08                                   ex		af,af'
  39+ 6E3E                                      ;exx                                     ; get bc,de,hl back
  40+ 6E3E C9                                   ret
  41+ 6E3F
  42+ 6E3F 21 0C 69     saveRandomSeeds:        ld      hl,RandomSeed
  43+ 6E42 11 10 69                             ld      de,RandomSeedSave
  44+ 6E45 01 04 00                             ld      bc,4
  45+ 6E48 ED A0                                ldi
  46+ 6E4A ED A0                                ldi
  47+ 6E4C ED A0                                ldi
  48+ 6E4E ED A0                                ldi
  49+ 6E50 C9                                   ret
  50+ 6E51
  51+ 6E51 21 10 69     restoreRandomSeeds:     ld      hl,RandomSeedSave
  52+ 6E54 11 0C 69                             ld      de,RandomSeed
  53+ 6E57 01 04 00                             ld      bc,4
  54+ 6E5A ED A0                                ldi
  55+ 6E5C ED A0                                ldi
  56+ 6E5E ED A0                                ldi
  57+ 6E60 ED A0                                ldi
  58+ 6E62 C9                                   ret
# file closed: ../../Variables/random_number.asm
1031  6E63              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1032  6E63              ; Include all maths libraries to test assembly
1033  6E63                  ;INCLUDE "../../Maths/asm_add.asm"
1034  6E63                  ;INCLUDE "../../Maths/asm_subtract.asm"
1035  6E63                  ;NCLUDE "../../Maths/DIVD3B2.asm"
1036  6E63                  INCLUDE "../../Maths/asm_multiply.asm"
# file opened: ../../Maths/asm_multiply.asm
   1+ 6E63              AequAdivDmul96Unsg:     JumpIfAGTENusng d, .Unity    			; if A >= Q then return with a 1 (unity i.e. 96)
   1+ 6E63 BA          >                        cp     d
   1+ 6E64 D2 7F 6E    >                        jp		nc,.Unity
   2+ 6E67 06 FF                                ld          b,%11111111                 ; Loop through 8 bits
   3+ 6E69 CB 27        .DivLoop:               sla         a                           ; shift a left
   4+ 6E6B                                      JumpIfALTNusng d, .skipSubtract         ; if a < q skip the following
   4+ 6E6B BA          >                        cp      d
   4+ 6E6C DA 70 6E    >                        jp		c, .skipSubtract
   5+ 6E6F 92                                   sub         d
   6+ 6E70              .skipSubtract:          FlipCarryFlag
   6+ 6E70 3F          >                        ccf
   7+ 6E71 CB 10                                rl          b
   8+ 6E73 38 F4                                jr          c,.DivLoop
   9+ 6E75 78                                   ld          a,b
  10+ 6E76 CB 3F                                srl         a                  			; t = t /4
  11+ 6E78 CB 3F                                srl			a							; result / 8
  12+ 6E7A 47                                   ld          b,a
  13+ 6E7B CB 3F                                srl         a
  14+ 6E7D 80                                   add			a,b							; result /8 + result /4
  15+ 6E7E C9                                   ret
  16+ 6E7F 3E 60        .Unity:                 ld			a,$60	    				; unity
  17+ 6E81 C9                                   ret
  18+ 6E82
  19+ 6E82
  20+ 6E82              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
  21+ 6E82 2A 18 6A                             ld  hl,(varRS)
  22+ 6E85 3A 17 6A                             ld  a,(varQ)
  23+ 6E88 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
  24+ 6E8A 11 00 00                             ld  de,0        ; de = XY
  25+ 6E8D 47                                   ld  b,a         ; b = Q
  26+ 6E8E                                      ShiftHLRight1
  26+ 6E8E CB 3C       >			   srl h
  26+ 6E90 CB 1D       >			   rr  l
  27+ 6E92 CB 20                                sla b
  28+ 6E94 30 03                                jr  nc,.LL126
  29+ 6E96 EB           .LL125:                 ex de,hl
  30+ 6E97 19                                   add hl,de
  31+ 6E98 EB                                   ex  de,hl       ; de = de + rs
  32+ 6E99              .LL126:                 ShiftHLRight1
  32+ 6E99 CB 3C       >			   srl h
  32+ 6E9B CB 1D       >			   rr  l
  33+ 6E9D CB 20                                sla b
  34+ 6E9F 38 F5                                jr      c,.LL125
  35+ 6EA1 20 F6                                jr      nz,.LL126
  36+ 6EA3 EB                                   ex      de,hl   ; hl = result
  37+ 6EA4 D1 C1                                pop     bc,,de
  38+ 6EA6 C9                                   ret
  39+ 6EA7
  40+ 6EA7              ; FMLTU - A = A * Q / 256
  41+ 6EA7 57           AequAmulQdiv256usgn:    ld      d,a
  42+ 6EA8 3A 17 6A                             ld      a,(varQ)
  43+ 6EAB 5F                                   ld      e,a
  44+ 6EAC              asm_defmutl:
  45+ 6EAC              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
  46+ 6EAC ED 30        AequDmulEdiv256usgn:    mul     de
  47+ 6EAE 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  48+ 6EAF C9                                   ret
  49+ 6EB0
  50+ 6EB0
  51+ 6EB0              ; muliptiply S7d ny S7e signed
  52+ 6EB0              ; used A and B registers
  53+ 6EB0              ; result in DE
  54+ 6EB0 7A           mulDbyESigned:          ld      a,d
  55+ 6EB1 AB                                   xor     e
  56+ 6EB2 E6 80                                and     SignOnly8Bit
  57+ 6EB4 47                                   ld      b,a
  58+ 6EB5 7A                                   ld      a,d
  59+ 6EB6 E6 7F                                and     SignMask8Bit
  60+ 6EB8 57                                   ld      d,a
  61+ 6EB9 7B                                   ld      a,e
  62+ 6EBA E6 7F                                and     SignMask8Bit
  63+ 6EBC 5F                                   ld      e,a
  64+ 6EBD ED 30                                mul     de
  65+ 6EBF 7A                                   ld      a,d
  66+ 6EC0 B0                                   or      b
  67+ 6EC1 57                                   ld      d,a
  68+ 6EC2 C9                                   ret
  69+ 6EC3
  70+ 6EC3
  71+ 6EC3
  72+ 6EC3              MacroDEEquQmulASigned:  MACRO
  73+ 6EC3 ~                                    ld      d,a                         ; save a into d
  74+ 6EC3 ~                                    ld      a,(varQ)
  75+ 6EC3 ~                                    ld      e,a
  76+ 6EC3 ~                                    xor     d                           ; a = a xor var Q
  77+ 6EC3 ~                                    and     SignOnly8Bit
  78+ 6EC3 ~                                    ld      b,a                         ; b = sign of a xor q
  79+ 6EC3 ~                                    ld      a,d                         ; d = abs d (or a reg)
  80+ 6EC3 ~                                    and     SignMask8Bit
  81+ 6EC3 ~                                    ld      d,a
  82+ 6EC3 ~                                    ld      a,e                         ; e = abs e (or varQ)
  83+ 6EC3 ~                                    and     SignMask8Bit
  84+ 6EC3 ~                                    ld      e,a
  85+ 6EC3 ~                                    mul                                 ; de = a * Q
  86+ 6EC3 ~                                    ld      a,d
  87+ 6EC3 ~                                    or      b                           ; de = a * Q leading sign bit
  88+ 6EC3 ~                                    ld      d,a
  89+ 6EC3                                      ENDM
  90+ 6EC3
  91+ 6EC3
  92+ 6EC3
  93+ 6EC3                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  94+ 6EC3              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  94+ 6EC3 57          >                        ld      d,a                         ; save a into d
  94+ 6EC4 3A 17 6A    >                        ld      a,(varQ)
  94+ 6EC7 5F          >                        ld      e,a
  94+ 6EC8 AA          >                        xor     d                           ; a = a xor var Q
  94+ 6EC9 E6 80       >                        and     SignOnly8Bit
  94+ 6ECB 47          >                        ld      b,a                         ; b = sign of a xor q
  94+ 6ECC 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  94+ 6ECD E6 7F       >                        and     SignMask8Bit
  94+ 6ECF 57          >                        ld      d,a
  94+ 6ED0 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  94+ 6ED1 E6 7F       >                        and     SignMask8Bit
  94+ 6ED3 5F          >                        ld      e,a
  94+ 6ED4 ED 30       >                        mul                                 ; de = a * Q
  94+ 6ED6 7A          >                        ld      a,d
  94+ 6ED7 B0          >                        or      b                           ; de = a * Q leading sign bit
  94+ 6ED8 57          >                        ld      d,a
  95+ 6ED9 2A 18 6A                             ld		hl,(varR)
  96+ 6EDC CD 04 6F                             call	madXAAddHLDESigned
  97+ 6EDF EB                                   ex      de,hl                       ; de = R.S + DE
  98+ 6EE0                                      ClearCarryFlag
  98+ 6EE0 B7          >                        or a
  99+ 6EE1 DD 6B                                ld      ixl,e
 100+ 6EE3 7A                                   ld      a,d
 101+ 6EE4 C9                                   ret
 102+ 6EE5
 103+ 6EE5              madDEequQmulAaddRS:     MacroDEEquQmulASigned
 103+ 6EE5 57          >                        ld      d,a                         ; save a into d
 103+ 6EE6 3A 17 6A    >                        ld      a,(varQ)
 103+ 6EE9 5F          >                        ld      e,a
 103+ 6EEA AA          >                        xor     d                           ; a = a xor var Q
 103+ 6EEB E6 80       >                        and     SignOnly8Bit
 103+ 6EED 47          >                        ld      b,a                         ; b = sign of a xor q
 103+ 6EEE 7A          >                        ld      a,d                         ; d = abs d (or a reg)
 103+ 6EEF E6 7F       >                        and     SignMask8Bit
 103+ 6EF1 57          >                        ld      d,a
 103+ 6EF2 7B          >                        ld      a,e                         ; e = abs e (or varQ)
 103+ 6EF3 E6 7F       >                        and     SignMask8Bit
 103+ 6EF5 5F          >                        ld      e,a
 103+ 6EF6 ED 30       >                        mul                                 ; de = a * Q
 103+ 6EF8 7A          >                        ld      a,d
 103+ 6EF9 B0          >                        or      b                           ; de = a * Q leading sign bit
 103+ 6EFA 57          >                        ld      d,a
 104+ 6EFB 2A 18 6A                             ld		hl,(varR)
 105+ 6EFE CD 04 6F                             call	madXAAddHLDESigned
 106+ 6F01 EB                                   ex      de,hl                       ; de = R.S + DE
 107+ 6F02                                      ClearCarryFlag
 107+ 6F02 B7          >                        or a
 108+ 6F03 C9                                   ret
 109+ 6F04
 110+ 6F04 7C           madXAAddHLDESigned:     ld      a,h
 111+ 6F05 E6 80                                and     SignOnly8Bit
 112+ 6F07 47                                   ld      b,a                         ;save sign bit in b
 113+ 6F08 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 114+ 6F09                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 114+ 6F09 FA 21 6F    >                        jp		m, .ADDHLDEOppSGN
 115+ 6F0C 78           .ADDHLDESameSigns:       ld      a,b
 116+ 6F0D B2                                   or      d
 117+ 6F0E                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 117+ 6F0E FA 13 6F    >                        jp		m, .ADDHLDESameNeg
 118+ 6F11 19                                   add     hl,de
 119+ 6F12 C9                                   ret
 120+ 6F13 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 121+ 6F14 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 122+ 6F16 67                                   ld      h,a
 123+ 6F17 7A                                   ld      a,d
 124+ 6F18 E6 7F                                and     SignMask8Bit
 125+ 6F1A 57                                   ld      d,a
 126+ 6F1B 19                                   add     hl,de
 127+ 6F1C 3E 80                                ld      a,SignOnly8Bit
 128+ 6F1E B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 129+ 6F1F 67                                   ld      h,a
 130+ 6F20 C9                                   ret
 131+ 6F21 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 132+ 6F22 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 133+ 6F24 67                                   ld      h,a
 134+ 6F25 7A                                   ld      a,d
 135+ 6F26 E6 7F                                and     SignMask8Bit
 136+ 6F28 57                                   ld      d,a
 137+ 6F29 B7                                   or      a
 138+ 6F2A ED 52                                sbc     hl,de
 139+ 6F2C 38 04                                jr      c,.ADDHLDEOppInvert
 140+ 6F2E 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 141+ 6F2F B4                                   or      h
 142+ 6F30 67                                   ld      h,a                         ; set the previou sign value
 143+ 6F31 C9                                   ret
 144+ 6F32              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 144+ 6F32 AF          >                    xor a
 144+ 6F33 95          >                    sub l
 144+ 6F34 6F          >                    ld l,a
 144+ 6F35 9F          >                    sbc a,a
 144+ 6F36 94          >                    sub h
 144+ 6F37 67          >                    ld h,a
 145+ 6F38 78                                   ld      a,b
 146+ 6F39 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 147+ 6F3B B4                                   or      h
 148+ 6F3C 67                                   ld      h,a                         ; recover sign
 149+ 6F3D C9                                   ret
 150+ 6F3E
 151+ 6F3E
 152+ 6F3E                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 153+ 6F3E                  ;
 154+ 6F3E                  ; enter : hl = 16-bit multiplier   = x
 155+ 6F3E                  ;          e =  8-bit multiplicand = y
 156+ 6F3E                  ;
 157+ 6F3E                  ; exit  : ahl = 24-bit product
 158+ 6F3E                  ;         carry reset
 159+ 6F3E                  ;
 160+ 6F3E                  ; uses  : af, de, hl
 161+ 6F3E 54           AHLequHLmulE:           ld d,h                      ; xh
 162+ 6F3F 63                                   ld h,e                      ; yl
 163+ 6F40 ED 30                                mul de                      ; xh*yl
 164+ 6F42 EB                                   ex de,hl
 165+ 6F43 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 166+ 6F45
 167+ 6F45 7A                                   ld  a,d                     ; sum products
 168+ 6F46 85                                   add a,l
 169+ 6F47 57                                   ld  d,a
 170+ 6F48 EB                                   ex de,hl
 171+ 6F49
 172+ 6F49 7A                                   ld  a,d
 173+ 6F4A CE 00                                adc a,0
 174+ 6F4C C9                                   ret
 175+ 6F4D
 176+ 6F4D 54           HLE0quH0mulE:           ld      d,h                 ; .
 177+ 6F4E 63                                   ld      h,e                 ; .
 178+ 6F4F ED 30                                mul     de                  ; de = xh * yl
 179+ 6F51 EB                                   ex      de,hl
 180+ 6F52 C9                                   ret
 181+ 6F53
 182+ 6F53                 ; multiplication of two 16-bit numbers into a 32-bit product
 183+ 6F53                 ;
 184+ 6F53                 ; enter : de = 16-bit multiplicand = y
 185+ 6F53                 ;         hl = 16-bit multiplicand = x
 186+ 6F53                 ;
 187+ 6F53                 ; exit  : dehl = 32-bit product
 188+ 6F53                 ;         carry reset
 189+ 6F53                 ;
 190+ 6F53                 ; uses  : af, bc, de, hl
 191+ 6F53
 192+ 6F53
 193+ 6F53
 194+ 6F53 45           DEHLequDEmulHL:         ld b,l                      ; x0
 195+ 6F54 4B                                   ld c,e                      ; y0
 196+ 6F55 5D                                   ld e,l                      ; x0
 197+ 6F56 6A                                   ld l,d
 198+ 6F57 E5                                   push hl                     ; x1 y1
 199+ 6F58 69                                   ld l,c                      ; y0
 200+ 6F59              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 201+ 6F59 ED 30                                mul de                      ; y1*x0
 202+ 6F5B EB                                   ex de,hl
 203+ 6F5C ED 30                                mul de                      ; x1*y0
 204+ 6F5E
 205+ 6F5E AF                                   xor a                       ; zero A
 206+ 6F5F 19                                   add hl,de                   ; sum cross products p2 p1
 207+ 6F60 8F                                   adc a,a                     ; capture carry p3
 208+ 6F61
 209+ 6F61 59                                   ld e,c                      ; x0
 210+ 6F62 50                                   ld d,b                      ; y0
 211+ 6F63 ED 30                                mul de                      ; y0*x0
 212+ 6F65
 213+ 6F65 47                                   ld b,a                      ; carry from cross products
 214+ 6F66 4C                                   ld c,h                      ; LSB of MSW from cross products
 215+ 6F67
 216+ 6F67 7A                                   ld a,d
 217+ 6F68 85                                   add a,l
 218+ 6F69 67                                   ld h,a
 219+ 6F6A 6B                                   ld l,e                      ; LSW in HL p1 p0
 220+ 6F6B
 221+ 6F6B D1                                   pop de
 222+ 6F6C ED 30                                mul de                      ; x1*y1
 223+ 6F6E
 224+ 6F6E EB                                   ex de,hl
 225+ 6F6F ED 4A                                adc hl,bc
 226+ 6F71 EB                                   ex de,hl                    ; de = final MSW
 227+ 6F72
 228+ 6F72 C9                                   ret
 229+ 6F73
 230+ 6F73              ; multiplication of two 16-bit numbers into a 16-bit product
 231+ 6F73              ; enter : de = 16-bit multiplicand
 232+ 6F73              ;         hl = 16-bit multiplicand
 233+ 6F73              ; exit  : hl = 16-bit product
 234+ 6F73              ;         carry reset
 235+ 6F73              ; maths is
 236+ 6F73              ;        hl = y , de= x
 237+ 6F73              ;        hl = xhi,ylo + (yhigh * xlow)
 238+ 6F73              ;        hl = yhih & xlo + x
 239+ 6F73              ;
 240+ 6F73              ;
 241+ 6F73              ; uses  : af, bc, de, hl
 242+ 6F73 C5           mulDEbyHL:              push    bc
 243+ 6F74 7A                                   ld a,d                      ; a = xh
 244+ 6F75 54                                   ld d,h                      ; d = yh
 245+ 6F76 67                                   ld h,a                      ; h = xh
 246+ 6F77 4B                                   ld c,e                      ; c = xl
 247+ 6F78 45                                   ld b,l                      ; b = yl
 248+ 6F79 ED 30                                mul                         ; yh * yl
 249+ 6F7B EB                                   ex de,hl
 250+ 6F7C ED 30                                mul                         ; xh * yl
 251+ 6F7E 19                                   add hl,de                   ; add cross products
 252+ 6F7F 59                                   ld e,c
 253+ 6F80 50                                   ld d,b
 254+ 6F81 ED 30                                mul                         ; yl * xl
 255+ 6F83 7D                                   ld a,l                      ; cross products lsb
 256+ 6F84 82                                   add a,d                     ; add to msb final
 257+ 6F85 67                                   ld h,a
 258+ 6F86 6B                                   ld l,e                      ; hl = final
 259+ 6F87                                      ; 83 cycles, 19 bytes
 260+ 6F87 AF                                   xor a                       ; reset carry
 261+ 6F88 C1                                   pop     bc
 262+ 6F89 C9                                   ret
 263+ 6F8A
 264+ 6F8A              ; multiplication of 16-bit numbers by 8-bit product
 265+ 6F8A              ; enter : de = 16-bit multiplicand
 266+ 6F8A              ;          l = 8-bit multiplicand
 267+ 6F8A              ; exit  : hl = 16-bit product
 268+ 6F8A              ;         carry reset
 269+ 6F8A              ; maths is
 270+ 6F8A              ;        hl = y , de= x
 271+ 6F8A              ;        hl = xhi,ylo + (yhigh * xlow)
 272+ 6F8A              ;        hl = yhih & xlo + x
 273+ 6F8A              ;
 274+ 6F8A              ;
 275+ 6F8A              ; uses  : af, bc, de, hl
 276+ 6F8A C5 E5 D5     mulDEbyLSigned:         push    bc,,hl,,de
 277+ 6F8D 7A                                   ld a,d                      ; a = xh
 278+ 6F8E 16 00                                ld d,0                      ; d = yh = 0
 279+ 6F90 67                                   ld h,a                      ; h = xh
 280+ 6F91 4B                                   ld c,e                      ; c = xl
 281+ 6F92 45                                   ld b,l                      ; b = yl
 282+ 6F93              ;                        mul                         ; yh * xl which will always be 0
 283+ 6F93 EB                                   ex de,hl                    ; de = xh yl
 284+ 6F94 ED 30                                mul                         ; xh * yl
 285+ 6F96 EB                                   ex de,hl                    ; hl = xh * yl
 286+ 6F97              ;                        add hl,de                   ; add cross products
 287+ 6F97 59                                   ld e,c                      ; de = yl xl
 288+ 6F98 50                                   ld d,b                      ; .
 289+ 6F99 ED 30                                mul                         ; yl * xl
 290+ 6F9B 7D                                   ld a,l                      ; cross products lsb
 291+ 6F9C 82                                   add a,d                     ; add to msb final
 292+ 6F9D 67                                   ld h,a
 293+ 6F9E 6B                                   ld l,e                      ; hl = final
 294+ 6F9F AF                                   xor a                       ; reset carry
 295+ 6FA0 C1                                   pop     bc                  ; get de for sign
 296+ 6FA1 78                                   ld      a,b
 297+ 6FA2 C1                                   pop     bc                  ; get hl for sign
 298+ 6FA3 A8                                   xor     b
 299+ 6FA4 E6 80                                and     $80                 ; so we now have the sign bit
 300+ 6FA6 B4                                   or      h                   ; so set the sign
 301+ 6FA7 67                                   ld      h,a                 ; .
 302+ 6FA8 C1                                   pop     bc                  ; clear up stack
 303+ 6FA9 C9                                   ret
 304+ 6FAA
 305+ 6FAA                  DISPLAY "TODO: TEST"
 306+ 6FAA 7A           mulDEbyHLSigned:        ld  a,d                     ; de = abs de
 307+ 6FAB 47                                   ld  b,a                     ;
 308+ 6FAC E6 7F                                and     $7F                 ; .
 309+ 6FAE 57                                   ld  d,a                     ; .
 310+ 6FAF 7C                                   ld  a,h                     ; hl = abs hl
 311+ 6FB0 4F                                   ld  c,a                     ; .
 312+ 6FB1 E6 7F                                and     $7F                 ; .
 313+ 6FB3 67                                   ld      h,a                 ; .
 314+ 6FB4 79                                   ld      a,c                 ; ixl = target sign of de * hl
 315+ 6FB5 AA                                   xor     d                   ;
 316+ 6FB6 E6 80                                and     $80                 ;
 317+ 6FB8 DD 6F                                ld      ixl,a               ;
 318+ 6FBA CD 73 6F                             call    mulDEbyHL           ; calculate ABS(DE) * ABS(HL)
 319+ 6FBD 7C                                   ld      a,h                 ; recover sign bit
 320+ 6FBE DD B5                                or      ixl
 321+ 6FC0 67                                   ld      h,a
 322+ 6FC1 C9                                   ret
 323+ 6FC2
 324+ 6FC2              ; CHL = multiplicand D = multiplier
 325+ 6FC2              ; DCHL = CHL * D
 326+ 6FC2 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 327+ 6FC3 AC                                   xor     h                   ; xor with h to get resultant sign
 328+ 6FC4 E6 80                                and     SignOnly8Bit        ; .
 329+ 6FC6 FD 67                                ld      iyh,a               ; iyh = copy of sign
 330+ 6FC8 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 331+ 6FC9 E6 7F                                and     SignMask8Bit        ; .
 332+ 6FCB 4F                                   ld      c,a                 ; .
 333+ 6FCC 7A                                   ld      a,d                 ; d = ABS D
 334+ 6FCD E6 7F                                and     SignMask8Bit        ; .
 335+ 6FCF              ; At this point CHL = ABS (HLE), A = ABS(D)
 336+ 6FCF 57           .mul1:                  ld      d,a                 ; first do D * L
 337+ 6FD0 5D                                   ld      e,l                 ; .
 338+ 6FD1 ED 30                                mul     de                  ; DE = L * D
 339+ 6FD3 08                                   ex      af,af'              ; save multiplier
 340+ 6FD4 6B                                   ld      l,e                 ; L = p0
 341+ 6FD5 7A                                   ld      a,d                 ; carry byte
 342+ 6FD6 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 343+ 6FD7 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 344+ 6FD8 57                                   ld      d,a                 ; and multiplier
 345+ 6FD9 ED 30                                mul     de                  ; now its D & L
 346+ 6FDB 08                                   ex      af,af'              ; get back carry byte with flags
 347+ 6FDC 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 348+ 6FDD 67                                   ld      h,a                 ; h = P1
 349+ 6FDE 7A                                   ld      a,d                 ; a = carry byte
 350+ 6FDF 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 351+ 6FE0 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 352+ 6FE1 57                                   ld      d,a                 ;
 353+ 6FE2 ED 30                                mul     de                  ;
 354+ 6FE4 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 355+ 6FE5 8B                                   adc     a,e                 ;
 356+ 6FE6 FD B4                                or      iyh                 ; recover saved resultant sign
 357+ 6FE8 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 358+ 6FE9 C9                                   ret
 359+ 6FEA
 360+ 6FEA              ;  CHL = 53456 D = 1E
 361+ 6FEA              ;  56 * 1E = A14 L = 14 carry = 0A
 362+ 6FEA              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 363+ 6FEA              ;  5  * 1E = 096 C = 96 + 6 = 9C
 364+ 6FEA              ;  CHL = 9C2214
 365+ 6FEA              ;mult3
 366+ 6FEA              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 367+ 6FEA              ; HLE = multiplicand D = multiplier
 368+ 6FEA              ; tested by mathstestsun.asm all passed
 369+ 6FEA              ; Algorithm
 370+ 6FEA              ; AC =  E * D   (save carry)         H    L    E
 371+ 6FEA              ; DE =  L * D                                  D
 372+ 6FEA              ;  L =  A + E + carry                         E*D (lo)
 373+ 6FEA              ; DE =  H * D                             L*D+ ^ (hi)
 374+ 6FEA              ;  E =  A + E + carry                H*D (lo) + carry
 375+ 6FEA              ;
 376+ 6FEA              ;
 377+ 6FEA 7A           mulHLbyDE2sc:           ld      a,d
 378+ 6FEB AC                                   xor     h
 379+ 6FEC E6 80                                and     SignOnly8Bit
 380+ 6FEE FD 67                                ld      iyh,a               ; save sign bit for result
 381+ 6FF0 7C                                   ld      a,h
 382+ 6FF1 E6 80                                and     SignOnly8Bit
 383+ 6FF3 28 06                                jr      z,.HLPositive
 384+ 6FF5              .HLNegative:            NegHL
 384+ 6FF5 AF          >                    xor a
 384+ 6FF6 95          >                    sub l
 384+ 6FF7 6F          >                    ld l,a
 384+ 6FF8 9F          >                    sbc a,a
 384+ 6FF9 94          >                    sub h
 384+ 6FFA 67          >                    ld h,a
 385+ 6FFB 7A           .HLPositive:            ld      a,d
 386+ 6FFC E6 80                                and     SignOnly8Bit
 387+ 6FFE 28 06                                jr      z,.DEPositive
 388+ 7000              .DENegative:            NegDE
 388+ 7000 AF          >                    xor a
 388+ 7001 93          >                    sub e
 388+ 7002 5F          >                    ld e,a
 388+ 7003 9F          >                    sbc a,a
 388+ 7004 92          >                    sub d
 388+ 7005 57          >                    ld d,a
 389+ 7006 CD 73 6F     .DEPositive:            call    mulDEbyHL           ; now do calc
 390+ 7009 FD 7C                                ld      a,iyh
 391+ 700B A7                                   and     a                   ; if its 0 then we are good
 392+ 700C C8                                   ret     z
 393+ 700D
 394+ 700D
 395+ 700D              ; Mulitply HLE by D leading Sign
 396+ 700D              ; used IY A BC
 397+ 700D              ; result it loaded to DELC
 398+ 700D 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 399+ 700E AC                                   xor     h                   ; xor with h to get resultant sign
 400+ 700F E6 80                                and     SignOnly8Bit        ; .
 401+ 7011 FD 67                                ld      iyh,a               ; iyh = copy of sign
 402+ 7013 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 403+ 7014 E6 7F                                and     SignMask8Bit        ; .
 404+ 7016 67                                   ld      h,a                 ; .
 405+ 7017 7A                                   ld      a,d                 ; d = ABS D
 406+ 7018 E6 7F                                and     SignMask8Bit        ; .
 407+ 701A 57                                   ld      d,a                 ; .
 408+ 701B B7           .testEitherSideZero:    or      a
 409+ 701C 28 24                                jr      z,.ResultZero
 410+ 701E 7C                                   ld      a,h
 411+ 701F B5                                   or      l
 412+ 7020 B3                                   or      e
 413+ 7021 28 1F                                jr      z,.ResultZero
 414+ 7023              ; At this point HLE = ABS (HLE), A = ABS(D)
 415+ 7023 42                                   ld      b,d                 ; save Quotient
 416+ 7024 ED 30        .mul1:                  mul     de                  ; C = E * D
 417+ 7026 4B                                   ld      c,e                 ; C = p0
 418+ 7027 FD 6A                                ld      iyl,d               ; save carry (p1)
 419+ 7029 5D           .mul2:                  ld      e,l                 ; L = L * D
 420+ 702A 50                                   ld      d,b                 ; .
 421+ 702B ED 30                                mul     de                  ; .
 422+ 702D FD 7D                                ld      a,iyl               ; get back p1
 423+ 702F 83           .carrybyte1:            add     a,e                 ; L = L + E
 424+ 7030 6F                                   ld      l,a                 ; .
 425+ 7031 FD 6A                                ld      iyl,d               ; save new carry byte
 426+ 7033 5C           .mul3:                  ld      e,h                 ; E = H * D
 427+ 7034 50                                   ld      d,b                 ; .
 428+ 7035 ED 30                                mul     de                  ; .
 429+ 7037 FD 7D                                ld      a,iyl
 430+ 7039 8B                                   adc     a,e                 ; .
 431+ 703A 5F                                   ld      e,a                 ; .
 432+ 703B 7A           .ItsNotZero:            ld      a,d                 ;
 433+ 703C CE 00                                adc     a,0                 ; final carry bit
 434+ 703E FD B4                                or      iyh                 ; bring back sign
 435+ 7040 57                                   ld      d,a                 ; s = sign
 436+ 7041 C9                                   ret
 437+ 7042 11 00 00     .ResultZero:            ld      de,0
 438+ 7045                                      ZeroA
 438+ 7045 AF          >                        xor a
 439+ 7046 4F                                   ld      c,a
 440+ 7047 6F                                   ld      l,a
 441+ 7048 C9                                   ret
 442+ 7049
 443+ 7049              ;;;
 444+ 7049              ;;;
 445+ 7049              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 446+ 7049              ;;;                        xor     h                   ; xor with h to get resultant sign
 447+ 7049              ;;;                        and     SignOnly8Bit        ; .
 448+ 7049              ;;;                        ld      iyh,a               ; iyh = copy of sign
 449+ 7049              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 450+ 7049              ;;;                        and     SignMask8Bit        ; .
 451+ 7049              ;;;                        ld      h,a                 ; .
 452+ 7049              ;;;                        ld      a,d                 ; d = ABS D
 453+ 7049              ;;;                        and     SignMask8Bit        ; .
 454+ 7049              ;;;                        ld      d,a                 ; .
 455+ 7049              ;;;.testEitherSideZero:    or      a
 456+ 7049              ;;;                        jr      z,.ResultZero
 457+ 7049              ;;;                        ld      a,h
 458+ 7049              ;;;                        or      l
 459+ 7049              ;;;                        or      e
 460+ 7049              ;;;                        jr      z,.ResultZero
 461+ 7049              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 462+ 7049              ;;;.mul1:                  mul     de                  ; C = E * D
 463+ 7049              ;;;                        ex      af,af'              ; save mulitplier
 464+ 7049              ;;;                        ld      c,e                 ; C = p0
 465+ 7049              ;;;                        ld      a,d                 ; save carry (p1)
 466+ 7049              ;;;                        ex      af,af'              ; .
 467+ 7049              ;;;.mul2:                  ld      e,l                 ; L = L * D
 468+ 7049              ;;;                        ld      d,a                 ; .
 469+ 7049              ;;;                        mul     de                  ; .
 470+ 7049              ;;;                        ex      af,af'              ; .
 471+ 7049              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 472+ 7049              ;;;                        ld      l,a                 ; .
 473+ 7049              ;;;                        ld      a,d
 474+ 7049              ;;;                        ex      af,af'              ; save new carry byte
 475+ 7049              ;;;.mul3:                  ld      e,h                 ; E = H * D
 476+ 7049              ;;;                        ld      d,a                 ; .
 477+ 7049              ;;;                        mul     de                  ; .
 478+ 7049              ;;;                        ex      af,af'              ; .
 479+ 7049              ;;;                        adc     a,e                 ; .
 480+ 7049              ;;;                        ld      e,a                 ; .
 481+ 7049              ;;;.ItsNotZero:            ld      a,d                 ;
 482+ 7049              ;;;                        adc     a,0                 ; final carry bit
 483+ 7049              ;;;                        or      iyh                 ; bring back sign
 484+ 7049              ;;;                        ld      d,a                 ; s = sign
 485+ 7049              ;;;                        ret
 486+ 7049              ;;;.ResultZero:            ld      de,0
 487+ 7049              ;;;                        ZeroA
 488+ 7049              ;;;                        ld      c,a
 489+ 7049              ;;;                        ld      l,a
 490+ 7049              ;;;                        ret
 491+ 7049
 492+ 7049              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 493+ 7049              ; enter : de = 16-bit multiplicand
 494+ 7049              ;         hl = 16-bit multiplicand
 495+ 7049              ; exit  : hl = 16-bit product
 496+ 7049              ;         carry reset
 497+ 7049              ;
 498+ 7049              ; uses  : af, bc, de, hl
 499+ 7049 00           mulDEbyHLSignByte       DB      0
 500+ 704A AF           mulDEbyHLSgnTo2c:       xor     a
 501+ 704B 32 49 70                             ld      (mulDEbyHLSignByte),a
 502+ 704E 7A           .SignDE:                ld      a,d
 503+ 704F ED 27 80                             test    $80
 504+ 7052 28 08                                jr      z,.SignHL
 505+ 7054 E6 7F        .NegativeDE:            and     $7F
 506+ 7056 57                                   ld      d,a
 507+ 7057 3E 80                                ld      a,$80
 508+ 7059 32 49 70                             ld      (mulDEbyHLSignByte),a
 509+ 705C 7C           .SignHL:                ld      a,h
 510+ 705D ED 27 80                             test    $80
 511+ 7060 28 0B                                jr      z,.AbsoluteMultiply
 512+ 7062 E6 7F        .NegativeHL:            and     $7F
 513+ 7064 67                                   ld      h,a
 514+ 7065 3A 49 70                             ld      a,(mulDEbyHLSignByte)
 515+ 7068 EE 80                                xor     $80
 516+ 706A 32 49 70                             ld      (mulDEbyHLSignByte),a
 517+ 706D CD 73 6F     .AbsoluteMultiply:      call    mulDEbyHL
 518+ 7070 3A 49 70     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 519+ 7073 ED 27 80                             test    $80
 520+ 7076 C8                                   ret     z
 521+ 7077 AF           .Negateghl: 			xor 	a
 522+ 7078 95                                   sub 	l
 523+ 7079 6F                                   ld 		l,a
 524+ 707A 9F                                   sbc 	a,a
 525+ 707B 94                                   sub 	h
 526+ 707C 67                                   ld 		h,a
 527+ 707D C9                                   ret
 528+ 707E
 529+ 707E AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 530+ 707F 32 49 70                             ld      (mulDEbyHLSignByte),a
 531+ 7082 7A           .SignDE:                ld      a,d
 532+ 7083 ED 27 80                             test    $80
 533+ 7086 28 08                                jr      z,.AbsoluteMultiply
 534+ 7088 E6 7F        .NegativeDE:            and     $7F
 535+ 708A 57                                   ld      d,a
 536+ 708B 3E 80                                ld      a,$80
 537+ 708D 32 49 70                             ld      (mulDEbyHLSignByte),a
 538+ 7090 CD 73 6F     .AbsoluteMultiply:      call    mulDEbyHL
 539+ 7093 3A 49 70     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 540+ 7096 ED 27 80                             test    $80
 541+ 7099 C8                                   ret     z
 542+ 709A AF           .Negateghl:             xor 	a
 543+ 709B 95                                   sub 	l
 544+ 709C 6F                                   ld 		l,a
 545+ 709D 9F                                   sbc 	a,a
 546+ 709E 94                                   sub 	h
 547+ 709F 67                                   ld 		h,a
 548+ 70A0 C9                                   ret
 549+ 70A1
 550+ 70A1
# file closed: ../../Maths/asm_multiply.asm
1037  70A1                  INCLUDE "../../Maths/asm_square.asm"
# file opened: ../../Maths/asm_square.asm
   1+ 70A1              ; "ASM_SQUA : TESTGOOD"
   2+ 70A1              ; "AP = A^2 A = low,P = hi"
   3+ 70A1
   4+ 70A1              inline_squde: MACRO
   5+ 70A1 ~            			ld	e,a
   6+ 70A1 ~            			ld  d,a
   7+ 70A1 ~            			mul
   8+ 70A1              			ENDM
   9+ 70A1
  10+ 70A1              inline_squa: MACRO
  11+ 70A1 ~            			ld	e,a
  12+ 70A1 ~            			ld  d,a
  13+ 70A1 ~            			mul
  14+ 70A1 ~            			ld	a,e
  15+ 70A1              			ENDM
  16+ 70A1
# file closed: ../../Maths/asm_square.asm
1038  70A1                  INCLUDE "../../Maths/asm_sine.asm"
# file opened: ../../Maths/asm_sine.asm
   1+ 70A1              ;- MACROS
   2+ 70A1              LookupSineAMacro:       MACRO
   3+ 70A1 ~                                    ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   4+ 70A1 ~                                    add     hl, a
   5+ 70A1 ~                                    ld      a,(hl)
   6+ 70A1                                      ENDM
   7+ 70A1
   8+ 70A1              ; Gets the sine of A from the lookup table into A
   9+ 70A1              LookupSineA:            LookupSineAMacro
   9+ 70A1 21 4A 71    >                        ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   9+ 70A4 ED 31       >                        add     hl, a
   9+ 70A6 7E          >                        ld      a,(hl)
  10+ 70A7 C9                                   ret
  11+ 70A8
# file closed: ../../Maths/asm_sine.asm
1039  70A8                  INCLUDE "../../Maths/asm_sqrt.asm"
# file opened: ../../Maths/asm_sqrt.asm
   1+ 70A8              ; "ASM SQRT : TESTGOOD"
   2+ 70A8              ; "16-bit integer square root"
   3+ 70A8              ; "call with de = number to square root"
   4+ 70A8              ; "returns   hl = square root"
   5+ 70A8              ; "corrupts  bc, de"
   6+ 70A8              asm_sqrt:
   7+ 70A8 01 00 80     	ld bc,$8000
   8+ 70AB 61           	ld h,c
   9+ 70AC 69           	ld l,c
  10+ 70AD              .sqrloop:
  11+ 70AD CB 38        	srl b
  12+ 70AF CB 19        	rr c
  13+ 70B1 09           	add hl,bc
  14+ 70B2 EB           	ex de,hl
  15+ 70B3 ED 52        	sbc hl,de
  16+ 70B5 38 04        	jr c,.sqrbit
  17+ 70B7 EB           	ex de,hl
  18+ 70B8 09           	add hl,bc
  19+ 70B9 18 05        	jr .sqrfi
  20+ 70BB              .sqrbit:
  21+ 70BB 19           	add hl,de
  22+ 70BC EB           	ex de,hl
  23+ 70BD B7           	or a
  24+ 70BE ED 42        	sbc hl,bc
  25+ 70C0              .sqrfi:
  26+ 70C0 CB 3C        	srl h
  27+ 70C2 CB 1D        	rr l
  28+ 70C4 CB 38        	srl b
  29+ 70C6 CB 19        	rr c
  30+ 70C8 30 E3        	jr nc,.sqrloop
  31+ 70CA C9           	ret
  32+ 70CB
  33+ 70CB
  34+ 70CB              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 70CB 3A 17 6A     	ld		a,(varQ)
  36+ 70CE 5F           	ld		e,a
  37+ 70CF 3A 18 6A     	ld		a,(varR)
  38+ 70D2 57           	ld		d,a
  39+ 70D3 CD A8 70     	call	asm_sqrt
  40+ 70D6 7D               ld      a,l
  41+ 70D7 32 17 6A     	ld		(varQ),a
  42+ 70DA C9           	ret
  43+ 70DB
# file closed: ../../Maths/asm_sqrt.asm
1040  70DB                  INCLUDE "../../Maths/asm_arctan.asm"
# file opened: ../../Maths/asm_arctan.asm
   1+ 70DB              ;Calculate A = arctan(P / Q)
   2+ 70DB              ; This finds the angle in the right-angled triangle where the opposite side to angle A is length P and the adjacent side to angle A has
   3+ 70DB              ; length Q, so:  tan(A) = P / Q
   4+ 70DB              ;
   5+ 70DB              ; The result in A is an integer representing the angle in radians. The routine returns values in the range 0 to 128,  (or 0 to PI radians).
   6+ 70DB 3A 17 69     ARCTAN:                 ld      a,(varP)                    ; LDA P                  \ Set T1 = P EOR Q, which will have the sign of P * Q
   7+ 70DE 21 17 6A                             ld      hl,varQ                     ; EOR Q
   8+ 70E1 AE                                   xor     (hl)                        ; .
   9+ 70E2 32 14 69                             ld      (varT1),a                   ; STA T1
  10+ 70E5 3A 17 6A                             ld      a,(varQ)                    ; LDA Q                  \ If Q = 0, jump to AR2 to return a right angle
  11+ 70E8 A7                                   and     a                           ; BEQ AR2
  12+ 70E9 CA 2B 71                             jp      z, .AR2                     ; .
  13+ 70EC CB 27                                sla     a                           ; ASL A                  \ Set Q = |Q| * 2 (this is a quick way of clearing the
  14+ 70EE 32 17 6A                             ld      (varQ),a                    ; STA Q                  \ sign bit, and we don't need to shift right again as we only ever use this value in the division with |P| * 2, which we set next)
  15+ 70F1 3A 17 69                             ld      a,(varP)                    ; LDA P                  \ Set A = |P| * 2
  16+ 70F4 CB 27                                sla     a                           ; ASL A
  17+ 70F6 32 17 69                             ld      (varP),a
  18+ 70F9 21 17 6A                             ld      hl,varQ
  19+ 70FC BE                                   cp      (hl)                        ; CMP Q                  \ If A >= Q, i.e. |P| > |Q|, jump to AR1 to swap P
  20+ 70FD D2 0F 71                             jp      nc, .AR1                    ; BCS AR1                \ and Q around, so we can still use the lookup table
  21+ 7100 CD 37 71                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table:  A = arctan(A / Q)  = arctan(|P / Q|)
  22+ 7103                                      ClearCarryFlag                      ; SEC                    \ Set the C flag so the SBC instruction in AR3 will be correct, should we jump there
  22+ 7103 B7          >                        or a
  23+ 7104 4F           .AR4:                   ld      c,a                         ; as we have to use a we use c as a temp, we can't push af as we would loose flags on pop
  24+ 7105 3A 14 69                             ld      a,(varT1)                   ; LDX T1                 \ If T1 is negative, i.e. P and Q have different signs,
  25+ 7108 47                                   ld      b,a                         ; .
  26+ 7109 A7                                   and     a                           ; BMI AR3                \ jump down to AR3 to return arctan(-|P / Q|)
  27+ 710A 79                                   ld      a,c                         ; .                      \ we need to get a back before jump
  28+ 710B FA 2E 71                             jp      m, .AR3                     ; .
  29+ 710E C9                                   ret                                 ; RTS                    \ Otherwise P and Q have the same sign, so our result is correct and we can return from the subroutine
  30+ 710F              ; We want to calculate arctan(t) where |t| > 1, so we can use the calculation described in the documentation for the ACT table, i.e. 64 - arctan(1 / t)
  31+ 710F              ; In the 6502 verion it works with A already being P but we will fetch it
  32+ 710F 3A 17 6A     .AR1:                   ld      a,(varQ)                    ; LDX Q                  \ Swap the values in Q and P, using the fact that we
  33+ 7112 47                                   ld      b,a                         ; .
  34+ 7113 3A 17 69                             ld      a,(varP)                    ; STA Q                  \ called AR1 with A = P
  35+ 7116 32 17 6A                             ld      (varQ),a                    ; .
  36+ 7119 78                                   ld      a,b                         ; TXA                    \ This also sets A = P (which now contains the original argument |Q|)
  37+ 711A 32 17 69                             ld      (varP),a                    ; STX P                  \
  38+ 711D CD 37 71                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table: A = arctan(A / Q) = arctan(|Q / P|) = arctan(1 / |P / Q|)
  39+ 7120 32 33 6A                             ld      (varT),a                    ; STA T                  \ Set T = 64 - T, we use B as T (its not really that)
  40+ 7123 47                                   ld      b,a                         ; its actually t = a, a = 64-a
  41+ 7124 3E 40                                ld      a,64                        ; LDA #64 What is going on here is t = result
  42+ 7126                                      ClearCarryFlag                      ; SBC T                            a = 64- result
  42+ 7126 B7          >                        or a
  43+ 7127 98                                   sbc     a,b                         ; .
  44+ 7128 C3 04 71                             jp      .AR4                        ; BCS AR4                \ Jump to AR4 to continue the calculation (this BCS is effectively a JMP as the subtraction will never underflow, as ARS1 returns values in the range 0-31)
  45+ 712B              ; If we get here then Q = 0, so tan(A) = infinity and A is a right angle, or 0.25 of a circle. We allocate 255 to a full circle, so we should return 63 for a right angle
  46+ 712B 3E 3F        .AR2:                   ld      a,63                        ; LDA #63                \ Set A to 63, to represent a right angle
  47+ 712D C9                                   ret                                 ; RTS                    \ Return from the subroutine
  48+ 712E              ; A contains arctan(|P / Q|) but P and Q have different signs, so we need to return arctan(-|P / Q|), using the calculation described in the documentation for the ACT table, i.e. 128 - A
  49+ 712E 32 33 6A     .AR3:                   ld      (varT),a
  50+ 7131 47                                   ld      b,a                         ; STA T                  \ Set A = 128 - A, we use b as T
  51+ 7132 3E 80                                ld      a,128                       ; LDA #128               \
  52+ 7134                                      ClearCarryFlag                      ; SBC T                  \ The subtraction will work because we did a SEC before calling AR3
  52+ 7134 B7          >                        or a
  53+ 7135 98                                   sbc     a,b
  54+ 7136 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  55+ 7137              ; This routine fetches arctan(A / Q) from the ACT table, so A will be set to an integer in the range 0 to 31 that represents an angle from 0 to 45 degrees (or 0 to \ PI / 4 radians)
  56+ 7137 CD F5 71     ARS1:                   call    Amul256DivQ                 ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q
  57+ 713A 3A 18 6A                             ld      a,(varR)                    ; LDA R                  \ Set X = R / 8
  58+ 713D CB 3F                                srl     a                           ; LSR A                  \       = 32 * A / Q
  59+ 713F CB 3F                                srl     a                           ; LSR A                  \
  60+ 7141 CB 3F                                srl     a                           ; LSR A                  \ so X has the value t * 32 where t = A / Q, which is
  61+ 7143 21 6A 71                             ld      hl,ACT                      ; TAX                    \ what we need to look up values in the ACT table
  62+ 7146 ED 31                                add     hl,a                        ; LDA ACT,X              \ Fetch ACT+X from the ACT table into A, so now:
  63+ 7148 7E                                   ld      a,(hl)                      ;                        \   A = value in ACT + X = value in ACT + (32 * A / Q)= arctan(A / Q)
  64+ 7149 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  65+ 714A
  66+ 714A              ;;;arctan:										; .ARCTAN	\ -> &2A3C  \ A=TAN-1(P/Q) \ A=arctan (P/Q)  called from block E
  67+ 714A              ;;;		ld		a,(varP)					; a = var P
  68+ 714A              ;;;		ld		hl,varQ
  69+ 714A              ;;;		xor		(hl)						; a = var p XOR varQ
  70+ 714A              ;;;		ld		a,(varT1)					; \ T1	 \ quadrant info
  71+ 714A              ;;;		ld		c,a							; c = copy of T1
  72+ 714A              ;;;		ld		a,(hl)						; Q
  73+ 714A              ;;;		cp		0
  74+ 714A              ;;;		jr		z,.AR2						;  Q=0 so set angle to 63, pi/2
  75+ 714A              ;;;		ld		(varQ),a					; Q move to reg B?
  76+ 714A              ;;;		ld		d,a							; copy to reg d
  77+ 714A              ;;;		sla		a							; drop sign
  78+ 714A              ;;;		ld		a,(varP)					; P
  79+ 714A              ;;;		ld		e,a							; copy to reg e
  80+ 714A              ;;;		sla		a							; drop sign
  81+ 714A              ;;;		cp		d							; compare with b (unsigned varQ * 2)
  82+ 714A              ;;;		jr		nc, .ars1					; if q >  p then adjust  swop A and Q as A >= Q
  83+ 714A              ;;;		call	ars1						; \ ARS1 \ get Angle for A*32/Q from table.
  84+ 714A              ;;;		scf									; set carry flag
  85+ 714A              ;;;.ar4:										; sub o.k
  86+ 714A              ;;;		bit 	7,c							; is T1 (also in c) negative?
  87+ 714A              ;;;		jr		nz,.ar3						;  -ve quadrant
  88+ 714A              ;;;		ret
  89+ 714A              ;;;.ar1:										; swop A and Q entering here d = q and e = P
  90+ 714A              ;;;		ld		a,d							; a = varQ
  91+ 714A              ;;;		ld		d,e							; varQ = varP
  92+ 714A              ;;;		ld		e,a							; swap D and E around
  93+ 714A              ;;;		ld		(varP),a					; write to actual variables
  94+ 714A              ;;;		ld		a,d
  95+ 714A              ;;;		ld		(varQ),a					; write to actual variables
  96+ 714A              ;;;		call	.ars1
  97+ 714A              ;;;		ld		(varT),b
  98+ 714A              ;;;		ld		b,a							; B = T = angle
  99+ 714A              ;;;		ld		a,64						; next range of angle, pi/4 to pi/2
 100+ 714A              ;;;		sub		a,b							; a = 64 - T (or b)
 101+ 714A              ;;;		jr		nc,.ar4						;  sub o.k
 102+ 714A              ;;;.ar2:										; .AR2	\ set angle to 90 degrees
 103+ 714A              ;;;		ld 		a,&3F						;  #63
 104+ 714A              ;;;		ret
 105+ 714A              ;;;.ar3:										;.AR3	\ -ve quadrant
 106+ 714A              ;;;		ld		b,a							; b = T	= \ angle
 107+ 714A              ;;;		ld		a,ConstPi					; a = Pi
 108+ 714A              ;;;		sub		b,a							; A = 128-T, so now covering range pi/2 to pi correctly
 109+ 714A              ;;;		ret
 110+ 714A              ;;;.ars1:										; .ARS1	\ -> &2A75  \ get Angle for A*32/Q from table.
 111+ 714A              ;;;		call	RequAmul256divQ				;  LL28 \ BFRDIV R=A*256/Q
 112+ 714A              ;;;		ld		a,(regA)
 113+ 714A              ;;;		srl		a
 114+ 714A              ;;;		srl		a
 115+ 714A              ;;;		srl		a							;  31 max.
 116+ 714A              ;;;		ld		hl, ArcTanTable				; root of index into table at end of words data
 117+ 714A              ;;;		add		hl,a						; now at real data
 118+ 714A              ;;;		ld		a,(hl)						; a =  ACT[a]
 119+ 714A              ;;;.arsr:										; rts used by laser lines below (will not in later code)
 120+ 714A              ;;;		ret
 121+ 714A
 122+ 714A
 123+ 714A
# file closed: ../../Maths/asm_arctan.asm
1041  714A                  INCLUDE "../../Maths/SineTable.asm"
# file opened: ../../Maths/SineTable.asm
   1+ 714A              ;; PRINT "SIN TABLE"
   2+ 714A              ;; FOR I% =  0 TO  31
   3+ 714A              ;; N = ABS(SIN((I%/64)*2*PI))
   4+ 714A              ;; IF N >= 1 THEN B% = 255  ELSE B% = INT(256 * N + 0.5)
   5+ 714A              ;; PRINT B%
   6+ 714A              ;; NEXT I%
   7+ 714A
   8+ 714A
   9+ 714A 00 19 32 4A  SNE:            DB 000, 025, 050, 074, 098, 121, 142, 162
   9+ 714E 62 79 8E A2
  10+ 7152 B5 C6 D5 E2                  DB 181, 198, 213, 226, 237, 245, 251, 255
  10+ 7156 ED F5 FB FF
  11+ 715A FF FF FB F5                  DB 255, 255, 251, 245, 237, 226, 213, 198
  11+ 715E ED E2 D5 C6
  12+ 7162 B5 A2 8E 79                  DB 181, 162, 142, 121, 098, 074, 050, 025
  12+ 7166 62 4A 32 19
# file closed: ../../Maths/SineTable.asm
1042  716A                  INCLUDE "../../Maths/ArcTanTable.asm"
# file opened: ../../Maths/ArcTanTable.asm
   1+ 716A              ;PRINT "ARCTAN TABLE"
   2+ 716A              ;FOR I% = 0 TO 31
   3+ 716A              ;    PRINT INT((128/PI) * ATN(I%/32)+0.5)
   4+ 716A              ;NEXT I%
   5+ 716A
   6+ 716A 00 01 03 04  ACT:            DB 000, 001, 003, 004, 005, 006, 008, 009
   6+ 716E 05 06 08 09
   7+ 7172 0A 0B 0C 0D                  DB 010, 011, 012, 013, 015, 016, 017, 018
   7+ 7176 0F 10 11 12
   8+ 717A 13 14 15 16                  DB 019, 020, 021, 022, 023, 024, 025, 025
   8+ 717E 17 18 19 19
   9+ 7182 1A 1B 1C 1D                  DB 026, 027, 028, 029, 030, 031, 031, 031
   9+ 7186 1E 1F 1F 1F
  10+ 718A
# file closed: ../../Maths/ArcTanTable.asm
1043  718A                  INCLUDE "../../Maths/negate16.asm"
# file opened: ../../Maths/negate16.asm
   1+ 718A              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 718A              ;; 16-bit negate
   3+ 718A                      ; Input:
   4+ 718A                      ;       HL = value
   5+ 718A                      ; Output:
   6+ 718A                      ;       HL = -value
   7+ 718A                      ; Destroys:
   8+ 718A                      ;       AF
   9+ 718A                      ;
  10+ 718A              negate16:
  11+ 718A AF           negate16hl:         xor 	a
  12+ 718B 95                               sub 	l
  13+ 718C 6F                               ld 		l,a
  14+ 718D 9F                               sbc 	a,a
  15+ 718E 94                               sub 	h
  16+ 718F 67                               ld 		h,a
  17+ 7190 C9                               ret
  18+ 7191
  19+ 7191 AF           negate16de:         xor 	a
  20+ 7192 93                               sub 	e
  21+ 7193 5F                               ld 		e,a
  22+ 7194 9F                               sbc 	a,a
  23+ 7195 92                               sub 	d
  24+ 7196 57                               ld 		d,a
  25+ 7197 C9                               ret
  26+ 7198
  27+ 7198 AF           negate16bc:         xor 	a
  28+ 7199 91                               sub 	c
  29+ 719A 4F                               ld 		c,a
  30+ 719B 9F                               sbc 	a,a
  31+ 719C 90                               sub 	b
  32+ 719D 47                               ld 		b,a
  33+ 719E C9                               ret
  34+ 719F
# file closed: ../../Maths/negate16.asm
1044  719F                  INCLUDE "../../Maths/asm_divide.asm"
# file opened: ../../Maths/asm_divide.asm
   1+ 719F              ;   K(3 2 1 0)           The result of the division
   2+ 719F              ;   X                    X is preserved
   3+ 719F
   4+ 719F              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) where zsign hi lo is in DE with zsign leading hi
   5+ 719F 00 00 00 00  varQRS                 DS      4
   6+ 71A3 00 00 00     varAPP                 DS     3
   7+ 71A6 00           Rvar                   DS     1
   8+ 71A7
   9+ 71A7                                  DISPLAY "TODO:  neds rewrite of whoel DIDV3B2"
  10+ 71A7              ;; NEEDS REWRITE TODO OF WHOLE DIVD3B2
  11+ 71A7              ;; NEEDS REWRITE TODO
  12+ 71A7
  13+ 71A7              ; b = varR, c= varQ
  14+ 71A7              Requ256mulAdivQ_6502:
  15+ 71A7 CB 27        .LL31_6502:             sla     a                       ; ASL A                   \ Shift A to the left
  16+ 71A9 DA BE 71                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  17+ 71AC                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  17+ 71AC 3F          >                        ccf
  18+ 71AD                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  18+ 71AD B9          >                        cp      c
  18+ 71AE DA B3 71    >                        jp		c, .LL31_SKIPSUB_6502
  19+ 71B1                                                                      ; BCC P%+4
  20+ 71B1 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  21+ 71B2                                      ClearCarryFlag
  21+ 71B2 B7          >                        or a
  22+ 71B3              .LL31_SKIPSUB_6502:     FlipCarryFlag
  22+ 71B3 3F          >                        ccf
  23+ 71B4 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  24+ 71B6 DA A7 71                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  25+ 71B9 78                                   ld      a,b
  26+ 71BA 32 A6 71                             ld      (Rvar),a
  27+ 71BD C9                                   ret                             ; RTS                    \ R left with remainder of division
  28+ 71BE 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  29+ 71BF                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  29+ 71BF 37          >                        scf
  30+ 71C0 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  31+ 71C2 DA A7 71                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  32+ 71C5 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  33+ 71C6 32 A6 71                             ld      (Rvar),a                ; .
  34+ 71C9 C9                                   ret                             ; .                      \ remainder of the division
  35+ 71CA 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  36+ 71CC 32 18 6A                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  37+ 71CF 47                                   ld      b,a                     ; as we are using b as varR
  38+ 71D0                                      SetCarryFlag                    ; we failed so need carry flag set
  38+ 71D0 37          >                        scf
  39+ 71D1 C9                                   ret                             ; RTS                    \ Return from the subroutine
  40+ 71D2                             DISPLAY "TODO : Merge Requ256mulAdivQ_6502  RequAmul256divQ"
  41+ 71D2              ; Entry point if varQ is populated with demoninator
  42+ 71D2              RequAmul256divQ:
  43+ 71D2 F5           BFRDIV:                 push	af
  44+ 71D3 3A 17 6A                             ld		a,(varQ)
  45+ 71D6 4F                                   ld		c,a
  46+ 71D7 F1                                   pop		af
  47+ 71D8 FE 00                                cp		0
  48+ 71DA CA F1 71                             jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  49+ 71DD 2E 00        RequAmul256divC:        ld		l,0
  50+ 71DF 67                                   ld		h,a
  51+ 71E0 06 10        HL_Div_Cold:			ld b,16			; fast entry point if C and HL are already set
  52+ 71E2 AF                                   xor a
  53+ 71E3 29           LOOPPOINT:	            add hl,hl
  54+ 71E4 17                                   rla
  55+ 71E5 B9                                   cp c
  56+ 71E6 38 02                                jr c,SKIPINCSUB
  57+ 71E8 2C                                   inc l
  58+ 71E9 91                                   sub c
  59+ 71EA 10 F7        SKIPINCSUB:             djnz LOOPPOINT
  60+ 71EC 7D                                   ld		a,l
  61+ 71ED 32 18 6A                             ld 		(varR),a
  62+ 71F0 C9                                   ret
  63+ 71F1 32 18 6A     HLDIVC_0_BY:            ld		(varR),a
  64+ 71F4 C9                                   ret
  65+ 71F5
  66+ 71F5
  67+ 71F5 21 17 6A     Amul256DivQ:            ld      hl,varQ                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  68+ 71F8 4E                                   ld      c,(hl)                  ; using c as Q var
  69+ 71F9 B9                                   cp      c
  70+ 71FA                                      FlipCarryFlag
  70+ 71FA 3F          >                        ccf
  71+ 71FB DA 23 72                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  72+ 71FE 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  73+ 7200 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  74+ 7202 DA 17 72                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  75+ 7205                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  75+ 7205 3F          >                        ccf
  76+ 7206                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  76+ 7206 B9          >                        cp      c
  76+ 7207 DA 0C 72    >                        jp		c, .LL31_SKIPSUB_6502
  77+ 720A                                                                      ; BCC P%+4
  78+ 720A 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  79+ 720B                                      ClearCarryFlag
  79+ 720B B7          >                        or a
  80+ 720C              .LL31_SKIPSUB_6502:     FlipCarryFlag
  80+ 720C 3F          >                        ccf
  81+ 720D CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  82+ 720F DA 00 72                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  83+ 7212 78                                   ld      a,b
  84+ 7213 32 18 6A                             ld      (varR),a
  85+ 7216 C9                                   ret                             ; RTS                    \ R left with remainder of division
  86+ 7217 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  87+ 7218                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  87+ 7218 37          >                        scf
  88+ 7219 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  89+ 721B DA 00 72                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  90+ 721E 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  91+ 721F 32 18 6A                             ld      (varR),a                ; .
  92+ 7222 C9                                   ret                             ; .                      \ remainder of the division
  93+ 7223 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  94+ 7225 32 18 6A                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  95+ 7228                                      SetCarryFlag                    ; we failed so need carry flag set
  95+ 7228 37          >                        scf
  96+ 7229 C9                                   ret                             ; RTS                    \ Return from the subroutine
  97+ 722A
  98+ 722A
  99+ 722A 00           DIVD3B_SHIFT_REG:       DB      0
 100+ 722B
 101+ 722B 7B           DIV3B2DE:               ld      a,e                         ; load QRS with Z sign hi lo
 102+ 722C 32 A1 71                             ld      (varQRS+2),a
 103+ 722F 7A                                   ld      a,d
 104+ 7230 E6 7F                                and     $7F
 105+ 7232 32 A0 71                             ld      (varQRS+1),a
 106+ 7235 7A                                   ld      a,d
 107+ 7236 E6 80                                and     $80
 108+ 7238 32 9F 71                             ld      (varQRS),a
 109+ 723B C3 41 72                             jp      DVID3B
 110+ 723E              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) = A P[1 0 ] / (SRQ)
 111+ 723E              ; We don't use zlo and assume its already loaded into SRQ
 112+ 723E 32 19 69     DVID3B2:                ld      (varP+2),a                  ;STA P+2                \ Set P+2 = A
 113+ 7241                                                                          ; LDA INWK+6             \ Set Q = z_lo
 114+ 7241                                                                          ; STA Q
 115+ 7241                                                                          ; LDA INWK+7             \ Set R = z_hi
 116+ 7241                                                                          ; STA R
 117+ 7241                                                                          ; LDA INWK+8             \ Set S = z_sign
 118+ 7241                                                                          ; STA S
 119+ 7241              ;  Given the above assignments, we now want to calculate K(3 2 1 0) = P(2 1 0) / (S R Q)
 120+ 7241 3A 17 69     DVID3B:                 ld      a,(varP)                    ; LDA P                 \ Make sure P(2 1 0) is at least 1
 121+ 7244 F6 01                                or      1                           ; ORA #1
 122+ 7246 32 17 69                             ld      (varP),a                    ; STA P
 123+ 7249              ;--- t = sign of P2 xor S (i.e. sign of result) ------------;
 124+ 7249 3A 19 69                             ld      a,(varP+2)                  ; LDA P+2                \ Set T to the sign of P+2 * S (i.e. the sign of the
 125+ 724C 21 19 6A                             ld      hl, varS                    ; EOR S                  \ result) and store it in T
 126+ 724F AE                                   xor     (hl)
 127+ 7250 E6 80                                and     $80                         ; AND #%10000000
 128+ 7252 32 33 6A                             ld      (varT),a                    ; STA T
 129+ 7255              ;--- New bit added to aviod a divde by 0 -------------------;
 130+ 7255 3A 17 6A     .CheckQRSAtLeast1:      ld      a,(varQ)                    ;
 131+ 7258 21 18 6A                             ld      hl,varR                     ;
 132+ 725B B6                                   or      (hl)                        ;
 133+ 725C C2 64 72                             jp      nz,.DVL9Prep                ;
 134+ 725F 3E 01                                ld      a,1                         ;
 135+ 7261 32 17 6A                             ld      (varQ),a                    ;
 136+ 7264              ; A P(1) P(0) = ABS P(2 1 0)
 137+ 7264 06 00        .DVL9Prep:              ld      b,0                         ; LDY #0                 \ Set Y = 0 to store the scale factor (use b as Y)
 138+ 7266 3A 19 69                             ld      a,(varP+2)                  ; LDA P+2                \ Clear the sign bit of P+2, so the division can be done
 139+ 7269 E6 7F                                and     $7F                         ; AND #%01111111         \ with positive numbers and we'll set the correct sign below, once all the maths is done
 140+ 726B              ; We now shift (A P+1 P) left until A >= 64, counting the number of shifts in Y. This makes the top part of the division as large as possible, thus retaining as
 141+ 726B              ; much accuracy as we can.  When we come to return the final result, we shift the result by the number of places in Y, and in the correct direction
 142+ 726B                                      DISPLAY "TODO DVL9 and DVL6 move P and QRS into registers for faster shift"
 143+ 726B              ;-- while A < 64 shift A P(1) P(0) -------------------------;
 144+ 726B FE 40        .DVL9:                  cp      64                          ; CMP #64                \ If A >= 64, jump down to DV14
 145+ 726D D2 7E 72                             jp      nc, .DV14                   ; BCS DV14
 146+ 7270 21 17 69                             ld      hl,varP                     ; ASL P                  \ Shift (A P+1 P) to the left
 147+ 7273 CB 26                                sla     (hl)
 148+ 7275 23                                   inc     hl                          ; ROL P+1
 149+ 7276 CB 16                                rl      (hl)
 150+ 7278 CB 17                                rl      a                           ; ROL A
 151+ 727A 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 152+ 727B C3 6B 72                             jp      .DVL9                       ; BNE DVL9               \ Loop up to DVL9 (this BNE is effectively a JMP, as Y will never be zero)
 153+ 727E              ; If we get here, A >= 64 and contains the highest byte of the numerator, scaled up by the number of left shifts in Y (b in our code)
 154+ 727E 32 19 69     .DV14:                  ld      (varP+2),a                  ; Store A in P+2, so we now have the scaled value of the numerator in P(2 1 0)
 155+ 7281 3A 19 6A                             ld      a,(varS)                    ; LDA S                  \ Set A = |S|
 156+ 7284 E6 7F                                and     $7F                         ; AND #%01111111
 157+ 7286                                      ;nop                                ;  BMI DV9               \ If bit 7 of A is set, jump down to DV9 (which can never happen)
 158+ 7286              ; We now shift (S R Q) left until bit 7 of S is set, reducing Y by the number of shifts. This makes the bottom part of the division as large as possible, thus
 159+ 7286              ; retaining as much accuracy as we can. When we come to return the final result, we shift the result by the total number of places in Y, and in the correct
 160+ 7286              ; direction, to give us the correct result
 161+ 7286              ; We set A to |S| above, so the following actually shifts (A R Q)
 162+ 7286 05           .DVL6:                  dec     b                           ; DEY                    \ Decrement the scale factor in Y (b)
 163+ 7287 21 17 6A                             ld      hl,varQ                     ; ASL Q                  \ Shift (A R Q) to the left
 164+ 728A CB 26                                sla     (hl)                        ; .
 165+ 728C 21 18 6A                             ld      hl,varR                     ; ROL R
 166+ 728F CB 16                                rl      (hl)                        ; .
 167+ 7291 CB 17                                rl      a                           ; ROL A
 168+ 7293 F2 86 72                             jp      p,.DVL6                     ; BPL DVL6               \ Loop up to DVL6 to do another shift, until bit 7 of A is set and we can't shift left any further
 169+ 7296              ; We have now shifted both the numerator and denominator left as far as they will go, keeping a tally of the overall scale factor of the various shifts in Y. We
 170+ 7296              ; can now divide just the two highest bytes to get our result
 171+ 7296 32 17 6A     .DV9:                   ld      (varQ),a                    ; STA Q                  \ Set Q = A, the highest byte of the denominator
 172+ 7299 4F                                   ld      c,a                         ; for Requ256mulAdivQ_6502 as it uses c as Q
 173+ 729A 78                                   ld      a,b                         ; preserve shift register in DEVD3B_SHIFT_REG
 174+ 729B 32 2A 72                             ld      (DIVD3B_SHIFT_REG),a
 175+ 729E              ; Note in Requ256mulAdivQ_6502 we use B as R Var for shift register
 176+ 729E 06 FE                                ld      b,254                       ; LDA #254               \ Set R to have bits 1-7 set, so we can pass this to
 177+ 72A0 32 18 6A                             ld      (varR),a                    ; STA R                  \ LL31 to act as the bit counter in the division
 178+ 72A3 3A 19 69                             ld      a,(varP+2)                  ; LDA P+2                \ Set A to the highest byte of the numerator
 179+ 72A6 CD A7 71                             call    Requ256mulAdivQ_6502        ; JSR LL31               \ Call LL31 to calculate: R = 256 * A / Q which means result is in b
 180+ 72A9              ; The result of our division is now in R, so we just need to shift it back by the scale factor in Y
 181+ 72A9                                      ZeroA                               ; LDA #0                \ Set K(3 2 1) = 0 to hold the result (we populate K)
 181+ 72A9 AF          >                        xor a
 182+ 72AA 32 2B 6A                             ld      (varK+1),a                  ; STA K+1               \ next)
 183+ 72AD 32 2C 6A                             ld      (varK+2),a                  ; STA K+2
 184+ 72B0 32 2D 6A                             ld      (varK+3),a                  ; STA K+3
 185+ 72B3 3A 2A 72                             ld      a,(DIVD3B_SHIFT_REG)        ; TYA                   \ If Y (shift counter in b) is positive, jump to DV12
 186+ 72B6 B7                                   or      a                           ; .                      we want to check the sign or if its zero
 187+ 72B7 CA E2 72                             jp      z,.DV13                     ; Optimisation to save a second jump from DV12 to DV13
 188+ 72BA F2 ED 72                             jp      p,.DV12                     ; BPL DV12
 189+ 72BD              ; If we get here then Y is negative, so we need to shift the result R to the left by Y places, and then set the correct sign for the result
 190+ 72BD                                      DISPLAY "TODO check oprimisation here for var r  in b"
 191+ 72BD 48                                   ld      c,b
 192+ 72BE 3A 2A 72                             ld      a,(DIVD3B_SHIFT_REG)
 193+ 72C1 47                                   ld      b,a
 194+ 72C2 79                                   ld      a,c
 195+ 72C3                                      ; OPTIM ld      a,(varR)                    ; LDA R                  \ Set A = R
 196+ 72C3 CB 27        .DVL8:                  sla     a                           ; ASL A                  \ Shift (K+3 K+2 K+1 A) left
 197+ 72C5 21 2B 6A                             ld      hl,varK+1                   ; ROL K+1
 198+ 72C8 CB 16                                rl      (hl)                        ; .
 199+ 72CA 23                                   inc     hl                          ; ROL K+2
 200+ 72CB CB 16                                rl      (hl)                        ; .
 201+ 72CD 23                                   inc     hl                          ; ROL K+3
 202+ 72CE CB 16                                rl      (hl)                        ; .
 203+ 72D0 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 204+ 72D1 C2 C3 72                             jp      nz,.DVL8                    ; BNE DVL8               \ Loop back to DVL8 until we have shifted left by Y places
 205+ 72D4 32 2A 6A                             ld      (varK),a                    ; STA K                  \ Store A in K so the result is now in K(3 2 1 0)
 206+ 72D7 3A 2D 6A                             ld      a,(varK+3)                  ; LDA K+3                \ Set K+3 to the sign in T, which we set above to the
 207+ 72DA 21 33 6A                             ld      hl,varT                     ; ORA T                  \ correct sign for the result
 208+ 72DD B6                                   or      (hl)                        ; .
 209+ 72DE 32 2D 6A                             ld      (varK+3),a                  ; STA K+3
 210+ 72E1 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 211+ 72E2              ; If we get here then Y is zero, so we don't need to shift the result R, we just need to set the correct sign for the result
 212+ 72E2 78           .DV13:                  ld      a,b; varR)                  ; LDA R                  \ Store R in K so the result is now in K(3 2 1 0)
 213+ 72E3 32 2A 6A                             ld      (varK),a                    ; STA K
 214+ 72E6 3A 33 6A                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 215+ 72E9 32 2D 6A                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 216+ 72EC C9                                   ret                                 ; RTS                    \ Return from the subroutine
 217+ 72ED              ; if we get here U is positive but still could be zero, now this is handled in DV9
 218+ 72ED              .DV12:                  ; nop                               ; BEQ DV13               \ We jumped here having set A to the scale factor in Y, so this jumps up to DV13 if Y = 0
 219+ 72ED              ; If we get here then Y is positive and non-zero, so we need to shift the result R to the right by Y places and then set the correct sign for the result. We also
 220+ 72ED              ; know that K(3 2 1) will stay 0, as we are shifting the lowest byte to the right, so no set bits will make their way into the top three bytes
 221+ 72ED                                      ;ld      a,(varR)                    ; LDA R                  \ Set A = R
 222+ 72ED 48                                   ld      c,b
 223+ 72EE 3A 2A 72                             ld      a,(DIVD3B_SHIFT_REG)
 224+ 72F1 47                                   ld      b,a
 225+ 72F2 79                                   ld      a,c
 226+ 72F3 CB 3F        .DVL10:                 srl     a                           ; LSR A                  \ Shift A right
 227+ 72F5 05                                   dec     b                           ; DEY                    \ Decrement the scale factor in Y
 228+ 72F6 C2 F3 72                             jp      nz,.DVL10                   ; BNE DVL10              \ Loop back to DVL10 until we have shifted right by Y places
 229+ 72F9 32 2A 6A                             ld      (varK),a                    ; STA K                  \ Store the shifted A in K so the result is now in K(3 2 1 0)
 230+ 72FC 3A 33 6A                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 231+ 72FF 32 2D 6A                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 232+ 7302 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 233+ 7303              ;
 234+ 7303              ;   Set flags E to 11111110
 235+ 7303              ;   Loop:   A << 2
 236+ 7303              ;           if carry was 0
 237+ 7303              ;               if a >= D
 238+ 7303              ;                   A = A - D
 239+ 7303              ;                   clear carry (probably irrelevant really)
 240+ 7303              ;           else
 241+ 7303
 242+ 7303              ;               sla flags << bringing in carry of 1
 243+ 7303              ;               if bit 7 of flag was set then loop
 244+ 7303              ;                                        elase a = e and exit
 245+ 7303              ;
 246+ 7303              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
 247+ 7303              ;
 248+ 7303              ;INPUTS: hl = dividend dbc = divisor
 249+ 7303              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
 250+ 7303
 251+ 7303 57           DVIDT:                  ld      d,a                     ; D = var P+1
 252+ 7304 3A 17 6A                             ld      a,(varQ)
 253+ 7307 4F                                   ld      c,a                     ; C = var Q
 254+ 7308 3A 17 69                             ld      a,(varP)
 255+ 730B 5F                                   ld      e,a                     ; E = var P
 256+ 730C                                      ; Need fast exists on ABS values
 257+ 730C 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
 258+ 730D B3                                   or      e                       ; .
 259+ 730E 28 2A                                jr      z,.ResultIsZero         ; .
 260+ 7310 79                                   ld      a,c                     ; Fast exit is divide by 0
 261+ 7311 A7                                   and     a                       ;
 262+ 7312 28 29                                jr      z,.ResultIsFFFF         ;
 263+ 7314 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 264+ 7315 A9                                   xor     c                       ;
 265+ 7316 E6 80                                and     $80
 266+ 7318 6F                                   ld      l,a                     ; l = var T
 267+ 7319 3E 00                                ld      a,0
 268+ 731B 06 10                                ld      b,16
 269+ 731D                                      ShiftDELeft1
 269+ 731D CB 23       >			   sla e
 269+ 731F CB 12       >			   rl  d
 270+ 7321 CB 21                                sla     c                       ; c = abs c
 271+ 7323 CB 39                                srl     c
 272+ 7325 CB 17        .DivideLoop:            rl      a
 273+ 7327                                      JumpIfALTNusng c, .SkipSubtract
 273+ 7327 B9          >                        cp      c
 273+ 7328 DA 2E 73    >                        jp		c, .SkipSubtract
 274+ 732B                                      ClearCarryFlag
 274+ 732B B7          >                        or a
 275+ 732C 99                                   sbc     c
 276+ 732D                                      ClearCarryFlag
 276+ 732D B7          >                        or a
 277+ 732E 3F           .SkipSubtract:          ccf
 278+ 732F CB 13                                rl      e
 279+ 7331 CB 12                                rl      d
 280+ 7333 05                                   dec     b
 281+ 7334 20 EF                                jr      nz,.DivideLoop
 282+ 7336 7B                                   ld      a,e
 283+ 7337 B5                                   or      l
 284+ 7338 42                                   ld      b,d
 285+ 7339 C9                                   ret
 286+ 733A              .ResultIsZero:          ZeroA
 286+ 733A AF          >                        xor a
 287+ 733B 47                                   ld      b,a
 288+ 733C C9                                   ret
 289+ 733D 3E FF        .ResultIsFFFF:          ld      a,$FF
 290+ 733F 47                                   ld      b,a
 291+ 7340 C9                                   ret
 292+ 7341
 293+ 7341 57           DIV96:                  ld      d,a                     ; D = var P+1
 294+ 7342 3A 17 6A                             ld      a,(varQ)
 295+ 7345 0E 60                                ld      c,96                    ; C = var Q
 296+ 7347 3A 17 69                             ld      a,(varP)
 297+ 734A 5F                                   ld      e,a                     ; E = var P
 298+ 734B                                      ; Need fast exists on ABS values
 299+ 734B 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
 300+ 734C B3                                   or      e                       ; .
 301+ 734D 28 26                                jr      z,.ResultIsZero         ; .
 302+ 734F 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 303+ 7350 A9                                   xor     c                       ;
 304+ 7351 E6 80                                and     $80
 305+ 7353 6F                                   ld      l,a                     ; l = var T
 306+ 7354 3E 00                                ld      a,0
 307+ 7356 06 10                                ld      b,16
 308+ 7358                                      ShiftDELeft1
 308+ 7358 CB 23       >			   sla e
 308+ 735A CB 12       >			   rl  d
 309+ 735C CB 21                                sla     c                       ; c = abs c
 310+ 735E CB 39                                srl     c
 311+ 7360 CB 17        .DivideLoop:            rl      a
 312+ 7362                                      JumpIfALTNusng c, .SkipSubtract
 312+ 7362 B9          >                        cp      c
 312+ 7363 DA 69 73    >                        jp		c, .SkipSubtract
 313+ 7366                                      ClearCarryFlag
 313+ 7366 B7          >                        or a
 314+ 7367 99                                   sbc     c
 315+ 7368                                      ClearCarryFlag
 315+ 7368 B7          >                        or a
 316+ 7369 3F           .SkipSubtract:          ccf
 317+ 736A CB 13                                rl      e
 318+ 736C CB 12                                rl      d
 319+ 736E 05                                   dec     b
 320+ 736F 20 EF                                jr      nz,.DivideLoop
 321+ 7371 7B                                   ld      a,e
 322+ 7372 B5                                   or      l
 323+ 7373 42                                   ld      b,d
 324+ 7374 C9                                   ret
 325+ 7375              .ResultIsZero:          ZeroA
 325+ 7375 AF          >                        xor a
 326+ 7376 47                                   ld      b,a
 327+ 7377 C9                                   ret
 328+ 7378
 329+ 7378 14           Div16by24usgn:          inc     d                           ; can we fast retu
 330+ 7379 15                                   dec     d
 331+ 737A 20 13                                jr      nz,.ResultZero
 332+ 737C 50 59                                ld      de,bc                       ; so prep for bc/de
 333+ 737E 44 4D                                ld      bc,hl
 334+ 7380 7A           .div16by16usng:         ld      a,d
 335+ 7381 B3                                   or      e
 336+ 7382 28 10                                jr      z,.DivideByZero
 337+ 7384 14                                   inc     d
 338+ 7385 15                                   dec     d
 339+ 7386 CD D8 74                             call    BC_Div_DE
 340+ 7389                                      ZeroA
 340+ 7389 AF          >                        xor a
 341+ 738A EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 342+ 738B 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 343+ 738D 4F                                   ld      c,a                         ; now fix c
 344+ 738E C9                                   ret
 345+ 738F AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 346+ 7390 4F                                   ld      c,a                         ; c = 0
 347+ 7391 67                                   ld      h,a
 348+ 7392 6F                                   ld      l,a
 349+ 7393 C9                                   ret
 350+ 7394 3E FF        .DivideByZero:          ld      a,$FF
 351+ 7396 67                                   ld      h,a
 352+ 7397 6F                                   ld      l,a
 353+ 7398                                      SetCarryFlag
 353+ 7398 37          >                        scf
 354+ 7399 C9                                   ret
 355+ 739A
 356+ 739A              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 357+ 739A                          IFDEF HLEquAmul256DivD_Used
 358+ 739A ~            HLEquAmul256DivD:       ld		b,8							; counter
 359+ 739A ~                                    sla		a							;
 360+ 739A ~                                    ld		h,a							; r a * 2 we will build result in hl
 361+ 739A ~            .DivideLoop:            rl		a							; a = a * 2
 362+ 739A ~                                    jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 363+ 739A ~                                    cp      d                           ; what was var Q
 364+ 739A ~                                    jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 365+ 739A ~            .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 366+ 739A ~                                    sbc     a,d                         ; a = a - q
 367+ 739A ~                                    ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 368+ 739A ~            .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 369+ 739A ~                                    rl      h                           ; roll d left bringing in carry if there was an sbc performed
 370+ 739A ~                                    djnz    .DivideLoop                 ; 8 cycles
 371+ 739A ~            .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 372+ 739A ~                                    jr      nc, .RemainderTooBig
 373+ 739A ~                                    ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 374+ 739A ~            .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 375+ 739A ~                                    ld      l,b                         ; and set l to capture result bits (R)
 376+ 739A ~            .RemainderLoop:         sla     a                           ; shift a left
 377+ 739A ~                                    jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 378+ 739A ~                                    cp      d                           ; if a < d then skip subtraction
 379+ 739A ~                                    jr      c,.RemainderSkipSubtract    ; .
 380+ 739A ~                                    sbc     d                           ; a > q so a = a - q, carry will be clear here
 381+ 739A ~            .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 382+ 739A ~                                    rl      l                           ; rotate counter to the left
 383+ 739A ~                                    jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 384+ 739A ~                                    ret
 385+ 739A ~            .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 386+ 739A ~                                    SetCarryFlag                        ; roll in a carry bit to result
 387+ 739A ~                                    rl      l                           ;
 388+ 739A ~                                    jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 389+ 739A ~                                    ret
 390+ 739A ~            .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 391+ 739A ~                                    ret
 392+ 739A                          ENDIF
 393+ 739A
 394+ 739A BA           AEquAmul256DivD:        cp      d
 395+ 739B 28 1D                                jr      z,.BothSame
 396+ 739D 30 1E                                jr      nc,.DgtA
 397+ 739F 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 398+ 73A1 CB 27        .DivideLoop:            sla     a
 399+ 73A3 38 0D                                jr      c,.LL29
 400+ 73A5                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 400+ 73A5 BA          >                        cp      d
 400+ 73A6 DA AB 73    >                        jp		c, .SkipSub
 401+ 73A9 92                                   sub     d
 402+ 73AA                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 402+ 73AA B7          >                        or a
 403+ 73AB              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 403+ 73AB 3F          >                        ccf
 404+ 73AC CB 13                                rl      e
 405+ 73AE 38 F1                                jr      c,.DivideLoop
 406+ 73B0 7B                                   ld      a,e
 407+ 73B1 C9                                   ret
 408+ 73B2 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 409+ 73B3                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 409+ 73B3 37          >                        scf
 410+ 73B4 CB 13                                rl      e                           ; rotate counter e left
 411+ 73B6 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 412+ 73B8 7B                                   ld      a,e                         ; stick result in a
 413+ 73B9 C9                                   ret
 414+ 73BA 3E 01        .BothSame:              ld  a,1
 415+ 73BC C9                                   ret
 416+ 73BD 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 417+ 73BF C9                                   ret
 418+ 73C0
 419+ 73C0              ; Divide 8-bit values
 420+ 73C0              ; In: Divide E by divider C
 421+ 73C0              ; Out: A = result, B = rest
 422+ 73C0              ;
 423+ 73C0              ;;;Div8:
 424+ 73C0              ;;;    xor a
 425+ 73C0              ;;;    ld b,8
 426+ 73C0              ;;;Div8_Loop:
 427+ 73C0              ;;;    rl e
 428+ 73C0              ;;;    rla
 429+ 73C0              ;;;    sub c
 430+ 73C0              ;;;    jr nc,Div8_NoAdd
 431+ 73C0              ;;;    add a,c
 432+ 73C0              ;;;Div8_NoAdd:
 433+ 73C0              ;;;    djnz Div8_Loop
 434+ 73C0              ;;;    ld b,a0
 435+ 73C0              ;;;    ld a,e
 436+ 73C0              ;;;    rla
 437+ 73C0              ;;;    cpl
 438+ 73C0              ;;;    ret
 439+ 73C0
 440+ 73C0              ;;Inputs: DE is the numerator, BC is the divisor
 441+ 73C0              ;;Outputs: DE is the result
 442+ 73C0              ;;         A is a copy of E
 443+ 73C0              ;;         HL is the remainder
 444+ 73C0              ;;         BC is not changed
 445+ 73C0              ;; so DE = DE /BC
 446+ 73C0              ;140 bytes
 447+ 73C0              ;145cc
 448+ 73C0
 449+ 73C0              MacroDEDivBC:       MACRO
 450+ 73C0 ~                                rla
 451+ 73C0 ~                                adc     hl,hl
 452+ 73C0 ~                                sbc     hl,bc
 453+ 73C0 ~                                jr      nc,$+3
 454+ 73C0 ~                                add     hl,bc
 455+ 73C0                                  ENDM
 456+ 73C0
 457+ 73C0 AF           DEequDEDivBC:       xor a
 458+ 73C1 ED 62                            sbc hl,hl
 459+ 73C3 7A                               ld a,d
 460+ 73C4                                  MacroDEDivBC
 460+ 73C4 17          >                    rla
 460+ 73C5 ED 6A       >                    adc     hl,hl
 460+ 73C7 ED 42       >                    sbc     hl,bc
 460+ 73C9 30 01       >                    jr      nc,$+3
 460+ 73CB 09          >                    add     hl,bc
 461+ 73CC                                  MacroDEDivBC
 461+ 73CC 17          >                    rla
 461+ 73CD ED 6A       >                    adc     hl,hl
 461+ 73CF ED 42       >                    sbc     hl,bc
 461+ 73D1 30 01       >                    jr      nc,$+3
 461+ 73D3 09          >                    add     hl,bc
 462+ 73D4                                  MacroDEDivBC
 462+ 73D4 17          >                    rla
 462+ 73D5 ED 6A       >                    adc     hl,hl
 462+ 73D7 ED 42       >                    sbc     hl,bc
 462+ 73D9 30 01       >                    jr      nc,$+3
 462+ 73DB 09          >                    add     hl,bc
 463+ 73DC                                  MacroDEDivBC
 463+ 73DC 17          >                    rla
 463+ 73DD ED 6A       >                    adc     hl,hl
 463+ 73DF ED 42       >                    sbc     hl,bc
 463+ 73E1 30 01       >                    jr      nc,$+3
 463+ 73E3 09          >                    add     hl,bc
 464+ 73E4                                  MacroDEDivBC
 464+ 73E4 17          >                    rla
 464+ 73E5 ED 6A       >                    adc     hl,hl
 464+ 73E7 ED 42       >                    sbc     hl,bc
 464+ 73E9 30 01       >                    jr      nc,$+3
 464+ 73EB 09          >                    add     hl,bc
 465+ 73EC                                  MacroDEDivBC
 465+ 73EC 17          >                    rla
 465+ 73ED ED 6A       >                    adc     hl,hl
 465+ 73EF ED 42       >                    sbc     hl,bc
 465+ 73F1 30 01       >                    jr      nc,$+3
 465+ 73F3 09          >                    add     hl,bc
 466+ 73F4                                  MacroDEDivBC
 466+ 73F4 17          >                    rla
 466+ 73F5 ED 6A       >                    adc     hl,hl
 466+ 73F7 ED 42       >                    sbc     hl,bc
 466+ 73F9 30 01       >                    jr      nc,$+3
 466+ 73FB 09          >                    add     hl,bc
 467+ 73FC                                  MacroDEDivBC
 467+ 73FC 17          >                    rla
 467+ 73FD ED 6A       >                    adc     hl,hl
 467+ 73FF ED 42       >                    sbc     hl,bc
 467+ 7401 30 01       >                    jr      nc,$+3
 467+ 7403 09          >                    add     hl,bc
 468+ 7404 17                               rla
 469+ 7405 2F                               cpl
 470+ 7406 57                               ld d,a
 471+ 7407
 472+ 7407 7B                               ld a,e
 473+ 7408                                  MacroDEDivBC
 473+ 7408 17          >                    rla
 473+ 7409 ED 6A       >                    adc     hl,hl
 473+ 740B ED 42       >                    sbc     hl,bc
 473+ 740D 30 01       >                    jr      nc,$+3
 473+ 740F 09          >                    add     hl,bc
 474+ 7410                                  MacroDEDivBC
 474+ 7410 17          >                    rla
 474+ 7411 ED 6A       >                    adc     hl,hl
 474+ 7413 ED 42       >                    sbc     hl,bc
 474+ 7415 30 01       >                    jr      nc,$+3
 474+ 7417 09          >                    add     hl,bc
 475+ 7418                                  MacroDEDivBC
 475+ 7418 17          >                    rla
 475+ 7419 ED 6A       >                    adc     hl,hl
 475+ 741B ED 42       >                    sbc     hl,bc
 475+ 741D 30 01       >                    jr      nc,$+3
 475+ 741F 09          >                    add     hl,bc
 476+ 7420                                  MacroDEDivBC
 476+ 7420 17          >                    rla
 476+ 7421 ED 6A       >                    adc     hl,hl
 476+ 7423 ED 42       >                    sbc     hl,bc
 476+ 7425 30 01       >                    jr      nc,$+3
 476+ 7427 09          >                    add     hl,bc
 477+ 7428                                  MacroDEDivBC
 477+ 7428 17          >                    rla
 477+ 7429 ED 6A       >                    adc     hl,hl
 477+ 742B ED 42       >                    sbc     hl,bc
 477+ 742D 30 01       >                    jr      nc,$+3
 477+ 742F 09          >                    add     hl,bc
 478+ 7430                                  MacroDEDivBC
 478+ 7430 17          >                    rla
 478+ 7431 ED 6A       >                    adc     hl,hl
 478+ 7433 ED 42       >                    sbc     hl,bc
 478+ 7435 30 01       >                    jr      nc,$+3
 478+ 7437 09          >                    add     hl,bc
 479+ 7438                                  MacroDEDivBC
 479+ 7438 17          >                    rla
 479+ 7439 ED 6A       >                    adc     hl,hl
 479+ 743B ED 42       >                    sbc     hl,bc
 479+ 743D 30 01       >                    jr      nc,$+3
 479+ 743F 09          >                    add     hl,bc
 480+ 7440                                  MacroDEDivBC
 480+ 7440 17          >                    rla
 480+ 7441 ED 6A       >                    adc     hl,hl
 480+ 7443 ED 42       >                    sbc     hl,bc
 480+ 7445 30 01       >                    jr      nc,$+3
 480+ 7447 09          >                    add     hl,bc
 481+ 7448 17                               rla
 482+ 7449 2F                               cpl
 483+ 744A 5F                               ld e,a
 484+ 744B C9                               ret
 485+ 744C              ;divdide by 16 using undocumented instrunctions
 486+ 744C              ;Input: BC = Dividend, DE = Divisor, HL = 0
 487+ 744C              ;Output: BC = Quotient, HL = Remainder
 488+ 744C              ; Our use
 489+ 744C              ; BC = A0
 490+ 744C              ; DE = 0C
 491+ 744C              ; so BC = a * 256 / C
 492+ 744C              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 492+ 744C B9          >                        cp     c
 492+ 744D D2 78 74    >                        jp		nc,DEV16ATooLarge
 493+ 7450 47                                   ld      b,a
 494+ 7451 59                                   ld      e,c
 495+ 7452 0E 00                                ld      c,0
 496+ 7454 16 00                                ld      d,0
 497+ 7456 C3 63 74                             jp      DIV16UNDOC
 498+ 7459 47           DIV16Amul256dQUNDOC:    ld      b,a
 499+ 745A 0E 00                                ld      c,0
 500+ 745C 21 17 6A                             ld      hl,varQ
 501+ 745F 7E                                   ld      a,(hl)
 502+ 7460 16 00                                ld      d,0
 503+ 7462 5F                                   ld      e,a
 504+ 7463              DIV16BCDivDEUNDOC:
 505+ 7463 21 00 00     DIV16UNDOC:             ld      hl,0
 506+ 7466 78                                   ld      a,b
 507+ 7467 06 10                                ld      b,16
 508+ 7469 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 509+ 746B 17                                   rla			; ...
 510+ 746C ED 6A                                adc	hl,hl		; ...
 511+ 746E ED 52                                sbc	hl,de		; ...
 512+ 7470 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 513+ 7472 19                                   add	hl,de		; ...
 514+ 7473 0D                                   dec	c		; ...
 515+ 7474 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 516+ 7476 47                                   ld   b,a
 517+ 7477 C9                                   ret
 518+ 7478 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 519+ 747B C9                                   ret
 520+ 747C              ; switch to logarithm version
 521+ 747C              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 522+ 747C 06 08        asm_div8:               ld b,8
 523+ 747E AF                                   xor a
 524+ 747F CB 21        .div8_loop:	            sla c
 525+ 7481 17                                   rla
 526+ 7482 BA                                   cp d
 527+ 7483 38 02                                jr c,.div8_skip
 527+ 7485
 528+ 7485 0C                                   inc c
 529+ 7486 92                                   sub d
 530+ 7487 10 F6        .div8_skip:	            djnz .div8_loop
 531+ 7489 C9                                   ret
 532+ 748A              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 533+ 748A 06 10        asm_div16:              ld b,16
 534+ 748C AF                                   xor a
 535+ 748D CB 25        div16_loop:	            sla l
 536+ 748F CB 14                                rl	h
 537+ 7491              ;    add hl,hl
 538+ 7491 17                                   rla
 539+ 7492 B9                                   cp c
 540+ 7493 38 02                                jr c,div16_skip
 541+ 7495 2C                                   inc l
 542+ 7496 91                                   sub c
 543+ 7497 10 F4        div16_skip:		        djnz div16_loop
 544+ 7499 C9                                   ret
 545+ 749A              ;
 546+ 749A              ; Divide 16-bit values (with 16-bit result)
 547+ 749A              ; In: Divide BC by divider DE
 548+ 749A              ; Out: BC = result, HL = rest
 549+ 749A              ;
 550+ 749A              HLDivC_Iteration: 	    MACRO
 551+ 749A ~                                    add	hl,hl		; unroll 16 times
 552+ 749A ~                                    rla				; ...
 553+ 749A ~                                    cp	c			; ...
 554+ 749A ~                                    jr	1F
 555+ 749A ~                                    sub	c			; ...
 556+ 749A ~            1:
 557+ 749A ~                                    inc	l			; ...
 558+ 749A                                      ENDM
 559+ 749A
 560+ 749A              EDivC_Iteration:        MACRO
 561+ 749A ~                                    rl  e
 562+ 749A ~                                    rla
 563+ 749A ~                                    sub c
 564+ 749A ~                                    jr  nc,.Div8_NoAdd
 565+ 749A ~                                    add a,c
 566+ 749A ~            .Div8_NoAdd:
 567+ 749A                                      ENDM
 568+ 749A
 569+ 749A              ; Switch to a logarithm version
 570+ 749A              ; Divide E by divider C Out: A = result, B = rest
 571+ 749A              E_Div_C:                ZeroA
 571+ 749A AF          >                        xor a
 572+ 749B                                      EDivC_Iteration
 572+ 749B CB 13       >                        rl  e
 572+ 749D 17          >                        rla
 572+ 749E 91          >                        sub c
 572+ 749F 30 01       >                        jr  nc,.Div8_NoAdd
 572+ 74A1 81          >                        add a,c
 572+ 74A2             >.Div8_NoAdd:
 573+ 74A2                                      EDivC_Iteration
 573+ 74A2 CB 13       >                        rl  e
 573+ 74A4 17          >                        rla
 573+ 74A5 91          >                        sub c
 573+ 74A6 30 01       >                        jr  nc,.Div8_NoAdd
 573+ 74A8 81          >                        add a,c
 573+ 74A9             >.Div8_NoAdd:
 574+ 74A9                                      EDivC_Iteration
 574+ 74A9 CB 13       >                        rl  e
 574+ 74AB 17          >                        rla
 574+ 74AC 91          >                        sub c
 574+ 74AD 30 01       >                        jr  nc,.Div8_NoAdd
 574+ 74AF 81          >                        add a,c
 574+ 74B0             >.Div8_NoAdd:
 575+ 74B0                                      EDivC_Iteration
 575+ 74B0 CB 13       >                        rl  e
 575+ 74B2 17          >                        rla
 575+ 74B3 91          >                        sub c
 575+ 74B4 30 01       >                        jr  nc,.Div8_NoAdd
 575+ 74B6 81          >                        add a,c
 575+ 74B7             >.Div8_NoAdd:
 576+ 74B7                                      EDivC_Iteration
 576+ 74B7 CB 13       >                        rl  e
 576+ 74B9 17          >                        rla
 576+ 74BA 91          >                        sub c
 576+ 74BB 30 01       >                        jr  nc,.Div8_NoAdd
 576+ 74BD 81          >                        add a,c
 576+ 74BE             >.Div8_NoAdd:
 577+ 74BE                                      EDivC_Iteration
 577+ 74BE CB 13       >                        rl  e
 577+ 74C0 17          >                        rla
 577+ 74C1 91          >                        sub c
 577+ 74C2 30 01       >                        jr  nc,.Div8_NoAdd
 577+ 74C4 81          >                        add a,c
 577+ 74C5             >.Div8_NoAdd:
 578+ 74C5                                      EDivC_Iteration
 578+ 74C5 CB 13       >                        rl  e
 578+ 74C7 17          >                        rla
 578+ 74C8 91          >                        sub c
 578+ 74C9 30 01       >                        jr  nc,.Div8_NoAdd
 578+ 74CB 81          >                        add a,c
 578+ 74CC             >.Div8_NoAdd:
 579+ 74CC                                      EDivC_Iteration
 579+ 74CC CB 13       >                        rl  e
 579+ 74CE 17          >                        rla
 579+ 74CF 91          >                        sub c
 579+ 74D0 30 01       >                        jr  nc,.Div8_NoAdd
 579+ 74D2 81          >                        add a,c
 579+ 74D3             >.Div8_NoAdd:
 580+ 74D3 47                                   ld      b,a
 581+ 74D4 7B                                   ld      a,e
 582+ 74D5 17                                   rla
 583+ 74D6 2F                                   cpl
 584+ 74D7 C9                                   ret
 585+ 74D8
 586+ 74D8
 587+ 74D8              BCDIVDE_Iteration:      MACRO
 588+ 74D8 ~                                    rla
 589+ 74D8 ~                                    adc	    hl,hl
 590+ 74D8 ~                                    add	    hl,de
 591+ 74D8 ~                                    jr	    c,1F
 592+ 74D8 ~                                    sbc	    hl,de
 593+ 74D8 ~            1:
 594+ 74D8                                      ENDM
 595+ 74D8
 596+ 74D8
 597+ 74D8              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 598+ 74D8              ;BC/DE ==> BC, remainder in HL
 599+ 74D8              ;NOTE: BC/0 returns 0 as the quotient.
 600+ 74D8              ;min: 738cc
 601+ 74D8              ;max: 898cc
 602+ 74D8              ;avg: 818cc
 603+ 74D8              ;144 bytes
 604+ 74D8 AF           BC_Div_DE:              xor a
 605+ 74D9 67                                   ld h,a
 606+ 74DA 6F                                   ld l,a
 607+ 74DB 93                                   sub e
 608+ 74DC 5F                                   ld e,a
 609+ 74DD 9F                                   sbc a,a
 610+ 74DE 92                                   sub d
 611+ 74DF 57                                   ld d,a
 612+ 74E0 78                                   ld a,b
 613+ 74E1                                      BCDIVDE_Iteration
 613+ 74E1 17          >                        rla
 613+ 74E2 ED 6A       >                        adc	    hl,hl
 613+ 74E4 19          >                        add	    hl,de
 613+ 74E5 38 02       >                        jr	    c,1F
 613+ 74E7 ED 52       >                        sbc	    hl,de
 613+ 74E9             >1:
 614+ 74E9                                      BCDIVDE_Iteration
 614+ 74E9 17          >                        rla
 614+ 74EA ED 6A       >                        adc	    hl,hl
 614+ 74EC 19          >                        add	    hl,de
 614+ 74ED 38 02       >                        jr	    c,1F
 614+ 74EF ED 52       >                        sbc	    hl,de
 614+ 74F1             >1:
 615+ 74F1                                      BCDIVDE_Iteration
 615+ 74F1 17          >                        rla
 615+ 74F2 ED 6A       >                        adc	    hl,hl
 615+ 74F4 19          >                        add	    hl,de
 615+ 74F5 38 02       >                        jr	    c,1F
 615+ 74F7 ED 52       >                        sbc	    hl,de
 615+ 74F9             >1:
 616+ 74F9                                      BCDIVDE_Iteration
 616+ 74F9 17          >                        rla
 616+ 74FA ED 6A       >                        adc	    hl,hl
 616+ 74FC 19          >                        add	    hl,de
 616+ 74FD 38 02       >                        jr	    c,1F
 616+ 74FF ED 52       >                        sbc	    hl,de
 616+ 7501             >1:
 617+ 7501                                      BCDIVDE_Iteration
 617+ 7501 17          >                        rla
 617+ 7502 ED 6A       >                        adc	    hl,hl
 617+ 7504 19          >                        add	    hl,de
 617+ 7505 38 02       >                        jr	    c,1F
 617+ 7507 ED 52       >                        sbc	    hl,de
 617+ 7509             >1:
 618+ 7509                                      BCDIVDE_Iteration
 618+ 7509 17          >                        rla
 618+ 750A ED 6A       >                        adc	    hl,hl
 618+ 750C 19          >                        add	    hl,de
 618+ 750D 38 02       >                        jr	    c,1F
 618+ 750F ED 52       >                        sbc	    hl,de
 618+ 7511             >1:
 619+ 7511                                      BCDIVDE_Iteration
 619+ 7511 17          >                        rla
 619+ 7512 ED 6A       >                        adc	    hl,hl
 619+ 7514 19          >                        add	    hl,de
 619+ 7515 38 02       >                        jr	    c,1F
 619+ 7517 ED 52       >                        sbc	    hl,de
 619+ 7519             >1:
 620+ 7519                                      BCDIVDE_Iteration
 620+ 7519 17          >                        rla
 620+ 751A ED 6A       >                        adc	    hl,hl
 620+ 751C 19          >                        add	    hl,de
 620+ 751D 38 02       >                        jr	    c,1F
 620+ 751F ED 52       >                        sbc	    hl,de
 620+ 7521             >1:
 621+ 7521 17                                   rla
 622+ 7522 47                                   ld b,a
 623+ 7523 79                                   ld a,c
 624+ 7524                                      BCDIVDE_Iteration
 624+ 7524 17          >                        rla
 624+ 7525 ED 6A       >                        adc	    hl,hl
 624+ 7527 19          >                        add	    hl,de
 624+ 7528 38 02       >                        jr	    c,1F
 624+ 752A ED 52       >                        sbc	    hl,de
 624+ 752C             >1:
 625+ 752C                                      BCDIVDE_Iteration
 625+ 752C 17          >                        rla
 625+ 752D ED 6A       >                        adc	    hl,hl
 625+ 752F 19          >                        add	    hl,de
 625+ 7530 38 02       >                        jr	    c,1F
 625+ 7532 ED 52       >                        sbc	    hl,de
 625+ 7534             >1:
 626+ 7534                                      BCDIVDE_Iteration
 626+ 7534 17          >                        rla
 626+ 7535 ED 6A       >                        adc	    hl,hl
 626+ 7537 19          >                        add	    hl,de
 626+ 7538 38 02       >                        jr	    c,1F
 626+ 753A ED 52       >                        sbc	    hl,de
 626+ 753C             >1:
 627+ 753C                                      BCDIVDE_Iteration
 627+ 753C 17          >                        rla
 627+ 753D ED 6A       >                        adc	    hl,hl
 627+ 753F 19          >                        add	    hl,de
 627+ 7540 38 02       >                        jr	    c,1F
 627+ 7542 ED 52       >                        sbc	    hl,de
 627+ 7544             >1:
 628+ 7544                                      BCDIVDE_Iteration
 628+ 7544 17          >                        rla
 628+ 7545 ED 6A       >                        adc	    hl,hl
 628+ 7547 19          >                        add	    hl,de
 628+ 7548 38 02       >                        jr	    c,1F
 628+ 754A ED 52       >                        sbc	    hl,de
 628+ 754C             >1:
 629+ 754C                                      BCDIVDE_Iteration
 629+ 754C 17          >                        rla
 629+ 754D ED 6A       >                        adc	    hl,hl
 629+ 754F 19          >                        add	    hl,de
 629+ 7550 38 02       >                        jr	    c,1F
 629+ 7552 ED 52       >                        sbc	    hl,de
 629+ 7554             >1:
 630+ 7554                                      BCDIVDE_Iteration
 630+ 7554 17          >                        rla
 630+ 7555 ED 6A       >                        adc	    hl,hl
 630+ 7557 19          >                        add	    hl,de
 630+ 7558 38 02       >                        jr	    c,1F
 630+ 755A ED 52       >                        sbc	    hl,de
 630+ 755C             >1:
 631+ 755C                                      BCDIVDE_Iteration
 631+ 755C 17          >                        rla
 631+ 755D ED 6A       >                        adc	    hl,hl
 631+ 755F 19          >                        add	    hl,de
 631+ 7560 38 02       >                        jr	    c,1F
 631+ 7562 ED 52       >                        sbc	    hl,de
 631+ 7564             >1:
 632+ 7564 17                                   rla
 633+ 7565 4F                                   ld c,a
 634+ 7566 C9                                   ret
 635+ 7567 78           Floor_DivQSigned:       ld      a,b             ; save resultant sign
 636+ 7568 AA                                   xor     d               ;
 637+ 7569 E6 80                                and     $80             ;
 638+ 756B DD 67                                ld      ixh,a           ;
 639+ 756D 78                                   ld      a,b
 640+ 756E E6 7F                                and     $7F
 641+ 7570 47                                   ld      b,a
 642+ 7571 7A                                   ld      a,d
 643+ 7572 E6 7F                                and     $7F
 644+ 7574 57                                   ld      d,a
 645+ 7575 CD 7D 75                             call    Floor_DivQ
 646+ 7578 78                                   ld      a,b
 647+ 7579 DD B4                                or      ixh
 648+ 757B 47                                   ld      b,a
 649+ 757C C9                                   ret
 650+ 757D
 651+ 757D
 652+ 757D
 653+ 757D              ; BC = BC / DE
 654+ 757D              ; HL = BC % DE
 655+ 757D              ; if HL > 0 BC -= 1
 656+ 757D 78           Floor_DivQ:             ld      a,b
 657+ 757E B1                                   or      c
 658+ 757F 28 26                                jr      z, .divide0By   ; if bc is zero just return as result will be zero
 659+ 7581 7A                                   ld      a,d
 660+ 7582 B3                                   or      e
 661+ 7583 28 26                                jr      z, .divideBy0
 662+ 7585 D5                                   push    de
 663+ 7586 CD D8 74     .DoDivide:              call    BC_Div_DE       ; bc(q0) = bc / de , hl(r0) = bc %de
 664+ 7589 D1                                   pop     de              ; get divisor back to test
 665+ 758A CB 7A                                bit     7,d             ; if divisor <0 or = 0 goto else branch
 666+ 758C C2 9C 75                             jp      nz,.deLTE0
 667+ 758F 7A                                   ld      a,d
 668+ 7590 B3                                   or      e
 669+ 7591 CA 9C 75                             jp      z,.deLTE0
 670+ 7594 CB 7C        .deGT0:                 bit     7,h             ; if remainder >=0 return with no adjustment
 671+ 7596 C8                                   ret     z               ; if remainder was not negative then all done
 672+ 7597 0B                                   dec     bc              ; else q --
 673+ 7598                                      ClearCarryFlag          ;      r += b
 673+ 7598 B7          >                        or a
 674+ 7599 ED 5A                                adc     hl,de           ;      .
 675+ 759B C9                                   ret
 676+ 759C CB 7C        .deLTE0:                bit     7,h             ; if remainder <= 0 retun with no adjustment
 677+ 759E C8                                   ret     z               ; (return if negative)
 678+ 759F 7C                                   ld      a,h
 679+ 75A0 B5                                   or      l               ; (return if zero)
 680+ 75A1 C8                                   ret     z
 681+ 75A2 0B                                   dec     bc              ; else q --
 682+ 75A3                                      ClearCarryFlag          ;      r += b
 682+ 75A3 B7          >                        or a
 683+ 75A4 ED 5A                                adc     hl,de           ;      .
 684+ 75A6 C9                                   ret
 685+ 75A7 21 00 00     .divide0By:             ld      hl,0            ; hl = 0, bc is already 0
 686+ 75AA C9                                   ret
 687+ 75AB 21 00 00     .divideBy0:             ld      hl,0
 688+ 75AE 01 01 00                             ld      bc,1
 689+ 75B1 C9                                   ret
 690+ 75B2
 691+ 75B2
 692+ 75B2              L_DIV_0_ITERATION:      MACRO
 693+ 75B2 ~                                    rl      de              ;left shift dividend + quotient carry
 694+ 75B2 ~                                    ex      de,hl
 695+ 75B2 ~                                    rl      de              ;left shift remainder + dividend carry
 696+ 75B2 ~                                    ex      de,hl
 697+ 75B2 ~                                    sub     hl,bc           ;substract divisor from remainder
 698+ 75B2 ~                                    jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 699+ 75B2 ~                                    add     hl,bc           ;revert subtraction of divisor
 700+ 75B2 ~            .skip_revert0:          ccf                     ;complement carry
 701+ 75B2 ~                                    rl      de              ;left shift dividend + quotient carry
 702+ 75B2 ~                                    ex      de,hl
 703+ 75B2 ~                                    rl      de              ;left shift remainder + dividend carry
 704+ 75B2 ~                                    ex      de,hl
 705+ 75B2 ~                                    sub     hl,bc           ;substract divisor from remainder
 706+ 75B2 ~                                    jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 707+ 75B2 ~                                    add     hl,bc           ;revert subtraction of divisor
 708+ 75B2 ~            .skip_revert1:          ccf                     ;complement carry
 709+ 75B2                                      ENDM
 710+ 75B2
 711+ 75B2              ; HL = DE / BC, DE = DE % BC
 712+ 75B2 21 00 00     l_div_0:                ld      hl,0            ;clear remainder
 713+ 75B5                                      L_DIV_0_ITERATION
 713+ 75B5 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 713+ 75B9 EB          >                        ex      de,hl
 713+ 75BA CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 713+ 75BE EB          >                        ex      de,hl
 713+ 75BF B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 713+ 75C2 D2 C6 75    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 713+ 75C5 09          >                        add     hl,bc           ;revert subtraction of divisor
 713+ 75C6 3F          >.skip_revert0:          ccf                     ;complement carry
 713+ 75C7 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 713+ 75CB EB          >                        ex      de,hl
 713+ 75CC CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 713+ 75D0 EB          >                        ex      de,hl
 713+ 75D1 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 713+ 75D4 D2 D8 75    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 713+ 75D7 09          >                        add     hl,bc           ;revert subtraction of divisor
 713+ 75D8 3F          >.skip_revert1:          ccf                     ;complement carry
 714+ 75D9                                      L_DIV_0_ITERATION
 714+ 75D9 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 714+ 75DD EB          >                        ex      de,hl
 714+ 75DE CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 714+ 75E2 EB          >                        ex      de,hl
 714+ 75E3 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 714+ 75E6 D2 EA 75    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 714+ 75E9 09          >                        add     hl,bc           ;revert subtraction of divisor
 714+ 75EA 3F          >.skip_revert0:          ccf                     ;complement carry
 714+ 75EB CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 714+ 75EF EB          >                        ex      de,hl
 714+ 75F0 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 714+ 75F4 EB          >                        ex      de,hl
 714+ 75F5 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 714+ 75F8 D2 FC 75    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 714+ 75FB 09          >                        add     hl,bc           ;revert subtraction of divisor
 714+ 75FC 3F          >.skip_revert1:          ccf                     ;complement carry
 715+ 75FD                                      L_DIV_0_ITERATION
 715+ 75FD CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 715+ 7601 EB          >                        ex      de,hl
 715+ 7602 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 715+ 7606 EB          >                        ex      de,hl
 715+ 7607 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 715+ 760A D2 0E 76    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 715+ 760D 09          >                        add     hl,bc           ;revert subtraction of divisor
 715+ 760E 3F          >.skip_revert0:          ccf                     ;complement carry
 715+ 760F CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 715+ 7613 EB          >                        ex      de,hl
 715+ 7614 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 715+ 7618 EB          >                        ex      de,hl
 715+ 7619 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 715+ 761C D2 20 76    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 715+ 761F 09          >                        add     hl,bc           ;revert subtraction of divisor
 715+ 7620 3F          >.skip_revert1:          ccf                     ;complement carry
 716+ 7621                                      L_DIV_0_ITERATION
 716+ 7621 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 716+ 7625 EB          >                        ex      de,hl
 716+ 7626 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 716+ 762A EB          >                        ex      de,hl
 716+ 762B B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 716+ 762E D2 32 76    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 716+ 7631 09          >                        add     hl,bc           ;revert subtraction of divisor
 716+ 7632 3F          >.skip_revert0:          ccf                     ;complement carry
 716+ 7633 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 716+ 7637 EB          >                        ex      de,hl
 716+ 7638 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 716+ 763C EB          >                        ex      de,hl
 716+ 763D B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 716+ 7640 D2 44 76    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 716+ 7643 09          >                        add     hl,bc           ;revert subtraction of divisor
 716+ 7644 3F          >.skip_revert1:          ccf                     ;complement carry
 717+ 7645                                      L_DIV_0_ITERATION
 717+ 7645 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 717+ 7649 EB          >                        ex      de,hl
 717+ 764A CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 717+ 764E EB          >                        ex      de,hl
 717+ 764F B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 717+ 7652 D2 56 76    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 717+ 7655 09          >                        add     hl,bc           ;revert subtraction of divisor
 717+ 7656 3F          >.skip_revert0:          ccf                     ;complement carry
 717+ 7657 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 717+ 765B EB          >                        ex      de,hl
 717+ 765C CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 717+ 7660 EB          >                        ex      de,hl
 717+ 7661 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 717+ 7664 D2 68 76    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 717+ 7667 09          >                        add     hl,bc           ;revert subtraction of divisor
 717+ 7668 3F          >.skip_revert1:          ccf                     ;complement carry
 718+ 7669                                      L_DIV_0_ITERATION
 718+ 7669 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 718+ 766D EB          >                        ex      de,hl
 718+ 766E CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 718+ 7672 EB          >                        ex      de,hl
 718+ 7673 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 718+ 7676 D2 7A 76    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 718+ 7679 09          >                        add     hl,bc           ;revert subtraction of divisor
 718+ 767A 3F          >.skip_revert0:          ccf                     ;complement carry
 718+ 767B CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 718+ 767F EB          >                        ex      de,hl
 718+ 7680 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 718+ 7684 EB          >                        ex      de,hl
 718+ 7685 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 718+ 7688 D2 8C 76    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 718+ 768B 09          >                        add     hl,bc           ;revert subtraction of divisor
 718+ 768C 3F          >.skip_revert1:          ccf                     ;complement carry
 719+ 768D                                      L_DIV_0_ITERATION
 719+ 768D CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 719+ 7691 EB          >                        ex      de,hl
 719+ 7692 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 719+ 7696 EB          >                        ex      de,hl
 719+ 7697 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 719+ 769A D2 9E 76    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 719+ 769D 09          >                        add     hl,bc           ;revert subtraction of divisor
 719+ 769E 3F          >.skip_revert0:          ccf                     ;complement carry
 719+ 769F CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 719+ 76A3 EB          >                        ex      de,hl
 719+ 76A4 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 719+ 76A8 EB          >                        ex      de,hl
 719+ 76A9 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 719+ 76AC D2 B0 76    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 719+ 76AF 09          >                        add     hl,bc           ;revert subtraction of divisor
 719+ 76B0 3F          >.skip_revert1:          ccf                     ;complement carry
 720+ 76B1                                      L_DIV_0_ITERATION
 720+ 76B1 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 720+ 76B5 EB          >                        ex      de,hl
 720+ 76B6 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 720+ 76BA EB          >                        ex      de,hl
 720+ 76BB B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 720+ 76BE D2 C2 76    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 720+ 76C1 09          >                        add     hl,bc           ;revert subtraction of divisor
 720+ 76C2 3F          >.skip_revert0:          ccf                     ;complement carry
 720+ 76C3 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 720+ 76C7 EB          >                        ex      de,hl
 720+ 76C8 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 720+ 76CC EB          >                        ex      de,hl
 720+ 76CD B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 720+ 76D0 D2 D4 76    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 720+ 76D3 09          >                        add     hl,bc           ;revert subtraction of divisor
 720+ 76D4 3F          >.skip_revert1:          ccf                     ;complement carry
 721+ 76D5 CB 13 CB 12                          rl      de              ;left shift dividend + quotient carry
 722+ 76D9 EB                                   ex      de,hl           ;dividend<>remainder
 723+ 76DA C9                                   ret
 724+ 76DB
 725+ 76DB
 726+ 76DB
 727+ 76DB
 728+ 76DB 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 729+ 76DE              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 729+ 76DE CB 25       >			   sla l
 729+ 76E0 CB 14       >			   rl  h
 730+ 76E2 7C                                   ld      a,h
 731+ 76E3 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 732+ 76E5                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 732+ 76E5 B9          >                        cp      c
 732+ 76E6 DA F1 76    >                        jp		c, .LL132
 733+ 76E9 3F           .LL131:                 ccf                                 ; compliment carry
 734+ 76EA 99                                   sbc     a,c                         ; q
 735+ 76EB 67                                   ld      h,a                         ; h (s)
 736+ 76EC 7D                                   ld      a,l                         ; r
 737+ 76ED DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 738+ 76EF 37                                   scf                                 ; set carry for next rolls
 739+ 76F0 3F                                   ccf
 740+ 76F1              .LL132:                 RollDELeft1                         ; Rotate de bits left
 740+ 76F1 CB 13       >               rl  e
 740+ 76F3 CB 12       >               rl  d
 741+ 76F5 38 E7                                jr      c,.LL130                    ;
 742+ 76F7 EB                                   ex      de,hl                       ; hl = result
 743+ 76F8 C9                                   ret
 744+ 76F9
 745+ 76F9
 746+ 76F9 AF           div_hl_c:               xor	a
 747+ 76FA 06 10                                ld	b, 16
 748+ 76FC 29           .loop:                  add	hl, hl
 749+ 76FD 17                                   rla
 750+ 76FE 38 03                                jr	c, $+5
 751+ 7700 B9                                   cp	c
 752+ 7701 38 02                                jr	c, $+4
 753+ 7703 91                                   sub	c
 754+ 7704 2C                                   inc	l
 755+ 7705 10 F5                                djnz	.loop
 756+ 7707 C9                                   ret
 757+ 7708              ;l_div, signed division
 758+ 7708              ; comes in with DE and HL
 759+ 7708              ; HL = DE / HL, DE = DE % HL
 760+ 7708 4A           l_div:                  ld      c,d             ;sign of dividend
 761+ 7709 44                                   ld      b,h             ;sign of divisor
 762+ 770A C5                                   push    bc              ;save signs
 763+ 770B 4D                                   ld      c,l             ;divisor to bc
 764+ 770C 7A                                   ld      a,d
 765+ 770D B7                                   or      a
 766+ 770E F2 17 77                             jp      p,.NotDENeg
 767+ 7711              .DeNegate:              macronegate16de
 767+ 7711 AF          >					xor 	a
 767+ 7712 93          >                    sub 	e
 767+ 7713 5F          >                    ld 		e,a
 767+ 7714 9F          >                    sbc 	a,a
 767+ 7715 92          >                    sub 	d
 767+ 7716 57          >                    ld 		d,a
 768+ 7717 78           .NotDENeg:              ld      a,b
 769+ 7718 B7                                   or      a
 770+ 7719 F2 22 77                             jp      p,.NotBCNeg     ; if signs are opposite them flip
 771+ 771C                                      macronegate16bc
 771+ 771C AF          >					xor 	a
 771+ 771D 91          >                    sub 	c
 771+ 771E 4F          >                    ld 		c,a
 771+ 771F 9F          >                    sbc 	a,a
 771+ 7720 90          >                    sub 	b
 771+ 7721 47          >                    ld 		b,a
 772+ 7722 CD B2 75     .NotBCNeg:              call    l_div_0         ;unsigned HL = DE / BC, DE = DE % BC
 773+ 7725                                      ; C standard requires that the result of division satisfy a = (a/b)*b + a%b emainder takes sign of the dividend
 774+ 7725 C1                                   pop     bc              ;restore sign info
 775+ 7726 78                                   ld      a,b
 776+ 7727 A9                                   xor     c               ;quotient, sign of dividend^divisor
 777+ 7728 F2 31 77                             jp      p,.NotHLNeg
 778+ 772B                                      macronegate16hl
 778+ 772B AF          >					xor 	a
 778+ 772C 95          >					sub 	l
 778+ 772D 6F          >					ld 		l,a
 778+ 772E 9F          >					sbc 	a,a
 778+ 772F 94          >					sub 	h
 778+ 7730 67          >					ld 		h,a
 779+ 7731 79           .NotHLNeg:              ld      a,c
 780+ 7732 B7                                   or      a,a             ;remainder, sign of dividend
 781+ 7733 F0                                   ret     p
 782+ 7734                                      macronegate16de
 782+ 7734 AF          >					xor 	a
 782+ 7735 93          >                    sub 	e
 782+ 7736 5F          >                    ld 		e,a
 782+ 7737 9F          >                    sbc 	a,a
 782+ 7738 92          >                    sub 	d
 782+ 7739 57          >                    ld 		d,a
 783+ 773A C9                                   ret
 784+ 773B
# file closed: ../../Maths/asm_divide.asm
1045  773B                  INCLUDE "../../Maths/asm_unitvector.asm"
# file opened: ../../Maths/asm_unitvector.asm
   1+ 773B              asm_tis2:
   2+ 773B              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 773B              ; ">DOES NOT DO SIGNED YET"
   4+ 773B F5           	push af
   5+ 773C E6 7F            and SignMask8Bit
   6+ 773E 57           	ld d,a				;; d = A
   7+ 773F 3A 17 6A     	ld a,(varQ)
   8+ 7742 5F           	ld e,a
   9+ 7743 7A           	ld a,d
  10+ 7744 BB           	cp e
  11+ 7745 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 7747 1E 60        	ld e, 96
  13+ 7749 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 774B EB           	ex de,hl
  15+ 774C 3A 17 6A     	ld a,(varQ)
  16+ 774F 4F           	ld c,a
  17+ 7750 CD 8A 74     	call asm_div16
  18+ 7753 F1           	pop af
  19+ 7754 E6 80        	and $80
  20+ 7756 B5           	or l
  21+ 7757 C9           	ret
  22+ 7758              .tis2_set96:
  23+ 7758 F1           	pop af
  24+ 7759 E6 80        	and $80
  25+ 775B F6 96        	or $96
  26+ 775D C9           	ret
  27+ 775E
  28+ 775E
  29+ 775E              asm_unit_vector:
  30+ 775E              squareregfx:
  31+ 775E 3A E4 C0     	ld a,(UBnkXScaled)
  32+ 7761 57           	ld d,a
  33+ 7762 5F           	ld e,a
  34+ 7763 ED 30        	mul
  35+ 7765 EB           	ex de,hl
  36+ 7766              squareregfy:
  37+ 7766 3A E6 C0     	ld a, (UBnkYScaled)
  38+ 7769 57           	ld d,a
  39+ 776A 5F           	ld e,a
  40+ 776B ED 30        	mul
  41+ 776D 19           	add hl,de
  42+ 776E              squareregfz:
  43+ 776E 3A E8 C0     	ld a, (UBnkZScaled)
  44+ 7771 57           	ld d,a
  45+ 7772 5F           	ld e,a
  46+ 7773 ED 30        	mul
  47+ 7775 19           	add hl,de
  48+ 7776 EB           	ex de,hl			; de de to number to root
  49+ 7777              hlequsquareroot:
  50+ 7777 CD A8 70     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 777A E5           	push hl				; save it for work 3 copies
  52+ 777B E5           	push hl				; save it for work
  53+ 777C E5           	push hl				; save it for work
  54+ 777D              normfx:
  55+ 777D 3A E4 C0     	ld a,(UBnkXScaled)
  56+ 7780 E1           	pop hl				; get copy #1
  57+ 7781 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 7782 4F           	ld c,a
  59+ 7783 CD 3B 77     	call asm_tis2
  60+ 7786 32 E4 C0     	ld (UBnkXScaled),a
  61+ 7789              normfy:
  62+ 7789 3A E6 C0     	ld a,(UBnkYScaled)
  63+ 778C E1           	pop hl				; get copy #2
  64+ 778D 7D           	ld a,l
  65+ 778E 4F           	ld c,a
  66+ 778F CD 3B 77     	call asm_tis2
  67+ 7792 32 E6 C0     	ld (UBnkYScaled),a
  68+ 7795              normfz:
  69+ 7795 3A E8 C0     	ld a,(UBnkZScaled)
  70+ 7798 E1           	pop hl				; get copy #2
  71+ 7799 7D           	ld a,l
  72+ 779A 4F           	ld c,a
  73+ 779B CD 3B 77     	call asm_tis2
  74+ 779E 32 E8 C0     	ld (UBnkZScaled),a
  75+ 77A1              asm_unit_vector_end:
  76+ 77A1 C9           	ret
  77+ 77A2
# file closed: ../../Maths/asm_unitvector.asm
1046  77A2                  INCLUDE "../../Maths/compare16.asm"
# file opened: ../../Maths/compare16.asm
   1+ 77A2              ; Input:
   2+ 77A2              ;       HL = 1st value
   3+ 77A2              ;       DE = 2nd value
   4+ 77A2              ; Output:
   5+ 77A2              ;       CF, ZF = results of comparison:
   6+ 77A2              ;
   7+ 77A2              ;               CF      ZF      Result
   8+ 77A2              ;               -----------------------------------
   9+ 77A2              ;               0       0       HL > DE
  10+ 77A2              ;               0       1       HL == DE
  11+ 77A2              ;               1       0       HL < DE
  12+ 77A2              ;               1       1       Impossible
  13+ 77A2              ;
  14+ 77A2
  15+ 77A2
  16+ 77A2 E5           CompareBCDESigned:  push    hl
  17+ 77A3 A7                               and     a
  18+ 77A4 60 69                            ld      hl,bc
  19+ 77A6 ED 52                            sbc     hl,de
  20+ 77A8 E1                               pop     hl
  21+ 77A9 C9                               ret
  22+ 77AA
  23+ 77AA E5           CompareDEBCSigned:  push    hl
  24+ 77AB A7                               and     a
  25+ 77AC 62 6B                            ld      hl,de
  26+ 77AE ED 42                            sbc     hl,bc
  27+ 77B0 E1                               pop     hl
  28+ 77B1 C9                               ret
  29+ 77B2
  30+ 77B2
  31+ 77B2              ;### CMPGTE -> test if A>=B
  32+ 77B2              ;### Input      HL=A, DE=B if hl=> de no carry else de > hl and set carry
  33+ 77B2 7C           CompareHLDESgn:     ld a,h
  34+ 77B3 AA                               xor d
  35+ 77B4 FA BE 77                         jp m, .cmpgte2
  36+ 77B7 ED 52                            sbc hl,de
  37+ 77B9 30 09                            jr nc, .cmpgte3
  38+ 77BB 19           .cmpgte1            add hl,de
  39+ 77BC                                  SetCarryFlag
  39+ 77BC 37          >                        scf
  40+ 77BD C9                               ret
  41+ 77BE CB 7A        .cmpgte2            bit 7,d
  42+ 77C0 28 05                            jr z,.cmpgte4
  43+ 77C2              .cmpgte5:           ClearCarryFlag
  43+ 77C2 B7          >                        or a
  44+ 77C3 C9                               ret
  45+ 77C4 19           .cmpgte3            add hl,de
  46+ 77C5                                  ClearCarryFlag
  46+ 77C5 B7          >                        or a
  47+ 77C6 C9                               ret
  48+ 77C7              .cmpgte4:           SetCarryFlag
  48+ 77C7 37          >                        scf
  49+ 77C8 C9                               ret
  50+ 77C9
  51+ 77C9              ; Compares HL and DE sets z flag if same, else nz
  52+ 77C9 7C           CompareHLDESame:    ld  a,h
  53+ 77CA BA                               cp  d
  54+ 77CB C0                               ret nz
  55+ 77CC 7D                               ld  a,l
  56+ 77CD BB                               cp  e
  57+ 77CE C9                               ret
  58+ 77CF
  59+ 77CF
  60+ 77CF
  61+ 77CF 7C           CompareHLBCSgn:     ld a,h
  62+ 77D0 A8                               xor b
  63+ 77D1 FA DA 77                         jp m, .cmpgte2
  64+ 77D4 ED 42                            sbc hl,bc
  65+ 77D6 30 06                            jr nc, .cmpgte3
  66+ 77D8              .cmpgte1            SetCarryFlag
  66+ 77D8 37          >                        scf
  67+ 77D9 C9                               ret
  68+ 77DA CB 78        .cmpgte2            bit 7,b
  69+ 77DC 28 FA                            jr z,.cmpgte1
  70+ 77DE              .cmpgte3            ClearCarryFlag
  70+ 77DE B7          >                        or a
  71+ 77DF C9                               ret
  72+ 77E0
  73+ 77E0              CompareHLDESigned:
  74+ 77E0 E5           compare16HLDE:      push    hl
  75+ 77E1 A7                               and     a
  76+ 77E2 ED 52                            sbc     hl,de
  77+ 77E4 E1                               pop     hl
  78+ 77E5 C9                               ret
  79+ 77E6              CompareHLBCSigned:
  80+ 77E6 E5           CompareHLBC:        push    hl
  81+ 77E7 A7                               and     a
  82+ 77E8 ED 42                            sbc     hl,bc
  83+ 77EA E1                               pop     hl
  84+ 77EB C9                               ret
  85+ 77EC
  86+ 77EC              ; With compare signed we do ABS comparison
  87+ 77EC              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  88+ 77EC
  89+ 77EC E5 D5        compare16HLDEABS:   push    hl,,de
  90+ 77EE 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  91+ 77EF E6 7F                            and     SignMask8Bit
  92+ 77F1 67                               ld      h,a
  93+ 77F2 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  94+ 77F3 E6 7F                            and     SignMask8Bit
  95+ 77F5 57                               ld      d,a
  96+ 77F6 A7                               and     a
  97+ 77F7 ED 52                            sbc     hl,de
  98+ 77F9 D1 E1                            pop     hl,,de
  99+ 77FB C9                               ret
 100+ 77FC
 101+ 77FC
# file closed: ../../Maths/compare16.asm
1047  77FC                  INCLUDE "../../Maths/normalise96.asm"
# file opened: ../../Maths/normalise96.asm
   1+ 77FC              ; a equal a / d * 96
   2+ 77FC              ; Tested and works with signed numbers
   3+ 77FC DD 7E 01     NormaliseIXVector:      ld		a,(ix+1)			; Vector X high
   4+ 77FF E6 7F                                and		SignMask8Bit        ; a = abs X high
   5+ 7801 57                                   ld      d,a                 ; hl = abs X ^ 2
   6+ 7802 5F                                   ld      e,a                 ; .
   7+ 7803 ED 30                                mul     de                  ; .
   8+ 7805 EB                                   ex      de,hl               ; .
   9+ 7806 DD 7E 03                             ld		a,(ix+3)			; vector = Y high
  10+ 7809 E6 7F                                and		SignMask8Bit        ; unsigned
  11+ 780B 57                                   ld      d,a                 ; de = abs Y ^ 2
  12+ 780C 5F                                   ld      e,a                 ; .
  13+ 780D ED 30                                mul     de                  ; .
  14+ 780F 19                                   add     hl,de               ; hl = x^2 + y ^2
  15+ 7810 DD 7E 05                             ld		a,(ix+5)			; vector = Z high
  16+ 7813 E6 7F                                and		SignMask8Bit        ; unsigned
  17+ 7815 57                                   ld      d,a                 ; de = abs Z ^ 2
  18+ 7816 5F                                   ld      e,a                 ; .
  19+ 7817 ED 30                                mul     de                  ; .
  20+ 7819 19                                   add     hl,de               ; de = x^2 + y ^2 + z ^ 2
  21+ 781A EB                                   ex      de,hl               ; .
  22+ 781B CD A8 70     .n96SQRT:               call	asm_sqrt			; hl = sqrt de
  23+ 781E DD 7E 01     .n96NORMX:              ld		a,(ix+1)
  24+ 7821 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  25+ 7822 CD 54 7A                             call	AequAdivDmul96Q8    ; does not use HL so we can retain it
  26+ 7825 47                                   ld		b,a				    ; Sort out restoring sign bit
  27+ 7826 0E 00                                ld      c,0                 ; .
  28+ 7828 DD 71 00 DD                          ld		(ix+0),bc           ; .
  28+ 782C 70 01
  29+ 782E DD 7E 03     .n96NORMY:              ld		a,(ix+3)
  30+ 7831 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  31+ 7832 CD 54 7A                             call	AequAdivDmul96Q8	; does not use HL so we can retain it
  32+ 7835 47                                   ld		b,a				    ; Sort out restoring sign bit
  33+ 7836 0E 00                                ld      c,0                 ; .
  34+ 7838 DD 71 02 DD                          ld		(ix+2),bc           ; .
  34+ 783C 70 03
  35+ 783E DD 7E 05     .n96NORMZ:              ld		a,(ix+5)
  36+ 7841 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  37+ 7842 CD 54 7A                             call	AequAdivDmul96Q8 	; does not use HL so we can retain it
  38+ 7845 47                                   ld		b,a				    ; Sort out restoring sign bit
  39+ 7846 0E 00                                ld      c,0                 ; .
  40+ 7848 DD 71 04 DD                          ld		(ix+4),bc           ; .
  40+ 784C 70 05
  41+ 784E C9                                   ret
  42+ 784F
  43+ 784F              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  44+ 784F 3A E4 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
  45+ 7852 DD 67                                ld		ixh,a               ; ixh = signed x component
  46+ 7854 E6 7F                                and		SignMask8Bit        ; a = unsigned version
  47+ 7856              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  47+ 7856 5F          >			ld	e,a
  47+ 7857 57          >			ld  d,a
  47+ 7858 ED 30       >			mul
  48+ 785A 62                                   ld		h,d					; h == varR d = varO e= varA
  49+ 785B 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  50+ 785C 3A E5 C0     .n96SQY:                ld		a,(XX15VecY)
  51+ 785F DD 6F                                ld		ixl,a               ; ixl = signed y componet
  52+ 7861 E6 7F                                and		SignMask8Bit                 ; = abs
  53+ 7863                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  53+ 7863 5F          >			ld	e,a
  53+ 7864 57          >			ld  d,a
  53+ 7865 ED 30       >			mul
  54+ 7867 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  55+ 7868 3A E6 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  56+ 786B FD 67                                ld		iyh,a               ; iyh = signed
  57+ 786D E6 7F                                and		SignMask8Bit                 ; unsigned
  58+ 786F                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  58+ 786F 5F          >			ld	e,a
  58+ 7870 57          >			ld  d,a
  58+ 7871 ED 30       >			mul
  59+ 7873 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  60+ 7874 EB                                   ex		de,hl				; hl => de ready for square root
  61+ 7875 CD A8 70     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  62+ 7878 3A E4 C0     .n96NORMX:              ld		a,(XX15VecX)
  63+ 787B E6 7F                                and		SignMask8Bit
  64+ 787D 4F                                   ld		c,a
  65+ 787E 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ 787F CD 0A 7A                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  67+ 7882 47                                   ld		b,a				    ;++SGN
  68+ 7883 DD 7C                                ld		a,ixh			    ;++SGN
  69+ 7885 E6 80                                and		$80				    ;++SGN
  70+ 7887 B0                                   or		b				    ;++SGN
  71+ 7888 32 E4 C0                             ld		(XX15VecX),a
  72+ 788B 3A E5 C0     .n96NORMY:              ld		a,(XX15VecY)
  73+ 788E E6 7F                                and		SignMask8Bit
  74+ 7890 4F                                   ld		c,a
  75+ 7891 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  76+ 7892 CD 0A 7A                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  77+ 7895 47                                   ld		b,a				    ;++SGN
  78+ 7896 DD 7D                                ld		a,ixl			    ;++SGN
  79+ 7898 E6 80                                and		$80				    ;++SGN
  80+ 789A B0                                   or		b				    ;++SGN
  81+ 789B 32 E5 C0                             ld		(XX15VecY),a
  82+ 789E 3A E6 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  83+ 78A1 E6 7F                                and		SignMask8Bit
  84+ 78A3 4F                                   ld		c,a
  85+ 78A4 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  86+ 78A5 CD 0A 7A                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  87+ 78A8 47                                   ld		b,a				    ;++SGN
  88+ 78A9 FD 7C                                ld		a,iyh			    ;++SGN
  89+ 78AB E6 80                                and		$80				    ;++SGN
  90+ 78AD B0                                   or		b				    ;++SGN
  91+ 78AE 32 E6 C0                             ld		(XX15VecZ),a
  92+ 78B1 C9                                   ret
  93+ 78B2
  94+ 78B2              ; Normalise vector
  95+ 78B2              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  96+ 78B2              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  97+ 78B2              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  98+ 78B2              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  99+ 78B2
 100+ 78B2                      IFNDEF DEBUG_NO_TACTICS_CODE
 101+ 78B2 ~            ;------------------------------------------------------------
 102+ 78B2 ~            ; To normalise the 24 bit version, bring out sign into TargetVectorxsgn
 103+ 78B2 ~            ; and make UBnKTargetXpos = abs (UBnKTargetXPos)
 104+ 78B2 ~            ; set up UBnKTarget[XYZ]Pos with 7 bit version of vector normalised
 105+ 78B2 ~            ; set up UBnKTargetpXYZ]Sgn with the sign bit
 106+ 78B2 ~            NormalseUnivTarget:     ld      a,(UBnKTargetXPos+2)
 107+ 78B2 ~                                    ld      b,a
 108+ 78B2 ~                                    and     $80
 109+ 78B2 ~                                    ld      (UBnKTargetXPosSgn),a        ; Split out the sign into byte 3
 110+ 78B2 ~                                    ld      a,b
 111+ 78B2 ~                                    and     $7F
 112+ 78B2 ~                                    ld      (UBnKTargetXPos+2),a
 113+ 78B2 ~            .ABSYComponenet:        ld      a,(UBnKTargetYPos+2)
 114+ 78B2 ~                                    ld      b,a
 115+ 78B2 ~                                    and     $80
 116+ 78B2 ~                                    ld      (UBnKTargetYPosSgn),a        ; Split out the sign into byte 3
 117+ 78B2 ~                                    ld      a,b
 118+ 78B2 ~                                    and     $7F
 119+ 78B2 ~                                    ld      (UBnKTargetYPos+2),a
 120+ 78B2 ~            .ABSXZomponenet:        ld      a,(UBnKTargetZPos+2)
 121+ 78B2 ~                                    ld      b,a
 122+ 78B2 ~                                    and     $80
 123+ 78B2 ~                                    ld      (UBnKTargetZPosSgn),a        ; Split out the sign into byte 3
 124+ 78B2 ~                                    ld      a,b
 125+ 78B2 ~                                    and     $7F
 126+ 78B2 ~                                    ld      (UBnKTargetZPos+2),a
 127+ 78B2 ~            ;.. When we hit here the UBnKTargetX,Y and Z are 24 bit abs values to simplify scaling
 128+ 78B2 ~            .Scale:                 ld      hl, (TacticsVectorX)        ; pull 24 bit into registers
 129+ 78B2 ~                                    ld      a,(TacticsVectorX+2)        ; h l ixH = X
 130+ 78B2 ~                                    ld      ixh,a                       ;
 131+ 78B2 ~                                    ld      de, (TacticsVectorY)        ; d e iyH = Y
 132+ 78B2 ~                                    ld      a,(TacticsVectorY+2)        ;
 133+ 78B2 ~                                    ld      iyh,a                       ;
 134+ 78B2 ~                                    ld      bc, (TacticsVectorZ)        ; b c iyL = Y
 135+ 78B2 ~                                    ld      a,(TacticsVectorZ+2)        ;
 136+ 78B2 ~                                    ld      iyl,a                       ;
 137+ 78B2 ~            .ScaleLoop1:            ld      a,ixh                       ; first pass get to 16 bit
 138+ 78B2 ~                                    or      iyh
 139+ 78B2 ~                                    or      iyl
 140+ 78B2 ~                                    or      iyh
 141+ 78B2 ~                                    jp      z,.DoneScaling1
 142+ 78B2 ~                                    ShiftIXhHLRight1
 143+ 78B2 ~                                    ShiftIYhDERight1
 144+ 78B2 ~                                    ShiftIYlBCRight1
 145+ 78B2 ~            .DoneScaling1:          ;-- Now we have got here hl = X, de = Y, bc = Z
 146+ 78B2 ~                                    ;-- we cal just jump into the Normalize Tactics code
 147+ 78B2 ~            .ScaleLoop2:            ld      a,h
 148+ 78B2 ~                                    or      d
 149+ 78B2 ~                                    or      b
 150+ 78B2 ~                                    jr      z,.DoneScaling2
 151+ 78B2 ~                                    ShiftHLRight1
 152+ 78B2 ~                                    ShiftDERight1
 153+ 78B2 ~                                    ShiftBCRight1
 154+ 78B2 ~                                    jp      .ScaleLoop2
 155+ 78B2 ~            ;-- Now we are down to 8 bit values, so we need to scale again to get S7
 156+ 78B2 ~            .DoneScaling2:          ShiftHLRight1
 157+ 78B2 ~                                    ShiftDERight1
 158+ 78B2 ~                                    ShiftBCRight1
 159+ 78B2 ~            .CalculateLength:       push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 160+ 78B2 ~                                    ld      d,e                         ; hl = y ^ 2
 161+ 78B2 ~                                    mul     de                          ; .
 162+ 78B2 ~                                    ex      de,hl                       ; .
 163+ 78B2 ~                                    ld      d,e                         ; de = x ^ 2
 164+ 78B2 ~                                    mul     de                          ; .
 165+ 78B2 ~                                    add     hl,de                       ; hl = y^ 2 + x ^ 2
 166+ 78B2 ~                                    ld      d,c
 167+ 78B2 ~                                    ld      e,c
 168+ 78B2 ~                                    mul     de
 169+ 78B2 ~                                    add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 170+ 78B2 ~                                    ex      de,hl                       ; fix as hl was holding square
 171+ 78B2 ~                                    call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 172+ 78B2 ~                                    ; add in logic if h is low then use lower bytes for all
 173+ 78B2 ~            .NormaliseZ:            ld      a,l                         ; save length into iyh
 174+ 78B2 ~                                    ld      iyh,a                       ; .
 175+ 78B2 ~                                    ld      d,a                         ;
 176+ 78B2 ~                                    pop     bc                          ; retrive z scaled
 177+ 78B2 ~                                    ld      a,c                         ; a = scaled byte
 178+ 78B2 ~                                    call    AequAdivDmul967Bit
 179+ 78B2 ~                                    ld      (TacticsVectorZ),a          ; now Tactics Vector Z byte 1 is value
 180+ 78B2 ~            .NormaliseY:            pop     de
 181+ 78B2 ~                                    ld      a,e
 182+ 78B2 ~                                    ld      d,iyh
 183+ 78B2 ~                                    call    AequAdivDmul967Bit
 184+ 78B2 ~                                    ld      (TacticsVectorY),a
 185+ 78B2 ~            .NormaliseX:            pop     hl
 186+ 78B2 ~                                    ld      a,l
 187+ 78B2 ~                                    ld      d,iyh
 188+ 78B2 ~                                    call    AequAdivDmul967Bit
 189+ 78B2 ~                                    ld      (TacticsVectorX),a          ;
 190+ 78B2 ~                                    ret
 191+ 78B2 ~
 192+ 78B2 ~                        DISPLAY "TODO: Missle AI only works on S15 spread over 24 bits, i.e. ignores Sign byte 7 bits"
 193+ 78B2 ~            ;-- This norallises the Tactics vector in memory as much as possible, uses 16 bits
 194+ 78B2 ~            NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 195+ 78B2 ~                                    ld      de, (TacticsVectorY)        ; .
 196+ 78B2 ~                                    ld      bc, (TacticsVectorZ)        ; .
 197+ 78B2 ~            .ScaleLoop:             ld      a,h
 198+ 78B2 ~                                    or      d
 199+ 78B2 ~                                    or      b
 200+ 78B2 ~                                    jr      z,.DoneScaling
 201+ 78B2 ~                                    ShiftHLRight1
 202+ 78B2 ~                                    ShiftDERight1
 203+ 78B2 ~                                    ShiftBCRight1
 204+ 78B2 ~                                    jp      .ScaleLoop
 205+ 78B2 ~            .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 206+ 78B2 ~                                    ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 207+ 78B2 ~                                    ShiftBCRight1                       ; now values are in L E C
 208+ 78B2 ~                                    push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 209+ 78B2 ~                                    ld      d,e                         ; hl = y ^ 2
 210+ 78B2 ~                                    mul     de                          ; .
 211+ 78B2 ~                                    ex      de,hl                       ; .
 212+ 78B2 ~                                    ld      d,e                         ; de = x ^ 2
 213+ 78B2 ~                                    mul     de                          ; .
 214+ 78B2 ~                                    add     hl,de                       ; hl = y^ 2 + x ^ 2
 215+ 78B2 ~                                    ld      d,c
 216+ 78B2 ~                                    ld      e,c
 217+ 78B2 ~                                    mul     de
 218+ 78B2 ~                                    add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 219+ 78B2 ~                                    ex      de,hl                       ; fix as hl was holding square
 220+ 78B2 ~                                    call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 221+ 78B2 ~                                    ; add in logic if h is low then use lower bytes for all
 222+ 78B2 ~                                    ld      a,l
 223+ 78B2 ~                                    ld      iyh,a
 224+ 78B2 ~                                    ld      d,a
 225+ 78B2 ~                                    pop     bc                          ; retrive tacticsvectorz scaled
 226+ 78B2 ~                                    ld      a,c                         ; a = scaled byte
 227+ 78B2 ~                                    call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 228+ 78B2 ~                                    ld      (TacticsVectorZ),a
 229+ 78B2 ~                                    pop     de
 230+ 78B2 ~                                    ld      a,e
 231+ 78B2 ~                                    ld      d,iyh
 232+ 78B2 ~                                    call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 233+ 78B2 ~                                    ld      (TacticsVectorY),a
 234+ 78B2 ~                                    pop     hl
 235+ 78B2 ~                                    ld      a,l
 236+ 78B2 ~                                    ld      d,iyh
 237+ 78B2 ~                                    call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 238+ 78B2 ~                                    ld      (TacticsVectorX),a
 239+ 78B2 ~                                    ; BODGE FOR NOW
 240+ 78B2 ~                                    ZeroA                              ;; added to help debugging
 241+ 78B2 ~                                    ld      (TacticsVectorX+1),a       ;; added to help debugging
 242+ 78B2 ~                                    ld      (TacticsVectorY+1),a       ;; added to help debugging
 243+ 78B2 ~                                    ld      (TacticsVectorZ+1),a       ;; added to help debugging
 244+ 78B2 ~                                    SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 245+ 78B2 ~                                    SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 246+ 78B2 ~                                    SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 247+ 78B2 ~                                  ;; oly using byte 2 for sign  ldCopyByte TacticsVectorX+2, TacticsVectorX+1
 248+ 78B2 ~                                  ;; oly using byte 2 for sign  ldCopyByte TacticsVectorY+2, TacticsVectorY+1
 249+ 78B2 ~                                  ;; oly using byte 2 for sign  ldCopyByte TacticsVectorZ+2, TacticsVectorZ+1
 250+ 78B2 ~                                  ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorX+1     ; now upper byte is sign only
 251+ 78B2 ~                                  ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorY+1     ; (could move it to lower perhaps later if
 252+ 78B2 ~                                  ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorZ+1     ;  its worth it)
 253+ 78B2 ~                                    ret
 254+ 78B2                      ENDIF
 255+ 78B2
# file closed: ../../Maths/normalise96.asm
1048  78B2                  INCLUDE "../../Maths/binary_to_decimal.asm"
# file opened: ../../Maths/binary_to_decimal.asm
   1+ 78B2              ;Number in hl to decimal ASCII
   2+ 78B2              ;Thanks to z80 Bits
   3+ 78B2              ;inputs:	hl = number to ASCII
   4+ 78B2              ;example: hl=300 outputs '00300'
   5+ 78B2              ;destroys: af, bc, hl, de used
   6+ 78B2              DispHLtoDE:
   7+ 78B2              ; "DispHL, writes HL to DE address"
   8+ 78B2 01 F0 D8     	ld	bc,-10000
   9+ 78B5 CD CB 78     	call	Num1
  10+ 78B8 01 18 FC     	ld	bc,-1000
  11+ 78BB CD CB 78     	call	Num1
  12+ 78BE 01 9C FF     	ld	bc,-100
  13+ 78C1 CD CB 78     	call	Num1
  14+ 78C4 0E F6        	ld	c,-10
  15+ 78C6 CD CB 78     	call	Num1
  16+ 78C9 0E FF        	ld	c,-1
  17+ 78CB              Num1:
  18+ 78CB 3E 2F        	ld	a,'0'-1
  19+ 78CD              .Num2:
  20+ 78CD 3C           	inc	a
  21+ 78CE 09           	add	hl,bc
  22+ 78CF 38 FC        	jr	c,.Num2
  23+ 78D1 ED 42        	sbc	hl,bc
  24+ 78D3 12           	ld	(de),a
  25+ 78D4 13           	inc	de
  26+ 78D5 C9           	ret
  27+ 78D6
  28+ 78D6              DispAtoDE:
  29+ 78D6 26 00        	ld h,0
  30+ 78D8 6F           	ld l,a
  31+ 78D9 C3 B2 78     	jp DispHLtoDE
  32+ 78DC
  33+ 78DC              DispPriceAtoDE:
  34+ 78DC 26 00        	ld h,0
  35+ 78DE 6F           	ld l,a
  36+ 78DF 01 9C FF     	ld	bc,-100
  37+ 78E2 CD F2 78     	call	.NumLeadBlank1
  38+ 78E5 0E F6        	ld	c,-10
  39+ 78E7 CD CB 78     	call	Num1
  40+ 78EA 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 78EC                                  DISPLAY "TODO:  optimise "
  42+ 78EC 12           	ld		(de),a					; we can optimse that later TODO
  43+ 78ED 13           	inc		de						; with just an inc De
  44+ 78EE 0E FF        	ld	c,-1
  45+ 78F0 18 D9        	jr		Num1
  46+ 78F2              .NumLeadBlank1:
  47+ 78F2 3E 2F        	ld	a,'0'-1
  48+ 78F4              .NumLeadBlank2:
  49+ 78F4 3C           	inc	a
  50+ 78F5 09           	add	hl,bc
  51+ 78F6 38 FC        	jr	c,.NumLeadBlank2
  52+ 78F8 FE 30        	cp	'0'
  53+ 78FA 20 02        	jr	nz,.DontBlank
  54+ 78FC              .Blank:
  55+ 78FC 3E 20        	ld	a,' '
  56+ 78FE              .DontBlank:
  57+ 78FE ED 42        	sbc	hl,bc
  58+ 7900 12           	ld	(de),a
  59+ 7901 13           	inc	de
  60+ 7902 C9           	ret
  61+ 7903
  62+ 7903              DispQtyAtoDE:
  63+ 7903 FE 00        	cp	0
  64+ 7905 28 23        	jr	z,.NoStock
  65+ 7907 26 00        	ld h,0
  66+ 7909 6F           	ld l,a
  67+ 790A 01 9C FF     	ld	bc,-100
  68+ 790D CD 19 79     	call	.NumLeadBlank1
  69+ 7910 0E F6        	ld	c,-10
  70+ 7912 CD 19 79     	call	.NumLeadBlank1
  71+ 7915 0E FF        	ld	c,-1
  72+ 7917 18 B2        	jr		Num1
  73+ 7919              .NumLeadBlank1:
  74+ 7919 3E 2F        	ld	a,'0'-1
  75+ 791B              .NumLeadBlank2:
  76+ 791B 3C           	inc	a
  77+ 791C 09           	add	hl,bc
  78+ 791D 38 FC        	jr	c,.NumLeadBlank2
  79+ 791F FE 30        	cp	'0'
  80+ 7921 20 02        	jr	nz,.DontBlank
  81+ 7923              .Blank:
  82+ 7923 3E 20        	ld	a,' '
  83+ 7925              .DontBlank:
  84+ 7925 ED 42        	sbc	hl,bc
  85+ 7927 12           	ld	(de),a
  86+ 7928 13           	inc	de
  87+ 7929 C9           	ret
  88+ 792A              .NoStock:
  89+ 792A 3E 20        	ld	a,' '
  90+ 792C 12           	ld	(de),a
  91+ 792D 13           	inc	de
  92+ 792E 12           	ld	(de),a
  93+ 792F 13           	inc	de
  94+ 7930 3E 2D        	ld	a,'-'
  95+ 7932 12           	ld	(de),a
  96+ 7933 13           	inc de
  97+ 7934 C9           	ret
  98+ 7935
  99+ 7935
 100+ 7935              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 101+ 7935              ;### Input      DE,IX=32bit value, IY=destination address
 102+ 7935              ;### Output     IY=last char in destination string
 103+ 7935              ;### Destroyed AF,BC,DE,HL,IX
 104+ 7935 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 104+ 7939 0A 00 00 00
 104+ 793D 64 00 00 00
 104+ 7941 E8 03 00 00
 104+ 7945 10 27 00 00
 105+ 7949 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 105+ 794D 40 42 0F 00
 105+ 7951 80 96 98 00
 105+ 7955 00 E1 F5 05
 105+ 7959 00 CA 9A 3B
 106+ 795D 00 00 00 00  clcn32z ds 4
 107+ 7961
 108+ 7961              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 109+ 7961 CD 70 79     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 110+ 7964 FD 7E 00                             ld      a,(IY+0)
 111+ 7967 FD 77 01                             ld      (IY+1),a
 112+ 796A 3E 2E                                ld      a,"."
 113+ 796C FD 77 00                             ld      (IY+0),a
 114+ 796F C9                                   ret
 115+ 7970
 116+ 7970 DD 22 5D 79  DispDEIXtoIY:           ld (clcn32z),ix
 117+ 7974 ED 53 5F 79                          ld (clcn32z+2),de
 118+ 7978 DD 21 59 79                          ld ix,clcn32t+36
 119+ 797C 06 09                                ld b,9
 120+ 797E 0E 00                                ld c,0
 121+ 7980 3E 30        .clcn321:               ld a,'0'
 122+ 7982 B7                                   or a
 123+ 7983 DD 5E 00     .clcn322:               ld e,(ix+0)
 124+ 7986 DD 56 01                             ld d,(ix+1)
 125+ 7989 2A 5D 79                             ld hl,(clcn32z)
 126+ 798C ED 52                                sbc hl,de
 127+ 798E 22 5D 79                             ld (clcn32z),hl
 128+ 7991 DD 5E 02                             ld e,(ix+2)
 129+ 7994 DD 56 03                             ld d,(ix+3)
 130+ 7997 2A 5F 79                             ld hl,(clcn32z+2)
 131+ 799A ED 52                                sbc hl,de
 132+ 799C 22 5F 79                             ld (clcn32z+2),hl
 133+ 799F 38 04                                jr c,.clcn325
 134+ 79A1 0C                                   inc c
 135+ 79A2 3C                                   inc a
 136+ 79A3 18 DE                                jr .clcn322
 137+ 79A5 DD 5E 00     .clcn325:               ld e,(ix+0)
 138+ 79A8 DD 56 01                             ld d,(ix+1)
 139+ 79AB 2A 5D 79                             ld hl,(clcn32z)
 140+ 79AE 19                                   add hl,de
 141+ 79AF 22 5D 79                             ld (clcn32z),hl
 142+ 79B2 DD 5E 02                             ld e,(ix+2)
 143+ 79B5 DD 56 03                             ld d,(ix+3)
 144+ 79B8 2A 5F 79                             ld hl,(clcn32z+2)
 145+ 79BB ED 5A                                adc hl,de
 146+ 79BD 22 5F 79                             ld (clcn32z+2),hl
 147+ 79C0 11 FC FF                             ld de,-4
 148+ 79C3 DD 19                                add ix,de
 149+ 79C5 0C                                   inc c
 150+ 79C6 0D                                   dec c
 151+ 79C7 28 05                                jr z,.clcn323
 152+ 79C9 FD 77 00                             ld (iy+0),a
 153+ 79CC FD 23                                inc iy
 154+ 79CE 10 B0        .clcn323:               djnz .clcn321
 155+ 79D0 3A 5D 79                             ld a,(clcn32z)
 156+ 79D3 C6 30                                add A,'0'
 157+ 79D5 FD 77 00                             ld (iy+0),a
 158+ 79D8 FD 36 01 00                          ld (iy+1),0
 159+ 79DC C9                                   ret
 160+ 79DD
# file closed: ../../Maths/binary_to_decimal.asm
1049  79DD                  INCLUDE "../../Maths/asm_AequAdivQmul96.asm" ; AequAdivDmul96
# file opened: ../../Maths/asm_AequAdivQmul96.asm
   1+ 79DD              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 79DD BA          >                        cp     d
   1+ 79DE D2 F9 79    >                        jp		nc,.TIS2AccGTEQ
   2+ 79E1 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 79E3 CB 27        .TIS2RollTLoop:			sla			a
   4+ 79E5                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 79E5 BA          >                        cp      d
   4+ 79E6 DA FC 79    >                        jp		c, .TIS2SkipSub
   5+ 79E9 9A                                   sbc			a,d							; do subtraction with carry
   6+ 79EA 37                                   scf
   7+ 79EB CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 79ED 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 79EF 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 79F0 CB 3F                                srl			a							; result / 2
  11+ 79F2 CB 3F                                srl			a							; result / 4
  12+ 79F4 47                                   ld			b,a							; t = t /4
  13+ 79F5 CB 3F                                srl			a							; result / 8
  14+ 79F7 80                                   add			a,b							; result /8 + result /4
  15+ 79F8 C9                                   ret
  16+ 79F9 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 79FB C9                                   ret
  18+ 79FC B7           .TIS2SkipSub:           or			a
  19+ 79FD CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 79FF 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 7A01 C3 EF 79                             jp			.TIS2SKIPCont
  22+ 7A04
  23+ 7A04
  24+ 7A04              ;; USES 			A DE BC
  25+ 7A04              ;; DOES NOT USE 	HL
  26+ 7A04              ;TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 7A04              ;	bit			        7,a
  28+ 7A04              ;	jr			        z,AequAdivQmul96
  29+ 7A04              ;	neg			        							; revers 2s'c and just set neg bit
  30+ 7A04              ;	set			        7,a
  31+ 7A04              ;; Note negative numbers are bit 7 set not 2's compliment
  32+ 7A04              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 7A04              TIS2:
  34+ 7A04 4F                                   ld			c,a							; copy of Acc
  35+ 7A05 3A 17 6A                             ld			a,(varQ)
  36+ 7A08 57                                   ld			d,a							; d = varQ
  37+ 7A09 79                                   ld			a,c							; recover a
  38+ 7A0A 4F           AequAdivDmul967Bit:     ld          c,a
  39+ 7A0B 7A                                   ld          a,d
  40+ 7A0C CB 27                                sla         a       ; wipe sign bit
  41+ 7A0E C8                                   ret         z       ; quick exit if dividing 0 as a will have the result of 0
  42+ 7A0F 30 10                                jr          nc, .OKToDivide
  43+ 7A11 B7           .ScaleDown:             or          a       ; clear carry bit
  44+ 7A12 CB 3A                                srl         d       ; d >> 1 to get back to 7 bit value
  45+ 7A14 79                                   ld          a,c
  46+ 7A15 E6 7F                                and         SignMask8Bit
  47+ 7A17 CB 3F                                srl         a
  48+ 7A19 47                                   ld          b,a
  49+ 7A1A 79                                   ld          a,c
  50+ 7A1B E6 80                                and         $80
  51+ 7A1D B0                                   or          b
  52+ 7A1E C3 22 7A                             jp          AequAdivDmul96
  53+ 7A21 79           .OKToDivide:            ld          a,c
  54+ 7A22 4F           AequAdivDmul96:         ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  55+ 7A23 E6 7F                                and			SignMask8Bit				; ignore sign
  56+ 7A25                                      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  56+ 7A25 BA          >                        cp     d
  56+ 7A26 D2 46 7A    >                        jp		nc,.TIS2AccGTEQ
  57+ 7A29 06 FE                                ld			b,$FE						; division roll (replaced varT)
  58+ 7A2B              .TIS2RollTLoop:									; .TIL2	; roll T
  59+ 7A2B CB 27                                sla			a
  60+ 7A2D                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  60+ 7A2D BA          >                        cp      d
  60+ 7A2E DA 4C 7A    >                        jp		c, .TIS2SkipSub
  61+ 7A31 9A                                   sbc			a,d							; do subtraction with carry
  62+ 7A32 37                                   scf                                     ; set carrry to roll into b
  63+ 7A33 CB 10                                rl			b							; T rolled left to push bit out the end
  64+ 7A35 38 F4                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  65+ 7A37 78           .TIS2SKIPCont:	        ld			a,b							; A = T = 4 / 4
  66+ 7A38 CB 3F                                srl			a							; .
  67+ 7A3A CB 3F                                srl			a							; .
  68+ 7A3C 47                                   ld			b,a							; .
  69+ 7A3D CB 3F                                srl			a							; A = A / 2 (i.e. T /8)
  70+ 7A3F 80                                   add			a,b							; A = T/8 + T/4 (3T/8)
  71+ 7A40 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  72+ 7A41 79                                   ld			a,c							; copy of Acc to look at sign bit
  73+ 7A42 E6 80                                and			$80							; recover sign only
  74+ 7A44 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  75+ 7A45 C9                                   ret
  76+ 7A46              ;TI4:										;\ clean to +/- unity
  77+ 7A46 79           .TIS2AccGTEQ:           ld			a,c
  78+ 7A47 E6 80                                and			$80							; copy of Acc
  79+ 7A49 F6 60                                or			$60							; unity
  80+ 7A4B C9                                   ret
  81+ 7A4C              .TIS2SkipSub:           ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  81+ 7A4C B7          >                        or a
  82+ 7A4D CB 10                                rl			b							; T rolled left to push bit out the end
  83+ 7A4F 38 DA                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  84+ 7A51 C3 37 7A                             jp			.TIS2SKIPCont
  85+ 7A54
  86+ 7A54
  87+ 7A54
  88+ 7A54              ; as per AequAdivDmul967Bit but Q is an 8 bit unsigned
  89+ 7A54              ; a = a(S7)/Q(8u)*96
  90+ 7A54 4F           AequAdivDmul96Q8:       ld          c,a                         ; c = a
  91+ 7A55 7A           .CheckDivide0:          ld          a,d                         ; check if its a / 0
  92+ 7A56 A7                                   and         a                           ; .
  93+ 7A57 CA 7E 7A                             jp          z,.TIS2AccGTEQ              ; .
  94+ 7A5A 79           .NotDivide0:            ld          a,c                         ; get back value of A
  95+ 7A5B E6 7F                                and         SignMask8Bit                ; and make it abs, so a = abs(a) c = original a
  96+ 7A5D                                      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  96+ 7A5D BA          >                        cp     d
  96+ 7A5E D2 7E 7A    >                        jp		nc,.TIS2AccGTEQ
  97+ 7A61 06 FE                                ld			b,$FE						; division roll (replaced varT)
  98+ 7A63              .TIS2RollTLoop:									; .TIL2	; roll T
  99+ 7A63 CB 27                                sla			a
 100+ 7A65                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
 100+ 7A65 BA          >                        cp      d
 100+ 7A66 DA 84 7A    >                        jp		c, .TIS2SkipSub
 101+ 7A69 9A                                   sbc			a,d							; do subtraction with carry
 102+ 7A6A 37                                   scf                                     ; set carrry to roll into b
 103+ 7A6B CB 10                                rl			b							; T rolled left to push bit out the end
 104+ 7A6D 38 F4                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
 105+ 7A6F 78           .TIS2SKIPCont:	        ld			a,b							; A = T = 4 / 4
 106+ 7A70 CB 3F                                srl			a							; .
 107+ 7A72 CB 3F                                srl			a							; .
 108+ 7A74 47                                   ld			b,a							; .
 109+ 7A75 CB 3F                                srl			a							; A = A / 2 (i.e. T /8)
 110+ 7A77 80                                   add			a,b							; A = T/8 + T/4 (3T/8)
 111+ 7A78 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
 112+ 7A79 79                                   ld			a,c							; copy of Acc to look at sign bit
 113+ 7A7A E6 80                                and			SignOnly8Bit    			; recover sign only
 114+ 7A7C B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
 115+ 7A7D C9                                   ret
 116+ 7A7E              ;TI4:										;\ clean to +/- unity
 117+ 7A7E 79           .TIS2AccGTEQ:           ld			a,c
 118+ 7A7F E6 80                                and			$80							; copy of Acc
 119+ 7A81 F6 60                                or			$60							; unity
 120+ 7A83 C9                                   ret
 121+ 7A84              .TIS2SkipSub:           ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
 121+ 7A84 B7          >                        or a
 122+ 7A85 CB 10                                rl			b							; T rolled left to push bit out the end
 123+ 7A87 38 DA                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
 124+ 7A89 C3 6F 7A                             jp			.TIS2SKIPCont
 125+ 7A8C
 126+ 7A8C
# file closed: ../../Maths/asm_AequAdivQmul96.asm
1050  7A8C                  INCLUDE "../../Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ../../Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 7A8C              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 7A8C              fmltu:
   3+ 7A8C 57           AequAmulQdiv256:        ld	d,a
   4+ 7A8D 3A 17 6A                             ld	a,(varQ)
   5+ 7A90 5F                                   ld	e,a
   6+ 7A91 ED 30                                mul
   7+ 7A93 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 7A94 C9                                   ret
   9+ 7A95
  10+ 7A95 5F           AequAmulDdiv256:        ld  e,a
  11+ 7A96 ED 30                                mul
  12+ 7A98 7A                                   ld  a,d
  13+ 7A99 C9                                   ret
  14+ 7A9A
# file closed: ../../Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1051  7A9A                  ;INCLUDE "../../Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
1052  7A9A                  INCLUDE "../../Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ../../Maths/Utilities/APequQmulA-MULT1.asm
   1+ 7A9A              APequQmulA:
   2+ 7A9A              asm_mult1:
   3+ 7A9A              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 7A9A FE 00        	cp	0
   5+ 7A9C 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 7A9E 5F           	ld	e,a
   7+ 7A9F 3A 17 6A     	ld	a,(varQ)
   8+ 7AA2 57           	ld	d,a
   9+ 7AA3 FE 00        	cp	0				; compare a
  10+ 7AA5 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 7AA7 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 7AA8 E6 80        	and $80				; get the resultant sign and save into b
  13+ 7AAA 47           	ld	b,a
  14+ 7AAB 7A           	ld	a,d
  15+ 7AAC E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 7AAE 57           	ld	d,a
  17+ 7AAF 7B           	ld	a,e
  18+ 7AB0 E6 7F        	and SignMask8Bit
  19+ 7AB2 5F           	ld	e,a
  20+ 7AB3 ED 30        	mul					; zxn de = d * e
  21+ 7AB5 7B           	ld	a,e
  22+ 7AB6 32 17 69     	ld	(varP),a		; p = lo
  23+ 7AB9 7A           	ld	a,d				; a = hi
  24+ 7ABA B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 7ABB 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 7ABC C9           	ret
  27+ 7ABD              .mul0:
  28+ 7ABD AF           	xor	a
  29+ 7ABE 32 17 69     	ld	(varP),a
  30+ 7AC1 57           	ld	d,a
  31+ 7AC2 5F           	ld  e,a
  32+ 7AC3 C9           	ret
  33+ 7AC4
# file closed: ../../Maths/Utilities/APequQmulA-MULT1.asm
1053  7AC4                  INCLUDE "../../Maths/Utilities/badd_ll38.asm"
# file opened: ../../Maths/Utilities/badd_ll38.asm
   1+ 7AC4              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 7AC4              SAEquSRPlusAQ:
   3+ 7AC4              ; Calculate the following between sign-magnitude numbers:
   4+ 7AC4              ;   (S A) = (S R) + (A Q)
   5+ 7AC4              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 7AC4              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 7AC4              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 7AC4              LL38:
   9+ 7AC4              ;	ld		d,a
  10+ 7AC4              ;	ld		a,(varQ)
  11+ 7AC4              ;	ld		e,a
  12+ 7AC4              ;	ld		a,(varS)
  13+ 7AC4              ;	ld		h,a
  14+ 7AC4              ;	ld		a,(varR)
  15+ 7AC4              ;	ld		l,a
  16+ 7AC4              ;	call	ADDHLDESignedv3
  17+ 7AC4              ;	ld		a,h
  18+ 7AC4              ;	ld		(varS),a
  19+ 7AC4              ;	ld		a,l
  20+ 7AC4              ;	ret
  21+ 7AC4              ; calculation table
  22+ 7AC4              ;   R     Q    Op            Sign calc
  23+ 7AC4              ;	10    5    Add           +    sign same add R sign
  24+ 7AC4              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 7AC4              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 7AC4              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 7AC4              ;   5    10    Add           +    sign same add R sign
  28+ 7AC4              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 7AC4              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 7AC4              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 7AC4
  32+ 7AC4              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 7AC4              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 7AC4              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 7AC4              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 7AC4
  37+ 7AC4
  38+ 7AC4              ; Calculate sign for Q from A and varS
  39+ 7AC4 21 19 6A     	ld		hl,varS							;
  40+ 7AC7 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 7AC8 FA D3 7A     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 7ACB 3A 17 6A     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 7ACE 21 18 6A     	ld		hl,varR
  44+ 7AD1 86           	add		a,(hl)							; a = Q + R
  45+ 7AD2 C9           	ret										; Done carry set if overflow
  46+ 7AD3              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 7AD3 3A 18 6A     	ld		a,(varR)						; a = R
  48+ 7AD6 21 17 6A     	ld		hl,varQ                         ; Q
  49+ 7AD9              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 7AD9              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 7AD9 B7          >                        or a
  51+ 7ADA 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 7ADB 38 01            jr      c,.LL39SignCorrection
  53+ 7ADD              ;--    jr      a,.LL39ResultZero
  54+ 7ADD              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 7ADD              ;--	or		a								; Clear carry flag to say result is correct
  56+ 7ADD C9           	ret
  57+ 7ADE              .LL39SignCorrection:
  58+ 7ADE FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 7AE0 28 0E            jr      z,.LL39ResultZero
  60+ 7AE2 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 7AE4 08           	ex		af,af'							; save A temporarily
  62+ 7AE5 3A 19 6A     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 7AE8 EE 80        	xor		$80							    ;
  64+ 7AEA 32 19 6A     	ld		(varS),a                        ; flip sign bit of a
  65+ 7AED 08           	ex		af,af'                          ; get back a which is the result
  66+ 7AEE                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 7AEE B7          >                        or a
  67+ 7AEF C9           	ret
  68+ 7AF0              .LL39ResultZero:
  69+ 7AF0 32 19 6A         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 7AF3                  ClearCarryFlag                          ; clear carry
  70+ 7AF3 B7          >                        or a
  71+ 7AF4 C9               ret
  72+ 7AF5              ;--LL39SwapSubtraction:
  73+ 7AF5              ;--	push	bc
  74+ 7AF5              ;--	ld		b,a
  75+ 7AF5              ;--	ld		a,(hl)
  76+ 7AF5              ;--	sub		b
  77+ 7AF5              ;--	pop		bc
  78+ 7AF5              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 7AF5              ;--	ld		a,(varS)
  80+ 7AF5              ;--	xor		$80
  81+ 7AF5              ;--	ld		(varS),a
  82+ 7AF5              ;--	ex		af,af'
  83+ 7AF5              ;--	ret
  84+ 7AF5
  85+ 7AF5              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 7AF5              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 7AF5              ;;;;;   (S A) = (S R) + (A Q)
  88+ 7AF5              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 7AF5              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 7AF5              ;;;;LL38:
  91+ 7AF5              ;;;;; Calculate sign for Q from A and varS
  92+ 7AF5              ;;;;	ld		hl,varS							;
  93+ 7AF5              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 7AF5              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 7AF5              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 7AF5              ;;;;	ld		hl,varR
  97+ 7AF5              ;;;;	add		a,(hl)							; a = Q + R
  98+ 7AF5              ;;;;	ret										; Done
  99+ 7AF5              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 7AF5              ;;;;	ld		hl,varQ                         ;
 101+ 7AF5              ;;;;	ld		a,(hl)
 102+ 7AF5              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 7AF5              ;;;;	ld		a,(varR)						;
 104+ 7AF5              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 7AF5              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 7AF5              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 7AF5              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 7AF5              ;;;;	ret
 109+ 7AF5              ;;;;.SignCorrection:
 110+ 7AF5              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 7AF5              ;;;;	ex		af,af'							; save A temporarily
 112+ 7AF5              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 7AF5              ;;;;	xor		$80							    ;
 114+ 7AF5              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 7AF5              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 7AF5              ;;;;	ret
 117+ 7AF5              ;;;;LL39Sub16Bit:
 118+ 7AF5              ;;;;	ld		e,a
 119+ 7AF5              ;;;;	ld		d,0
 120+ 7AF5              ;;;;	ld		a,(varR)
 121+ 7AF5              ;;;;	ld		l,a
 122+ 7AF5              ;;;;	ld		h,0
 123+ 7AF5              ;;;;	ClearCarryFlag
 124+ 7AF5              ;;;;	sbc		hl,de
 125+ 7AF5              ;;;;	jr		c,.SignCorrection16bit
 126+ 7AF5              ;;;;	bit		7,h
 127+ 7AF5              ;;;;	jr		z,.GoodToReturn
 128+ 7AF5              ;;;;.Needtonegate:
 129+ 7AF5              ;;;;	macronegate16hl
 130+ 7AF5              ;;;;.GoodToReturn
 131+ 7AF5              ;;;;	ld		a,l
 132+ 7AF5              ;;;;	or		a
 133+ 7AF5              ;;;;	ret
 134+ 7AF5              ;;;;.SignCorrection16bit:
 135+ 7AF5              ;;;;	macronegate16hl
 136+ 7AF5              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 7AF5              ;;;;	xor		$80							    ;
 138+ 7AF5              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 7AF5              ;;;;	ld		a,l
 140+ 7AF5              ;;;;	ret
 141+ 7AF5
 142+ 7AF5
# file closed: ../../Maths/Utilities/badd_ll38.asm
1054  7AF5               ;   INCLUDE "../../Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
1055  7AF5               ;   INCLUDE "../../Maths/Utilities/RequAdivQ-LL61.asm"
1056  7AF5               ;   INCLUDE "../../Maths/Utilities/RSequQmulA-MULT12.asm"
1057  7AF5                  include "../../Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ../../Universe/Ships/CopyRotMattoXX15.asm
   1+ 7AF5              CopyRotMatNoseVtoXX15:
   2+ 7AF5                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 7AF5 3A 37 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 7AF8 32 E4 C0    >                        ld       (XX15VecX),a
   3+ 7AFB                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 7AFB 3A 39 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 7AFE 32 E5 C0    >                        ld       (XX15VecY),a
   4+ 7B01                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 7B01 3A 3B C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 7B04 32 E6 C0    >                        ld       (XX15VecZ),a
   5+ 7B07 C9                   ret
   6+ 7B08
   7+ 7B08              CopyRotMatRoofVtoXX15:
   8+ 7B08                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 7B08 3A 31 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 7B0B 32 E4 C0    >                        ld       (XX15VecX),a
   9+ 7B0E                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 7B0E 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 7B11 32 E5 C0    >                        ld       (XX15VecY),a
  10+ 7B14                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 7B14 3A 35 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 7B17 32 E6 C0    >                        ld       (XX15VecZ),a
  11+ 7B1A C9                   ret
  12+ 7B1B
  13+ 7B1B              CopyRotMatSideVtoXX15:
  14+ 7B1B                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 7B1B 3A 2B C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 7B1E 32 E4 C0    >                        ld       (XX15VecX),a
  15+ 7B21                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 7B21 3A 2D C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 7B24 32 E5 C0    >                        ld       (XX15VecY),a
  16+ 7B27                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 7B27 3A 2F C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 7B2A 32 E6 C0    >                        ld       (XX15VecZ),a
  17+ 7B2D C9                   ret
  18+ 7B2E
# file closed: ../../Universe/Ships/CopyRotMattoXX15.asm
1058  7B2E                  include "../../Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ../../Universe/Ships/CopyXX15toRotMat.asm
   1+ 7B2E              CopyXX15toRotMatNoseV:
   2+ 7B2E                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 7B2E 3A E4 C0    >                        ld       a,(XX15VecX)
   2+ 7B31 32 37 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 7B34                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 7B34 3A E5 C0    >                        ld       a,(XX15VecY)
   3+ 7B37 32 39 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 7B3A                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 7B3A 3A E6 C0    >                        ld       a,(XX15VecZ)
   4+ 7B3D 32 3B C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 7B40                      ZeroA
   5+ 7B40 AF          >                        xor a
   6+ 7B41 32 36 C0             ld  (UBnkrotmatNosevX),a
   7+ 7B44 32 38 C0             ld  (UBnkrotmatNosevY),a
   8+ 7B47 32 3A C0             ld  (UBnkrotmatNosevZ),a
   9+ 7B4A C9                   ret
  10+ 7B4B
  11+ 7B4B              CopyXX15toRotMatRoofV:
  12+ 7B4B                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 7B4B 3A E4 C0    >                        ld       a,(XX15VecX)
  12+ 7B4E 32 31 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 7B51                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 7B51 3A E5 C0    >                        ld       a,(XX15VecY)
  13+ 7B54 32 33 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 7B57                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 7B57 3A E6 C0    >                        ld       a,(XX15VecZ)
  14+ 7B5A 32 35 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 7B5D                      ZeroA
  15+ 7B5D AF          >                        xor a
  16+ 7B5E 32 30 C0             ld  (UBnkrotmatRoofvX),a
  17+ 7B61 32 32 C0             ld  (UBnkrotmatRoofvY),a
  18+ 7B64 32 34 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 7B67 C9                   ret
  20+ 7B68
  21+ 7B68              CopyXX15toRotMatSideV:
  22+ 7B68                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 7B68 3A E4 C0    >                        ld       a,(XX15VecX)
  22+ 7B6B 32 2B C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 7B6E                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 7B6E 3A E5 C0    >                        ld       a,(XX15VecY)
  23+ 7B71 32 2D C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 7B74                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 7B74 3A E6 C0    >                        ld       a,(XX15VecZ)
  24+ 7B77 32 2F C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 7B7A                      ZeroA
  25+ 7B7A AF          >                        xor a
  26+ 7B7B 32 2A C0             ld  (UBnkrotmatSidevX),a
  27+ 7B7E 32 2C C0             ld  (UBnkrotmatSidevY),a
  28+ 7B81 32 2E C0             ld  (UBnkrotmatSidevZ),a
  29+ 7B84 C9                   ret
  30+ 7B85
# file closed: ../../Universe/Ships/CopyXX15toRotMat.asm
1059  7B85                  INCLUDE "../../Maths/asm_tidy.asm"
# file opened: ../../Maths/asm_tidy.asm
   1+ 7B85              ; d = vector 1 e = vector 2 h = vector3 l = vector 4 b = vector 5
   2+ 7B85              ; performs (d*e + h*l) / b and puts the result in de where e is 0
   3+ 7B85 C5           TidyCalc:       push    bc
   4+ 7B86 CD B0 6E                     call    mulDbyESigned           ; de = vector 1 * vector 2
   5+ 7B89 EB                           ex      hl,de                   ; get hl into de and save result of de
   6+ 7B8A CD B0 6E                     call    mulDbyESigned           ; de = vector 2 * vector 3
   7+ 7B8D CD 04 00                     call    AddDEtoHLSigned         ; BC = HL = HL + DE
   8+ 7B90 D1                           pop     de                      ; DE = BC saved from earlier
   9+ 7B91 7C                           ld      a,h                     ; check for result 0
  10+ 7B92 B5                           or      l                       ; .
  11+ 7B93 CA B4 7B                     jp      z,.ZeroResult           ; .
  12+ 7B96 44 4D                        ld      bc,hl                   ; .
  13+ 7B98 7A                           ld      a,d                     ; check for divide by zero
  14+ 7B99 A7                           and     a                       ; .
  15+ 7B9A CA AB 7B                     jp      z,.MaxedResult          ; .
  16+ 7B9D 5A                           ld      e,d                     ; now de = 0b (i.e. b register not hex value)
  17+ 7B9E 16 00                        ld      d,0                     ;
  18+ 7BA0 CD 67 75                     call    Floor_DivQSigned        ; TO BE TESTED should do BC = BC / DE
  19+ 7BA3 78                           ld      a,b                     ; sign bit from b
  20+ 7BA4 E6 80                        and     $80                     ; .
  21+ 7BA6 B1                           or      c                       ; bring in the value
  22+ 7BA7 57                           ld      d,a                     ; de = c0 (i.e. c register not hex value)
  23+ 7BA8 1E 00                        ld      e,0                     ; .
  24+ 7BAA C9                           ret
  25+ 7BAB 78           .MaxedResult:   ld      a,b                     ; make result signed unity (i.e. 1 or 96 in our case)
  26+ 7BAC EE 80                        xor     $80
  27+ 7BAE F6 60                        or      $60
  28+ 7BB0 57                           ld      d,a
  29+ 7BB1 1E 00                        ld      e,0
  30+ 7BB3 C9                           ret
  31+ 7BB4 11 00 00     .ZeroResult:    ld      de,0
  32+ 7BB7 C9                           ret
  33+ 7BB8              ; as per tidy calc except
  34+ 7BB8              ; d = vector 1 e = vector 2 h = vector3 l = vector 4
  35+ 7BB8              ; performs (d*e - h*l) / 96 and puts the result in de where e is 0
  36+ 7BB8
  37+ 7BB8 CD B0 6E     TidySide:       call    mulDbyESigned           ; de = vector 1 * vector 2
  38+ 7BBB EB                           ex      de,hl                   ; get hl = vector 1 * vector 2
  39+ 7BBC CD B0 6E                     call    mulDbyESigned           ; de = vector 2 * vector 3
  40+ 7BBF CD 00 00                     call    SubDEfromHLSigned       ; BC = HL = HL - DE
  41+ 7BC2 44 4D                        ld      bc,hl                   ; .
  42+ 7BC4 11 60 00                     ld      de,$60                  ; now de = 96
  43+ 7BC7 CD 67 75                     call    Floor_DivQSigned        ; TO BE TESTED should do BC = BC / DE
  44+ 7BCA 78                           ld      a,b                     ; sign bit from b
  45+ 7BCB E6 80                        and     $80                     ; .
  46+ 7BCD B1                           or      c                       ; bring in the value
  47+ 7BCE 57                           ld      d,a                     ; de = c0 (i.e. c register not hex value)
  48+ 7BCF 1E 00                        ld      e,0                     ; .
  49+ 7BD1 C9                           ret
  50+ 7BD2
  51+ 7BD2              ;; orthonormalise vector for UBnK ship vector uses IX IT
  52+ 7BD2                  DISPLAY "TidyVectorsIX"
  53+ 7BD2 DD 21 36 C0  TidyVectorsIX:  ld      ix,UBnkrotmatNosevX
  54+ 7BD6 CD FC 77                     call    NormaliseIXVector       ; initially we normalise the nose vector
  55+ 7BD9 3A 37 C0     .CheckNoseXSize:ld      a,(UBnkrotmatNosevX+1)  ; a = nose x
  56+ 7BDC E6 30                        and     %00110000                ; if bits 7 and 6 are clear the work with nosey
  57+ 7BDE CA 12 7C                     jp      z, .NoseXSmall
  58+ 7BE1              ;-- When nosex is large ------------------------  roofv_x =-(nosev_y * roofv_y + nosev_z * roofv_z) / nosev_x
  59+ 7BE1 3A 39 C0     .NoseXLarge:    ld      a,(UBnkrotmatNosevY+1)  ; a = nose x
  60+ 7BE4 57                           ld      d,a
  61+ 7BE5 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)  ; hl = nosev_y * roofv_y
  62+ 7BE8 5F                           ld      e,a                     ; we already have d so only need roofY
  63+ 7BE9 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)  ; de = nosev_z * roofv_z
  64+ 7BEC 67                           ld      h,a                     ; .
  65+ 7BED 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)  ; .
  66+ 7BF0 6F                           ld      l,a                     ; .
  67+ 7BF1 3A 37 C0                     ld      a,(UBnkrotmatNosevX+1)
  68+ 7BF4 47                           ld      b,a
  69+ 7BF5 CD 85 7B                     call    TidyCalc
  70+ 7BF8 7A                           ld      a,d
  71+ 7BF9 B3                           or      e
  72+ 7BFA CA 01 7C                     jp      z,.NoRoofXFlip
  73+ 7BFD 3E 80                        ld      a,$80                   ; flip sign bit if not zero
  74+ 7BFF AA                           xor     d
  75+ 7C00 57                           ld      d,a
  76+ 7C01 ED 53 30 C0  .NoRoofXFlip:   ld      (UBnkrotmatRoofvX),de   ; write roofvx
  77+ 7C05 C3 6D 7C                     jp      .NormaliseRoofv
  78+ 7C08 11 00 E0     .MaxedRoofX:    ld      de,$E000                ; TEST if sign is correct for all of these if was divide by zero make it -1
  79+ 7C0B ED 53 30 C0                  ld      (UBnkrotmatRoofvX),de   ; write roofvx
  80+ 7C0F C3 6D 7C                     jp      .NormaliseRoofv
  81+ 7C12              ;-- When noseX is small ------------------------ determine if we are doign roofz or roof y
  82+ 7C12 3A 38 C0     .NoseXSmall:    ld      a,(UBnkrotmatNosevY)
  83+ 7C15 E6 60                        and     %01100000
  84+ 7C17 CA 45 7C                     jp      z,.NoseYSmall
  85+ 7C1A              ;-- When noseY is large ------------------------ roofv_z = -(nosev_x * roofv_x + nosev_y * roofv_y) / nosev_z
  86+ 7C1A 3A 37 C0     .NoseYLarge:    ld      a,(UBnkrotmatNosevX+1)
  87+ 7C1D 57                           ld      d,a
  88+ 7C1E 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
  89+ 7C21 5F                           ld      e,a
  90+ 7C22 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
  91+ 7C25 67                           ld      h,a
  92+ 7C26 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
  93+ 7C29 6F                           ld      l,a
  94+ 7C2A 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
  95+ 7C2D 47                           ld      b,a
  96+ 7C2E CD 85 7B                     call    TidyCalc
  97+ 7C31 7A                           ld      a,d
  98+ 7C32 B3                           or      e
  99+ 7C33 CA 3E 7C                     jp      z,.NoRoofZFlip
 100+ 7C36 3E 80                        ld      a,$80                   ; flip sign bit if not zero
 101+ 7C38 AA                           xor     d
 102+ 7C39 57                           ld      d,a
 103+ 7C3A 3E 80                        ld      a,$80                   ; flip sign bit
 104+ 7C3C AA                           xor     d
 105+ 7C3D 57                           ld      d,a
 106+ 7C3E ED 53 34 C0  .NoRoofZFlip:   ld      (UBnkrotmatRoofvZ),de   ; write roofvz
 107+ 7C42 C3 6D 7C                     jp      .NormaliseRoofv
 108+ 7C45              ;-- When noseY is large ------------------------ roofv_y = -(nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y
 109+ 7C45 3A 37 C0     .NoseYSmall:    ld      a,(UBnkrotmatNosevX+1)
 110+ 7C48 57                           ld      d,a
 111+ 7C49 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 112+ 7C4C 5F                           ld      e,a
 113+ 7C4D 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
 114+ 7C50 67                           ld      h,a
 115+ 7C51 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 116+ 7C54 6F                           ld      l,a
 117+ 7C55 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
 118+ 7C58 47                           ld      b,a
 119+ 7C59 CD 85 7B                     call    TidyCalc
 120+ 7C5C 7A                           ld      a,d
 121+ 7C5D B3                           or      e
 122+ 7C5E CA 69 7C                     jp      z,.NoRoofYFlip
 123+ 7C61 3E 80                        ld      a,$80                   ; flip sign bit if not zero
 124+ 7C63 AA                           xor     d
 125+ 7C64 57                           ld      d,a
 126+ 7C65 3E 80                        ld      a,$80                   ; flip sign bit
 127+ 7C67 AA                           xor     d
 128+ 7C68 57                           ld      d,a
 129+ 7C69 ED 53 32 C0  .NoRoofYFlip:   ld      (UBnkrotmatRoofvY),de   ; write roofvy
 130+ 7C6D DD 21 30 C0  .NormaliseRoofv:ld      ix,UBnkrotmatRoofvX     ; now normalise roofv
 131+ 7C71 CD FC 77                     call    NormaliseIXVector
 132+ 7C74              ; -- sidev_x = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 133+ 7C74 3A 3B C0     .CalcSidevX:    ld      a,(UBnkrotmatNosevZ+1)
 134+ 7C77 57                           ld      d,a
 135+ 7C78 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
 136+ 7C7B 5F                           ld      e,a
 137+ 7C7C 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
 138+ 7C7F 67                           ld      h,a
 139+ 7C80 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 140+ 7C83 6F                           ld      l,a
 141+ 7C84 CD B8 7B                     call    TidySide
 142+ 7C87 ED 53 2A C0                  ld      (UBnkrotmatSidevX),de   ; write sidevX
 143+ 7C8B              ; -- sidev_y = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 144+ 7C8B 3A 37 C0     .CalcSidevY:    ld      a,(UBnkrotmatNosevX+1)
 145+ 7C8E 57                           ld      d,a
 146+ 7C8F 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 147+ 7C92 5F                           ld      e,a
 148+ 7C93 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
 149+ 7C96 67                           ld      h,a
 150+ 7C97 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 151+ 7C9A 6F                           ld      l,a
 152+ 7C9B CD B8 7B                     call    TidySide
 153+ 7C9E ED 53 2C C0                  ld      (UBnkrotmatSidevY),de   ; write sidevX
 154+ 7CA2              ; -- sidev_z = (nosev_y * roofv_x - nosev_x * roofv_y) / 96
 155+ 7CA2 3A 39 C0     .CalcSidevZ:    ld      a,(UBnkrotmatNosevY+1)
 156+ 7CA5 57                           ld      d,a
 157+ 7CA6 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 158+ 7CA9 5F                           ld      e,a
 159+ 7CAA 3A 37 C0                     ld      a,(UBnkrotmatNosevX+1)
 160+ 7CAD 67                           ld      h,a
 161+ 7CAE 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
 162+ 7CB1 6F                           ld      l,a
 163+ 7CB2 CD B8 7B                     call    TidySide
 164+ 7CB5 ED 53 2E C0                  ld      (UBnkrotmatSidevZ),de   ; write sidevX
 165+ 7CB9                          IFDEF ROUND_ROLL_AND_PITCH
 166+ 7CB9 ~            .ClearLowBytes: ld      hl,UBnkrotmatSidevX
 167+ 7CB9 ~                            ZeroA
 168+ 7CB9 ~                            ld      b,9
 169+ 7CB9 ~            .WriteLoop:     ld      (hl),a
 170+ 7CB9 ~                            inc     hl
 171+ 7CB9 ~                            inc     hl
 172+ 7CB9 ~                            djnz    .WriteLoop
 173+ 7CB9                          ENDIF
 174+ 7CB9 C9                           ret
 175+ 7CBA
# file closed: ../../Maths/asm_tidy.asm
1060  7CBA               ;   INCLUDE "../../Maths/Utilities/LL28AequAmul256DivD.asm"
1061  7CBA               ;   INCLUDE "../../Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
1062  7CBA                  INCLUDE "../../Menus/common_menu.asm"
# file opened: ../../Menus/common_menu.asm
   1+ 7CBA 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ 7CBE 41 4E 44 45
   1+ 7CC2 52 00
   2+ 7CC4 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ 7CC8 4E 54 4F 52
   2+ 7CCC 59 00
   3+ 7CCE 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ 7CD2 65 6E 74 20
   3+ 7CD6 53 79 73 74
   3+ 7CDA 65 6D 20 20
   3+ 7CDE 20 3A 00
   4+ 7CE1 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ 7CE5 72 73 70 61
   4+ 7CE9 63 65 20 53
   4+ 7CED 79 73 74 65
   4+ 7CF1 6D 3A 00
   5+ 7CF4 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ 7CF8 69 74 69 6F
   5+ 7CFC 6E 20 20 20
   5+ 7D00 3A 00
   6+ 7D02 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ 7D06 20 20 20 20
   6+ 7D0A 20 20 20 20
   6+ 7D0E 3A 00
   7+ 7D10 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ 7D14 20 20 20 20
   7+ 7D18 20 20 20 20
   7+ 7D1C 3A 00
   8+ 7D1E 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ 7D22 6C 20 53 74
   8+ 7D26 61 74 75 73
   8+ 7D2A 3A 00
   9+ 7D2C 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ 7D30 6E 67 20 20
   9+ 7D34 20 20 20 20
   9+ 7D38 3A 00
  10+ 7D3A 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ 7D3E 50 4D 45 4E
  10+ 7D42 54 3A 00
  11+ 7D45
  12+ 7D45 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ 7D49 20 4C 69 67
  12+ 7D4D 68 74 20 59
  12+ 7D51 65 61 72 73
  12+ 7D55 00
  13+ 7D56 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ 7D5A 58 58 58 58
  13+ 7D5E 58 58 00
  14+ 7D61 2E           txt_cash_decimal        DB "."
  15+ 7D62 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ 7D66 00
  16+ 7D67
  17+ 7D67              txt_status_colour		equ $FF
  18+ 7D67
  19+ 7D67              ;;DEFUNCTprint_boiler_text_l2:
  20+ 7D67              ;;DEFUNCT; ">print_boilder_text hl = text structure, b = message count"
  21+ 7D67              ;;DEFUNCTBoilerTextLoop:
  22+ 7D67              ;;DEFUNCT	push		bc			; Save Message Count loop value
  23+ 7D67              ;;DEFUNCT	ld			c,(hl)		; Get Row into b
  24+ 7D67              ;;DEFUNCT	inc			hl
  25+ 7D67              ;;DEFUNCT	ld			b,(hl)		; Get Col into b
  26+ 7D67              ;;DEFUNCT	inc			hl
  27+ 7D67              ;;DEFUNCT	ld			e,(hl)		; Get text address Lo into E
  28+ 7D67              ;;DEFUNCT	inc			hl
  29+ 7D67              ;;DEFUNCT	ld			d,(hl)		; Get text address Hi into E
  30+ 7D67              ;;DEFUNCT	inc			hl
  31+ 7D67              ;;DEFUNCT	push		hl			; Save present HL to stack as this is the address for the next message
  32+ 7D67              ;;DEFUNCT	ex			de,hl		; now hl = address of text data
  33+ 7D67              ;;DEFUNCT	ld			e,txt_status_colour
  34+ 7D67              ;;DEFUNCT    MMUSelectLayer2
  35+ 7D67              ;;DEFUNCT	call		l1_print_at
  36+ 7D67              ;;DEFUNCT	pop			hl
  37+ 7D67              ;;DEFUNCT	pop			bc
  38+ 7D67              ;;DEFUNCT	djnz		BoilerTextLoop
  39+ 7D67              ;;DEFUNCT	ret
  40+ 7D67
  41+ 7D67
  42+ 7D67              ;:DEFUNCT print_boiler_text:
  43+ 7D67              ;:DEFUNCT ; ">print_boilder_text hl = text structure, b = message count"
  44+ 7D67              ;:DEFUNCT .BoilerTextLoop:
  45+ 7D67              ;:DEFUNCT 	push		bc			; Save Message Count loop value
  46+ 7D67              ;:DEFUNCT 	ld			c,(hl)		; Get Row into b
  47+ 7D67              ;:DEFUNCT 	inc			hl
  48+ 7D67              ;:DEFUNCT 	ld			b,(hl)		; Get Col into b
  49+ 7D67              ;:DEFUNCT 	inc			hl
  50+ 7D67              ;:DEFUNCT 	ld			e,(hl)		; Get text address Lo into E
  51+ 7D67              ;:DEFUNCT 	inc			hl
  52+ 7D67              ;:DEFUNCT 	ld			d,(hl)		; Get text address Hi into E
  53+ 7D67              ;:DEFUNCT 	inc			hl
  54+ 7D67              ;:DEFUNCT 	push		hl			; Save present HL to stack as this is the address for the next message
  55+ 7D67              ;:DEFUNCT 	ex			de,hl		; now hl = address of text data
  56+ 7D67              ;:DEFUNCT 	ld			e,txt_status_colour
  57+ 7D67              ;:DEFUNCT 	push		bc
  58+ 7D67              ;:DEFUNCT 	pop			de
  59+ 7D67              ;:DEFUNCT 	call		l1_print_at
  60+ 7D67              ;:DEFUNCT 	pop			hl
  61+ 7D67              ;:DEFUNCT 	pop			bc
  62+ 7D67              ;:DEFUNCT 	djnz		.BoilerTextLoop
  63+ 7D67              ;:DEFUNCT 	ret
  64+ 7D67
  65+ 7D67              ;;DEFUNCTGetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
  66+ 7D67
  67+ 7D67              ;;DEFUNCTGetCash:                ld      hl,(Cash)
  68+ 7D67              ;;DEFUNCT                        ex      de,hl
  69+ 7D67              ;;DEFUNCT                        ld      ix,(Cash+2)
  70+ 7D67              ;;DEFUNCT                        ld		iy,txt_cash_amount
  71+ 7D67              ;;DEFUNCT                        call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ 7D67              ;;DEFUNCT.ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ 7D67              ;;DEFUNCT                        ld		(txt_cash_fraction),a
  74+ 7D67              ;;DEFUNCT.UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ 7D67              ;;DEFUNCT                        ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ 7D67              ;;DEFUNCT                        cp		0
  77+ 7D67              ;;DEFUNCT                        ret		z
  78+ 7D67              ;;DEFUNCT                        ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ 7D67              ;;DEFUNCT                        ret
  80+ 7D67
# file closed: ../../Menus/common_menu.asm
1063  7D67              MainNonBankedCodeEnd:
1064  7D67                  DISPLAY "Main Non Banked Code Ends at ",$
1065  7D67
1066  7D67              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1067  7D67                  SLOT    LAYER1Addr
1068  7D67                  PAGE    BankLAYER1
1069  7D67                  ORG     LAYER1Addr, BankLAYER1
1070  E000 42 61 6E 6B  Layer1Header:  DB "Bank L1 Utils--"
1070  E004 20 4C 31 20
1070  E008 55 74 69 6C
1070  E00C 73 2D 2D
1071  E00F
1072  E00F                  INCLUDE "../../Layer1Graphics/layer1_attr_utils.asm"
# file opened: ../../Layer1Graphics/layer1_attr_utils.asm
   1+ E00F
   2+ E00F 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E011 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E013 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E015 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E017 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E019 A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E01B C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E01D E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E01F 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E021 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E023 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E025 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E027 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E029 A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E02B C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E02D E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E02F 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E031 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E033 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E035 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E037 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E039 A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E03B C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E03D E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E03F
  27+ E03F              ; "l2_hilight_row, d = row, e = colour"
  28+ E03F 21 0F E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E042 4B                                   ld      c,e
  30+ E043 7A                                   ld      a,d
  31+ E044 CB 27                                sla     a
  32+ E046 ED 31                                add     hl,a
  33+ E048 7E                                   ld      a,(hl)
  34+ E049 5F                                   ld      e,a
  35+ E04A 23                                   inc     hl
  36+ E04B 7E                                   ld      a,(hl)
  37+ E04C 57                                   ld      d,a
  38+ E04D EB                                   ex      hl,de
  39+ E04E 79                                   ld		a,c
  40+ E04F 11 20 00                             ld		de, 32
  41+ E052 CD 93 68                             call	memfill_dma
  42+ E055 C9                                   ret
  43+ E056
# file closed: ../../Layer1Graphics/layer1_attr_utils.asm
1073  E056                  INCLUDE "../../Layer1Graphics/layer1_cls.asm"
# file opened: ../../Layer1Graphics/layer1_cls.asm
   1+ E056 AF           l1_cls_top:             xor     a
   2+ E057 21 00 40                             ld      hl, $4000
   3+ E05A 11 00 08                             ld      de, $0800
   4+ E05D CD 93 68                             call    memfill_dma
   5+ E060 C9                                   ret
   6+ E061
   7+ E061 AF           l1_cls_mid:             xor     a
   8+ E062 21 00 48                             ld      hl, $4800
   9+ E065 11 00 08                             ld      de, $0800
  10+ E068 CD 93 68                             call    memfill_dma
  11+ E06B C9                                   ret
  12+ E06C
  13+ E06C AF           l1_cls_bottom:          xor     a
  14+ E06D 21 00 50                             ld      hl, $5000
  15+ E070 11 00 08                             ld      de, $0800
  16+ E073 CD 93 68                             call    memfill_dma
  17+ E076 C9                                   ret
  18+ E077
  19+ E077              ; Designed specifically to clear a whole character aligned line
  20+ E077 1E 00        l1_cls_line_d:          ld      e,0
  21+ E079 ED 94                                pixelad
  22+ E07B 11 00 01                             ld      de,32 * 8
  23+ E07E AF                                   xor     a
  24+ E07F CD 93 68                             call    memfill_dma
  25+ E082 C9                                   ret
  26+ E083
  27+ E083              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E083 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E085 ED 94                                pixelad
  30+ E087 11 00 02                             ld      de,32 * 16
  31+ E08A AF                                   xor     a
  32+ E08B CD 93 68                             call    memfill_dma
  33+ E08E C9                                   ret
  34+ E08F
  35+ E08F AF           l1_cls:                 xor		a
  36+ E090 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E093 11 00 18                             ld		de, $1800
  38+ E096 CD 93 68                             call	memfill_dma
  39+ E099 C9                                   ret
  40+ E09A
  41+ E09A 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E09D 1E 20                                ld      e,32
  43+ E09F ED 30                                mul
  44+ E0A1 19                                   add     hl,de
  45+ E0A2 11 40 00                             ld		de, 32 * 2
  46+ E0A5 CD 93 68                             call	memfill_dma
  47+ E0A8 C9                                   ret
  48+ E0A9
  49+ E0A9
  50+ E0A9 AF           l1_attr_cls:            xor		a
  51+ E0AA 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E0AD 11 00 03                             ld		de, $0300
  53+ E0B0 CD 93 68                             call	memfill_dma
  54+ E0B3 C9                                   ret
  55+ E0B4
  56+ E0B4 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0B7 ED 79                                out		(c),a
  58+ E0B9 C9                                   ret
# file closed: ../../Layer1Graphics/layer1_cls.asm
1074  E0BA                  INCLUDE "../../Layer1Graphics/layer1_print_at.asm"
# file opened: ../../Layer1Graphics/layer1_print_at.asm
   1+ E0BA              ; "l1 print char a = character, de = Ypixel Xpxiel rounded to char of print"
   2+ E0BA D5 E5        l1_print_char:          push	de,,hl
   3+ E0BC ED 94                                pixelad								; hl = address of de
   4+ E0BE E5                                   push	hl							; save hl for loop
   5+ E0BF 26 00                                ld		h,0
   6+ E0C1 6F                                   ld		l,a
   7+ E0C2 29                                   add		hl,hl						; * 2
   8+ E0C3 29                                   add		hl,hl						; * 4
   9+ E0C4 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0C5 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0C9 EB                                   ex		de,hl						; save address into de
  12+ E0CA E1                                   pop		hl							; get back hl for loop
  13+ E0CB 06 08                                ld		b,8							; do 8 rows
  14+ E0CD 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0CE 13                                   inc		de							; next byte
  16+ E0CF 77                                   ld		(hl),a						; poke to screen
  17+ E0D0 ED 93                                pixeldn								; Down 1 row
  18+ E0D2 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0D4 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0D6 C9                                   ret
  21+ E0D7
  22+ E0D7              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0D7              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0D7              l1_print_at_char
  24+ E0D7 CB 22           sla     d       ; Convert D from char to pixel
  25+ E0D9 CB 22                                sla     d       ; by muliplying by 8
  26+ E0DB CB 22                                sla     d       ;
  27+ E0DD CB 23                                sla     e       ; Convert E from char to pixel
  28+ E0DF CB 23                                sla     e
  29+ E0E1 CB 23                                sla     e
  30+ E0E3              l1_print_at:
  31+ E0E3 7E           .PrintLoop:             ld		a,(hl)
  32+ E0E4 FE 00                                cp		0
  33+ E0E6 C8                                   ret		z
  34+ E0E7                                      CallIfAGTENusng " ", l1_print_char
  34+ E0E7 FE 20       >                        cp      " "
  34+ E0E9 D4 BA E0    >                        call	nc,l1_print_char
  35+ E0EC 23                                   inc		hl							; move 1 message character right
  36+ E0ED 7B                                   ld		a,e
  37+ E0EE C6 08                                add		a,8
  38+ E0F0 5F                                   ld		e,a							; move 1 screen character right
  39+ E0F1 18 F0                                jr		.PrintLoop
  40+ E0F3                                                      DISPLAY "TODO: looks liek rogue popde"
  41+ E0F3              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  42+ E0F3 C9                                   ret
  43+ E0F4
  44+ E0F4
  45+ E0F4
  46+ E0F4 30 30 00     HexU8Char:       DB "00",0
  47+ E0F7 30 30 30 30  HexU16Char:      DB "0000",0
  47+ E0FB 00
  48+ E0FC 2B 30 30 00  HexS8Char:       DB "+00",0
  49+ E100 2B 30 30 30  HexS16Char:      DB "+0000",0
  49+ E104 30 00
  50+ E106 2B 30 30 30  HexS24Char:      DB "+0000.00",0
  50+ E10A 30 2E 30 30
  50+ E10E 00
  51+ E10F
  52+ E10F              ; prints + sign for bit 7 clear in a else - sign for bit 7 set, Load to buffer location in ix
  53+ E10F CB 7F        l1_buffer_sign_at_ix:   bit     7,a
  54+ E111 CA 1A E1                             jp      z,.PrintPlus
  55+ E114 3E 2D        .PrintMinus:            ld      a,"-"
  56+ E116 DD 77 00                             ld      (ix+0),a
  57+ E119 C9                                   ret
  58+ E11A 3E 2B        .PrintPlus:             ld      a,"+"
  59+ E11C DD 77 00                             ld      (ix+0),a
  60+ E11F C9                                   ret
  61+ E120
  62+ E120 30 31 32 33  HexMapping:     DB "0123456789ABCDEF"
  62+ E124 34 35 36 37
  62+ E128 38 39 41 42
  62+ E12C 43 44 45 46
  63+ E130              ; writes hex 8 bit to ix buffer position
  64+ E130 C5 E5        l1_buffer_hex_8_at_ix:  push    bc,,hl
  65+ E132 47                                   ld      b,a
  66+ E133 ED 23                                swapnib
  67+ E135 E6 0F                                and     $0F
  68+ E137 21 20 E1                             ld      hl,HexMapping
  69+ E13A ED 31                                add     hl,a
  70+ E13C 7E                                   ld      a,(hl)
  71+ E13D DD 77 00                             ld      (ix+0),a
  72+ E140 21 20 E1                             ld      hl,HexMapping
  73+ E143 78                                   ld      a,b
  74+ E144 E6 0F                                and     $0F
  75+ E146 ED 31                                add     hl,a
  76+ E148 7E                                   ld      a,(hl)
  77+ E149 DD 77 01                             ld      (ix+1),a
  78+ E14C E1 C1                                pop     bc,,hl
  79+ E14E C9                                   ret
  80+ E14F
  81+ E14F              ; prints 16 bit lead sign hex value in HLA at char pos DE
  82+ E14F F5           l1_print_s24_hex_at_char: push  af                      ; first off do sign
  83+ E150 DD 21 06 E1                            ld    ix,HexS24Char
  84+ E154 7C                                     ld    a,h
  85+ E155 CD 0F E1                               call  l1_buffer_sign_at_ix
  86+ E158 F1                                     pop   af                      ; now do hl as an unsigned by clearing bit 7
  87+ E159 DD 23                                  inc   ix                      ; move to actual digits
  88+ E15B F5                                     push  af
  89+ E15C 7C                                     ld    a,h
  90+ E15D CB BF                                  res   7,a                     ; clear sign bit regardless
  91+ E15F CD 30 E1                               call  l1_buffer_hex_8_at_ix
  92+ E162 DD 23                                  inc   ix
  93+ E164 DD 23                                  inc   ix
  94+ E166 7D                                     ld    a,l
  95+ E167 CD 30 E1                               call  l1_buffer_hex_8_at_ix
  96+ E16A DD 23                                  inc   ix
  97+ E16C DD 23                                  inc   ix
  98+ E16E DD 23                                  inc   ix                      ; also skip decimal point
  99+ E170 F1                                     pop   af
 100+ E171 CD 30 E1                               call  l1_buffer_hex_8_at_ix
 101+ E174 21 06 E1                               ld    hl,HexS24Char           ; by here de is still unaffected
 102+ E177 CD D7 E0                               call  l1_print_at_char
 103+ E17A C9                                     ret
 104+ E17B              ; prints 16 bit lead sign hex value in HL at char pos DE
 105+ E17B DD 21 00 E1  l1_print_s16_hex_at_char: ld    ix,HexS16Char
 106+ E17F 7C                                     ld    a,h
 107+ E180 CD 0F E1                               call  l1_buffer_sign_at_ix
 108+ E183 DD 23                                  inc   ix                      ; move to actual digits
 109+ E185 7C                                     ld    a,h
 110+ E186 CB BF                                  res   7,a
 111+ E188 CD 30 E1                               call  l1_buffer_hex_8_at_ix
 112+ E18B DD 23                                  inc   ix
 113+ E18D DD 23                                  inc   ix
 114+ E18F 7D                                     ld    a,l
 115+ E190 CD 30 E1                               call  l1_buffer_hex_8_at_ix
 116+ E193 21 00 E1                               ld    hl,HexS16Char           ; by here de is still unaffected
 117+ E196 CD D7 E0                               call  l1_print_at_char
 118+ E199 C9                                     ret
 119+ E19A              ; prints 16 bit unsigned hext value in HL at char pos DE
 120+ E19A DD 21 F7 E0  l1_print_u16_hex_at_char: ld    ix,HexU16Char
 121+ E19E 7C                                     ld    a,h
 122+ E19F CD 30 E1                               call  l1_buffer_hex_8_at_ix
 123+ E1A2 DD 23                                  inc   ix
 124+ E1A4 DD 23                                  inc   ix
 125+ E1A6 7D                                     ld    a,l
 126+ E1A7 CD 30 E1                               call  l1_buffer_hex_8_at_ix
 127+ E1AA 21 F7 E0                               ld    hl,HexU16Char           ; by here de is still unaffected
 128+ E1AD CD D7 E0                               call  l1_print_at_char
 129+ E1B0 C9                                     ret
 130+ E1B1              ; prints 8 bit signed hext value in a at char pos DE
 131+ E1B1 DD 21 FC E0  l1_print_s8_hex_at_char:  ld    ix,HexS8Char
 132+ E1B5 67                                     ld    h,a                     ; save a into h
 133+ E1B6 CD 0F E1                               call  l1_buffer_sign_at_ix
 134+ E1B9 DD 23                                  inc   ix                      ; move to actual digits
 135+ E1BB 7C                                     ld    a,h                     ; get a back
 136+ E1BC CB BF                                  res   7,a                     ; clear sign bit regardless
 137+ E1BE CD 30 E1                               call  l1_buffer_hex_8_at_ix
 138+ E1C1 21 FC E0                               ld    hl,HexS8Char           ; by here de is still unaffected
 139+ E1C4 CD D7 E0                               call  l1_print_at_char
 140+ E1C7 C9                                     ret
 141+ E1C8
 142+ E1C8              ; prints Lead Sign byte 8 bit signed hex value in hl at char pos DE, reuse HexS8Char buffer
 143+ E1C8 DD 21 FC E0  l1_print_s08_hex_at_char: ld    ix,HexS8Char
 144+ E1CC CD 0F E1                               call  l1_buffer_sign_at_ix    ; h holds sign bit
 145+ E1CF DD 23                                  inc   ix                      ; move to actual digits
 146+ E1D1 7D                                     ld    a,l                     ; l holds value
 147+ E1D2 CD 30 E1                               call  l1_buffer_hex_8_at_ix
 148+ E1D5 21 FC E0                               ld    hl,HexS8Char           ; by here de is still unaffected
 149+ E1D8 CD D7 E0                               call  l1_print_at_char
 150+ E1DB C9                                     ret
 151+ E1DC              ; prints 8 bit signed hext value in a at char pos DE
 152+ E1DC DD 21 F4 E0  l1_print_u8_hex_at_char:  ld    ix,HexU8Char
 153+ E1E0 CD 30 E1                               call  l1_buffer_hex_8_at_ix
 154+ E1E3 21 F4 E0                               ld    hl,HexU8Char           ; by here de is still unaffected
 155+ E1E6 CD D7 E0                               call  l1_print_at_char
 156+ E1E9 C9                                     ret
 157+ E1EA 2B 00        l1_PlusSign:              DB      "+",0
 158+ E1EC 2D 00        l1_MinusSign:             DB      "-",0
 159+ E1EE              ; Displays sign byte in A at DE
 160+ E1EE A7           l1_printSignByte:         and     a
 161+ E1EF CA F9 E1                               jp      z,.DisplayPlus
 162+ E1F2 21 EC E1     .DisplayMinus             ld      hl,l1_MinusSign
 163+ E1F5 CD D7 E0                               call    l1_print_at_char
 164+ E1F8 C9                                     ret
 165+ E1F9 21 EA E1     .DisplayPlus:             ld      hl,l1_PlusSign
 166+ E1FC CD D7 E0                               call    l1_print_at_char
 167+ E1FF C9                                     ret
 168+ E200
 169+ E200
 170+ E200
 171+ E200              ;l1_print_at_wrap:
 172+ E200              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 173+ E200              ;	ld      iyh,e
 174+ E200              ;.PrintLoop:
 175+ E200              ;	ld		a,(hl)
 176+ E200              ;	cp		0
 177+ E200              ;	ret		z
 178+ E200              ;.CountWordCharLen
 179+ E200              ;; Need to change to word wrap, so it will loop through string as before
 180+ E200              ;; but read up until a null or space, take the character count * 8 for pixels
 181+ E200              ;; if that is > 238 then force a premature line wrap
 182+ E200              ;
 183+ E200              ;
 184+ E200              ;    push    iy
 185+ E200              ;    call	l1_print_char
 186+ E200              ;    pop     iy
 187+ E200              ;	inc		hl							; move 1 message character right
 188+ E200              ;	ld		a,e
 189+ E200              ;    cp      238
 190+ E200              ;    jr      nc,.NextLine
 191+ E200              ;	add		a,8
 192+ E200              ;	ld		e,a							; move 1 screen character right
 193+ E200              ;	jr		.PrintLoop
 194+ E200              ;.Clearstackandfinish:
 195+ E200              ;	pop		de
 196+ E200              ;	ret
 197+ E200              ;.NextLine:
 198+ E200              ;    ld      a,(hl)
 199+ E200              ;    cp      " "
 200+ E200              ;    ld      e,iyh
 201+ E200              ;    ld      a,d
 202+ E200              ;    add     a,8
 203+ E200              ;    ld      d,a
 204+ E200              ;    jr		.PrintLoop
 205+ E200
 206+ E200              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
 207+ E200 E5           L1LenWordAtHL:          push    hl
 208+ E201 D5                                   push    de
 209+ E202 7E           .CountLoop:             ld      a,(hl)
 210+ E203 FE 00                                cp      0
 211+ E205 28 0F                                jr      z,.CountDone
 212+ E207 FE 20                                cp      32
 213+ E209 28 0B                                jr      z,.CountDone
 214+ E20B 7B                                   ld      a,e
 215+ E20C C6 08                                add     a,8
 216+ E20E 5F                                   ld      e,a
 217+ E20F FE EE                                cp      238
 218+ E211 30 07                                jr      nc,.TooLong
 219+ E213 23                                   inc     hl
 220+ E214 18 EC                                jr      .CountLoop
 221+ E216 D1           .CountDone:             pop     de
 222+ E217 E1                                   pop     hl
 223+ E218 AF                                   xor     a
 224+ E219 C9                                   ret
 225+ E21A D1           .TooLong                pop     de
 226+ E21B E1                                   pop     hl
 227+ E21C 3E FF                                ld      a,$FF
 228+ E21E C9                                   ret
 229+ E21F
 230+ E21F 7E           L1PrintWordAtHL:        ld      a,(hl)
 231+ E220 FE 00                                cp      0
 232+ E222 C8                                   ret     z
 233+ E223 FE 20                                cp      32
 234+ E225 28 0F                                jr      z,.ItsASpace
 235+ E227 FD E5                                push    iy
 236+ E229 CD BA E0                             call	l1_print_char
 237+ E22C FD E1                                pop     iy
 238+ E22E 7B                                   ld      a,e
 239+ E22F C6 08                                add     a,8
 240+ E231 5F                                   ld      e,a
 241+ E232 23                                   inc     hl
 242+ E233 C3 1F E2                             jp      L1PrintWordAtHL
 243+ E236 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 244+ E237 7B                                   ld      a,e
 245+ E238 C6 08                                add     a,8
 246+ E23A 5F                                   ld      e,a
 247+ E23B C9                                   ret
 248+ E23C
 249+ E23C
 250+ E23C              ; print at based whole character positions DE=yx, HL = message Addr
 251+ E23C              ;
 252+ E23C CB 22        l1_print_at_char_wrap:  sla     d       ; Convert D from char to pixel
 253+ E23E CB 22                                sla     d       ; by muliplying by 8
 254+ E240 CB 22                                sla     d       ;
 255+ E242              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 256+ E242              ; Now has full word level wrapping
 257+ E242 FD 63        l1_print_at_wrap:       ld      iyh,e
 258+ E244 7E           .PrintLoop:             ld		a,(hl)
 259+ E245 FE 00                                cp		0
 260+ E247 C8                                   ret		z
 261+ E248 CD 00 E2     .CountWordCharLen:      call    L1LenWordAtHL
 262+ E24B FE FF                                cp      $FF
 263+ E24D 28 06                                jr      z,.WrapNextLine
 264+ E24F CD 1F E2     .NotTooLong:            call    L1PrintWordAtHL
 265+ E252              ; Need to change to word wrap, so it will loop through string as before
 266+ E252              ; but read up until a null or space, take the character count * 8 for pixels
 267+ E252              ; if that is > 238 then force a premature line wrap
 268+ E252 18 F0                                jr		.PrintLoop
 269+ E254              .Clearstackandfinish:   ;op		de
 270+ E254 C9                                   ret
 271+ E255              .WrapNextLine:
 272+ E255 FD 5C        .NextLine:              ld      e,iyh
 273+ E257 7A                                   ld      a,d
 274+ E258 C6 08                                add     a,8
 275+ E25A 57                                   ld      d,a
 276+ E25B 18 E7                                jr		.PrintLoop
 277+ E25D
 278+ E25D
# file closed: ../../Layer1Graphics/layer1_print_at.asm
1075  E25D                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
1076  E25D
1077  E25D                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
1078  E25D              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1079  E25D                                  SLOT    UniverseBankAddr
1080  E25D                                  PAGE    BankUNIVDATA0
1081  E25D                                  ORG	    UniverseBankAddr,BankUNIVDATA0
1082  C000                                  INCLUDE "../../Tests/Vectors/univ_ship_data.asm"
# file opened: ../../Tests/Vectors/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ;    DEFINE PLOTPOINTSONLY 1
   3+ C000              ;   DEFINE OVERLAYNODES 1
   4+ C000              ; In  flight ship data tables
   5+ C000              ; In  flight ship data tables
   6+ C000              ; There can be upto &12 objects in flight.
   7+ C000              ; To avoid hassle of memory heap managment, the free list
   8+ C000              ; will correspond to a memory bank offset so data will be held in
   9+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  10+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  11+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  12+ C000              ; This means each gets its own line list, inwork etc
  13+ C000
  14+ C000              ; "Runtime Ship Data paged into in Bank 7"
  15+ C000              ;                       1234567890123456
  16+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  16+ C004 65 72 73 65
  16+ C008 20 50 47
  17+ C00B 58           StartOfUnivN:       DB "X"
  18+ C00C 00 00        StartOfUnivPad:     DS 2
  19+ C00E 00           StartOfUnivM:       DB 0
  20+ C00F 00           StartOfUnivT        DB 0
  21+ C010 00 00 00...  StartOfUnivName     DS 16
  22+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  23+ C020                                     INCLUDE "../../Universe/Ships/AIRuntimeData.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00           UBnkTidyCounter             DB  0                       ; every 16 iterations the rotation matrix is normalised
  17++C02A 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  18++C02C              UBnkrotmatSidev             equ UBnkrotmatSidevX
  19++C02C 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  20++C02E 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  21++C030 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  22++C032              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  23++C032 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  24++C034 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  25++C036 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  26++C038              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  27++C038 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  28++C03A 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  29++C03C              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  30++C03C              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  31++C03C 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  33++C03E 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  34++C03F 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  35++C040              ; -- Metadata for ship to help with bank managment
  36++C040              UBnKStartOfRuntimeData:
  37++C040 00           UBnKSlotNumber              DB  0
  38++C041 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  39++C042 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  40++C043 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  41++C044 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  42++C045              ; -- Ship AI data
  43++C045              ; -- Targetting runtime data
  44++C045 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  45++C046 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  46++C047 00 00 00     UBnKTargetXPos              DS  3                       ; target position for AI
  47++C04A 00 00 00     UBnKTargetYPos              DS  3                       ; .
  48++C04D 00 00 00     UBnKTargetZPos              DS  3                       ; .
  49++C050 00           UBnKTargetXPosSgn           DS  1                       ; target position sign for AI
  50++C051 00           UBnKTargetYPosSgn           DS  1                       ; .
  51++C052 00           UBnKTargetZPosSgn           DS  1                       ; .
  52++C053 00 00        UBnKTargetVectorX           DS  2                       ; target vector for AI
  53++C055 00 00        UBnKTargetVectorY           DS  2                       ; .
  54++C057 00 00        UBnKTargetVectorZ           DS  2                       ; .
  55++C059 00 00        UBnKTargetDotProduct1       DS  2
  56++C05B 00 00        UBnKTargetDotProduct2       DS  2
  57++C05D 00 00        UBnKTargetDotProduct3       DS  2
  58++C05F 00           UBnKTacticsRotMatX          DB  0
  59++C060 00           UBnKTacticsRotMatXSign      DB  0
  60++C061 00           UBnKTacticsRotMatY          DB  0
  61++C062 00           UBnKTacticsRotMatYSign      DB  0
  62++C063 00           UBnKTacticsRotMatZ          DB  0
  63++C064 00           UBnKTacticsRotMatZSign      DB  0
  64++C065 00 00 00...  UBnKOffset                  DS  3 * 3                   ; Offset position for target
  65++C06E              UBnKOffsetX                 equ UBnKOffset
  66++C06E              UBnKOffsetXHi               equ UBnKOffsetX+1
  67++C06E              UBnKOffsetXSign             equ UBnKOffsetX+2
  68++C06E              UBnKOffsetY                 equ UBnKOffset+3
  69++C06E              UBnKOffsetYHi               equ UBnKOffsetY+1
  70++C06E              UBnKOffsetYSign             equ UBnKOffsetY+2
  71++C06E              UBnKOffsetZ                 equ UBnKOffset+6
  72++C06E              UBnKOffsetZHi               equ UBnKOffsetZ+1
  73++C06E              UBnKOffsetZSign             equ UBnKOffsetZ+2
  74++C06E 00           UBnKDirectionX              DB  0
  75++C06F 00           UBnKDirectionXHi            DB  0
  76++C070 00           UBnKDirectionXSign          DB  0
  77++C071 00           UBnKDirectionY              DB  0
  78++C072 00           UBnKDirectionYHi            DB  0
  79++C073 00           UBnKDirectionYSign          DB  0
  80++C074 00           UBnKDirectionZ              DB  0
  81++C075 00           UBnKDirectionZHi            DB  0
  82++C076 00           UBnKDirectionZSign          DB  0
  83++C077 00           UBnKDirNormX                DB  0
  84++C078 00           UBnKDirNormXSign            DB  0
  85++C079 00           UBnKDirNormY                DB  0
  86++C07A 00           UBnKDirNormYSign            DB  0
  87++C07B 00           UBnKDirNormZ                DB  0
  88++C07C 00           UBnKDirNormZSign            DB  0
  89++C07D              UBnKDirection               equ UBnKDirectionX          ; Direction Vector
  90++C07D 00 00        UBnKDotProductNose          DW  0                       ; Dot Product
  91++C07F 00           UBnKDotProductNoseSign      DB  0
  92++C080 00 00        UBnKDotProductRoof          DW  0                       ; Dot Product
  93++C082 00           UBnKDotProductRoofSign      DB  0
  94++C083 00           UBnKSpeed                   DB  0                       ; INWK +27
  95++C084 00           UBnKAccel                   DB  0                       ; INWK +28
  96++C085 00           UBnKRotXCounter             DB  0                       ; INWK +29
  97++C086 00           UBnKRotZCounter             DB  0                       ; INWK +30
  98++C087 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  99++C088 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
 100++C089 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
 101++C08A 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
 102++C08B 00           univRAT                     DB  0               ; 99
 103++C08C 00           univRAT2                    DB  0               ; 9A
 104++C08D 00           univRAT2Val                 DB  0               ; 9A
 105++C08E 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
 106++C08F 00           UBnkDrawAllFaces            DB  0
 107++C090 00           UBnKShipAggression          DB  0                       ; calculated agression factor
 108++C091 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
 109++C092 00           UBnKSpawnObject             DB  0
 110++C093 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
 111++C094 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
 112++C095 00           UBnKEnergy                  DB  0                       ; INWK +35
 113++C096 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
 114++C097 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
 115++C098 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
 116++C099 00           UBnKMissilesLeft            DB  0
 117++C09A 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
 118++C09B 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
 119++C09C 00           UBnKCloudCounter            DB  0                       ; cloud pixels
 120++C09D 00           UBnKCloudRadius             DB  0                       ; cloud pixels
 121++C09E 00           UBnKHeadingToPlanetOrSun    DB  0                       ; 0 = undefined 1 = heading to planet 2 = heading to sun, if it reaches planet then will move to docking, if it heads to sun then will jump
 122++C09F
 123++C09F              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
 124++C09F              ; Flags work as follows:
 125++C09F              ; UBnKSpawnObject - signals on death to spawn cargo items
 126++C09F              ; 0 -                   Spawn Cargo 1
 127++C09F              ; 1 -                   Spawn Cargo 2
 128++C09F              ; 2 -                   Spawn Cargo 3
 129++C09F              ; 3 -                   Spawn Cargo 4
 130++C09F              ; 4 -                   Spawn Alloy 1
 131++C09F              ; 5 -                   Spawn Alloy 2
 132++C09F              ; 6 -                   Spawn Alloy 3
 133++C09F              ; 7 -                   Spawn Alloy 4
 134++C09F
 135++C09F              ; UBnkaiatkecm
 136++C09F              ; Bit	                Description
 137++C09F              ; 7 -                   AI Enabled Flag
 138++C09F              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
 139++C09F              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
 140++C09F              ;                       linger can be done by not erasing ship unit missile equeue handled
 141++C09F              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
 142++C09F              ; 3 -                   Display state - Plot as a Dot
 143++C09F              ; 2 -                   Nbr of Missiles bit 2
 144++C09F              ; 1 -                   Nbr of Missiles bit 1
 145++C09F              ; 0 -                   ECM present flag
 146++C09F              ; ShipNewBitsAddr (in blueprint)
 147++C09F              ;Bit	                Description
 148++C09F              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
 149++C09F              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
 150++C09F              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 151++C09F              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 152++C09F              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 153++C09F              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 154++C09F              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 155++C09F              ;                       Hostile ships will attack us on sight; there are quite a few of them
 156++C09F              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 157++C09F              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 158++C09F              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 159++C09F              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 160++C09F              ;#4	Docking flag        * 0 = not docking * 1 = docking
 161++C09F              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 162++C09F              ;                       This flag is randomly set for traders when they are spawned
 163++C09F              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 164++C09F              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 165++C09F              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 166++C09F              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 167++C09F              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 168++C09F              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 169++C09F              ;                       Ships that are cops: Viper, Transporter
 170++C09F              ;#7	Scooped, docked, escape pod flag
 171++C09F              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 172++C09F              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 173++C09F              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 174++C09F
# file closed: ../../Tests/Vectors/../../Universe/Ships/AIRuntimeData.asm
  24+ C09F                                      INCLUDE "../../Universe/Ships/XX16Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX16Vars.asm
   1++C09F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C09F 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C0A1              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C0A1 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C0A3 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C0A5 00 00        UBnkTransmatRoofvX          DW 0
   7++C0A7              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C0A7 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C0A9 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C0AB 00 00        UBnkTransmatNosevX          DW 0
  11++C0AD              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C0AD 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C0AF 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C0B1 00 00        UbnkTransmatTransX          DW 0
  15++C0B3 00 00        UbnkTransmatTransY          DW 0
  16++C0B5 00 00        UbnkTransmatTransZ          DW 0
  17++C0B7              XX16                        equ UBnkTransmatSidev
  18++C0B7              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C0B7 00 00        UbnkTransInvRow0x0          DW 0
  20++C0B9 00 00        UbnkTransInvRow0x1          DW 0
  21++C0BB 00 00        UbnkTransInvRow0x2          DW 0
  22++C0BD 00 00        UbnkTransInvRow0x3          DW 0
  23++C0BF 00 00        UbnkTransInvRow1y0          DW 0
  24++C0C1 00 00        UbnkTransInvRow1y1          DW 0
  25++C0C3 00 00        UbnkTransInvRow1y2          DW 0
  26++C0C5 00 00        UbnkTransInvRow1y3          DW 0
  27++C0C7 00 00        UbnkTransInvRow2z0          DW 0
  28++C0C9 00 00        UbnkTransInvRow2z1          DW 0
  29++C0CB 00 00        UbnkTransInvRow2z2          DW 0
  30++C0CD 00 00        UbnkTransInvRow2z3          DW 0
  31++C0CF
  32++C0CF              XX16Inv             equ UbnkTransInvRow0x0
  33++C0CF
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX16Vars.asm
  25+ C0CF                                      INCLUDE "../../Universe/Ships/XX25Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX25Vars.asm
   1++C0CF              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C0CF 00           UbnkProjxLo                 DB  0
   3++C0D0 00           UbnkProjxHi                 DB  0
   4++C0D1 00           UbnkProjxSgn                DB  0
   5++C0D2              UbnkProjx                   EQU UbnkProjxLo
   6++C0D2 00           UbnkProjyLo                 DB  0
   7++C0D3 00           UbnkProjyHi                 DB  0
   8++C0D4 00           UbnkProjySgn                DB  0
   9++C0D5              UbnkProjy                   EQU UbnkProjyLo
  10++C0D5 00           UbnkProjzLo                 DB  0
  11++C0D6 00           UbnkProjzHi                 DB  0
  12++C0D7 00           UbnkProjzSgn                DB  0
  13++C0D8              UbnkProjz                   EQU UbnkProjzLo
  14++C0D8              XX25                        EQU UbnkProjxLo
  15++C0D8
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX25Vars.asm
  26+ C0D8                                      INCLUDE "../../Universe/Ships/XX18Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX18Vars.asm
   1++C0D8              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C0D8 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C0D9 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C0DA 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C0DB              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C0DB 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C0DC 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C0DD 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0DE              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0DE 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0DF 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0E0 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0E1              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0E1              XX18                        equ UBnkDrawCam0xLo
  15++C0E1
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX18Vars.asm
  27+ C0E1
  28+ C0E1              ; Used to make 16 bit reads a little cleaner in source code
  29+ C0E1 00 00 00     UbnkZPoint                  DS  3
  30+ C0E4              UbnkZPointLo                equ UbnkZPoint
  31+ C0E4              UbnkZPointHi                equ UbnkZPoint+1
  32+ C0E4              UbnkZPointSign              equ UbnkZPoint+2
  33+ C0E4                                      INCLUDE "../../Universe/Ships/XX15Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX15Vars.asm
   1++C0E4              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0E4 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0E5 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0E6 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0E7 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0E8 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0E9 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0EA
   9++C0EA              XX15                        equ UBnkXScaled
  10++C0EA              XX15VecX                    equ XX15
  11++C0EA              XX15VecY                    equ XX15+1
  12++C0EA              XX15VecZ                    equ XX15+2
  13++C0EA              UbnkXPoint                  equ XX15
  14++C0EA              UbnkXPointLo                equ XX15+0
  15++C0EA              UbnkXPointHi                equ XX15+1
  16++C0EA              UbnkXPointSign              equ XX15+2
  17++C0EA              UbnkYPoint                  equ XX15+3
  18++C0EA              UbnkYPointLo                equ XX15+3
  19++C0EA              UbnkYPointHi                equ XX15+4
  20++C0EA              UbnkYPointSign              equ XX15+5
  21++C0EA              ; Repurposed XX15 pre clip plines
  22++C0EA              UbnkPreClipX1               equ XX15+0
  23++C0EA              UbnkPreClipY1               equ XX15+2
  24++C0EA              UbnkPreClipX2               equ XX15+4
  25++C0EA              UbnkPreClipY2               equ XX15+6
  26++C0EA              ; Repurposed XX15 post clip lines
  27++C0EA              UBnkNewX1                   equ XX15+0
  28++C0EA              UBnkNewY1                   equ XX15+1
  29++C0EA              UBnkNewX2                   equ XX15+2
  30++C0EA              UBnkNewY2                   equ XX15+3
  31++C0EA              ; Repurposed XX15
  32++C0EA              regXX15fx                   equ UBnkXScaled
  33++C0EA              regXX15fxSgn                equ UBnkXScaledSign
  34++C0EA              regXX15fy                   equ UBnkYScaled
  35++C0EA              regXX15fySgn                equ UBnkYScaledSign
  36++C0EA              regXX15fz                   equ UBnkZScaled
  37++C0EA              regXX15fzSgn                equ UBnkZScaledSign
  38++C0EA              ; Repurposed XX15
  39++C0EA              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0EA              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0EA              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0EA              ; After clipping the coords are two 8 bit pairs
  43++C0EA              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0EA              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0EA              ; Repurposed XX15 when plotting lines
  46++C0EA              ; Repurposed XX15 before calling clip routine
  47++C0EA              UBnkX1                      equ XX15
  48++C0EA              UBnKx1Lo                    equ XX15
  49++C0EA              UBnKx1Hi                    equ XX15+1
  50++C0EA              UBnkY1                      equ XX15+2
  51++C0EA              UbnKy1Lo                    equ XX15+2
  52++C0EA              UBnkY1Hi                    equ XX15+3
  53++C0EA              UBnkX2                      equ XX15+4
  54++C0EA              UBnkX2Lo                    equ XX15+4
  55++C0EA              UBnkX2Hi                    equ XX15+5
  56++C0EA
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX15Vars.asm
  34+ C0EA                                      INCLUDE "../../Universe/Ships/XX12Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX12Vars.asm
   1++C0EA              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0EA              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0EA 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0EB 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0EC 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0ED 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0EE 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0EF 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0F0 00 00 00...  XX12Save                    DS  6
  10++C0F6 00 00 00...  XX12Save2                   DS  6
  11++C0FC              XX12                        equ UBnkXX12xLo
  12++C0FC              varXX12                     equ UBnkXX12xLo
  13++C0FC              ; Repurposed XX12 when plotting lines
  14++C0FC              UBnkY2                      equ XX12+0
  15++C0FC              UbnKy2Lo                    equ XX12+0
  16++C0FC              UBnkY2Hi                    equ XX12+1
  17++C0FC              UBnkDeltaXLo                equ XX12+2
  18++C0FC              UBnkDeltaXHi                equ XX12+3
  19++C0FC              UBnkDeltaYLo                equ XX12+4
  20++C0FC              UBnkDeltaYHi                equ XX12+5
  21++C0FC              UbnkGradient                equ XX12+2
  22++C0FC              UBnkTemp1                   equ XX12+2
  23++C0FC              UBnkTemp1Lo                 equ XX12+2
  24++C0FC              UBnkTemp1Hi                 equ XX12+3
  25++C0FC              UBnkTemp2                   equ XX12+3
  26++C0FC              UBnkTemp2Lo                 equ XX12+3
  27++C0FC              UBnkTemp2Hi                 equ XX12+4
  28++C0FC
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX12Vars.asm
  35+ C0FC
  36+ C0FC
  37+ C0FC              ; Post clipping the results are now 8 bit
  38+ C0FC 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  39+ C0FD 00           UBnkProjectedY              DB  0
  40+ C0FE 00           UBnkProjectedX              DB  0
  41+ C0FF              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  42+ C0FF 00 00 00...  XX15Save                    DS  8
  43+ C107 00 00 00...  XX15Save2                   DS  8
  44+ C10F 00           VarBackface                 DB 0
  45+ C110              ; Heap (or array) information for lines and normals
  46+ C110              ; Coords are stored XY,XY,XY,XY
  47+ C110              ; Normals
  48+ C110              ; This needs re-oprganising now.
  49+ C110              ; Runtime Calculation Store
  50+ C110
  51+ C110              FaceArraySize               equ 30
  52+ C110              EdgeHeapSize                equ 40
  53+ C110              NodeArraySize               equ 40
  54+ C110              LineArraySize               equ 50; incerased for max of 28 lines, of 4 points of 16 bits each
  55+ C110              ; ONLY IF TESTING SOLID FILL TraingleArraySize           equ 25
  56+ C110              ; Storage arrays for data
  57+ C110              ; Structure of arrays
  58+ C110              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  59+ C110              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  60+ C110              ; NodeArray         -  4 bytes per element      0           1            2          3
  61+ C110              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  62+ C110              ; Line Array        -  4 bytes per eleement     0           1            2          3
  63+ C110              ;                                               X1          Y1           X2         Y2
  64+ C110 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  65+ C12E              ; Node array holds the projected to screen position regardless of if its clipped or not
  66+ C12E              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  67+ C12E 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  68+ C1CE 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  69+ C26E 00 00 00...  UbnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
  70+ C3FE              ; ONLY IF TESTING SOLID FILL UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  71+ C3FE              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  72+ C3FE 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  73+ C426              ; Array current Lengths
  74+ C426 00           UbnkFaceVisArrayLen         DS 1
  75+ C427 00           UBnkNodeArrayLen            DS 1
  76+ C428 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  77+ C429 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  78+ C42A              XX20                        equ UbnkLineArrayLen
  79+ C42A              varXX20                     equ UbnkLineArrayLen
  80+ C42A
  81+ C42A 00           UbnkEdgeHeapSize            DS 1
  82+ C42B 00           UbnkEdgeHeapBytes           DS 1
  83+ C42C 00           UBnkLinesHeapLen            DS 1
  84+ C42D 00           UbnKEdgeHeapCounter         DS 1
  85+ C42E 00           UbnKEdgeRadius              DS 1
  86+ C42F 00           UbnKEdgeShipType            DS 1
  87+ C430 00           UbnKEdgeExplosionType       DS 1
  88+ C431
  89+ C431              ; Node heap is used to write out transformed Vertexs
  90+ C431
  91+ C431              ; Lines
  92+ C431 00 00 00     UBnkXX19                    DS  3
  93+ C434
  94+ C434 00 00 00...  UBnkHullCopy                DS  ShipDataLength
  95+ C44F              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
  96+ C44F              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
  97+ C44F              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
  98+ C44F              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
  99+ C44F              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 100+ C44F              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 101+ C44F              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 102+ C44F              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 103+ C44F              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 104+ C44F              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 105+ C44F              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 106+ C44F              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 107+ C44F              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 108+ C44F              DotAddr                     equ UBnkHullCopy + DotOffset
 109+ C44F              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 110+ C44F              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 111+ C44F              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 112+ C44F              QAddr                       equ UBnkHullCopy + QOffset
 113+ C44F              LaserAddr                   equ UBnkHullCopy + LaserOffset
 114+ C44F              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 115+ C44F              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 116+ C44F              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 117+ C44F              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 118+ C44F              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 119+ C44F              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 120+ C44F              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 121+ C44F              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 122+ C44F              ; Static Ship Data. This is copied in when creating the universe object
 123+ C44F              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 124+ C44F
 125+ C44F 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 126+ C53F 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 127+ C607 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C657                  IFDEF SOLIDHULLTEST
 129+ C657 ~            UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 130+ C657                  ENDIF
 131+ C657 0C           OrthagCountdown             DB  12
 132+ C658
 133+ C658              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 134+ C658              UBnk_Data_len               EQU $ - StartOfUniv
 135+ C658
 136+ C658
 137+ C658              ZeroUnivPitch:          MACRO
 138+ C658 ~                                    xor     a
 139+ C658 ~                                    ld      (UBnKRotZCounter),a
 140+ C658                                      ENDM
 141+ C658
 142+ C658              ZeroUnivRoll:           MACRO
 143+ C658 ~                                    xor     a
 144+ C658 ~                                    ld      (UBnKRotXCounter),a
 145+ C658                                      ENDM
 146+ C658
 147+ C658              ZeroUnivPitchAndRoll:   MACRO
 148+ C658 ~                                    xor     a
 149+ C658 ~                                    ld      (UBnKRotXCounter),a
 150+ C658 ~                                    ld      (UBnKRotZCounter),a
 151+ C658                                      ENDM
 152+ C658
 153+ C658
 154+ C658              MaxUnivPitchAndRoll:    MACRO
 155+ C658 ~                                    ld      a,127
 156+ C658 ~                                    ld      (UBnKRotXCounter),a
 157+ C658 ~                                    ld      (UBnKRotZCounter),a
 158+ C658                                      ENDM
 159+ C658
 160+ C658              InfinitePitch:          MACRO
 161+ C658 ~                                    ld      a,$FF
 162+ C658 ~                                    ld      (UBnKRotZCounter),a
 163+ C658                                      ENDM
 164+ C658
 165+ C658              InfiniteRoll:           MACRO
 166+ C658 ~                                    ld      a,$FF
 167+ C658 ~                                    ld      (UBnKRotXCounter),a
 168+ C658                                      ENDM
 169+ C658
 170+ C658              InfinitePitchAndRoll:    MACRO
 171+ C658 ~                                    ld      a,$FF
 172+ C658 ~                                    ld      (UBnKRotXCounter),a
 173+ C658 ~                                    ld      (UBnKRotZCounter),a
 174+ C658                                      ENDM
 175+ C658
 176+ C658              RandomUnivPitchAndRoll: MACRO
 177+ C658 ~                                    call    doRandom
 178+ C658 ~                                    or      %01101111
 179+ C658 ~                                    ld      (UBnKRotXCounter),a
 180+ C658 ~                                    call    doRandom
 181+ C658 ~                                    or      %01101111
 182+ C658 ~                                    ld      (UBnKRotZCounter),a
 183+ C658                                      ENDM
 184+ C658
 185+ C658              RandomUnivSpeed:        MACRO
 186+ C658 ~                                    call    doRandom
 187+ C658 ~                                    and     31
 188+ C658 ~                                    ld      (UBnKSpeed),a
 189+ C658                                      ENDM
 190+ C658
 191+ C658              MaxUnivSpeed:           MACRO
 192+ C658 ~                                    ld      a,31
 193+ C658 ~                                    ld      (UBnKSpeed),a
 194+ C658                                      ENDM
 195+ C658
 196+ C658              ZeroUnivAccelleration:  MACRO
 197+ C658 ~                                    xor     a
 198+ C658 ~                                    ld      (UBnKAccel),a
 199+ C658                                      ENDM
 200+ C658
 201+ C658 3A 4C C4     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 202+ C65B F6 04                                or      ShipIsHostile
 203+ C65D 32 4C C4                             ld      (ShipNewBitsAddr),a
 204+ C660 C9                                   ret
 205+ C661
 206+ C661 3A 4C C4     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 207+ C664 E6 FB                                and     ShipNotHostile
 208+ C666 32 4C C4                             ld      (ShipNewBitsAddr),a
 209+ C669 C9                                   ret
 210+ C66A
 211+ C66A                                      ; --------------------------------------------------------------
 212+ C66A              ; Sets visibile and not a dot
 213+ C66A 3A 91 C0     UnivVisibleNonDot:      ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 214+ C66D F6 40                                or      ShipIsVisible
 215+ C66F E6 F7                                and     ShipIsNotDot
 216+ C671 32 91 C0                             ld      (UBnkaiatkecm),a                ;  .
 217+ C674 C9                                   ret
 218+ C675              ; --------------------------------------------------------------
 219+ C675              ; Sets visibile and  a dot
 220+ C675 3A 91 C0     UnivVisibleDot:         ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 221+ C678 F6 48                                or      ShipIsVisible | ShipIsDot
 222+ C67A 32 91 C0                             ld      (UBnkaiatkecm),a                ;  .
 223+ C67D C9                                   ret
 224+ C67E              ; --------------------------------------------------------------
 225+ C67E              ; Sets invisibile
 226+ C67E              UnivInvisible:          ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 226+ C67E 21 91 C0    >                        ld      hl,UBnkaiatkecm
 226+ C681 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 227+ C683 C9                                   ret
 228+ C684              ; --------------------------------------------------------------
 229+ C684 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 230+ C687 11 58 06                             ld      de,UBnk_Data_len
 231+ C68A AF                                   xor     a
 232+ C68B CD 93 68                             call    memfill_dma
 233+ C68E C9                                   ret
 234+ C68F              ; --------------------------------------------------------------
 235+ C68F 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 236+ C692 06 09                                ld      b, 3*3
 237+ C694 AF                                   xor     a
 238+ C695 77           .zeroLoop:              ld      (hl),a
 239+ C696 23                                   inc     hl
 240+ C697 10 FC                                djnz    .zeroLoop
 241+ C699 C9                                   ret
 242+ C69A
 243+ C69A              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 244+ C69A              JumpOffSet:             MACRO   Axis
 245+ C69A ~                                    ld      hl,(Axis)
 246+ C69A ~                                    ld      a,h
 247+ C69A ~                                    and     SignOnly8Bit
 248+ C69A ~                                    jr      nz,.NegativeAxis
 249+ C69A ~            .PositiveAxis:          dec     l
 250+ C69A ~                                    jp      m,.MovingNegative
 251+ C69A ~                                    jp      .Done
 252+ C69A ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 253+ C69A ~                                    jp      .Done
 254+ C69A ~            .MovingNegative:        ld      hl,$8001                        ; -1
 255+ C69A ~            .Done                   ld      (Axis),hl
 256+ C69A                                      ENDM
 257+ C69A
 258+ C69A
 259+ C69A              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 259+ C69A 2A 27 C0    >                        ld      hl,(UBnKzhi)
 259+ C69D 7C          >                        ld      a,h
 259+ C69E E6 80       >                        and     SignOnly8Bit
 259+ C6A0 20 07       >                        jr      nz,.NegativeAxis
 259+ C6A2 2D          >.PositiveAxis:          dec     l
 259+ C6A3 FA AD C6    >                        jp      m,.MovingNegative
 259+ C6A6 C3 B0 C6    >                        jp      .Done
 259+ C6A9 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 259+ C6AA C3 B0 C6    >                        jp      .Done
 259+ C6AD 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 259+ C6B0 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 260+ C6B3 C9                                   ret
 261+ C6B4
 262+ C6B4 44           WarpUnivByHL:           ld      b,h
 263+ C6B5 4D                                   ld      c,l
 264+ C6B6 26 00                                ld      h,0
 265+ C6B8 ED 5B 27 C0                          ld      de,(UBnKzhi)
 266+ C6BC 3A 26 C0                             ld      a,(UBnKzlo)
 267+ C6BF 6F                                   ld      l,a
 268+ C6C0                                      MMUSelectMathsBankedFns
 268+ C6C0 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 268+ C6C4 CD 10 01       call  SubBCHfromDELsigned
 269+ C6C7 ED 53 27 C0                          ld      (UBnKzhi),de
 270+ C6CB 7D                                   ld      a,l
 271+ C6CC 32 26 C0                             ld      (UBnKzlo),a
 272+ C6CF C9                                   ret
 273+ C6D0              ; --------------------------------------------------------------
 274+ C6D0              ; This sets the position of the current ship if its a player launched missile
 275+ C6D0 CD E7 C7     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 276+ C6D3 CD 8F C6                             call    ResetUbnkPosition               ; home position
 277+ C6D6 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 278+ C6D8 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 279+ C6DB 3E 80                                ld      a,$80                           ;
 280+ C6DD 32 25 C0                             ld      (UBnKysgn),a                    ;
 281+ C6E0 3E 03                                ld      a,3                             ; set accelleration
 282+ C6E2 32 84 C0                             ld      (UBnKAccel),a                   ;
 283+ C6E5                                      ZeroA
 283+ C6E5 AF          >                        xor a
 284+ C6E6 32 85 C0                             ld      (UBnKRotXCounter),a
 285+ C6E9 32 86 C0                             ld      (UBnKRotZCounter),a
 286+ C6EC 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 287+ C6EE 32 87 C0                             ld      (UBnKRAT),a
 288+ C6F1 3C                                   inc     a
 289+ C6F2 32 88 C0                             ld      (UBnKRAT2),a
 290+ C6F5 3E 16                                ld      a,22
 291+ C6F7 32 8A C0                             ld      (UBnKCNT2),a
 292+ C6FA                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 292+ C6FA 3E 1F       >                        ld      a,31
 292+ C6FC 32 83 C0    >                        ld      (UBnKSpeed),a
 293+ C6FF                                      SetMemFalse UBnKMissleHitToProcess
 293+ C6FF 3E FF       >                        ld      a,$FF
 293+ C701 32 45 C0    >                        ld      (UBnKMissleHitToProcess),a
 294+ C704 CD 61 C6                             call    ClearShipHostile                ; its a player missile
 295+ C707 C9                                   ret
 296+ C708
 297+ C708              ; --------------------------------------------------------------
 298+ C708              ; update ship speed and pitch based on adjustments from AI Tactics
 299+ C708 3A 84 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 300+ C70B                                      JumpIfAIsZero .SkipAccelleration
 300+ C70B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C70C CA 2A C7    >                        jp	    z, .SkipAccelleration
 301+ C70F 47                                   ld      b,a                             ; b = accelleration in 2's c
 302+ C710 3A 83 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 303+ C713                                      ClearCarryFlag
 303+ C713 B7          >                        or a
 304+ C714 88                                   adc     a,b
 305+ C715                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 305+ C715 F2 19 C7    >                        jp		p, .DoneAccelleration
 306+ C718              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 306+ C718 AF          >                        xor a
 307+ C719 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 308+ C71A 3A 44 C4                             ld      a,(SpeedAddr)                   ;    speed = limit
 309+ C71D                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 309+ C71D B8          >                        cp     b
 309+ C71E D2 22 C7    >                        jp		nc,.SpeedInLimits
 310+ C721 47                                   ld      b,a                             ; .
 311+ C722 78           .SpeedInLimits:         ld      a,b                             ; .
 312+ C723 32 83 C0                             ld      (UBnKSpeed),a                   ; .
 313+ C726                                      ZeroA                                   ; acclleration = 0
 313+ C726 AF          >                        xor a
 314+ C727 32 84 C0                             ld      (UBnKAccel),a                   ; for next AI update
 315+ C72A              .SkipAccelleration:     ; handle roll and pitch rates
 316+ C72A C9                                   ret
 317+ C72B
 318+ C72B
 319+ C72B CD 64 C7     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 320+ C72E 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 321+ C730 32 91 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 322+ C733 32 4C C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 323+ C736 3E 00                                ld      a,0
 324+ C738 32 86 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 325+ C73B 32 85 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 326+ C73E                                      ZeroA
 326+ C73E AF          >                        xor a
 327+ C73F 32 22 C0                             ld      (UBnKxsgn),a
 328+ C742 32 25 C0                             ld      (UBnKysgn),a
 329+ C745 32 28 C0                             ld      (UBnKzsgn),a
 330+ C748 21 00 00                             ld      hl,0
 331+ C74B 22 20 C0                             ld      (UBnKxlo),hl
 332+ C74E 22 23 C0                             ld      (UBnKylo),hl
 333+ C751 3A 4B C4                             ld      a,(ShipTypeAddr)
 334+ C754 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 335+ C757                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 335+ C757 FE 02       >                        cp     ShipTypeStation
 335+ C759 C2 60 C7    >                        jp      nz,.SkipFurther
 336+ C75C 3E 05                                ld      a,5
 337+ C75E 84                                   add     h
 338+ C75F 67                                   ld      h,a
 339+ C760 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 340+ C763 C9                                   ret
 341+ C764                  DISPLAY "Tracing 1", $
 342+ C764              ; --------------------------------------------------------------
 343+ C764              ; This sets the position of the current ship randomly, called after spawing
 344+ C764              ; Spawns in withink 16 bit range so 24 bit friendly
 345+ C764 CD C4 C7     UnivSetSpawnPosition:   call    InitialiseOrientation
 346+ C767                                      RandomUnivPitchAndRoll
 346+ C767 CD 1A 6E    >                        call    doRandom
 346+ C76A F6 6F       >                        or      %01101111
 346+ C76C 32 85 C0    >                        ld      (UBnKRotXCounter),a
 346+ C76F CD 1A 6E    >                        call    doRandom
 346+ C772 F6 6F       >                        or      %01101111
 346+ C774 32 86 C0    >                        ld      (UBnKRotZCounter),a
 347+ C777 CD 1A 6E                             call    doRandom                        ; set x lo and y lo to random
 348+ C77A 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 349+ C77D 32 23 C0     .setYlo:                ld      (UBnKylo),a
 350+ C780 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 351+ C781 47                                   ld      b,a
 352+ C782 E6 80                                and     SignOnly8Bit
 353+ C784 32 22 C0                             ld      (UBnKxsgn),a
 354+ C787 78           .setYSign:              ld      a,b                             ; get random back again
 355+ C788 0F                                   rrca                                    ; rotate by 1 bit right
 356+ C789 47                                   ld      b,a
 357+ C78A E6 80                                and     SignOnly8Bit                    ; and set y sign
 358+ C78C 32 25 C0                             ld      (UBnKysgn),a
 359+ C78F CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 360+ C791 78                                   ld      a,b                             ;
 361+ C792 E6 1F                                and     31                              ; set y hi to random 0 to 31
 362+ C794 32 24 C0                             ld      (UBnKyhi),a                     ;
 363+ C797 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 364+ C799 78                                   ld      a,b
 365+ C79A E6 1F                                and     31                              ; set x hi to random 0 to 31
 366+ C79C 4F                                   ld      c,a                             ; save shifted into c as well
 367+ C79D 32 21 C0                             ld      (UBnKxhi),a
 368+ C7A0 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 369+ C7A2 98                                   sbc     b
 370+ C7A3 99                                   sbc     c
 371+ C7A4 32 27 C0                             ld      (UBnKzhi),a
 372+ C7A7 3A 4B C4     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 373+ C7AA                                      ReturnIfAEqNusng ShipTypeJunk
 373+ C7AA FE 03       >                        cp      ShipTypeJunk
 373+ C7AC C8          >                        ret     z
 374+ C7AD                                      ReturnIfAEqNusng ShipTypeScoopable
 374+ C7AD FE 04       >                        cp      ShipTypeScoopable
 374+ C7AF C8          >                        ret     z
 375+ C7B0 78                                   ld      a,b                             ; its not junk to set z sign
 376+ C7B1 0F                                   rrca                                    ; as it can jump in
 377+ C7B2 E6 80                                and     SignOnly8Bit
 378+ C7B4 32 28 C0                             ld      (UBnKzsgn),a
 379+ C7B7 C9                                   ret
 380+ C7B8                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 381+ C7B8              ;Output: BC = Quotient, HL = Remainder
 382+ C7B8
 383+ C7B8              ; Initialiase data, iyh must equal slot number
 384+ C7B8              ;                   iyl must be ship type
 385+ C7B8              ;                   a  = current bank number
 386+ C7B8 01 5F 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 387+ C7BB 21 40 C0                             ld      hl,UBnKStartOfRuntimeData
 388+ C7BE                                      ZeroA
 388+ C7BE AF          >                        xor a
 389+ C7BF 77           .InitLoop:              ld      (hl),a
 390+ C7C0 23                                   inc     hl
 391+ C7C1 10 FC                                djnz    .InitLoop
 392+ C7C3 C9                                   ret
 393+ C7C4                  DISPLAY "Tracing 2", $
 394+ C7C4
 395+ C7C4                                      include "../../Universe/Ships/InitialiseOrientation.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/InitialiseOrientation.asm
   1++C7C4              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C7C4              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C7C4              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C7C4              InitialiseOrientation:
   5++C7C4 21 00 00     ZI1:                    ld      hl, 0
   6++C7C7 22 2C C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C7CA 22 2E C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C7CD 22 30 C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C7D0 22 34 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C7D3 22 36 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C7D6 22 38 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C7D9              ; Optimised as already have 0 in l
  13++C7D9 26 60                                ld      h, $60	             				; 96 in hi byte
  14++C7DB                                      ;ld      hl,1
  15++C7DB 22 2A C0                             ld      (UBnkrotmatSidevX),hl
  16++C7DE 22 32 C0                             ld      (UBnkrotmatRoofvY),hl
  17++C7E1              ; Optimised as already have 0 in l
  18++C7E1 26 E0                                ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19++C7E3 22 3A C0                             ld      (UBnkrotmatNosevZ),hl
  20++C7E6 C9                                   ret
  21++C7E7
  22++C7E7              InitialisePlayerMissileOrientation:
  23++C7E7 CD C4 C7                             call    InitialiseOrientation
  24++C7EA 21 00 60                             ld      hl,$6000
  25++C7ED 22 3A C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  26++C7F0 C9                                   ret
  27++C7F1
  28++C7F1
  29++C7F1              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  30++C7F1              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  31++C7F1              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  32++C7F1 CD C4 C7     LaunchedOrientation:    call    InitialiseOrientation
  33++C7F4                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  33++C7F4 3A 37 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  33++C7F7 EE 80       >                        xor SignOnly8Bit
  33++C7F9 32 37 C0    >                        ld  (UBnkrotmatNosevX+1),a
  34++C7FC                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  34++C7FC 3A 39 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  34++C7FF EE 80       >                        xor SignOnly8Bit
  34++C801 32 39 C0    >                        ld  (UBnkrotmatNosevY+1),a
  35++C804                                      FlipSignMem UBnkrotmatNosevZ+1
  35++C804 3A 3B C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  35++C807 EE 80       >                        xor SignOnly8Bit
  35++C809 32 3B C0    >                        ld  (UBnkrotmatNosevZ+1),a
  36++C80C C9                                   ret
  37++C80D
# file closed: ../../Tests/Vectors/../../Universe/Ships/InitialiseOrientation.asm
 396+ C80D
 397+ C80D              ;--------------------------------------------------------------------------------------------------------
 398+ C80D                                      INCLUDE "../../ModelRender/CLIP-LL145.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/CLIP-LL145.asm
   1++C80D              ;--------------------------------------------------------------------------------------------------------------------
   2++C80D
   3++C80D 00           clipDx                  DB      0           ; also XX12+2
   4++C80E 00           clipDxHigh              DB      0           ; also XX12+3
   5++C80F 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C810 00           clipDy                  DB      0           ; also XX12+4
   7++C811 00           clipDyHigh              DB      0           ; also XX12+5
   8++C812 00           clipGradient            DB      0
   9++C813 00           clipDxySign             DB      0
  10++C814              varX12p3                equ     clipDxySign
  11++C814 00           clipXGTY                DB      0
  12++C815 00           clipFlags               DB      0
  13++C816 00           SWAP                    DB      0
  14++C817 00 00        varYX                   DW      0
  15++C819              ;varRegX                 DB      0
  16++C819              ;varXX12p2               DB      0
  17++C819 00           clipXX13                 DB      0
  18++C81A 00           Gradient                DB      0
  19++C81B              ; for start and end y. bit7 of lower determines its not been setup yet
  20++C81B
  21++C81B              ;--------------------------------------------------------------------------------------
  22++C81B                      IFNDEF       CLIPVersion3
  23++C81B ED 4B E6 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3) Y1
  24++C81F DD 2A EA C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1) Y2
  25++C823 2A E4 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1) X1
  26++C826 ED 5B E8 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5) X2
  27++C82A AF                                   xor     a
  28++C82B 32 16 C8                             ld      (SWAP),a                    ; SWAP = 0
  29++C82E 7A                                   ld      a,d                         ; A = X2Hi
  30++C82F FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX (128 will actually do)
  31++C832 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  32++C834 20 0A                                jr      nz, .LL107
  33++C836 DD 7D                                ld      a,ixl
  34++C838 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  35++C83B 20 03                                jr      nz,.LL107
  36++C83D FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  37++C840              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  38++C840              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  39++C840 FD 7C        .LL107                  ld      a,iyh
  40++C842 32 19 C8                             ld      (clipXX13),a                ; debug copy iyh to xx13
  41++C845 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  42++C846 B0                                   or      b                           ;
  43++C847 20 27                                jr      nz,.LL83                    ;
  44++C849 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  45++C84A ED 27 80                             test    $80                         ; i.e  screen height < y1)
  46++C84D 20 21                                jr      nz,.LL83
  47++C84F              ; If we get here, (x1, y1) is on-screen
  48++C84F FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  49++C851 FE 00                                cp      0
  50++C853 20 15                                jr      nz, .LL108
  51++C855              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  52++C855 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  53++C856 32 E5 C0                             ld      (UBnkNewY1),a
  54++C859 DD 7D                                ld      a,ixl
  55++C85B 32 E7 C0                             ld      (UBnkNewY2),a
  56++C85E 7D                                   ld      a,l
  57++C85F 32 E4 C0                             ld      (UBnkNewX1),a
  58++C862 7B                                   ld      a,e
  59++C863 32 E6 C0                             ld      (UBnkNewX2),a
  60++C866                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  60++C866 B7          >                        or a
  61++C867 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  62++C868              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  63++C868              .PointsOutofBounds:     SetCarryFlag                        ; LL109 (ClipFailed) carry flag set as not visible
  63++C868 37          >                        scf
  64++C869 C9                                   ret
  65++C86A FD 7C        .LL108:                 ld      a,iyh
  66++C86C B7                                   or      a
  67++C86D 1F                                   rra
  68++C86E FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  69++C870 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  70++C872 ED 27 80                             test    $80                         ;
  71++C875 28 28                                jr      z, .LL115                   ;
  72++C877              ;                       Check for X1 and X2 negative
  73++C877 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++C878 A2                                   and     d
  75++C879                                      JumpIfNegative  .PointsOutofBounds
  75++C879 FA 68 C8    >                        jp		m, .PointsOutofBounds
  76++C87C              ;                       Check for Y1 and Y2 negative
  77++C87C 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  78++C87D DD A4                                and     ixh
  79++C87F                                      JumpIfNegative  .PointsOutofBounds
  79++C87F FA 68 C8    >                        jp		m, .PointsOutofBounds
  80++C882              ;                       Check for X1 and X2 both > 255
  81++C882 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  82++C883 3D                                   dec     a
  83++C884 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  84++C886 7A                                   ld      a,d                         ; a = x2 hi
  85++C887 3D                                   dec     a
  86++C888 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  87++C88A                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  87++C88A F2 68 C8    >                        jp		p, .PointsOutofBounds
  88++C88D              ; by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  89++C88D DD 7C                                ld      a,ixh
  90++C88F 3D                                   dec     a
  91++C890 FD 6F                                ld      iyl,a
  92++C892 78                                   ld      a,b
  93++C893 3D                                   dec     a
  94++C894 FD B5                                or      iyl
  95++C896                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  95++C896 F2 68 C8    >                        jp		p, .PointsOutofBounds
  96++C899 79                                   ld      a,c
  97++C89A DD A5                                and     ixl
  98++C89C                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  98++C89C FA 68 C8    >                        jp		m, .PointsOutofBounds
  99++C89F              ; Clip line: calulate the line's gradient
 100++C89F              ; here as an optimisation we make sure X1 is always < X2  later on
 101++C89F              .LL115:                 ClearCarryFlag
 101++C89F B7          >                        or a
 102++C8A0 E5 D5        .CalcDX:                push    hl,,de
 103++C8A2 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 104++C8A3 ED 52                                sbc     hl,de
 105++C8A5 22 0D C8                             ld      (clipDx),hl
 106++C8A8 7C                                   ld      a,h
 107++C8A9 32 0F C8                             ld      (clipDxHighNonABS),a
 108++C8AC              .CalcDy:                ClearCarryFlag
 108++C8AC B7          >                        or a
 109++C8AD DD E5 E1                             ld      hl,ix
 110++C8B0 ED 42                                sbc     hl,bc
 111++C8B2 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 112++C8B4 22 10 C8                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 113++C8B7 7C           .CalcQuadrant:          ld      a,h
 114++C8B8 32 11 C8                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 115++C8BB              ; So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 116++C8BB 21 0E C8                             ld      hl,clipDxHigh
 117++C8BE AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 118++C8BF 32 19 6A                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 119++C8C2 32 13 C8                             ld      (clipDxySign),a
 120++C8C5 3A 11 C8     .AbsDy:                 ld      a,(clipDyHigh)
 121++C8C8 ED 27 80                             test    $80
 122++C8CB 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 123++C8CD ED 5B 10 C8                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 124++C8D1                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 124++C8D1 AF          >					xor 	a
 124++C8D2 93          >                    sub 	e
 124++C8D3 5F          >                    ld 		e,a
 124++C8D4 9F          >                    sbc 	a,a
 124++C8D5 92          >                    sub 	d
 124++C8D6 57          >                    ld 		d,a
 125++C8D7 ED 53 10 C8                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 126++C8DB 2A 0D C8     .LL110:                 ld      hl,(clipDx)
 127++C8DE 3A 0E C8                             ld      a,(clipDxHigh)
 128++C8E1 ED 27 80                             test    $80                         ; is it a negative X
 129++C8E4 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 130++C8E6                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 131++C8E6                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 131++C8E6 AF          >					xor 	a
 131++C8E7 95          >					sub 	l
 131++C8E8 6F          >					ld 		l,a
 131++C8E9 9F          >					sbc 	a,a
 131++C8EA 94          >					sub 	h
 131++C8EB 67          >					ld 		h,a
 132++C8EC              .LL111:
 133++C8EC 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 134++C8ED B2                                   or      d
 135++C8EE 28 0A                                jr      z,.CalculateDelta
 136++C8F0                                      ShiftDERight1
 136++C8F0 CB 3A       >			   srl d
 136++C8F2 CB 1B       >			   rr  e
 137++C8F4                                      ShiftHLRight1
 137++C8F4 CB 3C       >			   srl h
 137++C8F6 CB 1D       >			   rr  l
 138++C8F8 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 139++C8FA              .CalculateDelta:
 140++C8FA              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 141++C8FA AF           .LL113:                 xor     a
 142++C8FB 32 33 6A                             ld      (varT),a                    ; t = 0
 143++C8FE 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 144++C8FF                                      JumpIfALTNusng  e, .LL114           ;
 144++C8FF BB          >                        cp      e
 144++C900 DA 10 C9    >                        jp		c, .LL114
 145++C903              ; Here Dx >= Dy sp calculate Delta Y / delta X
 146++C903 32 17 6A     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 147++C906 57                                   ld      d,a                         ; d = also Q for calc
 148++C907 7B                                   ld      a,e                         ; Set A = delta_y_lo
 149++C908 CD 9A 73                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 150++C90B 32 18 6A                             ld      (varR),a                    ;
 151++C90E 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 152++C910              ; Here Delta Y > Delta X so calulate delta X / delta Y
 153++C910 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 154++C911 57                                   ld      d,a
 155++C912 32 17 6A                             ld      (varQ),a
 156++C915 7D                                   ld      a,l                         ; Set A = delta_x_lo
 157++C916 CD 9A 73                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 158++C919 32 18 6A                             ld      (varR),a                    ;
 159++C91C 21 33 6A                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 160++C91F 35                                   dec     (hl)
 161++C920 D1           .LL116:                 pop     de                          ; get back X2
 162++C921 E1                                   pop     hl                          ; get back X1 into hl,
 163++C922 3A 18 6A                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 164++C925 32 12 C8                             ld      (clipGradient),a
 165++C928 FD 6F                                ld      iyl,a
 166++C92A 3A 19 6A                             ld      a,(varS)
 167++C92D 32 13 C8                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 168++C930                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 169++C930 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 170++C932 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 171++C934 28 05                                jr      z,.LL138                    ;
 172++C936 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 173++C939 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 174++C93B              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 175++C93B CD 62 C9     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 176++C93E FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 177++C940 ED 27 80                             test    $80
 178++C943 28 1A                                jr      z,.LL124
 179++C945              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 180++C945 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 181++C946 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 182++C947 C2 68 C8                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 183++C94A B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 184++C94B FA 68 C8                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 185++C94E              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 186++C94E              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 187++C94E EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 188++C94F DD E5                                push    ix                          ;  swap Y1 and Y2
 189++C951 C5                                   push    bc
 190++C952 DD E1                                pop     ix
 191++C954 C1                                   pop     bc
 192++C955 CD 62 C9                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 193++C958 3A 16 C8                             ld      a,(SWAP)
 194++C95B 3D                                   dec     a
 195++C95C 32 16 C8                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 196++C95F C3 55 C8     .LL124:                 jp      .ClipDone                    ; now put points in place
 197++C962              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 198++C962              ; iyh still holds XX13 iyl still holds gradient
 199++C962 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 200++C963 ED 27 80                             test    $80
 201++C966 28 17                                jr      z,.LL119
 202++C968 32 19 6A     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 203++C96B E5 D5 C5                             push    hl,,de,,bc
 204++C96E CD E4 C9                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 205++C971                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 206++C971                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 207++C971 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 208++C974 2A 17 C8                             ld      hl,(varYX)
 209++C977 09                                   add     hl,bc                       ; y1 = y1 + varYX
 210++C978 44 4D                                ld      bc,hl
 211++C97A 21 00 00                             ld      hl,0                        ; Set x1 = 0
 212++C97D 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 213++C97F FE 00        .LL119:                 cp      0
 214++C981 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 215++C983 3D                                   dec     a
 216++C984 32 19 6A                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 217++C987 E5 D5 C5                             push    hl,,de,,bc
 218++C98A CD E4 C9                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 219++C98D                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 220++C98D                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 221++C98D C1 D1 E1                             pop     hl,,de,,bc
 222++C990 2A 17 C8                             ld      hl,(varYX)
 223++C993 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++C994 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 225++C996 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 226++C999              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 227++C999 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 228++C99A ED 27 80                             test    $80                         ;
 229++C99D 28 1A                                jr      z,.LL135                    ;
 230++C99F 32 19 6A                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 231++C9A2 79                                   ld      a,c                         ; Set R = y1_lo
 232++C9A3 32 18 6A                             ld      (varR),a                    ;
 233++C9A6 E5 D5 C5                             push    hl,,de,,bc
 234++C9A9 CD 45 CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 235++C9AC                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 236++C9AC                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 237++C9AC C1 D1 E1                             pop     hl,,de,,bc
 238++C9AF D5                                   push    de
 239++C9B0 EB                                   ex      hl,de                       ; de = x1
 240++C9B1 2A 17 C8                             ld      hl,(varYX)                  ; hl = varYX
 241++C9B4 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 242++C9B5 D1                                   pop     de                          ; de = x2 again
 243++C9B6 01 00 00                             ld      bc,0                        ; Set y1 = 0
 244++C9B9 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 245++C9BA E6 80                                and     $80
 246++C9BC B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 247++C9BD C8                                   ret     z
 248++C9BE E5                                   push    hl
 249++C9BF 60 69                                ld      hl,bc
 250++C9C1 01 80 00                             ld      bc,128
 251++C9C4 B7                                   or      a
 252++C9C5 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 253++C9C7 22 18 6A                             ld      (varRS), hl                 ; and now RS (or SR)
 254++C9CA 7C                                   ld      a,h
 255++C9CB E1                                   pop     hl
 256++C9CC ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 257++C9CF C0                                   ret     nz
 258++C9D0              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 259++C9D0 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 260++C9D3 CD 45 CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 261++C9D6                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 262++C9D6                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 263++C9D6 C1 D1 E1                             pop     hl,,de,,bc
 264++C9D9 D5                                   push    de
 265++C9DA EB                                   ex      hl,de
 266++C9DB 2A 17 C8                             ld      hl,(varYX)
 267++C9DE 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 268++C9DF 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 269++C9E2 D1                                   pop     de
 270++C9E3 C9           .LL136:                 ret                                 ;  Return from the subroutine
 271++C9E4                      ENDIF
 272++C9E4
 273++C9E4              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 274++C9E4              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 275++C9E4              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 276++C9E4              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 277++C9E4 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 278++C9E5 32 18 6A                             ld      (varR),a
 279++C9E8 CD A2 CA                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 280++C9EB F5                                   push    af                           ;  Store A on the stack so we can use it later
 281++C9EC C5                                   push    bc
 282++C9ED 47                                   ld      b,a
 283++C9EE 3A 33 6A                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 284++C9F1 FE 00                                cp      0
 285++C9F3 78                                   ld      a,b
 286++C9F4 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 287++C9F5 C2 0C CA                             jp      nz, .LL121
 288++C9F8              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 289++C9F8 3A 12 C8     .LL122:                  ld      a,(clipGradient)
 290++C9FB 32 17 6A                             ld      (varQ),a; optimise
 291++C9FE CD 82 6E                             call    HLequSRmulQdiv256
 292++CA01 22 17 C8                             ld      (varYX),hl
 293++CA04 F1                                   pop     af
 294++CA05 ED 27 80                             test    $80
 295++CA08 CA 38 CA                             jp      z,.LL133
 296++CA0B C9                                   ret
 297++CA0C 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 298++CA0F 2A 18 6A                             ld      hl,(varRS)                  ; hl = RS
 299++CA12 3A 17 6A                             ld      a,(varQ)
 300++CA15 47                                   ld      b,a                         ; b = q
 301++CA16              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 301++CA16 CB 25       >			   sla l
 301++CA18 CB 14       >			   rl  h
 302++CA1A 7C                                   ld      a,h
 303++CA1B 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 304++CA1D                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 304++CA1D B8          >                        cp      b
 304++CA1E DA 29 CA    >                        jp		c, .LL132
 305++CA21 3F           .LL131:                 ccf                                 ; compliment carry
 306++CA22 98                                   sbc     a,b                         ; q
 307++CA23 67                                   ld      h,a                         ; h (s)
 308++CA24 7D                                   ld      a,l                         ; r
 309++CA25 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 310++CA27 37                                   scf                                 ; set carry for next rolls
 311++CA28 3F                                   ccf
 312++CA29              .LL132:                 RollDELeft1                         ; Rotate de bits left
 312++CA29 CB 13       >               rl  e
 312++CA2B CB 12       >               rl  d
 313++CA2D 38 E7                                jr      c,.LL130                    ;
 314++CA2F ED 53 17 C8                          ld      (varYX),de
 315++CA33 F1                                   pop     af              ; get back sign
 316++CA34 ED 27 80                             test    $80
 317++CA37 C8                                   ret     z               ; if negative then return with value as is reversed sign
 318++CA38 2A 17 C8     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 319++CA3B                                      NegHL
 319++CA3B AF          >                    xor a
 319++CA3C 95          >                    sub l
 319++CA3D 6F          >                    ld l,a
 319++CA3E 9F          >                    sbc a,a
 319++CA3F 94          >                    sub h
 319++CA40 67          >                    ld h,a
 320++CA41 22 17 C8                             ld      (varYX),hl
 321++CA44 C9           .LL128:                 ret
 322++CA45
 323++CA45
 324++CA45
 325++CA45
 326++CA45              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 327++CA45              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 328++CA45              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 329++CA45              ;
 330++CA45              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 331++CA45              ;                          LL133                Negate (Y X) and return from the subroutine
 332++CA45              ;                          LL128                Contains an RTS
 333++CA45 CD A2 CA     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 334++CA48 F5                                   push    af                          ; Store A on the stack so we can use it later
 335++CA49 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 336++CA4A 47                                   ld      b,a
 337++CA4B 3A 33 6A                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 338++CA4E FE 00                                cp      0
 339++CA50 78                                   ld      a,b
 340++CA51 C1                                   pop     bc
 341++CA52 C2 8E CA                             jp      nz, .LL122
 342++CA55              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 343++CA55 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 344++CA58 2A 18 6A                             ld      hl,(varRS)                  ; hl = RS
 345++CA5B 3A 17 6A                             ld      a,(varQ)
 346++CA5E 47                                   ld      b,a                         ; b = q
 347++CA5F              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 347++CA5F CB 25       >			   sla l
 347++CA61 CB 14       >			   rl  h
 348++CA63 7C                                   ld      a,h
 349++CA64 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 350++CA66                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 350++CA66 B8          >                        cp      b
 350++CA67 DA 72 CA    >                        jp		c, .LL132
 351++CA6A 3F           .LL131:                 ccf                                 ; compliment carry
 352++CA6B 98                                   sbc     a,b                         ; q
 353++CA6C 67                                   ld      h,a                         ; h (s)
 354++CA6D 7D                                   ld      a,l                         ; r
 355++CA6E DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 356++CA70 37                                   scf                                 ; set carry for next rolls
 357++CA71 3F                                   ccf
 358++CA72              .LL132:                 RollDELeft1                         ; Rotate de bits left
 358++CA72 CB 13       >               rl  e
 358++CA74 CB 12       >               rl  d
 359++CA76 38 E7                                jr      c,.LL130                    ;
 360++CA78 ED 53 17 C8                          ld      (varYX),de
 361++CA7C F1                                   pop     af              ; get back sign
 362++CA7D ED 27 80                             test    $80
 363++CA80 C8                                   ret     z               ; if negative then return with value as is reversed sign
 364++CA81 2A 17 C8     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 365++CA84                                      NegHL
 365++CA84 AF          >                    xor a
 365++CA85 95          >                    sub l
 365++CA86 6F          >                    ld l,a
 365++CA87 9F          >                    sbc a,a
 365++CA88 94          >                    sub h
 365++CA89 67          >                    ld h,a
 366++CA8A 22 17 C8                             ld      (varYX),hl
 367++CA8D C9           .LL128:                 ret
 368++CA8E              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 369++CA8E 3A 12 C8     .LL122:                 ld      a,(clipGradient)
 370++CA91 32 17 6A                             ld      (varQ),a; optimise
 371++CA94 CD 82 6E                             call    HLequSRmulQdiv256
 372++CA97 22 17 C8                             ld      (varYX),hl
 373++CA9A F1                                   pop     af
 374++CA9B ED 27 80                             test    $80
 375++CA9E CA 81 CA                             jp      z,.LL133
 376++CAA1 C9                                   ret
 377++CAA2
 378++CAA2              ; Do the following, in this order:  Q = XX12+2
 379++CAA2              ;                                   A = S EOR XX12+3
 380++CAA2              ;                                   (S R) = |S R|
 381++CAA2              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 382++CAA2 3A 12 C8     LL129:                  ld      a,(clipGradient)
 383++CAA5 32 17 6A                             ld      (varQ),a                    ; Set Q = XX12+2
 384++CAA8 3A 19 6A                             ld      a,(varS)                    ; If S is positive, jump to LL127
 385++CAAB E5 F5                                push    hl,,af                      ; else
 386++CAAD ED 27 80                             test    $80                         ;   if bit 7 is clear
 387++CAB0 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 388++CAB2 2A 18 6A                             ld      hl,(varRS)                  ;      .
 389++CAB5                                      NegHL                               ;      .
 389++CAB5 AF          >                    xor a
 389++CAB6 95          >                    sub l
 389++CAB7 6F          >                    ld l,a
 389++CAB8 9F          >                    sbc a,a
 389++CAB9 94          >                    sub h
 389++CABA 67          >                    ld h,a
 390++CABB 22 18 6A                             ld      (varRS),hl                  ;      .
 391++CABE 21 13 C8     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 392++CAC1 F1                                   pop     af                          ;
 393++CAC2 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 394++CAC3 E1                                   pop     hl
 395++CAC4 C9                                   ret
 396++CAC5
 397++CAC5              ;--------------------------------------------------------------------------------------
 398++CAC5              ; Thow away out of bounds by more than 250
 399++CAC5              ClipLineV3:             ;break
 400++CAC5                      IFDEF       CLIPVersion3
 401++CAC5 ~            ;My logic version
 402++CAC5 ~            .CheckYorder:
 403++CAC5 ~                                    ld      hl,(UbnkPreClipY1)
 404++CAC5 ~                                    ld      de,(UbnkPreClipY2)
 405++CAC5 ~                                    call    CompareHLDESgn
 406++CAC5 ~                                    jr      c,.LineP1toP2                          ; if Y1 < Y2 then we can use the points as is else we have to swap
 407++CAC5 ~            .LineP2toP1:            ld      bc,(UbnkPreClipY2)                      ; fetch and write out in reverse
 408++CAC5 ~                                    ld      ix,(UbnkPreClipY1)
 409++CAC5 ~                                    ld      de,(UbnkPreClipX1)
 410++CAC5 ~                                    ld      hl,(UbnkPreClipX2)
 411++CAC5 ~                                    ld      (UbnkPreClipY1),bc                      ; bc - XX15(2,3) Y1
 412++CAC5 ~                                    ld      (UbnkPreClipY2),ix                      ; ix - XX12(0,1) Y2
 413++CAC5 ~                                    ld      (UbnkPreClipX1),hl                      ; hl - XX15(0,1) X1
 414++CAC5 ~                                    ld      (UbnkPreClipX2),de                      ;  de - XX15(4,5) X2
 415++CAC5 ~                                    jp      .CheckNoClip
 416++CAC5 ~            .LineP1toP2             ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3) Y1
 417++CAC5 ~                                    ld      ix,(UbnkPreClipY2)                      ; ix - XX12(0,1) Y2
 418++CAC5 ~                                    ld      hl,(UbnkPreClipX1)                      ; hl - XX15(0,1) X1
 419++CAC5 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5) X2
 420++CAC5 ~            .CheckNoClip:           ld      a,b
 421++CAC5 ~                                    or      d
 422++CAC5 ~                                    or      h
 423++CAC5 ~                                    or      ixh
 424++CAC5 ~                                    jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 425++CAC5 ~                                    ld      a,c                                 ; then we clip
 426++CAC5 ~                                    and     ixl
 427++CAC5 ~                                    test    $80
 428++CAC5 ~                                    jp      z, .ClipComplete
 429++CAC5 ~            ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 430++CAC5 ~            .CheckXOffScreen:       ld      a,h
 431++CAC5 ~                                    xor     d
 432++CAC5 ~                                    test    $80                                 ; non descructive test of bit 7 is set
 433++CAC5 ~                                    jp      nz,.X1X2OppositeSign                ; if bit 7 was set then x1 and x2 must be opposite signs so its on screen
 434++CAC5 ~            .X1X2SameSigns:         ld      a,h                                 ; so to get there h and d must be the same sign
 435++CAC5 ~                                    test    $80                                 ; if they are the same sign and at x1 is negative then x2 must be negative so off screen
 436++CAC5 ~                                    JumpIfAIsZero .X1X2CheckIfBothRight
 437++CAC5 ~            .X1X2BothNegative:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 438++CAC5 ~                                    ret
 439++CAC5 ~            .X1X2CheckIfBothRight:  and     a                                   ; we have h in a already
 440++CAC5 ~                                    jr      z,.X1OnScreen
 441++CAC5 ~                                    ld      a,d
 442++CAC5 ~                                    and     a
 443++CAC5 ~                                    jr      z,.X2OnScreen
 444++CAC5 ~            .X1X2OffRightSide:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 445++CAC5 ~                                    ret
 446++CAC5 ~            ;                       to get to here x1 and x2 either span -ve to +ve or from on screen to off screen
 447++CAC5 ~            .X1OnScreen:
 448++CAC5 ~            .X2OnScreen:
 449++CAC5 ~            .X1X2OppositeSign:
 450++CAC5 ~            ;                       Now check to see if Y is off screen
 451++CAC5 ~            .CheckYOffScreen:       ld      a,b                                     ; Check if y1 and y2 are opposite signs, fi so it spans screen so we are good
 452++CAC5 ~            .CheckBothYNegative:    xor     ixh
 453++CAC5 ~                                    test    $80                                     ; if bit 7 is set then opposite signs
 454++CAC5 ~                                    jp      nz,.Y1Y2OppositeSign                    ; if y1 and y2 are opposite signs its on screen and spans at least one side
 455++CAC5 ~            .Y1Y2SameSign:          ld      a,b                                     ; if they are the same sign then if one is negative, so is the other so off screen
 456++CAC5 ~                                    test    $80
 457++CAC5 ~                                    jp      z,.Y1Y2Positive
 458++CAC5 ~            .Y1Y2Negative:          SetCarryFlag
 459++CAC5 ~                                    ret
 460++CAC5 ~            .Y1Y2Positive:          ld      a,c                                     ; if its the same sign y1 or y2 could be 0 and if they are
 461++CAC5 ~                                    and     $80                                     ; this will test to see if b >0 or c > 127
 462++CAC5 ~                                    or      b                                       ;
 463++CAC5 ~                                    jp      z,.Y1OnScreen
 464++CAC5 ~                                    ld      a,ixl
 465++CAC5 ~                                    and     $80
 466++CAC5 ~                                    or      ixh
 467++CAC5 ~                                    jp      z,.Y2OnScreen
 468++CAC5 ~            .Y1Y2OffBottomSide:     SetCarryFlag
 469++CAC5 ~                                    ret
 470++CAC5 ~            .Y1OnScreen:
 471++CAC5 ~            .Y2OnScreen:
 472++CAC5 ~            .Y1Y2OppositeSign:
 473++CAC5 ~            .StartProcessing:       ld      hl,(UbnkPreClipX1)                      ; Now we can test and Clip
 474++CAC5 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5)
 475++CAC5 ~                                    ld      iyh,0                                   ; set iyh flags to 0
 476++CAC5 ~            ; if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord       ; we can optimise this later
 477++CAC5 ~                                    ld      a,h
 478++CAC5 ~                                    or      b
 479++CAC5 ~                                    jr      z,.CheckP1Ylo
 480++CAC5 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 481++CAC5 ~            ;                               bit 1 - P2 Needs Clipping
 482++CAC5 ~            ;                               bit 2 - x1 >= x2 (left to right)
 483++CAC5 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 484++CAC5 ~            ;                               bit 4 -  DY/DX (steep)
 485++CAC5 ~            .P1OffScreen:           ld      iyh,1                                   ; if either p1 x or y was off screen set bit 0 to 1
 486++CAC5 ~                                    jp      .CheckP2OffScreen                       ; .
 487++CAC5 ~            .CheckP1Ylo:            ld      a,c                                     ; .
 488++CAC5 ~                                    and     $80                                     ; .
 489++CAC5 ~                                    jr      z,.CheckP2OffScreen                     ; .
 490++CAC5 ~                                    ld      iyh,1                                   ; .
 491++CAC5 ~            .CheckP2OffScreen:      ld      a,d                                     ; if x2hi or y2 off screen then set bit 2 of clipcoord to 1
 492++CAC5 ~                                    or      ixh                                     ; .
 493++CAC5 ~                                    jr      z,.CheckP2Ylo                           ; .
 494++CAC5 ~            .P2OffScreen:           ld      a,iyh                                   ; .
 495++CAC5 ~                                    or      2                                       ; .
 496++CAC5 ~                                    ld      iyh,a                                   ; .
 497++CAC5 ~                                    jp      .CheckXDirection                        ; .
 498++CAC5 ~            .CheckP2Ylo:            ld      a,ixl                                   ; .
 499++CAC5 ~                                    and     $80                                     ; .
 500++CAC5 ~                                    jr      z,.CheckXDirection                      ; .
 501++CAC5 ~                                    ld      a,iyh                                   ; .
 502++CAC5 ~                                    or      2                                       ; .
 503++CAC5 ~                                    ld      iyh,a                                   ; .
 504++CAC5 ~            .CheckXDirection:       push    de,,hl
 505++CAC5 ~                                    call    CompareHLDESgn                          ; IF HL equals DE, Z=1,C=0, IF HL is less than DE, Z=0,C=1, IF HL is more than DE, Z=0,C=0
 506++CAC5 ~                                    pop     de,,hl
 507++CAC5 ~                                    jp      c,.CalculateDx                          ;
 508++CAC5 ~            .X1gteX2:               ld      a,iyh                                   ; if x1 >= x2 then set bit 3 to denote -ve x direction, note we will eliminate horziontal / vertical early as an optimisation
 509++CAC5 ~                                    or      4                                       ; .
 510++CAC5 ~                                    ld      iyh,a                                   ; .
 511++CAC5 ~                                    ; Y Direction is now always top to bottom
 512++CAC5 ~            .CalculateDx:           ClearCarryFlag                                  ;                       calculate DX
 513++CAC5 ~                                    sbc     hl,de                                   ; .
 514++CAC5 ~            .ABSDX:                 ld      a,h                                     ; HL = | HL - DE |
 515++CAC5 ~                                    test    $80                                     ; .
 516++CAC5 ~                                    jr      z,.DXPositive                           ; .
 517++CAC5 ~                                    macronegate16hl                                 ; .
 518++CAC5 ~            .DXPositive:            ex      de,hl                                   ; de = abs delta x
 519++CAC5 ~            .CalculateDy:           ClearCarryFlag                                  ; hl = Y2 -Y1 as its pre sorted its always positive if on screen
 520++CAC5 ~                                    ld      hl,ix                                   ; iy = hl = Y2 - Y1
 521++CAC5 ~                                    sbc     hl,bc                                   ; .
 522++CAC5 ~            .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 523++CAC5 ~            ;calculate DY
 524++CAC5 ~            .ScaleLoop:             ld      a,h                                     ; At this point DX and DY are ABS values
 525++CAC5 ~                                    or      d                                       ; .
 526++CAC5 ~                                    jr      z,.ScaleDone                            ; .
 527++CAC5 ~                                    ShiftDERight1                                   ; .
 528++CAC5 ~                                    ShiftHLRight1                                   ; .
 529++CAC5 ~                                    jr      .ScaleLoop                              ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 530++CAC5 ~            .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 531++CAC5 ~            ; if Dx = 0 then horizontal line and clip X1 & X2 only then exit
 532++CAC5 ~            ; if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 533++CAC5 ~
 534++CAC5 ~            ; if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 535++CAC5 ~            ;        else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 536++CAC5 ~            .CalculateDelta:        ld      a,e                                     ; if DX < DY goto DX/DY
 537++CAC5 ~                                    JumpIfALTNusng l,.DXdivDY                       ; else do DY/DX
 538++CAC5 ~            .DYdivDX:               ld      a,l                                     ;    A = DY
 539++CAC5 ~                                    ld      d,e                                     ;    D = DX
 540++CAC5 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DY / DX
 541++CAC5 ~            .SaveGradientDYDX:      ld      (Gradient),a
 542++CAC5 ~                                    ld      a,iyh                                   ;    bit 5 of iyh denotes that its a DX/DY (steep), if its clear its DY/DX (shallow)
 543++CAC5 ~                                    or      16                                      ;    .
 544++CAC5 ~                                    ld      iyh,a                                   ;    .
 545++CAC5 ~                                    jp      .ClipP1                                 ;    .
 546++CAC5 ~            .DXdivDY:               ld      a,e                                     ;    A = DX
 547++CAC5 ~                                    ld      d,l                                     ;    D = DY
 548++CAC5 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DX / DY
 549++CAC5 ~            .SaveGradientDXDY:      ld      (Gradient),a
 550++CAC5 ~            ; if bit 1 of clipccord is set call    LL118
 551++CAC5 ~            .ClipP1:                ld      a,iyh                                   ; if bit 1 is clear to say no need to clip pont 1 we just jump to point 2
 552++CAC5 ~                                    test    1                                       ; .
 553++CAC5 ~                                    jp      z,.ClipP2                               ; .
 554++CAC5 ~                                    call    LL118v3                                 ; else clip P1 first
 555++CAC5 ~                                    ld      a,b                                     ;      and if b or h have a value its failed to totally clip  as it may be only in bounds on just x or y
 556++CAC5 ~                                    or      h                                       ;      .
 557++CAC5 ~                                    jr      z, .P1Ygt127Check                       ;      .
 558++CAC5 ~            .P1HighOutofBounds:     SetCarryFlag                                    ;      .
 559++CAC5 ~                                    ret                                             ;      .
 560++CAC5 ~            .P1Ygt127Check:         ld      a,c                                     ;      or if y > 127 its failed to totally clip
 561++CAC5 ~                                    test    $80                                     ;      .
 562++CAC5 ~                                    SetCarryFlag                                    ;      .
 563++CAC5 ~                                    ret     nz                                      ;      .
 564++CAC5 ~                                    ld      (UbnkPreClipY1), bc                     ;      else its valid and clipped point 1 so save ti back
 565++CAC5 ~                                    ld      (UbnkPreClipX1), hl
 566++CAC5 ~            ; if bit 2 of clipcoord is set
 567++CAC5 ~            ;        swap x1y1 with x2y2
 568++CAC5 ~            ;        call    LL118
 569++CAC5 ~            .ClipP2:                ld      a,iyh                                   ; so now repeat all that for point 2
 570++CAC5 ~                                    and     2
 571++CAC5 ~                                    jp      z,.ClipComplete
 572++CAC5 ~                                    call    LL118v3PreSwap                          ; now clip p2
 573++CAC5 ~                                    ld      a,b                                     ; if either high is set then it failed to properly clip
 574++CAC5 ~                                    or      h                                       ; .
 575++CAC5 ~                                    jr      z, .P2Ygt127Check                       ; .
 576++CAC5 ~            .P2HighOutofBounds:     SetCarryFlag                                    ; .
 577++CAC5 ~                                    ret                                             ; .
 578++CAC5 ~            .P2Ygt127Check:         ld      a,c                                     ; if c > 127 then it also failed to clip
 579++CAC5 ~                                    test    $80                                     ; .
 580++CAC5 ~                                    SetCarryFlag                                    ; .
 581++CAC5 ~                                    ret     nz                                      ; .
 582++CAC5 ~                                    ld      (UbnkPreClipY2), bc                     ; bc - XX15(2,3);;
 583++CAC5 ~                                    ld      (UbnkPreClipX2), hl
 584++CAC5 ~            ;clip compelte exit
 585++CAC5 ~            .ClipComplete:          ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3);;
 586++CAC5 ~                                    ld      hl,(UbnkPreClipX1)
 587++CAC5 ~                                    ld      ix,(UbnkPreClipY2)                      ; bc - XX15(2,3);;
 588++CAC5 ~                                    ld      de,(UbnkPreClipX2)
 589++CAC5 ~            .SaveClippedLine:       ld      a,c                                     ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 590++CAC5 ~                                    ld      (UBnkNewY1),a
 591++CAC5 ~                                    ld      a,ixl
 592++CAC5 ~                                    ld      (UBnkNewY2),a
 593++CAC5 ~                                    ld      a,l
 594++CAC5 ~                                    ld      (UBnkNewX1),a
 595++CAC5 ~                                    ld      a,e
 596++CAC5 ~                                    ld      (UBnkNewX2),a
 597++CAC5 ~                                    ClearCarryFlag                              ; we have a success so not carry
 598++CAC5 ~                                    ret
 599++CAC5 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 600++CAC5 ~            LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 601++CAC5 ~                                    ld      hl,(UbnkPreClipX2)
 602++CAC5 ~                                    jp      LL118v3Fetched
 603++CAC5 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 604++CAC5 ~            LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 605++CAC5 ~                                    ld      hl,(UbnkPreClipX1)
 606++CAC5 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 607++CAC5 ~            LL118v3Fetched:
 608++CAC5 ~            ;                       At this point bc = y position, hl = x position both 16 bit
 609++CAC5 ~            ;                       if x < 0 then x = 0
 610++CAC5 ~            ;                                     adjust = -x */ gradient depending on if its steep or shallow
 611++CAC5 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 612++CAC5 ~            ;                       if x > 255 then x = 255
 613++CAC5 ~            ;                                     adjust = x-255 */ gradient
 614++CAC5 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 615++CAC5 ~            ;                       if y < 0 then y = 0
 616++CAC5 ~            ;                                     adjust = -y */ gradient
 617++CAC5 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 618++CAC5 ~            ;                       if y >127 then y = 127
 619++CAC5 ~            ;                                     adjust = y-127 */ gradient
 620++CAC5 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 621++CAC5 ~            ;
 622++CAC5 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 623++CAC5 ~            ;                               bit 1 - P2 Needs Clipping
 624++CAC5 ~            ;                               bit 2 - x1 >= x2 (left to right)
 625++CAC5 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 626++CAC5 ~            ;                               bit 4 -  DY/DX (steep)
 627++CAC5 ~            ; if X1 hi <> 0
 628++CAC5 ~            LL118:                  ;break
 629++CAC5 ~                                    ld      a,h                                     ; if x1 high is 0 then we don't need to clip x at all
 630++CAC5 ~                                    and     a
 631++CAC5 ~                                    jp      z,.X1NoClipNeeded
 632++CAC5 ~            ;                       if x1 hi bit 7 is set (so negative)
 633++CAC5 ~            .CalcBlockX:            test    $80                                     ; if h is postiive then jump to the XPositive Calc block
 634++CAC5 ~                                    jr      z,.CalcBlockXPositive
 635++CAC5 ~            ;                       if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 636++CAC5 ~            .CalcBlockXNegative:    ld      a,iyh                                   ;
 637++CAC5 ~                                    test    16                                      ; bit 5 of iyh denotes that its a DY/DX, if its clear its DX/DY
 638++CAC5 ~                                    jr      nz,.CalcBlockXNegMulGrad
 639++CAC5 ~            .CaclBlockXNegDivGrad:  macronegate16hl
 640++CAC5 ~                                    ld      a,(Gradient)
 641++CAC5 ~                                    push    bc                                      ; abs(X1) / Gradient
 642++CAC5 ~                                    ld      h,c                     ; move offset into high byte of h
 643++CAC5 ~                                    ld      l,0
 644++CAC5 ~                                    ld      c,a
 645++CAC5 ~                                    call    div_hl_c
 646++CAC5 ~                                    pop     bc
 647++CAC5 ~                                    jp      .DoneXNegCalc
 648++CAC5 ~            ;                       else set Adjust = abs(X1) * Gradient
 649++CAC5 ~            .CalcBlockXNegMulGrad:  push    bc                                      ; abs(X1) * Gradient
 650++CAC5 ~                                    macronegate16hl
 651++CAC5 ~                                    ld      a,(Gradient)
 652++CAC5 ~                                    call    HLeqyHLmulAdiv256
 653++CAC5 ~                                    pop     bc
 654++CAC5 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 655++CAC5 ~            ;                       x1 = 0 then call into DonrX1Calc
 656++CAC5 ~            ;                       we can skip the test for negative Y direection
 657++CAC5 ~            .DoneXNegCalc:          macronegate16hl
 658++CAC5 ~            .XNegSkipNegate:        ld      de,bc
 659++CAC5 ~                                    ex      hl,de
 660++CAC5 ~                                    add     hl,de
 661++CAC5 ~                                    ld      bc,hl
 662++CAC5 ~                                    ld      hl,0
 663++CAC5 ~                                    jp      .DoneXCalc
 664++CAC5 ~            ;                       else x1 hi is positive
 665++CAC5 ~            ;                       if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 666++CAC5 ~            .CalcBlockXPositive:    ld      a,iyh
 667++CAC5 ~                                    test    16
 668++CAC5 ~                                    jr      nz,.CalcBlockXPosMulGrad
 669++CAC5 ~            .CalcBlockXPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 670++CAC5 ~                                    push    bc
 671++CAC5 ~                                    ld      c,a
 672++CAC5 ~                                    ld      de,255
 673++CAC5 ~                                    sub     hl,de
 674++CAC5 ~                                    ld      h,l
 675++CAC5 ~                                    ld      l,0
 676++CAC5 ~                                    call    div_hl_c
 677++CAC5 ~                                    pop     bc
 678++CAC5 ~                                    jp      .DoneX2Calc
 679++CAC5 ~            ;                                 else set Adjust = X1 lo * Gradient
 680++CAC5 ~            .CalcBlockXPosMulGrad:  push    bc
 681++CAC5 ~                                    ld      a,(Gradient)            ;Q = gradient
 682++CAC5 ~                                    ld      de,255
 683++CAC5 ~                                    sub     hl,de
 684++CAC5 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 685++CAC5 ~                                    pop     bc
 686++CAC5 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 687++CAC5 ~            ;                       x1 = 255
 688++CAC5 ~            ;                       we can skip the test for negative Y direection
 689++CAC5 ~            .DoneX2Calc:            macronegate16hl
 690++CAC5 ~            .X2SkipNegate:          ex      de,hl
 691++CAC5 ~                                    ld      hl,bc
 692++CAC5 ~                                    add     hl,de
 693++CAC5 ~                                    ld      bc,hl
 694++CAC5 ~                                    ld      hl,255
 695++CAC5 ~            ;                       if Y1 hi <> 0 or Y1 low >= 128 then y coordinate is good
 696++CAC5 ~            .DoneXCalc:             ld      a,b
 697++CAC5 ~                                    and     a
 698++CAC5 ~                                    jr      nz,.CalcBlockY1Test
 699++CAC5 ~                                    ld      a,c
 700++CAC5 ~                                    and     $80
 701++CAC5 ~                                    ClearCarryFlag                  ; speculative clear of carry in case its good
 702++CAC5 ~                                    ret     z
 703++CAC5 ~            ;                       if Y1 hi bit 7 is set
 704++CAC5 ~            .X1NoClipNeeded:
 705++CAC5 ~            .CalcBlockY1Test:       ld      a,b
 706++CAC5 ~                                    test    $80
 707++CAC5 ~                                    jr      z,.CalcBlockYPos       ; if Y is positive jump forward
 708++CAC5 ~            ;                       if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 709++CAC5 ~                                    break
 710++CAC5 ~            .CalcBlockY1:           ld      a,iyh
 711++CAC5 ~                                    test    16
 712++CAC5 ~                                    jr      nz,.CalcBlockYNegMulGrad
 713++CAC5 ~            .CalcBlockYNegDivGrad:  macronegate16bc
 714++CAC5 ~                                    ld      a,(Gradient)            ;Q = gradient
 715++CAC5 ~                                    push    hl
 716++CAC5 ~                                    ld      h,c                     ; move offset into high byte of h
 717++CAC5 ~                                    ld      l,0
 718++CAC5 ~                                    ld      c,a
 719++CAC5 ~                                    call    div_hl_c;LLHLdivC;div_hl_c
 720++CAC5 ~                                    pop     de
 721++CAC5 ~                                    ex      de,hl
 722++CAC5 ~                                    jp      .DoneBlockY1
 723++CAC5 ~            ;                                 else set Adjust = abs(Y1) * Gradient
 724++CAC5 ~            .CalcBlockYNegMulGrad:  macronegate16bc
 725++CAC5 ~                                    push    hl
 726++CAC5 ~                                    ld      hl,bc
 727++CAC5 ~                                    ld      a,(Gradient)            ;Q = gradient
 728++CAC5 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 729++CAC5 ~                                    pop     de
 730++CAC5 ~                                    ex      de,hl
 731++CAC5 ~            ;                       x1 += adjust * (-1 if bit 3 of clipcoord is set)
 732++CAC5 ~            ;                       y1 = 0
 733++CAC5 ~            ;                       ret
 734++CAC5 ~            ;                       now we have done the adjustment, if y or x are off screen then the line spans screen in only 1 dimension so doesn't get drawn
 735++CAC5 ~            .DoneBlockY1:           ld      a,iyh
 736++CAC5 ~                                    test    4
 737++CAC5 ~                                    jr      z,.Y1SkipNegate
 738++CAC5 ~                                    macronegate16de
 739++CAC5 ~            .Y1SkipNegate:          add     hl,de
 740++CAC5 ~                                    ld      bc,0
 741++CAC5 ~                                    ret
 742++CAC5 ~            ;                       if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 743++CAC5 ~            .CalcBlockYPos:         ld      a,iyh
 744++CAC5 ~                                    test    16
 745++CAC5 ~                                    jr      z,.CalcBlockYPosMulGrad
 746++CAC5 ~            .CalcBlockYPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 747++CAC5 ~                                    push    hl
 748++CAC5 ~                                    ld      hl,bc
 749++CAC5 ~                                    ld      de,127
 750++CAC5 ~                                    sub     hl,de
 751++CAC5 ~                                    ld      h,l
 752++CAC5 ~                                    ld      l,0
 753++CAC5 ~                                    ld      c,a
 754++CAC5 ~                                    call    div_hl_c;LLHLdivC
 755++CAC5 ~                                    pop     de
 756++CAC5 ~                                    ex      de,hl
 757++CAC5 ~                                    jp      .DoneBlockY2
 758++CAC5 ~            ;                                 else set Adjust = Y1 lo * Gradient
 759++CAC5 ~            .CalcBlockYPosMulGrad:  push    hl
 760++CAC5 ~                                    ld      hl,bc
 761++CAC5 ~                                    ld      de,127
 762++CAC5 ~                                    sub     hl,de
 763++CAC5 ~                                    ld      a,(Gradient)
 764++CAC5 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 765++CAC5 ~                                    pop     de
 766++CAC5 ~                                    ex      de,hl
 767++CAC5 ~            ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 768++CAC5 ~            ;                y1 = 127
 769++CAC5 ~            .DoneBlockY2:           ld      a,iyh
 770++CAC5 ~                                    test    4
 771++CAC5 ~                                    jr      nz,.Y2SkipNegate
 772++CAC5 ~                                    macronegate16de
 773++CAC5 ~            .Y2SkipNegate:          add     hl,de
 774++CAC5 ~                                    ld      bc,127
 775++CAC5 ~                                    ret
 776++CAC5                      ELSE
 777++CAC5 C9                       ret
 778++CAC6                      ENDIF
 779++CAC6              ; old code for on screen test
 780++CAC6              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 781++CAC6              ;;;;;;
 782++CAC6              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 783++CAC6              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 784++CAC6              ;;;;;;                        and     ixh
 785++CAC6              ;;;;;;                        jp      .CheckYLow
 786++CAC6              ;;;;;;                        ld
 787++CAC6              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 788++CAC6              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 789++CAC6              ;;;;;;                        ld      a,ixh                               ;
 790++CAC6              ;;;;;;                        and     a                                   ;
 791++CAC6              ;;;;;;                        ret     nz                                  ;
 792++CAC6              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 793++CAC6              ;;;;;;                        ld      a,b                                 ;
 794++CAC6              ;;;;;;                        and     ixh                                 ;
 795++CAC6              ;;;;;;                        and     $80                                 ;
 796++CAC6              ;;;;;;                        ret     z                                   ;
 797++CAC6              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 798++CAC6              ;;;;;;                        ld      a,b                                 ;
 799++CAC6              ;;;;;;                        and     ixh                                 ;
 800++CAC6              ;;;;;;                        ret     nz                                  ;
 801++CAC6              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 802++CAC6              ;;;;;;                        ld      a,b
 803++CAC6              ;;;;;;                        or      ixh
 804++CAC6              ;;;;;;                        jr      nz,.StartProcessing
 805++CAC6              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 806++CAC6              ;;;;;;                        ld      a,c
 807++CAC6              ;;;;;;                        or      ixl
 808++CAC6              ;;;;;;                        and     $80
 809++CAC6              ;;;;;;                        jr      z,.StartProcessing
 810++CAC6              ;;;;;;
 811++CAC6              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 812++CAC6              ;;;;;;                        cp      0                                   ;
 813++CAC6              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 814++CAC6              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 815++CAC6              ;;;;;;                        cp      0                                   ;
 816++CAC6              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 817++CAC6              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 818++CAC6              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 819++CAC6              ;;;;;;                        and     $80                                 ;
 820++CAC6              ;;;;;;                        ret     z                                   ;
 821++CAC6              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 822++CAC6              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 823++CAC6              ;;;;;;                        cp      0                                   ;
 824++CAC6              ;;;;;;                        jr      nz,.Startprocessing                 ;
 825++CAC6              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 826++CAC6              ;;;;;;                        and     ixl
 827++CAC6              ;;;;;;
 828++CAC6              ;;;;;;                        .CheckY2Lo                        ;
 829++CAC6              ;;;;;;.CheckY1Lo:             ld      a,c
 830++CAC6              ;;;;;;                        and     $80
 831++CAC6              ;;;;;;                        jr      z,.StartProcessing
 832++CAC6              ;;;;;;.CheckY2Lo:             ld      a,ixl
 833++CAC6              ;;;;;;                        and     $80
 834++CAC6              ;;;;;;                        ret     nz
 835++CAC6              ;;;;;;;clip = 0
# file closed: ../../Tests/Vectors/../../ModelRender/CLIP-LL145.asm
 399+ CAC6              ;--------------------------------------------------------------------------------------------------------
 400+ CAC6                                      INCLUDE "../../Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyRotmatToTransMat.asm
   1++CAC6              ; Set TransMatTo
   2++CAC6              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CAC6              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CAC6              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CAC6              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CAC6              ; 18 byte fast copy
   7++CAC6
   8++CAC6              ; Fast copy using the stack                                                         ; T states
   9++CAC6 F3           CopyRotmatToTransMat:   di                                                          ; disable interrups to protect during copy
  10++CAC7 DD 21 00 00                          ld      ix,0                                                ; 14
  11++CACB DD 39                                add     ix,sp                                               ; 15
  12++CACD 31 2A C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  13++CAD0 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  14++CAD1 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  15++CAD2 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  16++CAD3 D9                                   exx                                                         ; 4
  17++CAD4 E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  18++CAD5 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  19++CAD6 C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  20++CAD7 31 AB C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  21++CADA C5                                   push    bc                                                  ; 10
  22++CADB D5                                   push    de                                                  ; 10
  23++CADC E5                                   push    hl                                                  ; 10
  24++CADD D9                                   exx                                                         ; 4
  25++CADE C5                                   push    bc                                                  ; 10
  26++CADF D5                                   push    de                                                  ; 10
  27++CAE0 E5                                   push    hl                                                  ; 10
  28++CAE1 31 36 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  29++CAE4 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  30++CAE5 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  31++CAE6 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  32++CAE7 31 B1 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  33++CAEA C5                                   push    bc                                                  ; 10
  34++CAEB D5                                   push    de                                                  ; 10
  35++CAEC E5                                   push    hl                                                  ; 10
  36++CAED DD F9                                ld      sp,ix               ; restore stack                 ; 10
  37++CAEF                                  IFNDEF INTERRUPS_DISABLE
  38++CAEF ~                                    ei
  39++CAEF                                  ENDIF
  40++CAEF C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  41++CAF0
  42++CAF0
  43++CAF0
  44++CAF0              ;CopyRotmatToTransMat:
  45++CAF0              ;                        ld      hl,UBnkrotmatSidevX
  46++CAF0              ;                        ld      de,UBnkTransmatSidevX
  47++CAF0              ;                        SixLDIInstrunctions
  48++CAF0              ;                        ld      hl,UBnkrotmatRoofvX
  49++CAF0              ;                        ld      de, UBnkTransmatRoofvX
  50++CAF0              ;                        SixLDIInstrunctions
  51++CAF0              ;                        ld      hl,UBnkrotmatNosevX
  52++CAF0              ;                        ld      de, UBnkTransmatNosevX
  53++CAF0              ;                        SixLDIInstrunctions
  54++CAF0              ;                        ret
  55++CAF0
  56++CAF0              CopyRotToTransMacro:    MACRO
  57++CAF0 ~                                    ld      hl,UBnkrotmatSidevX
  58++CAF0 ~                                    ld      de,UBnkTransmatSidevX
  59++CAF0 ~                                    SixLDIInstrunctions
  60++CAF0 ~                                    SixLDIInstrunctions
  61++CAF0 ~                                    SixLDIInstrunctions
  62++CAF0                                      ENDM
  63++CAF0
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyRotmatToTransMat.asm
 401+ CAF0                                      INCLUDE "../../Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CAF0              TransposeXX12ByShipToXX15:
   2++CAF0 2A EA C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CAF3 7C           		ld		a,h			                        ; get XX12 Sign
   4++CAF4 E6 80        		and		$80									; check sign bit on high byte
   5++CAF6 47           		ld		b,a									; and put it in of 12xlo in b
   6++CAF7                      ;110921 debugld      h,0
   7++CAF7 7C                   ld      a,h
   8++CAF8 E6 7F                and     $7F
   9++CAFA 67                   ld      h,a
  10++CAFB                      ;110921 debugld      h,0
  11++CAFB ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CAFF 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CB02 E6 80        		and		$80									; make sure we only have bit 7
  14++CB04 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CB05 CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CB08 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CB09 67           		ld		h,a
  18++CB0A 22 E4 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CB0D              ; ..................................
  20++CB0D 2A EC C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CB10 7C           		ld		a,h
  22++CB11 E6 80        		and		$80
  23++CB13 47           		ld		b,a
  24++CB14                      ;110921 debugld      h,0
  25++CB14 7C                   ld      a,h
  26++CB15 E6 7F                and     $7F
  27++CB17 67                   ld      h,a
  28++CB18                      ;110921 debugld      h,0
  29++CB18 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CB1C 3A 25 C0     		ld		a,(UBnKysgn)
  31++CB1F E6 80        		and		$80									; make sure we only have bit 7
  32++CB21 4F           		ld		c,a
  33++CB22 CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CB25 B4           		or		h									; combine sign in A with H
  35++CB26 67           		ld		h,a
  36++CB27 22 E6 C0     		ld		(UBnkYScaled),hl
  37++CB2A              ; ..................................
  38++CB2A 2A EE C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CB2D 7C           		ld		a,h
  40++CB2E E6 80        		and		$80
  41++CB30 47           		ld		b,a
  42++CB31                      ;110921 debugld      h,0
  43++CB31 7C                   ld      a,h
  44++CB32 E6 7F                and     $7F
  45++CB34 67                   ld      h,a
  46++CB35                      ;110921 debugld      h,0
  47++CB35 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CB39 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CB3C E6 80        		and		$80									; make sure we only have bit 7
  50++CB3E 4F           		ld		c,a
  51++CB3F CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CB42 B4           		or		h									; combine sign in A with H
  53++CB43 67           		ld		h,a
  54++CB44 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CB46 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CB48 E6 7F                and     $7F                                 ; a = value unsigned
  57++CB4A 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CB4C 7D                   ld      a,l                                 ; get low byte now
  59++CB4D              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CB4D FE 04       >                        cp      4
  59++CB4F DA 5E CB    >                        jp		c, ClampZto4
  60++CB52              NoClampZto4:
  61++CB52 22 E8 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CB55 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CB56 32 33 6A             ld      (varT),a
  64++CB59 7C           		ld		a,h
  65++CB5A 32 16 6A             ld      (varU),a
  66++CB5D C9           		ret
  67++CB5E              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CB5E 21 04 00     		ld		hl,4
  69++CB61 22 E8 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CB64 7D           		ld		a,l
  71++CB65 32 33 6A             ld      (varT),a                            ;                                                                           ;;;
  72++CB68 7C           		ld		a,h
  73++CB69 32 16 6A             ld      (varU),a 						; compatibility for now
  74++CB6C C9           		ret
  75++CB6D
# file closed: ../../Tests/Vectors/../../Universe/Ships/TransposeXX12ByShipToXX15.asm
 402+ CB6D                                      INCLUDE "../../Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ../../Tests/Vectors/../../Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CB6D              ScaleNodeTo8Bit:								; TODO make signed
   2++CB6D ED 4B E8 C0  	ld			bc,(UBnkZScaled)
   3++CB71 2A E4 C0     	ld			hl,(UBnkXScaled)
   4++CB74 ED 5B E6 C0  	ld			de,(UBnkYScaled)
   5++CB78              SetABSbc:
   6++CB78 78           	ld			a,b
   7++CB79 DD 67        	ld			ixh,a
   8++CB7B E6 7F        	and			SignMask8Bit
   9++CB7D 47           	ld			b,a									; bc = ABS bc
  10++CB7E              SetABShl:
  11++CB7E 7C           	ld			a,h
  12++CB7F DD 6F        	ld			ixl,a
  13++CB81 E6 7F        	and			SignMask8Bit
  14++CB83 67           	ld			h,a									; hl = ABS hl
  15++CB84              SetABSde:
  16++CB84 7A           	ld			a,d
  17++CB85 FD 67        	ld			iyh,a
  18++CB87 E6 7F        	and			SignMask8Bit
  19++CB89 57           	ld			d,a									; de = ABS de
  20++CB8A              ScaleNodeTo8BitLoop:
  21++CB8A 78               ld          a,b		                            ; U	\ z hi
  22++CB8B B4           	or			h                                   ; XX15+1	\ x hi
  23++CB8C B2           	or			d                                   ; XX15+4	\ y hi
  24++CB8D 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CB8F                  ShiftHLRight1
  25++CB8F CB 3C       >			   srl h
  25++CB91 CB 1D       >			   rr  l
  26++CB93                  ShiftDERight1
  26++CB93 CB 3A       >			   srl d
  26++CB95 CB 1B       >			   rr  e
  27++CB97              	ShiftBCRight1
  27++CB97 CB 38       >			   srl b
  27++CB99 CB 19       >			   rr  c
  28++CB9B C3 8A CB         jp          ScaleNodeTo8BitLoop
  29++CB9E              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CB9E DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CBA0 E6 80        	and			SignOnly8Bit
  32++CBA2 B0           	or			b
  33++CBA3 47           	ld			b,a
  34++CBA4              SignforHL:
  35++CBA4 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CBA6 E6 80        	and			SignOnly8Bit
  37++CBA8 B4           	or			h
  38++CBA9 67           	ld			h,a
  39++CBAA              SignforDE:
  40++CBAA FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CBAC E6 80        	and			SignOnly8Bit
  42++CBAE B2           	or			d
  43++CBAF 57           	ld			d,a
  44++CBB0              SignsDoneSaveResult:
  45++CBB0 ED 43 E8 C0  	ld			(UBnkZScaled),bc
  46++CBB4 22 E4 C0     	ld			(UBnkXScaled),hl
  47++CBB7 ED 53 E6 C0  	ld			(UBnkYScaled),de
  48++CBBB 78           	ld			a,b
  49++CBBC 32 16 6A     	ld			(varU),a
  50++CBBF 79           	ld			a,c
  51++CBC0 32 33 6A     	ld			(varT),a
  52++CBC3 C9           	ret
  53++CBC4
# file closed: ../../Tests/Vectors/../../Maths/Utilities/ScaleNodeTo8Bit.asm
 403+ CBC4
 404+ CBC4              ;--------------------------------------------------------------------------------------------------------
 405+ CBC4 21 10 C1     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 406+ CBC7 ED 31                                add     hl,a
 407+ CBC9 3E FF                                ld      a,$FF
 408+ CBCB 77                                   ld      (hl),a
 409+ CBCC C9                                   ret
 410+ CBCD              ;--------------------------------------------------------------------------------------------------------
 411+ CBCD 21 10 C1     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 412+ CBD0 ED 31                                add     hl,a
 413+ CBD2 AF                                   xor     a
 414+ CBD3 77                                   ld      (hl),a
 415+ CBD4 C9                                   ret
 416+ CBD5              ;--------------------------------------------------------------------------------------------------------
 417+ CBD5 3A 41 C4     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 418+ CBD8 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 419+ CBDA CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 420+ CBDC 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 421+ CBDD 21 10 C1                             ld      hl,UbnkFaceVisArray
 422+ CBE0 3E FF                                ld      a,$FF
 423+ CBE2              SetAllFacesVisibleLoop:
 424+ CBE2 77           EE30:                   ld      (hl),a
 425+ CBE3 23                                   inc     hl
 426+ CBE4 10 FC                                djnz    SetAllFacesVisibleLoop
 427+ CBE6 C9                                   ret
 428+ CBE7              ;--------------------------------------------------------------------------------------------------------
 429+ CBE7 3A 41 C4     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 430+ CBEA CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 431+ CBEC CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 432+ CBEE 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 433+ CBEF 06 10                                ld      b,16
 434+ CBF1 21 10 C1                             ld      hl,UbnkFaceVisArray
 435+ CBF4 3E 00                                ld      a,$00
 436+ CBF6 77           SetAllFacesHiddenLoop:  ld      (hl),a
 437+ CBF7 23                                   inc     hl
 438+ CBF8 10 FC                                djnz    SetAllFacesHiddenLoop
 439+ CBFA C9                                   ret
 440+ CBFB              ;--------------------------------------------------------------------------------------------------------
 441+ CBFB                                      include "../../Universe/Ships/NormaliseTransMat.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/NormaliseTransMat.asm
   1++CBFB              ;divdide by 16 using undocumented instrunctions
   2++CBFB 47           Norm256mulAdivQ:        ld      b,a
   3++CBFC 0E 00                                ld      c,0
   4++CBFE 16 00                                ld      d,0
   5++CC00 3A 17 6A                             ld      a,(varQ)
   6++CC03 5F                                   ld      e,a
   7++CC04              ;Input: BC = Dividend, DE = Divisor, HL = 0
   8++CC04              ;Output: BC = Quotient, HL = Remainder
   9++CC04 21 00 00     NormDIV16UNDOC:         ld      hl,0
  10++CC07 78                                   ld      a,b
  11++CC08 06 10                                ld      b,16
  12++CC0A CB 31        NormDIV16UNDOCLOOP:     sll	    c		; unroll 16 times
  13++CC0C 17                                   rla	    		; ...
  14++CC0D ED 6A                                adc	    hl,hl		; ...
  15++CC0F ED 52                                sbc	    hl,de		; ...
  16++CC11 30 02                                jr	    nc,NormDIV16UNDOCSKIP		; ...
  17++CC13 19                                   add	    hl,de		; ...
  18++CC14 0D                                   dec	    c		; ...
  19++CC15 10 F3        NormDIV16UNDOCSKIP:     djnz    NormDIV16UNDOCLOOP
  20++CC17 79                                   ld      a,c
  21++CC18 32 18 6A                             ld      (varR),a
  22++CC1B C9                                   ret
  23++CC1C
  24++CC1C FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  25++CC1E                                      ClearSignBitA
  25++CC1E E6 7F       >                        and     SignMask8Bit
  26++CC20 CD FB CB                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  27++CC23 FD 7C                                ld      a,iyh                       ; now correct R reg
  28++CC25                                      SignBitOnlyA
  28++CC25 E6 80       >                        and     SignOnly8Bit
  29++CC27 B1                                   or      c
  30++CC28 32 18 6A                             ld      (varR),a
  31++CC2B C9                                   ret
  32++CC2C
  33++CC2C              ; Tested OK
  34++CC2C              ;LL21
  35++CC2C              NormaliseTransMat:
  36++CC2C                      IFDEF LOGMATHS
  37++CC2C ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  38++CC2C ~                            ld      b,9                         ; total of 9 elements to transform
  39++CC2C ~                            MMUSelectMathsTables
  40++CC2C ~            .LL21Loop:      ld      d,(hl)
  41++CC2C ~                            dec     hl
  42++CC2C ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  43++CC2C ~                            ShiftDELeft1                        ; De = DE * 2
  44++CC2C ~                            ld      a,d                         ; a = hi byte after shifting
  45++CC2C ~                            push	hl
  46++CC2C ~                            push	bc
  47++CC2C ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  48++CC2C ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  49++CC2C ~                            pop		bc
  50++CC2C ~                            pop		hl							; bc gets wrecked by BFRDIV
  51++CC2C ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  52++CC2C ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  53++CC2C ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  54++CC2C ~                            MMUSelectROM0
  55++CC2C ~                            ret
  56++CC2C                      ELSE
  57++CC2C 21 B0 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  58++CC2F 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  59++CC31 79                           ld      a,c
  60++CC32 32 17 6A                     ld      (varQ),a                    ; set up varQ
  61++CC35 06 09                        ld      b,9                         ; total of 9 elements to transform
  62++CC37 56           LL21Loop:       ld      d,(hl)
  63++CC38 2B                           dec     hl
  64++CC39 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  65++CC3A                              ShiftDELeft1                        ; De = DE * 2
  65++CC3A CB 23       >			   sla e
  65++CC3C CB 12       >			   rl  d
  66++CC3E 7A                           ld      a,d                         ; a = hi byte after shifting
  67++CC3F E5                           push	hl
  68++CC40 C5                           push	bc
  69++CC41 CD FB CB                     call    Norm256mulAdivQ
  70++CC44                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  71++CC44 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  72++CC45 C1                           pop		bc
  73++CC46 E1                           pop		hl							; bc gets wrecked by BFRDIV
  74++CC47 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  75++CC48 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  76++CC49 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  77++CC4B C9                           ret
  78++CC4C                      ENDIF
# file closed: ../../Tests/Vectors/../../Universe/Ships/NormaliseTransMat.asm
 442+ CC4C              ;--------------------------------------------------------------------------------------------------------
 443+ CC4C                                      include "../../Universe/Ships/InverseXX16.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/InverseXX16.asm
   1++CC4C              ; TESTEDOK
   2++CC4C
   3++CC4C              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CC4C              ;        ld      a,(XX17)
   5++CC4C              ;        ld      ixl,a
   6++CC4C              ;        ld      ixh,9
   7++CC4C              ;        ld      hl,UBnkTransInv0x
   8++CC4C              ;        ld      a,(hl)
   9++CC4C              ;ScaleNode:
  10++CC4C              ;        ld      b,ixl
  11++CC4C              ;ScaleNodeLoop:
  12++CC4C              ;        sla      a
  13++CC4C              ;        djnz    ScaleNodeLoop
  14++CC4C              ;        ld      (hl),a
  15++CC4C              ;        inc     hl
  16++CC4C              ;        inc     hl
  17++CC4C              ;        dec     ixh
  18++CC4C              ;        jr      nz,ScaleNode
  19++CC4C              ;        ret
  20++CC4C
  21++CC4C
  22++CC4C              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CC4C              ; we coudl combine this with move to transmat later as an optimisation
  24++CC4C              ; INPUT - All Scaled
  25++CC4C              ;  They transmat has already been put into side, roof nose order
  26++CC4C              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CC4C              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CC4C              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CC4C              ; OUTPUT
  30++CC4C              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CC4C              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CC4C              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CC4C              ; First all side values become compoment 0 of each vector
  34++CC4C 2A 9F C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CC4F ED 5B A5 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CC53 ED 4B AB C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CC57 22 B7 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CC5A ED 53 B9 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CC5E ED 43 BB C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CC62 2A A1 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CC65 ED 5B A7 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CC69 ED 4B AD C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CC6D 22 BF C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CC70 ED 53 C1 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CC74 ED 43 C3 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CC78 2A A3 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CC7B ED 5B A9 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CC7F ED 4B AF C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CC83 22 C7 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CC86 ED 53 C9 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CC8A ED 43 CB C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CC8E C9                   ret
  53++CC8F
  54++CC8F
# file closed: ../../Tests/Vectors/../../Universe/Ships/InverseXX16.asm
 444+ CC8F              ;--------------------------------------------------------------------------------------------------------
 445+ CC8F              XX12DotOneRow:
 446+ CC8F              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 446+ CC8F 3A E4 C0    >                        ld      a,(UBnkXScaled)                        ;
 446+ CC92 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 446+ CC93 7E          >                        ld      a,(hl)                        ; A = XX16 element
 446+ CC94 57          >                        ld      d,a
 446+ CC95 ED 30       >                        mul
 446+ CC97 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 446+ CC98 32 33 6A    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 447+ CC9B 23                                   inc     hl                                  ; move to sign byte
 448+ CC9C              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 448+ CC9C 3A E5 C0    >                        ld      a,(UBnkXScaledSign)
 448+ CC9F AE          >                        xor     (hl)
 449+ CCA0 32 19 6A                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 450+ CCA3 23                                   inc     hl
 451+ CCA4              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 451+ CCA4 3A E6 C0    >                        ld      a,(UBnkYScaled)                        ;
 451+ CCA7 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 451+ CCA8 7E          >                        ld      a,(hl)                        ; A = XX16 element
 451+ CCA9 57          >                        ld      d,a
 451+ CCAA ED 30       >                        mul
 451+ CCAC 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 451+ CCAD 32 17 6A    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 452+ CCB0                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 452+ CCB0 3A 33 6A    >                        ld       a,(varT)
 452+ CCB3 32 18 6A    >                        ld       (varR),a
 453+ CCB6 23                                   inc     hl
 454+ CCB7                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 454+ CCB7 3A E7 C0    >                        ld      a,(UBnkYScaledSign)
 454+ CCBA AE          >                        xor     (hl)
 455+ CCBB              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 456+ CCBB E5           STequSRplusAQ           push    hl
 457+ CCBC CD C4 7A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 458+ CCBF E1                                   pop     hl
 459+ CCC0 32 33 6A                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 460+ CCC3 23                                   inc     hl
 461+ CCC4              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 461+ CCC4 3A E8 C0    >                        ld      a,(UBnkZScaled)                        ;
 461+ CCC7 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 461+ CCC8 7E          >                        ld      a,(hl)                        ; A = XX16 element
 461+ CCC9 57          >                        ld      d,a
 461+ CCCA ED 30       >                        mul
 461+ CCCC 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 461+ CCCD 32 17 6A    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 462+ CCD0                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 462+ CCD0 3A 33 6A    >                        ld       a,(varT)
 462+ CCD3 32 18 6A    >                        ld       (varR),a
 463+ CCD6 23                                   inc     hl
 464+ CCD7                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 464+ CCD7 3A E9 C0    >                        ld      a,(UBnkZScaledSign)
 464+ CCDA AE          >                        xor     (hl)
 465+ CCDB              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 466+ CCDB CD C4 7A                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 467+ CCDE              ; Now we exit with A = result S = Sign
 468+ CCDE C9                                   ret
 469+ CCDF
 470+ CCDF
 471+ CCDF                  DISPLAY "Tracing 4", $
 472+ CCDF
 473+ CCDF              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 474+ CCDF              ;TESTED OK
 475+ CCDF              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 476+ CCDF              XX12EquXX15DotProductXX16:
 477+ CCDF 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 478+ CCE2 21 9F C0                             ld      hl,UBnkTransmatSidevX
 479+ CCE5 CD 8F CC                             call    XX12DotOneRow
 480+ CCE8 32 EA C0                             ld      (UBnkXX12xLo),a
 481+ CCEB 3A 19 6A                             ld      a,(varS)
 482+ CCEE 32 EB C0                             ld      (UBnkXX12xSign),a
 483+ CCF1 21 A5 C0                             ld      hl,UBnkTransmatRoofvX
 484+ CCF4 CD 8F CC                             call    XX12DotOneRow
 485+ CCF7 32 EC C0                             ld      (UBnkXX12yLo),a
 486+ CCFA 3A 19 6A                             ld      a,(varS)
 487+ CCFD 32 ED C0                             ld      (UBnkXX12ySign),a
 488+ CD00 21 AB C0                             ld      hl,UBnkTransmatNosevX
 489+ CD03 CD 8F CC                             call    XX12DotOneRow
 490+ CD06 32 EE C0                             ld      (UBnkXX12zLo),a
 491+ CD09 3A 19 6A                             ld      a,(varS)
 492+ CD0C 32 EF C0                             ld      (UBnkXX12zSign),a
 493+ CD0F C9                                   ret
 494+ CD10              ;--------------------------------------------------------------------------------------------------------
 495+ CD10                                      INCLUDE "../../Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CD10              CopyXX12ScaledToXX18:
   2++CD10              CopyResultToDrawCam:
   3++CD10                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CD10 3A EA C0    >                        ld       a,(XX12)
   3++CD13 32 D8 C0    >                        ld       (XX18),a
   4++CD16                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CD16 3A EB C0    >                        ld       a,(XX12+1)
   4++CD19 32 DA C0    >                        ld       (XX18+2),a
   5++CD1C                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CD1C 3A EC C0    >                        ld       a,(XX12+2)
   5++CD1F 32 DB C0    >                        ld       (XX18+3),a
   6++CD22                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CD22 3A ED C0    >                        ld       a,(XX12+3)
   6++CD25 32 DD C0    >                        ld       (XX18+5),a
   7++CD28                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CD28 3A EE C0    >                        ld       a,(XX12+4)
   7++CD2B 32 DE C0    >                        ld       (XX18+6),a
   8++CD2E                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CD2E 3A EF C0    >                        ld       a,(XX12+5)
   8++CD31 32 E0 C0    >                        ld       (XX18+8),a
   9++CD34 C9                   ret
  10++CD35
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ScaledToXX18.asm
 496+ CD35                                      INCLUDE "../../Universe/Ships/CopyXX12toXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX12toXX15.asm
   1++CD35              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CD35 3A EA C0    >                        ld       a,(UBnkXX12xLo)
   1++CD38 32 E4 C0    >                        ld       (UBnkXScaled),a
   2++CD3B                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CD3B 3A EB C0    >                        ld       a,(UBnkXX12xSign)
   2++CD3E 32 E5 C0    >                        ld       (UBnkXScaledSign),a
   3++CD41                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CD41 3A EC C0    >                        ld       a,(UBnkXX12yLo)
   3++CD44 32 E6 C0    >                        ld       (UBnkYScaled),a
   4++CD47                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CD47 3A ED C0    >                        ld       a,(UBnkXX12ySign)
   4++CD4A 32 E7 C0    >                        ld       (UBnkYScaledSign),a
   5++CD4D                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CD4D 3A EE C0    >                        ld       a,(UBnkXX12zLo)
   5++CD50 32 E8 C0    >                        ld       (UBnkZScaled),a
   6++CD53                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CD53 3A EF C0    >                        ld       a,(UBnkXX12zSign)
   6++CD56 32 E9 C0    >                        ld       (UBnkZScaledSign),a
   7++CD59 C9                                   ret
   8++CD5A
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX12toXX15.asm
 497+ CD5A                                      INCLUDE "../../Universe/Ships/CopyXX18toXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX18toXX15.asm
   1++CD5A              CopyXX18toXX15:
   2++CD5A              CopyDrawCamToScaled:
   3++CD5A                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CD5A 3A D8 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CD5D 32 E4 C0    >                        ld       (UBnkXScaled),a
   4++CD60                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CD60 3A DA C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CD63 32 E5 C0    >                        ld       (UBnkXScaledSign),a
   5++CD66                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CD66 3A DB C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CD69 32 E6 C0    >                        ld       (UBnkYScaled),a
   6++CD6C                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CD6C 3A DD C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CD6F 32 E7 C0    >                        ld       (UBnkYScaledSign),a
   7++CD72                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CD72 3A DE C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CD75 32 E8 C0    >                        ld       (UBnkZScaled),a
   8++CD78                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CD78 3A E0 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CD7B 32 E9 C0    >                        ld       (UBnkZScaledSign),a
   9++CD7E C9                   ret
  10++CD7F
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX18toXX15.asm
 498+ CD7F                                      INCLUDE "../../Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CD7F 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++CD82 ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++CD86 ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++CD8A 22 D8 C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++CD8D ED 53 DA C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++CD91 ED 43 DC C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++CD95
   8++CD95 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++CD98 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++CD9B 22 DE C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++CD9E 32 E0 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++CDA1 C9                                   ret
  13++CDA2              ;                       ld      hl,UBnKxlo
  14++CDA2              ;                       ld      de,UBnkDrawCam0xLo
  15++CDA2              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++CDA2 C9                                   ret
  17++CDA3
  18++CDA3 2A D8 C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++CDA6 3A DA C0                             ld  a,(UBnkDrawCam0xSgn)
  20++CDA9 B4                                   or  h
  21++CDAA 67                                   ld  h,a
  22++CDAB 22 E4 C0                             ld  (UBnkXScaled),hl
  23++CDAE 2A DB C0                             ld  hl,(UBnkDrawCam0yLo)
  24++CDB1 3A DD C0                             ld  a,(UBnkDrawCam0ySgn)
  25++CDB4 B4                                   or  h
  26++CDB5 67                                   ld  h,a
  27++CDB6 22 E6 C0                             ld  (UBnkYScaled),hl
  28++CDB9 2A DE C0                             ld  hl,(UBnkDrawCam0zLo)
  29++CDBC 3A E0 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++CDBF B4                                   or  h
  31++CDC0 67                                   ld  h,a
  32++CDC1 22 E8 C0                             ld  (UBnkZScaled),hl
  33++CDC4 C9                                   ret
  34++CDC5
  35++CDC5              ;;;CopyXX18ScaledToXX15:
  36++CDC5              ;;;CopyDrawCamToScaledMatrix:
  37++CDC5              ;;;        ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  38++CDC5              ;;;        ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  39++CDC5              ;;;        ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  40++CDC5              ;;;        ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  41++CDC5              ;;;        ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  42++CDC5              ;;;        ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  43++CDC5              ;;;        ret
  44++CDC5
  45++CDC5              ;;;CopyXX15ToXX18Scaled:
  46++CDC5              ;;;CopyScaledMatrixToDrawCam:
  47++CDC5              ;;;        ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  48++CDC5              ;;;        ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  49++CDC5              ;;;        ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  50++CDC5              ;;;        ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  51++CDC5              ;;;        ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  52++CDC5              ;;;        ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  53++CDC5              ;;;        ret
  54++CDC5
  55++CDC5
  56++CDC5              XX15EquXX15AddXX18:
  57++CDC5              LL94Z:
  58++CDC5 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++CDC7 16 00                ld      d,0                                                     ;
  60++CDC9 3A E8 C0             ld      a,(UBnkZScaled)                                         ;
  61++CDCC 6F                   ld      l,a                                                     ;
  62++CDCD 3A E9 C0             ld      a,(UBnkZScaledSign)                                     ;
  63++CDD0 47                   ld      b,a                                                     ;
  64++CDD1 3A DE C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++CDD4 5F                   ld      e,a                                                     ;
  66++CDD5 3A E0 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++CDD8 4F                   ld      c,a                                                     ;
  68++CDD9 CD 33 00             call    ADDHLDESignBC                                           ;
  69++CDDC 47                   ld      b,a                                                     ;
  70++CDDD 7C                   ld      a,h                                                     ;
  71++CDDE 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++CDDF 32 E9 C0             ld      (UBnkZScaledSign),a                                     ;
  73++CDE2 7D                   ld      a,l                                                     ;
  74++CDE3 32 E8 C0             ld      (UBnkZScaled),a                                         ;           endif
  75++CDE6              LL94X:
  76++CDE6 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++CDE8 16 00                ld      d,0                                                     ;
  78++CDEA 3A E4 C0             ld      a,(UBnkXScaled)                                         ;
  79++CDED 6F                   ld      l,a                                                     ;
  80++CDEE 3A E5 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++CDF1 47                   ld      b,a                                                     ;
  82++CDF2 3A D8 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++CDF5 5F                   ld      e,a                                                     ;
  84++CDF6 3A DA C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++CDF9 4F                   ld      c,a                                                     ;
  86++CDFA CD 33 00             call    ADDHLDESignBC                                           ;
  87++CDFD 47                   ld      b,a                                                     ;
  88++CDFE 7C                   ld      a,h                                                     ;
  89++CDFF 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++CE00 32 E5 C0             ld      (UBnkXScaledSign),a                                     ;
  91++CE03 7D                   ld      a,l                                                     ;
  92++CE04 32 E4 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++CE07              LL94Y:
  94++CE07 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++CE09 16 00                ld      d,0                                                     ;
  96++CE0B 3A E6 C0             ld      a,(UBnkYScaled)                                         ;
  97++CE0E 6F                   ld      l,a                                                     ;
  98++CE0F 3A E7 C0             ld      a,(UBnkYScaledSign)                                     ;
  99++CE12 47                   ld      b,a                                                     ;
 100++CE13 3A DB C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++CE16 5F                   ld      e,a                                                     ;
 102++CE17 3A DD C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++CE1A 4F                   ld      c,a                                                     ;
 104++CE1B CD 33 00             call    ADDHLDESignBC                                           ;
 105++CE1E 47                   ld      b,a                                                     ;
 106++CE1F 7C                   ld      a,h                                                     ;
 107++CE20 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++CE21 32 E7 C0             ld      (UBnkYScaledSign),a                                     ;
 109++CE24 7D                   ld      a,l                                                     ;
 110++CE25 32 E6 C0             ld      (UBnkYScaled),a                                         ;
 111++CE28 C9                   ret
 112++CE29
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX18ScaledToXX15.asm
 499+ CE29                                      INCLUDE "../../Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ToScaled.asm
   1++CE29              CopyXX12ToScaled:
   2++CE29              CopyResultToScaled:
   3++CE29                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CE29 3A EA C0    >                        ld       a,(XX12+0)
   3++CE2C 32 E4 C0    >                        ld       (UBnkXScaled),a
   4++CE2F                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CE2F 3A EC C0    >                        ld       a,(XX12+2)
   4++CE32 32 E6 C0    >                        ld       (UBnkYScaled),a
   5++CE35                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CE35 3A EE C0    >                        ld       a,(XX12+4)
   5++CE38 32 E8 C0    >                        ld       (UBnkZScaled),a
   6++CE3B C9                   ret
   7++CE3C
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ToScaled.asm
 500+ CE3C              ;--------------------------------------------------------------------------------------------------------
 501+ CE3C                                      INCLUDE "../../Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ../../Tests/Vectors/../../Maths/Utilities/DotProductXX12XX15.asm
   1++CE3C              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CE3C              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CE3C              ;;; S = XX12 XSign Xor XX15 XSign
   4++CE3C              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CE3C              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CE3C              ;;; R = T
   7++CE3C              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CE3C              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CE3C              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CE3C              ;;; Q = A * Q /256 usigned (zdot)
  11++CE3C              ;;; R = T
  12++CE3C              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CE3C
  14++CE3C
  15++CE3C
  16++CE3C
  17++CE3C
  18++CE3C              MacroAequDxEdiv256usgn:	MACRO
  19++CE3C ~            						mul
  20++CE3C ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CE3C              						ENDM
  22++CE3C              DotProductXX12XX15:
  23++CE3C 3A EA C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CE3F                      JumpIfAIsZero dotxskipzero
  24++CE3F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CE40 CA 5D CE    >                        jp	    z, dotxskipzero
  25++CE43 5F                   ld          e,a
  26++CE44 3A E4 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CE47 57                   ld          d,a                     ; de = xx12 x signed
  28++CE48                      JumpIfAIsZero dotxskipzero
  28++CE48 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CE49 CA 5D CE    >                        jp	    z, dotxskipzero
  29++CE4C ED 30        		mul
  30++CE4E 42                   ld          b,d                     ; b = result
  31++CE4F 3A EB C0             ld          a,(UBnkXX12xSign)
  32++CE52 21 E5 C0             ld          hl,UBnkXScaledSign
  33++CE55 AE                   xor         (hl)
  34++CE56 E6 80                and         $80                     ; so sign bit only
  35++CE58 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CE5A C3 61 CE             jp          dotmuly
  37++CE5D              dotxskipzero:
  38++CE5D AF                   xor         a
  39++CE5E 47                   ld          b,a
  40++CE5F FD 67                ld          iyh,a
  41++CE61              dotmuly:
  42++CE61              ; now we have b = XX12 x &d  norm x signed
  43++CE61 3A EC C0             ld          a,(UBnkXX12yLo)
  44++CE64                      JumpIfAIsZero dotyskipzero
  44++CE64 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++CE65 CA 84 CE    >                        jp	    z, dotyskipzero
  45++CE68 5F                   ld          e,a
  46++CE69 3A E6 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++CE6C                      JumpIfAIsZero dotyskipzero
  47++CE6C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++CE6D CA 84 CE    >                        jp	    z, dotyskipzero
  48++CE70 57                   ld          d,a                     ; de = xx12 x signed
  49++CE71 ED 30                mul
  50++CE73 4A                   ld          c,d                     ; c = result
  51++CE74 DD 69                ld          ixl,c
  52++CE76 3A ED C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++CE79 21 E7 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++CE7C AE                   xor         (hl)                    ; XX15+3
  55++CE7D E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++CE7F DD 67                ld          ixh,a
  57++CE81 C3 88 CE             jp          dotaddxy
  58++CE84              dotyskipzero:
  59++CE84 AF                   xor         a
  60++CE85 4F                   ld          c,a
  61++CE86 DD 67                ld          ixh,a
  62++CE88              dotaddxy:
  63++CE88              ; Optimise later as this is 16 bit
  64++CE88 26 00                ld          h,0                     ;
  65++CE8A 68                   ld          l,b                     ; hl = xlo + x scaled
  66++CE8B 16 00                ld          d,0                     ;
  67++CE8D 59                   ld          e,c                     ; de = ylo + yscaled
  68++CE8E FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++CE90 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++CE91 CD 33 00             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++CE94 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++CE95 3A EE C0             ld          a,(UBnkXX12zLo)         ;
  73++CE98                      JumpIfAIsZero dotzskipzero
  73++CE98 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++CE99 CA BE CE    >                        jp	    z, dotzskipzero
  74++CE9C 5F                   ld          e,a                     ;
  75++CE9D 3A E8 C0             ld          a,(UBnkZScaled)         ;
  76++CEA0                      JumpIfAIsZero dotzskipzero
  76++CEA0 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++CEA1 CA BE CE    >                        jp	    z, dotzskipzero
  77++CEA4 57                   ld          d,a
  78++CEA5 ED 30                mul
  79++CEA7 E5                   push        hl                      ; save prev result
  80++CEA8 3A E9 C0             ld          a,(UBnkZScaledSign)
  81++CEAB 21 EF C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++CEAE AE                   xor         (hl)                    ; hi sign
  83++CEAF E6 80                and         $80                     ; a = sign of multiply
  84++CEB1 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++CEB2 E1                   pop         hl
  86++CEB3 5A                   ld          e,d
  87++CEB4 16 00                ld          d,0
  88++CEB6 CD 33 00             call ADDHLDESignBC
  89++CEB9 32 19 6A             ld          (varS),a
  90++CEBC 7D                   ld          a,l
  91++CEBD C9                   ret                                 ; returns with A = value, varS = sign
  92++CEBE              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++CEBE 78                   ld          a,b
  94++CEBF 32 19 6A             ld          (varS),a
  95++CEC2 7D                   ld          a,l
  96++CEC3 C9                   ret
  97++CEC4              ;;;;       DotProductXX12XX15:
  98++CEC4              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++CEC4              ;;;;       ld          e,a
 100++CEC4              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++CEC4              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++CEC4              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++CEC4              ;;;;		mul
 104++CEC4              ;;;;       ld          b,d                     ; b as var T
 105++CEC4              ;;;;       ld          a,(UBnkXX12xSign)
 106++CEC4              ;;;;       ld          hl,UBnkXScaledSign
 107++CEC4              ;;;;       xor         (hl)
 108++CEC4              ;;;;       and         $80                     ; so sign bit only
 109++CEC4              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++CEC4              ;;;; now we have b = XX12 x & norm x signed
 111++CEC4              ;;;; by here B = xlo & xscaled C = result sign
 112++CEC4              ;;;;       ld          a,(UBnkXX12yLo)
 113++CEC4              ;;;;       ld          e,a
 114++CEC4              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++CEC4              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++CEC4              ;;;;       mul
 117++CEC4              ;;;;       ld          a,d
 118++CEC4              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++CEC4              ;;;;       ld          a,b                     ; get back T from above held in b
 120++CEC4              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++CEC4              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++CEC4              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++CEC4              ;;;;       xor         (hl)                    ; XX15+3
 124++CEC4              ;;;;       and         $80
 125++CEC4              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++CEC4              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++CEC4              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++CEC4              ;;;;       ld          e,a                     ; use e as var Q
 129++CEC4              ;;;;       ld          a,(UBnkZScaled)         ;
 130++CEC4              ;;;;       ld          d,a
 131++CEC4              ;;;;       mul
 132++CEC4              ;;;;       ld          a,d
 133++CEC4              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++CEC4              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++CEC4              ;;;;       ld          a,(UBnkZScaledSign)
 136++CEC4              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++CEC4              ;;;;       xor         (hl)                    ; hi sign
 138++CEC4              ;;;;       and         $80
 139++CEC4              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++CEC4              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++CEC4
# file closed: ../../Tests/Vectors/../../Maths/Utilities/DotProductXX12XX15.asm
 502+ CEC4              ;--------------------------------------------------------------------------------------------------------
 503+ CEC4              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 504+ CEC4              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 505+ CEC4              ;--------------------------------------------------------------------------------------------------------
 506+ CEC4                                      INCLUDE "../../Universe/Ships/ScaleObjectDistance.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ScaleObjectDistance.asm
   1++CEC4              ScaleObjectDistance:
   2++CEC4              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++CEC4 3A 47 C4             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++CEC7 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++CEC8              LL90:                                       ; scaling object distance
   6++CEC8 3A DF C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++CECB 47                   ld      b,a                         ; z_hi (yReg)
   8++CECC                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++CECC A7          >                        and     a
   8++CECD C8          >                        ret     z
   9++CECE              LL90Loop:
  10++CECE              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++CECE 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++CECF                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++CECF 2A DB C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++CED2 CB 3C       >                    srl   h
  12++CED4 CB 1D       >                    rr    l
  12++CED6 22 DB C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++CED9                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++CED9 2A D8 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++CEDC CB 3C       >                    srl   h
  13++CEDE CB 1D       >                    rr    l
  13++CEE0 22 D8 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++CEE3                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++CEE3 2A DE C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++CEE6 CB 3C       >                    srl   h
  14++CEE8 CB 1D       >                    rr    l
  14++CEEA 22 DE C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++CEED 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++CEEE                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++CEEE A7          >                        and     a
  16++CEEF C2 CE CE    >                        jp	    nz,LL90Loop
  17++CEF2 C9                   ret
  18++CEF3
# file closed: ../../Tests/Vectors/../../Universe/Ships/ScaleObjectDistance.asm
 507+ CEF3              ;--------------------------------------------------------------------------------------------------------
 508+ CEF3
 509+ CEF3              ; Backface cull
 510+ CEF3              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 511+ CEF3              ; normal vector = cross product of ship ccordinates
 512+ CEF3              ;
 513+ CEF3                                      INCLUDE "../../Universe/Ships/CopyFaceToXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX15.asm
   1++CEF3 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CEF4 47                                   ld      b,a                                                    ;;;
   3++CEF5 E6 80                                and     SignOnly8Bit
   4++CEF7 32 E5 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CEFA 78                                   ld      a,b
   6++CEFB CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CEFD 47                                   ld      b,a
   8++CEFE E6 80                                and     SignOnly8Bit
   9++CF00 32 E7 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++CF03 78                                   ld      a,b
  11++CF04 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CF06 E6 80                                and     SignOnly8Bit
  13++CF08 32 E9 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++CF0B 23                                   inc     hl                          ; move to X ccord
  15++CF0C 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CF0D 32 E4 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++CF10 23                                   inc     hl                                                                                                                 ;;;
  18++CF11 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF12 32 E6 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++CF15 23                                   inc     hl                                                                                                                 ;;;
  21++CF16 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF17 32 E8 C0                             ld      (UBnkZScaled),a
  23++CF1A C9                                   ret
  24++CF1B
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX15.asm
 514+ CF1B                                      INCLUDE "../../Universe/Ships/CopyFaceToXX12.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX12.asm
   1++CF1B 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CF1C 47                                   ld      b,a                         ; save sign bits to b
   3++CF1D E6 80                                and     SignOnly8Bit
   4++CF1F 32 EB C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CF22 78                                   ld      a,b
   6++CF23 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CF25 47                                   ld      b,a
   8++CF26 E6 80                                and     SignOnly8Bit
   9++CF28 32 ED C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++CF2B 78                                   ld      a,b
  11++CF2C CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CF2E E6 80                                and     SignOnly8Bit
  13++CF30 32 EF C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++CF33 23                                   inc     hl                          ; move to X ccord
  15++CF34 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CF35 32 EA C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++CF38 23                                   inc     hl                                                                                                                 ;;;
  18++CF39 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF3A 32 EC C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++CF3D 23                                   inc     hl                                                                                                                 ;;;
  21++CF3E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF3F 32 EE C0                             ld      (UBnkXX12zLo),a
  23++CF42 C9                                   ret
  24++CF43
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX12.asm
 515+ CF43              ;--------------------------------------------------------------
 516+ CF43              ;--------------------------------------------------------------
 517+ CF43                                      INCLUDE "../../ModelRender/BackfaceCull.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/BackfaceCull.asm
   1++CF43              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++CF43                  DEFINE CHECKDOTSHIPDATA  1
   3++CF43               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4++CF43 00           CurrentNormIdx  DB 0
   5++CF44              ; SomeFacesVisible:
   6++CF44              ; EE29:
   7++CF44
   8++CF44              ;   Backface cull logic  line of sight vector . face normal vector
   9++CF44              ;       line of sight vector . face normal vector
  10++CF44              ;       => line of sight vector = [x y z] + face normal vector
  11++CF44              ;       Where [x y z] =
  12++CF44              ;                                               [ [x y z] . sidev ]
  13++CF44              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++CF44              ;                                               [ [x y z] . nosev ]
  15++CF44              ;
  16++CF44              ;   so project the [x y z] vector into the face's normal space
  17++CF44              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++CF44              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++CF44              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++CF44              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++CF44              ;
  22++CF44              ;                         [ [x y z] . sidev + normal_x ]
  23++CF44              ;                       = [ [x y z] . roofv + normal_y ]
  24++CF44              ;                         [ [x y z] . nosev + normal_z ]
  25++CF44              ;
  26++CF44              ; so
  27++CF44              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++CF44              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++CF44              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++CF44              ;
  31++CF44              ; where face is visible if visibility < 0
  32++CF44              ;
  33++CF44              ;   so we set XX15 to [x y z] . sidev
  34++CF44              ;                     [x y z] . roofv
  35++CF44              ;                     [x y z] . nosev
  36++CF44              ;
  37++CF44
  38++CF44
  39++CF44
  40++CF44 3A DF C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++CF47                                      JumpIfAIsZero .ScaleDone            ;
  41++CF47 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++CF48 CA 74 CF    >                        jp	    z, .ScaleDone
  42++CF4B 2A D8 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++CF4E ED 5B DB C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++CF52 ED 4B DE C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++CF56 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++CF58                                      ShiftHLRight1                       ; divide cam position by 2
  46++CF58 CB 3C       >			   srl h
  46++CF5A CB 1D       >			   rr  l
  47++CF5C                                      ShiftDERight1                       ;
  47++CF5C CB 3A       >			   srl d
  47++CF5E CB 1B       >			   rr  e
  48++CF60                                      ShiftBCRight1                       ;
  48++CF60 CB 38       >			   srl b
  48++CF62 CB 19       >			   rr  c
  49++CF64 78                                   ld      a,b                         ; loop if not scaled down
  50++CF65                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++CF65 A7          >                        and     a
  50++CF66 C2 56 CF    >                        jp	    nz,.ScaleNormalLoop
  51++CF69 22 D8 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++CF6C ED 53 DB C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++CF70 ED 43 DE C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++CF74 FD 7D        .ScaleDone:             ld      a,iyl
  55++CF76 32 1E 6A                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++CF79 C9                                   ret
  57++CF7A
  58++CF7A 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++CF7D E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++CF7F 20 2A                                jr      nz,.ShipNoDraw               ; .
  61++CF81 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++CF84 7C                                   ld      a,h
  63++CF85                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++CF85 FE C0       >                        cp     ShipMaxDistance
  63++CF87 D2 AB CF    >                        jp		nc,.ShipNoDraw
  64++CF8A ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++CF8E CD E0 77                             call    compare16HLDE
  66++CF91 38 18                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++CF93 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++CF97 CD E0 77                             call    compare16HLDE
  69++CF9A 38 0F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++CF9C                                      IFDEF   CHECKDOTSHIPDATA
  71++CF9C 3A 42 C4     .CheckDotV2:                ld      a,(DotAddr)
  72++CF9F                                          JumpIfAGTENusng h, .DrawFull
  72++CF9F BC          >                        cp     h
  72++CFA0 D2 A6 CF    >                        jp		nc,.DrawFull
  73++CFA3 C3 AF CF                                 jp      .ShipIsADot
  74++CFA6 CD 6A C6     .DrawFull:                  call    UnivVisibleNonDot           ;
  75++CFA9                                          ClearCarryFlag
  75++CFA9 B7          >                        or a
  76++CFAA C9                                       ret
  77++CFAB                                      ELSE
  78++CFAB ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  79++CFAB ~                                        ShiftHLRight1                       ; .
  80++CFAB ~                                        ShiftHLRight1                       ; .
  81++CFAB ~                                        ld      a,h
  82++CFAB ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  83++CFAB ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  84++CFAB ~                                        ; Check visbility distance
  85++CFAB ~            .SetXX4Dist:                ;break
  86++CFAB ~                                        ld      a,l
  87++CFAB ~                                        rra                                 ; l may have had bit 0 of h carried in
  88++CFAB ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  89++CFAB ~                                        srl     a
  90++CFAB ~                                        srl     a
  91++CFAB ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  92++CFAB ~                                        call    UnivVisibleNonDot               ;
  93++CFAB ~                                        ClearCarryFlag
  94++CFAB ~                                        ret
  95++CFAB                                      ENDIF
  96++CFAB CD 7E C6     .ShipNoDraw:            call    UnivInvisible
  97++CFAE C9                                   ret
  98++CFAF              .ShipIsADot:            IFDEF DEBUGDRAWDISTANCE
  99++CFAF ~                                        call    UnivVisible  ;
 100++CFAF                                      ELSE
 101++CFAF CD 75 C6                                 call    UnivVisibleDot
 102++CFB2                                      ENDIF
 103++CFB2 C9                                   ret
 104++CFB3
 105++CFB3                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
 106++CFB3              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 106++CFB3 3A 41 C4    >                        ld   a,(FaceCtX4Addr)
 106++CFB6 A7          >                        and a
 106++CFB7 C8          >                        ret    z
 107++CFB8                                      ;break
 108++CFB8 CD C6 CA                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 109++CFBB CD 5A 68                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 110++CFBE CD 7F CD                             call    LoadCraftToCamera           ; XX18 = camera
 111++CFC1                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 112++CFC1 3A 47 C4     .BackfaceLoop:          ld      a,(QAddr)                   ;
 113++CFC4 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 114++CFC6              ; By this point XX18 = scaled draw cam and iyl = scale factor
 115++CFC6 CD 44 CF                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 116++CFC9 CD A3 CD                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 117++CFCC CD ED 67     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 118++CFCF CD 10 CD                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 119++CFD2 21 07 C6     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 120++CFD5 22 1D 69                             ld      (varV),hl
 121++CFD8 3A 41 C4                             ld      a,(FaceCtX4Addr)                                        ; For each face
 122++CFDB CB 3F                                srl     a                                              ;
 123++CFDD CB 3F                                srl     a                                              ;
 124++CFDF 47                                   ld      b,a                                            ;
 125++CFE0 AF                                   xor     a
 126++CFE1 32 43 CF                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 127++CFE4 E5           .ProcessNormalsLoop:    push    hl
 128++CFE5 C5                                   push    bc
 129++CFE6 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 130++CFE7 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 131++CFE9 E5                                   push    hl
 132++CFEA 21 8F C0                             ld      hl,UBnkDrawAllFaces
 133++CFED BE                                   cp      (hl)
 134++CFEE E1                                   pop     hl
 135++CFEF                                      IFDEF DEBUGFORCEFACEDRAW
 136++CFEF ~                                        jp      .FaceVisible
 137++CFEF                                      ELSE
 138++CFEF DA 34 D1                                 jp      c,.FaceVisible              ; then we always draw
 139++CFF2                                      ENDIF
 140++CFF2              ; This bit needs to be added to force face visible
 141++CFF2 CD 1B CF     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 142++CFF5 3A 1E 6A                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 143++CFF8 47                                   ld      b,a
 144++CFF9                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 144++CFF9 FE 04       >                        cp      4
 144++CFFB DA 36 D0    >                        jp		c, .ScaleNormByXX17
 145++CFFE CD 5A CD     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 146++D001 C3 C5 D0                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 147++D004 3A D8 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 148++D007 CB 3F                                srl     a                           ; which is held in XX18
 149++D009 32 D8 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 150++D00C 3A DE C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 151++D00F CB 3F                                srl     a                           ; .
 152++D011 32 DE C0                             ld      (UBnkDrawCam0zLo),a         ; .
 153++D014 3A DB C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 154++D017 CB 3F                                srl     a                           ; .
 155++D019 32 DB C0                             ld      (UBnkDrawCam0yLo),a        ; .
 156++D01C 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 157++D01E                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 157++D01E 3A E4 C0    >                    ld      a,(UBnkXScaled)
 157++D021 CB 3F       >                    srl     a
 157++D023 32 E4 C0    >                    ld      (UBnkXScaled),a
 158++D026                                      ShiftMem8Right1 UBnkYScaled         ;
 158++D026 3A E6 C0    >                    ld      a,(UBnkYScaled)
 158++D029 CB 3F       >                    srl     a
 158++D02B 32 E6 C0    >                    ld      (UBnkYScaled),a
 159++D02E                                      ShiftMem8Right1 UBnkZScaled         ;
 159++D02E 3A E8 C0    >                    ld      a,(UBnkZScaled)
 159++D031 CB 3F       >                    srl     a
 159++D033 32 E8 C0    >                    ld      (UBnkZScaled),a
 160++D036              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 161++D036              .ScaleNormByXX17:       ;ld      b,a
 162++D036 CD 35 CD                             call    CopyXX12toXX15
 163++D039 05           .LL93                   dec     b
 164++D03A FA 59 D0                             jp      m, .ScaledNorm
 165++D03D              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 165++D03D 3A E4 C0    >                    ld      a,(UBnkXScaled)
 165++D040 CB 3F       >                    srl     a
 165++D042 32 E4 C0    >                    ld      (UBnkXScaled),a
 166++D045                                      ShiftMem8Right1 UBnkYScaled        ;
 166++D045 3A E6 C0    >                    ld      a,(UBnkYScaled)
 166++D048 CB 3F       >                    srl     a
 166++D04A 32 E6 C0    >                    ld      (UBnkYScaled),a
 167++D04D                                      ShiftMem8Right1 UBnkZScaled        ;
 167++D04D 3A E8 C0    >                    ld      a,(UBnkZScaled)
 167++D050 CB 3F       >                    srl     a
 167++D052 32 E8 C0    >                    ld      (UBnkZScaled),a
 168++D055 05                                   dec     b                          ;
 169++D056 F2 3D D0                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 170++D059              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 171++D059              ; Add normal to XX15
 172++D059              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 173++D059              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 174++D059              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 175++D059              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 176++D059              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 176++D059 3A E8 C0    >                        ld       a,(UBnkZScaled)
 176++D05C 32 18 6A    >                        ld       (varR),a
 177++D05F                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 177++D05F 3A EF C0    >                        ld       a,(UBnkXX12zSign)
 177++D062 32 19 6A    >                        ld       (varS),a
 178++D065                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 178++D065 3A DE C0    >                        ld       a,(UBnkDrawCam0zLo)
 178++D068 32 17 6A    >                        ld       (varQ),a
 179++D06B 3A E0 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 180++D06E CD C4 7A                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 181++D071 DA 04 D0                             jp      c,.Ovflw
 182++D074 32 E8 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 183++D077                                      ldCopyByte  varS, UBnkZScaledSign   ;
 183++D077 3A 19 6A    >                        ld       a,(varS)
 183++D07A 32 E9 C0    >                        ld       (UBnkZScaledSign),a
 184++D07D                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 184++D07D 3A E4 C0    >                        ld       a,(UBnkXScaled)
 184++D080 32 18 6A    >                        ld       (varR),a
 185++D083                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 185++D083 3A EB C0    >                        ld       a,(UBnkXX12xSign)
 185++D086 32 19 6A    >                        ld       (varS),a
 186++D089                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 186++D089 3A D8 C0    >                        ld       a,(UBnkDrawCam0xLo)
 186++D08C 32 17 6A    >                        ld       (varQ),a
 187++D08F 3A DA C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 188++D092 CD C4 7A                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 189++D095 DA 04 D0                             jp      c,.Ovflw
 190++D098 32 E4 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 191++D09B                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 191++D09B 3A 19 6A    >                        ld       a,(varS)
 191++D09E 32 E5 C0    >                        ld       (UBnkXScaledSign),a
 192++D0A1                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 192++D0A1 3A E6 C0    >                        ld       a,(UBnkYScaled)
 192++D0A4 32 18 6A    >                        ld       (varR),a
 193++D0A7                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 193++D0A7 3A ED C0    >                        ld       a,(UBnkXX12ySign)
 193++D0AA 32 19 6A    >                        ld       (varS),a
 194++D0AD                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 194++D0AD 3A DB C0    >                        ld       a,(UBnkDrawCam0yLo)
 194++D0B0 32 17 6A    >                        ld       (varQ),a
 195++D0B3 3A DD C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 196++D0B6 CD C4 7A                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 197++D0B9 DA 04 D0                             jp      c,.Ovflw                    ; .
 198++D0BC 32 E6 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 199++D0BF                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 199++D0BF 3A 19 6A    >                        ld       a,(varS)
 199++D0C2 32 E7 C0    >                        ld       (UBnkYScaledSign),a
 200++D0C5              ; calculate dot product LL89
 201++D0C5              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 201++D0C5 3A EA C0    >                        ld       a,(UBnkXX12xLo)
 201++D0C8 32 17 6A    >                        ld       (varQ),a
 202++D0CB 3A E4 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 203++D0CE CD 8C 7A                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 204++D0D1 32 33 6A                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 205++D0D4 3A EB C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 206++D0D7 21 E5 C0                             ld      hl,UBnkXScaledSign          ; .
 207++D0DA AE                                   xor     (hl)                        ; .
 208++D0DB 32 19 6A                             ld      (varS),a                    ; .
 209++D0DE                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 209++D0DE 3A EC C0    >                        ld       a,(UBnkXX12yLo)
 209++D0E1 32 17 6A    >                        ld       (varQ),a
 210++D0E4 3A E6 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 211++D0E7 CD 8C 7A                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 212++D0EA 32 17 6A                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 213++D0ED                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 213++D0ED 3A 33 6A    >                        ld       a,(varT)
 213++D0F0 32 18 6A    >                        ld       (varR),a
 214++D0F3 3A ED C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 215++D0F6 21 E7 C0                             ld      hl, UBnkYScaledSign         ; .
 216++D0F9 AE                                   xor     (hl)                        ; .
 217++D0FA CD C4 7A                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 218++D0FD 32 33 6A                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 219++D100                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 219++D100 3A EE C0    >                        ld       a,(UBnkXX12zLo)
 219++D103 32 17 6A    >                        ld       (varQ),a
 220++D106 3A E8 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 221++D109 CD 8C 7A                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 222++D10C 32 17 6A                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 223++D10F                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 223++D10F 3A 33 6A    >                        ld       a,(varT)
 223++D112 32 18 6A    >                        ld       (varR),a
 224++D115 3A E9 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 225++D118 21 EF C0                             ld      hl, UBnkXX12zSign           ; .
 226++D11B AE                                   xor     (hl)                        ; .
 227++D11C CD C4 7A                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 228++D11F FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 229++D121 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 230++D123 3A 19 6A                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 231++D126 ED 27 80                             test    $80                         ; this should test S not A
 232++D129 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 233++D12B 3A 43 CF     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 234++D12E CD CD CB                             call        SetFaceAHidden                                      ;           set face invisible
 235++D131 C3 3A D1                             jp          .ProcessNormalLoopEnd                                ;        end if
 236++D134 3A 43 CF     .FaceVisible:            ld          a,(CurrentNormIdx)
 237++D137 CD C4 CB                             call        SetFaceAVisible
 238++D13A 21 43 CF     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 239++D13D 34                                   inc         (hl)                    ; move index pointer up by one
 240++D13E C1                                   pop         bc
 241++D13F E1                                   pop         hl                      ; get normal data pointer back
 242++D140 3E 04                                ld          a,4
 243++D142 ED 31                                add         hl,a                    ; move to next normal entry
 244++D144 22 1D 69                             ld          (varV),hl               ; save as we need it again
 245++D147 05                                   dec         b
 246++D148 C2 E4 CF                             jp          nz,.ProcessNormalsLoop
 247++D14B C9                                   ret
 248++D14C
# file closed: ../../Tests/Vectors/../../ModelRender/BackfaceCull.asm
 518+ D14C              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 519+ D14C
 520+ D14C              TransposeXX12NodeToXX15:
 521+ D14C                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 521+ D14C 3A 22 C0    >                        ld       a,(UBnKxsgn)
 521+ D14F 32 E6 C0    >                        ld       (UbnkXPointSign),a
 522+ D152 ED 4B EA C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 523+ D156 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 524+ D157 FA 6D D1             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 525+ D15A              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 526+ D15A              NodeXPositiveX:
 527+ D15A 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 528+ D15B 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 529+ D15D 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 530+ D160 26 00                ld          h,0                                 ; but we don;t want the sign
 531+ D162 09                   add         hl,bc                               ; its a 16 bit add
 532+ D163 22 E4 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 533+ D166 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 534+ D167 32 E6 C0             ld          (UbnkXPointSign),a
 535+ D16A C3 89 D1             jp          FinishedThisNodeX
 536+ D16D              ; If we get here then _sign and vertv_ have different signs so do subtract
 537+ D16D              NodeNegativeX:
 538+ D16D              LL52X:                                                 ;
 539+ D16D 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 540+ D170 ED 4B EA C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 541+ D174 06 00                ld          b,0                                 ; XX12 lo byte only
 542+ D176 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 543+ D178 F2 86 D1             jp          p,SetAndMopX                       ; if result is positive skip to write back
 544+ D17B              NodeXNegSignChangeX:
 545+ D17B              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 546+ D17B CD 8A 71             call        negate16hl                          ; Convert back to positive and flip sign
 547+ D17E 3A E6 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 548+ D181 EE 80                xor         $80                                 ; Flip bit 7
 549+ D183 32 E6 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 550+ D186              SetAndMopX:
 551+ D186 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 552+ D189              FinishedThisNodeX:
 553+ D189
 554+ D189              LL53:
 555+ D189
 556+ D189                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 556+ D189 3A 25 C0    >                        ld       a,(UBnKysgn)
 556+ D18C 32 E9 C0    >                        ld       (UbnkYPointSign),a
 557+ D18F ED 4B EC C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 558+ D193 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 559+ D194 FA AA D1             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 560+ D197              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 561+ D197              NodeXPositiveY:
 562+ D197 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 563+ D198 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 564+ D19A 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 565+ D19D 26 00                ld          h,0                                 ; but we don;t want the sign
 566+ D19F 09                   add         hl,bc                               ; its a 16 bit add
 567+ D1A0 22 E7 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 568+ D1A3 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 569+ D1A4 32 E6 C0             ld          (UbnkXPointSign),a
 570+ D1A7 C3 C6 D1             jp          FinishedThisNodeY
 571+ D1AA              ; If we get here then _sign and vertv_ have different signs so do subtract
 572+ D1AA              NodeNegativeY:
 573+ D1AA              LL52Y:                                                 ;
 574+ D1AA 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
 575+ D1AD ED 4B EC C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 576+ D1B1 06 00                ld          b,0                                 ; XX12 lo byte only
 577+ D1B3 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 578+ D1B5 F2 C3 D1             jp          p,SetAndMopY                       ; if result is positive skip to write back
 579+ D1B8              NodeXNegSignChangeY:
 580+ D1B8              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 581+ D1B8 CD 8A 71             call        negate16hl                          ; Convert back to positive and flip sign
 582+ D1BB 3A E9 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 583+ D1BE EE 80                xor         $80                                 ; Flip bit 7
 584+ D1C0 32 E9 C0             ld          (UbnkYPointSign),a                 ; XX15+2
 585+ D1C3              SetAndMopY:
 586+ D1C3 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
 587+ D1C6              FinishedThisNodeY:
 588+ D1C6
 589+ D1C6                  DISPLAY "Tracing 5", $
 590+ D1C6
 591+ D1C6              TransposeZ:
 592+ D1C6              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 593+ D1C6 3A EF C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 594+ D1C9                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 594+ D1C9 CB 7F       >                        bit 	7,a
 594+ D1CB C2 DF D1    >                        jp      nz,NegativeNodeZ
 595+ D1CE 3A EE C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 596+ D1D1 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 597+ D1D4 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 598+ D1D6 7D                   ld          a,l
 599+ D1D7 32 33 6A             ld          (varT),a                            ;                                                                           ;;;
 600+ D1DA 7C                   ld          a,h
 601+ D1DB 32 16 6A             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 602+ D1DE C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 603+ D1DF              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 604+ D1DF              NegativeNodeZ:
 605+ D1DF              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 606+ D1DF 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 607+ D1E2 ED 4B EE C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 608+ D1E6 06 00                ld          b,0                                 ; upper byte will be garbage
 609+ D1E8                      ClearCarryFlag
 609+ D1E8 B7          >                        or a
 610+ D1E9 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 611+ D1EB 7D                   ld          a,l
 612+ D1EC 32 33 6A             ld          (varT),a                            ; t = result low
 613+ D1EF 7C                   ld          a,h
 614+ D1F0 32 16 6A             ld          (varU),a                            ; u = result high
 615+ D1F3 E2 00 D2             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 616+ D1F6              LL56Overflow:
 617+ D1F6 FE 00                cp          0                                   ; is varU 0?
 618+ D1F8 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 619+ D1FA 3A 33 6A             ld          a,(varT)                            ; T \ restore z lo
 620+ D1FD                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 620+ D1FD FE 04       >                        cp    4
 620+ D1FF D0          >                        ret	 nc
 621+ D200              MakeNodeClose:
 622+ D200              LL140:                                                  ; else make node close
 623+ D200 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 624+ D201 32 16 6A             ld          (varU),a                            ; U
 625+ D204 3E 04                ld          a,4                                 ; lo
 626+ D206 32 33 6A             ld          (varT),a                            ; T
 627+ D209 C9                   ret
 628+ D20A              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 629+ D20A              ProcessVisibleNode:
 630+ D20A              RotateNode:                                                                                                                         ;;;
 631+ D20A CD DF CC             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 632+ D20D              LL52LL53LL54LL55
 633+ D20D              TransposeNode:
 634+ D20D CD 4C D1             call        TransposeXX12NodeToXX15
 635+ D210
 636+ D210              ; ......................................................                                                         ;;;
 637+ D210              NodeAdditionsDone:
 638+ D210              Scale16BitTo8Bit:
 639+ D210              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 640+ D210 3A 16 6A             ld          a,(varU)                            ; U \ z hi
 641+ D213 21 E5 C0             ld          hl,UbnkXPointHi
 642+ D216 B6                   or          (hl)                                ; XX15+1    \ x hi
 643+ D217 21 E8 C0             ld          hl,UbnkYPointHi
 644+ D21A B6                   or          (hl)                                ; XX15+4    \ y hi
 645+ D21B              AreXYZHiAllZero:
 646+ D21B 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 647+ D21D              DivideXYZBy2:
 648+ D21D                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 648+ D21D 2A E4 C0    >                    ld    hl,(UbnkXPoint)
 648+ D220 CB 3C       >                    srl   h
 648+ D222 CB 1D       >                    rr    l
 648+ D224 22 E4 C0    >                    ld    (UbnkXPoint),hl
 649+ D227                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 649+ D227 2A E7 C0    >                    ld    hl,(UbnkYPoint)
 649+ D22A CB 3C       >                    srl   h
 649+ D22C CB 1D       >                    rr    l
 649+ D22E 22 E7 C0    >                    ld    (UbnkYPoint),hl
 650+ D231 3A 16 6A             ld          a,(varU)                            ; U \ z hi
 651+ D234 67                   ld          h,a
 652+ D235 3A 33 6A             ld          a,(varT)                            ; T \ z lo
 653+ D238 6F                   ld          l,a
 654+ D239                      ShiftHLRight1
 654+ D239 CB 3C       >			   srl h
 654+ D23B CB 1D       >			   rr  l
 655+ D23D 7C                   ld          a,h
 656+ D23E 32 16 6A             ld          (varU),a
 657+ D241 7D                   ld          a,l
 658+ D242 32 33 6A             ld          (varT),a                            ; T \ z lo
 659+ D245 C3 10 D2             jp          Scale16BitTo8Bit                    ; loop U
 660+ D248              NodeScalingDone:
 661+ D248              LL60:                                                   ; hi U rolled to 0, exited loop above.
 662+ D248              ProjectNodeToScreen:
 663+ D248                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 663+ D248 3A 33 6A    >                        ld       a,(varT)
 663+ D24B 32 17 6A    >                        ld       (varQ),a
 664+ D24E 3A E4 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 665+ D251 21 17 6A             ld          hl,varQ
 666+ D254 BE                   cp          (hl)                                ; Q
 667+ D255                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 667+ D255 DA 5E D2    >                        jp		c,DoSmallAngle
 668+ D258 CD D2 71             call        RequAmul256divQ; RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 669+ D25B C3 66 D2             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 670+ D25E              DoSmallAngle:                                           ; small x angle
 671+ D25E              LL69:
 672+ D25E              ; TODO check if we need to retain BC as this trashes it
 673+ D25E              ;Input: BC = Dividend, DE = Divisor, HL = 0
 674+ D25E              ;Output: BC = Quotient, HL = Remainder
 675+ D25E 47                   ld      b,a
 676+ D25F CD 63 74             call    DIV16UNDOC
 677+ D262 79                   ld      a,c
 678+ D263 32 18 6A             ld      (varR),a
 679+ D266               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 680+ D266              SkipSmallAngle:
 681+ D266              ScaleX:
 682+ D266              LL65:                                                   ; both continue for scaling based on z
 683+ D266 3A E6 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 684+ D269                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 684+ D269 CB 7F       >                        bit 	7,a
 684+ D26B C2 7E D2    >                        jp      nz,NegativeXPoint
 685+ D26E              ; ......................................................
 686+ D26E              PositiveXPoint:
 687+ D26E 3A 18 6A             ld          a,(varR)
 688+ D271 6F                   ld          l,a
 689+ D272 3A 16 6A             ld          a,(varU)
 690+ D275 67                   ld          h,a
 691+ D276 3E 80                ld          a,ScreenCenterX
 692+ D278 ED 31                add         hl,a
 693+ D27A EB                   ex          de,hl
 694+ D27B C3 8E D2             jp          StoreXPoint
 695+ D27E              NegativeXPoint:
 696+ D27E              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 697+ D27E 3A 18 6A             ld          a,(varR)
 698+ D281 6F                   ld          l,a
 699+ D282 3A 16 6A             ld          a,(varU)
 700+ D285 67                   ld          h,a
 701+ D286 0E 80                ld          c,ScreenCenterX
 702+ D288 06 00                ld          b,0
 703+ D28A                      ClearCarryFlag
 703+ D28A B7          >                        or a
 704+ D28B ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 705+ D28D EB                   ex          de,hl
 706+ D28E              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
 707+ D28E FD 73 00             ld          (iy+0),e                            ; Update X Point
 708+ D291 FD 72 01             ld          (iy+1),d                            ; Update X Point
 709+ D294 FD 23                inc         iy
 710+ D296 FD 23                inc         iy
 711+ D298              ; ......................................................
 712+ D298              LL66:
 713+ D298              ProcessYPoint:
 714+ D298 AF                   xor         a                                   ; y hi = 0
 715+ D299 32 16 6A             ld          (varU),a                            ; U
 716+ D29C                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
 716+ D29C 3A 33 6A    >                        ld       a,(varT)
 716+ D29F 32 17 6A    >                        ld       (varQ),a
 717+ D2A2 3A E7 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
 718+ D2A5 21 17 6A             ld          hl,varQ
 719+ D2A8 BE                   cp          (hl)                                ; Q
 720+ D2A9                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
 720+ D2A9 DA B2 D2    >                        jp		c,SmallYHop
 721+ D2AC              SmallYPoint:
 722+ D2AC CD D2 71             call        RequAmul256divQ;RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
 723+ D2AF C3 B5 D2             jp          SkipYScale                          ; LL68 hop over small y yangle
 724+ D2B2              SmallYHop:
 725+ D2B2              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
 726+ D2B2 CD D2 71             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 727+ D2B5              SkipYScale:
 728+ D2B5              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
 729+ D2B5 3A E9 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
 730+ D2B8 CB 7F                bit         7,a
 731+ D2BA C2 CD D2             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 732+ D2BD              PositiveYPoint:
 733+ D2BD 3A 18 6A             ld          a,(varR)
 734+ D2C0 6F                   ld          l,a
 735+ D2C1 3A 16 6A             ld          a,(varU)
 736+ D2C4 67                   ld          h,a
 737+ D2C5 3E 60                ld          a,ScreenHeightHalf
 738+ D2C7 ED 31                add         hl,a
 739+ D2C9 EB                   ex          de,hl
 740+ D2CA C3 DD D2             jp          LL50
 741+ D2CD              NegativeYPoint:
 742+ D2CD              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 743+ D2CD 3A 18 6A             ld          a,(varR)
 744+ D2D0 6F                   ld          l,a
 745+ D2D1 3A 16 6A             ld          a,(varU)
 746+ D2D4 67                   ld          h,a
 747+ D2D5 0E 60                ld          c,ScreenHeightHalf
 748+ D2D7 06 00                ld          b,0
 749+ D2D9                      ClearCarryFlag
 749+ D2D9 B7          >                        or a
 750+ D2DA ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 751+ D2DC EB                   ex          de,hl
 752+ D2DD              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
 753+ D2DD FD 73 00             ld          (iy+0),e                            ; Update X Point
 754+ D2E0 FD 72 01             ld          (iy+1),d                            ; Update X Point
 755+ D2E3 FD 23                inc         iy
 756+ D2E5 FD 23                inc         iy
 757+ D2E7 C9                   ret
 758+ D2E8              ;--------------------------------------------------------------------------------------------------------
 759+ D2E8              ;;;     Byte 0 = X magnitide with origin at middle of ship
 760+ D2E8              ;;;     Byte 1 = Y magnitide with origin at middle of ship
 761+ D2E8              ;;;     Byte 2 = Z magnitide with origin at middle of ship
 762+ D2E8              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
 763+ D2E8              CopyNodeToXX15:
 764+ D2E8                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 764+ D2E8 7E          >                        ld       a,(hl)
 764+ D2E9 32 E4 C0    >                        ld       (UBnkXScaled),a
 765+ D2EC 23                   inc         hl
 766+ D2ED                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 766+ D2ED 7E          >                        ld       a,(hl)
 766+ D2EE 32 E6 C0    >                        ld       (UBnkYScaled),a
 767+ D2F1 23                   inc         hl
 768+ D2F2                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 768+ D2F2 7E          >                        ld       a,(hl)
 768+ D2F3 32 E8 C0    >                        ld       (UBnkZScaled),a
 769+ D2F6 23                   inc         hl
 770+ D2F7              PopulateXX15SignBits:
 771+ D2F7              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
 772+ D2F7 7E                   ld          a,(hl)
 773+ D2F8 4F                   ld          c,a                                 ; copy sign and visibility to c
 774+ D2F9 47                   ld          b,a
 775+ D2FA E6 80                and         $80                                 ; keep high 3 bits
 776+ D2FC 32 E5 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 777+ D2FF 78                   ld          a,b
 778+ D300 E6 40                and         $40
 779+ D302 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
 780+ D304 32 E7 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 781+ D307 78                   ld          a,b
 782+ D308 E6 20                and         $20
 783+ D30A CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
 784+ D30C CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
 785+ D30E 32 E9 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 786+ D311 79                   ld          a,c                                 ; returns a with visibility sign byte
 787+ D312 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
 788+ D314 32 33 6A             ld          (varT),a                            ; and store in varT as its needed later
 789+ D317 C9                   ret
 790+ D318
 791+ D318              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 792+ D318              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 793+ D318              ;..............................................................................................................................
 794+ D318              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
 795+ D318              LL48GetScale:
 796+ D318 3A 08 69             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
 797+ D31B 5F                   ld          e,a
 798+ D31C CD E8 D2             call        CopyNodeToXX15
 799+ D31F              LL48GetVertices:
 800+ D31F              LL48GetVertSignAndVisDist:
 801+ D31F                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
 801+ D31F BB          >                        cp      e
 801+ D320 DA 5D D3    >                        jp		c, NodeIsNotVisible
 802+ D323              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
 803+ D323                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
 803+ D323 23          >                    inc         hl                                  ; vertex byte#1
 803+ D324 7E          >                    ld          a,(hl)                              ;
 803+ D325 32 17 69    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
 804+ D328 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
 805+ D329 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
 806+ D32B E5                   push        hl                                  ; we need to save HL                                                        ;;;
 807+ D32C                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
 807+ D32C 21 10 C1    >                    ld          hl,UbnkFaceVisArray
 807+ D32F ED 31       >                    add         hl,a
 807+ D331 7E          >                    ld          a,(hl)
 808+ D332 E1                   pop         hl                                  ;                                                                           ;;;
 809+ D333                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 809+ D333 A7          >                        and     a
 809+ D334 C2 63 D3    >                        jp	    nz,NodeIsVisible
 810+ D337              CheckFace2:                                                                                                                         ;;;
 811+ D337 7A                   ld          a,d                                                                                                             ;;;
 812+ D338 ED 23                swapnib                                                                                                                     ;;;
 813+ D33A E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
 814+ D33C                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 814+ D33C A7          >                        and     a
 814+ D33D C2 63 D3    >                        jp	    nz,NodeIsVisible
 815+ D340              CheckFace3:                                                                                                                         ;;;
 816+ D340                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
 816+ D340 23          >                    inc         hl                                  ; vertex byte#1
 816+ D341 7E          >                    ld          a,(hl)                              ;
 816+ D342 32 17 69    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
 817+ D345 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
 818+ D346 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
 819+ D348 E5                   push        hl                                  ; we need to save HL                                                        ;;;
 820+ D349                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
 820+ D349 21 10 C1    >                    ld          hl,UbnkFaceVisArray
 820+ D34C ED 31       >                    add         hl,a
 820+ D34E 7E          >                    ld          a,(hl)
 821+ D34F E1                   pop         hl                                  ;                                                                           ;;;
 822+ D350                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 822+ D350 A7          >                        and     a
 822+ D351 C2 63 D3    >                        jp	    nz,NodeIsVisible
 823+ D354              CheckFace4:                                                                                                                         ;;;
 824+ D354 7A                   ld          a,d                                                                                                             ;;;
 825+ D355 ED 23                swapnib                                                                                                                     ;;;
 826+ D357 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
 827+ D359                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 827+ D359 A7          >                        and     a
 827+ D35A C2 63 D3    >                        jp	    nz,NodeIsVisible
 828+ D35D              NodeIsNotVisible:                                                                                                                   ;;;
 829+ D35D 01 04 00             ld          bc,4
 830+ D360 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
 831+ D362                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
 832+ D362 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
 833+ D363              NodeIsVisible:
 834+ D363              LL49:
 835+ D363 CD 0A D2             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
 836+ D366 C9                   ret
 837+ D367
 838+ D367                  DISPLAY "Tracing 6", $
 839+ D367
 840+ D367              ProjectNodeToEye:
 841+ D367 ED 4B E8 C0      ld          bc,(UBnkZScaled)                    ; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 842+ D36B 79               ld          a,c                                 ;  so no need for a negative check
 843+ D36C 32 17 6A         ld          (varQ),a                            ; VarQ = z
 844+ D36F 3A E4 C0         ld          a,(UBnkXScaled)                     ; XX15  \ rolled x lo which is signed
 845+ D372 CD 4C 74         call        DIV16Amul256dCUNDOC                 ; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 846+ D375 3A E5 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 847+ D378                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 847+ D378 CB 7F       >                        bit 	7,a
 847+ D37A C2 85 D3    >                        jp      nz,EyeNegativeXPoint
 848+ D37D              EyePositiveXPoint:                                  ; x was positive result
 849+ D37D 2E 80            ld          l,ScreenCenterX                     ;
 850+ D37F 26 00            ld          h,0
 851+ D381 09               add         hl,bc                               ; hl = Screen Centre + X
 852+ D382 C3 8C D3         jp          EyeStoreXPoint
 853+ D385              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 854+ D385 2E 80            ld          l,ScreenCenterX
 855+ D387 26 00            ld          h,0
 856+ D389                  ClearCarryFlag
 856+ D389 B7          >                        or a
 857+ D38A ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 858+ D38C              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 859+ D38C EB               ex          de,hl
 860+ D38D FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 861+ D390 FD 72 01         ld          (iy+1),d                            ; Update X Point
 862+ D393              EyeProcessYPoint:
 863+ D393 ED 4B E8 C0      ld          bc,(UBnkZScaled)                    ; Now process Y co-ordinate
 864+ D397 79               ld          a,c
 865+ D398 32 17 6A         ld          (varQ),a
 866+ D39B 3A E6 C0         ld          a,(UBnkYScaled)                     ; XX15  \ rolled x lo
 867+ D39E CD 4C 74         call        DIV16Amul256dCUNDOC                 ; a = Y scaled * 256 / zscaled
 868+ D3A1 3A E7 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 869+ D3A4                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 869+ D3A4 CB 7F       >                        bit 	7,a
 869+ D3A6 C2 B1 D3    >                        jp      nz,EyeNegativeYPoint
 870+ D3A9              EyePositiveYPoint:                                  ; Y is positive so above the centre line
 871+ D3A9 2E 60            ld          l,ScreenCenterY
 872+ D3AB                  ClearCarryFlag
 872+ D3AB B7          >                        or a
 873+ D3AC ED 42            sbc         hl,bc                               ; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 874+ D3AE C3 B6 D3         jp          EyeStoreYPoint
 875+ D3B1              EyeNegativeYPoint:                                  ; this bit is only 8 bit aware TODO FIX
 876+ D3B1 2E 60            ld          l,ScreenCenterY
 877+ D3B3 26 00            ld          h,0
 878+ D3B5 09               add         hl,bc                               ; hl = ScreenCenterY + Y as negative is below the center of screen
 879+ D3B6              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 880+ D3B6 EB               ex          de,hl
 881+ D3B7 FD 73 02         ld          (iy+2),e                            ; Update Y Point
 882+ D3BA FD 72 03         ld          (iy+3),d                            ; Update Y Point
 883+ D3BD C9               ret
 884+ D3BE              ; ---------------------------------------------------------------------------------------------------------------------------------
 885+ D3BE                          INCLUDE "../../Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ApplyMyRollAndPitch.asm
   1++D3BE
   2++D3BE              ; Full version
   3++D3BE              ; 1. K2 = y - alpha * x
   4++D3BE              ; 2. z = z + beta * K2
   5++D3BE              ; 3. y = K2 - beta * z
   6++D3BE              ; 4. x = x + alpha * y
   7++D3BE
   8++D3BE                  IFDEF USE_24BIT_ROLL_AND_PITCH
   9++D3BE ~            UBnK24BitAlphaMulX      DB $00,$00, $00, $00
  10++D3BE ~            UBnK24BitAlphaMulY      DB $00,$00, $00, $00
  11++D3BE ~            UBnK24BitAlphaMulZ      DB $00,$00, $00, $00
  12++D3BE ~            UBnK24BitBetaMulZ       DB $00,$00, $00, $00
  13++D3BE ~            UBnK24BitBetaMulY       DB $00,$00, $00, $00
  14++D3BE ~            UBnK24BitK2             DS 3
  15++D3BE ~
  16++D3BE ~            PitchBlock              DB  1
  17++D3BE ~
  18++D3BE ~            ApplyMyRollAndPitch:    ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  19++D3BE ~            .CheckForRoll:          and		a
  20++D3BE ~            						call	nz,UBnKRoll_24Bit
  21++D3BE ~            .CheckForPitch:			ld		a,(BETA)
  22++D3BE ~            						and		a
  23++D3BE ~            						call	nz,UBnKPitch_24Bit
  24++D3BE ~            .ApplySpeed:            ld      a,(DELTA)                   ; BCH = - Delta
  25++D3BE ~                                    and     a
  26++D3BE ~                                    jp      z,.ApplyOrientation
  27++D3BE ~            						;ReturnIfAIsZero
  28++D3BE ~            						ld      c,0                         ;
  29++D3BE ~            						ld      h,a                         ;
  30++D3BE ~            						ld      b,$80                       ;
  31++D3BE ~            						ld      de,(UBnKzhi)                ; DEL = z position
  32++D3BE ~            						ld      a,(UBnKzlo)                 ; .
  33++D3BE ~            						ld      l,a                         ; .
  34++D3BE ~            						call    AddBCHtoDELsigned           ; update speed
  35++D3BE ~            						ld      (UBnKzhi),DE                ; write back to zpos
  36++D3BE ~            						ld      a,l
  37++D3BE ~                                    ld      (UBnKzlo),a                ;
  38++D3BE ~            .ApplyOrientation:      ld      a,(ALPHA)
  39++D3BE ~                                    ld      hl,BETA
  40++D3BE ~                                    or      (hl)
  41++D3BE ~                                    ret     z
  42++D3BE ~                                    ld      a,(PitchBlock)
  43++D3BE ~                                    and     a
  44++D3BE ~                                    ret     z
  45++D3BE ~                                    ;break
  46++D3BE ~            PitchBreak:             ld      ix,UBnkrotmatSidevX
  47++D3BE ~            DebugAlert1:            ld      a,(ix+1)
  48++D3BE ~                                    ld      d,(ix+3)
  49++D3BE ~                                    ld      e,(ix+5)
  50++D3BE ~                                    or     d
  51++D3BE ~                                    or     e
  52++D3BE ~                                    and     $7F
  53++D3BE ~                                    jp      nz,.NoBreak
  54++D3BE ~                                    break
  55++D3BE ~            .NoBreak
  56++D3BE ~
  57++D3BE ~                                    call    ApplyRollAndPitchToIX
  58++D3BE ~            DebugAlert2:             ld      a,(ix+1)
  59++D3BE ~                                    ld      d,(ix+3)
  60++D3BE ~                                    ld      e,(ix+5)
  61++D3BE ~                                    or     d
  62++D3BE ~                                    or     e
  63++D3BE ~                                    and     $7F
  64++D3BE ~                                    jp      nz,.NoBreak
  65++D3BE ~                                    break
  66++D3BE ~            .NoBreak
  67++D3BE ~                                    ld      ix,UBnkrotmatRoofvX
  68++D3BE ~                                    call    ApplyRollAndPitchToIX
  69++D3BE ~                                    ld      ix,UBnkrotmatNosevX
  70++D3BE ~                                    call    ApplyRollAndPitchToIX
  71++D3BE ~                                    ret
  72++D3BE ~
  73++D3BE ~            UBnKRoll_24Bit:			ld      a,(ALPHA)                   ; get roll value
  74++D3BE ~            						and 	$7F
  75++D3BE ~            						ld      d,a                         ; .
  76++D3BE ~            						ld      a,(UBnKylo)                ; HLE = x sgn, hi, lo
  77++D3BE ~            						ld      e,a                         ; .
  78++D3BE ~            						ld      hl,(UBnKyhi)               ; .
  79++D3BE ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  80++D3BE ~            						ld		a,l
  81++D3BE ~            						ld		(UBnK24BitAlphaMulY),a			; save result
  82++D3BE ~            						ld		(UBnK24BitAlphaMulY+1),de		; save result
  83++D3BE ~            						ld      a,(ALPHA)                   ; get roll value
  84++D3BE ~            						and 	$7F
  85++D3BE ~            						ld      d,a                         ; .
  86++D3BE ~            						ld      a,(UBnKxlo)                ; HLE = x sgn, hi, lo
  87++D3BE ~            						ld      e,a                         ; .
  88++D3BE ~            						ld      hl,(UBnKxhi)               ; .
  89++D3BE ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  90++D3BE ~            						ld		a,l
  91++D3BE ~            						ld		(UBnK24BitAlphaMulX),a			; save result
  92++D3BE ~            						ld		(UBnK24BitAlphaMulX+1),de		; save result
  93++D3BE ~            						ld		a,(ALPHA)
  94++D3BE ~            						and		$80
  95++D3BE ~            						jp		z,.RollingRight
  96++D3BE ~            .RollingLeft:			ld		ix,UBnKxlo
  97++D3BE ~            						ld		iy,UBnK24BitAlphaMulY
  98++D3BE ~            						call	AddAtIXtoAtIY24Signed
  99++D3BE ~            						ld		ix,UBnKylo
 100++D3BE ~            						ld		iy,UBnK24BitAlphaMulX
 101++D3BE ~            						call	SubAtIXtoAtIY24Signed
 102++D3BE ~            						ret
 103++D3BE ~            .RollingRight:			ld		ix,UBnKxlo
 104++D3BE ~            						ld		iy,UBnK24BitAlphaMulY
 105++D3BE ~            						call	SubAtIXtoAtIY24Signed
 106++D3BE ~            						ld		ix,UBnKylo
 107++D3BE ~            						ld		iy,UBnK24BitAlphaMulX
 108++D3BE ~            						call	AddAtIXtoAtIY24Signed
 109++D3BE ~            						ret
 110++D3BE ~
 111++D3BE ~            UBnKPitch_24Bit:		ld      a,(BETA)                   ; get roll value
 112++D3BE ~            						and 	$7F
 113++D3BE ~            						ld      d,a                         ; .
 114++D3BE ~            						ld      a,(UBnKylo)                ; HLE = x sgn, hi, lo
 115++D3BE ~            						ld      e,a                         ; .
 116++D3BE ~            						ld      hl,(UBnKyhi)               ; .
 117++D3BE ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 118++D3BE ~            						ld		a,l
 119++D3BE ~            						ld		(UBnK24BitBetaMulY),a			; save result
 120++D3BE ~            						ld		(UBnK24BitBetaMulY+1),de		; save result
 121++D3BE ~            						ld      a,(BETA)                   ; get roll value
 122++D3BE ~            						and 	$7F
 123++D3BE ~            						ld      d,a                         ; .
 124++D3BE ~            						ld      a,(UBnKzlo)                ; HLE = x sgn, hi, lo
 125++D3BE ~            						ld      e,a                         ; .
 126++D3BE ~            						ld      hl,(UBnKzhi)               ; .
 127++D3BE ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 128++D3BE ~            						ld		a,l
 129++D3BE ~            						ld		(UBnK24BitBetaMulZ),a			; save result
 130++D3BE ~            						ld		(UBnK24BitBetaMulZ+1),de		; save result
 131++D3BE ~            						ld		a,(BETA)
 132++D3BE ~            						and		$80
 133++D3BE ~            						jp		z,.Climbing
 134++D3BE ~            .Diving:				ld		ix,UBnKylo
 135++D3BE ~            						ld		iy,UBnK24BitBetaMulZ
 136++D3BE ~            						call	AddAtIXtoAtIY24Signed
 137++D3BE ~            						ld		ix,UBnKzlo
 138++D3BE ~            						ld		iy,UBnK24BitBetaMulY
 139++D3BE ~            						call	SubAtIXtoAtIY24Signed
 140++D3BE ~            						ret
 141++D3BE ~            .Climbing:		     	ld		ix,UBnKylo
 142++D3BE ~            						ld		iy,UBnK24BitBetaMulZ
 143++D3BE ~            						call	SubAtIXtoAtIY24Signed
 144++D3BE ~            						ld		ix,UBnKzlo
 145++D3BE ~            						ld		iy,UBnK24BitBetaMulY
 146++D3BE ~            						call	AddAtIXtoAtIY24Signed
 147++D3BE ~            						ret
 148++D3BE ~
 149++D3BE                  ELSE
 150++D3BE              APPequPosPlusAPP:       MACRO    Position, PositionSign
 151++D3BE ~                                    push    bc
 152++D3BE ~                                    ld      c,a                         ; save original value of a into c
 153++D3BE ~                                    ld      a,(PositionSign)
 154++D3BE ~                                    ld      b,a
 155++D3BE ~                                    ld      a,c
 156++D3BE ~                                    xor     b                           ; a = a xor x postition sign
 157++D3BE ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 158++D3BE ~            ; Signs are the same to we just add and take which ever sign
 159++D3BE ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 160++D3BE ~                                    ld      hl,(Position)
 161++D3BE ~                                    add     hl,de
 162++D3BE ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 163++D3BE ~                                    ld      a,c                         ; and a = original sign as they were both the same
 164++D3BE ~                                    pop     bc
 165++D3BE ~                                    ret
 166++D3BE ~            ; Signs are opposite so we subtract
 167++D3BE ~            .MV50:                  ld      de,(varPp1)
 168++D3BE ~                                    ld      hl,(Position)
 169++D3BE ~                                    or      a
 170++D3BE ~                                    sbc     hl,de
 171++D3BE ~                                    jr      c,.MV51                     ; if the result was negative then negate result
 172++D3BE ~                                    ld      a,c                         ; get back the original sign
 173++D3BE ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
 174++D3BE ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 175++D3BE ~                                    pop     bc
 176++D3BE ~                                    ret
 177++D3BE ~            .MV51:                  NegHL
 178++D3BE ~                                    ld      (varPp1),hl
 179++D3BE ~                                    ld      a,c                         ; the original sign will still be good
 180++D3BE ~                                    pop     bc
 181++D3BE ~                                    ret
 182++D3BE                                      ENDM
 183++D3BE
 184++D3BE
 185++D3BE              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
 185++D3BE C5          >                        push    bc
 185++D3BF 4F          >                        ld      c,a                         ; save original value of a into c
 185++D3C0 3A 22 C0    >                        ld      a,(UBnKxsgn)
 185++D3C3 47          >                        ld      b,a
 185++D3C4 79          >                        ld      a,c
 185++D3C5 A8          >                        xor     b                           ; a = a xor x postition sign
 185++D3C6 FA D7 D3    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 185++D3C9             >; Signs are the same to we just add and take which ever sign
 185++D3C9 ED 5B 18 69 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 185++D3CD 2A 20 C0    >                        ld      hl,(UBnKxlo)
 185++D3D0 19          >                        add     hl,de
 185++D3D1 22 18 69    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 185++D3D4 79          >                        ld      a,c                         ; and a = original sign as they were both the same
 185++D3D5 C1          >                        pop     bc
 185++D3D6 C9          >                        ret
 185++D3D7             >; Signs are opposite so we subtract
 185++D3D7 ED 5B 18 69 >.MV50:                  ld      de,(varPp1)
 185++D3DB 2A 20 C0    >                        ld      hl,(UBnKxlo)
 185++D3DE B7          >                        or      a
 185++D3DF ED 52       >                        sbc     hl,de
 185++D3E1 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
 185++D3E3 79          >                        ld      a,c                         ; get back the original sign
 185++D3E4 22 18 69    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
 185++D3E7 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 185++D3E9 C1          >                        pop     bc
 185++D3EA C9          >                        ret
 185++D3EB             >.MV51:                  NegHL
 185++D3EB AF          >                    xor a
 185++D3EC 95          >                    sub l
 185++D3ED 6F          >                    ld l,a
 185++D3EE 9F          >                    sbc a,a
 185++D3EF 94          >                    sub h
 185++D3F0 67          >                    ld h,a
 185++D3F1 22 18 69    >                        ld      (varPp1),hl
 185++D3F4 79          >                        ld      a,c                         ; the original sign will still be good
 185++D3F5 C1          >                        pop     bc
 185++D3F6 C9          >                        ret
 186++D3F7
 187++D3F7              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
 187++D3F7 C5          >                        push    bc
 187++D3F8 4F          >                        ld      c,a                         ; save original value of a into c
 187++D3F9 3A 25 C0    >                        ld      a,(UBnKysgn)
 187++D3FC 47          >                        ld      b,a
 187++D3FD 79          >                        ld      a,c
 187++D3FE A8          >                        xor     b                           ; a = a xor x postition sign
 187++D3FF FA 10 D4    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 187++D402             >; Signs are the same to we just add and take which ever sign
 187++D402 ED 5B 18 69 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 187++D406 2A 23 C0    >                        ld      hl,(UBnKylo)
 187++D409 19          >                        add     hl,de
 187++D40A 22 18 69    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 187++D40D 79          >                        ld      a,c                         ; and a = original sign as they were both the same
 187++D40E C1          >                        pop     bc
 187++D40F C9          >                        ret
 187++D410             >; Signs are opposite so we subtract
 187++D410 ED 5B 18 69 >.MV50:                  ld      de,(varPp1)
 187++D414 2A 23 C0    >                        ld      hl,(UBnKylo)
 187++D417 B7          >                        or      a
 187++D418 ED 52       >                        sbc     hl,de
 187++D41A 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
 187++D41C 79          >                        ld      a,c                         ; get back the original sign
 187++D41D 22 18 69    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
 187++D420 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 187++D422 C1          >                        pop     bc
 187++D423 C9          >                        ret
 187++D424             >.MV51:                  NegHL
 187++D424 AF          >                    xor a
 187++D425 95          >                    sub l
 187++D426 6F          >                    ld l,a
 187++D427 9F          >                    sbc a,a
 187++D428 94          >                    sub h
 187++D429 67          >                    ld h,a
 187++D42A 22 18 69    >                        ld      (varPp1),hl
 187++D42D 79          >                        ld      a,c                         ; the original sign will still be good
 187++D42E C1          >                        pop     bc
 187++D42F C9          >                        ret
 188++D430
 189++D430              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
 189++D430 C5          >                        push    bc
 189++D431 4F          >                        ld      c,a                         ; save original value of a into c
 189++D432 3A 28 C0    >                        ld      a,(UBnKzsgn)
 189++D435 47          >                        ld      b,a
 189++D436 79          >                        ld      a,c
 189++D437 A8          >                        xor     b                           ; a = a xor x postition sign
 189++D438 FA 49 D4    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 189++D43B             >; Signs are the same to we just add and take which ever sign
 189++D43B ED 5B 18 69 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 189++D43F 2A 26 C0    >                        ld      hl,(UBnKzlo)
 189++D442 19          >                        add     hl,de
 189++D443 22 18 69    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 189++D446 79          >                        ld      a,c                         ; and a = original sign as they were both the same
 189++D447 C1          >                        pop     bc
 189++D448 C9          >                        ret
 189++D449             >; Signs are opposite so we subtract
 189++D449 ED 5B 18 69 >.MV50:                  ld      de,(varPp1)
 189++D44D 2A 26 C0    >                        ld      hl,(UBnKzlo)
 189++D450 B7          >                        or      a
 189++D451 ED 52       >                        sbc     hl,de
 189++D453 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
 189++D455 79          >                        ld      a,c                         ; get back the original sign
 189++D456 22 18 69    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
 189++D459 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 189++D45B C1          >                        pop     bc
 189++D45C C9          >                        ret
 189++D45D             >.MV51:                  NegHL
 189++D45D AF          >                    xor a
 189++D45E 95          >                    sub l
 189++D45F 6F          >                    ld l,a
 189++D460 9F          >                    sbc a,a
 189++D461 94          >                    sub h
 189++D462 67          >                    ld h,a
 189++D463 22 18 69    >                        ld      (varPp1),hl
 189++D466 79          >                        ld      a,c                         ; the original sign will still be good
 189++D467 C1          >                        pop     bc
 189++D468 C9          >                        ret
 190++D469
 191++D469              ; rollWork holds Alpha intermidate results
 192++D469 00 00 00     rollWork      DS 3
 193++D46C              rollWorkp1    equ rollWork
 194++D46C              rollWorkp2    equ rollWork+1
 195++D46C              rollWorkp3    equ rollWork+2
 196++D46C
 197++D46C              ;----------------------------------------------------------------------------------------------------------------------------------
 198++D46C              ; based on MVEIT part 4 of 9
 199++D46C 3A 31 69     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
 200++D46F 21 25 69                             ld      hl,BET1                     ; and pitch
 201++D472 B6                                   or      (hl)
 202++D473 CA 31 D5                             jp      z,.NoRotation               ; if both zero then don't compute
 203++D476              ; If the xsgn,ysng or zsng are not 0 or $80 then we use 24 bit routines
 204++D476              ; else we can just continue to use 16 bit
 205++D476                                     ;jp      ApplyMyRollAndPitch24Bit
 206++D476
 207++D476 3A 22 C0     .CheckFor24Bit:         ld      a,(UBnKxsgn)
 208++D479 21 25 C0                             ld      hl,UBnKysgn
 209++D47C B6                                   or      (hl)
 210++D47D 21 28 C0                             ld      hl,UBnKzsgn
 211++D480 B6                                   or      (hl)
 212++D481 E6 7F                                and     $7F
 213++D483 C2 BB D5                             jp      nz,ApplyMyRollAndPitch24Bit
 214++D486                                      ;break
 215++D486              ; P[210] = x * alph (we use P[2]P[1] later as result/256
 216++D486 5F           .Not24BitCalcs:         ld      e,a                         ; e = roll magnitude
 217++D487 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
 218++D48A CD 3E 6F                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
 219++D48D 32 19 69                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
 220++D490 22 17 69                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
 221++D493              ; A = Flip sign
 222++D493 3A 32 69                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
 223++D496 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
 224++D499 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
 225++D49A              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
 226++D49A CD F7 D3                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
 227++D49D              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
 228++D49D 32 6B D4                             ld      (rollWorkp3),a               ; k2+3 = sign of result
 229++D4A0 22 69 D4                             ld      (rollWorkp1),hl             ; k2+1,2 = result
 230++D4A3              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
 231++D4A3 3A 25 69                             ld      a,(BET1)                    ; a = magnitude of pitch
 232++D4A6 5F                                   ld      e,a
 233++D4A7 CD 3E 6F                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
 234++D4AA 32 19 69                             ld      (varPp2),a                   ; save highest byte in P2
 235++D4AD 22 17 69                             ld      (varP),hl
 236++D4B0              ; Fetch sign of previosu cal and xor with BETA inverted
 237++D4B0 3A 6B D4                             ld      a,(rollWorkp3)
 238++D4B3 5F                                   ld      e,a
 239++D4B4 3A 26 69                             ld      a,(BET2)
 240++D4B7 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 241++D4B8              ; Z = P[210] =Z + APP
 242++D4B8 CD 30 D4                             call    APPequZPosPlusAPP           ; MVT6
 243++D4BB 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
 244++D4BE 22 26 C0                             ld      (UBnKzlo),hl
 245++D4C1              ; A[P1]P[0] = z * Beta
 246++D4C1 3A 25 69                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 247++D4C4 5F                                   ld      e,a
 248++D4C5 CD 3E 6F                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 249++D4C8 32 19 69                             ld      (varPp2),a                  ; P2 = high byte of result
 250++D4CB 22 17 69                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 251++D4CE              ; A xor BET2,Zsign
 252++D4CE 3A 6B D4                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 253++D4D1 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 254++D4D4 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 255++D4D5 3A 26 69                             ld      a,(BET2)                    ;
 256++D4D8 AB                                   xor     e                           ;
 257++D4D9 5F                                   ld      e,a                         ; now xor it with z sign too
 258++D4DA 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 259++D4DD AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 260++D4DE F2 ED D4                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 261++D4E1 2A 18 69                             ld      hl,(varPp1)
 262++D4E4 ED 5B 69 D4                          ld      de,(rollWorkp1)
 263++D4E8 B7                                   or      a
 264++D4E9 19                                   add     hl,de
 265++D4EA C3 07 D5                             jp      .MV44
 266++D4ED 2A 69 D4     .MV43:                  ld      hl,(rollWorkp1)
 267++D4F0 ED 5B 18 69                          ld      de,(varPp1)
 268++D4F4 B7                                   or      a
 269++D4F5 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 270++D4F7 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 271++D4F9                                      NegHL
 271++D4F9 AF          >                    xor a
 271++D4FA 95          >                    sub l
 271++D4FB 6F          >                    ld l,a
 271++D4FC 9F          >                    sbc a,a
 271++D4FD 94          >                    sub h
 271++D4FE 67          >                    ld h,a
 272++D4FF 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and Univs are sign + 23 bit xpos
 273++D502 EE 80                                xor     SignOnly8Bit
 274++D504 32 25 C0                             ld      (UBnKysgn),a
 275++D507              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 276++D507 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 277++D50A 3A 31 69                             ld      a,(ALP1)                    ; get roll magnitude
 278++D50D 5F                                   ld      e,a
 279++D50E 2A 23 C0                             ld      hl,(UBnKylo)
 280++D511 CD 3E 6F                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 281++D514 32 19 69                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 282++D517 22 17 69                             ld      (varP),hl
 283++D51A 3A 33 69                             ld      a,(ALP2FLIP)
 284++D51D 5F                                   ld      e,a
 285++D51E 3A 25 C0                             ld      a,(UBnKysgn)
 286++D521 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 287++D522 CD BE D3                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 288++D525 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 289++D528 22 20 C0                             ld      (UBnKxlo),hl
 290++D52B                                      ;break
 291++D52B CD 4A D5                             call    ApplyMyRollToOrientation
 292++D52E CD 79 D5                             call    ApplyMyPitchToOrientation
 293++D531                                      ; if its not a Univ then apply to local orientation
 294++D531 3A 11 6A     .NoRotation:            ld      a,(DELTA)                   ; get speed
 295++D534 16 00                                ld      d,0
 296++D536 5F                                   ld      e,a                         ; de = speed in low byte
 297++D537 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 298++D53A 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 299++D53D 47                                   ld      b,a                         ;
 300++D53E 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 301++D540 CD 33 00                             call    ADDHLDESignBC               ; update speed
 302++D543 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 303++D546 32 28 C0                             ld      (UBnKzsgn),a                ;
 304++D549 C9                                   ret
 305++D54A
 306++D54A                             DISPLAY "TODO: Looks like pitch is always being applied as positive"
 307++D54A              ApplyMyRollToOrientation:MMUSelectMathsBankedFns
 307++D54A ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 308++D54E 3A 30 69                             ld      a,(ALPHA)
 308++D551 DD 21 36 C0    ld ix,UBnkrotmatNosevX
 308++D555 FD 21 38 C0    ld iy,UBnkrotmatNosevY
 308++D559 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyRollToNosev:
 309++D55C 3A 30 69                             ld      a,(ALPHA)
 309++D55F DD 21 2A C0    ld ix,UBnkrotmatSidevX
 309++D563 FD 21 2C C0    ld iy,UBnkrotmatSidevY
 309++D567 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyRollToSidev:
 310++D56A 3A 30 69                             ld      a,(ALPHA)
 310++D56D DD 21 30 C0    ld ix,UBnkrotmatRoofvX
 310++D571 FD 21 32 C0    ld iy,UBnkrotmatRoofvY
 310++D575 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyRollToRoofv:
 311++D578 C9                                   ret
 312++D579
 313++D579              ApplyMyPitchToOrientation:
 314++D579 3A 23 69                             ld      a,(BETA)
 314++D57C DD 21 3A C0    ld ix,UBnkrotmatNosevZ
 314++D580 FD 21 38 C0    ld iy,UBnkrotmatNosevY
 314++D584 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyPitchToNosev:
 315++D587 3A 23 69                             ld      a,(BETA)
 315++D58A DD 21 2E C0    ld ix,UBnkrotmatSidevZ
 315++D58E FD 21 2C C0    ld iy,UBnkrotmatSidevY
 315++D592 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyPitchToSidev:
 316++D595 3A 23 69                             ld      a,(BETA)
 316++D598 DD 21 34 C0    ld ix,UBnkrotmatRoofvZ
 316++D59C FD 21 32 C0    ld iy,UBnkrotmatRoofvY
 316++D5A0 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyPitchToRoofv:
 317++D5A3 C9                                   ret
 318++D5A4              ;----------------------------------------------------------------------------------------------------------------------------------
 319++D5A4              ; 24 bit version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
 320++D5A4              ; Need to write a test routine for roll and pitchs
 321++D5A4              ; Minsky Roll       Minsky Pitch
 322++D5A4              ;  y -= alpha * x    y -= beta * z
 323++D5A4              ;  x += alpha * y    z += beta * y
 324++D5A4              ; or once combined
 325++D5A4              ;   1. K2 = y - alpha * x
 326++D5A4              ;   2. z = z + beta * K2
 327++D5A4              ;   3. y = K2 - beta * z
 328++D5A4              ;   4. x = x + alpha * y
 329++D5A4              ;----------------------------------------------------------------------------------------------------------------------------------
 330++D5A4              ; Based on non optimised version of Planet pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
 331++D5A4              ; Now at least rolls the correct direction
 332++D5A4 00 00 00 00  UnivAlphaMulX               DB $00,$00, $00, $00
 333++D5A8 00 00 00 00  UnivAlphaMulY               DB $00,$00, $00, $00
 334++D5AC 00 00 00 00  UnivAlphaMulZ               DB $00,$00, $00, $00
 335++D5B0 00 00 00 00  UnivBetaMulZ                DB $00,$00, $00, $00
 336++D5B4 00 00 00 00  UnivBetaMulY                DB $00,$00, $00, $00
 337++D5B8 00 00 00     UnivK2                      DS 3
 338++D5BB
 339++D5BB 3A 30 69     ApplyMyRollAndPitch24Bit: 	 ld     a,(ALPHA)                   ; no roll or pitch, no calc needed
 340++D5BE 21 23 69                                  ld     hl,BETA
 341++D5C1 B6                                        or     (hl)
 342++D5C2 C4 E6 D5                                  call   nz, Univ_Roll_And_Pitch
 343++D5C5              ;.CheckForRoll:              and		a
 344++D5C5              ;							call	nz,Univ_Roll
 345++D5C5              ;.CheckForPitch:				ld		a,(BETA)
 346++D5C5              ;							and		a
 347++D5C5              ;							call	nz,Univ_Pitch
 348++D5C5 3A 11 6A     .ApplySpeed:            	ld      a,(DELTA)                   ; BCH = - Delta
 349++D5C8              							ReturnIfAIsZero
 349++D5C8 A7          >                        and     a
 349++D5C9 C8          >                        ret     z
 350++D5CA 0E 00        							ld      c,0                         ;
 351++D5CC 67           							ld      h,a                         ;
 352++D5CD 06 80        							ld      b,$80                       ;
 353++D5CF ED 5B 27 C0  							ld      de,(UBnKzhi)                ; DEL = z position
 354++D5D3 3A 26 C0     							ld      a,(UBnKzlo)                 ; .
 355++D5D6 6F           							ld      l,a                         ; .
 356++D5D7 CD 14 01     							call    AddBCHtoDELsigned           ; update speed
 357++D5DA ED 53 27 C0  							ld      (UBnKzhi),DE                ; write back to zpos
 358++D5DE 7D           							ld      a,l
 359++D5DF 32 26 C0     							ld      (UBnKzlo),a                ;
 360++D5E2 C9           							ret
 361++D5E3
 362++D5E3              ; Performs minsky rotation
 363++D5E3              ; Joystick left          Joystick right
 364++D5E3              ; ---------------------  ---------------------
 365++D5E3              ; x :=  x      + y / 64  x :=  x -  y / 64  so rather than /64  is z * alpha / 256
 366++D5E3              ; y :=  y      - x /64   y :=  y +  x / 64
 367++D5E3              ;
 368++D5E3              ; Joystick down          Joystick up
 369++D5E3              ; ---------------------  ---------------------
 370++D5E3              ; y :=  y      + z / 64  y :=  y - z / 64
 371++D5E3              ; z :=  z      - y / 64  z :=  z + y / 64
 372++D5E3              ;
 373++D5E3              ; get z, multiply by alpha, pick top 3 bytes with sign
 374++D5E3              ; get x, multiply by alpha, pick top 3 bytes with sign
 375++D5E3              ; if alpha +ve subtract x = x - z adj, z =z + x adj , else x += z adj z -= z adj
 376++D5E3              ; so we can assume 24 bit maths and just do 16 bit multiply of say HL = nosev x [sgn][hi] and de = [0][alpha] by calling AHLequHLmulE
 377++D5E3              ; for roll
 378++D5E3              ; nosev_y = nosev_y - alpha * nosev_x_hi
 379++D5E3              ; nosev_x = nosev_x + alpha * nosev_y_hi
 380++D5E3              ; and for pitch
 381++D5E3              ; nosev_y = nosev_y - beta * nosev_z_hi
 382++D5E3              ; nosev_z = nosev_z + beta * nosev_y_hi
 383++D5E3              ;  1. K2 = y - alpha * x
 384++D5E3              ;   2. z = z + beta * K2
 385++D5E3              ;   3. y = K2 - beta * z
 386++D5E3              ;   4. x = x + alpha * y
 387++D5E3              ;
 388++D5E3              ;   1a. K [3 2 1 0] = -alpha * (x sign hi lo)
 389++D5E3              ;   1b. K [3 2 1]   = y sign hi lo + K [321] (in effect y minus (alpha * x / 256)
 390++D5E3              ;   1c. K2 [3 2 1]  = k [3 2 1 ]
 391++D5E3              ;   2a. K[3 2 1 0]  = k2 [3 2 1] * beta
 392++D5E3              ;   2b. z sign hi lo += K[3 2 1] ( in effect z += (beta * K2)/256
 393++D5E3              ;   3a. K [3 2 1 0] = z sign hi lo * -beta
 394++D5E3              ;   3b. y sign hi lo = K2 [3 2 1] - K [3 2 1] ( in effect K2 - (beta * z) /256
 395++D5E3              ;
 396++D5E3              ;   4. x = x + alpha * y
 397++D5E3
 398++D5E3
 399++D5E3
 400++D5E3              ;-- Q = - ALPHA
 401++D5E3              ;-- A P[1 0] = xsign xhi xlo
 402++D5E3              ;-- call K[3 2 1 0] = A P[1 0] * Q which means  K(3 2 1) = (A P+1 P) * Q / 256 = x * -alpha / 256 = - alpha * x / 256
 403++D5E3              ;-- call K[3 2 1] = ysign hi lo + K[3 2 1] (= y - alpha * x / 256)
 404++D5E3              ;-- K2 [3 2 1 ] = K [ 3 2 1 ]
 405++D5E3              ;-- A P [1 0]   = K [3 2 1]
 406++D5E3              ;-- Q = BETA
 407++D5E3              ;-- K[3 2 1 0] = A P[1 0] * Q
 408++D5E3              ;-- K3[3 2 1] = z sign hi lo + K[3 2 1]
 409++D5E3              ;-- A P [1 0] = -K [3 2 1]
 410++D5E3              ;-- z sign hi lo = K[3 2 1]
 411++D5E3              ;-- K[3 2 1 0] = A P[1 0] * Q
 412++D5E3              ;-- T = K[3] sign bit
 413++D5E3              ;-- A = K[3] sign bit xor K2[3]
 414++D5E3              ;-- if positive A yhi lo - = K [3 2 1 0] + K2[3 2 1 0] so A yhi ylo = K + K2 /256 as we abandon low byte
 415++D5E3              ;-- if negative A yhi lo = (K - k2 )/256
 416++D5E3              ;-- A = A xor T
 417++D5E3              ;-- y sign = A
 418++D5E3              ;-- Q = alpha
 419++D5E3              ;-- A P(1 0) = y sign hi lo
 420++D5E3              ;-- K[3 2 1 0 ] A P[1 0] * Q
 421++D5E3              ;-- x sign hi lo = K[3 2 1] = xsign hi lo * K[3 2 1]
 422++D5E3
 423++D5E3 00 00 00     K2      DS  3
 424++D5E6
 425++D5E6 3A 30 69     Univ_Roll_And_Pitch:	    ld      a,(ALPHA)                   ; get roll value
 426++D5E9              ;** 1. K2 = y - alpha * x **************************************
 427++D5E9              ;-- DEL = alpha * (x sign hi lo) /256
 428++D5E9 57           							ld      d,a                         ; d = alpha
 429++D5EA 3A 20 C0     							ld      a,(UBnKxlo)                 ; HLE = x sgn, hi, lo
 430++D5ED 5F           							ld      e,a                         ; .
 431++D5EE 2A 21 C0     							ld      hl,(UBnKxhi)                ; hl = UBnKchi sgn
 432++D5F1 CD 0D 70     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * alpha / 256
 433++D5F4              ;-- DEL = K2 = y - alpha * x
 434++D5F4 42 4B                                    ld      bc,de                       ; transfer to BCH for now
 435++D5F6 65                                       ld      h,l
 436++D5F7 ED 5B 24 C0                              ld      de,(UBnKyhi)
 437++D5FB 3A 23 C0                                 ld      a,(UBnKylo)
 438++D5FE 6F                                       ld      l,a
 439++D5FF CD 10 01                                 call    SubBCHfromDELsigned
 440++D602 ED 53 E4 D5                              ld      (K2+1),de
 441++D606 7D                                       ld      a,l
 442++D607 32 E3 D5                                 ld      (K2),a
 443++D60A              ;** 2. z = z + beta * K2 ***************************************
 444++D60A              ;-- HLE = DEL ..................................................
 445++D60A EB                                       ex      de,hl                       ; will set hl to de and e to l in one go
 446++D60B              ;-- DELC = beta * HLE, i.e. beta * K2
 447++D60B 3A 23 69                                 ld      a,(BETA)
 448++D60E 57                                       ld      d,a
 449++D60F CD 0D 70                                 call    mulHLEbyDSigned             ; DELC = beta * K2
 450++D612              ;-- DEL = z + DEL, i.e. z + Beta * K2 /256
 451++D612 ED 4B 27 C0                              ld      bc,(UBnKzhi)                ; BCH = z
 452++D616 3A 26 C0                                 ld      a,(UBnKzlo)                 ; .
 453++D619 67                                       ld      h,a                         ; .
 454++D61A CD 14 01                                 call    AddBCHtoDELsigned           ; DEL =z + (beta * K2)/256
 455++D61D ED 53 27 C0                              ld      (UBnKzhi),de                ; and save to Z
 456++D621 7D                                       ld      a,l                         ; .
 457++D622 32 26 C0                                 ld      (UBnKzlo),a                 ; .
 458++D625              ;** 3. y = K2 - beta * z ***************************************
 459++D625              ;-- DEL = beta * z / 256
 460++D625 3A 23 69                                 ld      a,(BETA)                    ; get pitch value
 461++D628 57           							ld      d,a                         ; d = pitch
 462++D629 3A 26 C0     							ld      a,(UBnKzlo)                 ; HLE = z sgn, hi, lo
 463++D62C 5F           							ld      e,a                         ; .
 464++D62D 2A 27 C0     							ld      hl,(UBnKzhi)                ; hl = UBnKchi sgn
 465++D630 CD 0D 70     							call    mulHLEbyDSigned             ; DELC = z * beta, so DEL = z * beta / 256
 466++D633              ;-- BCH = DEL ..................................................
 467++D633 42 4B                                    ld      bc,de                       ; transfer to BCH for now
 468++D635 65                                       ld      h,l
 469++D636              ;-- y = DEL = K2 - beta * z = DEL - BCH
 470++D636 ED 5B E4 D5                              ld      de,(K2+1)                   ; del = K2
 471++D63A 3A E3 D5                                 ld      a,(K2)                      ; .
 472++D63D 6F                                       ld      l,a                         ; .
 473++D63E CD 10 01                                 call    SubBCHfromDELsigned         ; .
 474++D641 ED 53 24 C0                              ld      (UBnKyhi),de                ; and save to y
 475++D645 7D                                       ld      a,l                         ; .
 476++D646 32 23 C0                                 ld      (UBnKylo),a                 ; .
 477++D649              ;** 4. x = x + alpha * y ***************************************
 478++D649              ;-- DEL = alpha * y
 479++D649 3A 30 69                                 ld      a,(ALPHA)                   ; get roll value
 480++D64C              ;-- DEL = alpha * (y sign hi lo) /256
 481++D64C 57           							ld      d,a                         ; d = alpha
 482++D64D 3A 23 C0     							ld      a,(UBnKylo)                 ; HLE = y sgn, hi, lo
 483++D650 5F           							ld      e,a                         ; .
 484++D651 2A 24 C0     							ld      hl,(UBnKyhi)                ; hl = UBnKyhi sgn
 485++D654 CD 0D 70     							call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256
 486++D657              ;-- DEL = x + alpha * y
 487++D657 42 4B                                    ld      bc,de                       ; transfer to BCH for now
 488++D659 65                                       ld      h,l                         ; .
 489++D65A ED 5B 21 C0                              ld      de,(UBnKxhi)                ; del = x
 490++D65E 3A 20 C0                                 ld      a,(UBnKxlo)                 ; .
 491++D661 6F                                       ld      l,a                         ; .
 492++D662 CD 14 01                                 call    AddBCHtoDELsigned           ; del = del + bch = x + alpha * y
 493++D665 ED 53 21 C0                              ld      (UBnKxhi),de                ; and save to x
 494++D669 7D                                       ld      a,l                         ; .
 495++D66A 32 20 C0                                 ld      (UBnKxlo),a                 ; .
 496++D66D              .ApplyRollToRight:          ;call    ApplyMyRollToOrientation
 497++D66D CD 79 D5     .ApplyPitchToClimb:         call    ApplyMyPitchToOrientation
 498++D670                                        ;  call    TidyVectorsIX ; doesn't work
 499++D670 C9           							ret
 500++D671                  ENDIF
 501++D671
# file closed: ../../Tests/Vectors/../../Universe/Ships/ApplyMyRollAndPitch.asm
 886+ D671                          INCLUDE "../../Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ApplyShipRollAndPitch.asm
   1++D671
   2++D671
   3++D671              ;----------------------------------------------------------------------------------------------------------------------------------
   4++D671              ; based on MVEIT part 4 of 9
   5++D671              ; x and z counters are proper 2's c values
   6++D671 3A 86 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
   7++D674 FE FF                                cp      $FF
   8++D676 28 18                                jr      z,.PitchSAxes
   9++D678 47           .splitAndDampenZ:       ld      b,a                     ; preserve S7 counter
  10++D679 E6 7F                                and     SignMask8Bit            ; if abs (Rotz) is 0 then skip pitch
  11++D67B CA BD D6                             jp      z,.ProcessRoll
  12++D67E 78                                   ld      a,b                     ; b = rotate counter S7
  13++D67F E6 80                                and     SignOnly8Bit            ; a = sign rat2 = c = sign
  14++D681 4F                                   ld      c,a                     ; .
  15++D682 32 8C C0                             ld      (univRAT2),a            ; .
  16++D685 78                                   ld      a,b                     ; a = abs b
  17++D686 E6 7F                                and     SignMask8Bit            ; .
  18++D688 3D                                   dec     a                       ; dampen
  19++D689 32 8D C0                             ld      (univRAT2Val),a
  20++D68C B1                                   or      c                       ; make S7 again after dampening
  21++D68D 32 86 C0                             ld      (UBnKRotZCounter),a     ; Update Rotation Counter
  22++D690 21 30 C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  23++D693 22 FC 68                             ld	    (varAxis1),hl
  24++D696 21 36 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  25++D699 22 FE 68                             ld	    (varAxis2),hl
  26++D69C CD 09 D7                             call    MVS5RotateAxis
  27++D69F 21 32 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  28++D6A2 22 FC 68                             ld	    (varAxis1),hl
  29++D6A5 21 38 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  30++D6A8 22 FE 68                             ld	    (varAxis2),hl
  31++D6AB CD 09 D7                             call    MVS5RotateAxis
  32++D6AE 21 34 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  33++D6B1 22 FC 68                             ld	    (varAxis1),hl
  34++D6B4 21 3A C0                             ld	    hl,UBnkrotmatNosevZ
  35++D6B7 22 FE 68                             ld	    (varAxis2),hl
  36++D6BA CD 09 D7                             call    MVS5RotateAxis
  37++D6BD 3A 85 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  38++D6C0 FE FF                                cp      $FF
  39++D6C2 28 17                                jr      z,.RollSAxis
  40++D6C4 47           .splitAndDampenX:       ld      b,a
  41++D6C5 E6 7F                                and     SignMask8Bit            ; exit early is ABS = 0
  42++D6C7 A7                                   and     a                       ; .
  43++D6C8 C8                                   ret     z                       ; .
  44++D6C9 78                                   ld      a,b                     ; a = rotate counter S7
  45++D6CA E6 80                                and     SignOnly8Bit            ; rat2 = c = sign
  46++D6CC 4F                                   ld      c,a                     ; .
  47++D6CD 32 8C C0                             ld      (univRAT2),a            ; .
  48++D6D0 78                                   ld      a,b                     ; a = abs b
  49++D6D1 E6 7F                                and     SignMask8Bit            ; .
  50++D6D3 3D                                   dec     a                       ; dampen
  51++D6D4 32 8D C0                             ld      (univRAT2Val),a
  52++D6D7 B1                                   or      c                       ; make S7 again after dampening
  53++D6D8 32 85 C0                             ld      (UBnKRotXCounter),a
  54++D6DB 21 30 C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  55++D6DE 22 FC 68                             ld	    (varAxis1),hl
  56++D6E1 21 2A C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  57++D6E4 22 FE 68                             ld	    (varAxis2),hl
  58++D6E7 CD 09 D7                             call    MVS5RotateAxis
  59++D6EA 21 32 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  60++D6ED 22 FC 68                             ld	    (varAxis1),hl
  61++D6F0 21 2C C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  62++D6F3 22 FE 68                             ld	    (varAxis2),hl
  63++D6F6 CD 09 D7                             call    MVS5RotateAxis
  64++D6F9 21 34 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  65++D6FC 22 FC 68                             ld	    (varAxis1),hl
  66++D6FF 21 2E C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  67++D702 22 FE 68                             ld	    (varAxis2),hl
  68++D705 CD 09 D7                             call    MVS5RotateAxis
  69++D708 C9                                   ret
  70++D709
  71++D709
  72++D709
  73++D709              ; Roate around axis
  74++D709              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  75++D709              ; so the axis x1 points to roofv  x , y or z
  76++D709              ;             x2           nosev or sidev  x, y or z
  77++D709              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  78++D709              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  79++D709              ; var RAT2 gives direction
  80++D709              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  81++D709              ;-Set up S R -----------------------------------------
  82++D709              ; optimised we don't deal with sign here just the value of roof axis / 512
  83++D709 2A FC 68     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  84++D70C 5E                                   ld      e,(hl)
  85++D70D 23                                   inc     hl
  86++D70E 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  87++D70F EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
  88++D710 7C                                   ld      a,h
  89++D711 E6 80                                and     SignOnly8Bit
  90++D713 FD 67                                ld      iyh,a           ; iyh = sign Axis1
  91++D715 7C                                   ld      a,h
  92++D716 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
  93++D718 CB 3F                                srl     a               ; a = Axis1/2
  94++D71A 5F                                   ld      e,a             ;
  95++D71B FD 7C                                ld      a,iyh           ; A = Axis 1 sign
  96++D71D 57                                   ld      d,a             ; de = signed Axis1 / 512
  97++D71E B7                                   or      a               ; clear carry
  98++D71F CD 75 01                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
  99++D722              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 100++D722 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 101++D723 7D                                   ld      a,l
 102++D724 32 18 6A                             ld      (varR),a
 103++D727 7C                                   ld      a,h
 104++D728 32 19 6A                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 105++D72B              ;-calculate roofv latter half of calc
 106++D72B 2A FE 68                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 107++D72E 5E                                   ld      e,(hl)
 108++D72F 23                                   inc     hl
 109++D730 56                                   ld      d,(hl)          ; de = value of roof axis
 110++D731 7A                                   ld      a,d
 111++D732 E6 80                                and     SignOnly8Bit
 112++D734 FD 67                                ld      iyh,a           ; save sign
 113++D736 7A                                   ld      a,d
 114++D737 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 115++D739 57                                   ld      d,a             ; de = abs (nosev)
 116++D73A                                      ShiftDERight1
 116++D73A CB 3A       >			   srl d
 116++D73C CB 1B       >			   rr  e
 117++D73E                                      ShiftDERight1
 117++D73E CB 3A       >			   srl d
 117++D740 CB 1B       >			   rr  e
 118++D742                                      ShiftDERight1
 118++D742 CB 3A       >			   srl d
 118++D744 CB 1B       >			   rr  e
 119++D746                                      ShiftDERight1           ; de = nosev /16 unsigned
 119++D746 CB 3A       >			   srl d
 119++D748 CB 1B       >			   rr  e
 120++D74A 3A 8C C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 121++D74D FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 122++D74F E6 80                                and     SignOnly8Bit
 123++D751 B2                                   or      d
 124++D752 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 125++D753              ;;; ld      a,e
 126++D753              ;;;     or      iyh
 127++D753              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 128++D753              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 129++D753 E1                                   pop     hl              ; get back RS POP ID 1
 130++D754                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 131++D754              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 132++D754 CD 56 00                             call    ADDHLDESignedV4 ; do add using hl and de
 133++D757 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 134++D758              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 135++D758              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 136++D758 2A FE 68                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 137++D75B 5E                                   ld      e,(hl)
 138++D75C 23                                   inc     hl
 139++D75D 56                                   ld      d,(hl)
 140++D75E EB                                   ex      de,hl
 141++D75F 7C                                   ld      a,h
 142++D760 E6 80                                and     $80
 143++D762 FD 67                                ld      iyh,a
 144++D764 7C                                   ld      a,h
 145++D765 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 146++D767 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 147++D769 5F                                   ld      e,a
 148++D76A FD 7C                                ld      a,iyh
 149++D76C 57                                   ld      d,a
 150++D76D B7                                   or      a               ; clear carry
 151++D76E CD 75 01                             call    subHLDES15
 152++D771              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 153++D771 E5                                   push    hl              ; save hl on stack  PUSH ID 3
 154++D772 7D                                   ld      a,l
 155++D773 32 17 69                             ld      (varP),a        ; p = low of resuilt
 156++D776 7C                                   ld      a,h
 157++D777 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++D779 32 33 6A                             ld      (varT),a        ; t = high of result
 159++D77C              ;-- Set up TQ
 160++D77C 2A FC 68                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 161++D77F              ;   ld      hl,(varAxis2)   ; work on nosev again
 162++D77F 5E                                   ld      e,(hl)
 163++D780 23                                   inc     hl
 164++D781 56                                   ld      d,(hl)
 165++D782 7A                                   ld      a,d
 166++D783 E6 80                                and     $80
 167++D785 FD 67                                ld      iyh,a           ; save sign
 168++D787 7A                                   ld      a,d
 169++D788 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 170++D78A 57                                   ld      d,a             ; de = abs (nosev)
 171++D78B                                      ShiftDERight1
 171++D78B CB 3A       >			   srl d
 171++D78D CB 1B       >			   rr  e
 172++D78F                                      ShiftDERight1
 172++D78F CB 3A       >			   srl d
 172++D791 CB 1B       >			   rr  e
 173++D793                                      ShiftDERight1
 173++D793 CB 3A       >			   srl d
 173++D795 CB 1B       >			   rr  e
 174++D797                                      ShiftDERight1           ; de = nosev /16 unsigned
 174++D797 CB 3A       >			   srl d
 174++D799 CB 1B       >			   rr  e
 175++D79B 3A 8C C0                             ld      a,(univRAT2)
 176++D79E FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 177++D7A0 E6 80                                and     $80
 178++D7A2 B2                                   or      d
 179++D7A3 57                                   ld      d,a
 180++D7A4              ;;; ld      a,e
 181++D7A4              ;;;     or      iyh
 182++D7A4              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 183++D7A4 E1                                   pop     hl              ; get back RS   POP ID 3
 184++D7A5              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 185++D7A5 CD 75 01                             call    subHLDES15 ; do add using hl and de
 186++D7A8              ;-- Update nosev ---------------------------------------
 187++D7A8 EB                                   ex      de,hl           ; save hl to de
 188++D7A9 2A FE 68                             ld      hl,(varAxis2)
 189++D7AC 73                                   ld      (hl),e
 190++D7AD 23                                   inc     hl
 191++D7AE 72                                   ld      (hl),d          ; copy result into nosev
 192++D7AF              ;-- Update roofv ---------------------------------------
 193++D7AF D1                                   pop     de              ; get calc saved on stack POP ID 2
 194++D7B0 2A FC 68                             ld      hl,(varAxis1)
 195++D7B3 73                                   ld      (hl),e
 196++D7B4 23                                   inc     hl
 197++D7B5 72                                   ld      (hl),d          ; copy result into nosev
 198++D7B6 C9                                   ret
 199++D7B7
 200++D7B7
# file closed: ../../Tests/Vectors/../../Universe/Ships/ApplyShipRollAndPitch.asm
 887+ D7B7                          INCLUDE "../../Universe/Ships/ApplyShipSpeed.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ApplyShipSpeed.asm
   1++D7B7
   2++D7B7
   3++D7B7              ;AddSpeedToVert:         MACRO   vertex
   4++D7B7              ;                        ld      hl,(vertex)
   5++D7B7              ;                        ld      a,(vertex+2)
   6++D7B7              ;                        ld      b,a
   7++D7B7              ;                        call    AHLEquBHLaddCDE
   8++D7B7              ;                        ld      (vertex),hl
   9++D7B7              ;                        ld      (vertex+2),a
  10++D7B7              ;                        ENDM
  11++D7B7
  12++D7B7
  13++D7B7              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D7B7 3A 83 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++D7BA FE 00                                cp      0
  16++D7BC C8                                   ret     z
  17++D7BD CB 27                                sla     a
  18++D7BF CB 27                                sla     a
  19++D7C1 FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D7C3              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D7C3 5F          >                        ld      e,a
  20++D7C4 2A 36 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D7C7 7C          >                        ld      a,h
  20++D7C8             >                        ClearSignBitA
  20++D7C8 E6 7F       >                        and     SignMask8Bit
  20++D7CA 57          >                        ld      d,a
  20++D7CB ED 30       >                        mul     de
  20++D7CD 7C          >                        ld      a,h
  20++D7CE             >                        SignBitOnlyA
  20++D7CE E6 80       >                        and     SignOnly8Bit
  20++D7D0 47          >                        ld      b,a;ld      c,a
  20++D7D1 62          >                        ld      h,d;ld      e,d
  20++D7D2 0E 00       >                        ld      c,0;ld      d,0
  21++D7D4              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++D7D4 ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++D7D8 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++D7DB 6F          >                        ld      l,a
  21++D7DC CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D7DF 7D          >                        ld      a,l
  21++D7E0 32 20 C0    >                        ld      (UBnKxlo),a
  21++D7E3 ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++D7E7              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D7E7 FD 5D       >                        ld      e,iyl
  22++D7E9 2A 38 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D7EC 7C          >                        ld      a,h
  22++D7ED             >                        ClearSignBitA
  22++D7ED E6 7F       >                        and     SignMask8Bit
  22++D7EF 57          >                        ld      d,a
  22++D7F0 ED 30       >                        mul     de
  22++D7F2 7C          >                        ld      a,h
  22++D7F3             >                        SignBitOnlyA
  22++D7F3 E6 80       >                        and     SignOnly8Bit
  22++D7F5 47          >                        ld      b,a;ld      c,a
  22++D7F6 62          >                        ld      h,d;ld      e,d
  22++D7F7 0E 00       >                        ld      c,0;ld      d,0
  23++D7F9              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++D7F9 ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++D7FD 3A 23 C0    >                        ld      a,(UBnKylo)
  23++D800 6F          >                        ld      l,a
  23++D801 CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D804 7D          >                        ld      a,l
  23++D805 32 23 C0    >                        ld      (UBnKylo),a
  23++D808 ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++D80C              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++D80C FD 5D       >                        ld      e,iyl
  24++D80E 2A 3A C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++D811 7C          >                        ld      a,h
  24++D812             >                        ClearSignBitA
  24++D812 E6 7F       >                        and     SignMask8Bit
  24++D814 57          >                        ld      d,a
  24++D815 ED 30       >                        mul     de
  24++D817 7C          >                        ld      a,h
  24++D818             >                        SignBitOnlyA
  24++D818 E6 80       >                        and     SignOnly8Bit
  24++D81A 47          >                        ld      b,a;ld      c,a
  24++D81B 62          >                        ld      h,d;ld      e,d
  24++D81C 0E 00       >                        ld      c,0;ld      d,0
  25++D81E              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++D81E ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++D822 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++D825 6F          >                        ld      l,a
  25++D826 CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++D829 7D          >                        ld      a,l
  25++D82A 32 26 C0    >                        ld      (UBnKzlo),a
  25++D82D ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++D831 C9                                   ret
  27++D832
# file closed: ../../Tests/Vectors/../../Universe/Ships/ApplyShipSpeed.asm
 888+ D832              ; ---------------------------------------------------------------------------------------------------------------------------------
 889+ D832              ; .....................................................
 890+ D832              ; Process Nodes does the following:
 891+ D832              ; for each node:
 892+ D832              ;     see if node >
 893+ D832 00           PNXX20DIV6          DB      0
 894+ D833 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
 895+ D835 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
 896+ D837 00           PNLASTNORM          DB      0
 897+ D838              ProcessNodes:           ZeroA
 897+ D838 AF          >                        xor a
 898+ D839 32 28 C4                             ld      (UbnkLineArrayLen),a
 899+ D83C CD C6 CA                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 900+ D83F CD 5A 68                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
 901+ D842 CD 7F CD                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 902+ D845 CD 4C CC                             call    InverseXX16                      ;#11; Invert rotation matrix
 903+ D848 21 4F C4                             ld      hl,UBnkHullVerticies
 904+ D84B 3A 3D C4                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
 905+ D84E 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
 906+ D84F 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
 907+ D850 16 06                                ld      d,6
 908+ D852 CD 7C 74                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 909+ D855 41                                   ld      b,c                              ; c = number of vertices
 910+ D856 FD 21 2E C1                          ld      iy,UBnkNodeArray
 911+ D85A              LL48:
 912+ D85A C5           PointLoop:              push    bc                                  ; save counters
 913+ D85B E5                                   push    hl                                  ; save verticies list pointer
 914+ D85C FD E5                                push    iy                                  ; save Screen plot array pointer
 915+ D85E 78                                   ld      a,b
 916+ D85F                                      ;break
 917+ D85F CD E8 D2                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
 918+ D862 3A E5 C0                             ld      a,(UBnkXScaledSign)
 919+ D865 CD BC 67                             call    XX12EquNodeDotOrientation
 920+ D868 CD F0 CA                             call    TransposeXX12ByShipToXX15
 921+ D86B CD 6D CB                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
 922+ D86E FD E1                                pop     iy                                  ; get back screen plot array pointer
 923+ D870 CD 67 D3                             call    ProjectNodeToEye                     ; set up screen plot list entry
 924+ D873                 ; ld      hl,UbnkLineArrayLen
 925+ D873                ;  inc     (hl)                                ; another node done
 926+ D873 FD E5        ReadyForNextPoint:      push    iy                                  ; copy screen plot pointer to hl
 927+ D875 E1                                   pop     hl
 928+ D876 3E 04                                ld      a,4
 929+ D878 ED 31                                add     hl,a
 930+ D87A E5                                   push    hl                                  ; write it back at iy + 4
 931+ D87B FD E1                                pop     iy                                  ; and put it in iy again
 932+ D87D E1                                   pop     hl                                  ; get hl back as vertex list
 933+ D87E 3E 06                                ld      a,6
 934+ D880 ED 31                                add     hl,a                                ; and move to next vertex
 935+ D882 C1                                   pop     bc                                  ; get counter back
 936+ D883 10 D5                                djnz    PointLoop
 937+ D885              ; ......................................................
 938+ D885                                      ClearCarryFlag
 938+ D885 B7          >                        or a
 939+ D886 C9                                   ret
 940+ D887              ; ...........................................................
 941+ D887 CD 7A CF     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
 942+ D88A              ;............................................................
 943+ D88A              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
 943+ D88A CB 77       >                        bit 	ShipIsVisibleBitNbr,a
 943+ D88C C8          >                        ret		z
 944+ D88D              ;............................................................
 945+ D88D C9                                   ret
 946+ D88E
 947+ D88E                  ;INCLUDE "../../Universe/Ships/PrepLines.asm"
 948+ D88E              ;--------------------------------------------------------------------------------------------------------
 949+ D88E                      DISPLAY "Tracing 8", $
 950+ D88E
 951+ D88E                  INCLUDE "../../ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX1Y1.asm
   1++D88E              ;--------------------------------------------------------------------------------------------------------
   2++D88E              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D88E 21 2E C1     getVertexNodeAtAToDE:   ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D891 ED 31                                add         hl,a                                ; hl = address of Node
   5++D893 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D894 ED A0                                ldi                                             ; x1 lo
   7++D896 ED A0                                ldi                                             ; x1 hi
   8++D898 ED A0                                ldi                                             ; y1 lo
   9++D89A ED A0                                ldi                                             ; y1 hi
  10++D89C C9                                   ret
  11++D89D
  12++D89D              ;getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
  13++D89D              ;                        add         hl,a                                ; hl = address of Node
  14++D89D              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
  15++D89D              ;                        ld          de,UBnkX1
  16++D89D              ;                        ldi                                             ; x1 lo
  17++D89D              ;                        ldi                                             ; x1 hi
  18++D89D              ;                        ldi                                             ; y1 lo
  19++D89D              ;                        ldi                                             ; y1 hi
  20++D89D              ;                        ret
  21++D89D
# file closed: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX1Y1.asm
 952+ D89D
 953+ D89D                      DISPLAY "Tracing 9", $
 954+ D89D
 955+ D89D                  INCLUDE "../../ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX2Y2.asm
   1++D89D              ;--------------------------------------------------------------------------------------------------------
   2++D89D              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D89D              ;getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D89D              ;                        add         hl,a                                ; hl = address of Node
   5++D89D              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D89D              ;                        ld          de,UBnkX2
   7++D89D              ;                        ldi                                             ; x1 lo
   8++D89D              ;                        ldi                                             ; x1 hi
   9++D89D              ;                        ldi                                             ; y1 lo
  10++D89D              ;                        ldi                                             ; y1 hi
  11++D89D              ;                        ret
# file closed: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX2Y2.asm
 956+ D89D                      DISPLAY "Tracing 10", $
 957+ D89D
 958+ D89D                  INCLUDE "../../ModelRender/GetFaceAtA.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/GetFaceAtA.asm
   1++D89D              ;--------------------------------------------------------------------------------------------------------
   2++D89D              GetFaceAtA:         MACRO
   3++D89D ~                                ld          hl,UbnkFaceVisArray
   4++D89D ~                                add         hl,a
   5++D89D ~                                ld          a,(hl)                              ; get face visibility
   6++D89D                                  ENDM
   7++D89D
# file closed: ../../Tests/Vectors/../../ModelRender/GetFaceAtA.asm
 959+ D89D                      DISPLAY "Tracing 11", $
 960+ D89D
 961+ D89D              ;--------------------------------------------------------------------------------------------------------
 962+ D89D              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
 963+ D89D               ;   DEFINE NOBACKFACECULL 1
 964+ D89D 00           PLEDGECTR           DB          0
 965+ D89E
 966+ D89E              PrepLines:
 967+ D89E              InitialiseLineRead:
 968+ D89E                      ;break
 969+ D89E                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
 969+ D89E AF          >                        xor      a
 969+ D89F 32 28 C4    >                        ld       (UbnkLineArrayLen),a
 970+ D8A2 32 29 C4             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 971+ D8A5 32 9D D8             ld          (PLEDGECTR),a
 972+ D8A8 3A 3E C4             ld          a,(EdgeCountAddr)
 973+ D8AB DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
 974+ D8AD FD 2E 00             ld          iyl,0                               ; ixl = current edge index
 975+ D8B0 21 6E C2             ld          hl,UbnkLineArray                    ; head of array
 976+ D8B3 22 1A 6A             ld          (varU16),hl                         ; store current line array pointer un varU16
 977+ D8B6                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
 977+ D8B6 3A 3E C4    >                        ld       a,(EdgeCountAddr)
 977+ D8B9 32 1E 6A    >                        ld       (XX17),a
 978+ D8BC 3A 8E C0             ld          a,(UBnKexplDsp)                     ; get explosion status
 979+ D8BF                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
 979+ D8BF CB 77       >                        bit 	6,a
 979+ D8C1 CA C9 D8    >                        jp      z,CalculateNewLines
 980+ D8C4 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
 981+ D8C6 32 8E C0             ld          (UBnKexplDsp),a                     ; INWK+31
 982+ D8C9              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
 983+ D8C9              ; NOw we can calculate hull after including laser line
 984+ D8C9              CalculateNewLines:
 985+ D8C9              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
 986+ D8C9              CheckEdgesForVisibility:
 987+ D8C9 21 3F C5             ld          hl,UBnkHullEdges
 988+ D8CC                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
 989+ D8CC 22 1D 69             ld          (varV),hl                           ; V \ is pointer to where edges data start
 990+ D8CF 3A 39 C4             ld          a,(LineX4Addr)
 991+ D8D2 47                   ld          b,a                                 ; nbr of bytes of edge data
 992+ D8D3              LL75Loop:                                               ; count Visible edges
 993+ D8D3              IsEdgeInVisibilityRange:
 994+ D8D3 2A 1D 69             ld          hl,(varV)
 995+ D8D6 E5                   push        hl
 996+ D8D7 FD E1                pop         iy
 997+ D8D9 3A 08 69             ld          a,(LastNormalVisible)               ; XX4 is visibility range
 998+ D8DC 57                   ld          d,a                                 ; d holds copy of XX4
 999+ D8DD              ; Get Edge Byte 0
1000+ D8DD FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
1001+ D8E0                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
1001+ D8E0 BA          >                        cp      d
1001+ D8E1 DA 3C D9    >                        jp		c, LL78EdgeNotVisible
1002+ D8E4              EdgeMayBeVisibile:
1003+ D8E4              ; Get Edge Byte 1
1004+ D8E4              IsFace1Visibile:                                        ; edges have 2 faces to test
1005+ D8E4 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
1006+ D8E7 4F                   ld          c,a                                 ;  c = a copy of byte 1
1007+ D8E8 E6 0F                and         $0F                                 ;
1008+ D8EA                      GetFaceAtA
1008+ D8EA 21 10 C1    >                    ld          hl,UbnkFaceVisArray
1008+ D8ED ED 31       >                    add         hl,a
1008+ D8EF 7E          >                    ld          a,(hl)                              ; get face visibility
1009+ D8F0              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
1010+ D8F0                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
1010+ D8F0 A7          >                        and     a
1010+ D8F1 C2 05 D9    >                        jp	    nz,VisibileEdge
1011+ D8F4              IsFace2Visibile:
1012+ D8F4 79                   ld          a,c                                 ; restore byte 1 from c register
1013+ D8F5 ED 23                swapnib                                         ;
1014+ D8F7 E6 0F                and         $0F                                 ; swap high byte into low byte
1015+ D8F9 E5                   push        hl
1016+ D8FA                      GetFaceAtA
1016+ D8FA 21 10 C1    >                    ld          hl,UbnkFaceVisArray
1016+ D8FD ED 31       >                    add         hl,a
1016+ D8FF 7E          >                    ld          a,(hl)                              ; get face visibility
1017+ D900 E1                   pop         hl
1018+ D901                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
1018+ D901 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1018+ D902 CA 3C D9    >                        jp	    z, LL78EdgeNotVisible
1019+ D905              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
1020+ D905              ;LL79--Visible edge--------------------------------------
1021+ D905              ; Get Edge Byte 2
1022+ D905 FD 7E 02             ld          a,(IY+2)                            ; get Node id
1023+ D908 11 E4 C0             ld          de,UBnkX1
1024+ D90B CD 8E D8             call        getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
1025+ D90E FD 7E 03             ld          a,(IY+3)
1026+ D911 11 E8 C0             ld          de,UBnkX2
1027+ D914 CD 8E D8             call        getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
1028+ D917              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
1029+ D917 ED 5B 1A 6A          ld          de,(varU16)                         ; clipped edges heap address
1030+ D91B 21 E4 C0             ld          hl,UbnkPreClipX1
1031+ D91E                      FourLDIInstrunctions
1031+ D91E ED A0       >                        ldi
1031+ D920 ED A0       >                        ldi
1031+ D922 ED A0       >                        ldi
1031+ D924 ED A0       >                        ldi
1032+ D926                      FourLDIInstrunctions
1032+ D926 ED A0       >                        ldi
1032+ D928 ED A0       >                        ldi
1032+ D92A ED A0       >                        ldi
1032+ D92C ED A0       >                        ldi
1033+ D92E ED 53 1A 6A          ld          (varU16),de                         ; update U16 with current address
1034+ D932 21 28 C4             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
1035+ D935 34                   inc         (hl)
1036+ D936 7E                   ld          a,(hl)
1037+ D937                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
1037+ D937 FE 32       >                        cp     LineArraySize
1037+ D939 D2 52 D9    >                        jp		nc,CompletedLineGeneration
1038+ D93C              ; If we hit here we skip the write of line arryay u16
1039+ D93C              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
1040+ D93C              LL78:
1041+ D93C 2A 1D 69             ld          hl,(varV)                           ; varV is current edge address
1042+ D93F 3E 04                ld          a,4
1043+ D941 ED 31                add         hl,a
1044+ D943 22 1D 69             ld          (varV),hl
1045+ D946 21 9D D8             ld          hl,PLEDGECTR                        ;
1046+ D949 34                   inc         (hl)                                ;
1047+ D94A 7E                   ld          a,(hl)                              ; current edge index ++
1048+ D94B                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
1048+ D94B 21 1E 6A    >                        ld    hl,XX17
1048+ D94E BE          >                        cp    (hl)
1048+ D94F C2 D3 D8    >                        jp      nz,LL75Loop
1049+ D952              CompletedLineGeneration:
1050+ D952              LL81:
1051+ D952              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
1052+ D952 3A 28 C4             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
1053+ D955 CB 27                sla         a
1054+ D957 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
1055+ D959 CB 27                sla         a                           ; multiple by 8 to equal number of bytes
1056+ D95B 32 29 C4             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
1057+ D95E              ExitEdgeDataLoop:
1058+ D95E C9                   ret
1059+ D95F
1060+ D95F
1061+ D95F                  DISPLAY "Tracing XX", $
1062+ D95F
1063+ D95F              UnivBankSize  EQU $ - StartOfUniv
1064+ D95F
# file closed: ../../Tests/Vectors/univ_ship_data.asm
1083  D95F                                  DISPLAY "Sizing Bank ",BankUNIVDATA0," - Start ",UniverseBankAddr," End - ",$, "- Universe Data A"
1084  D95F                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
1085  D95F                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1086  D95F              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1087  D95F                                  SLOT    MathsTablesAddr
1088  D95F                                  PAGE    BankMathsTables
1089  D95F                                  ORG     MathsTablesAddr,BankMathsTables
1090  0000                                  INCLUDE "../../Maths/logmaths.asm"
# file opened: ../../Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 83 05                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 83 03                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 83 03                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              ; calculates R = 256 * A / Q
  35+ 0043              Requ256mulAdivQ_Log:    JumpIfAGTEMemusng varQ, LL2             ; If A >= Q, then the answer will not fit in one byte, return 255
  35+ 0043 21 17 6A    >                        ld      hl,varQ
  35+ 0046 BE          >                        cp      (hl)
  35+ 0047 D2 BB 00    >                        jp		nc,LL2
  36+ 004A FD 6F                                ld      iyl,a                           ; STA widget             \ Store A in widget, so now widget = argument A
  37+ 004C DD 67                                ld      ixh,a                           ; TAX                    \ Transfer A into X, so now X = argument A
  38+ 004E                                      JumpIfAIsZero LLfix                     ; If A = 0, jump to LLfix to return a result of 0
  38+ 004E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 004F CA B7 00    >                        jp	    z, LLfix
  39+ 0052              ; calculate log(A) - log(Q), first adding the low bytes (from the logL table), and then the high bytes (from the log table)
  40+ 0052              ; this determins if we branch to antilog or antilogodd for negative value
  41+ 0052 21 83 03     .GetLogA:               ld      hl,LogTable                     ; LDA logL,X             \ e = low byte of log(X)
  42+ 0055 ED 31                                add     hl,a                            ; have to add twice as ist 8 bit so cant shift
  43+ 0057 ED 31                                add     hl,a                            ;
  44+ 0059 5E                                   ld      e,(hl)                          ;
  45+ 005A 23                                   inc     hl                              ;
  46+ 005B 56                                   ld      d,(hl)                          ; de = logH[X] logL[X]
  47+ 005C 21 83 03                             ld      hl,LogTable                     ;
  48+ 005F 3A 17 6A                             ld      a,(varQ)                        ;
  49+ 0062 ED 31                                add     hl,a                            ;
  50+ 0064 ED 31                                add     hl,a                            ;
  51+ 0066 4E                                   ld      c,(hl)                          ;
  52+ 0067 23                                   inc     hl                              ;
  53+ 0068 46                                   ld      b,(hl)                          ; bc = logH[X] logL[X]
  54+ 0069 7B                                   ld      a,e                             ; SBC logL,X             \       = low byte of log(A) - low byte of log(Q)
  55+ 006A                                      ClearCarryFlag                          ; .
  55+ 006A B7          >                        or a
  56+ 006B 99                                   sbc     a,c                             ; .
  57+ 006C D2 93 00                             jp      nc,NoCarryBranch
  58+ 006F FA 83 00     CarryBranch:            jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  59+ 0072 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  60+ 0073 7A                                   ld      a,d                             ; a = logH(a)
  61+ 0074              .CarryFlagPoint1:       SetCarryFlag
  61+ 0074 37          >                        scf
  62+ 0075 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  63+ 0076 D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  64+ 0079 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  65+ 007C ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  66+ 007E 7E                                   ld      a,(hl)
  67+ 007F 32 18 6A                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  68+ 0082 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  69+ 0083 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  70+ 0084              .CarryFlagPoint2:       SetCarryFlag
  70+ 0084 37          >                        scf
  71+ 0085 98                                   sbc     a,b
  72+ 0086 D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  73+ 0089 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  74+ 008C ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  75+ 008E 7E                                   ld      a,(hl)
  76+ 008F 32 18 6A                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  77+ 0092 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  78+ 0093 FA A7 00     NoCarryBranch:          jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  79+ 0096 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  80+ 0097 7A                                   ld      a,d                             ; a = logH(a)
  81+ 0098              .CarryFlagPoint1:       ClearCarryFlag
  81+ 0098 B7          >                        or a
  82+ 0099 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  83+ 009A D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  84+ 009D 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  85+ 00A0 ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  86+ 00A2 7E                                   ld      a,(hl)
  87+ 00A3 32 18 6A                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  88+ 00A6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  89+ 00A7 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  90+ 00A8              .CarryFlagPoint2:       ClearCarryFlag
  90+ 00A8 B7          >                        or a
  91+ 00A9 98                                   sbc     a,b
  92+ 00AA D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  93+ 00AD 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  94+ 00B0 ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  95+ 00B2 7E                                   ld      a,(hl)
  96+ 00B3 32 18 6A                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  97+ 00B6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  98+ 00B7 32 18 6A     LLfix:                  ld      (varR),a                        ; Set the result in R to the value of A
  99+ 00BA C9                                   ret                                     ; RTS                    \ Return from the subroutine
 100+ 00BB 3E FF        LL2:                    ld      a,$FF
 101+ 00BD 32 18 6A                             ld      (varR),a
 102+ 00C0 C9                                   ret
 103+ 00C1
 104+ 00C1
 105+ 00C1              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 105+ 00C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 105+ 00C2 CA EA 00    >                        jp	    z, .ResultIsZero
 106+ 00C5 21 83 03                             ld      hl,LogTable                     ; de = log a
 107+ 00C8 ED 31                                add     hl,a                            ; .
 108+ 00CA ED 31                                add     hl,a                            ; .
 109+ 00CC 5E                                   ld      e,(hl)                          ; .
 110+ 00CD 23                                   inc     hl                              ; .
 111+ 00CE 56                                   ld      d,(hl)                          ; .
 112+ 00CF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 113+ 00D2 78                                   ld      a,b                             ; .
 114+ 00D3 ED 31                                add     hl,a                            ; .
 115+ 00D5 ED 31                                add     hl,a                            ; .
 116+ 00D7 7E                                   ld      a,(hl)                          ; .
 117+ 00D8 23                                   inc     hl                              ; .
 118+ 00D9 66                                   ld      h,(hl)                          ; .
 119+ 00DA 6F                                   ld      l,a                             ; .
 120+ 00DB                                      ClearCarryFlag                          ;
 120+ 00DB B7          >                        or a
 121+ 00DC EB                                   ex      de,hl                           ; now hl = log a and de = log b
 122+ 00DD ED 52                                sbc     hl,de                           ; hl = log a - log b
 123+ 00DF 7C                                   ld      a,h                             ; .
 124+ 00E0 21 83 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 125+ 00E3 ED 31                                add     hl,a                            ; which is also a / b
 126+ 00E5 ED 31                                add     hl,a                            ; .
 127+ 00E7 7E                                   ld      a,(hl)                          ; .
 128+ 00E8                                      ClearCarryFlag                          ;
 128+ 00E8 B7          >                        or a
 129+ 00E9 C9                                   ret
 130+ 00EA              .ResultIsZero:          ClearCarryFlag
 130+ 00EA B7          >                        or a
 131+ 00EB                                      ZeroA
 131+ 00EB AF          >                        xor a
 132+ 00EC C9                                   ret
 133+ 00ED
 134+ 00ED              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 134+ 00ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 00EE CA 24 01    >                        jp	    z, .ResultIsZero
 135+ 00F1                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 135+ 00F1 BA          >                        cp     d
 135+ 00F2 D2 C1 00    >                        jp		nc,AEquAmul256DivBLogLT
 136+ 00F5 21 83 03                             ld      hl,LogTable                     ; de = log a
 137+ 00F8 ED 31                                add     hl,a                            ; .
 138+ 00FA ED 31                                add     hl,a                            ; .
 139+ 00FC 5E                                   ld      e,(hl)                          ; .
 140+ 00FD 23                                   inc     hl                              ; .
 141+ 00FE 56                                   ld      d,(hl)                          ; .
 142+ 00FF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 143+ 0102 78                                   ld      a,b                             ; .
 144+ 0103 ED 31                                add     hl,a                            ; .
 145+ 0105 ED 31                                add     hl,a                            ; .
 146+ 0107 7E                                   ld      a,(hl)                          ; .
 147+ 0108 23                                   inc     hl                              ; .
 148+ 0109 66                                   ld      h,(hl)                          ; .
 149+ 010A 6F                                   ld      l,a                             ; .
 150+ 010B                                      ClearCarryFlag                          ;
 150+ 010B B7          >                        or a
 151+ 010C EB                                   ex      de,hl                           ; now hl = log a and de = log b
 152+ 010D ED 52                                sbc     hl,de                           ; hl = log a - log b
 153+ 010F 38 0B                                jr      c,.ResultIsOne                  ; .
 154+ 0111 7C                                   ld      a,h                             ; .
 155+ 0112 21 83 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 156+ 0115 ED 31                                add     hl,a                            ; which is also a / b
 157+ 0117 ED 31                                add     hl,a                            ; .
 158+ 0119 7E                                   ld      a,(hl)                          ; .
 159+ 011A                                      ClearCarryFlag                          ;
 159+ 011A B7          >                        or a
 160+ 011B C9                                   ret
 161+ 011C              .ResultIsOne:           ClearCarryFlag
 161+ 011C B7          >                        or a
 162+ 011D 3E FF                                ld      a,$FF
 163+ 011F C9                                   ret
 164+ 0120              .ResultIsInfinte:       SetCarryFlag
 164+ 0120 37          >                        scf
 165+ 0121 3E FF                                ld      a,$FF
 166+ 0123 C9                                   ret
 167+ 0124              .ResultIsZero:          ClearCarryFlag
 167+ 0124 B7          >                        or a
 168+ 0125 C9                                   ret
 169+ 0126
 170+ 0126              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
 170+ 0126 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 170+ 0127 CA 46 01    >                        jp	    z, .ResultIsZero
 171+ 012A 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 172+ 012D ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 173+ 012F ED 31                                add     hl,a
 174+ 0131 5E                                   ld      e,(hl)                          ; de = log a
 175+ 0132 23                                   inc     hl                              ; .
 176+ 0133 56                                   ld      d,(hl)                          ; .
 177+ 0134 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 178+ 0137                                      ClearCarryFlag
 178+ 0137 B7          >                        or a
 179+ 0138 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 180+ 0139 ED 52                                sbc     hl,de
 181+ 013B 7C                                   ld      a,h
 182+ 013C 21 83 02                             ld      hl,AnitLogODDTable
 183+ 013F ED 31                                add     hl,a
 184+ 0141 ED 31                                add     hl,a
 185+ 0143 7E                                   ld      a,(hl)
 186+ 0144                                      ClearCarryFlag
 186+ 0144 B7          >                        or a
 187+ 0145 C9                                   ret
 188+ 0146              .ResultIsZero:          ClearCarryFlag
 188+ 0146 B7          >                        or a
 189+ 0147                                      ZeroA
 189+ 0147 AF          >                        xor a
 190+ 0148 C9                                   ret
 191+ 0149
 192+ 0149
 193+ 0149              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 193+ 0149 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 193+ 014A CA 73 01    >                        jp	    z, .ResultIsZero
 194+ 014D                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 194+ 014D BA          >                        cp     d
 194+ 014E D2 26 01    >                        jp		nc,AEquAmul256Div197LogLT
 195+ 0151 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 196+ 0154 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 197+ 0156 ED 31                                add     hl,a
 198+ 0158 5E                                   ld      e,(hl)                          ; de = log a
 199+ 0159 23                                   inc     hl                              ; .
 200+ 015A 56                                   ld      d,(hl)                          ; .
 201+ 015B 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 202+ 015E                                      ClearCarryFlag
 202+ 015E B7          >                        or a
 203+ 015F EB                                   ex      hl,de                           ; hl = log a, de = log 197
 204+ 0160 ED 52                                sbc     hl,de
 205+ 0162 38 0B                                jr      c,.ResultIsOne
 206+ 0164 7C                                   ld      a,h
 207+ 0165 21 83 01                             ld      hl,AntiLogTable
 208+ 0168 ED 31                                add     hl,a
 209+ 016A ED 31                                add     hl,a
 210+ 016C 7E                                   ld      a,(hl)
 211+ 016D                                      ClearCarryFlag
 211+ 016D B7          >                        or a
 212+ 016E C9                                   ret
 213+ 016F              .ResultIsOne:           ClearCarryFlag
 213+ 016F B7          >                        or a
 214+ 0170 3E FF                                ld      a,$FF
 215+ 0172 C9                                   ret
 216+ 0173              .ResultIsZero:          ClearCarryFlag
 216+ 0173 B7          >                        or a
 217+ 0174 C9                                   ret
 218+ 0175
 219+ 0175              AEquAmul256Div197LogSignA:
 220+ 0175 FD 67                                ld      iyh,a
 221+ 0177                                      ClearSignBitA
 221+ 0177 E6 7F       >                        and     SignMask8Bit
 222+ 0179 CD 49 01                             call    AEquAmul256Div197Log
 223+ 017C 47                                   ld      b,a
 224+ 017D FD 7C                                ld      a,iyh
 225+ 017F                                      SignBitOnlyA
 225+ 017F E6 80       >                        and     SignOnly8Bit
 226+ 0181 B0                                   or      b
 227+ 0182 C9                                   ret
# file closed: ../../Maths/logmaths.asm
1091  0183                                  INCLUDE "../../Tables/antilogtable.asm"
# file opened: ../../Tables/antilogtable.asm
   1+ 0183 01 01 01 01  AntiLogTable:           DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
   1+ 0187 01 01 01 01
   1+ 018B 01 01
   2+ 018D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
   2+ 0191 01 01 01 01
   2+ 0195 01 01
   3+ 0197 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
   3+ 019B 01 01 01 01
   3+ 019F 01 01
   4+ 01A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
   4+ 01A5 02 02 02 02
   4+ 01A9 02 02
   5+ 01AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
   5+ 01AF 02 02 02 02
   5+ 01B3 02 02
   6+ 01B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
   6+ 01B9 03 03 03 03
   6+ 01BD 03 03
   7+ 01BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
   7+ 01C3 04 04 04 04
   7+ 01C7 04 04
   8+ 01C9 04 04 04 04                          DB $04, $04, $04, $04, $04, $05, $05, $05, $05, $05 ; 70 to 79
   8+ 01CD 04 05 05 05
   8+ 01D1 05 05
   9+ 01D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
   9+ 01D7 06 06 06 06
   9+ 01DB 06 06
  10+ 01DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  10+ 01E1 07 07 08 08
  10+ 01E5 08 08
  11+ 01E7 08 08 09 09                          DB $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A ; 100 to 109
  11+ 01EB 09 09 09 0A
  11+ 01EF 0A 0A
  12+ 01F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D ; 110 to 119
  12+ 01F5 0B 0C 0C 0C
  12+ 01F9 0C 0D
  13+ 01FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F, $10, $10 ; 120 to 129
  13+ 01FF 0E 0E 0F 0F
  13+ 0203 10 10
  14+ 0205 10 11 11 11                          DB $10, $11, $11, $11, $12, $12, $13, $13, $13, $14 ; 130 to 139
  14+ 0209 12 12 13 13
  14+ 020D 13 14
  15+ 020F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  15+ 0213 16 17 17 18
  15+ 0217 18 19
  16+ 0219 19 1A 1A 1B                          DB $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F ; 150 to 159
  16+ 021D 1C 1C 1D 1D
  16+ 0221 1E 1F
  17+ 0223 20 20 21 22                          DB $20, $20, $21, $22, $22, $23, $24, $25, $26, $26 ; 160 to 169
  17+ 0227 22 23 24 25
  17+ 022B 26 26
  18+ 022D 27 28 29 2A                          DB $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  18+ 0231 2B 2C 2D 2E
  18+ 0235 2F 30
  19+ 0237 31 32 33 34                          DB $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B ; 180 to 189
  19+ 023B 35 36 38 39
  19+ 023F 3A 3B
  20+ 0241 3D 3E 40 41                          DB $3D, $3E, $40, $41, $42, $44, $45, $47, $48, $4A ; 190 to 199
  20+ 0245 42 44 45 47
  20+ 0249 48 4A
  21+ 024B 4C 4D 4F 51                          DB $4C, $4D, $4F, $51, $52, $54, $56, $58, $5A, $5C ; 200 to 219
  21+ 024F 52 54 56 58
  21+ 0253 5A 5C
  22+ 0255 5E 60 62 64                          DB $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72 ; 210 to 229
  22+ 0259 67 69 6B 6D
  22+ 025D 70 72
  23+ 025F 75 77 7A 7D                          DB $75, $77, $7A, $7D, $80, $82, $85, $88, $8B, $8E ; 220 to 239
  23+ 0263 80 82 85 88
  23+ 0267 8B 8E
  24+ 0269 91 94 98 9B                          DB $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1 ; 230 to 239
  24+ 026D 9E A2 A5 A9
  24+ 0271 AD B1
  25+ 0273 B5 B8 BD C1                          DB $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB ; 240 to 249
  25+ 0277 C5 C9 CE D2
  25+ 027B D7 DB
  26+ 027D E0 E5 EA EF                          DB $E0, $E5, $EA, $EF, $F5, $FA                     ; 250 to 255
  26+ 0281 F5 FA
  27+ 0283
  28+ 0283 01 01 01 01  AnitLogODDTable:        DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
  28+ 0287 01 01 01 01
  28+ 028B 01 01
  29+ 028D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
  29+ 0291 01 01 01 01
  29+ 0295 01 01
  30+ 0297 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
  30+ 029B 01 01 01 01
  30+ 029F 01 01
  31+ 02A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
  31+ 02A5 02 02 02 02
  31+ 02A9 02 02
  32+ 02AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
  32+ 02AF 02 02 02 02
  32+ 02B3 02 02
  33+ 02B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
  33+ 02B9 03 03 03 03
  33+ 02BD 03 03
  34+ 02BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
  34+ 02C3 04 04 04 04
  34+ 02C7 04 04
  35+ 02C9 04 04 04 04                          DB $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 70 to 79
  35+ 02CD 05 05 05 05
  35+ 02D1 05 05
  36+ 02D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
  36+ 02D7 06 06 06 06
  36+ 02DB 06 06
  37+ 02DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  37+ 02E1 07 07 08 08
  37+ 02E5 08 08
  38+ 02E7 08 09 09 09                          DB $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A ; 100 to 109
  38+ 02EB 09 09 0A 0A
  38+ 02EF 0A 0A
  39+ 02F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D ; 110 to 119
  39+ 02F5 0B 0C 0C 0C
  39+ 02F9 0D 0D
  40+ 02FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F, $10, $10 ; 120 to 129
  40+ 02FF 0E 0F 0F 0F
  40+ 0303 10 10
  41+ 0305 10 11 11 12                          DB $10, $11, $11, $12, $12, $12, $13, $13, $14, $14 ; 130 to 139
  41+ 0309 12 12 13 13
  41+ 030D 14 14
  42+ 030F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  42+ 0313 16 17 17 18
  42+ 0317 18 19
  43+ 0319 1A 1A 1B 1B                          DB $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 150 to 159
  43+ 031D 1C 1D 1D 1E
  43+ 0321 1E 1F
  44+ 0323 20 21 21 22                          DB $20, $21, $21, $22, $23, $24, $24, $25, $26, $27 ; 160 to 169
  44+ 0327 23 24 24 25
  44+ 032B 26 27
  45+ 032D 28 29 29 2A                          DB $28, $29, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  45+ 0331 2B 2C 2D 2E
  45+ 0335 2F 30
  46+ 0337 31 32 34 35                          DB $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C ; 180 to 189
  46+ 033B 36 37 38 3A
  46+ 033F 3B 3C
  47+ 0341 3D 3F 40 42                          DB $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B ; 190 to 199
  47+ 0345 43 45 46 48
  47+ 0349 49 4B
  48+ 034B 4C 4E 50 52                          DB $4C, $4E, $50, $52, $53, $55, $57, $59, $5B, $5D ; 200 to 219
  48+ 034F 53 55 57 59
  48+ 0353 5B 5D
  49+ 0355 5F 61 63 65                          DB $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74 ; 210 to 229
  49+ 0359 68 6A 6C 6F
  49+ 035D 71 74
  50+ 035F 76 79 7B 7E                          DB $76, $79, $7B, $7E, $81, $84, $87, $8A, $8D, $90 ; 220 to 239
  50+ 0363 81 84 87 8A
  50+ 0367 8D 90
  51+ 0369 93 96 99 9D                          DB $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 230 to 239
  51+ 036D A0 A4 A7 AB
  51+ 0371 AF B3
  52+ 0373 B6 BA BF C3                          DB $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE ; 240 to 249
  52+ 0377 C7 CB D0 D4
  52+ 037B D9 DE
  53+ 037D E3 E8 ED F2                          DB $E3, $E8, $ED, $F2, $F7, $FD                     ; 250 to 255
  53+ 0381 F7 FD
  54+ 0383
# file closed: ../../Tables/antilogtable.asm
1092  0383                                  INCLUDE "../../Tables/logtable.asm"
# file opened: ../../Tables/logtable.asm
   1+ 0383 00 00        LogTable:               DW $0000                                                                   ; 0
   2+ 0385 00 00 00 20                          DW $0000, $2000, $32B8, $4000, $4A4D, $52B8, $59D6, $6000, $6570, $6A4D    ;   1 TO  10
   2+ 0389 B8 32 00 40
   2+ 038D 4D 4A B8 52
   2+ 0391 D6 59 00 60
   2+ 0395 70 65 4D 6A
   3+ 0399 B4 6E B8 72                          DW $6EB4, $72B8, $766A, $79D6, $7D05, $8000, $82CC, $8570, $87EF, $8A4D    ;  11 TO  20
   3+ 039D 6A 76 D6 79
   3+ 03A1 05 7D 00 80
   3+ 03A5 CC 82 70 85
   3+ 03A9 EF 87 4D 8A
   4+ 03AD 8E 8C B4 8E                          DW $8C8E, $8EB4, $90C1, $92B8, $949A, $966A, $9828, $99D6, $9B75, $9D05    ;  21 TO  30
   4+ 03B1 C1 90 B8 92
   4+ 03B5 9A 94 6A 96
   4+ 03B9 28 98 D6 99
   4+ 03BD 75 9B 05 9D
   5+ 03C1 89 9E 00 A0                          DW $9E89, $A000, $A16C, $A2CC, $A423, $A570, $A6B4, $A7EF, $A922, $AA4D    ;  31 TO  40
   5+ 03C5 6C A1 CC A2
   5+ 03C9 23 A4 70 A5
   5+ 03CD B4 A6 EF A7
   5+ 03D1 22 A9 4D AA
   6+ 03D5 71 AB 8E AC                          DW $AB71, $AC8E, $ADA4, $AEB4, $AFBD, $B0C1, $B1BF, $B2B8, $B3AC, $B49A    ;  41 TO  50
   6+ 03D9 A4 AD B4 AE
   6+ 03DD BD AF C1 B0
   6+ 03E1 BF B1 B8 B2
   6+ 03E5 AC B3 9A B4
   7+ 03E9 85 B5 6A B6                          DW $B585, $B66A, $B74B, $B828, $B901, $B9D6, $BAA7, $BB75, $BC3F, $BD05    ;  51 TO  60
   7+ 03ED 4B B7 28 B8
   7+ 03F1 01 B9 D6 B9
   7+ 03F5 A7 BA 75 BB
   7+ 03F9 3F BC 05 BD
   8+ 03FD C9 BD 89 BE                          DW $BDC9, $BE89, $BF46, $C000, $C0B7, $C16C, $C21D, $C2CC, $C379, $C423    ;  61 TO  70
   8+ 0401 46 BF 00 C0
   8+ 0405 B7 C0 6C C1
   8+ 0409 1D C2 CC C2
   8+ 040D 79 C3 23 C4
   9+ 0411 CB C4 70 C5                          DW $C4CB, $C570, $C613, $C6B4, $C752, $C7EF, $C88A, $C922, $C9B9, $CA4D    ;  71 TO  80
   9+ 0415 13 C6 B4 C6
   9+ 0419 52 C7 EF C7
   9+ 041D 8A C8 22 C9
   9+ 0421 B9 C9 4D CA
  10+ 0425 E0 CA 71 CB                          DW $CAE0, $CB71, $CC00, $CC8E, $CD1A, $CDA4, $CE2D, $CEB4, $CF39, $CFBD    ;  81 TO  90
  10+ 0429 00 CC 8E CC
  10+ 042D 1A CD A4 CD
  10+ 0431 2D CE B4 CE
  10+ 0435 39 CF BD CF
  11+ 0439 40 D0 C1 D0                          DW $D040, $D0C1, $D141, $D1BF, $D23C, $D2B8, $D332, $D3AC, $D424, $D49A    ;  91 TO 100
  11+ 043D 41 D1 BF D1
  11+ 0441 3C D2 B8 D2
  11+ 0445 32 D3 AC D3
  11+ 0449 24 D4 9A D4
  12+ 044D 10 D5 85 D5                          DW $D510, $D585, $D5F8, $D66A, $D6DB, $D74B, $D7BA, $D828, $D895, $D901    ; 101 TO 110
  12+ 0451 F8 D5 6A D6
  12+ 0455 DB D6 4B D7
  12+ 0459 BA D7 28 D8
  12+ 045D 95 D8 01 D9
  13+ 0461 6C D9 D6 D9                          DW $D96C, $D9D6, $DA3F, $DAA7, $DB0E, $DB75, $DBDA, $DC3F, $DCA2, $DD05    ; 111 TO 120
  13+ 0465 3F DA A7 DA
  13+ 0469 0E DB 75 DB
  13+ 046D DA DB 3F DC
  13+ 0471 A2 DC 05 DD
  14+ 0475 67 DD C9 DD                          DW $DD67, $DDC9, $DE29, $DE89, $DEE8, $DF46, $DFA3, $E000, $E05C, $E0B7    ; 121 TO 130
  14+ 0479 29 DE 89 DE
  14+ 047D E8 DE 46 DF
  14+ 0481 A3 DF 00 E0
  14+ 0485 5C E0 B7 E0
  15+ 0489 12 E1 6C E1                          DW $E112, $E16C, $E1C5, $E21D, $E275, $E2CC, $E323, $E379, $E3CE, $E423    ; 131 TO 140
  15+ 048D C5 E1 1D E2
  15+ 0491 75 E2 CC E2
  15+ 0495 23 E3 79 E3
  15+ 0499 CE E3 23 E4
  16+ 049D 77 E4 CB E4                          DW $E477, $E4CB, $E51E, $E570, $E5C2, $E613, $E664, $E6B4, $E703, $E752    ; 141 TO 150
  16+ 04A1 1E E5 70 E5
  16+ 04A5 C2 E5 13 E6
  16+ 04A9 64 E6 B4 E6
  16+ 04AD 03 E7 52 E7
  17+ 04B1 A1 E7 EF E7                          DW $E7A1, $E7EF, $E83D, $E88A, $E8D6, $E922, $E96E, $E9B9, $EA03, $EA4D    ; 151 TO 160
  17+ 04B5 3D E8 8A E8
  17+ 04B9 D6 E8 22 E9
  17+ 04BD 6E E9 B9 E9
  17+ 04C1 03 EA 4D EA
  18+ 04C5 97 EA E0 EA                          DW $EA97, $EAE0, $EB29, $EB71, $EBB9, $EC00, $EC47, $EC8E, $ECD4, $ED1A    ; 161 TO 170
  18+ 04C9 29 EB 71 EB
  18+ 04CD B9 EB 00 EC
  18+ 04D1 47 EC 8E EC
  18+ 04D5 D4 EC 1A ED
  19+ 04D9 5F ED A4 ED                          DW $ED5F, $EDA4, $EDE8, $EE2D, $EE70, $EEB4, $EEF7, $EF39, $EF7B, $EFBD    ; 171 TO 180
  19+ 04DD E8 ED 2D EE
  19+ 04E1 70 EE B4 EE
  19+ 04E5 F7 EE 39 EF
  19+ 04E9 7B EF BD EF
  20+ 04ED FF EF 40 F0                          DW $EFFF, $F040, $F081, $F0C1, $F101, $F141, $F180, $F1BF, $F1FE, $F23C    ; 181 TO 190
  20+ 04F1 81 F0 C1 F0
  20+ 04F5 01 F1 41 F1
  20+ 04F9 80 F1 BF F1
  20+ 04FD FE F1 3C F2
  21+ 0501 7A F2 B8 F2                          DW $F27A, $F2B8, $F2F5, $F332, $F36F, $F3AC, $F3E8, $F424, $F45F, $F49A    ; 191 TO 290
  21+ 0505 F5 F2 32 F3
  21+ 0509 6F F3 AC F3
  21+ 050D E8 F3 24 F4
  21+ 0511 5F F4 9A F4
  22+ 0515 D5 F4 10 F5                          DW $F4D5, $F510, $F54A, $F585, $F5BE, $F5F8, $F631, $F66A, $F6A3, $F6DB    ; 201 TO 210
  22+ 0519 4A F5 85 F5
  22+ 051D BE F5 F8 F5
  22+ 0521 31 F6 6A F6
  22+ 0525 A3 F6 DB F6
  23+ 0529 13 F7 4B F7                          DW $F713, $F74B, $F783, $F7BA, $F7F1, $F828, $F85F, $F895, $F8CB, $F901    ; 211 TO 220
  23+ 052D 83 F7 BA F7
  23+ 0531 F1 F7 28 F8
  23+ 0535 5F F8 95 F8
  23+ 0539 CB F8 01 F9
  24+ 053D 36 F9 6C F9                          DW $F936, $F96C, $F9A1, $F9D6, $FA0A, $FA3F, $FA73, $FAA7, $FADB, $FB0E    ; 221 TO 230
  24+ 0541 A1 F9 D6 F9
  24+ 0545 0A FA 3F FA
  24+ 0549 73 FA A7 FA
  24+ 054D DB FA 0E FB
  25+ 0551 42 FB 75 FB                          DW $FB42, $FB75, $FBA7, $FBDA, $FC0C, $FC3F, $FC71, $FCA2, $FCD4, $FD05    ; 231 TO 240
  25+ 0555 A7 FB DA FB
  25+ 0559 0C FC 3F FC
  25+ 055D 71 FC A2 FC
  25+ 0561 D4 FC 05 FD
  26+ 0565 36 FD 67 FD                          DW $FD36, $FD67, $FD98, $FDC9, $FDF9, $FE29, $FE59, $FE89, $FEB8, $FEE8    ; 241 TO 250
  26+ 0569 98 FD C9 FD
  26+ 056D F9 FD 29 FE
  26+ 0571 59 FE 89 FE
  26+ 0575 B8 FE E8 FE
  27+ 0579 17 FF 46 FF                          DW $FF17, $FF46, $FF75, $FFA3, $FFA3                                       ; 251 TO 255
  27+ 057D 75 FF A3 FF
  27+ 0581 A3 FF
  28+ 0583
  29+ 0583
  30+ 0583
  31+ 0583 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  31+ 0587 20 00 02 00
  31+ 058B 32 00 03 00
  31+ 058F 40 00 04 00
  31+ 0593 4A 00 05 00
  31+ 0597 52 00 06 00
  32+ 059B 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  32+ 059F 60 00 08 00
  32+ 05A3 65 00 09 00
  32+ 05A7 6A 00 0A 00
  32+ 05AB 6E 00 0B 00
  32+ 05AF 72 00 0C 00
  33+ 05B3 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  33+ 05B7 79 00 0E 00
  33+ 05BB 7D 00 0F 00
  33+ 05BF 80 00 10 00
  33+ 05C3 82 00 11 00
  33+ 05C7 85 00 12 00
  34+ 05CB 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  34+ 05CF 8A 00 14 00
  34+ 05D3 8C 00 15 00
  34+ 05D7 8E 00 16 00
  34+ 05DB 90 00 17 00
  34+ 05DF 92 00 18 00
  35+ 05E3 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  35+ 05E7 96 00 1A 00
  35+ 05EB 98 00 1B 00
  35+ 05EF 99 00 1C 00
  35+ 05F3 9B 00 1D 00
  35+ 05F7 9D 00 1E 00
  36+ 05FB 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  36+ 05FF A0 00 20 00
  36+ 0603 A1 00 21 00
  36+ 0607 A2 00 22 00
  36+ 060B A4 00 23 00
  36+ 060F A5 00 24 00
  37+ 0613 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  37+ 0617 A7 00 26 00
  37+ 061B A9 00 27 00
  37+ 061F AA 00 28 00
  37+ 0623 AB 00 29 00
  37+ 0627 AC 00 2A 00
  38+ 062B AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  38+ 062F AE 00 2C 00
  38+ 0633 AF 00 2D 00
  38+ 0637 B0 00 2E 00
  38+ 063B B1 00 2F 00
  38+ 063F B2 00 30 00
  39+ 0643 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  39+ 0647 B4 00 32 00
  39+ 064B B5 00 33 00
  39+ 064F B6 00 34 00
  39+ 0653 B7 00 35 00
  39+ 0657 B8 00 36 00
  40+ 065B B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  40+ 065F B9 00 38 00
  40+ 0663 BA 00 39 00
  40+ 0667 BB 00 3A 00
  40+ 066B BC 00 3B 00
  40+ 066F BD 00 3C 00
  41+ 0673 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  41+ 0677 BF 00 3F 00
  41+ 067B C0 00 40 00
  41+ 067F C1 00 42 00
  41+ 0683 C2 00 43 00
  41+ 0687 C3 00 45 00
  42+ 068B C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  42+ 068F C5 00 48 00
  42+ 0693 C6 00 48 00
  42+ 0697 C7 00 4A 00
  42+ 069B C8 00 4C 00
  42+ 069F C9 00 4D 00
  43+ 06A3 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  43+ 06A7 CB 00 52 00
  43+ 06AB CC 00 53 00
  43+ 06AF CD 00 55 00
  43+ 06B3 CE 00 57 00
  43+ 06B7 CF 00 58 00
  44+ 06BB D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  44+ 06BF D1 00 5C 00
  44+ 06C3 D2 00 5E 00
  44+ 06C7 D3 00 61 00
  44+ 06CB D4 00 64 00
  44+ 06CF D5 00 66 00
  45+ 06D3 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  45+ 06D7 D6 00 69 00
  45+ 06DB D7 00 6A 00
  45+ 06DF D7 00 6B 00
  45+ 06E3 D8 00 6C 00
  45+ 06E7 D8 00 6D 00
  46+ 06EB D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  46+ 06EF D9 00 6F 00
  46+ 06F3 D9 00 70 00
  46+ 06F7 DA 00 71 00
  46+ 06FB DB 00 72 00
  46+ 06FF DC 00 75 00
  47+ 0703 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  47+ 0707 DE 00 7B 00
  47+ 070B DF 00 7E 00
  47+ 070F E0 00 80 00
  47+ 0713 E1 00 83 00
  47+ 0717 E2 00 86 00
  48+ 071B E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  48+ 071F E4 00 8C 00
  48+ 0723 E5 00 8F 00
  48+ 0727 E6 00 92 00
  48+ 072B E7 00 95 00
  48+ 072F E8 00 99 00
  49+ 0733 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  49+ 0737 EA 00 9F 00
  49+ 073B EB 00 A3 00
  49+ 073F EC 00 A6 00
  49+ 0743 ED 00 AA 00
  49+ 0747 EE 00 AE 00
  50+ 074B EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  50+ 074F F0 00 B6 00
  50+ 0753 F1 00 B9 00
  50+ 0757 F2 00 BE 00
  50+ 075B F3 00 C2 00
  50+ 075F F4 00 C6 00
  51+ 0763 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  51+ 0767 F6 00 CF 00
  51+ 076B F7 00 D3 00
  51+ 076F F8 00 D8 00
  51+ 0773 F8 00 D9 00
  51+ 0777 F9 00 DC 00
  52+ 077B FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  52+ 077F FB 00 E6 00
  52+ 0783 FB 00 E9 00
  52+ 0787 FC 00 EB 00
  52+ 078B FD 00 F0 00
  52+ 078F FE 00 F6 00
  53+ 0793 FF 00 FB 00                          DW $FF, 251
  54+ 0797              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ../../Tables/logtable.asm
1093  0797                                  DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1094  0797                                  ASSERT $-MathsTablesAddr <8912, Bank code leaks over 8K boundary
1095  0797              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1096  0797                                  SLOT    KeyboardAddr
1097  0797                                  PAGE    BankKeyboard
1098  0797                                  ORG SoundAddr, BankKeyboard
1099  E000                                  INCLUDE "../../Hardware/keyboard.asm"
# file opened: ../../Hardware/keyboard.asm
   1+ E000              ;
   2+ E000              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ E000              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ E000              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ E000              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ E000              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ E000              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ E000              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ E000              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ E000              ;
  11+ E000              ; Keyboard
  12+ E000              ;
  13+ E000              ;   0      1       2       3       4       5        6       7       8       9
  14+ E000              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ E000              ;   10     11      12      13      14      15       16      17      18      19
  16+ E000              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ E000              ;   20     21      22      23      24      25       26      27      28      29
  18+ E000              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ E000              ;   30     31      32      33      34      35       36      37      38      39
  20+ E000              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ E000              ;
  22+ E000              ; ZX Spectrum Next Compound keys
  23+ E000              ;   40     41       42       43      44      45       46       47
  24+ E000              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ E000              ;   48       49      50       51         52          53       54      55
  26+ E000              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ E000              ; Default map
  28+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ E000              ;   0          1           2             3              4           5           6           7           8           9
  30+ E000              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ E000              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ E000              ;                                                                                                       Find System
  33+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ E000              ;   10         11          12            13             14          15          16          17          18          19
  35+ E000              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ E000              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ E000              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ E000              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ E000              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ E000              ;   PlanetData                                                      PauseGame   SaveGame
  42+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ E000              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ E000              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ E000              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ E000              ;              ResumeGame                WarpJump
  47+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ E000              ;   40         41          42            43             44          45          46          47          48          49
  49+ E000              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ E000              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ E000              ;
  52+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ E000              ;   50         51          52            53             54          55
  54+ E000              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ E000              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ E000              ;
  57+ E000
  58+ E000              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ E000
  60+ E000              c_Pressed_Front         equ 0  * 2
  61+ E000              c_Pressed_Aft           equ 1  * 2
  62+ E000              c_Pressed_Left          equ 2  * 2
  63+ E000              c_Pressed_Right         equ 3  * 2
  64+ E000              c_Pressed_RollLeft      equ 4  * 2
  65+ E000              c_Pressed_RollRight     equ 5  * 2
  66+ E000              c_Pressed_Dive          equ 6  * 2
  67+ E000              c_Pressed_Climb         equ 7  * 2
  68+ E000              c_Pressed_Accellerate   equ 8  * 2
  69+ E000              c_Pressed_Decellerate   equ 9  * 2
  70+ E000              c_Pressed_FireLaser     equ 10 * 2
  71+ E000              c_Pressed_TargetMissle  equ 11 * 2
  72+ E000              c_Pressed_FireMissile   equ 12 * 2
  73+ E000              c_Pressed_UnarmMissile  equ 13 * 2
  74+ E000              c_Pressed_ECM           equ 14 * 2
  75+ E000              c_Pressed_EnergyBomb    equ 15 * 2
  76+ E000              c_Pressed_EscapePod     equ 16 * 2
  77+ E000              c_Pressed_DockingComp   equ 17 * 2
  78+ E000              c_Pressed_Hyperspace    equ 18 * 2
  79+ E000              c_Pressed_Distance      equ 19 * 2
  80+ E000              c_Pressed_HomeCursor    equ 20 * 2
  81+ E000              c_Pressed_Launch        equ 21 * 2
  82+ E000              c_Pressed_BuyCargo      equ 22 * 2
  83+ E000              c_Pressed_SellCargo     equ 23 * 2
  84+ E000              c_Pressed_Equip         equ 24 * 2
  85+ E000              c_Pressed_GalacticChrt  equ 25 * 2
  86+ E000              c_Pressed_LocalChart    equ 26 * 2
  87+ E000              c_Pressed_MarketPrices  equ 27 * 2
  88+ E000              c_Pressed_Status        equ 28 * 2
  89+ E000              c_Pressed_Inventory     equ 29 * 2
  90+ E000              c_Pressed_GameSkip      equ 30 * 2
  91+ E000              c_Pressed_Save          equ 31 * 2
  92+ E000              c_Pressed_Freeze        equ 32 * 2
  93+ E000              c_Pressed_Resume        equ 33 * 2
  94+ E000              c_Pressed_Recentre      equ 34 * 2
  95+ E000              c_Pressed_Quit          equ 35 * 2
  96+ E000              c_Pressed_PlanetData    equ 36 * 2
  97+ E000              c_Pressed_CursorUp      equ 37 * 2
  98+ E000              c_Pressed_CursorDown    equ 38 * 2
  99+ E000              c_Pressed_Find          equ 39 * 2
 100+ E000              c_Pressed_Yes           equ 40 * 2
 101+ E000              c_Pressed_No            equ 41 * 2
 102+ E000              c_Pressed_Warp          equ 42 * 2
 103+ E000              c_Pressed_ExtMarket     equ 43 * 2
 104+ E000              c_Pressed_ExtEquip      equ 44 * 2
 105+ E000              c_Pressed_ExtPlanet     equ 45 * 2
 106+ E000              c_Pressed_ExtNearest    equ 46 * 2
 107+ E000              c_Pressed_ExtCurUp      equ 47 * 2
 108+ E000              c_Pressed_ExtCurDown    equ 48 * 2
 109+ E000              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ E000              c_Pressed_ExtCurRight   equ 50 * 2
 111+ E000              c_Pressed_ExtDelete     equ 51 * 2
 112+ E000              c_Pressed_ExtFindSystem equ 52 * 2
 113+ E000              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ E000              c_Pressed_ExtInventory  equ 54 * 2
 115+ E000              c_Pressed_ExtStatus     equ 55 * 2
 116+ E000              c_Pressed_ExtGlactic    equ 56 * 2
 117+ E000              c_Pressed_ExtLocal      equ 57 * 2
 118+ E000              c_Pressed_ExtSystemJump equ 58 * 2
 119+ E000
 120+ E000              ; half row 1
 121+ E000              VK_CAPS  				equ 0
 122+ E000              VK_Z  					equ 1
 123+ E000              VK_X  					equ 2
 124+ E000              VK_C  					equ 3
 125+ E000              VK_V  					equ 4
 126+ E000              ; half row 2
 127+ E000              VK_A  					equ 5
 128+ E000              VK_S  					equ 6
 129+ E000              VK_D  					equ 7
 130+ E000              VK_F					equ 8
 131+ E000              VK_G  					equ 9
 132+ E000              ; half row 3
 133+ E000              VK_Q  					equ 10
 134+ E000              VK_W  					equ 11
 135+ E000              VK_E  					equ 12
 136+ E000              VK_R  					equ 13
 137+ E000              VK_T  					equ 14
 138+ E000              ; half row 4
 139+ E000              VK_1  					equ 15
 140+ E000              VK_2  					equ 16
 141+ E000              VK_3  					equ 17
 142+ E000              VK_4  					equ 18
 143+ E000              VK_5  					equ 19
 144+ E000              ; half row 5
 145+ E000              VK_0 					equ 20
 146+ E000              VK_9 					equ 21
 147+ E000              VK_8 					equ 22
 148+ E000              VK_7 					equ 23
 149+ E000              VK_6 					equ 24
 150+ E000              ; half row 6
 151+ E000              VK_P  					equ 25
 152+ E000              VK_O  					equ 26
 153+ E000              VK_I  					equ 27
 154+ E000              VK_U  					equ 28
 155+ E000              VK_Y  					equ 29
 156+ E000              ; half row 7
 157+ E000              VK_ENTER 				equ 30
 158+ E000              VK_L  					equ 31
 159+ E000              VK_K  					equ 32
 160+ E000              VK_J  					equ 33
 161+ E000              VK_H  					equ 34
 162+ E000              ; half row 8
 163+ E000              VK_SPACE 				equ 35
 164+ E000              VK_SYM  				equ 36
 165+ E000              VK_M  					equ 37
 166+ E000              VK_N  					equ 38
 167+ E000              VK_B  					equ 39
 168+ E000              ; Extended Group B0
 169+ E000              VK_SEMI                 equ 40
 170+ E000              VK_QUOTE                equ 41
 171+ E000              VK_COMMA                equ 42
 172+ E000              VK_STOP                 equ 43
 173+ E000              VK_UP                   equ 44
 174+ E000              VK_DOWN                 equ 45
 175+ E000              VK_LEFT                 equ 46
 176+ E000              VK_RIGHT                equ 47
 177+ E000              ; Extended Group B1
 178+ E000              VK_DELETE               equ 48
 179+ E000              VK_EDIT                 equ 49
 180+ E000              VK_BREAK                equ 50
 181+ E000              VK_INV_VID              equ 51
 182+ E000              VK_TRUE_VID             equ 52
 183+ E000              VK_GRAPH                equ 53
 184+ E000              VK_EXTCAPS              equ 54
 185+ E000              VK_EXTEND               equ 55
 186+ E000              ;KeyboardMapping
 187+ E000              KeyCode_Front        	equ VK_1
 188+ E000              KeyCode_Aft          	equ VK_2
 189+ E000              KeyCode_Left         	equ VK_3
 190+ E000              KeyCode_Right        	equ VK_4
 191+ E000              KeyCode_RollLeft     	equ VK_O
 192+ E000              KeyCode_RollRight    	equ VK_P
 193+ E000              KeyCode_Dive         	equ VK_Q
 194+ E000              KeyCode_Climb        	equ VK_A
 195+ E000              KeyCode_Accellerate  	equ VK_W
 196+ E000              KeyCode_Decellerate  	equ VK_S
 197+ E000              KeyCode_FireLaser    	equ VK_SPACE
 198+ E000              KeyCode_TargetMissle 	equ VK_T
 199+ E000              KeyCode_FireMissile  	equ VK_STOP
 200+ E000              KeyCode_Find        	equ VK_F
 201+ E000              KeyCode_UnarmMissile 	equ VK_R
 202+ E000              KeyCode_ECM          	equ VK_E
 203+ E000              KeyCode_EnergyBomb   	equ VK_U
 204+ E000              KeyCode_EscapePod    	equ VK_CAPS
 205+ E000              KeyCode_DockingComp  	equ VK_N
 206+ E000              KeyCode_Hyperspace   	equ VK_H
 207+ E000              KeyCode_Distance     	equ VK_J
 208+ E000              KeyCode_HomeCursor   	equ VK_G
 209+ E000              KeyCode_Launch       	equ VK_L
 210+ E000              KeyCode_BuyCargo     	equ VK_B
 211+ E000              KeyCode_SellCargo    	equ VK_V
 212+ E000              KeyCode_Equip        	equ VK_C
 213+ E000              KeyCode_GalacticChrt 	equ VK_5
 214+ E000              KeyCode_LocalChart   	equ VK_6
 215+ E000              KeyCode_MarketPrices 	equ VK_7
 216+ E000              KeyCode_Status       	equ VK_8
 217+ E000              KeyCode_Inventory    	equ VK_9
 218+ E000              KeyCode_GameSkip     	equ VK_Z
 219+ E000              KeyCode_Save         	equ VK_O
 220+ E000              KeyCode_Freeze       	equ VK_B
 221+ E000              KeyCode_Resume       	equ VK_L
 222+ E000              KeyCode_Recentre     	equ VK_STOP
 223+ E000              KeyCode_Quit         	equ VK_Y
 224+ E000              KeyCode_PlanetData   	equ VK_0
 225+ E000              KeyCode_CursorUp        equ VK_Q
 226+ E000              KeyCode_CursorDown      equ VK_A
 227+ E000              KeyCode_PressedYes      equ VK_Y
 228+ E000              KeyCode_PressedNo       equ VK_N
 229+ E000              KeyCode_Warp            equ VK_J
 230+ E000              KeyCode_ExtMarket       equ VK_SEMI
 231+ E000              KeyCode_ExtEquip        equ VK_QUOTE
 232+ E000              KeyCode_ExtPlanet       equ VK_COMMA
 233+ E000              KeyCode_ExtNearest      equ VK_STOP
 234+ E000              KeyCode_ExtCurUp        equ VK_UP
 235+ E000              KeyCode_ExtCurDown      equ VK_DOWN
 236+ E000              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ E000              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ E000              KeyCode_ExtDelete       equ VK_DELETE
 239+ E000              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ E000              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ E000              KeyCode_ExtInventory    equ VK_INV_VID
 242+ E000              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ E000              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ E000              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ E000              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ E000
 247+ E000 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ E037              c_KeyBoardLen 			equ $ - Keys
 249+ E037 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ E041 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ E045 EF DF BF 7F
 251+ E049              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ E049              ; of updating this table with the respective location to look up
 253+ E049              ; key list sequence is in table above
 254+ E049 0F E0 10 E0  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ E04D 11 E0 12 E0
 254+ E051 1A E0
 255+ E053 19 E0 0A E0                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ E057 05 E0 0B E0
 255+ E05B 06 E0
 256+ E05D 23 E0 0E E0                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ E061 2B E0 0D E0
 256+ E065 0C E0
 257+ E067 1C E0 00 E0                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ E06B 26 E0 22 E0
 257+ E06F 21 E0
 258+ E071 09 E0 1F E0                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ E075 27 E0 04 E0
 258+ E079 03 E0
 259+ E07B 13 E0 18 E0                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ E07F 17 E0 16 E0
 259+ E083 15 E0
 260+ E085 01 E0 1A E0                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ E089 27 E0 1F E0
 260+ E08D 2B E0
 261+ E08F 1D E0 14 E0                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ E093 0A E0 05 E0
 261+ E097 08 E0
 262+ E099 1D E0 26 E0                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ E09D 21 E0 28 E0
 262+ E0A1 29 E0
 263+ E0A3 2A E0 2B E0                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ E0A7 2C E0 2D E0
 263+ E0AB 2E E0
 264+ E0AD 2F E0 30 E0                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ E0B1 31 E0 32 E0
 264+ E0B5 33 E0
 265+ E0B7 34 E0 35 E0                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ E0BB 36 E0 37 E0
 266+ E0BF
 267+ E0BF
 268+ E0BF 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 268+ E0C3 56
 269+ E0C4 41 53 44 46                          DB "A","S","D","F","G"
 269+ E0C8 47
 270+ E0C9 51 57 45 52                          DB "Q","W","E","R","T"
 270+ E0CD 54
 271+ E0CE 31 32 33 34                          DB "1","2","3","4","5"
 271+ E0D2 35
 272+ E0D3 30 39 38 37                          DB "0","9","8","7","6"
 272+ E0D7 36
 273+ E0D8 50 4F 49 55                          DB "P","O","I","U","Y"
 273+ E0DC 59
 274+ E0DD 3E 4C 4B 4A                          DB ">","L","K","J","H"
 274+ E0E1 48
 275+ E0E2 20 5E 4D 4E                          DB " ","^","M","N","B"
 275+ E0E6 42
 276+ E0E7 3B 22 2C 2E                          DB ";",'"',",",".","^","v","[","]"  ; Extended keys register 0 semicolon, quote, comman, fullstop, up, down, left, right
 276+ E0EB 5E 76 5B 5D
 277+ E0EF 23 65 62 69                          DB "#","e","b","i","t","g","c","x"  ; Extended keys register 1 delete, edit, break, inv video, true video graph, caps, extend
 277+ E0F3 74 67 63 78
 278+ E0F7              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 279+ E0F7              ; for the raw key press status
 280+ E0F7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 281+ E0F7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 282+ E0F7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 283+ E0F7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 284+ E0F7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 285+ E0F7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 286+ E0F7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 287+ E0F7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 288+ E0F7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 289+ E0F7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 290+ E0F7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 291+ E0F7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 292+ E0F7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 293+ E0F7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 294+ E0F7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 295+ E0F7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 296+ E0F7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 297+ E0F7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 298+ E0F7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 299+ E0F7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 300+ E0F7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 301+ E0F7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 302+ E0F7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 303+ E0F7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 304+ E0F7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 305+ E0F7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 306+ E0F7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 307+ E0F7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 308+ E0F7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 309+ E0F7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 310+ E0F7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 311+ E0F7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 312+ E0F7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 313+ E0F7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 314+ E0F7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 315+ E0F7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 316+ E0F7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 317+ E0F7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 318+ E0F7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 319+ E0F7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 320+ E0F7              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 321+ E0F7
 322+ E0F7
 323+ E0F7              MIsKeyPressed:          MACRO   keyaddress, misstarget
 324+ E0F7 ~                                    MMUSelectKeyboard
 325+ E0F7 ~                                    ld      hl,(keyaddress)
 326+ E0F7 ~                                    ld      a,(hl)
 327+ E0F7 ~                                    JumpIfAIsZero   misstarget
 328+ E0F7                                      ENDM
 329+ E0F7
 330+ E0F7
 331+ E0F7 21 00 E0     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 332+ E0FA 11 37 00                             ld		de, c_KeyBoardLen               ;
 333+ E0FD 3E 00                                ld		a,0                             ;
 334+ E0FF CD 93 68                             call	memfill_dma                     ;
 335+ E102 C9                                   ret                                     ;
 336+ E103
 337+ E103
 338+ E103
 339+ E103 DD 21 37 E0  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 340+ E107 21 41 E0                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 341+ E10A 0E 08                                ld		c,8                             ; 8 ports to ready
 342+ E10C 11 00 E0                             ld      de,Keys                         ; ix = table of key states from raw read
 343+ E10F 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 344+ E110 DB FE                                in		a,($FE)							; read port to a
 345+ E112 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 346+ E115 DD 23                                inc     ix
 347+ E117 23                                   inc		hl                              ; and ready for next read
 348+ E118 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 349+ E11A 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 350+ E11B 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 351+ E11D FD 6F                                ld      iyl,a
 352+ E11F                                      ZeroA
 352+ E11F AF          >                        xor a
 353+ E120 C3 2D E1                             jp      .SetKey
 354+ E123 20 0B                                jr		nz,.SkipKeySet
 355+ E125 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 356+ E127 1A                                   ld      a,(de)                          ; get current keystate
 357+ E128 FE 02                                cp      2
 358+ E12A 28 02                                jr      z,.AlreadyHeld
 359+ E12C 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 360+ E12D 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 361+ E12E FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 362+ E130 13           .SkipKeySet:	        inc		de								; move to next key
 363+ E131 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 364+ E133 0D                                   dec     c                               ; thats one row of bits all processed
 365+ E134 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 366+ E136              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 366+ E136 01 3B 24    >            ld bc,$243B
 366+ E139 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 366+ E13B ED 79       >            out (c),a
 366+ E13D 04          >            inc b
 366+ E13E ED 78       >            in a,(c)
 367+ E140 32 3F E0                             ld      (RawKeys+8),a                   ; save to extended slot
 368+ E143 06 08                                ld      b,8
 369+ E145 21 28 E0                             ld      hl,Keys + VK_SEMI
 370+ E148 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 371+ E149 30 04                                jr      nc,.SetExtend0KeyPressed
 372+ E14B              .Extend0NotPressed:     ZeroA
 372+ E14B AF          >                        xor a
 373+ E14C C3 55 E1                             jp      .SetExtend0Key
 374+ E14F 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 375+ E150 FE 02                                cp      2
 376+ E152 28 02                                jr      z,.Extend0AlreadyHeld
 377+ E154 3C                                   inc     a
 378+ E155 77           .SetExtend0Key:         ld      (hl),a
 379+ E156 23           .Extend0AlreadyHeld:    inc     hl
 380+ E157 10 EF                                djnz    .ProcessExtend0
 381+ E159              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 381+ E159 01 3B 24    >            ld bc,$243B
 381+ E15C 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 381+ E15E ED 79       >            out (c),a
 381+ E160 04          >            inc b
 381+ E161 ED 78       >            in a,(c)
 382+ E163 32 40 E0                             ld      (RawKeys+9),a                      ; save to extended slot
 383+ E166 06 08                                ld      b,8
 384+ E168 21 30 E0                             ld      hl,Keys + VK_DELETE
 385+ E16B 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 386+ E16C 30 04                                jr      nc,.SetExtend1KeyPressed
 387+ E16E              .Extend1NotPressed:     ZeroA
 387+ E16E AF          >                        xor a
 388+ E16F C3 78 E1                             jp      .SetExtend1Key
 389+ E172 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 390+ E173 FE 02                                cp      2
 391+ E175 28 02                                jr      z,.Extend1AlreadyHeld
 392+ E177 3C                                   inc     a
 393+ E178 77           .SetExtend1Key:         ld      (hl),a
 394+ E179 23           .Extend1AlreadyHeld:    inc     hl
 395+ E17A 10 EF                                djnz    .ProcessExtend1
 396+ E17C C9                                   ret
 397+ E17D
 398+ E17D
 399+ E17D
 400+ E17D              GetKeyStateAddressDE:   MACRO
 401+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 402+ E17D ~                                    add     hl,a
 403+ E17D ~                                    ld      e,(hl)
 404+ E17D ~                                    inc     hl
 405+ E17D ~                                    ld      d,(hl)                          ; now de = address in keypress list
 406+ E17D                                      ENDM
 407+ E17D
 408+ E17D              GetKeyStateAddressHL:   MACRO
 409+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 410+ E17D ~                                    add     hl,a
 411+ E17D ~                                    ld      a,(hl)
 412+ E17D ~                                    inc     hl
 413+ E17D ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 414+ E17D ~                                    ld      l,a
 415+ E17D                                      ENDM
 416+ E17D
 417+ E17D
 418+ E17D              ;;old debug codeCurrentX            DB 0
 419+ E17D              ;;old debug codeCurrentY            DB 0
 420+ E17D              ;;old debug code
 421+ E17D              ;;old debug codedisplayKeyStatus:       xor         a
 422+ E17D              ;;old debug code                        ld          (CurrentX),a
 423+ E17D              ;;old debug code                        ld          hl,RawKeys
 424+ E17D              ;;old debug code                        ld          a,(hl)
 425+ E17D              ;;old debug code                        and         %00011111
 426+ E17D              ;;old debug code                        ld          b,5
 427+ E17D              ;;old debug code.displayLoop:           push        bc,,hl
 428+ E17D              ;;old debug code                        rra
 429+ E17D              ;;old debug code                        jr          c,.displayNoPress
 430+ E17D              ;;old debug code.displayPress:          push        af
 431+ E17D              ;;old debug code                        ld          a,(CurrentX)
 432+ E17D              ;;old debug code                        ld          e,a
 433+ E17D              ;;old debug code                        ld          a,(CurrentY)
 434+ E17D              ;;old debug code                        ld          d,a
 435+ E17D              ;;old debug code                        ld          a,'*'
 436+ E17D              ;;old debug code                        MMUSelectLayer1
 437+ E17D              ;;old debug code                        call        l1_print_char
 438+ E17D              ;;old debug code                        ld          a,(CurrentX)
 439+ E17D              ;;old debug code                        add         a,8
 440+ E17D              ;;old debug code                        ld          (CurrentX),a
 441+ E17D              ;;old debug code                        pop         af
 442+ E17D              ;;old debug code                        pop         bc,,hl
 443+ E17D              ;;old debug code                        djnz        .displayLoop
 444+ E17D              ;;old debug code                        ret
 445+ E17D              ;;old debug code.displayNoPress:        push        af
 446+ E17D              ;;old debug code                        ld          a,(CurrentX)
 447+ E17D              ;;old debug code                        ld          e,a
 448+ E17D              ;;old debug code                        ld          a,(CurrentY)
 449+ E17D              ;;old debug code                        ld          d,a
 450+ E17D              ;;old debug code                        ld          a,'O'
 451+ E17D              ;;old debug code                        MMUSelectLayer1
 452+ E17D              ;;old debug code                        call        l1_print_char
 453+ E17D              ;;old debug code                        ld          a,(CurrentX)
 454+ E17D              ;;old debug code                        add         a,8
 455+ E17D              ;;old debug code                        ld          (CurrentX),a
 456+ E17D              ;;old debug code                        pop         af
 457+ E17D              ;;old debug code                        pop         bc,,hl
 458+ E17D              ;;old debug code                        djnz        .displayLoop
 459+ E17D              ;;old debug code                        ret
 460+ E17D              ;;old debug code
 461+ E17D              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 462+ E17D              ;;old debug code                        cp  0
 463+ E17D              ;;old debug code                        jr      z,.displayNoUp
 464+ E17D              ;;old debug code                        cp  1
 465+ E17D              ;;old debug code                        jr      z,.displayUp
 466+ E17D              ;;old debug code.displayHeld:           ld      de,8*15
 467+ E17D              ;;old debug code                        ld      a,"*"
 468+ E17D              ;;old debug code                        MMUSelectLayer1
 469+ E17D              ;;old debug code                        call        l1_print_char
 470+ E17D              ;;old debug code                        ret
 471+ E17D              ;;old debug code.displayUp:             ld      de,8*15
 472+ E17D              ;;old debug code                        ld      a,"+"
 473+ E17D              ;;old debug code                        MMUSelectLayer1
 474+ E17D              ;;old debug code                        call        l1_print_char
 475+ E17D              ;;old debug code                        ret
 476+ E17D              ;;old debug code.displayNoUp:             ld      de,8*15
 477+ E17D              ;;old debug code                        ld      a,"O"
 478+ E17D              ;;old debug code                        MMUSelectLayer1
 479+ E17D              ;;old debug code                        call        l1_print_char
 480+ E17D              ;;old debug code                        ret
 481+ E17D              ;;old debug code
 482+ E17D
 483+ E17D
 484+ E17D              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 485+ E17D              ; it will have to be let go to reset of 0 and scan again
 486+ E17D              ; Deprecated as not used as yet
 487+ E17D              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 488+ E17D              ;;;;;;                        push    hl
 489+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 490+ E17D              ;;;;;;                        pop     hl                              ; get key address into hl
 491+ E17D              ;;;;;;                        push    hl
 492+ E17D              ;;;;;;                        ld      a,(hl)
 493+ E17D              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 494+ E17D              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 495+ E17D              ;;;;;;                        ret
 496+ E17D              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 497+ E17D              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 498+ E17D              ;;;;;;                        push    hl
 499+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 500+ E17D              ;;;;;;                        pop     hl
 501+ E17D              ;;;;;;                        push    hl
 502+ E17D              ;;;;;;                        ld      a,(hl)
 503+ E17D              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 504+ E17D              ;;;;;;                        pop     hl
 505+ E17D              ;;;;;;                        ret
 506+ E17D
 507+ E17D              ; Gets the current keystate of the c_Pressed Key in a register
 508+ E17D 21 00 E0     get_vkey_a_state:       ld      hl,Keys
 509+ E180 ED 31                                add     hl,a
 510+ E182 7E                                   ld      a,(hl)
 511+ E183 C9                                   ret
 512+ E184
 513+ E184 21 00 E0     is_vkey_held:           ld      hl,Keys
 514+ E187 ED 31                                add     hl,a
 515+ E189 7E                                   ld      a,(hl)
 516+ E18A E6 02                                and     Bit1Only
 517+ E18C C9                                   ret
 518+ E18D
 519+ E18D 21 00 E0     is_vkey_pressed:        ld      hl,Keys
 520+ E190 ED 31                                add     hl,a
 521+ E192 7E                                   ld      a,(hl)
 522+ E193 FE 01                                cp      1
 523+ E195 C9                                   ret
 524+ E196
 525+ E196              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 525+ E196 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 525+ E199 ED 31       >                        add     hl,a
 525+ E19B 7E          >                        ld      a,(hl)
 525+ E19C 23          >                        inc     hl
 525+ E19D 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 525+ E19E 6F          >                        ld      l,a
 526+ E19F 7E                                   ld      a,(hl)                          ; a = keystate
 527+ E1A0 C9                                   ret
 528+ E1A1
 529+ E1A1              ; sets they keystate of c pressed key in a register to 1 (pressed)
 530+ E1A1              ; This will be used by auto dock
 531+ E1A1              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 531+ E1A1 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 531+ E1A4 ED 31       >                        add     hl,a
 531+ E1A6 7E          >                        ld      a,(hl)
 531+ E1A7 23          >                        inc     hl
 531+ E1A8 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 531+ E1A9 6F          >                        ld      l,a
 532+ E1AA 3E 01                                ld      a,1
 533+ E1AC 77                                   ld      (hl),a
 534+ E1AD C9                                   ret
 535+ E1AE
 536+ E1AE              is_key_up_state:        GetKeyStateAddressHL
 536+ E1AE 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 536+ E1B1 ED 31       >                        add     hl,a
 536+ E1B3 7E          >                        ld      a,(hl)
 536+ E1B4 23          >                        inc     hl
 536+ E1B5 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 536+ E1B6 6F          >                        ld      l,a
 537+ E1B7 7E                                   ld      a,(hl)
 538+ E1B8 FE 00                                cp      0
 539+ E1BA C9                                   ret
 540+ E1BB
 541+ E1BB              ; returns z is set if c_ key is pressed
 542+ E1BB              is_key_pressed:         GetKeyStateAddressHL
 542+ E1BB 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 542+ E1BE ED 31       >                        add     hl,a
 542+ E1C0 7E          >                        ld      a,(hl)
 542+ E1C1 23          >                        inc     hl
 542+ E1C2 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 542+ E1C3 6F          >                        ld      l,a
 543+ E1C4 7E                                   ld      a,(hl)                          ; a = keystate
 544+ E1C5 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 545+ E1C7 C9                                   ret
 546+ E1C8
 547+ E1C8              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 548+ E1C8              is_key_held:            GetKeyStateAddressHL
 548+ E1C8 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 548+ E1CB ED 31       >                        add     hl,a
 548+ E1CD 7E          >                        ld      a,(hl)
 548+ E1CE 23          >                        inc     hl
 548+ E1CF 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 548+ E1D0 6F          >                        ld      l,a
 549+ E1D1 7E                                   ld      a,(hl)                          ; a = keystate
 550+ E1D2 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 551+ E1D4 C9                                   ret
 552+ E1D5
 553+ E1D5              ; checks to see if any key is pressed in the key table
 554+ E1D5 21 00 E0     is_any_key_pressed:     ld      hl,Keys
 555+ E1D8 01 28 00                             ld      bc,40
 556+ E1DB 3E 01                                ld      a,1
 557+ E1DD ED B1                                cpir                                    ; search for the value 1
 558+ E1DF 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 559+ E1E1                                      SetAFalse
 559+ E1E1 3E FF       >                        ld      a,$FF
 560+ E1E3 C9                                   ret
 561+ E1E4 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 562+ E1E6 91                                   sub     c                               ; so a = 40 - c to get to result
 563+ E1E7 C9                                   ret
 564+ E1E8
 565+ E1E8 21 00 E0     is_any_key_held:        ld      hl,Keys
 566+ E1EB 06 28                                ld      b,40
 567+ E1ED 0E 00                                ld      c,0
 568+ E1EF 7E           .KeyReadLoop:           ld      a,(hl)
 569+ E1F0 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 570+ E1F2 C2 FC E1                             jp      nz,.KeyPressed
 571+ E1F5 23                                   inc     hl
 572+ E1F6 0C                                   inc     c
 573+ E1F7 10 F6                                djnz    .KeyReadLoop
 574+ E1F9                                      SetAFalse
 574+ E1F9 3E FF       >                        ld      a,$FF
 575+ E1FB C9                                   ret
 576+ E1FC 79           .KeyPressed:            ld      a,c
 577+ E1FD C9                                   ret
 578+ E1FE
 579+ E1FE
 580+ E1FE 21 41 E0     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 581+ E201 06 08                                ld		b,8                             ; 8 ports to ready
 582+ E203 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 583+ E204 DB FE                                in		a,($FE)							; read port to a
 584+ E206 E6 1F                                and     %00011111
 585+ E208 FE 1F                                cp      %00011111
 586+ E20A 20 F2                                jr      nz ,WaitForNoKey
 587+ E20C 23                                   inc		hl                              ; and ready for next read
 588+ E20D 10 F4                                djnz    .PortReadLoop
 589+ E20F C9                                   ret
 590+ E210
 591+ E210 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 592+ E214 CD FE E1                             call    WaitForNoKey
 593+ E217 21 41 E0     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 594+ E21A 06 08                                ld		b,8                             ; 8 ports to ready
 595+ E21C 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 596+ E21D DB FE                                in		a,($FE)							; read port to a
 597+ E21F E6 1F                                and     %00011111
 598+ E221 FE 1F                                cp      %00011111
 599+ E223 C2 2D E2                             jp      nz,.WaitComplete
 600+ E226 C0                                   ret     nz
 601+ E227 23                                   inc		hl                              ; and ready for next read
 602+ E228 10 F2                                djnz    .PortReadLoop
 603+ E22A C3 17 E2                             jp      .waitKeyLoop
 604+ E22D E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 605+ E231 C9                                   ret
 606+ E232
 607+ E232
 608+ E232 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 609+ E250 00                                   DB  0               ; end of string marker as a safety
 610+ E251 00           InputLength             DB  0               ; Current String length
 611+ E252 00           InputCursor             DB  0               ; Current Cursor Position
 612+ E253 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 613+ E254 00           InputChanged            DB  0
 614+ E255 00           InsertMode              DB  0
 615+ E256              InputLimit              EQU 20
 616+ E256
 617+ E256 21 32 E2     keyboard_copy_input_to_de:  ld      hl,InputString
 618+ E259 3A 52 E2                                 ld      a,(InputCursor)
 619+ E25C FE 00                                    cp      0
 620+ E25E 28 05                                    jr      z,.NoString
 621+ E260 4F                                       ld      c,a
 622+ E261 06 00                                    ld      b,0
 623+ E263 ED B0                                    ldir
 624+ E265 3E 00        .NoString                   ld      a,0
 625+ E267 12                                       ld      (de),a
 626+ E268 C9                                       ret
 627+ E269
 628+ E269               ;Input routine logic
 629+ E269               ;Intialise input state
 630+ E269
 631+ E269              ; Scans the key pressed to determine if its an alpha, returns ascii code or 0 if not alpha
 632+ E269              ; Input a = key pressed, returns with carry set if no alpha else carry is clear
 633+ E269              isKeyAlpha:             JumpIfALTNusng  "A",   .NotAlpha
 633+ E269 FE 41       >                        cp      "A"
 633+ E26B DA 75 E2    >                        jp		c, .NotAlpha
 634+ E26E                                      JumpIfAGTENusng "Z"+1, .NotAlpha
 634+ E26E FE 5B       >                        cp     "Z"+1
 634+ E270 D2 75 E2    >                        jp		nc,.NotAlpha
 635+ E273                                      ClearCarryFlag
 635+ E273 B7          >                        or a
 636+ E274 C9                                   ret
 637+ E275              .NotAlpha               SetCarryFlag
 637+ E275 37          >                        scf
 638+ E276 C9                                   ret
 639+ E277
 640+ E277 3A 52 E2     InsertKeystroke:        ld      a,(InputCursor)                         ; Current Cursor position
 641+ E27A FE 1E                                cp      30                                      ; protect from buffer overflow
 642+ E27C C8                                   ret     z                                       ; .
 643+ E27D 21 32 E2                             ld      hl,InputString                          ; position hl to position in input string
 644+ E280 ED 31                                add     hl,a                                    ; .
 645+ E282 E5                                   push    hl                                      ; save current cursor position
 646+ E283 47                                   ld      b,a                                     ; as a quick optimisation
 647+ E284                                      JumpIfMemFalse InsertMode, .NoCopyNeeded        ; if we are in overtype mode skip copy
 647+ E284 3A 55 E2    >                        ld      a,(InsertMode)
 647+ E287 A7          >                        and     a
 647+ E288 C2 A8 E2    >                        jp      nz, .NoCopyNeeded
 648+ E28B 3A 51 E2                             ld      a,(InputLength)                         ; no need to shuffle string
 649+ E28E B8                                   cp      b                                       ; if we are at the end already
 650+ E28F 78                                   ld      a,b                                     ; .
 651+ E290 CA A8 E2                             jp      z,.NoCopyNeeded                         ; so we can behave like overtype mode
 652+ E293 11 4F E2                             ld      de,InputString+29                       ; now from the end of the string
 653+ E296 21 4E E2                             ld      hl,InputString+28                       ; .
 654+ E299 06 1D                                ld      b,29                                    ; for up to 29 characters
 655+ E29B 4F                                   ld      c,a                                     ; back to the current cursor position
 656+ E29C C5           .CopyLoop:              push    bc                                      ; save current position
 657+ E29D 7E                                   ld      a,(hl)                                  ; now suffle from left char to right char
 658+ E29E 12                                   ld      (de),a                                  ; .
 659+ E29F 2B                                   dec     hl                                      ; moving back one byte at a time
 660+ E2A0 1B                                   dec     de                                      ;
 661+ E2A1 05                                   dec     b                                       ; and reducing the current copy position
 662+ E2A2 79                                   ld      a,c                                     ; have we reached the input cursor pos
 663+ E2A3 B8                                   cp      b                                       ;
 664+ E2A4 C1                                   pop     bc
 665+ E2A5 C2 9C E2                             jp      nz,.CopyLoop
 666+ E2A8 E1           .NoCopyNeeded:          pop     hl
 667+ E2A9 3A B4 E2                             ld      a,(LastKeyPressed)
 668+ E2AC 77                                   ld      (hl),a
 669+ E2AD 21 51 E2                             ld      hl,InputLength
 670+ E2B0 34                                   inc     (hl)
 671+ E2B1 23                                   inc     hl                                      ;  to input cursor as a short cut to logic
 672+ E2B2 34                                   inc     (hl)
 673+ E2B3 C9                                   ret
 674+ E2B4
 675+ E2B4
 676+ E2B4              ; We won't have any auto repeat on input
 677+ E2B4 00           LastKeyPressed:         db 0
 678+ E2B5
 679+ E2B5              initInputText:          ZeroA
 679+ E2B5 AF          >                        xor a
 680+ E2B6 32 52 E2                             ld      (InputCursor),a
 681+ E2B9 32 B4 E2                             ld      (LastKeyPressed),a
 682+ E2BC 32 51 E2                             ld      (InputLength),a
 683+ E2BF                                      SetMemTrue  InsertMode
 683+ E2BF AF          >                        xor     a
 683+ E2C0 32 55 E2    >                        ld      (InsertMode),a
 684+ E2C3                                      SetMemFalse EnterPressed
 684+ E2C3 3E FF       >                        ld      a,$FF
 684+ E2C5 32 53 E2    >                        ld      (EnterPressed),a
 685+ E2C8                                      SetMemFalse InputChanged
 685+ E2C8 3E FF       >                        ld      a,$FF
 685+ E2CA 32 54 E2    >                        ld      (InputChanged),a
 686+ E2CD 21 32 E2                             ld      hl,InputString
 687+ E2D0 06 1E                                ld      b,30
 688+ E2D2 77           .wipeloop:              ld      (hl),a
 689+ E2D3 23                                   inc     hl
 690+ E2D4 10 FC                                djnz    .wipeloop
 691+ E2D6 C9                                   ret
 692+ E2D7
 693+ E2D7              ;;;InputNameV2:            call    is_any_key_pressed              ; scan for key states
 694+ E2D7              ;;;                        cp      $FF                             ; no key means we reset auto repeat
 695+ E2D7              ;;;                        jp      z,.NoKeyPressed                 ;
 696+ E2D7              ;;;.IsItLastKeyHeld:       ld      hl,LastKeyPressed               ; is it the same key as before
 697+ E2D7              ;;;                        cp      (hl)                            ;
 698+ E2D7              ;;;                        ret     z                               ; if so just ignore it to avoid auto repeat
 699+ E2D7              ;;;.SetNewAntiRepeat:      ld      (LastKeyPressed),a
 700+ E2D7              ;;;.CheckKeyPressed:       call    isKeyAlpha
 701+ E2D7              ;;;                        jp      nc,.AlphaKeyPressed
 702+ E2D7              ;;;.CheckSpaceKeyPressed:  cp      " "
 703+ E2D7              ;;;                        jp      z,.SpacePressed
 704+ E2D7              ;;;.CheckEnterPressed:     cp      ">"
 705+ E2D7              ;;;                        jp      z,.EnterPressed
 706+ E2D7              ;;;.CheckLeftPressed:      cp      "["
 707+ E2D7              ;;;                        jp      z,.LeftPressed
 708+ E2D7              ;;;.CheckRightPressed:     cp      "]"
 709+ E2D7              ;;;                        jp      z,.RightPressed
 710+ E2D7              ;;;.CheckDeletePressed:    cp      "#"
 711+ E2D7              ;;;                        jp      z,.DeletePressed
 712+ E2D7              ;;;.AnyOtherKeyIsIgnored:  ret
 713+ E2D7              ;;;.AlphaKeyPressed:       ld      a,(InputLength)
 714+ E2D7              ;;;                        JumpIfAGTENusng 30,.MaxInputReached
 715+ E2D7              ;;;.InsertKey:             call    InsertKeystroke
 716+ E2D7              ;;;                        ret
 717+ E2D7              ;;;.SpacePressed:          call    InsertKeystroke
 718+ E2D7              ;;;                        ret
 719+ E2D7              ;;;.EnterPressed:
 720+ E2D7              ;;;
 721+ E2D7              ;;;.LeftPressed:           ld      a,(InputCusor)
 722+ E2D7              ;;;                        JumpIfAIsZero, .MaxInputReached
 723+ E2D7              ;;;                        dec     a
 724+ E2D7              ;;;                        ld      (InputCursor),a
 725+ E2D7              ;;;                        ret
 726+ E2D7              ;;;.RightPressed:          ld      a,(InputLength)
 727+ E2D7              ;;;                        inc     a
 728+ E2D7              ;;;                        ld      b,a
 729+ E2D7              ;;;                        ld      a,(InputCursor)
 730+ E2D7              ;;;                        JumpIfMemGTENusng b, .MaxInputReached
 731+ E2D7              ;;;                        inc     a
 732+ E2D7              ;;;                        ld      (InputCursor),a
 733+ E2D7              ;;;                        ret
 734+ E2D7              ;;;.DeletaPressed:         ld      a,(InputCusor)
 735+ E2D7              ;;;                        ld      c,a
 736+ E2D7              ;;;                        JumpIfAisZero, .MaxInputReached
 737+ E2D7              ;;;                        ld      a,(InputLength)
 738+ E2D7              ;;;                        JumpIfAisZero, .MaxInputReached
 739+ E2D7              ;;;                        ld      de,InputString
 740+ E2D7              ;;;                        ld      hl,de
 741+ E2D7              ;;;                        inc     hl
 742+ E2D7              ;;;                        ld      a,(InputLength)                 ; copy backwards
 743+ E2D7              ;;;                        dec     c                               ; for string length - curretn cursor
 744+ E2D7              ;;;                        ld      c,a
 745+ E2D7              ;;;                        ld      b,0
 746+ E2D7              ;;;                        ldir
 747+ E2D7              ;;;                        ret
 748+ E2D7              ;;;GOTTOHERE
 749+ E2D7
 750+ E2D7
 751+ E2D7
 752+ E2D7 C9           .MaxInputReached:       ret ; will add a beep later
 753+ E2D8
 754+ E2D8
 755+ E2D8
 756+ E2D8
 757+ E2D8              .NoKeyPressed:          ZeroA
 757+ E2D8 AF          >                        xor a
 758+ E2D9 32 B4 E2                             ld      (LastKeyPressed),a              ; Clear last key pressed
 759+ E2DC
 760+ E2DC
 761+ E2DC              InputName:              SetMemFalse InputChanged
 761+ E2DC 3E FF       >                        ld      a,$FF
 761+ E2DE 32 54 E2    >                        ld      (InputChanged),a
 762+ E2E1 CD D5 E1                             call    is_any_key_pressed
 763+ E2E4 FE FF                                cp      $FF
 764+ E2E6 C8                                   ret     z
 765+ E2E7 4F           .KeyPressed:            ld      c,a
 766+ E2E8 3A 52 E2                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 767+ E2EB FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 768+ E2ED 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 769+ E2EF 21 BF E0                             ld      hl,ASCII_Map
 770+ E2F2 79                                   ld      a,c
 771+ E2F3 ED 31                                add     hl,a
 772+ E2F5 7E                                   ld      a,(hl)
 773+ E2F6 FE 41                                cp      "A"
 774+ E2F8 30 09                                jr      nc,.AlphaPressed
 775+ E2FA              ; CAPS and Symbol act as delete for now
 776+ E2FA FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 777+ E2FC 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 778+ E2FE FE 3E                                cp      ">"         ; ENTER
 779+ E300 28 17                                jr      z,.EnterPressed
 780+ E302 C9                                   ret
 781+ E303 47           .AlphaPressed:          ld      b,a
 782+ E304 3A 52 E2                             ld      a,(InputCursor)
 783+ E307 4F                                   ld      c,a
 784+ E308 21 32 E2                             ld      hl,InputString
 785+ E30B ED 31                                add     hl,a
 786+ E30D 78                                   ld      a,b
 787+ E30E 70                                   ld      (hl),b
 788+ E30F 79                                   ld      a,c
 789+ E310 21 52 E2                             ld      hl,InputCursor
 790+ E313 34                                   inc     (hl)
 791+ E314                                      SetMemTrue InputChanged
 791+ E314 AF          >                        xor     a
 791+ E315 32 54 E2    >                        ld      (InputChanged),a
 792+ E318 C9                                   ret
 793+ E319 3A 52 E2     .EnterPressed:          ld      a,(InputCursor)
 794+ E31C 21 32 E2                             ld      hl,InputString
 795+ E31F ED 31                                add     hl,a
 796+ E321                                      ZeroA
 796+ E321 AF          >                        xor a
 797+ E322 77                                   ld      (hl),a
 798+ E323                                      SetMemTrue EnterPressed
 798+ E323 AF          >                        xor     a
 798+ E324 32 53 E2    >                        ld      (EnterPressed),a
 799+ E327                                      SetMemTrue InputChanged
 799+ E327 AF          >                        xor     a
 799+ E328 32 54 E2    >                        ld      (InputChanged),a
 800+ E32B CD F7 E0                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 801+ E32E C9                                   ret
 802+ E32F 3A 52 E2     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 803+ E332 FE 00                                cp      0                       ; if input is zero length then can not delete
 804+ E334 C8                                   ret     z
 805+ E335 3D                                   dec     a                       ; move back one and update cursor pos
 806+ E336 32 52 E2                             ld      (InputCursor),a         ;
 807+ E339 21 32 E2                             ld      hl,InputString          ; now update end of line to null
 808+ E33C ED 31                                add     hl,a                    ; .
 809+ E33E                                      ZeroA                           ; .
 809+ E33E AF          >                        xor a
 810+ E33F 77                                   ld      (hl),a                  ; .
 811+ E340                                      SetMemTrue InputChanged
 811+ E340 AF          >                        xor     a
 811+ E341 32 54 E2    >                        ld      (InputChanged),a
 812+ E344 C9                                   ret
 813+ E345
 814+ E345              TargetMissileTest:      AnyMissilesLeft
 814+ E345 3A C6 6A    >                        ld      a,(NbrMissiles)
 814+ E348 A7          >                        and     a
 815+ E349                                      JumpIfZero      .ClearTargetting
 815+ E349 CA 60 E3    >                        jp	z,.ClearTargetting
 816+ E34C                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 816+ E34C 3A B9 6C    >                        ld      a,(MissileTargettingFlag)
 816+ E34F E6 80       >                        and     $80
 817+ E351 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 818+ E352 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 819+ E354 CD BB E1                             call            is_key_pressed              ; .
 820+ E357 C0                                   ret             nz                          ; .
 821+ E358 3A B9 6C     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 822+ E35B                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 822+ E35B FE FF       >                        cp     StageMissileNotTargeting
 822+ E35D CA 66 E3    >                        jp      z,.SetTargetting
 823+ E360              .ClearTargetting:       ClearMissileTargetting
 823+ E360 3E FF       >                        ld      a,StageMissileNotTargeting
 823+ E362 32 B9 6C    >                        ld      (MissileTargettingFlag),a
 824+ E365 C9                                   ret
 825+ E366              .SetTargetting:         SetMissileTargetting
 825+ E366 3E FE       >                        ld      a,StageMissileTargeting
 825+ E368 32 B9 6C    >                        ld      (MissileTargettingFlag),a
 826+ E36B C9                                   ret
 827+ E36C
 828+ E36C AF           MovementKeyTest:        xor     a
 829+ E36D 32 22 6C                             ld      (CursorKeysPressed),a
 830+ E370 3A 24 6A                             ld      a,(MenuIdMax)
 831+ E373 E6 FC                                and     $FC
 832+ E375 20 26                                jr      nz,CursorKeys
 833+ E377 2A 57 E0     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 834+ E37A 7E                                   ld      a,(hl)
 835+ E37B                                      JumpIfAIsZero ScanDiveKey
 835+ E37B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 835+ E37C CA 8A E3    >                        jp	    z, ScanDiveKey
 836+ E37F 3A 22 6C                             ld      a,(CursorKeysPressed)
 837+ E382 F6 80                                or      CursorClimb
 838+ E384 32 22 6C                             ld      (CursorKeysPressed),a
 839+ E387 C3 C0 E3                             jp      ScanLeftKey
 840+ E38A 2A 55 E0     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 841+ E38D 7E                                   ld      a,(hl)
 842+ E38E                                      JumpIfAIsZero ScanLeftKey
 842+ E38E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 842+ E38F CA C0 E3    >                        jp	    z, ScanLeftKey
 843+ E392 3A 22 6C                             ld      a,(CursorKeysPressed)
 844+ E395 F6 40                                or      CursorDive
 845+ E397 32 22 6C                             ld      (CursorKeysPressed),a
 846+ E39A C3 C0 E3                             jp      ScanLeftKey
 847+ E39D 2A 93 E0     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 848+ E3A0 7E                                   ld      a,(hl)
 849+ E3A1                                      JumpIfAIsZero ScanCursorDownKey
 849+ E3A1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 849+ E3A2 CA B0 E3    >                        jp	    z, ScanCursorDownKey
 850+ E3A5 3A 22 6C                             ld      a,(CursorKeysPressed)
 851+ E3A8 F6 80                                or      CursorClimb
 852+ E3AA 32 22 6C                             ld      (CursorKeysPressed),a
 853+ E3AD C3 C0 E3                             jp      ScanLeftKey
 854+ E3B0 2A 95 E0     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 855+ E3B3 7E                                   ld      a,(hl)
 856+ E3B4                                      JumpIfAIsZero ScanLeftKey
 856+ E3B4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 856+ E3B5 CA C0 E3    >                        jp	    z, ScanLeftKey
 857+ E3B8 3A 22 6C                             ld      a,(CursorKeysPressed)
 858+ E3BB F6 40                                or      CursorDive
 859+ E3BD 32 22 6C                             ld      (CursorKeysPressed),a
 860+ E3C0 2A 51 E0     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 861+ E3C3 7E                                   ld      a,(hl)
 862+ E3C4                                      JumpIfAIsZero ScanRightKey
 862+ E3C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 862+ E3C5 CA D1 E3    >                        jp	    z, ScanRightKey
 863+ E3C8 3A 22 6C                             ld      a,(CursorKeysPressed)
 864+ E3CB F6 20                                or      CursorLeft
 865+ E3CD 32 22 6C                             ld      (CursorKeysPressed),a
 866+ E3D0 C9                                   ret
 867+ E3D1 2A 53 E0     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 868+ E3D4 7E                                   ld      a,(hl)
 869+ E3D5                                      JumpIfAIsZero ScanHomeKey
 869+ E3D5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 869+ E3D6 CA E2 E3    >                        jp	    z, ScanHomeKey
 870+ E3D9 3A 22 6C                             ld      a,(CursorKeysPressed)
 871+ E3DC F6 10                                or      CursorRight
 872+ E3DE 32 22 6C                             ld      (CursorKeysPressed),a
 873+ E3E1 C9                                   ret
 874+ E3E2 2A 71 E0     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 875+ E3E5 7E                                   ld      a,(hl)
 876+ E3E6                                      JumpIfAIsZero ScanRecentreKey
 876+ E3E6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 876+ E3E7 CA F3 E3    >                        jp	    z, ScanRecentreKey
 877+ E3EA 3A 22 6C                             ld      a,(CursorKeysPressed)
 878+ E3ED F6 08                                or      CursorHome
 879+ E3EF 32 22 6C                             ld      (CursorKeysPressed),a
 880+ E3F2 C9                                   ret
 881+ E3F3 2A 8D E0     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 882+ E3F6 7E                                   ld      a,(hl)
 883+ E3F7                                      ReturnIfAIsZero
 883+ E3F7 A7          >                        and     a
 883+ E3F8 C8          >                        ret     z
 884+ E3F9 3A 22 6C                             ld      a,(CursorKeysPressed)
 885+ E3FC F6 04                                or      CursorRecenter
 886+ E3FE 32 22 6C                             ld      (CursorKeysPressed),a
 887+ E401 C9                                   ret
 888+ E402
 889+ E402
# file closed: ../../Hardware/keyboard.asm
1100  E402                                  DISPLAY "Keyboard ",BankKeyboard," - Bytes free ",/D, $2000 - ($-KeyboardAddr), " - BankKeyboard"
1101  E402                                  ASSERT $-KeyboardAddr <8912, Bank code leaks over 8K boundary
1102  E402               ; Bank 102  -----------------------------------------------------------------------------------------------------------------------
1103  E402                                  SLOT    MathsBankedFnsAddr
1104  E402                                  PAGE    BankMathsBankedFns
1105  E402                                  ORG     MathsBankedFnsAddr,BankMathsBankedFns
1106  0000                                  INCLUDE "../../Maths/MathsBankedFns.asm"
# file opened: ../../Maths/MathsBankedFns.asm
   1+ 0000              ;------------------------------------------------------------
   2+ 0000              ; HL Signed = HL - DE
   3+ 0000 7A           SubDEfromHLSigned:      ld      a,d
   4+ 0001 EE 80                                xor     $80
   5+ 0003 57                                   ld      d,a
   6+ 0004              ;------------------------------------------------------------
   7+ 0004              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
   8+ 0004 7C           AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
   9+ 0005 E6 80                                and     $80                         ; hl = abs (hl)
  10+ 0007 47                                   ld      b,a
  11+ 0008 7C                                   ld      a,h
  12+ 0009 E6 7F                                and     $7F
  13+ 000B 67                                   ld      h,a
  14+ 000C 7A                                   ld      a,d                         ; extract d sign to c
  15+ 000D E6 80                                and     $80                         ; de = abs (de)
  16+ 000F 4F                                   ld      c,a
  17+ 0010 7A                                   ld      a,d
  18+ 0011 E6 7F                                and     $7F
  19+ 0013 57                                   ld      d,a
  20+ 0014 78                                   ld      a,b
  21+ 0015 A9                                   xor     c
  22+ 0016 C2 1E 00                             jp      nz,.OppositeSigns
  23+ 0019 19           .SameSigns              add     hl,de                       ; same signs so just add
  24+ 001A 78                                   ld      a,b                         ; and bring in the sign from b
  25+ 001B B4                                   or      h                           ; note this has to be 15 bit result
  26+ 001C 67                                   ld      h,a                         ; but we can assume that
  27+ 001D C9                                   ret
  28+ 001E              .OppositeSigns:         ClearCarryFlag
  28+ 001E B7          >                        or a
  29+ 001F ED 52                                sbc     hl,de
  30+ 0021 38 04                                jr      c,.OppsiteSignInvert
  31+ 0023 78           .OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  32+ 0024 B4                                   or      h
  33+ 0025 67                                   ld      h,a                         ; set the previou sign value
  34+ 0026 C9                                   ret
  35+ 0027              .OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  35+ 0027 AF          >                    xor a
  35+ 0028 95          >                    sub l
  35+ 0029 6F          >                    ld l,a
  35+ 002A 9F          >                    sbc a,a
  35+ 002B 94          >                    sub h
  35+ 002C 67          >                    ld h,a
  36+ 002D 78                                   ld      a,b
  37+ 002E EE 80                                xor     SignOnly8Bit               ; flip sign bit
  38+ 0030 B4                                   or      h
  39+ 0031 67                                   ld      h,a                         ; recover sign
  40+ 0032 C9                                   ret
  41+ 0033
  42+ 0033              ;------------------------------------------------------------
  43+ 0033              ; BHL = BHL+CDE where signs are held in B and C
  44+ 0033 78           ADDHLDESignBC:          ld      a,b
  45+ 0034 E6 80                                and     SignOnly8Bit
  46+ 0036 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  47+ 0037                                      JumpIfNegative .ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  47+ 0037 FA 45 00    >                        jp		m, .ADDHLDEsBCOppSGN
  48+ 003A 78           .ADDHLDEsBCSameSigns:   ld      a,b
  49+ 003B B1                                   or      c
  50+ 003C                                      JumpIfNegative .ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  50+ 003C FA 41 00    >                        jp		m, .ADDHLDEsBCSameNeg
  51+ 003F 19                                   add     hl,de                       ; both positive so a will already be zero
  52+ 0040 C9                                   ret
  53+ 0041 19           .ADDHLDEsBCSameNeg:      add     hl,de
  54+ 0042 78                                   ld      a,b
  55+ 0043                                      DISPLAY "TODO: don't bother with overflow for now"
  56+ 0043 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  57+ 0044 C9                                   ret
  58+ 0045              .ADDHLDEsBCOppSGN:      ClearCarryFlag
  58+ 0045 B7          >                        or a
  59+ 0046 ED 52                                sbc     hl,de
  60+ 0048 38 02                                jr      c,.ADDHLDEsBCOppInvert
  61+ 004A 78           .ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  62+ 004B C9                                   ret
  63+ 004C              .ADDHLDEsBCOppInvert:   NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  63+ 004C AF          >                    xor a
  63+ 004D 95          >                    sub l
  63+ 004E 6F          >                    ld l,a
  63+ 004F 9F          >                    sbc a,a
  63+ 0050 94          >                    sub h
  63+ 0051 67          >                    ld h,a
  64+ 0052 78                                   ld      a,b
  65+ 0053 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  66+ 0055 C9                                   ret
  67+ 0056                  DISPLAY "TODO: Check if ADDHLDESignedV4 is deprecated by AddDEtoHLSigned"
  68+ 0056 7C           ADDHLDESignedV4:        ld      a,h
  69+ 0057 E6 80                                and     SignOnly8Bit
  70+ 0059 47                                   ld      b,a                         ;save sign bit in b
  71+ 005A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  72+ 005B                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  72+ 005B FA 73 00    >                        jp		m, .ADDHLDEOppSGN
  73+ 005E 78           .ADDHLDESameSigns:      ld      a,b
  74+ 005F B2                                   or      d
  75+ 0060                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  75+ 0060 FA 65 00    >                        jp		m, .ADDHLDESameNeg
  76+ 0063 19                                   add     hl,de
  77+ 0064 C9                                   ret
  78+ 0065 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  79+ 0066 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  80+ 0068 67                                   ld      h,a
  81+ 0069 7A                                   ld      a,d
  82+ 006A E6 7F                                and     SignMask8Bit
  83+ 006C 57                                   ld      d,a
  84+ 006D 19                                   add     hl,de
  85+ 006E 3E 80                                ld      a,SignOnly8Bit
  86+ 0070                                      DISPLAY "TODO:  dont bother with overflow for now"
  87+ 0070 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  88+ 0071 67                                   ld      h,a
  89+ 0072 C9                                   ret
  90+ 0073 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  91+ 0074 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  92+ 0076 67                                   ld      h,a
  93+ 0077 7A                                   ld      a,d
  94+ 0078 E6 7F                                and     SignMask8Bit
  95+ 007A 57                                   ld      d,a
  96+ 007B                                      ClearCarryFlag
  96+ 007B B7          >                        or a
  97+ 007C ED 52                                sbc     hl,de
  98+ 007E 38 04                                jr      c,.ADDHLDEOppInvert
  99+ 0080 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 100+ 0081 B4                                   or      h
 101+ 0082 67                                   ld      h,a                         ; set the previou sign value
 102+ 0083 C9                                   ret
 103+ 0084              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 103+ 0084 AF          >                    xor a
 103+ 0085 95          >                    sub l
 103+ 0086 6F          >                    ld l,a
 103+ 0087 9F          >                    sbc a,a
 103+ 0088 94          >                    sub h
 103+ 0089 67          >                    ld h,a
 104+ 008A 78                                   ld      a,b
 105+ 008B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 106+ 008D B4                                   or      h
 107+ 008E 67                                   ld      h,a                         ; recover sign
 108+ 008F C9                                   ret
 109+ 0090
 110+ 0090              ;------------------------------------------------------------
 111+ 0090              ; extension to AddBCHtoDELsigned
 112+ 0090              ; takes ix as the address of the values to load into DEL
 113+ 0090              ;       iy as the address of the values to load into BCH
 114+ 0090 DD 6E 00     AddAtIXtoAtIY24Signed:  ld      l,(ix+0)            ; del = ix (sign hi lo)
 115+ 0093 DD 5E 01                             ld      e,(ix+1)            ; .
 116+ 0096 DD 56 02                             ld      d,(ix+2)            ; .
 117+ 0099 FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 118+ 009C FD 4E 01                             ld      c,(iy+1)            ; .
 119+ 009F FD 46 02                             ld      b,(iy+2)            ; .
 120+ 00A2 FD E5                                push    iy                  ; save iy as add function changes is
 121+ 00A4 CD 14 01                             call    AddBCHtoDELsigned   ; Perform del += bch
 122+ 00A7 FD E1                                pop     iy                  ; get iy back
 123+ 00A9 DD 75 00                             ld      (ix+0),l            ; put result into (ix)
 124+ 00AC DD 73 01                             ld      (ix+1),e            ; .
 125+ 00AF DD 72 02                             ld      (ix+2),d            ; .
 126+ 00B2 C9                                   ret
 127+ 00B3              ;------------------------------------------------------------
 128+ 00B3              ; DEL = @IX + @IY 24 bit signed
 129+ 00B3              AddDELequAtIXPlusIY24Signed:
 130+ 00B3 DD 6E 00                             ld      l,(ix+0)            ; del = ix (sign hi lo)
 131+ 00B6 DD 5E 01                             ld      e,(ix+1)            ; .
 132+ 00B9 DD 56 02                             ld      d,(ix+2)            ; .
 133+ 00BC FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 134+ 00BF FD 4E 01                             ld      c,(iy+1)            ; .
 135+ 00C2 FD 46 02                             ld      b,(iy+2)            ; .
 136+ 00C5 FD E5                                push    iy                  ; save iy as add function changes is
 137+ 00C7 CD 14 01                             call    AddBCHtoDELsigned   ; Perform del += bch
 138+ 00CA FD E1                                pop     iy                  ; get iy back
 139+ 00CC C9                                   ret
 140+ 00CD              ;------------------------------------------------------------
 141+ 00CD              ; extension to AddBCHtoDELsigned
 142+ 00CD              ; takes ix as the address of the values to load into DEL
 143+ 00CD              ;       iy as the address of the values to load into BCH
 144+ 00CD              ; subtracts iy from ix putting result in ix
 145+ 00CD              ; DEL = @IX - @IY 24 bit signed
 146+ 00CD DD 6E 00     SubAtIXtoAtIY24Signed:  ld      l,(ix+0)            ; del = ix (sign hi lo)
 147+ 00D0 DD 5E 01                             ld      e,(ix+1)            ; .
 148+ 00D3 DD 56 02                             ld      d,(ix+2)            ; .
 149+ 00D6 FD 66 00                             ld      h,(iy+0)            ; bch = -iy (sign, hi, lo)
 150+ 00D9 FD 4E 01                             ld      c,(iy+1)            ; .
 151+ 00DC FD 7E 02                             ld      a,(iy+2)            ; .
 152+ 00DF EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 153+ 00E1 47                                   ld      b,a                 ; .
 154+ 00E2 FD E5                                push    iy                  ; save iy as add function changes is
 155+ 00E4 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 156+ 00E7 FD E1                                pop     iy                  ; get iy back
 157+ 00E9 DD 75 00                             ld      (ix+0),l            ; put result into (ix)
 158+ 00EC DD 73 01                             ld      (ix+1),e            ; .
 159+ 00EF DD 72 02                             ld      (ix+2),d            ; .
 160+ 00F2 C9                                   ret
 161+ 00F3              ;------------------------------------------------------------
 162+ 00F3              ; extension to AddBCHtoDELsigned
 163+ 00F3              ; takes ix as the address of the values to load into DEL
 164+ 00F3              ;       iy as the address of the values to load into BCH
 165+ 00F3              ; subtracts iy from ix leaving result in del
 166+ 00F3              SubDELequAtIXMinusAtIY24Signed:
 167+ 00F3 DD 6E 00                             ld      l,(ix+0)            ; del = ix (sign hi lo)
 168+ 00F6 DD 5E 01                             ld      e,(ix+1)            ; .
 169+ 00F9 DD 56 02                             ld      d,(ix+2)            ; .
 170+ 00FC FD 66 00                             ld      h,(iy+0)            ; bch = -iy (sign, hi, lo)
 171+ 00FF FD 4E 01                             ld      c,(iy+1)            ; .
 172+ 0102 FD 7E 02                             ld      a,(iy+2)            ; .
 173+ 0105 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 174+ 0107 47                                   ld      b,a                 ; .
 175+ 0108 FD E5                                push    iy                  ; save iy as add function changes is
 176+ 010A CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 177+ 010D FD E1                                pop     iy                  ; get iy back
 178+ 010F C9                                   ret
 179+ 0110              ;------------------------------------------------------------
 180+ 0110              ;tested mathstestsun2
 181+ 0110              ; DEL = DEL - BCH signed, uses BC, DE, HL, IY, A
 182+ 0110              ; Just flips sign on b then performs add
 183+ 0110 78           SubBCHfromDELsigned:    ld      a,b
 184+ 0111 EE 80                                xor     SignOnly8Bit
 185+ 0113 47                                   ld      b,a
 186+ 0114              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 187+ 0114 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 188+ 0115 AA                                   xor     d                   ; .
 189+ 0116 E6 80                                and     SignOnly8Bit        ; .
 190+ 0118 20 19                                jr      nz,.SignDifferent   ; .
 191+ 011A 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 192+ 011B E6 80                                and     SignOnly8Bit        ; so store it in iyh
 193+ 011D FD 67                                ld      iyh,a               ;
 194+ 011F 78                                   ld      a,b                 ; bch = abs bch
 195+ 0120 E6 7F                                and     SignMask8Bit        ; .
 196+ 0122 47                                   ld      b,a                 ; .
 197+ 0123 7A                                   ld      a,d                 ; del = abs del
 198+ 0124 E6 7F                                and     SignMask8Bit        ; .
 199+ 0126 57                                   ld      d,a                 ; .
 200+ 0127 7C                                   ld      a,h                 ; l = h + l
 201+ 0128 85                                   add     l                   ; .
 202+ 0129 6F                                   ld      l,a                 ; .
 203+ 012A 79                                   ld      a,c                 ; e = e + c + carry
 204+ 012B 8B                                   adc     e                   ; .
 205+ 012C 5F                                   ld      e,a                 ; .
 206+ 012D 78                                   ld      a,b                 ; d = b + d + carry (signed)
 207+ 012E 8A                                   adc     d                   ;
 208+ 012F FD B4                                or      iyh                 ; d = or back in sign bit
 209+ 0131 57                                   ld      d,a                 ;
 210+ 0132 C9                                   ret                         ; done
 211+ 0133 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 212+ 0134 FD 67                                ld      iyh,a               ; iyh = b sign
 213+ 0136 E6 7F                                and     SignMask8Bit        ; .
 214+ 0138 47                                   ld      b,a                 ; .
 215+ 0139 7A                                   ld      a,d                 ; del = abs del
 216+ 013A FD 6F                                ld      iyl,a               ; iyl = d sign
 217+ 013C E6 7F                                and     SignMask8Bit        ; .
 218+ 013E 57                                   ld      d,a                 ; .
 219+ 013F E5                                   push    hl                  ; save hl
 220+ 0140 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 221+ 0142 ED 52                                sbc     hl,de               ;
 222+ 0144 E1                                   pop     hl                  ;
 223+ 0145 38 0E                                jr      c,.BCHltDEL
 224+ 0147 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 225+ 0149 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 226+ 014A                                      JumpIfALTNusng l,.BCHltDEL
 226+ 014A BD          >                        cp      l
 226+ 014B DA 55 01    >                        jp		c, .BCHltDEL
 227+ 014E 20 15                                jr      nz,.DELltBCH
 228+ 0150              ; The same so its just zero
 229+ 0150 AF           .BCHeqDEL:              xor     a                  ; its just zero
 230+ 0151 57                                   ld      d,a                ; .
 231+ 0152 5F                                   ld      e,a                ; .
 232+ 0153 6F                                   ld      l,a                ; .
 233+ 0154 C9                                   ret                        ; .
 234+ 0155              ;BCH is less than DEL so its DEL - BCH the sort out sign
 235+ 0155 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 236+ 0156 94                                   sub     h                  ; .                              ;   01D70F DEL
 237+ 0157 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 238+ 0158 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 239+ 0159 99                                   sbc     c                  ; .                              ;
 240+ 015A 5F                                   ld      e,a                ; .                              ;
 241+ 015B 7A                                   ld      a,d                ; d = d - b - carry              ;
 242+ 015C 98                                   sbc     b                  ; .                              ;
 243+ 015D 57                                   ld      d,a                ; .                              ;
 244+ 015E FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 245+ 0160 E6 80                                and     SignOnly8Bit       ;
 246+ 0162 B2                                   or      d                  ;
 247+ 0163 57                                   ld      d,a                ;
 248+ 0164 C9                                   ret
 249+ 0165 7C           .DELltBCH:              ld      a,h                ; l = h - l
 250+ 0166 95                                   sub     l                  ;
 251+ 0167 6F                                   ld      l,a                ;
 252+ 0168 79                                   ld      a,c                ; e = c - e - carry
 253+ 0169 9B                                   sbc     e                  ;
 254+ 016A 5F                                   ld      e,a                ;
 255+ 016B 78                                   ld      a,b                ; d = b - d - carry
 256+ 016C 9A                                   sbc     d                  ;
 257+ 016D 57                                   ld      d,a                ;
 258+ 016E FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 259+ 0170 E6 80                                and     SignOnly8Bit       ;
 260+ 0172 B2                                   or      d                  ;
 261+ 0173 57                                   ld      d,a                ;
 262+ 0174 C9                                   ret
 263+ 0175              ;-----------------------------------------------------------------------------------------------------------
 264+ 0175              ; Subtract Functions
 265+ 0175              ;...subtract routines
 266+ 0175              ; we could cheat, flip the sign of DE and just add but its not very optimised
 267+ 0175 7C           subHLDES15:             ld      a,h
 268+ 0176 E6 80                                and     SignOnly8Bit
 269+ 0178 47                                   ld      b,a                         ;save sign bit in b
 270+ 0179 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 271+ 017A                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 271+ 017A FA A8 01    >                        jp		m, .SUBHLDEOppSGN
 272+ 017D 78           .SUBHLDESameSigns:      ld      a,b
 273+ 017E B2                                   or      d
 274+ 017F                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 274+ 017F FA 89 01    >                        jp		m, .SUBHLDESameNeg
 275+ 0182                                      ClearCarryFlag
 275+ 0182 B7          >                        or a
 276+ 0183 ED 52                                sbc     hl,de
 277+ 0185                                      JumpIfNegative .SUBHLDESameOvrFlw
 277+ 0185 FA 9C 01    >                        jp		m, .SUBHLDESameOvrFlw
 278+ 0188 C9                                   ret
 279+ 0189 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 280+ 018A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 281+ 018C 67                                   ld      h,a
 282+ 018D 7A                                   ld      a,d
 283+ 018E E6 7F                                and     SignMask8Bit
 284+ 0190 57                                   ld      d,a
 285+ 0191                                      ClearCarryFlag
 285+ 0191 B7          >                        or a
 286+ 0192 ED 52                                sbc     hl,de
 287+ 0194                                      JumpIfNegative .SUBHLDESameOvrFlw
 287+ 0194 FA 9C 01    >                        jp		m, .SUBHLDESameOvrFlw
 288+ 0197                                                          DISPLAY "TODO:  don't bother with overflow for now"
 289+ 0197 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 290+ 0198 F6 80                                or      SignOnly8Bit
 291+ 019A 67                                   ld      h,a
 292+ 019B C9                                   ret
 293+ 019C              .SUBHLDESameOvrFlw:     NegHL
 293+ 019C AF          >                    xor a
 293+ 019D 95          >                    sub l
 293+ 019E 6F          >                    ld l,a
 293+ 019F 9F          >                    sbc a,a
 293+ 01A0 94          >                    sub h
 293+ 01A1 67          >                    ld h,a
 294+ 01A2 78                                   ld      a,b
 295+ 01A3 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 296+ 01A5 B4                                   or      h
 297+ 01A6 67                                   ld      h,a                         ; recover sign
 298+ 01A7 C9                                   ret
 299+ 01A8 B7           .SUBHLDEOppSGN:         or      a
 300+ 01A9 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 301+ 01AA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 302+ 01AC 67                                   ld      h,a
 303+ 01AD 7A                                   ld      a,d
 304+ 01AE E6 7F                                and     SignMask8Bit
 305+ 01B0 57                                   ld      d,a
 306+ 01B1 19                                   add     hl,de
 307+ 01B2 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 308+ 01B3 B4                                   or      h
 309+ 01B4 67                                   ld      h,a                         ; set the previou sign value
 310+ 01B5 C9                                   ret
 311+ 01B6              ;------------------------------------------------------------------------------------------------
 312+ 01B6              ;-- checks to see if a postition is in range of another, e.g. missile hit
 313+ 01B6              ;-- ix = ship position    - pointer to xyz vector as 3 bytes per element
 314+ 01B6              ;-- oy = misisle position - pointer to xyz vector as 3 bytes per element
 315+ 01B6              ;-- sets carry if in blast range, else not carry
 316+ 01B6              ;-- blast range will always be an 8 bit value
 317+ 01B6              CheckInCollisionRange:
 318+ 01B6 CD F3 00     .CheckXDistance:        call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 319+ 01B9 7A                                   ld      a,d                 ; check abs distance
 320+ 01BA E6 7F                                and     SignMask8Bit        ; if high bytes are set
 321+ 01BC B3                                   or      e                   ; then no hit
 322+ 01BD C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 323+ 01C0 7D                                   ld      a,l
 324+ 01C1                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 324+ 01C1 21 2D 6B    >                        ld      hl,CurrentMissileBlastRange
 324+ 01C4 BE          >                        cp      (hl)
 324+ 01C5 D2 FC 01    >                        jp		nc,.NoCollision
 325+ 01C8 01 03 00     .CheckYDistance:        ld      bc,3                ; move ix and iy
 326+ 01CB DD 09                                add     ix,bc               ; on 3 bytes
 327+ 01CD FD 09                                add     iy,bc               ;
 328+ 01CF CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 329+ 01D2 7A                                   ld      a,d                 ; check abs distance
 330+ 01D3 E6 7F                                and     SignMask8Bit        ; if high bytes are set
 331+ 01D5 B3                                   or      e                   ; then no hit
 332+ 01D6 C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 333+ 01D9 7D                                   ld      a,l
 334+ 01DA                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 334+ 01DA 21 2D 6B    >                        ld      hl,CurrentMissileBlastRange
 334+ 01DD BE          >                        cp      (hl)
 334+ 01DE D2 FC 01    >                        jp		nc,.NoCollision
 335+ 01E1 01 03 00     .CheckZDistance:        ld      bc,3                ; move ix and iy
 336+ 01E4 DD 09                                add     ix,bc               ; on 3 bytes
 337+ 01E6 FD 09                                add     iy,bc               ;
 338+ 01E8 CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 339+ 01EB 7A                                   ld      a,d                 ; check abs distance
 340+ 01EC E6 7F                                and     SignMask8Bit        ; if high bytes are set
 341+ 01EE B3                                   or      e                   ; then no hit
 342+ 01EF C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 343+ 01F2 7D                                   ld      a,l
 344+ 01F3                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 344+ 01F3 21 2D 6B    >                        ld      hl,CurrentMissileBlastRange
 344+ 01F6 BE          >                        cp      (hl)
 344+ 01F7 D2 FC 01    >                        jp		nc,.NoCollision
 345+ 01FA              .CollisionDetected:     SetCarryFlag                ; collision in blast range
 345+ 01FA 37          >                        scf
 346+ 01FB C9                                   ret
 347+ 01FC              .NoCollision:           ClearCarryFlag              ; no collision in blast range
 347+ 01FC B7          >                        or a
 348+ 01FD C9                                   ret
 349+ 01FE
 350+ 01FE              ;------------------------------------------------------------------------------------------------
 351+ 01FE              ; -- Checks if 24 bit value at ix > iy and returns ix pointing to the correct value
 352+ 01FE              ; -- Sets carryflag if a swap occured as part of the Jump If A LessThan check
 353+ 01FE FD 7E 02     CompareAtIXtoIYABS:     ld      a,(iy+2)
 354+ 0201 E6 7F        .CheckSignByte:         and     SignMask8Bit
 355+ 0203 47                                   ld      b,a
 356+ 0204 DD 7E 02                             ld      a,(ix+2)
 357+ 0207 E6 7F                                and     SignMask8Bit
 358+ 0209                                      JumpIfALTNusng b,.SwapIXIY
 358+ 0209 B8          >                        cp      b
 358+ 020A DA 22 02    >                        jp		c, .SwapIXIY
 359+ 020D DD 7E 01     .CheckHighByte:         ld      a,(ix+1)
 360+ 0210 FD BE 01                             cp      (iy+1)
 361+ 0213                                      JumpIfALTNusng b,.SwapIXIY
 361+ 0213 B8          >                        cp      b
 361+ 0214 DA 22 02    >                        jp		c, .SwapIXIY
 362+ 0217 DD 7E 00     .CheckLowByte:          ld      a,(ix+0)
 363+ 021A FD BE 00                             cp      (iy+0)
 364+ 021D                                      JumpIfALTNusng b,.SwapIXIY
 364+ 021D B8          >                        cp      b
 364+ 021E DA 22 02    >                        jp		c, .SwapIXIY
 365+ 0221 C9                                   ret
 366+ 0222 DD E5        .SwapIXIY               push    ix                  ; swap over ix and iy
 367+ 0224 FD E5                                push    iy                  ; this means that ix is always larger of two or ix if they are the same value
 368+ 0226 DD E1                                pop     ix                  ; iy is a smaller of the two values, or untouched in the same value
 369+ 0228 FD E1                                pop     iy                  ; Thsi means we can do a compare and pick which one we preferr after, carry says if swap occured if we need that
 370+ 022A C9                                   ret
 371+ 022B              ;------------------------------------------------------------------------------------------------
 372+ 022B              ; -- Manhattan distance
 373+ 022B              ; -- very quick distance calculation based on a cube
 374+ 022B              ; -- ix = pointer to vector of 3x3, iy = distance to check
 375+ 022B              ; simploy done by ABS (ix)
 376+ 022B              ; returns z if outside box, nz if inside box
 377+ 022B DD 6E 00     ManhattanDistanceIXIY:  ld      l,(ix+0)            ; del = abs ix (sign hi lo)
 378+ 022E DD 5E 01     .checkX:                ld      e,(ix+1)            ; .
 379+ 0231 DD 7E 02                             ld      a,(ix+2)            ; .
 380+ 0234 E6 7F                                and     SignMask8Bit        ;
 381+ 0236 57                                   ld      d,a                 ;
 382+ 0237 FD 66 00                             ld      h,(iy+0)            ; bch = distiance to check
 383+ 023A FD 4E 01                             ld      c,(iy+1)            ; .
 384+ 023D FD 7E 02                             ld      a,(iy+2)            ; .
 385+ 0240 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 386+ 0242 47                                   ld      b,a                 ; .
 387+ 0243 C5 E5                                push    bc,,hl              ; save this for 2nd and 3rd test
 388+ 0245 FD E5                                push    iy                  ; save iy as add function changes is
 389+ 0247 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 390+ 024A FD E1                                pop     iy                  ; get iy back
 391+ 024C 7A                                   ld      a,d
 392+ 024D E6 80                                and     SignOnly8Bit
 393+ 024F CA 88 02                             jp      z,.ClearUp          ; so if its positive then outside boundary
 394+ 0252 E1 C1        .checkY:                pop     bc,,hl
 395+ 0254 C5 E5                                push    bc,,hl
 396+ 0256 DD 6E 03                             ld      l,(ix+3)            ; del = abs ix (sign hi lo)
 397+ 0259 DD 5E 04                             ld      e,(ix+4)            ; .
 398+ 025C DD 7E 05                             ld      a,(ix+5)            ; .
 399+ 025F E6 7F                                and     SignMask8Bit        ;
 400+ 0261 57                                   ld      d,a                 ;
 401+ 0262 FD E5                                push    iy                  ; save iy as add function changes is
 402+ 0264 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 403+ 0267 FD E1                                pop     iy                  ; get iy back
 404+ 0269 7A                                   ld      a,d
 405+ 026A E6 80                                and     SignOnly8Bit
 406+ 026C CA 88 02                             jp      z,.ClearUp          ; so if its positive then outside boundary
 407+ 026F E1 C1        .checkZ:                pop     bc,,hl
 408+ 0271 DD 6E 06                             ld      l,(ix+6)            ; del = abs ix (sign hi lo)
 409+ 0274 DD 5E 07                             ld      e,(ix+7)            ; .
 410+ 0277 DD 7E 08                             ld      a,(ix+8)            ; .
 411+ 027A E6 7F                                and     SignMask8Bit        ;
 412+ 027C 57                                   ld      d,a                 ;
 413+ 027D FD E5                                push    iy                  ; save iy as add function changes is
 414+ 027F CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 415+ 0282 FD E1                                pop     iy                  ; get iy back
 416+ 0284 7A                                   ld      a,d
 417+ 0285 E6 80                                and     SignOnly8Bit
 418+ 0287 C9                                   ret
 419+ 0288 E1 C1        .ClearUp:               pop     bc,,hl
 420+ 028A C9                                   ret
 421+ 028B
 422+ 028B
 423+ 028B              ;------------------------------------------------------------
 424+ 028B              ; Note vectors are 2 byte lead sign, angle is 8 bit lead sign
 425+ 028B              ApplyMyAngleAToIXIY:    ;break
 426+ 028B F5                                   push    af                          ; save angle
 427+ 028C              ; Calculate Angle * vector /256, i.e take angle and mutiple by high byte of vector
 428+ 028C 5F           .processVector1:        ld      e,a                         ; e = angle
 429+ 028D DD 56 01                             ld      d,(ix+1)                    ; d = vector 1 / 256
 430+ 0290 CD B0 6E                             call    mulDbyESigned               ; calcualte DE = Vector * angle /256
 431+ 0293 FD 6E 00 FD                          ld      hl,(iy+0)                   ; hl = vector 2
 431+ 0297 66 01
 432+ 0299 CD 00 00                             call    SubDEfromHLSigned           ; hl = vector 2 - (vector 1 * angle / 256)
 433+ 029C FD 75 00 FD                          ld      (iy+0),hl                   ; .
 433+ 02A0 74 01
 434+ 02A2 F1           .processVector2:        pop     af
 435+ 02A3 5F                                   ld      e,a                         ; e = angle
 436+ 02A4 FD 56 01                             ld      d,(iy+1)                    ; d = vector 2 / 256
 437+ 02A7 CD B0 6E                             call    mulDbyESigned               ; de = vector 2 * angle /256
 438+ 02AA DD 6E 00 DD                          ld      hl,(ix+0)                   ; hl = vector 1
 438+ 02AE 66 01
 439+ 02B0 CD 04 00                             call    AddDEtoHLSigned             ; hl = hl + de
 440+ 02B3 DD 75 00 DD                          ld      (ix+0),hl                   ; .
 440+ 02B7 74 01
 441+ 02B9 C9                                   ret
 442+ 02BA              ;------------------------------------------------------------
 443+ 02BA              ; Applies Roll Alpha and Pitch Beta to vector at IX
 444+ 02BA              ApplyRollAndPitchToIX:
 445+ 02BA              ;-- y Vector = y - alpha * nosev_x_hi
 446+ 02BA DD 5E 01                             ld      e,(ix+1)                    ; e = X component hi
 447+ 02BD 3A 30 69                             ld      a,(ALPHA)                   ; alpha S7
 448+ 02C0 57                                   ld      d,a
 449+ 02C1 CD B0 6E                             call    mulDbyESigned               ; d = X Vector * alpha / 256
 450+ 02C4 DD 6E 02                             ld      l,(ix+2)                    ; hl = Y Vector component
 451+ 02C7 DD 66 03                             ld      h,(ix+3)                    ;
 452+ 02CA CD 00 00                             call    SubDEfromHLSigned           ; hl = Y - (alpha * nosev x hi)
 453+ 02CD DD 75 02                             ld      (ix+2),l                    ; dont round Y up yet
 454+ 02D0 DD 74 03                             ld      (ix+3),h
 455+ 02D3              ;-- x Vector = x Vector + alpha * y_hi
 456+ 02D3 DD 5E 03                             ld      e,(ix+3)                    ; e = y component hi
 457+ 02D6 3A 30 69                             ld      a,(ALPHA)                   ; alpha S7
 458+ 02D9 57                                   ld      d,a
 459+ 02DA CD B0 6E                             call    mulDbyESigned               ; d = y Vector * alpha / 256
 460+ 02DD DD 6E 00                             ld      l,(ix+0)                    ; hl = x Vector component
 461+ 02E0 DD 66 01                             ld      h,(ix+1)                    ;
 462+ 02E3 CD 04 00                             call    AddDEtoHLSigned             ; hl = x + (alpha * nosev x hi)
 463+ 02E6                                  IFDEF ROUND_ROLL_AND_PITCH
 464+ 02E6 ~                                    ld      l,0                         ; round up x
 465+ 02E6                                  ENDIF
 466+ 02E6 DD 75 00                             ld      (ix+0),l
 467+ 02E9 DD 74 01                             ld      (ix+1),h
 468+ 02EC              ;-- nosev_y = nosev_y - beta * nosev_z_hi
 469+ 02EC DD 5E 05                             ld      e,(ix+5)                    ; e = z component hi
 470+ 02EF 3A 23 69                             ld      a,(BETA)                    ; beta S7
 471+ 02F2 57                                   ld      d,a
 472+ 02F3 CD B0 6E                             call    mulDbyESigned               ; d = Z Vector * beta / 256
 473+ 02F6 DD 6E 02                             ld      l,(ix+2)                    ; hl = y Vector component
 474+ 02F9 DD 66 03                             ld      h,(ix+3)                    ;
 475+ 02FC CD 00 00                             call    SubDEfromHLSigned           ; hl = Y - (beta * nosev z hi)
 476+ 02FF                                  IFDEF ROUND_ROLL_AND_PITCH
 477+ 02FF ~                                    ld      l,0                         ; round up Y
 478+ 02FF                                  ENDIF
 479+ 02FF DD 75 02                             ld      (ix+2),l
 480+ 0302 DD 74 03                             ld      (ix+3),h
 481+ 0305              ;-- nosev_z = nosev_z + beta * nosev_y_hi
 482+ 0305 DD 5E 03                             ld      e,(ix+3)                    ; e = y component hi
 483+ 0308 3A 23 69                             ld      a,(BETA)                    ; beta S7
 484+ 030B 57                                   ld      d,a
 485+ 030C CD B0 6E                             call    mulDbyESigned               ; d = y Vector * beta / 256
 486+ 030F DD 6E 04                             ld      l,(ix+4)                    ; hl = z Vector component
 487+ 0312 DD 66 05                             ld      h,(ix+5)                    ;
 488+ 0315 CD 04 00                             call    AddDEtoHLSigned             ; hl = z + (beta * nosev z hi)
 489+ 0318                                  IFDEF ROUND_ROLL_AND_PITCH
 490+ 0318 ~                                    ld      l,0                         ; round up zwd
 491+ 0318                                  ENDIF
 492+ 0318 DD 75 04                             ld      (ix+4),l
 493+ 031B DD 74 05                             ld      (ix+5),h
 494+ 031E C9                                   ret
 495+ 031F              ;------------------------------------------------------------
 496+ 031F              ; Calculates the following:
 497+ 031F              ; loads UBnKTargetVector from UBnkPostion to IY as IY - position
 498+ 031F DD 21 20 C0  VectorUnivtoIY:     ld      ix,UBnKxlo                      ; target x = iy [x] - Univ XPos
 499+ 0323 CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; .
 500+ 0326 7D                               ld      a,l                             ; .
 501+ 0327 32 47 C0                         ld      (UBnKTargetXPos),a              ; .
 502+ 032A ED 53 48 C0                      ld      (UBnKTargetXPos+1),de           ; .
 503+ 032E DD 21 23 C0                      ld      ix,UBnKylo                      ; move to y component
 504+ 0332 01 03 00                         ld      bc,3                            ; .
 505+ 0335 FD 09                            add     iy,bc                           ; .
 506+ 0337 CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; target y = iy [y] - Univ YPos
 507+ 033A 7D                               ld      a,l                             ; .
 508+ 033B 32 4A C0                         ld      (UBnKTargetYPos),a              ; .
 509+ 033E ED 53 4B C0                      ld      (UBnKTargetYPos+1),de           ; .
 510+ 0342 DD 21 26 C0                      ld      ix,UBnKzlo                      ; move to y component
 511+ 0346 01 03 00                         ld      bc,3                            ; move to z component
 512+ 0349 FD 09                            add     iy,bc                           ; .
 513+ 034B CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; target z = iy [z] - Univ ZPos
 514+ 034E 7D                               ld      a,l                             ; .
 515+ 034F 32 4D C0                         ld      (UBnKTargetZPos),a              ; .
 516+ 0352 ED 53 4E C0                      ld      (UBnKTargetZPos+1),de           ; .
 517+ 0356 C9                               ret
 518+ 0357              ;------------------------------------------------------------
 519+ 0357              ; Takes the UBnKTarget position and works out if its ready for a docking routine or jump
 520+ 0357              ; returns carry flag if move to docking else leaves carry unset
 521+ 0357              UnivDistanceToTarget:DISPLAY "TODO : WRITE CODE FOR UnivDistanceToTarget"
 522+ 0357                                  ClearCarryFlag                              ; for now clear carry flag so its not at target
 522+ 0357 B7          >                        or a
 523+ 0358 C9                               ret
 524+ 0359              ;------------------------------------------------------------
 525+ 0359              ; Takes the UBnKTarget position and works out if its ready for a docking routine or jump
 526+ 0359
 527+ 0359
 528+ 0359                      IFNDEF  DEBUG_NO_TACTICS_CODE
 529+ 0359 ~
 530+ 0359 ~            TacticsVarResult        DW 0
 531+ 0359 ~            TacticsDotRoofv:        ld      hl,UBnkrotmatRoofvX
 532+ 0359 ~                                    jp      TacticsDotHL
 533+ 0359 ~
 534+ 0359 ~            TacticsDotSidev:        ld      hl,UBnkrotmatSidevX
 535+ 0359 ~                                    jp      TacticsDotHL
 536+ 0359 ~
 537+ 0359 ~            TacticsDotNosev:        call    CopyRotNoseToUBnKTacticsMat
 538+ 0359 ~            TacticsDotHL:           ld      hl,UBnKTacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 539+ 0359 ~            .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 540+ 0359 ~                                    ld      e,a                                 ; .
 541+ 0359 ~                                    ld      a,(UBnKTargetVectorX)                  ; .
 542+ 0359 ~                                    ld      d,a                                 ; .
 543+ 0359 ~                                    mul                                         ; .
 544+ 0359 ~                                    ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 545+ 0359 ~                                    ld      (varS),a                            ; .
 546+ 0359 ~                                    inc     hl                                  ; move to sign byte
 547+ 0359 ~            .CalcXSign:             ld      a,(UBnKTargetVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 548+ 0359 ~                                    xor     (hl)                                ; .
 549+ 0359 ~                                    ld      b,a                                 ; .
 550+ 0359 ~            .MoveToY:               inc     hl                                  ; Move on to Y component
 551+ 0359 ~            .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 552+ 0359 ~                                    ld      e,a                                 ; .
 553+ 0359 ~                                    ld      a,(UBnKTargetVectorY)                  ; .
 554+ 0359 ~                                    ld      d,a                                 ; .
 555+ 0359 ~                                    mul     de                                  ; .
 556+ 0359 ~                                    ld      e,d                                 ; .
 557+ 0359 ~                                    ld      d,0                                 ; .
 558+ 0359 ~                                    inc     hl                                  ; move to sign byte
 559+ 0359 ~            .CalcYSign:             ld      a,(UBnKTargetVectorY+2)                ; c = sign of y_sign * sidev_y
 560+ 0359 ~                                    xor     (hl)                                ;
 561+ 0359 ~                                    ld      c,a                                 ;
 562+ 0359 ~            .MoveToZ:               inc     hl                                  ; Move on to Z component
 563+ 0359 ~            .AddXandY:              push    hl                                  ; but save HL as we need that
 564+ 0359 ~                                    ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 565+ 0359 ~                                    ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 566+ 0359 ~                                    ld      l,a                                 ;
 567+ 0359 ~                                    call    ADDHLDESignBC                       ; a(sign) hl = sum
 568+ 0359 ~                                    ld      b,a                                 ; b = sign of result
 569+ 0359 ~                                    ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 570+ 0359 ~            .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 571+ 0359 ~                                    ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 572+ 0359 ~                                    ld      e,a                                 ; .
 573+ 0359 ~                                    ld      a,(UBnKTargetVectorZ)                  ; .
 574+ 0359 ~                                    ld      d,a                                 ; .
 575+ 0359 ~                                    mul     de                                  ; .
 576+ 0359 ~                                    ld      e,d                                 ; .
 577+ 0359 ~                                    ld      d,0                                 ; .
 578+ 0359 ~                                    inc     hl                                  ; move to sign byte
 579+ 0359 ~            .CalcZSign:             ld      a,(UBnKTargetVectorZ+2)
 580+ 0359 ~                                    xor     (hl)
 581+ 0359 ~                                    ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 582+ 0359 ~                                    ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 583+ 0359 ~                                    call    ADDHLDESignBC                       ; so AHL = X y z products
 584+ 0359 ~                                    ld      (varS),a                            ; for backwards compatibility
 585+ 0359 ~                                    ld      a,l                                  ; .
 586+ 0359 ~                                    ret
 587+ 0359 ~
 588+ 0359 ~            CopyRotSideToUBnKTacticsMat:ld      hl,UBnkrotmatSidevX+1
 589+ 0359 ~                                    jp      CopyRotmatToTacticsMat
 590+ 0359 ~
 591+ 0359 ~            CopyRotNoseToUBnKTacticsMat:ld      hl,UBnkrotmatNosevX+1
 592+ 0359 ~                                    jp      CopyRotmatToTacticsMat
 593+ 0359 ~
 594+ 0359 ~            CopyRotRoofToBnKTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 595+ 0359 ~            ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 596+ 0359 ~            CopyRotmatToUBnKTacticsMat: ld      de,UBnKTacticsRotMatX
 597+ 0359 ~                                    ld      a,(hl)              ; matrix high byte of x
 598+ 0359 ~                                    ld      b,a
 599+ 0359 ~                                    and     SignMask8Bit
 600+ 0359 ~                                    ld      (de),a              ; set rot mat value
 601+ 0359 ~                                    inc     de
 602+ 0359 ~                                    ld      a,b
 603+ 0359 ~                                    and     SignOnly8Bit
 604+ 0359 ~                                    ld      (de),a              ; set rot mat sign
 605+ 0359 ~                                    inc     de                  ; move to next rot mat element
 606+ 0359 ~                                    inc     hl
 607+ 0359 ~                                    inc     hl                  ; matrix high byte of y
 608+ 0359 ~            .processYElement:       ld      a,(hl)              ; matrix high byte of y
 609+ 0359 ~                                    ld      b,a
 610+ 0359 ~                                    and     SignMask8Bit
 611+ 0359 ~                                    ld      (de),a              ; set rot mat value
 612+ 0359 ~                                    inc     de
 613+ 0359 ~                                    ld      a,b
 614+ 0359 ~                                    and     SignOnly8Bit
 615+ 0359 ~                                    ld      (de),a              ; set rot mat sign
 616+ 0359 ~                                    inc     de                  ; move to next rot mat element
 617+ 0359 ~                                    inc     hl
 618+ 0359 ~                                    inc     hl                  ; matrix high byte of z
 619+ 0359 ~            .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 620+ 0359 ~                                    ld      b,a
 621+ 0359 ~                                    and     SignMask8Bit
 622+ 0359 ~                                    ld      (de),a              ; set rot mat value
 623+ 0359 ~                                    inc     de
 624+ 0359 ~                                    ld      a,b
 625+ 0359 ~                                    and     SignOnly8Bit
 626+ 0359 ~                                    ld      (de),a              ; set rot mat sign
 627+ 0359 ~                                    ret
 628+ 0359                      ENDIF
 629+ 0359
 630+ 0359
 631+ 0359
# file closed: ../../Maths/MathsBankedFns.asm
1107  0359                                  DISPLAY "Bank ",MathsBankedFnsAddr," - Bytes free ",/D, $2000 - ($-MathsBankedFnsAddr), " - BankMathsBankedAdd"
1108  0359                                  ASSERT $-MathsBankedFnsAddr <8912, Bank code leaks over 8K boundary
1109  0359
1110  0359                  SAVENEX OPEN "VecTest.nex", EliteNextStartup , TopOfStack
1111  0359                  SAVENEX CFG  0,0,0,1
1112  0359                  SAVENEX AUTO
1113  0359                  SAVENEX CLOSE
1114  0359                  DISPLAY "Main Non Banked Code End ", MainNonBankedCodeEnd , " Bytes free ", 0B000H - MainNonBankedCodeEnd
1115  0359                  ASSERT MainNonBankedCodeEnd < 0B000H, Program code leaks intot interrup vector table
1116  0359
# file closed: VecTest.asm
