# file opened: VecTest.asm
   1  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
   2  0000                              DISPLAY "3D Test Code"
   3  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
   4  0000                              DISPLAY "TODO: Odd Single pixel bug "
   5  0000                  DEVICE ZXSPECTRUMNEXT
   6  0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   7  0000
   8  0000
   9  0000                  DEFINE  SHIP_DRAW_FULL_SCREEN 1
  10  0000                  DEFINE  USE_NORMALISE_IX  1
  11  0000                  DEFINE  INTERRUPS_DISABLE 1
  12  0000                  DEFINE  DEBUG_NO_TACTICS_CODE 1
  13  0000               CSPECTMAP VecTest.map
  14  0000               OPT --zxnext=cspect --syntax=a --reversepop
  15  0000              ;-- Key Definitions
  16  0000              ;   Q/A pitch       O/P roll        W/A Thrust
  17  0000              ;   T/G ship pitch, F/H ship roll   U/J Ship Thrust
  18  0000              ;   P   Cycle through ships
  19  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  20  0000              ; Game Defines
  21  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  22  0000              ; Colour Defines
  23  0000                                      INCLUDE "../../Hardware/L1ColourDefines.asm"
# file opened: ../../Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ../../Hardware/L1ColourDefines.asm
  24  0000                                      INCLUDE "../../Hardware/L2ColourDefines.asm"
# file opened: ../../Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ../../Hardware/L2ColourDefines.asm
  25  0000                                      INCLUDE "../../Hardware/register_defines.asm"
# file opened: ../../Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU $00
 120+ 0000              VERSION_REGISTER						EQU $01
 121+ 0000              RESET_REGISTER		    				EQU $02
 122+ 0000              MACHINE_TYPE_REGISTER					EQU $03
 123+ 0000              PAGE_RAM_REGISTER						EQU $04
 124+ 0000              PERIPHERAL_1_REGISTER					EQU $05   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU $06   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU $07
 127+ 0000              PERIPHERAL_3_REGISTER					EQU $08   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU $09   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU $0A  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU $0E
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU $10
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU $11
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU $12
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU $13
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU $14
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU $15
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU $16
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU $17
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU $18
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU $19
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU $1A
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU $1B
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU $1C
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU $1E
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU $1F
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU $22
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU $23
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU $26
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU $27
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU $28
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU $29
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU $2A
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU $2B
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU $2C
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU $2D
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU $2E
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU $2F
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU $30
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU $31
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU $32
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU $33
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU $34
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU $35
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU $36
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU $37
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU $38
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU $39
 170+ 0000              PALETTE_INDEX_REGISTER					EQU $40
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU $41
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU $42
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU $43
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU $44
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU $4A
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU $4B
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU $4C
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU $50
 180+ 0000              MMU_SLOT_1_REGISTER						EQU $51
 181+ 0000              MMU_SLOT_2_REGISTER						EQU $52
 182+ 0000              MMU_SLOT_3_REGISTER						EQU $53
 183+ 0000              MMU_SLOT_4_REGISTER						EQU $54
 184+ 0000              MMU_SLOT_5_REGISTER						EQU $55
 185+ 0000              MMU_SLOT_6_REGISTER						EQU $56
 186+ 0000              MMU_SLOT_7_REGISTER						EQU $57
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU $60
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU $61
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU $62
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU $63
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU $64
 193+ 0000              ULA_CONTROL_REGISTER                    EQU $68
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU $69
 195+ 0000              LORES_CONTROL_REGISTER                  EQU $6A
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU $6B
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU $6C
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU $6E
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU $6F
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU $70
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU $71
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_0_WITH_INC EQU $75
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1_WITH_INC EQU $76
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2_WITH_INC EQU $77
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3_WITH_INC EQU $78
 207+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC EQU $79
 208+ 0000              USER_STORAGE_0_REGISTER                 EQU $7F ; general purpose variable, e.g. for copper
 209+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU $80
 210+ 0000              EXPANSION_BUS_CONTROL_REGISTER          EQU $81
 211+ 0000              INTERNAL_PORT_DECODING_B0_7_REGISTER    EQU $82
 212+ 0000              INTERNAL_PORT_DECODING_B8_15_REGISTER   EQU $83
 213+ 0000              INTERNAL_PORT_DECODING_B16_23_REGISTER  EQU $84
 214+ 0000              INTERNAL_PORT_DECODING_B24_31_REGISTER  EQU $85
 215+ 0000              EXPANSION_BUS_DECODING_B0_7_REGISTER    EQU $86
 216+ 0000              EXPANSION_BUS_DECODING_B8_15_REGISTER   EQU $87
 217+ 0000              EXPANSION_BUS_DECODING_B16_23_REGISTER  EQU $88
 218+ 0000              EXPANSION_BUS_DECODING_B24_31_REGISTER  EQU $89
 219+ 0000              EXPANSION_BUS_IO_PROPAGE_REGISTER       EQU $8A
 220+ 0000              ALTERNATE_ROM_REGISTER                  EQU $8C
 221+ 0000              MEMORY_MAPPING_REGISTER                 EQU $8E
 222+ 0000              PI_GPI_OUTPUT_ENABLE_0_REIGISTER        EQU $98
 223+ 0000              PI_GPI_OUTPUT_ENABLE_1_REIGISTER        EQU $99
 224+ 0000              PI_GPI_OUTPUT_ENABLE_2_REIGISTER        EQU $9A
 225+ 0000              PI_GPI_OUTPUT_ENABLE_3_REIGISTER        EQU $9B
 226+ 0000              PI_PERPIPHERAL_ENABLE_REGISTER          EQU $A0
 227+ 0000              PI_I2S_AUDIO_CONTROL_REGISTER           EQU $A2
 228+ 0000              PI_I2S_CLOCK_DIVIDE_REGISTER            EQU $A3
 229+ 0000              ESP_WIFI_GPIO_OUTPUT_REGISTER           EQU $A8
 230+ 0000              ESP_WIFI_GPIO_REGISTER                  EQU $A9
 231+ 0000              EXTENDED_KEYS_0_REGISTER                EQU $B0
 232+ 0000              EXTENDED_KEYS_1_REGISTER                EQU $B1
 233+ 0000              DIVMMC_TRAP_ENABLE_1                    EQU $B2
 234+ 0000              DIVMMC_TRAP_ENABLE_2                    EQU $B4
 235+ 0000              DEBUG_LED_CONTROL_REGISTER              EQU $FF
 236+ 0000
 237+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 238+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 239+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 240+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 241+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 242+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 243+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 244+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 245+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 246+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 247+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 248+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 249+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 250+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 251+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 252+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 253+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 254+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 255+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 256+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 257+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 258+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 259+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 260+ 0000
 261+ 0000
 262+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 263+ 0000
 264+ 0000
 265+ 0000              GetNextRegSaveBC:	MACRO register
 266+ 0000 ~                                push bc
 267+ 0000 ~                                ld bc,$243B
 268+ 0000 ~                                ld a,register
 269+ 0000 ~                                out (c),a
 270+ 0000 ~                                inc b
 271+ 0000 ~                                in a,(c)
 272+ 0000 ~                                pop bc
 273+ 0000                                  ENDM
 274+ 0000
 275+ 0000              GetNextReg:	MACRO register
 276+ 0000 ~                        ld bc,$243B
 277+ 0000 ~                        ld a,register
 278+ 0000 ~                        out (c),a
 279+ 0000 ~                        inc b
 280+ 0000 ~                        in a,(c)
 281+ 0000                          ENDM
 282+ 0000
# file closed: ../../Hardware/register_defines.asm
  26  0000                                      INCLUDE "../../Layer2Graphics/layer2_defines.asm"
# file opened: ../../Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  34+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SHADOW_BANK1          equ 13
  36+ 0000              LAYER2_SHADOW_BANK2          equ 14
  37+ 0000              LAYER2_SHADOW_BANK3          equ 15
  38+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  39+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  40+ 0000
  41+ 0000              SCREEN_HEIGHT 				 equ 192
  42+ 0000              SCREEN_RAM_BASE				 equ $0000
  43+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  44+ 0000
  45+ 0000              SPRITES_VISIBLE_MASK         equ $01
  46+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  47+ 0000              LAYER_PRIORITIES_MASK        equ $07
  48+ 0000              LORES_MODE_MASK              equ $80
  49+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  50+ 0000
  51+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  52+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  53+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  54+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  55+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  56+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  57+ 0000
  58+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  59+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  60+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  61+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  62+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  63+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  64+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  65+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  66+ 0000              DMA_WR4_CONT_MODE            equ $AD
  67+ 0000              DMA_WR4_BURST_MODE           equ $CD
  68+ 0000              DMA_RESET                    equ $c3
  69+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  70+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  71+ 0000              DMA_LOAD                     equ $cf
  72+ 0000              DMA_CONTINUE                 equ $d3
  73+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  74+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  75+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  76+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  77+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  78+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  79+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  80+ 0000              DMA_FORCE_READY              equ $b3
  81+ 0000              DMA_STOP_AT_END			     equ $82
  82+ 0000              DMA_DISABLE                  equ $83
  83+ 0000              DMA_ENABLE                   equ $87
  84+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  85+ 0000              DMA_BURST                    equ $cd
  86+ 0000              DMA_CONTINUOUS               equ $ad
  87+ 0000              ZXN_DMA_PORT                 equ $6b
  88+ 0000
  89+ 0000
  90+ 0000              COLOUR_TRANSPARENT			 equ $E3
  91+ 0000
  92+ 0000
  93+ 0000
  94+ 0000
# file closed: ../../Layer2Graphics/layer2_defines.asm
  27  0000                                      INCLUDE	"../../Hardware/memory_bank_defines.asm"
# file opened: ../../Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              SpaceStationBankAddr    equ $c000
  28+ 0000              UniverseBankAddr	    equ $c000
  29+ 0000              LaunchShipAddr          equ $c000
  30+ 0000              membank7 			    equ $e000
  31+ 0000              L1membankAddr   	    equ $e000
  32+ 0000              L2membankAddr   	    equ $e000
  33+ 0000              ShipModelsAddr	        equ $e000
  34+ 0000              SpritemembankAddr       equ $e000
  35+ 0000              ResetUniverseAddr       equ $e000
  36+ 0000              StockTableAddr	        equ $e000
  37+ 0000              CommanderAddr           equ $e000
  38+ 0000              LAYER2Addr              equ $e000
  39+ 0000              LAYER1Addr              equ $e000
  40+ 0000              SPRITEAddr              equ $e000
  41+ 0000              ConsoleImageAddr        equ $e000
  42+ 0000              GalaxyDataAddr          equ $e000
  43+ 0000              SoundAddr               equ $e000
  44+ 0000              KeyboardAddr            equ $e000
  45+ 0000              MathsBankedFnsAddr      equ $0000
  46+ 0000
  47+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  48+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  49+ 0000              MathsBankedFnsMMU       equ MMU_SLOT_0_REGISTER
  50+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  51+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  52+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  53+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  54+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  55+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  56+ 0000              SpaceStationMMU         equ MMU_SLOT_6_REGISTER
  57+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  63+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  64+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  65+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  66+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  67+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  68+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  69+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  70+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  71+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  72+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  73+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  74+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  75+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  76+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  77+ 0000              KeyboardMMU             equ MMU_SLOT_7_REGISTER
  78+ 0000
  79+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  80+ 0000              BankResetUniv           equ 49
  81+ 0000              BankMenuShrCht          equ 50
  82+ 0000              BankMenuGalCht          equ 51
  83+ 0000              BankMenuInvent          equ 52
  84+ 0000              BankMenuSystem          equ 53
  85+ 0000              BankMenuMarket          equ 54
  86+ 0000              BankStockTable          equ 55
  87+ 0000              BankCommander           equ 56
  88+ 0000              BankLAYER2              equ 57
  89+ 0000              BankLAYER1              equ 58
  90+ 0000              BankShipModels1         equ 59
  91+ 0000              BankSPRITE              equ 60
  92+ 0000              BankConsole             equ 61
  93+ 0000              BankFrontView           equ 62
  94+ 0000              BankMenuStatus          equ 63
  95+ 0000              BankMenuEquipS          equ 64
  96+ 0000              BankLaunchShip          equ 65
  97+ 0000              BankDispMarket          equ 66
  98+ 0000              BankShipModels2         equ 67
  99+ 0000              BankShipModels3         equ 68
 100+ 0000              BankShipModels4         equ 69
 101+ 0000
 102+ 0000              BankUNIVDATA0           equ 70
 103+ 0000              BankSpaceStationData    equ 70
 104+ 0000              BankUNIVDATA1           equ 71
 105+ 0000              BankUNIVDATA2           equ 72
 106+ 0000              BankUNIVDATA3           equ 73
 107+ 0000              BankUNIVDATA4           equ 74
 108+ 0000              BankUNIVDATA5           equ 75
 109+ 0000              BankUNIVDATA6           equ 76
 110+ 0000              BankUNIVDATA7           equ 77
 111+ 0000              BankUNIVDATA8           equ 78
 112+ 0000              BankUNIVDATA9           equ 79
 113+ 0000              BankUNIVDATA10          equ 80
 114+ 0000              BankUNIVDATA11          equ 81
 115+ 0000              BankUNIVDATA12          equ 82
 116+ 0000              BankSunData             equ 83
 117+ 0000              BankPlanetData          equ 84
 118+ 0000
 119+ 0000              BankGalaxyData0         equ 91
 120+ 0000              BankGalaxyData1         equ 92
 121+ 0000              BankGalaxyData2         equ 93
 122+ 0000              BankGalaxyData3         equ 94
 123+ 0000              BankGalaxyData4         equ 95
 124+ 0000              BankGalaxyData5         equ 96
 125+ 0000              BankGalaxyData6         equ 97
 126+ 0000              BankGalaxyData7         equ 98
 127+ 0000
 128+ 0000              BankMathsTables         equ 99
 129+ 0000              BankSound               equ 100
 130+ 0000              BankKeyboard            equ 101
 131+ 0000              BankMathsBankedFns      equ 102
 132+ 0000
 133+ 0000              BankROM                 equ 255
 134+ 0000
 135+ 0000
# file closed: ../../Hardware/memory_bank_defines.asm
  28  0000                                      INCLUDE "../../Hardware/screen_equates.asm"
# file opened: ../../Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000                                      DISPLAY "TODO: place odler for debugging"
  19+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  20+ 0000              ScreenL1Bottom      equ $5000
  21+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  22+ 0000              ScreenL1AttrBtm     equ $5A00
  23+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  24+ 0000
# file closed: ../../Hardware/screen_equates.asm
  29  0000                                      INCLUDE "../../Data/ShipModelEquates.asm"
# file opened: ../../Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ../../Data/ShipModelEquates.asm
  30  0000                                      INCLUDE "../../Macros/graphicsMacros.asm"
# file opened: ../../Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              DoubleBuffer640IfPossible: MACRO
  19+ 0000 ~                                    IFDEF DOUBLEBUFFER
  20+ 0000 ~                                        MMUSelectLayer2
  21+ 0000 ~                                        call  l2_640_cls
  22+ 0000 ~                                        call  l2_flip_buffers
  23+ 0000 ~                                    ENDIF
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000
  27+ 0000
  28+ 0000              ErrorEquStepMinusDelta: MACRO   delta_step, delta_value
  29+ 0000 ~                                    ld      hl,(delta_step)
  30+ 0000 ~                                    ld      de,(delta_value)
  31+ 0000 ~                                    ClearCarryFlag
  32+ 0000 ~                                    sbc     hl,de
  33+ 0000 ~                                    ld      (error),hl
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ; we could hold steps and deltas in alternate registers later
  37+ 0000              ErrorPlusStep:          MACRO   delta_step
  38+ 0000 ~                                    ld      hl,(error)
  39+ 0000 ~                                    ld      de,(delta_step)
  40+ 0000 ~                                    add     hl,de
  41+ 0000 ~                                    ld      (error),hl
  42+ 0000                                      ENDM
  43+ 0000
  44+ 0000              ErrorMinusStep:         MACRO   delta_step
  45+ 0000 ~                                    ld      hl,(error)
  46+ 0000 ~                                    ld      de,(delta_step)
  47+ 0000 ~                                    ClearCarryFlag
  48+ 0000 ~                                    sbc     hl,de
  49+ 0000 ~                                    ld      (error),hl
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              SetExitFalse:           MACRO
  53+ 0000 ~                                    xor     a
  54+ 0000 ~                                    ld      (set_exit),a
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ; pulls axis high byte to a, returns nz if negative, z if positive
  58+ 0000              IsAxisLT0:              MACRO   axis
  59+ 0000 ~                                    ld      a,(axis+1)
  60+ 0000 ~                                    and     $80
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000              ; modifies HL, loaded with register, returns z if >=0, nz if negative
  64+ 0000              IsMemld16GTE0           MACRO   mem
  65+ 0000 ~                                    ld      hl, (mem)
  66+ 0000 ~                                    bit     7,h
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsMemNegative8JumpFalse:MACRO   mem, target
  70+ 0000 ~                                    ld      a,(mem)
  71+ 0000 ~                                    and     $80
  72+ 0000 ~                                    jp      z, target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              IsMem16GT0JumpFalse:    MACRO   mem, target
  76+ 0000 ~                                    ld      hl, (mem)
  77+ 0000 ~                                    bit     7,h
  78+ 0000 ~                                    jp      nz, target
  79+ 0000 ~                                    ld      a,h
  80+ 0000 ~                                    or      l
  81+ 0000 ~                                    jp      z,  target
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              FloorHLdivDETarget:     MACRO   target
  85+ 0000 ~                                    call    l_div                   ;       .  (so we swap and call l_div) HL = DE / HL, DE = DE % HL
  86+ 0000 ~                                    ld      a,d                     ;       .  get bit 7 into carry (set if negative)
  87+ 0000 ~                                    sla     a                       ;
  88+ 0000 ~                                    jr      nc,.FloorIsOK           ;
  89+ 0000 ~            .FloorAdjust:           dec     hl                      ;       .  if remainder >= adjust by 1 for negative
  90+ 0000 ~            .FloorIsOK:             ld      (target),hl             ;       .  now save the msd value
  91+ 0000                                      ENDM
  92+ 0000
# file closed: ../../Macros/graphicsMacros.asm
  31  0000                                      INCLUDE "../../Macros/callMacros.asm"
# file opened: ../../Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ../../Macros/callMacros.asm
  32  0000                                      INCLUDE "../../Macros/carryFlagMacros.asm"
# file opened: ../../Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ../../Macros/carryFlagMacros.asm
  33  0000                                      INCLUDE "../../Macros/CopyByteMacros.asm"
# file opened: ../../Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ../../Macros/CopyByteMacros.asm
  34  0000                                      INCLUDE "../../Macros/ldCopyMacros.asm"
# file opened: ../../Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopyWord:             MACRO memfrom, memto
  77+ 0000 ~                                    ldCopy2Byte memfrom, memto
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ldCopy2Byte:            MACRO  memfrom, memto
  81+ 0000 ~                                    ld       hl,(memfrom)
  82+ 0000 ~                                    ld       (memto),hl
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ldWriteConst            MACRO  memfrom, memto
  86+ 0000 ~                                    ld       a,memfrom
  87+ 0000 ~                                    ld       (memto),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ldWriteZero             MACRO  memto
  91+ 0000 ~                                    xor      a
  92+ 0000 ~                                    ld       (memto),a
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ldIXLaFromN:	        MACRO memfrom
  96+ 0000 ~                                    ld		a,(memfrom)
  97+ 0000 ~                                    ld		ixl,a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ldIXHaFromN:	        MACRO memfrom
 101+ 0000 ~                                    ld		a,(memfrom)
 102+ 0000 ~                                    ld		ixh,a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ldIYLaFromN:	        MACRO memfrom
 106+ 0000 ~                                    ld		a,(memfrom)
 107+ 0000 ~                                    ld		iyl,a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ldIYHaFromN:	        MACRO memfrom
 111+ 0000 ~                                    ld		a,(memfrom)
 112+ 0000 ~                                    ld		iyh,a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Read a 32 bit value from address HL into BCDE
 116+ 0000              ldBCDEatHL:             MACRO
 117+ 0000 ~                                    ld      e,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      d,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      c,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000 ~                                    ld      b,(hl)
 124+ 0000 ~                                    inc     hl
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              ldBCatHL:               MACRO
 128+ 0000 ~                                    ld      c,(hl)
 129+ 0000 ~                                    inc     hl
 130+ 0000 ~                                    ld      b,(hl)
 131+ 0000 ~                                    inc     hl
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ldhlde:			        MACRO
 135+ 0000 ~                                    ld		h,d
 136+ 0000 ~                                    ld		l,e
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ldhlbc:			        MACRO
 140+ 0000 ~                                    ld		h,b
 141+ 0000 ~                                    ld		l,c
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              ldbcde:			        MACRO
 145+ 0000 ~                                    ld		b,d
 146+ 0000 ~                                    ld		c,e
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              lddebc:			        MACRO
 150+ 0000 ~                                    ld		d,b
 151+ 0000 ~                                    ld		e,c
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ldbchl:			        MACRO
 155+ 0000 ~                                    ld		b,h
 156+ 0000 ~                                    ld		c,l
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              lddeiy:			        MACRO
 160+ 0000 ~                                    ld		d,iyh
 161+ 0000 ~                                    ld		e,iyl
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              ldiyde:			        MACRO
 165+ 0000 ~                                    ld		iyh,d
 166+ 0000 ~                                    ld		iyl,e
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000
 170+ 0000              FourLDIInstrunctions:   MACRO
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000 ~                                    ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              FiveLDIInstrunctions:   MACRO
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              SixLDIInstrunctions:    MACRO
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000 ~                                    ldi
 189+ 0000 ~                                    ldi
 190+ 0000 ~                                    ldi
 191+ 0000 ~                                    ldi
 192+ 0000                                      ENDM
 193+ 0000
 194+ 0000              EightLDIInstrunctions:  MACRO
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              NineLDIInstrunctions:  MACRO
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000 ~            		                ldi
 212+ 0000 ~            		                ldi
 213+ 0000 ~            		                ldi
 214+ 0000 ~            		                ldi
 215+ 0000                                      ENDM
# file closed: ../../Macros/ldCopyMacros.asm
  35  0000                                      INCLUDE "../../Macros/ldIndexedMacros.asm"
# file opened: ../../Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
  67+ 0000
  68+ 0000              ;-- Performs HL = |HL| - 1
  69+ 0000              DecHLABS:           MACRO
  70+ 0000 ~                                bit         7,h
  71+ 0000 ~                                jp          nz,.NegativeDec
  72+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  73+ 0000 ~                                or          l
  74+ 0000 ~                                jp          z,.HLZero
  75+ 0000 ~            .PositiveDec:       dec         hl
  76+ 0000 ~                                jp          .Done
  77+ 0000 ~            .NegativeDec:       ld          a,h
  78+ 0000 ~                                and         $7F
  79+ 0000 ~                                ld          h,a
  80+ 0000 ~                                dec         hl
  81+ 0000 ~                                set         7,h
  82+ 0000 ~                                jp          .Done
  83+ 0000 ~            .HLZero:            ld          hl,$8001
  84+ 0000 ~            .Done:
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000              ;-- Performs HL = HL - 1
  88+ 0000              DecHLSigned:        MACRO
  89+ 0000 ~                                bit         7,h
  90+ 0000 ~                                jp          nz,.NegativeDec
  91+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  92+ 0000 ~                                or          l
  93+ 0000 ~                                jp          z,.HLZero
  94+ 0000 ~            .PositiveDec:       dec         hl
  95+ 0000 ~                                jp          .Done
  96+ 0000 ~            .NegativeDec:       ld          a,h
  97+ 0000 ~                                and         $7F
  98+ 0000 ~                                ld          h,a
  99+ 0000 ~                                inc         hl                  ; if its already negative then add 1 to make it further
 100+ 0000 ~                                set         7,h
 101+ 0000 ~                                jp          .Done
 102+ 0000 ~            .HLZero:            ld          hl,$8001
 103+ 0000 ~            .Done:
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ../../Macros/ldIndexedMacros.asm
  36  0000                                      INCLUDE "../../Macros/jumpMacros.asm"
# file opened: ../../Macros/jumpMacros.asm
   1+ 0000              JumpIfHLNegative:       MACRO target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    jp      nz,target
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              JumpIfPositive:	        MACRO target
   7+ 0000 ~                                    jp		p, target
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              JumpIfNegative:	        MACRO target
  11+ 0000 ~                                    jp		m, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000
  15+ 0000              JumpIfUnderflow:	    MACRO target
  16+ 0000 ~                                    jp		po, target
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              JumpIfOverflow:	        MACRO target
  20+ 0000 ~                                    jp		po, target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              JumpIfNotZero:	        MACRO target
  25+ 0000 ~                                    jp	nz,target
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              JumpIfZero:	            MACRO target
  29+ 0000 ~                                    jp	z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ;.. Bit routines
  33+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  34+ 0000 ~                                    ld      a,reg
  35+ 0000 ~                                    and     SignOnly8Bit
  36+ 0000 ~                                    jp      nz,target
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  40+ 0000 ~                                    ld      a,reg
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      z,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignSetA:     MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      nz,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnLeadSignClearA:   MACRO   target
  51+ 0000 ~                                    and     SignOnly8Bit
  52+ 0000 ~                                    jp      z,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    bit 	bitnbr,a
  58+ 0000 ~                                    jp      nz,target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    bit 	bitnbr,a
  64+ 0000 ~                                    jp      z,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000
  68+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      nz,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  74+ 0000 ~                                    bit 	bitnbr, a
  75+ 0000 ~                                    jp      z,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Set:         MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      nz,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnABit5Clear:       MACRO   target
  84+ 0000 ~                                    and     Bit5Only
  85+ 0000 ~                                    jp      z,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      nz,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  94+ 0000 ~                                    and     bitmask
  95+ 0000 ~                                    jp      z,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  99+ 0000 ~                                    ld      a,(mem)
 100+ 0000 ~                                    and     bitmask
 101+ 0000 ~                                    jp      nz,target
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 105+ 0000 ~                                    ld      a,(mem)
 106+ 0000 ~                                    and     bitmask
 107+ 0000 ~                                    jp      z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      nz,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 116+ 0000 ~                                    bit 	bitnbr,reg
 117+ 0000 ~                                    jp      z,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Comparison Routines
 121+ 0000              JumpIfAGTEusng:         MACRO
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTENusng:        MACRO reg,target
 126+ 0000 ~                                    cp     reg
 127+ 0000 ~                                    jp		nc,target
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 131+ 0000 ~                                    ld      hl,mem
 132+ 0000 ~                                    cp      (hl)
 133+ 0000 ~                                    jp		nc,target
 134+ 0000                                      ENDM
 135+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 136+ 0000 ~                                    ld     a,(mem)
 137+ 0000 ~                                    cp     value
 138+ 0000 ~                                    jp	  nc,target
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 142+ 0000 ~                                    ld   a,(mem)
 143+ 0000 ~                                    ld   hl,address
 144+ 0000 ~                                    cp   (hl)
 145+ 0000 ~                                    jp	  nc,target
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 149+ 0000 ~                                    ld   a,(mem)
 150+ 0000 ~                                    ld   hl,address
 151+ 0000 ~                                    cp   (hl)
 152+ 0000 ~                                    jp	  z,target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 156+ 0000 ~                                    ld   a,(mem)
 157+ 0000 ~                                    ld   hl,address
 158+ 0000 ~                                    cp   (hl)
 159+ 0000 ~                                    jp	  nz,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemTrue:          MACRO mem, target
 163+ 0000 ~                                    ld      a,(mem)
 164+ 0000 ~                                    and     a
 165+ 0000 ~                                    jp      z, target
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              JumpIfMemFalse:         MACRO mem, target
 169+ 0000 ~                                    ld      a,(mem)
 170+ 0000 ~                                    and     a
 171+ 0000 ~                                    jp      nz, target
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              JumpIfATrue:            MACRO target
 175+ 0000 ~                                    and     a
 176+ 0000 ~                                    jp      z, target
 177+ 0000                                      ENDM
 178+ 0000
 179+ 0000              JumpIfAFalse:           MACRO target
 180+ 0000 ~                                    and     a
 181+ 0000 ~                                    jp      nz, target
 182+ 0000                                      ENDM
 183+ 0000
 184+ 0000              JumpIfANotFalse:        MACRO target
 185+ 0000 ~                                    cp      $FF
 186+ 0000 ~                                    jp      nz, target
 187+ 0000                                      ENDM
 188+ 0000
 189+ 0000              ;-- Less than Macros -------------------------------------------
 190+ 0000              JumpIfALTMemHLusng:     MACRO target
 191+ 0000 ~                                    cp    (hl)
 192+ 0000 ~                                    jp	  c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfRegLTE:           MACRO   reg, value, target
 196+ 0000 ~                                    ld      a,reg
 197+ 0000 ~                                    cp      value
 198+ 0000 ~                                    jp	    z,target
 199+ 0000 ~                                    jp		c, target
 200+ 0000                                      ENDM
 201+ 0000
 202+ 0000              JumpIfALTMemusng:       MACRO mem,target
 203+ 0000 ~                                    ld      hl,mem
 204+ 0000 ~                                    cp      (hl)
 205+ 0000 ~                                    jp		c,target
 206+ 0000                                      ENDM
 207+ 0000
 208+ 0000
 209+ 0000              JumpIfALTusng:          MACRO target
 210+ 0000 ~                                    jp		c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfALTNusng:         MACRO value, target
 214+ 0000 ~                                    cp      value
 215+ 0000 ~                                    jp		c, target
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              JumpIfALTNsigned:       MACRO   value, target
 219+ 0000 ~                                    cp      value
 220+ 0000 ~                                    jp      m,.SignSet
 221+ 0000 ~            .SignClear:             jp      pe,target       ; Sign (0), P/V (1)
 222+ 0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (0)
 223+ 0000 ~            .SignSet:               jp      po,target
 224+ 0000 ~            .CheckComplete:
 225+ 0000                                      ENDM
 226+ 0000
 227+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 228+ 0000 ~                                    ld      a,(mem)
 229+ 0000 ~                                    cp      value
 230+ 0000 ~                                    jp	  c,target
 231+ 0000                                      ENDM
 232+ 0000
 233+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 234+ 0000 ~                                    ld    a,(mem)
 235+ 0000 ~                                    ld    hl,value
 236+ 0000 ~                                    cp    (hl)
 237+ 0000 ~                                    jp	  c,target
 238+ 0000                                      ENDM
 239+ 0000              ;-- ------------------------------------------------------------
 240+ 0000              JumpIfAGTENsigned       MACRO   value, target
 241+ 0000 ~                                    cp      value
 242+ 0000 ~                                    jp      m,.SignSet
 243+ 0000 ~            .SignClear:             jp      po,target       ; Sign (0), P/V (0)
 244+ 0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (1)
 245+ 0000 ~            .SignSet:               jp      pe,target
 246+ 0000 ~            .CheckComplete:
 247+ 0000                                      ENDM
 248+ 0000
 249+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 250+ 0000 ~                                    ld  a,(mem)
 251+ 0000 ~                                    cp  value
 252+ 0000 ~                                    jp  z,target
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 256+ 0000 ~                                    ld  a,(mem)
 257+ 0000 ~                                    cp  value
 258+ 0000 ~                                    jp  nz,target
 259+ 0000                                      ENDM
 260+ 0000
 261+ 0000              JumpIfMemZero:          MACRO mem,target
 262+ 0000 ~                                    ld  a,(mem)
 263+ 0000 ~                                    and a
 264+ 0000 ~                                    jp  z,target
 265+ 0000                                      ENDM
 266+ 0000
 267+ 0000              JumpIfMemNotZero:       MACRO mem,target
 268+ 0000 ~                                    ld  a,(mem)
 269+ 0000 ~                                    and a
 270+ 0000 ~                                    jp  nz,target
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              JumpIfANENusng:         MACRO value, target
 274+ 0000 ~                                    cp     value
 275+ 0000 ~                                    jp      nz,target
 276+ 0000                                      ENDM
 277+ 0000
 278+ 0000              JumpIfANEquNusng:       MACRO value, target
 279+ 0000 ~                                    cp     value
 280+ 0000 ~                                    jp     z,target
 281+ 0000                                      ENDM
 282+ 0000
 283+ 0000              JumpIfANEMemusng:       MACRO  value, target
 284+ 0000 ~                                    ld    hl,value
 285+ 0000 ~                                    cp    (hl)
 286+ 0000 ~                                    jp      nz,target
 287+ 0000                                      ENDM
 288+ 0000
 289+ 0000              JumpIfAEqNusng:         MACRO value, target
 290+ 0000 ~                                    cp     value
 291+ 0000 ~                                    jp      z,target
 292+ 0000                                      ENDM
 293+ 0000
 294+ 0000              JumpIfAIsZero:	        MACRO target
 295+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 296+ 0000 ~                                    jp	    z, target
 297+ 0000                                      ENDM
 298+ 0000
 299+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 300+ 0000 ~                                    ld      a,reg
 301+ 0000 ~                                    and     a
 302+ 0000 ~                                    jp	    nz,target
 303+ 0000                                      ENDM
 304+ 0000
 305+ 0000
 306+ 0000              JumpIfAIsNotZero:       MACRO target
 307+ 0000 ~                                    and     a
 308+ 0000 ~                                    jp	    nz,target
 309+ 0000                                      ENDM
 310+ 0000
 311+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 312+ 0000 ~                                    ld      a,(value)
 313+ 0000 ~                                    and     a
 314+ 0000 ~                                    jp	    nz,target
 315+ 0000                                      ENDM
 316+ 0000              IfResultZeroGoto:	    MACRO target
 317+ 0000 ~                                    jp	z,target
 318+ 0000                                      ENDM
 319+ 0000
 320+ 0000              IfResultNotZeroGoto:    MACRO target
 321+ 0000 ~                                    jp	nz,target
 322+ 0000                                      ENDM
 323+ 0000
# file closed: ../../Macros/jumpMacros.asm
  37  0000                                      INCLUDE "../../Macros/MathsMacros.asm"
# file opened: ../../Macros/MathsMacros.asm
   1+ 0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
   2+ 0000              IsHLGT255:              MACRO
   3+ 0000 ~                                    bit     7,h
   4+ 0000 ~                                    ret     z
   5+ 0000 ~                                    ld      a,h
   6+ 0000 ~                                    and     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              ; Sets z flat if HL = 255 else sets it to nz
  10+ 0000              IsHLEqu255:             MACRO
  11+ 0000 ~                                    ld      a,h
  12+ 0000 ~                                    and     a               ; if its non zero then it can't be 255
  13+ 0000 ~                                    ret     nz
  14+ 0000 ~                                    ld      a,l
  15+ 0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              ; Sets Z flag if GT 127 else nz
  19+ 0000              IsHLGT127:              MACRO
  20+ 0000 ~                                    bit     7,h             ; -ve?
  21+ 0000 ~                                    jr      nz,.DoneCheck
  22+ 0000 ~                                    ld      a,h             ; +ve > 256?
  23+ 0000 ~                                    and     a
  24+ 0000 ~                                    jr      nz,.DoneCheck
  25+ 0000 ~                                    ld      a,l
  26+ 0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
  27+ 0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
  28+ 0000 ~            .DoneCheck:
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              ReturnIfHLGT127:        MACRO
  32+ 0000 ~                                    bit     7,h             ; -ve?
  33+ 0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
  34+ 0000 ~                                    ld      a,h             ; +ve > 256?
  35+ 0000 ~                                    and     a               ;
  36+ 0000 ~                                    ret     nz              ; forces a return
  37+ 0000 ~                                    bit     7,l             ; bit 7 of lower set?
  38+ 0000 ~                                    ret     nz              ; forces a return
  39+ 0000 ~            .DoneCheck:
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              IsDEGT127:              MACRO
  43+ 0000 ~                                    bit     7,d
  44+ 0000 ~                                    jr      nz,.DoneCheck
  45+ 0000 ~                                    ld      a,d
  46+ 0000 ~                                    jr      nz,.DoneCheck
  47+ 0000 ~                                    ld      a,e
  48+ 0000 ~                                    and     $80
  49+ 0000 ~            .DoneCheck:
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ABSa2c:                 MACRO
  53+ 0000 ~                                    bit     7,a
  54+ 0000 ~                                    jp      z,.DoneABSa
  55+ 0000 ~                                    neg
  56+ 0000 ~            .DoneABSa:
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              DEEquSquareA:           MACRO
  60+ 0000 ~                                    ld  d,a
  61+ 0000 ~                                    ld  e,a
  62+ 0000 ~                                    mul de
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  66+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  67+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  68+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  69+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  70+ 0000 ~                                    xor $80                             ;
  71+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  72+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  73+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  74+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  75+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  76+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              SignedHLTo2C:           MACRO
  80+ 0000 ~                                    bit     7,h
  81+ 0000 ~                                    jr      z,.Done2c
  82+ 0000 ~                                    ld      a,h
  83+ 0000 ~                                    and     SignMask8Bit
  84+ 0000 ~                                    ld      h,a
  85+ 0000 ~                                    NegHL
  86+ 0000 ~            .Done2c:
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              MemSignedTo2C:          MACRO   memfrom
  90+ 0000 ~                                    ld      hl,(memfrom)
  91+ 0000 ~                                    bit     7,h
  92+ 0000 ~                                    jr      z,.Done2c
  93+ 0000 ~                                    ld      a,h
  94+ 0000 ~                                    and     SignMask8Bit
  95+ 0000 ~                                    ld      h,a
  96+ 0000 ~            .Done2c:                ld      (memfrom),hl
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000
 100+ 0000                  ;returns result in H
 101+ 0000              EDiv10Inline:           MACRO
 102+ 0000 ~                                    ld      d,0
 103+ 0000 ~                                    ld      hl,de
 104+ 0000 ~                                    add     hl,hl
 105+ 0000 ~                                    add     hl,de
 106+ 0000 ~                                    add     hl,hl
 107+ 0000 ~                                    add     hl,hl
 108+ 0000 ~                                    add     hl,de
 109+ 0000 ~                                    add     hl,hl
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              cpHLDE:                 MACRO
 113+ 0000 ~                                    push    hl
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    sbc     hl,de
 116+ 0000 ~                                    pop     hl
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              cpABSDEHL:              MACRO
 120+ 0000 ~                                    push     hl,,de
 121+ 0000 ~                                    ld      a,h
 122+ 0000 ~                                    and     $7F
 123+ 0000 ~                                    ld      h,a
 124+ 0000 ~                                    ld      a,d
 125+ 0000 ~                                    and     $7F
 126+ 0000 ~                                    ld      d,a
 127+ 0000 ~                                    ex      de,hl
 128+ 0000 ~                                    sbc     hl,de
 129+ 0000 ~                                    pop     hl,,de
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              ; Simple are they both the same setting z if they are
 133+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
 134+ 0000              ; so jp needs to be to a target
 135+ 0000              cpHLEquDE:              MACRO   passedCheck
 136+ 0000 ~                                    ld      a,h
 137+ 0000 ~                                    cp      d
 138+ 0000 ~                                    jp      nz, passedCheck
 139+ 0000 ~                                    ld      a,l
 140+ 0000 ~                                    cp      e
 141+ 0000 ~            .NoTheSame:
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              cpHLEquBC:              MACRO   passedCheck
 145+ 0000 ~                                    ld      a,h
 146+ 0000 ~                                    cp      b
 147+ 0000 ~                                    jp      nz, passedCheck
 148+ 0000 ~                                    ld      a,l
 149+ 0000 ~                                    cp      c
 150+ 0000 ~            .NoTheSame:
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              cpDEEquBC:              MACRO   passedCheck
 154+ 0000 ~                                    ld      a,d
 155+ 0000 ~                                    cp      b
 156+ 0000 ~                                    jp      nz, passedCheck
 157+ 0000 ~                                    ld      a,e
 158+ 0000 ~                                    cp      c
 159+ 0000 ~            .NoTheSame:
 160+ 0000                                      ENDM
 161+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 162+ 0000              cpHLDELeadSign:         MACRO
 163+ 0000 ~                                    ld      a,h
 164+ 0000 ~                                    cp      d
 165+ 0000 ~                                    jr      nz,.FullCompare
 166+ 0000 ~                                    ld      a,l
 167+ 0000 ~                                    cp      e
 168+ 0000 ~                                    ret     z
 169+ 0000 ~            .FullCompare:           ld      a,h
 170+ 0000 ~                                    xor     d
 171+ 0000 ~                                    and     $80
 172+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 173+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 174+ 0000 ~                                    and     $80
 175+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 176+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 177+ 0000 ~            .OppositeSigns:         ld      a,h
 178+ 0000 ~                                    and     $80
 179+ 0000 ~                                    and     $80
 180+ 0000 ~                                    jp      z,.HLGTDE
 181+ 0000 ~            .HLLTDE:                SetCarryFlag
 182+ 0000 ~                                    ret
 183+ 0000 ~            .HLGTDE:                ClearCarryFlag
 184+ 0000 ~                                    ret
 185+ 0000                                      ENDM
 186+ 0000
 187+ 0000              ;Unsigned
 188+ 0000              ;If HL == DE, then Z flag is set.
 189+ 0000              ;If HL != DE, then Z flag is reset.
 190+ 0000              ;If HL <  DE, then C flag is set.
 191+ 0000              ;If HL >= DE, then C flag is reset.
 192+ 0000              ;
 193+ 0000              ;Signed
 194+ 0000              ;If HL == DE, then Z flag is set.
 195+ 0000              ;If HL != DE, then Z flag is reset.
 196+ 0000              ;If HL <  DE, then S and P/V are different.
 197+ 0000              ;If HL >= DE, then S and P/V are the same.
 198+ 0000
 199+ 0000
 200+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
 201+ 0000 ~                                    ld      a,param3                        ;
 202+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 203+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 204+ 0000 ~                                    ld      d,a
 205+ 0000 ~                                    mul
 206+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 207+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              AequN1xorN2:            MACRO  param1,param2
 211+ 0000 ~                                    ld      a,(param1)
 212+ 0000 ~                                    xor     param2
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 216+ 0000 ~                                    ld      e,speedreg
 217+ 0000 ~                                    ld      hl,(axis)
 218+ 0000 ~                                    ld      a,h
 219+ 0000 ~                                    ClearSignBitA
 220+ 0000 ~                                    ld      d,a
 221+ 0000 ~                                    mul     de
 222+ 0000 ~                                    ld      a,h
 223+ 0000 ~                                    SignBitOnlyA
 224+ 0000 ~                                    ld      b,a;ld      c,a
 225+ 0000 ~                                    ld      h,d;ld      e,d
 226+ 0000 ~                                    ld      c,0;ld      d,0
 227+ 0000                                      ENDM
 228+ 0000
 229+ 0000              ; Adds speed (8 bit) to vertex (24 bit signed)
 230+ 0000              AddSpeedToVert:         MACRO   vertex
 231+ 0000 ~                                    ld      de,(vertex+1)
 232+ 0000 ~                                    ld      a,(vertex)
 233+ 0000 ~                                    ld      l,a
 234+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 235+ 0000 ~                                    ld      a,l
 236+ 0000 ~                                    ld      (vertex),a
 237+ 0000 ~                                    ld      (vertex+1),de
 238+ 0000                                      ENDM
# file closed: ../../Macros/MathsMacros.asm
  38  0000                                      INCLUDE "../../Macros/MMUMacros.asm"
# file opened: ../../Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectKeyboard:   MACRO
  15+ 0000 ~                                 nextreg KeyboardMMU,       BankKeyboard
  16+ 0000                                   ENDM
  17+ 0000
  18+ 0000              MMUSelectSpriteBank: MACRO
  19+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectConsoleBank: MACRO
  23+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer1: 	 MACRO
  27+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectLayer2: 	 MACRO
  31+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectResetUniv:  MACRO
  35+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  36+ 0000                                   ENDM
  37+ 0000
  38+ 0000              MMUSelectShipARead:  MACRO
  39+ 0000 ~                                 add    a,BankUNIVDATA0
  40+ 0000 ~                                 nextreg ShipReadMMU,       a
  41+ 0000                                   ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBank1:  MACRO
  44+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  45+ 0000              					 ENDM
  46+ 0000              MMUSelectShipBank2:  MACRO
  47+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  48+ 0000              					 ENDM
  49+ 0000              MMUSelectShipBank3:  MACRO
  50+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  51+ 0000              					 ENDM
  52+ 0000              MMUSelectShipBank4:  MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankA   MACRO
  57+ 0000 ~            					 nextreg ShipModelMMU,	    a
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectShipBankN:  MACRO value
  61+ 0000 ~            					 nextreg ShipModelMMU,	    value
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectCommander:	 MACRO
  65+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectStockTable: MACRO
  69+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcA:    MACRO
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectCpySrcN:    MACRO value
  77+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectSun:        MACRO
  81+ 0000 ~                                 nextreg SunMMU,            BankSunData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectPlanet:     MACRO
  85+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  86+ 0000                                   ENDM
  87+ 0000
  88+ 0000              MMUSelectUniverseA:  MACRO
  89+ 0000 ~                                 add    a,BankUNIVDATA0
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  93+ 0000              MMUSelectUnivBankA:  MACRO
  94+ 0000 ~                                 nextreg UniverseMMU,       a
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectUniverseN:  MACRO value
  98+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectSpaceStation: MACRO
 102+ 0000 ~                                 nextreg SpaceStationMMU,   BankSpaceStationData
 103+ 0000                                   ENDM
 104+ 0000
 105+ 0000              MMUSelectMathsBankedFns   MACRO
 106+ 0000 ~                                 nextreg MathsBankedFnsMMU, BankMathsBankedFns
 107+ 0000                                   ENDM
 108+ 0000
 109+ 0000              MMUSelectGalaxyA:    MACRO
 110+ 0000 ~                                 nextreg GalaxyDataMMU,     a
 111+ 0000                                   ENDM
 112+ 0000
 113+ 0000              MMUSelectGalaxyN:    MACRO value
 114+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 115+ 0000                                   ENDM
 116+ 0000              MMUSelectGalaxyACopy:MACRO
 117+ 0000 ~                                 nextreg UniverseMMU,       a
 118+ 0000                                   ENDM
 119+ 0000
 120+ 0000              MMUSelectUniverseAbs:MACRO value
 121+ 0000 ~                                 nextreg UniverseMMU,       value
 122+ 0000                                   ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuGalCht: MACRO
 125+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuShrCht: MACRO
 129+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuInvent: MACRO
 133+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectMenuSystem: MACRO
 137+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectMenuMarket: MACRO
 141+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectMenuStatus: MACRO
 145+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 146+ 0000              					 ENDM
 147+ 0000
 148+ 0000              MMUSelectViewFront:  MACRO
 149+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 150+ 0000              					 ENDM
 151+ 0000
 152+ 0000              MMUSelectScreenA:    MACRO
 153+ 0000 ~                                 nextreg ScreenBankMMU,		a
 154+ 0000              					 ENDM
 155+ 0000
 156+ 0000              MMUSelectSound:      MACRO
 157+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 158+ 0000              					 ENDM
 159+ 0000
 160+ 0000
 161+ 0000
 162+ 0000              SaveMMU6:           MACRO
 163+ 0000 ~                                GetNextReg  MMU_SLOT_6_REGISTER
 164+ 0000 ~                                ld      (SavedMMU6),a
 165+ 0000                                  ENDM
 166+ 0000
 167+ 0000              RestoreMMU6:        MACRO
 168+ 0000 ~                                ld      a,(SavedMMU6)               ; now restore up post interrupt
 169+ 0000 ~                                nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 170+ 0000                                  ENDM
 171+ 0000
 172+ 0000              SaveMMU7:           MACRO
 173+ 0000 ~                                GetNextReg  MMU_SLOT_7_REGISTER
 174+ 0000 ~                                ld      (SavedMMU7),a
 175+ 0000                                  ENDM
 176+ 0000
 177+ 0000              RestoreMMU7:        MACRO
 178+ 0000 ~                                ld      a,(SavedMMU7)               ; now restore up post interrupt
 179+ 0000 ~                                nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 180+ 0000                                  ENDM
# file closed: ../../Macros/MMUMacros.asm
  39  0000                                      INCLUDE "../../Macros/NegateMacros.asm"
# file opened: ../../Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              macronegate16hl:	MACRO
   3+ 0000 ~            					xor 	a
   4+ 0000 ~            					sub 	l
   5+ 0000 ~            					ld 		l,a
   6+ 0000 ~            					sbc 	a,a
   7+ 0000 ~            					sub 	h
   8+ 0000 ~            					ld 		h,a
   9+ 0000              					ENDM
  10+ 0000
  11+ 0000
  12+ 0000              macroAbsHL:         MACRO
  13+ 0000 ~                                bit     7,h
  14+ 0000 ~                                jp      z,.alreadyABS
  15+ 0000 ~            					xor 	a
  16+ 0000 ~            					sub 	l
  17+ 0000 ~            					ld 		l,a
  18+ 0000 ~            					sbc 	a,a
  19+ 0000 ~            					sub 	h
  20+ 0000 ~            					ld 		h,a
  21+ 0000 ~            .alreadyABS:
  22+ 0000                                  ENDM
  23+ 0000
  24+ 0000              macronegate16de:	MACRO
  25+ 0000 ~            					xor 	a
  26+ 0000 ~                                sub 	e
  27+ 0000 ~                                ld 		e,a
  28+ 0000 ~                                sbc 	a,a
  29+ 0000 ~                                sub 	d
  30+ 0000 ~                                ld 		d,a
  31+ 0000              					ENDM
  32+ 0000
  33+ 0000              macronegate16bc:	MACRO
  34+ 0000 ~            					xor 	a
  35+ 0000 ~                                sub 	c
  36+ 0000 ~                                ld 		c,a
  37+ 0000 ~                                sbc 	a,a
  38+ 0000 ~                                sub 	b
  39+ 0000 ~                                ld 		b,a
  40+ 0000              					ENDM
  41+ 0000
  42+ 0000              macronegate16ix:	MACRO
  43+ 0000 ~            					xor 	a
  44+ 0000 ~                                sub 	ixl
  45+ 0000 ~                                ld 		ixl,a
  46+ 0000 ~                                sbc 	a,a
  47+ 0000 ~                                sub 	ixh
  48+ 0000 ~                                ld 		ixh,a
  49+ 0000              					ENDM
  50+ 0000
  51+ 0000
  52+ 0000              NegIY:			    MACRO
  53+ 0000 ~                                xor a
  54+ 0000 ~                                sub iyl
  55+ 0000 ~                                ld iyl,a
  56+ 0000 ~                                sbc a,a
  57+ 0000 ~                                sub iyh
  58+ 0000 ~                                ld iyh,a
  59+ 0000                                  ENDM
  60+ 0000
  61+ 0000              NegHL:			    MACRO
  62+ 0000 ~                                xor a
  63+ 0000 ~                                sub l
  64+ 0000 ~                                ld l,a
  65+ 0000 ~                                sbc a,a
  66+ 0000 ~                                sub h
  67+ 0000 ~                                ld h,a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000              NegDE:			    MACRO
  71+ 0000 ~                                xor a
  72+ 0000 ~                                sub e
  73+ 0000 ~                                ld e,a
  74+ 0000 ~                                sbc a,a
  75+ 0000 ~                                sub d
  76+ 0000 ~                                ld d,a
  77+ 0000                                  ENDM
  78+ 0000
  79+ 0000              NegBC:			    MACRO
  80+ 0000 ~                                xor a
  81+ 0000 ~                                sub c
  82+ 0000 ~                                ld c,a
  83+ 0000 ~                                sbc a,a
  84+ 0000 ~                                sub  b
  85+ 0000 ~                                ld b,a
  86+ 0000                                  ENDM
  87+ 0000
  88+ 0000              NegH                MACRO
  89+ 0000 ~                                ld      a,h
  90+ 0000 ~                                neg
  91+ 0000 ~                                ld      h,a
  92+ 0000                                  ENDM
  93+ 0000
  94+ 0000              NegD                MACRO
  95+ 0000 ~                                ld      a,d
  96+ 0000 ~                                neg
  97+ 0000 ~                                ld      d,a
  98+ 0000                                  ENDM
  99+ 0000
 100+ 0000              NegB                MACRO
 101+ 0000 ~                                ld      a,b
 102+ 0000 ~                                neg
 103+ 0000 ~                                ld      b,a
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ../../Macros/NegateMacros.asm
  40  0000                                      INCLUDE "../../Macros/returnMacros.asm"
# file opened: ../../Macros/returnMacros.asm
   1+ 0000              ReturnIfHLNegative:     MACRO   target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnIfDENegative:     MACRO   target
   7+ 0000 ~                                    bit     7,d
   8+ 0000 ~                                    ret     nz
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
  12+ 0000 ~                                    bit 	bitnbr,reg
  13+ 0000 ~                                    ret     nz
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  17+ 0000 ~                                    ld   a,(mem)
  18+ 0000 ~                                    bit 	bitnbr,a
  19+ 0000 ~                                    ret     nz
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    ret		z
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  28+ 0000 ~                                    ld     a,(mem)
  29+ 0000 ~                                    bit 	bitnbr,a
  30+ 0000 ~                                    ret		z
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ReturnIfMemFalse:       MACRO   mem
  34+ 0000 ~                                    ld      a,(mem)
  35+ 0000 ~                                    and     a
  36+ 0000 ~                                    ret     nz
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ReturnIfMemTrue:        MACRO   mem
  40+ 0000 ~                                    ld      a,(mem)
  41+ 0000 ~                                    and     a
  42+ 0000 ~                                    ret     z
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfAIsZero:        MACRO
  46+ 0000 ~                                    and     a
  47+ 0000 ~                                    ret     z
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              ReturnIfMemisZero:      MACRO mem
  51+ 0000 ~                                    ld   a,(mem)
  52+ 0000 ~                                    and a
  53+ 0000 ~                                    ret    z
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemIsNegative:  MACRO mem
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    and     $80
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  63+ 0000 ~                                    and     bitmask
  64+ 0000 ~                                    ret     z
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  68+ 0000 ~                                    and     bitmask
  69+ 0000 ~                                    ret     nz
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              ReturnIfMemEquN:        MACRO mem, value
  73+ 0000 ~                                    ld     a,(mem)
  74+ 0000 ~                                    cp     value
  75+ 0000 ~                                    ret    nz
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  79+ 0000 ~                                    ld   a,(mem)
  80+ 0000 ~                                    cp     value
  81+ 0000 ~                                    ret    z
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ReturnIfRegNotZero:     MACRO reg
  85+ 0000 ~                                    ld      a, reg
  86+ 0000 ~                                    and     a
  87+ 0000 ~                                    ret     nz
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ReturnIfANotZero:       MACRO
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret     nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfNotZero:        MACRO
  96+ 0000 ~                                    ret     nz
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfZero:           MACRO
 100+ 0000 ~                                    ret     z
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ReturnIfNegative:       MACRO
 104+ 0000 ~                                    ret     m
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000
 108+ 0000              ReturnIfMemNotZero:     MACRO mem
 109+ 0000 ~                                    ld     a,(mem)
 110+ 0000 ~                                    and     a
 111+ 0000 ~                                    ret    nz
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ReturnIfAGTEusng:       MACRO value
 115+ 0000 ~                                    cp    value
 116+ 0000 ~                                    ret	 nc
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 120+ 0000 ~                                    ld      a,reg
 121+ 0000 ~                                    cp      value
 122+ 0000 ~                                    ret	    c
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfALTNusng:       MACRO value
 126+ 0000 ~                                    cp    value
 127+ 0000 ~                                    ret	 c
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ReturnIfAGTENusng:      MACRO value
 131+ 0000 ~                                    cp    value
 132+ 0000 ~                                    ret	 nc
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ReturnIfAGTEMemusng:    MACRO value
 136+ 0000 ~                                    ld      hl,value
 137+ 0000 ~                                    cp      (hl)
 138+ 0000 ~                                    ret	    nc
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              ReturnIfANENusng:       MACRO value
 142+ 0000 ~                                    cp      value
 143+ 0000 ~                                    ret     nz
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              ReturnIfAEqNusng:       MACRO value
 147+ 0000 ~                                    cp      value
 148+ 0000 ~                                    ret     z
 149+ 0000                                      ENDM
 150+ 0000
# file closed: ../../Macros/returnMacros.asm
  41  0000                                      INCLUDE "../../Macros/ShiftMacros.asm"
# file opened: ../../Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftIXRight1: MACRO
  11+ 0000 ~            			   ld 	a,ixh
  12+ 0000 ~            			   srl 	a
  13+ 0000 ~            			   ld	ixh,a
  14+ 0000 ~            			   ld 	a,ixl
  15+ 0000 ~            			   rra
  16+ 0000 ~            			   ld	ixl,a
  17+ 0000              			   ENDM
  18+ 0000
  19+ 0000              ShiftIXhHLRight1: MACRO
  20+ 0000 ~                           ld  a,ixh
  21+ 0000 ~                           srl a
  22+ 0000 ~                           ld  ixh,a
  23+ 0000 ~            			   rr  h
  24+ 0000 ~            			   rr  l
  25+ 0000              			   ENDM
  26+ 0000
  27+ 0000              ShiftIYhDERight1: MACRO
  28+ 0000 ~                           ld  a,iyh
  29+ 0000 ~                           srl a
  30+ 0000 ~                           ld  iyh,a
  31+ 0000 ~                           rr  d
  32+ 0000 ~            			   rr  e
  33+ 0000              			   ENDM
  34+ 0000
  35+ 0000              ShiftIYlBCRight1: MACRO
  36+ 0000 ~                           ld  a,iyl
  37+ 0000 ~                           srl a
  38+ 0000 ~                           ld  iyl,a
  39+ 0000 ~            			   rr  b
  40+ 0000 ~                           rr  c
  41+ 0000              			   ENDM
  42+ 0000
  43+ 0000              ShiftIXlBCRight1: MACRO
  44+ 0000 ~                           ld  a,ixl
  45+ 0000 ~                           srl a
  46+ 0000 ~                           ld  ixl,a
  47+ 0000 ~            			   rr  b
  48+ 0000 ~                           rr  c
  49+ 0000              			   ENDM
  50+ 0000
  51+ 0000              ShiftHLRight1: MACRO
  52+ 0000 ~            			   srl h
  53+ 0000 ~            			   rr  l
  54+ 0000              			   ENDM
  55+ 0000
  56+ 0000              ShiftDERight1: MACRO
  57+ 0000 ~            			   srl d
  58+ 0000 ~            			   rr  e
  59+ 0000              			   ENDM
  60+ 0000
  61+ 0000              ShiftBCRight1: MACRO
  62+ 0000 ~            			   srl b
  63+ 0000 ~            			   rr  c
  64+ 0000              			   ENDM
  65+ 0000
  66+ 0000
  67+ 0000
  68+ 0000              ShiftHLDiv8:   MACRO
  69+ 0000 ~            			   srl h
  70+ 0000 ~            			   rr  l
  71+ 0000 ~            			   srl h
  72+ 0000 ~            			   rr  l
  73+ 0000 ~            			   srl h
  74+ 0000 ~            			   rr  l
  75+ 0000              			   ENDM
  76+ 0000
  77+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  78+ 0000 ~            			   sla l
  79+ 0000 ~            			   rl  h
  80+ 0000              			   ENDM
  81+ 0000
  82+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  83+ 0000 ~            			   sla e
  84+ 0000 ~            			   rl  d
  85+ 0000              			   ENDM
  86+ 0000
  87+ 0000              BarrelHLLeft3: MACRO
  88+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  89+ 0000 ~                           push     bc      ; 10
  90+ 0000 ~                           ld       b,3     ; 7
  91+ 0000 ~                           bsrl     de,b    ; 8
  92+ 0000 ~                           pop      bc      ; 10
  93+ 0000 ~                           ex       de,hl   ; 4
  94+ 0000                             ENDM
  95+ 0000
  96+ 0000              BarrelHLRight3: MACRO
  97+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  98+ 0000 ~                           push     bc      ; 10
  99+ 0000 ~                           ld       b,3     ; 7
 100+ 0000 ~                           bsrl     de,b    ; 8
 101+ 0000 ~                           pop      bc      ; 10
 102+ 0000 ~                           ex       de,hl   ; 4
 103+ 0000                             ENDM
 104+ 0000
 105+ 0000              RollBCLeft1:   MACRO	; 16 T states
 106+ 0000 ~                           rl  c
 107+ 0000 ~                           rl  b
 108+ 0000                             ENDM
 109+ 0000
 110+ 0000              RollDELeft1:   MACRO	; 16 T states
 111+ 0000 ~                           rl  e
 112+ 0000 ~                           rl  d
 113+ 0000                             ENDM
 114+ 0000
 115+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
 116+ 0000 ~            			   sla c
 117+ 0000 ~            			   rl  b
 118+ 0000              			   ENDM
 119+ 0000
 120+ 0000              ShiftLeftMem:       MACRO   reg
 121+ 0000 ~                                ld      hl,reg
 122+ 0000 ~                                sla     (hl)
 123+ 0000                                  ENDM
 124+ 0000
 125+ 0000
 126+ 0000
 127+ 0000              ShiftMem16Right1:   MACRO memaddr
 128+ 0000 ~                                ld    hl,(memaddr)
 129+ 0000 ~                                srl   h
 130+ 0000 ~                                rr    l
 131+ 0000 ~                                ld    (memaddr),hl
 132+ 0000                                  ENDM
 133+ 0000
 134+ 0000              ShiftMem8Right1:    MACRO memaddr
 135+ 0000 ~                                ld      a,(memaddr)
 136+ 0000 ~                                srl     a
 137+ 0000 ~                                ld      (memaddr),a
 138+ 0000                                  ENDM
 139+ 0000
 140+ 0000
 141+ 0000              ShiftMem8Left1A:    MACRO memaddr
 142+ 0000 ~                                ld      a,(memaddr)
 143+ 0000 ~                                sla     a
 144+ 0000 ~                                ld      (memaddr),a
 145+ 0000                                  ENDM
 146+ 0000
# file closed: ../../Macros/ShiftMacros.asm
  42  0000                                      INCLUDE "../../Macros/signBitMacros.asm"
# file opened: ../../Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ../../Macros/signBitMacros.asm
  43  0000                                      INCLUDE "../../Macros/KeyboardMacros.asm"
# file opened: ../../Macros/KeyboardMacros.asm
   1+ 0000              MacroIsKeyPressed:      MACRO C_Pressed_keycode
   2+ 0000 ~                                    ld      a,C_Pressed_keycode
   3+ 0000 ~                                    MMUSelectKeyboard
   4+ 0000 ~                                    call    is_key_pressed
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              MacroInitkeyboard:      MACRO
   8+ 0000 ~                                    MMUSelectKeyboard
   9+ 0000 ~                                    call    init_keyboard
  10+ 0000                                      ENDM
  11+ 0000
# file closed: ../../Macros/KeyboardMacros.asm
  44  0000                                      INCLUDE "../../Universe/UniverseMacros/asm_linedraw.asm"
# file opened: ../../Universe/UniverseMacros/asm_linedraw.asm
   1+ 0000              ClippingVarsMacro:   MACRO   prefix1?
   2+ 0000 ~            ;-- Clipping code for universe objects -------------------------------------------
   3+ 0000 ~            prefix1?_XX13        DB 0
   4+ 0000 ~
   5+ 0000 ~
   6+ 0000 ~            prefix1?_varK3		 DS	4				; D2
   7+ 0000 ~            prefix1?_centreX     equ prefix1?_varK3
   8+ 0000 ~            prefix1?_varK3p2	 DB	0				; 42
   9+ 0000 ~            prefix1?_varK3p3	 DB	0				; 43
  10+ 0000 ~            prefix1?_varK3p1	 equ prefix1?_varK3+1			; D3
  11+ 0000 ~            prefix1?_varK4		 DS	4				; E0
  12+ 0000 ~            prefix1?_centreY     equ prefix1?_varK4
  13+ 0000 ~            prefix1?_varK4p1	 equ prefix1?_varK4+1			; D3
  14+ 0000 ~            prefix1?_varK5       DS  6
  15+ 0000 ~            prefix1?_varK5p2     equ prefix1?_varK5+2
  16+ 0000 ~            prefix1?_varK6       DS  6
  17+ 0000 ~            prefix1?_varK6p2     equ prefix1?_varK6+2
  18+ 0000 ~
  19+ 0000 ~            prefix1?_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  20+ 0000 ~            prefix1?_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  21+ 0000 ~            prefix1?_XX12p4      DB 0
  22+ 0000 ~            prefix1?_XX12p5      DB 0
  23+ 0000 ~            prefix1?_Delta_x     EQU prefix1?_XX12p2
  24+ 0000 ~            prefix1?_Delta_y     EQU prefix1?_XX12p4
  25+ 0000 ~            prefix1?_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  26+ 0000 ~            prefix1?_Qvar        DB 0
  27+ 0000 ~            prefix1?_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  28+ 0000 ~            prefix1?_Svar        DB 0    ; sign variable
  29+ 0000 ~            prefix1?_SRvarPair   EQU prefix1?_Rvar
  30+ 0000 ~            prefix1?_Xreg        DB 0
  31+ 0000 ~            prefix1?_Yreg        DB 0
  32+ 0000 ~            prefix1?_YXregPair   EQU prefix1?_Xreg
  33+ 0000                                   ENDM
  34+ 0000
  35+ 0000              ;-- Name: LL28 Calculate R = 256 * A / Q
  36+ 0000              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  37+ 0000              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  38+ 0000              ;   Reg mapping 6502  Z80
  39+ 0000              ;               a     a
  40+ 0000              ;               b     x
  41+ 0000              ;               c     q
  42+ 0000              ;               d     r
  43+ 0000              ;
  44+ 0000              ClippingCodeLL28Macro:      MACRO   prefix1?
  45+ 0000 ~            prefix1?_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  46+ 0000 ~                                        ld      c,(hl)                  ; using c as Q var
  47+ 0000 ~                                        cp      c
  48+ 0000 ~                                        FlipCarryFlag
  49+ 0000 ~                                        jp      c, prefix1?_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
  50+ 0000 ~                                        ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  51+ 0000 ~            prefix1?_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
  52+ 0000 ~                                        jp      c, prefix1?_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  53+ 0000 ~                                        FlipCarryFlag                   ;                          If A < N, then C flag is set.
  54+ 0000 ~                                        JumpIfALTNusng c, prefix1?_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  55+ 0000 ~                                                                            ; BCC P%+4
  56+ 0000 ~                                        sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  57+ 0000 ~                                        ClearCarryFlag
  58+ 0000 ~            prefix1?_LL31_SKIPSUB_6502:  FlipCarryFlag
  59+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  60+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  61+ 0000 ~                                        ld      a,b
  62+ 0000 ~                                        ld      (Rvar),a
  63+ 0000 ~                                        ret                             ; RTS                    \ R left with remainder of division
  64+ 0000 ~            prefix1?_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  65+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  66+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  67+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  68+ 0000 ~                                        ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  69+ 0000 ~                                        ld      (Rvar),a                ; .
  70+ 0000 ~                                        ret                             ; .                      \ remainder of the division
  71+ 0000 ~            prefix1?_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  72+ 0000 ~                                        ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  73+ 0000 ~                                        SetCarryFlag                    ; we failed so need carry flag set
  74+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
  75+ 0000 ~
  76+ 0000 ~            prefix1?_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
  77+ 0000 ~                                        ld      c,a
  78+ 0000 ~                                        ld      b,0
  79+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  80+ 0000 ~                                        ClearCarryFlag
  81+ 0000 ~                                        adc     hl,bc
  82+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  83+ 0000 ~                                        ret
  84+ 0000 ~
  85+ 0000 ~            prefix1?_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
  86+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  87+ 0000 ~                                        ClearCarryFlag
  88+ 0000 ~                                        adc     hl,bc
  89+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  90+ 0000 ~                                        ret
  91+ 0000 ~
  92+ 0000 ~            prefix1?_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
  93+ 0000 ~                                        ld      hl,(prefix1?_XX1510)
  94+ 0000 ~                                        ClearCarryFlag
  95+ 0000 ~                                        adc     hl,bc
  96+ 0000 ~                                        ld      (prefix1?_XX1510),hl
  97+ 0000 ~                                        ret
  98+ 0000 ~
  99+ 0000 ~            prefix1?_SUBBCFromY1:       ld      hl,(prefix1?_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 100+ 0000 ~                                        ClearCarryFlag
 101+ 0000 ~                                        sbc     hl,bc
 102+ 0000 ~                                        ld      (SRvarPair),hl
 103+ 0000 ~                                        ret
 104+ 0000 ~
 105+ 0000 ~            prefix1?_AddSRToYX:         ld      hl,(YXregPair)
 106+ 0000 ~                                        ld      de,(SRvarPair)
 107+ 0000 ~                                        ClearCarryFlag
 108+ 0000 ~                                        adc     hl,de
 109+ 0000 ~                                        ld      (YXregPair),hl
 110+ 0000 ~                                        ret
 111+ 0000 ~
 112+ 0000 ~            prefix1?_ClampX:            ld      a,h
 113+ 0000 ~                                        and     a
 114+ 0000 ~                                        ld      a,l
 115+ 0000 ~                                        ret     z
 116+ 0000 ~                                        jp      p,.Max255
 117+ 0000 ~            .ClampXMin0:                ZeroA
 118+ 0000 ~                                        ret
 119+ 0000 ~            .Max255:                    ld      a,$FF
 120+ 0000 ~                                        ret
 121+ 0000 ~
 122+ 0000 ~            prefix1?_ClampY:            ld      a,h
 123+ 0000 ~                                        and     a
 124+ 0000 ~                                        jp      z,.ClampYlo
 125+ 0000 ~                                        jp      p,.Max127
 126+ 0000 ~            .ClampYMin0:                ZeroA
 127+ 0000 ~                                        ret
 128+ 0000 ~            .Max127:                    ld      a,127
 129+ 0000 ~                                        ret
 130+ 0000 ~            .ClampYlo:                  ld      a,l
 131+ 0000 ~                                        and     a
 132+ 0000 ~                                        ret     p
 133+ 0000 ~                                        ld      a,127
 134+ 0000 ~                                        ret
 135+ 0000                                          ENDM
 136+ 0000              ;-- Rountes to code:
 137+ 0000              ;-- LL118
 138+ 0000              ;-- LL120   Done
 139+ 0000              ;-- LL129   Done
 140+ 0000              ;-- LL123   Done
 141+ 0000                             ; NOTE DOES ABS ONLY
 142+ 0000
 143+ 0000
 144+ 0000                              ;--- LL118 Move along a point until on screen
 145+ 0000              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 146+ 0000              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 147+ 0000              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 148+ 0000              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 149+ 0000              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 150+ 0000              ;  Out  XX150               x1 as an 8-bit coordinate
 151+ 0000              ;       XX152               y1 as an 8-bit coordinate
 152+ 0000              ;----------------------------------------------------------------------------------------------------------------
 153+ 0000
 154+ 0000
 155+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 156+ 0000              ;--  Calculate the following:
 157+ 0000              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 158+ 0000              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 159+ 0000              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 160+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 161+ 0000              ClippingCodeLL120Macro:     MACRO   prefix1?
 162+ 0000 ~            prefix1?_LL120_6502:        ld      a,(prefix1?_XX1510)              ;LDA XX15               \ Set R = x1_lo
 163+ 0000 ~                                        ld      (Rvar),a                ;STA R
 164+ 0000 ~                                        call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 165+ 0000 ~                                        push    af                      ;PHA                    \ Store A on the stack so we can use it later
 166+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 167+ 0000 ~                                        ld      a,(Tvar)                ; .
 168+ 0000 ~                                        ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 169+ 0000 ~                                        and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 170+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 171+ 0000 ~                                        jr      nz,prefix1?_LL121_6502           ;.
 172+ 0000 ~            ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 173+ 0000 ~            prefix1?_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 174+ 0000 ~
 175+ 0000 ~                                        IFDEF DEBUG_LL122_DIRECT"
 176+ 0000 ~                                              DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 177+ 0000 ~                                              push    af
 178+ 0000 ~                                        ENDIF
 179+ 0000 ~                                        ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 180+ 0000 ~                                        ld      (Yreg),a                ;TAY
 181+ 0000 ~                                        ld      hl,Svar
 182+ 0000 ~                                        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 183+ 0000 ~                                        ShiftBCRight1                   ;ROR R                  \ into the C flag
 184+ 0000 ~                                        ld      (SRvarPair),bc
 185+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 186+ 0000 ~                                        sla     (hl)                    ;.
 187+ 0000 ~                                        jr      nc, prefix1?_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 188+ 0000 ~            ; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 189+ 0000 ~            prefix1?_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 190+ 0000 ~            prefix1?_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 191+ 0000 ~                                        ShiftBCRight1                   ;ROR R
 192+ 0000 ~                                        ld      (SRvarPair),bc          ;.
 193+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 194+ 0000 ~                                        sla     (hl)                    ;.
 195+ 0000 ~                                        jr      c,prefix1?_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 196+ 0000 ~                                        jr      nz,prefix1?_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 197+ 0000 ~                                        pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 198+ 0000 ~                                        and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 199+ 0000 ~                                        jp      p,prefix1?_LL133_6502            ;.
 200+ 0000 ~                                        ;.. return from the subroutine using a tail call
 201+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 202+ 0000                                  ENDM
 203+ 0000              ;----------------------------------------------------------------------------------------------------------------------------
 204+ 0000              ;-- Calculate the following:
 205+ 0000              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 206+ 0000              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 207+ 0000              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 208+ 0000              ClippingCodeLL122Macro:      MACRO   prefix1?
 209+ 0000 ~            prefix1?_LL123_6502:         call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 210+ 0000 ~                                         push    af                      ;PHA                    \ Store A on the stack so we can use it later
 211+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 212+ 0000 ~                                         ld      a,(Tvar)                ; .
 213+ 0000 ~                                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 214+ 0000 ~                                         and     a                       ;.
 215+ 0000 ~            ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 216+ 0000 ~                                         jr      nz,prefix1?_LL122_6502           ;.
 217+ 0000 ~            ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 218+ 0000 ~            prefix1?_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 219+ 0000 ~                                         ld      (Yreg),a                ;TAY
 220+ 0000 ~                                         sla     a                       ;ASL A                  \ Set X = %11111110
 221+ 0000 ~                                         ld      (Xreg),a                ;TAX
 222+ 0000 ~            ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 223+ 0000 ~            prefix1?_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 224+ 0000 ~                                        ShiftBCLeft1                    ;.
 225+ 0000 ~                                        ld      (SRvarPair),bc          ;ROL S
 226+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Set A = S
 227+ 0000 ~                                        jr      c, prefix1?_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 228+ 0000 ~                                        ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 229+ 0000 ~                                        cp      (hl)
 230+ 0000 ~                                        FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 231+ 0000 ~                                        jr      nc,prefix1?_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 232+ 0000 ~            prefix1?_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 233+ 0000 ~                                        sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 234+ 0000 ~                                        ld      (Svar),a                ;STA S
 235+ 0000 ~                                        ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 236+ 0000 ~                                        ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 237+ 0000 ~                                        sbc     0                       ;SBC #0
 238+ 0000 ~                                        ld      (Rvar),a                ;STA R
 239+ 0000 ~                                        SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 240+ 0000 ~                                        jp      prefix1?_LL132_6502              ;added so that we can do a 6502 style carry above
 241+ 0000 ~            prefix1?_LL132A_6502:        nop; FlipCarryFlag
 242+ 0000 ~            prefix1?_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 243+ 0000 ~                                        RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 244+ 0000 ~                                        ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 245+ 0000 ~                                        jr      c, prefix1?_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 246+ 0000 ~                    IFDEF DEBUG_LL121_DIRECT
 247+ 0000 ~                          DISPLAY "DIRECT CALL TO LL121 so dummy push"
 248+ 0000 ~                                        push    af
 249+ 0000 ~                    ENDIF
 250+ 0000 ~                                        pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 251+ 0000 ~                                        and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 252+ 0000 ~                                        jp      m, prefix1?_LL128_6502           ; .                      \ subroutine with (Y X) as is
 253+ 0000 ~            prefix1?_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 254+ 0000 ~                                        macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 255+ 0000 ~                                        ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 256+ 0000 ~            prefix1?_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 257+ 0000 ~            ;-------------------------------------------------------------------------------------------------------
 258+ 0000 ~            ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 259+ 0000 ~            ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 260+ 0000 ~            prefix1?_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 261+ 0000 ~                                        ld      a,(prefix1?_XX12p2)              ;.
 262+ 0000 ~                                        ld      (Xreg),a                ;.
 263+ 0000 ~                                        ld      (Qvar),a                ;STX Q
 264+ 0000 ~                                        pop     af                      ;.
 265+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 266+ 0000 ~                                        and     a                       ;BPL LL127
 267+ 0000 ~                                        jp      p,prefix1?_LL127_6502            ;.
 268+ 0000 ~                                        ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 269+ 0000 ~                                        ClearCarryFlag                  ;SEC
 270+ 0000 ~                                        ld      hl, Rvar                ;SBC R
 271+ 0000 ~                                        sbc     (hl)                    ;.
 272+ 0000 ~                                        ld      (Rvar),a                ;STA R
 273+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 274+ 0000 ~                                        push    af                      ;PHA
 275+ 0000 ~                                        xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 276+ 0000 ~                                        adc     0                       ;ADC #0
 277+ 0000 ~                                        ld      (Svar),a                ;STA S
 278+ 0000 ~                                        pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 279+ 0000 ~            prefix1?_LL127_6502:        ld      hl,prefix1?_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 280+ 0000 ~                                        xor     (hl)                    ;.
 281+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 282+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 283+ 0000 ~            ;--- LL118 Move along a point until on screen
 284+ 0000 ~            ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 285+ 0000 ~            ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 286+ 0000 ~            ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 287+ 0000 ~            ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 288+ 0000 ~            ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 289+ 0000 ~            ;  Out  XX150               x1 as an 8-bit coordinate
 290+ 0000 ~            ;       XX152               y1 as an 8-bit coordinate
 291+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 292+ 0000 ~
 293+ 0000 ~            prefix1?_LL118_6502:         ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 294+ 0000 ~                                        and     a                       ; BPL LL119              \ .
 295+ 0000 ~                                        jp      p, prefix1?_LL119_6502           ;                        \ following
 296+ 0000 ~            .X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 297+ 0000 ~                                        call    prefix1?_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 298+ 0000 ~                                                                ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 299+ 0000 ~                                                                ; with the sign of (Y X) set to the opposite of the line's direction of slope
 300+ 0000 ~                                        call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 301+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; .
 302+ 0000 ~                                        ld      hl,0                    ; Set x1 = 0
 303+ 0000 ~                                        ld      (prefix1?_XX1510),hl             ; .
 304+ 0000 ~                                        ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 305+ 0000 ~                                        ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 306+ 0000 ~                                        jp      prefix1?_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 307+ 0000 ~            ;-- Entering LL119 a will always be the value of X1 Hi byte
 308+ 0000 ~            prefix1?_LL119_6502:         jp      z,prefix1?_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 309+ 0000 ~                                                                        ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 310+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 311+ 0000 ~                                        dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 312+ 0000 ~                                        ld      (Svar),a                ;
 313+ 0000 ~                                        call    prefix1?_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 314+ 0000 ~                                                                        ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 315+ 0000 ~                                                                        ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 316+ 0000 ~                                        call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 317+ 0000 ~                                        ld      hl,255                  ; LDX #255               \ Set x1 = 255
 318+ 0000 ~                                        ld      ( prefix1?_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 319+ 0000 ~            ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 320+ 0000 ~            prefix1?_LL134_6502:        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 321+ 0000 ~                                        and     a                       ; BPL LL135              \ the following
 322+ 0000 ~                                        jp      p, prefix1?_LL135_6502           ; .
 323+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 324+ 0000 ~                                        ld      a, ( prefix1?_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 325+ 0000 ~                                        ld      (Rvar),a                ; STA R
 326+ 0000 ~                                        call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 327+ 0000 ~                                                                        ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 328+ 0000 ~                                                                        ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 329+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 330+ 0000 ~                                        ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 331+ 0000 ~                                        ld      ( prefix1?_XX1532),hl             ; STA XX15+2, XX15+3
 332+ 0000 ~            prefix1?_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 333+ 0000 ~                                        call    SUBBCFromY1             ; .                      \ .
 334+ 0000 ~                                        jr      c, prefix1?_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 335+ 0000 ~                                                                ;                        \ to return from the subroutine, as we are done
 336+ 0000 ~            ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 337+ 0000 ~            prefix1?_LL139_6502:         call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 338+ 0000 ~            ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 339+ 0000 ~            ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 340+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 341+ 0000 ~                                        ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 342+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 343+ 0000 ~            prefix1?_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 344+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 345+ 0000 ~            ;-- LL145 LINE CLIP
 346+ 0000 ~            ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 347+ 0000 ~            ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 348+ 0000 ~            ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 349+ 0000 ~            ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 350+ 0000 ~            ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 351+ 0000 ~            ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 352+ 0000 ~            ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 353+ 0000 ~            ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 354+ 0000 ~            ; TODO treat horizonal/vert and single pixel as special cases
 355+ 0000                                  ENDM
 356+ 0000
 357+ 0000              ClippingCodeLL145Macro:     MACRO   prefix1?
 358+ 0000 ~            prefix1?_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 359+ 0000 ~                                        ld      (SWAP),a                ; STA SWAP
 360+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 361+ 0000 ~                                        ld      b,a                     ; .
 362+ 0000 ~            ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 363+ 0000 ~            ; for the screen coord we will use 127 though, we use c as a temporay X register
 364+ 0000 ~            prefix1?_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 365+ 0000 ~                                        ld      (Xreg),a                ; .
 366+ 0000 ~            ;                    ld      a,127
 367+ 0000 ~            ;                    ld      c,a
 368+ 0000 ~            .CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 369+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi    ; .
 370+ 0000 ~                                        or      (hl)                    ; .
 371+ 0000 ~                                        jp      nz,prefix1?_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 372+ 0000 ~            .CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 373+ 0000 ~                                        ld      hl,prefix1?_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 374+ 0000 ~                                        cp      (hl)                    ; .
 375+ 0000 ~                                        jp      c,prefix1?_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 376+ 0000 ~                                        ZeroA                           ; LDX #0                 \ Set X = 0
 377+ 0000 ~                                        ld      (Xreg),a
 378+ 0000 ~            prefix1?_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 379+ 0000 ~                                        ld      ( prefix1?_XX13),a      ; now c is released as a temporary x reg
 380+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 381+ 0000 ~                                        ld      hl,prefix1?_XX15Y1hi    ; ORA XX15+3             \ to LL83
 382+ 0000 ~                                        or      (hl)                    ; .
 383+ 0000 ~                                        jp      nz,prefix1?_LL83_6502            ; BNE LL83
 384+ 0000 ~            ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 385+ 0000 ~                                        ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 386+ 0000 ~                                        ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 387+ 0000 ~                                        cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 388+ 0000 ~                                        jp      nc, prefix1?_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 389+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 390+ 0000 ~                                        and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 391+ 0000 ~                                        jp      nz,prefix1?_LL108_6502
 392+ 0000 ~            ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 393+ 0000 ~            ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 394+ 0000 ~            ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 395+ 0000 ~            prefix1?_LL146_6502:        ld      hl,(prefix1?_XX15X1lo)           ;  Save X1 to XX1510
 396+ 0000 ~                                        call    prefix1?_ClampX
 397+ 0000 ~                                        ld      (prefix1?_XX15X1lo),a
 398+ 0000 ~                                        ld      hl,(prefix1?_XX15Y1lo)           ;  hl = y1
 399+ 0000 ~                                        call    prefix1?_ClampY
 400+ 0000 ~                                        ld      (prefix1?_XX1510+1),a            ;  XX1510... = [X1][Y1]
 401+ 0000 ~
 402+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)           ;  de = x2
 403+ 0000 ~                                        call    prefix1?_ClampX
 404+ 0000 ~                                        ld      (prefix1?_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 405+ 0000 ~
 406+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)           ;  bc = y2
 407+ 0000 ~                                        call    prefix1?_ClampY
 408+ 0000 ~                                        ld      (prefix1?_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 409+ 0000 ~                                        ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 410+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 411+ 0000 ~            prefix1?_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 412+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 413+ 0000 ~            prefix1?_LL108_6502:        ld      hl, prefix1?_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 414+ 0000 ~                                        srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 415+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 416+ 0000 ~            ;-- LL145 (Part 2 of 4)
 417+ 0000 ~            prefix1?_LL83_6502:         ld      a,( prefix1?_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 418+ 0000 ~                                        and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 419+ 0000 ~                                        jp      p,prefix1?_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 420+ 0000 ~            ;-- If we get here, both points are off-screen
 421+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 422+ 0000 ~                                        ld      hl,prefix1?_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 423+ 0000 ~                                        and     (hl)
 424+ 0000 ~                                        jp      m, prefix1?_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 425+ 0000 ~                                        ld      a,(prefix1?_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 426+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 427+ 0000 ~                                        and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 428+ 0000 ~                                        jp      m,prefix1?_LL109_6502            ; .
 429+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 430+ 0000 ~                                        dec     a                                ; DEX
 431+ 0000 ~                                        ld      (Xreg),a                         ; TXA
 432+ 0000 ~                                        push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 433+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; .
 434+ 0000 ~                                        dec     a                                ; DEX
 435+ 0000 ~                                        ld      (Xreg),a                         ; STX XX12+2
 436+ 0000 ~                                        pop     af                               ; .              SP+0    restore a register
 437+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 438+ 0000 ~                                        or      (hl)                             ; .
 439+ 0000 ~                                        jp      p, prefix1?_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 440+ 0000 ~            ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 441+ 0000 ~            ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 442+ 0000 ~            prefix1?_LL83_DEBUG:          ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 443+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 444+ 0000 ~                                        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 445+ 0000 ~                                        sbc     0                       ; SBC #0                 \ .
 446+ 0000 ~                                        ld      (prefix1?_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 447+ 0000 ~                                        ld      a,(prefix1?_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 448+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 449+ 0000 ~                                        ld      a,(prefix1?_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 450+ 0000 ~                                        sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 451+ 0000 ~                                        ld      hl,prefix1?_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 452+ 0000 ~                                        or      (hl)                    ; .
 453+ 0000 ~                                        jp      p,prefix1?_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 454+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 0000 ~            ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 456+ 0000 ~            prefix1?_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 457+ 0000 ~                                        push    af                      ; PHA            SP+1    \ call to this subroutine
 458+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 459+ 0000 ~                                        ld      de,(prefix1?_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 460+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+1
 461+ 0000 ~                                        sbc     hl,de                   ; .
 462+ 0000 ~                                        ld      (delta_x),hl            ; .
 463+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 464+ 0000 ~                                        ld      de,(prefix1?_XX15Y1lo)             ;
 465+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+2
 466+ 0000 ~                                        sbc     hl,de                   ; .
 467+ 0000 ~                                        ld      (delta_y),hl            ; .
 468+ 0000 ~            ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 469+ 0000 ~                                        ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 470+ 0000 ~                                        ld      hl,delta_x+1
 471+ 0000 ~                                        xor     (hl)
 472+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 473+ 0000 ~                                        ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 474+ 0000 ~                                        ld      a,h
 475+ 0000 ~                                        and     a
 476+ 0000 ~                                        jp      p, prefix1?_LL110_6502  ; BPL LL110              \ the following
 477+ 0000 ~                                        NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 478+ 0000 ~                                        ld      (delta_y),hl            ; positive, starting with the low bytes
 479+ 0000 ~            prefix1?_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 480+ 0000 ~                                        ld      a,h                     ; BPL LL111              \ the following
 481+ 0000 ~                                        and     a                       ; .
 482+ 0000 ~                                        jp      p,prefix1?_LL111_6502            ; .
 483+ 0000 ~                                        NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 484+ 0000 ~                                        ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 485+ 0000 ~            ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 486+ 0000 ~            prefix1?_LL111_6502:        ld      hl,(delta_x)
 487+ 0000 ~                                        ld      de,(delta_y)
 488+ 0000 ~                                        ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 489+ 0000 ~                                        or      d                       ; BNE LL112
 490+ 0000 ~                                        jp      z,prefix1?_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 491+ 0000 ~            prefix1?_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 492+ 0000 ~                                        ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 493+ 0000 ~                                        ld      (delta_x),hl
 494+ 0000 ~                                        ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 495+ 0000 ~                                        jp       prefix1?_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 496+ 0000 ~            ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 497+ 0000 ~            prefix1?_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 498+ 0000 ~                                        ld      (Tvar),a
 499+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 500+ 0000 ~                                        ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 501+ 0000 ~                                        cp      (hl)
 502+ 0000 ~                                        jp      c, prefix1?_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 503+ 0000 ~            ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 504+ 0000 ~                                        ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 505+ 0000 ~                                        ld      (Qvar),a                ; .
 506+ 0000 ~                                        ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 507+ 0000 ~                                        call    prefix1?_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 508+ 0000 ~                                        jp      prefix1?_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 509+ 0000 ~            ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 510+ 0000 ~            prefix1?_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 511+ 0000 ~                                        ld      (Qvar),a                ; STA Q
 512+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 513+ 0000 ~                                        call    prefix1?_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 514+ 0000 ~                                        ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 515+ 0000 ~                                        ld      (Tvar),a                ;                        \ line is steep
 516+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 517+ 0000 ~            ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 518+ 0000 ~            ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 519+ 0000 ~            ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 520+ 0000 ~            ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 521+ 0000 ~            prefix1?_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 522+ 0000 ~                                        ld      (prefix1?_XX12p2),a     ; STA XX12+2
 523+ 0000 ~                                        ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 524+ 0000 ~                                        ld      (prefix1?_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 525+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 526+ 0000 ~                                        cp      0                       ; BEQ LL138
 527+ 0000 ~                                        jp      z,prefix1?_LL138_6502            ; .
 528+ 0000 ~                                        jp      p, prefix1?_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 529+ 0000 ~            ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 530+ 0000 ~            prefix1?_LL138_6502:          call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 531+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 532+ 0000 ~                                        and     a
 533+ 0000 ~                                        jp      p,prefix1?_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 534+ 0000 ~            ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 535+ 0000 ~            prefix1?_LL117_6502:          ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 536+ 0000 ~                                        ld      hl,prefix1?_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 537+ 0000 ~                                        or      (hl)
 538+ 0000 ~                                        jp      nz, prefix1?_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 539+ 0000 ~                                        ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 540+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 541+ 0000 ~                                        jp      nc, prefix1?_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 542+ 0000 ~            ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 543+ 0000 ~            prefix1?_LLX117_6502:         ld      hl,( prefix1?_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 544+ 0000 ~                                        ld      de,( prefix1?_XX1554)
 545+ 0000 ~                                        ld      ( prefix1?_XX1510),de
 546+ 0000 ~                                        ld      ( prefix1?_XX1554),hl
 547+ 0000 ~                                        ld      hl,( prefix1?_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 548+ 0000 ~                                        ld      de,( prefix1?_XX1576)
 549+ 0000 ~                                        ld      ( prefix1?_XX1532),de
 550+ 0000 ~                                        ld      ( prefix1?_XX1576),hl
 551+ 0000 ~                                        call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 552+ 0000 ~                                        ld      hl,SWAP
 553+ 0000 ~                                        dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 554+ 0000 ~            prefix1?_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 555+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 556+ 0000 ~                                        call    prefix1?_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 557+ 0000 ~                                        ret                             ; then exit so we don't pop it twice
 558+ 0000 ~            prefix1?_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 559+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 560+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 561+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 562+ 0000 ~
 563+ 0000 ~
 564+ 0000 ~            prefix1?_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 565+ 0000 ~                                        ld      de, prefix1?_XX1510
 566+ 0000 ~                                        ld      bc,4*2
 567+ 0000 ~                                        ldir
 568+ 0000 ~                                        call    prefix1?_LL145_6502                      ; perform 6502 version
 569+ 0000 ~                                        ret     c                               ; returns if carry is set as its a no draw
 570+ 0000 ~            .CopyBackResults:           ld      hl,0
 571+ 0000 ~                                        ld      (x1),hl
 572+ 0000 ~                                        ld      (y1),hl
 573+ 0000 ~                                        ld      (x2),hl
 574+ 0000 ~                                        ld      (y2),hl
 575+ 0000 ~                                        ld      a,( prefix1?_XX1510)
 576+ 0000 ~                                        ld      (x1),a
 577+ 0000 ~                                        ld      c,a
 578+ 0000 ~                                        ld      a,( prefix1?_XX1510+1)
 579+ 0000 ~                                        ld      (y1),a
 580+ 0000 ~                                        ld      b,a
 581+ 0000 ~                                        ld      a,( prefix1?_XX1510+2)
 582+ 0000 ~                                        ld      (x2),a
 583+ 0000 ~                                        ld      e,a
 584+ 0000 ~                                        ld      a,( prefix1?_XX1510+3)
 585+ 0000 ~                                        ld      (y2),a
 586+ 0000 ~                                        ld      d,a
 587+ 0000 ~                                        ld      a,$FF
 588+ 0000 ~                                        ClearCarryFlag
 589+ 0000 ~                                        ret
 590+ 0000                      ENDM
# file closed: ../../Universe/UniverseMacros/asm_linedraw.asm
  45  0000                                      INCLUDE "../../Universe/UniverseMacros/UniverseVarsDefineMacro.asm"
# file opened: ../../Universe/UniverseMacros/UniverseVarsDefineMacro.asm
   1+ 0000              ; -- AI Core data
   2+ 0000              UnivCoreAIVarsMacro:        MACRO  prefix1?
   3+ 0000 ~            prefix1?_BnKRotXCounter             DB  0                       ; INWK +29
   4+ 0000 ~            prefix1?_BnKRotZCounter             DB  0                       ; INWK +30
   5+ 0000 ~            prefix1?_BnkCam0yLo                 DB  0                       ; INWK +33 ????
   6+ 0000 ~            prefix1?_BnkCam0yHi                 DB  0                       ; INWK +34?????
   7+ 0000 ~            prefix1?_BnKShipType                DB  0
   8+ 0000 ~
   9+ 0000 ~            ; Used to make 16 bit reads a little cleaner in source code
  10+ 0000 ~            prefix1?_BnKzPoint                  DS  3
  11+ 0000 ~            prefix1?_BnKzPointLo                equ prefix1?_BnKzPoint
  12+ 0000 ~            prefix1?_BnKzPointHi                equ prefix1?_BnKzPoint+1
  13+ 0000 ~            prefix1?_BnKzPointSign              equ prefix1?_BnKzPoint+2
  14+ 0000 ~
  15+ 0000 ~            ; Used for medridan drawing routines
  16+ 0000 ~            prefix1?_BnKCx                      DW  0
  17+ 0000 ~            prefix1?_BnKCxSign                  EQU prefix1?_BnKCx+1
  18+ 0000 ~            prefix1?_BnKCy                      DW  0
  19+ 0000 ~            prefix1?_BnKCySign                  EQU prefix1?_BnKCy+1
  20+ 0000 ~            prefix1?_BnKUx                      DW  0
  21+ 0000 ~            prefix1?_BnKUxSign                  EQU prefix1?_BnKUx+1
  22+ 0000 ~            prefix1?_BnKUy                      DW  0
  23+ 0000 ~            prefix1?_BnKUySign                  EQU prefix1?_BnKUy+1
  24+ 0000 ~            prefix1?_BnKVx                      DW  0
  25+ 0000 ~            prefix1?_BnKVxSign                  EQU prefix1?_BnKVx+1
  26+ 0000 ~            prefix1?_BnKVy                      DW  0
  27+ 0000 ~            prefix1?_BnKVySign                  EQU prefix1?_BnKVy+1
  28+ 0000 ~            prefix1?_BnKSinCNT2                 DB  0
  29+ 0000 ~            prefix1?_BnKSinCNT2Sign             DB  0
  30+ 0000 ~            prefix1?_BnKCosCNT2                 DB  0
  31+ 0000 ~            prefix1?_BnKCosCNT2Sign             DB  0
  32+ 0000 ~            prefix1?_BnKUxCos                   DB  0
  33+ 0000 ~            prefix1?_BnKUxCosSign               DB  0
  34+ 0000 ~            prefix1?_BnKUyCos                   DB  0
  35+ 0000 ~            prefix1?_BnKUyCosSign               DB  0
  36+ 0000 ~            prefix1?_BnKVxSin                   DB  0
  37+ 0000 ~            prefix1?_BnKVxSinSign               DB  0
  38+ 0000 ~            prefix1?_BnKVySin                   DB  0
  39+ 0000 ~            prefix1?_BnKVySinSign               DB  0
  40+ 0000 ~            prefix1?_BnKVxVySinSign             DB  0
  41+ 0000 ~            prefix1?_BnKUxUyCosSign             DB  0
  42+ 0000 ~            prefix1?_BnKUxCosAddVxSin           DW  0
  43+ 0000 ~            prefix1?_BnKUyCosSubVySin           DW  0
  44+ 0000 ~            prefix1?_BnKAngle                   DB  0
  45+ 0000 ~            s
  46+ 0000 ~
  47+ 0000 ~            ; General local variables used in universe object
  48+ 0000 ~            prefix1?_BnKTGT                     DB  0
  49+ 0000 ~            prefix1?_BnKSTP                     DB  0
  50+ 0000 ~            prefix1?_BnKLSP                     DS  50              ; move to planet or L2 code ?
  51+ 0000 ~            prefix1?_BnKCNT                     DB  0               ; 93
  52+ 0000 ~            prefix1?_BnKCNT2                    DB  0               ; 93
  53+ 0000 ~            ; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  54+ 0000 ~                IFDEF MERIDANLINEDEBUG
  55+ 0000 ~            prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  56+ 0000 ~            prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  57+ 0000 ~                ENDIF
  58+ 0000 ~            prefix1?_BnKPlotIndex               DB  0
  59+ 0000 ~                DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  60+ 0000 ~            prefix1?_BnKFlag					DB  0
  61+ 0000 ~
  62+ 0000 ~            ; Post clipping the results are now 8 bit
  63+ 0000 ~            prefix1?_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  64+ 0000 ~            prefix1?_BnKProjectedY              DB  0
  65+ 0000 ~            prefix1?_BnKProjectedX              DB  0
  66+ 0000 ~            prefix1?_BnKProjected               equ prefix1?_BnKProjectedY  ; resultant projected position
  67+ 0000 ~            prefix1?_XX15Save                   DS  8
  68+ 0000 ~            prefix1?_XX15Save2                  DS  8
  69+ 0000 ~            prefix1?_Radius                     DB  0
  70+ 0000 ~            ; Used when drawing curves for the end value from previous calls to BLINE
  71+ 0000 ~            ; held as 16 bit values pre clipping
  72+ 0000 ~            prefix1?_PrevXPos                   DW 0
  73+ 0000 ~            prefix1?_PrevYPos                   DW 0
  74+ 0000 ~            prefix1?_NewXPos                    DW 0
  75+ 0000 ~            prefix1?_NewYPos                    DW 0
  76+ 0000 ~
  77+ 0000 ~            ; Colouration
  78+ 0000 ~            ; For planets, Colour 1 is main colour, Colour 2 is outer rim
  79+ 0000 ~            ; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  80+ 0000 ~            prefix1?_Colour1                    DB 0
  81+ 0000 ~            prefix1?_Colour2                    DB 0
  82+ 0000 ~            prefix1?_Colour2Thickness           DB 0
  83+ 0000 ~
  84+ 0000 ~            ;        -- _pl(prf .. "Radius                     DW  0
  85+ 0000 ~            ;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  86+ 0000                                           ENDM
  87+ 0000
  88+ 0000              UnivPosVarsMacro:            MACRO  prefix1?
  89+ 0000 ~            prefix1?_BnKxlo                     DB  0                       ; INWK+0
  90+ 0000 ~            prefix1?_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  91+ 0000 ~            prefix1?_BnKxsgn                    DB  0                       ; INWK+2
  92+ 0000 ~            prefix1?_BnKylo                     DB  0                       ; INWK+3 \ ylo
  93+ 0000 ~            prefix1?_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  94+ 0000 ~            prefix1?_BnKysgn                    DB  0                       ; INWK +5
  95+ 0000 ~            prefix1?_BnKzlo                     DB  0                       ; INWK +6
  96+ 0000 ~            prefix1?_BnKzhi                     DB  0                       ; INWK +7
  97+ 0000 ~            prefix1?_BnKzsgn                    DB  0                       ; INWK +8
  98+ 0000 ~            prefix1?_CompassX                   DW  0
  99+ 0000 ~            prefix1?_CompassY                   DW  0
 100+ 0000 ~            prefix1?_BnKElipseCenterX           DW  0
 101+ 0000 ~            prefix1?_BnKElipseCenterY           DW  0
 102+ 0000 ~            prefix1?_BnKElipseRadiusU           DW  0
 103+ 0000 ~            prefix1?_BnKElipseRadiusV           DW  0
 104+ 0000                                          ENDM
 105+ 0000
 106+ 0000              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
 107+ 0000              ;-Rotation Matrix of Universe Object-----------------------------------------------------------------------------------------------
 108+ 0000              UnivRotationVarsMacro:      MACRO prefix1?
 109+ 0000 ~            prefix1?_BnKrotmatSidevX            DW  0                       ; INWK +21
 110+ 0000 ~            prefix1?_BnKrotmatSidev             equ prefix1?_BnKrotmatSidevX
 111+ 0000 ~            prefix1?_BnKrotmatSidevY            DW  0                       ; INWK +23
 112+ 0000 ~            prefix1?_BnKrotmatSidevZ            DW  0                       ; INWK +25
 113+ 0000 ~            prefix1?_BnKrotmatRoofvX            DW  0                       ; INWK +15
 114+ 0000 ~            prefix1?_BnKrotmatRoofv             equ prefix1?_BnKrotmatRoofvX
 115+ 0000 ~            prefix1?_BnKrotmatRoofvY            DW  0                       ; INWK +17
 116+ 0000 ~            prefix1?_BnKrotmatRoofvZ            DW  0                       ; INWK +19
 117+ 0000 ~            prefix1?_BnKrotmatNosevX            DW  0                       ; INWK +9
 118+ 0000 ~            prefix1?_BnKrotmatNosev             EQU prefix1?_BnKrotmatNosevX
 119+ 0000 ~            prefix1?_BnKrotmatNosevY            DW  0                       ; INWK +11
 120+ 0000 ~            prefix1?_BnKrotmatNosevZ            DW  0                       ; INWK +13
 121+ 0000                                          ENDM
 122+ 0000
 123+ 0000
 124+ 0000              XX15DefineMacro: MACRO   prefix1?
 125+ 0000 ~
 126+ 0000 ~            prefix1?_BnKXScaled                  DB  0               ; XX15+0Xscaled
 127+ 0000 ~            prefix1?_BnKXScaledSign              DB  0               ; XX15+1xsign
 128+ 0000 ~            prefix1?_BnKYScaled                  DB  0               ; XX15+2yscaled
 129+ 0000 ~            prefix1?_BnKYScaledSign              DB  0               ; XX15+3ysign
 130+ 0000 ~            prefix1?_BnKZScaled                  DB  0               ; XX15+4zscaled
 131+ 0000 ~            prefix1?_BnKZScaledSign              DB  0               ; XX15+5zsign
 132+ 0000 ~            prefix1?_XX1576                      DW  0    ; y2
 133+ 0000 ~
 134+ 0000 ~            prefix1?_XX15:                       equ prefix1?_BnKXScaled
 135+ 0000 ~            prefix1?_XX15VecX:                   equ prefix1?_XX15
 136+ 0000 ~            prefix1?_XX15VecY:                   equ prefix1?_XX15+1
 137+ 0000 ~            prefix1?_XX15VecZ:                   equ prefix1?_XX15+2
 138+ 0000 ~            prefix1?_BnKXPoint:                  equ prefix1?_XX15
 139+ 0000 ~            prefix1?_BnKXPointLo:                equ prefix1?_XX15+0
 140+ 0000 ~            prefix1?_BnKXPointHi:                equ prefix1?_XX15+1
 141+ 0000 ~            prefix1?_BnKXPointSign:              equ prefix1?_XX15+2
 142+ 0000 ~            prefix1?_BnKYPoint:                  equ prefix1?_XX15+3
 143+ 0000 ~            prefix1?_BnKYPointLo:                equ prefix1?_XX15+3
 144+ 0000 ~            prefix1?_BnKYPointHi:                equ prefix1?_XX15+4
 145+ 0000 ~            prefix1?_BnKYPointSign:              equ prefix1?_XX15+5
 146+ 0000 ~
 147+ 0000 ~            prefix1?_XX1510                      EQU prefix1?_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 148+ 0000 ~            prefix1?_XX1532                      EQU prefix1?_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 149+ 0000 ~            prefix1?_XX1554                      EQU prefix1?_BnKZScaled   ; x2
 150+ 0000 ~            prefix1?_XX1554p1                    EQU prefix1?_XX1554+1
 151+ 0000 ~            prefix1?_XX15X1lo                    EQU prefix1?_XX1510
 152+ 0000 ~            prefix1?_XX15X1hi                    EQU prefix1?_XX1510+1
 153+ 0000 ~            prefix1?_XX15Y1lo                    EQU prefix1?_XX1532
 154+ 0000 ~            prefix1?_XX15Y1hi                    EQU prefix1?_XX1532+1
 155+ 0000 ~            prefix1?_XX15X2lo                    EQU prefix1?_XX1554
 156+ 0000 ~            prefix1?_XX15X2hi                    EQU prefix1?_XX1554+1
 157+ 0000 ~            prefix1?_XX15Y2lo                    EQU prefix1?_XX1210
 158+ 0000 ~            prefix1?_XX15Y2hi                    EQU prefix1?_XX1210+1
 159+ 0000 ~            prefix1?_XX15PlotX1                  EQU prefix1?_XX15
 160+ 0000 ~            prefix1?_XX15PlotY1                  EQU prefix1?_XX15+1
 161+ 0000 ~            prefix1?_XX15PlotX2                  EQU prefix1?_XX15+2
 162+ 0000 ~            prefix1?_XX15PlotY2                  EQU prefix1?_XX15+3
 163+ 0000                          ENDM
 164+ 0000
 165+ 0000              XX12DefineMacro: MACRO   prefix1?
 166+ 0000 ~            ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 167+ 0000 ~            ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 168+ 0000 ~
 169+ 0000 ~            prefix1?_XX1210                     EQU prefix1?_XX1576
 170+ 0000 ~            prefix1?_XX12p1                     EQU prefix1?_XX1210+1
 171+ 0000 ~            prefix1?_XX12                       EQU prefix1?_XX1210
 172+ 0000 ~
 173+ 0000 ~
 174+ 0000 ~            prefix1?_BnKXX12xLo                 EQU prefix1?_XX12               ; XX12+0
 175+ 0000 ~            prefix1?_BnKXX12xSign               EQU prefix1?_XX12+1   ; XX12+1
 176+ 0000 ~            prefix1?_BnKXX12yLo                 EQU prefix1?_XX12+2   ; XX12+2
 177+ 0000 ~            prefix1?_BnKXX12ySign               EQU prefix1?_XX12+3   ; XX12+3
 178+ 0000 ~            prefix1?_BnKXX12zLo                 EQU prefix1?_XX12+4   ; XX12+4
 179+ 0000 ~            prefix1?_BnKXX12zSign               EQU prefix1?_XX12+5   ; XX12+5
 180+ 0000 ~            prefix1?_XX12Save                   DS  6
 181+ 0000 ~            prefix1?_XX12Save2                  DS  6
 182+ 0000 ~
 183+ 0000 ~            prefix1?_varXX12                    EQU prefix1?_XX12
 184+ 0000 ~            ; Repurposed XX12 when plotting lines
 185+ 0000 ~            prefix1?_BnkY2                      equ prefix1?_XX12+0
 186+ 0000 ~            prefix1?_BnKy2Lo                    equ prefix1?_XX12+0
 187+ 0000 ~            prefix1?_BnkY2Hi                    equ prefix1?_XX12+1
 188+ 0000 ~            prefix1?_BnkDeltaXLo                equ prefix1?_XX12+2
 189+ 0000 ~            prefix1?_BnkDeltaXHi                equ prefix1?_XX12+3
 190+ 0000 ~            prefix1?_BnkDeltaYLo                equ prefix1?_XX12+4
 191+ 0000 ~            prefix1?_BnkDeltaYHi                equ prefix1?_XX12+5
 192+ 0000 ~            prefix1?_BnkGradient                equ prefix1?_XX12+2
 193+ 0000 ~            prefix1?_BnkTemp1                   equ prefix1?_XX12+2
 194+ 0000 ~            prefix1?_BnkTemp1Lo                 equ prefix1?_XX12+2
 195+ 0000 ~            prefix1?_BnkTemp1Hi                 equ prefix1?_XX12+3
 196+ 0000 ~            prefix1?_BnkTemp2                   equ prefix1?_XX12+3
 197+ 0000 ~            prefix1?_BnkTemp2Lo                 equ prefix1?_XX12+3
 198+ 0000 ~            prefix1?_BnkTemp2Hi                 equ prefix1?_XX12+4
 199+ 0000                                          ENDM
 200+ 0000
 201+ 0000              XX16DefineMacro: MACRO   prefix1?
 202+ 0000 ~            ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
 203+ 0000 ~            prefix1?_BnkTransmatSidevX          DW  0               ; XX16+0
 204+ 0000 ~            prefix1?_BnkTransmatSidev           EQU prefix1?_BnkTransmatSidevX
 205+ 0000 ~            prefix1?_BnkTransmatSidevY          DW 0                ; XX16+2
 206+ 0000 ~            prefix1?_BnkTransmatSidevZ          DW 0                ; XX16+2
 207+ 0000 ~            prefix1?_BnkTransmatRoofvX          DW 0
 208+ 0000 ~            prefix1?_BnkTransmatRoofv           EQU prefix1?_BnkTransmatRoofvX
 209+ 0000 ~            prefix1?_BnkTransmatRoofvY          DW 0                ; XX16+2
 210+ 0000 ~            prefix1?_BnkTransmatRoofvZ          DW 0                ; XX16+2
 211+ 0000 ~            prefix1?_BnkTransmatNosevX          DW 0
 212+ 0000 ~            prefix1?_BnkTransmatNosev           EQU prefix1?_BnkTransmatNosevX
 213+ 0000 ~            prefix1?_BnkTransmatNosevY          DW 0                ; XX16+2
 214+ 0000 ~            prefix1?_BnkTransmatNosevZ          DW 0                ; XX16+2
 215+ 0000 ~            prefix1?_BnkTransmatTransX          DW 0
 216+ 0000 ~            prefix1?_BnkTransmatTransY          DW 0
 217+ 0000 ~            prefix1?_BnkTransmatTransZ          DW 0
 218+ 0000 ~            prefix1?_XX16                       equ prefix1?_BnkTransmatSidev
 219+ 0000 ~            ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 220+ 0000 ~            prefix1?_BnkTransInvRow0x0          DW 0
 221+ 0000 ~            prefix1?_BnkTransInvRow0x1          DW 0
 222+ 0000 ~            prefix1?_BnkTransInvRow0x2          DW 0
 223+ 0000 ~            prefix1?_BnkTransInvRow0x3          DW 0
 224+ 0000 ~            prefix1?_BnkTransInvRow1y0          DW 0
 225+ 0000 ~            prefix1?_BnkTransInvRow1y1          DW 0
 226+ 0000 ~            prefix1?_BnkTransInvRow1y2          DW 0
 227+ 0000 ~            prefix1?_BnkTransInvRow1y3          DW 0
 228+ 0000 ~            prefix1?_BnkTransInvRow2z0          DW 0
 229+ 0000 ~            prefix1?_BnkTransInvRow2z1          DW 0
 230+ 0000 ~            prefix1?_BnkTransInvRow2z2          DW 0
 231+ 0000 ~            prefix1?_BnkTransInvRow2z3          DW 0
 232+ 0000 ~
 233+ 0000 ~            prefix1?_XX16Inv                    equ prefix1?_BnkTransInvRow0x0
 234+ 0000                                          ENDM
 235+ 0000
 236+ 0000              XX18DefineMacro: MACRO   prefix1?
 237+ 0000 ~            ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 238+ 0000 ~            prefix1?_BnkDrawCam0xLo             DB  0               ; XX18+0
 239+ 0000 ~            prefix1?_BnkDrawCam0xHi             DB  0               ; XX18+1
 240+ 0000 ~            prefix1?_BnkDrawCam0xSgn            DB  0               ; XX18+2
 241+ 0000 ~            prefix1?_BnkDrawCam0x               equ prefix1?_BnkDrawCam0xLo
 242+ 0000 ~            prefix1?_BnkDrawCam0yLo             DB  0               ; XX18+3
 243+ 0000 ~            prefix1?_BnkDrawCam0yHi             DB  0               ; XX18+4
 244+ 0000 ~            prefix1?_BnkDrawCam0ySgn            DB  0               ; XX18+5
 245+ 0000 ~            prefix1?_BnkDrawCam0y               equ prefix1?_BnkDrawCam0yLo
 246+ 0000 ~            prefix1?_BnkDrawCam0zLo             DB  0               ; XX18+6
 247+ 0000 ~            prefix1?_BnkDrawCam0zHi             DB  0               ; XX18+7
 248+ 0000 ~            prefix1?_BnkDrawCam0zSgn            DB  0               ; XX18+8
 249+ 0000 ~            prefix1?_BnkDrawCam0z               equ prefix1?_BnkDrawCam0zLo
 250+ 0000 ~            prefix1?_XX18                       equ prefix1?_BnkDrawCam0xLo
 251+ 0000                                          ENDM
 252+ 0000
 253+ 0000              XX25DefineMacro: MACRO   prefix1?
 254+ 0000 ~            ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 255+ 0000 ~            prefix1?_BnKProjxLo                 DB  0
 256+ 0000 ~            prefix1?_BnKProjxHi                 DB  0
 257+ 0000 ~            prefix1?_BnKProjxSgn                DB  0
 258+ 0000 ~            prefix1?_BnKProjx                   EQU prefix1?_BnKProjxLo
 259+ 0000 ~            prefix1?_BnKProjyLo                 DB  0
 260+ 0000 ~            prefix1?_BnKProjyHi                 DB  0
 261+ 0000 ~            prefix1?_BnKProjySgn                DB  0
 262+ 0000 ~            prefix1?_BnKProjy                   EQU prefix1?_BnKProjyLo
 263+ 0000 ~            prefix1?_BnKProjzLo                 DB  0
 264+ 0000 ~            prefix1?_BnKProjzHi                 DB  0
 265+ 0000 ~            prefix1?_BnKProjzSgn                DB  0
 266+ 0000 ~            prefix1?_BnKProjz                   EQU prefix1?_BnKProjzLo
 267+ 0000 ~            prefix1?_XX25                       EQU prefix1?_BnKProjxLo
 268+ 0000                                          ENDM
 269+ 0000
 270+ 0000              CopyPosToXX15Macro: MACRO   prefix1?
 271+ 0000 ~
 272+ 0000 ~            prefix1?_CopyPosToXX15:    ld hl,prefix1?_Bnkxhi
 273+ 0000 ~                                       ld de,prefix1?_BnkXScaled
 274+ 0000 ~                                       ldi
 275+ 0000 ~                                       ldi
 276+ 0000 ~                                       inc hl ; skip to y high
 277+ 0000 ~                                       ldi
 278+ 0000 ~                                       ldi
 279+ 0000 ~                                       inc hl ; skip to z hig
 280+ 0000 ~                                       ldi
 281+ 0000 ~                                       ldi
 282+ 0000 ~                                       ret
 283+ 0000                                  ENDM
 284+ 0000
 285+ 0000              CopyXX12ScaledToXX18Macro:  MACRO    prefix1?
 286+ 0000 ~            prefix1?_CopyXX12ScaledToXX18:
 287+ 0000 ~            prefix1?_CopyResultToDrawCam:    ld      hl, prefix1?_XX12
 288+ 0000 ~                                             ld      de, prefix1?_XX18
 289+ 0000 ~                                             ldi    ; X12+0 => XX18+0  Set XX18(2 0) = dot_sidev
 290+ 0000 ~                                             inc de ; skip to XX18+2 as it will be on XX18+1
 291+ 0000 ~                                             ldi    ; XX12+1 => XX18+2
 292+ 0000 ~                                             ldi    ; XX12+2 => XX18+3 Set XX12+1 => XX18+2
 293+ 0000 ~                                             inc de ; skip to XX18+5 as it will be on XX18+4
 294+ 0000 ~                                             ldi    ; XX12+3 => XX18+5
 295+ 0000 ~                                             ldi    ; XX12+4 => XX18+6 Set XX18(8 6) = dot_nosev
 296+ 0000 ~                                             inc de ; skip to XX18+8 as it will be on XX18+7
 297+ 0000 ~                                             ldi    ; XX12+5 => XX18+8
 298+ 0000 ~                                             ret
 299+ 0000                                          ENDM
 300+ 0000
 301+ 0000              CopyXX12toXX15Macro:        MACRO    prefix1?
 302+ 0000 ~            prefix1?_CopyXX12toXX15:         ld      hl, prefix1?_BnkXX12xLo
 303+ 0000 ~                                             ld      de, prefix1?_XX18
 304+ 0000 ~                                             ldi      ; xlo
 305+ 0000 ~                                             ldi      ; xsg
 306+ 0000 ~                                             ldi      ; xlo
 307+ 0000 ~                                             ldi      ; xsg
 308+ 0000 ~                                             ldi      ; xlo
 309+ 0000 ~                                             ldi      ; xsg
 310+ 0000 ~                                             ret
 311+ 0000                                          ENDM
 312+ 0000
 313+ 0000              InitialiseUniverseObjMacro: MACRO   prefix1?
 314+ 0000 ~            prefix1?_InitRotMat:    ld      hl, 0
 315+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevY),hl       ; set the zeroes
 316+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevZ),hl       ; set the zeroes
 317+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvX),hl       ; set the zeroes
 318+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvZ),hl       ; set the zeroes
 319+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevX),hl       ; set the zeroes
 320+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevY),hl       ; set the zeroes
 321+ 0000 ~            ; Optimised as already have 0 in l
 322+ 0000 ~                                    ld      h, $60	             				; 96 in hi byte
 323+ 0000 ~                                    ;ld      hl,1
 324+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevX),hl
 325+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvY),hl
 326+ 0000 ~            ; Optimised as already have 0 in l
 327+ 0000 ~                                    ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 328+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevZ),hl
 329+ 0000 ~                                    ret
 330+ 0000                                          ENDM
 331+ 0000
# file closed: ../../Universe/UniverseMacros/UniverseVarsDefineMacro.asm
  46  0000                                      INCLUDE "../../Variables/general_variables_macros.asm"
# file opened: ../../Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if it is set    then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000              ; Will check to see if docking is set, if docking     z flag is clear
 150+ 0000              ;                                      if not docking z flag is set
 151+ 0000              IsShipDocking:          MACRO
 152+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 153+ 0000 ~                                    and     ShipIsDocking
 154+ 0000                                      ENDM
 155+ 0000
 156+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 157+ 0000              ;                                    if hit is set then hostile hence z is not set
 158+ 0000              IsShipFriendly:         MACRO
 159+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 160+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 161+ 0000                                      ENDM
 162+ 0000
 163+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 164+ 0000              ;                                    if set    then exploding     z set
 165+ 0000              IsShipExploding:        MACRO
 166+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 167+ 0000 ~                                    and     ShipExploding
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              ; Checks if ship is a trader, if ship is a trader then z flag is clear
 171+ 0000              ;                             if ship isn't a trader then z flag is set
 172+ 0000              IsShipTrader:           MACRO
 173+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 174+ 0000 ~                                    and     ShipIsTrader
 175+ 0000                                      ENDM
 176+ 0000              ; Will check if the AI bit is set, if set then z is clear, if clear then z is set
 177+ 0000              IsAIEnabled:            MACRO
 178+ 0000 ~                                    ld      hl, UBnkaiatkecm
 179+ 0000 ~                                    bit 	ShipAIEnabledBitNbr,(hl)
 180+ 0000                                      ENDM
 181+ 0000
 182+ 0000              UpdateLaserOnCounter:   MACRO
 183+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 184+ 0000 ~                                    and     a
 185+ 0000 ~                                    jr      z,.LaserOnIsDone
 186+ 0000 ~                                    dec     a
 187+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 188+ 0000 ~                                    jr      z,.LaserOnIsDone
 189+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 190+ 0000 ~            .LaserOnIsDone:
 191+ 0000                                      ENDM
 192+ 0000
 193+ 0000              UpdateLaserOffCounter:  MACRO
 194+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 195+ 0000 ~                                    and     a
 196+ 0000 ~                                    jr      z,.LaserOffIsDone
 197+ 0000 ~                                    dec     a
 198+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 199+ 0000 ~                                    jr      z,.LaserOffIsDone
 200+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 201+ 0000 ~            .LaserOffIsDone:
 202+ 0000                                      ENDM
 203+ 0000
 204+ 0000              UpdateLaserRestCounter: MACRO
 205+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 206+ 0000 ~                                    and     a
 207+ 0000 ~                                    jr      z,.LaserRestIsDone
 208+ 0000 ~                                    dec     a
 209+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 210+ 0000 ~                                    jr      z,.LaserRestIsDone
 211+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 212+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 213+ 0000 ~            .LaserRestIsDone
 214+ 0000                                      ENDM
 215+ 0000
 216+ 0000              ChargeEnergyAndShields: MACRO
 217+ 0000 ~                                    ld      a,$FF
 218+ 0000 ~                                    ld      (PlayerEnergy),a
 219+ 0000 ~                                    ld      (ForeShield),a
 220+ 0000 ~                                    ld      (AftShield),a
 221+ 0000                                      ENDM
 222+ 0000
 223+ 0000              CopyPresentSystemToTarget: MACRO
 224+ 0000 ~                                    ld      hl,(PresentSystemX)
 225+ 0000 ~                                    ld      (TargetSystemX),hl
 226+ 0000                                      ENDM
 227+ 0000
 228+ 0000              CopyTargetSystemToPresent: MACRO
 229+ 0000 ~                                    ld      hl,(TargetSystemX)
 230+ 0000 ~                                    ld      (PresentSystemX),hl
 231+ 0000                                      ENDM
 232+ 0000
 233+ 0000              HalveFugitiveStatus:    MACRO
 234+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 235+ 0000 ~                                    srl     (hl)
 236+ 0000                                      ENDM
 237+ 0000
 238+ 0000              ClearForceTransition    MACRO
 239+ 0000 ~                                    ld      a,$FF
 240+ 0000 ~                                    ld      (ScreenTransitionForced),a
 241+ 0000                                      ENDM
 242+ 0000
 243+ 0000              ForceTransition:        MACRO newScreen
 244+ 0000 ~                                    ld      a,newScreen
 245+ 0000 ~                                    ld      (ScreenTransitionForced), a
 246+ 0000                                      ENDM
 247+ 0000
 248+ 0000              IsSpaceStationPresent:  MACRO
 249+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 250+ 0000 ~                                    and     a
 251+ 0000                                      ENDM
 252+ 0000
 253+ 0000              SetSafeZone:            MACRO
 254+ 0000 ~                                    xor     a
 255+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              ClearSafeZone:          MACRO
 259+ 0000 ~                                    ld      a,$FF
 260+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              ClearTemperatures:      MACRO
 264+ 0000 ~                                    xor     a
 265+ 0000 ~                                    ld      (CabinTemperature),a
 266+ 0000 ~                                    ld      (GunTemperature),a
 267+ 0000                                      ENDM
 268+ 0000
 269+ 0000              ClearWarpPressed:       MACRO
 270+ 0000 ~                                    SetMemFalse WarpPressed
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              CoolCabin:              MACRO
 274+ 0000 ~                                    ld      a,(CabinTemperature)
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jr      z,.AlreadyCool
 277+ 0000 ~                                    dec     a
 278+ 0000 ~                                    ld      (CabinTemperature),a
 279+ 0000 ~            .AlreadyCool:
 280+ 0000                                      ENDM
 281+ 0000
 282+ 0000              CoolLasers:             MACRO
 283+ 0000 ~                                    ld      a,(GunTemperature)
 284+ 0000 ~                                    and     a
 285+ 0000 ~                                    jr      z,.AlreadyCool
 286+ 0000 ~                                    dec     a
 287+ 0000 ~                                    ld      (GunTemperature),a
 288+ 0000 ~            .AlreadyCool:
 289+ 0000                                      ENDM
 290+ 0000
 291+ 0000              ; type 255 is "not fitted"
 292+ 0000
 293+ 0000
 294+ 0000              InitEventCounter:       MACRO
 295+ 0000 ~                                    xor     a
 296+ 0000 ~                                    ld      (EventCounter),a
 297+ 0000                                      ENDM
 298+ 0000
 299+ 0000              ClearMissJump:          MACRO
 300+ 0000 ~                                    ld      a,$FF
 301+ 0000 ~                                    ld      (MissJumpFlag),a
 302+ 0000                                      ENDM
 303+ 0000
 304+ 0000
 305+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 306+ 0000 ~                                    ld      a,(DrainMem)
 307+ 0000 ~                                    ld      b,a
 308+ 0000 ~                                    ld      a,(SystemMem)
 309+ 0000 ~                                    sub     a,b
 310+ 0000 ~                                    ld      (SystemMem),a
 311+ 0000 ~                                    jr      c,.ZeroSystem
 312+ 0000 ~                                    jp      .ExitPoint
 313+ 0000 ~            .ZeroSystem:            ZeroA
 314+ 0000 ~                                    ld      (SystemMem),a
 315+ 0000 ~            .ExitPoint
 316+ 0000                                      ENDM
 317+ 0000
 318+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 319+ 0000 ~                                    ld      a,(BoostMem)
 320+ 0000 ~                                    ld      b,a
 321+ 0000 ~                                    ld      a,(SystemMem)
 322+ 0000 ~                                    add     b
 323+ 0000 ~                                    ld      (SystemMem),a
 324+ 0000 ~                                    jr      c, .MaxSystem
 325+ 0000 ~                                    jp      .ExitPoint
 326+ 0000 ~            .MaxSystem:             ld      a,255
 327+ 0000 ~                                    ld      (SystemMem),a
 328+ 0000 ~            .ExitPoint
 329+ 0000                                      ENDM
 330+ 0000
 331+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 332+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 333+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 334+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 335+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 336+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 337+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 338+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 339+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 340+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 341+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 342+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 343+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 344+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 345+ 0000
# file closed: ../../Variables/general_variables_macros.asm
  47  0000                                      INCLUDE "../../Variables/UniverseSlot_macros.asm"
# file opened: ../../Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ../../Variables/UniverseSlot_macros.asm
  48  0000                                      INCLUDE "../../Data/ShipIdEquates.asm"
# file opened: ../../Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ../../Data/ShipIdEquates.asm
  49  0000
  50  0000              SetBorder:              MACRO   value
  51  0000 ~                                    MMUSelectLayer1
  52  0000 ~                                    ld          a,value
  53  0000 ~                                    call        l1_set_border
  54  0000                                      ENDM
  55  0000
  56  0000              charactersetaddr		equ 15360
  57  0000              STEPDEBUG               equ 1
  58  0000
  59  0000              TopOfStack              equ $5CCB ;$6100
  60  0000
  61  0000                                      ORG $5DCB;      $6200
  62  5DCB F3           EliteNextStartup:       di
  63  5DCC ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
  64  5DD0 ED 91 69 00  .InitialiseLayerOrder:  nextreg     DISPLAY_CONTROL_1_REGISTER, 0   ; no layer 2
  65  5DD4                                      DISPLAY "Starting Assembly At ", EliteNextStartup
  66  5DD4                                      ; "STARTUP"
  67  5DD4                                      ; Make sure  rom is in page 0 during load
  68  5DD4                                      MMUSelectROMS
  68  5DD4 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
  68  5DD8 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
  69  5DDC                                      MMUSelectLayer1
  69  5DDC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  70  5DE0 CD 8F E0                             call		l1_cls
  71  5DE3 3E 38                                ld			a,L1ColourInkBlack | L1ColourPaperWhite
  72  5DE5 CD AA E0                             call		l1_attr_cls_to_a
  73  5DE8                                      SetBorder   $FF
  73  5DE8             >                        MMUSelectLayer1
  73  5DE8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  73  5DEC 3E FF       >                        ld          a,$FF
  73  5DEE CD B4 E0    >                        call        l1_set_border
  74  5DF1              .InitialisingMessage:   MMUSelectUniverseN  0
  74  5DF1 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  75  5DF5 CD 0F 64                             call        ResetUniv
  76  5DF8 CD 73 6A     InitialiseMainLoop:     call        ClearUnivSlotList
  77  5DFB                                      MMUSelectKeyboard
  77  5DFB ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  78  5DFF CD F7 E0                             call        init_keyboard
  79  5E02                                      ZeroA
  79  5E02 AF          >                        xor a
  80  5E03 32 63 66                             ld          (JSTX),a
  81  5E06 32 59 66                             ld          (JSTY),a
  82  5E09 CD 58 5F     .CreateMissle:          call        CreateMissile
  83  5E0C CD 6A 5F     .CreateTarget:          call        CreateTarget
  84  5E0F              ;...................................................................................................................................
  85  5E0F CD 95 63                             call        DisplayBoiler
  86  5E12              ;...................................................................................................................................
  87  5E12              InitMainLoop:           ZeroA
  87  5E12 AF          >                        xor a
  88  5E13 32 65 66                             ld      (ALPHA),a
  89  5E16 32 58 66                             ld      (BETA),a
  90  5E19              MainLoop:	            MMUSelectMathsBankedFns                                         ; make sure we are in maths routines in case a save paged out
  90  5E19 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  91  5E1D CD 4F 6B                             call    doRandom                                                ; redo the seeds every frame
  92  5E20              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
  93  5E20              InputBlockerCheck:      MMUSelectKeyboard
  93  5E20 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  94  5E24 CD 03 E1                             call    scan_keyboard
  95  5E27              ;-- Key Definitions
  96  5E27              ; Player Pitcn and Roll
  97  5E27              ;   Q/A pitch       O/P roll        W/A Thrust
  98  5E27              ;  Kill Missile and launch from 0,0,0
  99  5E27 3E 22                                ld      a,VK_H
 100  5E29 CD 8D E1                             call    is_vkey_pressed
 101  5E2C CC 9D 5E                             call    z, HomeMissile
 102  5E2F              ;  Kill Missile and launch new one
 103  5E2F 3E 26                                ld      a,VK_N
 104  5E31 CD 8D E1                             call    is_vkey_pressed
 105  5E34 CC CE 5E                             call    z, RandomMissile
 106  5E37              ; Reset missile to identity matrix
 107  5E37 3E 1B                                ld      a,VK_I
 108  5E39 CD 8D E1                             call    is_vkey_pressed
 109  5E3C CC 8B 5E                             call    z, IdentityMissile
 110  5E3F              ; Tidy and Normalise Vector
 111  5E3F 3E 04                                ld      a,VK_V
 112  5E41 CD 8D E1                             call    is_vkey_pressed
 113  5E44 CC D5 5E                             call    z, TidyMissile
 114  5E47              ; Randomise Target Position
 115  5E47 3E 0E                                ld      a,VK_T
 116  5E49 CD 8D E1                             call    is_vkey_pressed
 117  5E4C CC DD 5E                             call    z, RandomTarget
 118  5E4F              ; Run or pause missile
 119  5E4F 3E 19                                ld      a,VK_P
 120  5E51 CD 8D E1                             call    is_vkey_pressed
 121  5E54 CC 94 5E                             call    z, ToggleMissileState
 122  5E57              ;.. Update values based on movekey keys, may likley need damping as this coudl be very fast
 123  5E57 3A 93 5E     UpdateShipsControl:     ld      a,(MissileState)
 124  5E5A A7                                   and     a
 125  5E5B CA 61 5E                             jp      z,.NotRunning
 126  5E5E CD E6 5E     .Running:               call    UpdateUniverseObjects
 127  5E61              .NotRunning:
 128  5E61              ;.. Render Ship ...................................................................................................................
 129  5E61              RenderPositions:        DISPLAY "TODO Copy missile and target to buffers to print"
 130  5E61                                      MMUSelectUniverseN 2
 130  5E61 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 131  5E65 16 0A                                ld      d,RowTarget
 132  5E67 CD 68 61                             call    DisplayPosition
 133  5E6A                                      MMUSelectUniverseN 1
 133  5E6A ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 134  5E6E 16 02                                ld      d,RowMissle
 135  5E70 CD 68 61                             call    DisplayPosition
 136  5E73 CD FC 61                             call    DisplayMatrix
 137  5E76 CD 18 62                             call    DisplayAccellSpeed
 138  5E79 CD 2F 62                             call    DisplayRollPitch
 139  5E7C CD AC 61                             call    DisplayRelative
 140  5E7F CD CE 61                             call    DisplayDirection
 141  5E82 CD F0 61                             call    DisplayDotProduct
 142  5E85 CD 55 61                             call    DisplayActionStatus
 143  5E88              ;.. Flip Buffer ..................................................................................................................
 144  5E88 C3 19 5E                             jp MainLoop
 145  5E8B
 146  5E8B              IdentityMissile:        MMUSelectUniverseN 1
 146  5E8B ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 147  5E8F CD B6 C7                             call    InitialiseOrientation
 148  5E92 C9                                   ret
 149  5E93
 150  5E93 00           MissileState            DB      0
 151  5E94
 152  5E94 3A 93 5E     ToggleMissileState:     ld      a,(MissileState)
 153  5E97 EE 80                                xor     $80
 154  5E99 32 93 5E                             ld      (MissileState),a
 155  5E9C C9                                   ret
 156  5E9D
 157  5E9D              ;-- Home Missile Position ---------------------------------------------------------------------------------------------------------
 158  5E9D              HomeMissile:            MMUSelectUniverseN 1
 158  5E9D ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 159  5EA1 21 20 C0                             ld      hl,UBnKxlo
 160  5EA4 36 00                                ld      (hl),0
 161  5EA6 11 21 C0                             ld      de,UBnKxlo+1
 162  5EA9 01 08 00                             ld      bc,8
 163  5EAC ED B0                                ldir
 164  5EAE C9                                   ret
 165  5EAF
 166  5EAF DD 21 20 C0  RandomPosition:         ld      ix,UBnKxlo
 167  5EB3 CD C1 5E                             call    SetS24Random
 168  5EB6 DD 21 23 C0                          ld      ix,UBnKylo
 169  5EBA CD C1 5E                             call    SetS24Random
 170  5EBD DD 21 26 C0                          ld      ix,UBnKzlo
 171  5EC1 CD 3E 6B     SetS24Random:           call    doRandomS24
 172  5EC4 DD 77 00                             ld      (ix+0),a
 173  5EC7 DD 73 01                             ld      (ix+1),e
 174  5ECA DD 72 02                             ld      (ix+2),d
 175  5ECD C9                                   ret
 176  5ECE              ;-- Random Missile Position -------------------------------------------------------------------------------------------------------
 177  5ECE              RandomMissile:          MMUSelectUniverseN 1
 177  5ECE ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 178  5ED2 C3 AF 5E                             jp      RandomPosition
 179  5ED5              ;-- Tidy Missile Vectors ---------------------------------------------------------------------------------------------------------
 180  5ED5              TidyMissile:            MMUSelectUniverseN 1
 180  5ED5 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 181  5ED9 CD 07 79                             call    TidyVectorsIX
 182  5EDC C9                                   ret
 183  5EDD              ;-- Random Target Position --------------------------------------------------------------------------------------------------------
 184  5EDD              RandomTarget:           MMUSelectUniverseN 2
 184  5EDD ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 185  5EE1 C3 AF 5E                             jp      RandomPosition
 186  5EE4 C9                                   ret
 187  5EE5              ;.. Keyboard Routines .............................................................................................................
 188  5EE5
 189  5EE5
 190  5EE5              ;..Update Universe Objects.........................................................................................................
 191  5EE5              ;..................................................................................................................................
 192  5EE5              ;                           DEFINE ROTATIONDEBUG 1
 193  5EE5              ;                           DEFINE CLIPDEBUG 1
 194  5EE5 00           CurrentShipUniv:        DB      0
 195  5EE6              ;..................................................................................................................................
 196  5EE6              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
 197  5EE6              ;..................................................................................................................................
 198  5EE6              ; Replacement for MVEIT routine
 199  5EE6 CD FF 5E     UpdateUniverseObjects:  call    LoadTargetData
 200  5EE9 CD 1E 5F                             call    CalculateRelativePos
 201  5EEC
 202  5EEC                                      MMUSelectUniverseN      1
 202  5EEC ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 203  5EF0 3E 03                                ld      a,3
 204  5EF2 32 76 C0                             ld      (UBnKAccel),a
 205  5EF5 CD 63 D6                             call    ApplyShipRollAndPitch
 206  5EF8 CD A9 D7                             call    ApplyShipSpeed
 207  5EFB CD FA C6                             call    UpdateSpeedAndPitch                             ; update based on rates of speed roll and pitch accelleration/decelleration
 208  5EFE C9                                   ret
 209  5EFF
 210  5EFF              LoadTargetData:         MMUSelectUniverseN 2                        ;
 210  5EFF ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 211  5F03 21 20 C0                             ld      hl,UBnKxlo
 212  5F06 11 4B 68                             ld      de,CurrentTargetXpos
 213  5F09 01 09 00                             ld      bc,9
 214  5F0C ED B0                                ldir
 215  5F0E                                      MMUSelectUniverseN 1
 215  5F0E ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 216  5F12 21 4B 68                             ld      hl,CurrentTargetXpos
 217  5F15 11 47 C0                             ld      de,UBnKTargetXPos
 218  5F18 01 09 00                             ld      bc,9
 219  5F1B ED B0                                ldir
 220  5F1D C9                                   ret
 221  5F1E              ;..................................................................................................................................
 222  5F1E FD 21 20 C0  CalculateRelativePos:   ld      iy,UBnKxlo
 223  5F22 DD 21 47 C0                          ld      ix,UBnKTargetXPos
 224  5F26 CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed
 225  5F29 7D                                   ld      a,l
 226  5F2A 32 65 C0                             ld      (UBnKOffset),a
 227  5F2D ED 53 66 C0                          ld      (UBnKOffset+1),de
 228  5F31 FD 21 23 C0  .RelativeY:             ld      iy,UBnKylo
 229  5F35 DD 21 4A C0                          ld      ix,UBnKTargetYPos
 230  5F39 CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed
 231  5F3C 7D                                   ld      a,l
 232  5F3D 32 68 C0                             ld      (UBnKOffset+3),a
 233  5F40 ED 53 69 C0                          ld      (UBnKOffset+4),de
 234  5F44 FD 21 26 C0  .RelativeZ:             ld      iy,UBnKzlo
 235  5F48 DD 21 4D C0                          ld      ix,UBnKTargetZPos
 236  5F4C CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed
 237  5F4F 7D                                   ld      a,l
 238  5F50 32 6B C0                             ld      (UBnKOffset+6),a
 239  5F53 ED 53 6C C0                          ld      (UBnKOffset+7),de
 240  5F57 C9                                   ret
 241  5F58              ;..................................................................................................................................
 242  5F58              CreateMissile:          MMUSelectUniverseN  1
 242  5F58 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 243  5F5C 3E 02                                ld      a,2
 244  5F5E 32 46 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 245  5F61 CD C2 C6                             call    UnivSetPlayerMissile                ; .
 246  5F64 3E 1F                                ld          a,$1F
 247  5F66 32 36 C4                             ld          (SpeedAddr),a
 248  5F69 C9                                   ret
 249  5F6A
 250  5F6A              CreateTarget:           MMUSelectUniverseN  2
 250  5F6A ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 251  5F6E CD AA C7                             call    UnivInitRuntime
 252  5F71 CD 56 C7                             call    UnivSetSpawnPosition
 253  5F74 C9                                   ret
 254  5F75
 255  5F75 0A 00 00     Plus10:                 DB 10,0,0
 256  5F78 0A 00 80     Minus10:                DB 10,0,$80
 257  5F7B
 258  5F7B 14 00 00     Plus20:                 DB 20,0,0
 259  5F7E 14 00 80     Minus20:                DB 20,0,$80
 260  5F81
 261  5F81 00 00 00...  SaveUBNK:               DS 3*3
 262  5F8A
 263  5F8A E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 264  5F8E 3A E5 5E                             ld      a,(CurrentShipUniv)
 265  5F91 FE 02                                cp      2
 266  5F93 20 31                                jr      nz,.DoneSave
 267  5F95                                      ;break
 268  5F95 21 20 C0                             ld      hl, UBnKxlo
 269  5F98 11 81 5F                             ld      de, SaveUBNK
 270  5F9B 01 09 00                             ld      bc, 3*3
 271  5F9E ED B0                                ldir
 272  5FA0 3E 00                                ld      a,0
 273  5FA2 32 24 C0                             ld      (UBnKyhi)  ,a
 274  5FA5 32 21 C0                             ld      (UBnKxhi)  ,a
 275  5FA8 32 27 C0                             ld      (UBnKzhi)  ,a
 276  5FAB 32 22 C0                             ld      (UBnKxsgn) ,a
 277  5FAE 32 25 C0                             ld      (UBnKysgn) ,a
 278  5FB1 32 27 C0                             ld      (UBnKzhi)  ,a
 279  5FB4 32 28 C0                             ld      (UBnKzsgn) ,a
 280  5FB7 3E 05                                ld      a, $5
 281  5FB9 32 23 C0                             ld      (UBnKylo)  ,a
 282  5FBC 3E 05                                ld      a, $5
 283  5FBE 32 20 C0                             ld      (UBnKxlo)  ,a
 284  5FC1 3E 6E                                ld      a, $6E
 285  5FC3 32 26 C0                             ld      (UBnKzlo)  ,a
 286  5FC6 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 287  5FCA C9                                   ret
 288  5FCB
 289  5FCB E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 290  5FCF 3A E5 5E                             ld      a,(CurrentShipUniv)
 291  5FD2 FE 02                                cp      2
 292  5FD4 20 0B                                jr      nz,.DoneSave
 293  5FD6                                      ;break
 294  5FD6 21 81 5F                             ld      hl, SaveUBNK
 295  5FD9 11 20 C0                             ld      de, UBnKxlo
 296  5FDC 01 09 00                             ld      bc, 3*3
 297  5FDF ED B0                                ldir
 298  5FE1 F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 299  5FE5 C9                                   ret
 300  5FE6
 301  5FE6
 302  5FE6              ;----------------------------------------------------------------------------------------------------------------------------------
 303  5FE6              ; Display Stats - go for 320 mode to test code
 304  5FE6              ; Left side                         Right Side
 305  5FE6              ;0123456789012345678901234567890123456789
 306  5FE6              ;1Missile
 307  5FE6              ;2     X        Y       Z
 308  5FE6              ;3+FFFF.FF +FFFF.FF +FFFF.FF
 309  5FE6              ;4Matrix    X        Y        Z
 310  5FE6              ;5Side +FFFF.FF +FFFF.FF +FFFF.FF
 311  5FE6              ;6Roof +FFFF.FF +FFFF.FF +FFFF.FF
 312  5FE6              ;7Nose +FFFF.FF +FFFF.FF +FFFF.FF
 313  5FE6              ;8
 314  5FE6              ;9Speed Roll Pitch
 315  5FE6              ;0+FF   +FF  +FF
 316  5FE6              ;1Target
 317  5FE6              ;2     X        Y       Z
 318  5FE6              ;3+FFFF.FF +FFFF.FF +FFFF.FF
 319  5FE6              ;4Dot Product
 320  5FE6              ;5+FFFF
 321  5FE6              ;6Actions
 322  5FE6              ;7
 323  5FE6              ;8
 324  5FE6              ;9
 325  5FE6 00 01 4D 69  BoilerPlate1:           DB      00 ,01,  "Missile   X        Y        Z",0
 325  5FEA 73 73 69 6C
 325  5FEE 65 20 20 20
 325  5FF2 58 20 20 20
 325  5FF6 20 20 20 20
 325  5FFA 20 59 20 20
 325  5FFE 20 20 20 20
 325  6002 20 20 5A 00
 326  6006 00 03 4D 61  BoilerPlate2:           DB      00 ,03,  "Matrix    X        Y        Z",0
 326  600A 74 72 69 78
 326  600E 20 20 20 20
 326  6012 58 20 20 20
 326  6016 20 20 20 20
 326  601A 20 59 20 20
 326  601E 20 20 20 20
 326  6022 20 20 5A 00
 327  6026 00 04 53 69  BoilerPlate3:           DB      00 ,04,  "Side",0
 327  602A 64 65 00
 328  602D 00 05 52 6F  BoilerPlate4:           DB      00 ,05,  "Roof",0
 328  6031 6F 66 00
 329  6034 00 06 4E 6F  BoilerPlate5:           DB      00 ,06,  "Nose",0
 329  6038 73 65 00
 330  603B 00 07 41 63  BoilerPlate6:           DB      00 ,07,  "Accell             Speed",0
 330  603F 63 65 6C 6C
 330  6043 20 20 20 20
 330  6047 20 20 20 20
 330  604B 20 20 20 20
 330  604F 20 53 70 65
 330  6053 65 64 00
 331  6056 00 08 52 6F  BoilerPlate7:           DB      00 ,08,  "Roll               Pitch",0
 331  605A 6C 6C 20 20
 331  605E 20 20 20 20
 331  6062 20 20 20 20
 331  6066 20 20 20 20
 331  606A 20 50 69 74
 331  606E 63 68 00
 332  6071 00 09 54 61  BoilerPlate8:           DB      00 ,09,  "Target    X        Y        Z",0
 332  6075 72 67 65 74
 332  6079 20 20 20 20
 332  607D 58 20 20 20
 332  6081 20 20 20 20
 332  6085 20 59 20 20
 332  6089 20 20 20 20
 332  608D 20 20 5A 00
 333  6091 00 0B 54 61  BoilerPlate9:           DB      00 ,11,  "Tactics",0
 333  6095 63 74 69 63
 333  6099 73 00
 334  609B 00 0C 52 65  BoilerPlate10:          DB      00, 12,  "Relative  X        Y        Z",0
 334  609F 6C 61 74 69
 334  60A3 76 65 20 20
 334  60A7 58 20 20 20
 334  60AB 20 20 20 20
 334  60AF 20 59 20 20
 334  60B3 20 20 20 20
 334  60B7 20 20 5A 00
 335  60BB 00 0E 44 69  BoilerPlate11           DB      00 ,14,  "Direction X        Y        Z",0
 335  60BF 72 65 63 74
 335  60C3 69 6F 6E 20
 335  60C7 58 20 20 20
 335  60CB 20 20 20 20
 335  60CF 20 59 20 20
 335  60D3 20 20 20 20
 335  60D7 20 20 5A 00
 336  60DB 00 10 44 6F  BoilerPlate12:          DB      00 ,16,  "Dot Product",0
 336  60DF 74 20 50 72
 336  60E3 6F 64 75 63
 336  60E7 74 00
 337  60E9 00 11 41 63  BoilerPlate13:          DB      00 ,17,  "Actions",0
 337  60ED 74 69 6F 6E
 337  60F1 73 00
 338  60F3 00 12 53 6C  ActionTextSlow:         DB      00 ,18,  "Slow",0
 338  60F7 6F 77 00
 339  60FA 06 12 46 61  ActionTextFast:         DB      06 ,18,  "Fast",0
 339  60FE 73 74 00
 340  6101 0C 12 54 75  ActionTextTurn:         DB      12 ,18,  "Turn",0
 340  6105 72 6E 00
 341  6108 00 13 42 65  ActionTextBehind:       DB      00 ,19,  "Behind",0
 341  610C 68 69 6E 64
 341  6110 00
 342  6111 0A 13 46 6F  ActionTextForward:      DB      10 ,19,  "Forward",0
 342  6115 72 77 61 72
 342  6119 64 00
 343  611B 14 14 48 69  ActionTextHit:          DB      20 ,20,  "Hit",0
 343  611F 74 00
 344  6121 00 12 20 20  ClearTextSlow:          DB      00 ,18,  "    ",0
 344  6125 20 20 00
 345  6128 06 12 20 20  ClearTextFast:          DB      06 ,18,  "    ",0
 345  612C 20 20 00
 346  612F 0C 12 20 20  ClearTextTurn:          DB      12 ,18,  "    ",0
 346  6133 20 20 00
 347  6136 00 13 20 20  ClearTextBehind:        DB      00 ,19,  "      ",0
 347  613A 20 20 20 20
 347  613E 00
 348  613F 0A 13 20 20  ClearTextForward:       DB      10 ,19,  "       ",0
 348  6143 20 20 20 20
 348  6147 20 00
 349  6149 14 14 20 20  ClearTextHit:           DB      20 ,20,  "   ",0
 349  614D 20 00
 350  614F
 351  614F 00           StatusSlow              DB      0
 352  6150 00           StatusFast              DB      0
 353  6151 00           StatusTurn              DB      0
 354  6152 00           StatusBehind            DB      0
 355  6153 00           StatusForward           DB      0
 356  6154 00           StatusHit               DB      0
 357  6155              ;                                         0123456789ABCDEF0123456789AB
 358  6155              XPosX                   equ     $06 * 8
 359  6155              XPosY                   equ     $0F * 8
 360  6155              XPosZ                   equ     $18 * 8
 361  6155              RowMissle               equ     02
 362  6155              RowMatrix1              equ     04
 363  6155              RowMatrix2              equ     05
 364  6155              RowMatrix3              equ     06
 365  6155              RowAccellSpeed          equ     07
 366  6155              RowPitchRoll            equ     08
 367  6155              RowTarget               equ     10
 368  6155              RowRelative             equ     13
 369  6155              RowDirection            equ     15
 370  6155              RowDotProduct           equ     16
 371  6155
 372  6155 CD D5 62     DisplayActionStatus:    call    UpdateStatusSlow
 373  6158 CD DF 62                             call    UpdateStatusFast
 374  615B CD E9 62                             call    UpdateStatusTurn
 375  615E CD F3 62                             call    UpdateStatusBehind
 376  6161 CD FD 62                             call    UpdateStatusForward
 377  6164 CD 07 63                             call    UpdateStatusHit
 378  6167 C9                                   ret
 379  6168
 380  6168 D5           DisplayPosition:        push    de
 381  6169 1E 30                                ld      e,XPosX
 382  616B DD 21 20 C0                          ld      ix,UBnKxlo
 383  616F CD 54 62                             call    DisplayS24
 384  6172 D1                                   pop     de
 385  6173 D5                                   push    de
 386  6174 1E 78                                ld      e,XPosY
 387  6176 DD 21 23 C0                          ld      ix,UBnKylo
 388  617A CD 54 62                             call    DisplayS24
 389  617D D1                                   pop     de
 390  617E 1E C0                                ld      e,XPosZ
 391  6180 DD 21 26 C0                          ld      ix,UBnKzlo
 392  6184 CD 54 62                             call    DisplayS24
 393  6187 C9                                   ret
 394  6188
 395  6188 D5           DisplayMatrixRow:       push    de
 396  6189 1E 30                                ld      e,XPosX
 397  618B DD E5                                push    ix
 398  618D CD 67 62                             call    DisplayS16
 399  6190 DD E1                                pop     ix
 400  6192 D1                                   pop     de
 401  6193 D5                                   push    de
 402  6194 1E 78                                ld      e,XPosY
 403  6196 DD 23                                inc     ix
 404  6198 DD 23                                inc     ix
 405  619A DD E5                                push    ix
 406  619C CD 67 62                             call    DisplayS16
 407  619F DD E1                                pop     ix
 408  61A1 D1                                   pop     de
 409  61A2 1E C0                                ld      e,XPosZ
 410  61A4 DD 23                                inc     ix
 411  61A6 DD 23                                inc     ix
 412  61A8 CD 67 62                             call    DisplayS16
 413  61AB C9                                   ret
 414  61AC
 415  61AC
 416  61AC 16 0D        DisplayRelative:        ld      d,RowRelative
 417  61AE 1E 30                                ld      e,XPosX
 418  61B0 DD 21 65 C0                          ld      ix,UBnKOffset
 419  61B4 CD 54 62                             call    DisplayS24
 420  61B7 16 0D                                ld      d,RowRelative
 421  61B9 1E 78                                ld      e,XPosY
 422  61BB DD 21 68 C0                          ld      ix,UBnKOffset+3
 423  61BF CD 54 62                             call    DisplayS24
 424  61C2 16 0D                                ld      d,RowRelative
 425  61C4 1E C0                                ld      e,XPosZ
 426  61C6 DD 21 6B C0                          ld      ix,UBnKOffset+6
 427  61CA CD 54 62                             call    DisplayS24
 428  61CD C9                                   ret
 429  61CE
 430  61CE 16 0F        DisplayDirection:       ld      d,RowDirection
 431  61D0 1E 30                                ld      e,XPosX
 432  61D2 DD 21 6E C0                          ld      ix,UBnKDirection
 433  61D6 CD 67 62                             call    DisplayS16
 434  61D9 16 0F                                ld      d,RowDirection
 435  61DB 1E 78                                ld      e,XPosY
 436  61DD DD 21 71 C0                          ld      ix,UBnKDirection+3
 437  61E1 CD 67 62                             call    DisplayS16
 438  61E4 16 0F                                ld      d,RowDirection
 439  61E6 1E C0                                ld      e,XPosZ
 440  61E8 DD 21 74 C0                          ld      ix,UBnKDirection+6
 441  61EC CD 67 62                             call    DisplayS16
 442  61EF C9                                   ret
 443  61F0
 444  61F0 16 10        DisplayDotProduct:      ld      d,RowDotProduct
 445  61F2 1E 78                                ld      e,XPosY
 446  61F4 DD 21 74 C0                          ld      ix,UBnKDotProduct
 447  61F8 CD 77 62                             call    DisplayS8
 448  61FB C9                                   ret
 449  61FC
 450  61FC 16 04        DisplayMatrix:          ld      d,  RowMatrix1
 451  61FE DD 21 2A C0                          ld      ix, UBnkrotmatSidevX
 452  6202 CD 88 61                             call    DisplayMatrixRow
 453  6205 16 05                                ld      d,  RowMatrix2
 454  6207 DD 21 30 C0                          ld      ix, UBnkrotmatRoofvX
 455  620B CD 88 61                             call    DisplayMatrixRow
 456  620E 16 06                                ld      d,  RowMatrix3
 457  6210 DD 21 36 C0                          ld      ix, UBnkrotmatNosevX
 458  6214 CD 88 61                             call    DisplayMatrixRow
 459  6217 C9                                   ret
 460  6218
 461  6218 DD 21 76 C0  DisplayAccellSpeed:     ld      ix,UBnKAccel
 462  621C 16 07                                ld      d, RowAccellSpeed
 463  621E 1E 30                                ld      e,XPosX
 464  6220 CD 82 62                             call    DisplayU8
 465  6223 DD 21 75 C0                          ld      ix,UBnKSpeed
 466  6227 16 07                                ld      d, RowAccellSpeed
 467  6229 1E C0                                ld      e,XPosZ
 468  622B CD 77 62                             call    DisplayS8
 469  622E C9                                   ret
 470  622F
 471  622F DD 21 77 C0  DisplayRollPitch:       ld      ix,UBnKRotXCounter
 472  6233 16 08                                ld      d, RowPitchRoll
 473  6235 1E 30                                ld      e,XPosX
 474  6237 CD 77 62                             call    DisplayS8
 475  623A DD 21 78 C0                          ld      ix,UBnKRotZCounter
 476  623E 16 08                                ld      d, RowPitchRoll
 477  6240 1E C0                                ld      e,XPosZ
 478  6242 CD 77 62                             call    DisplayS8
 479  6245 C9                                   ret
 480  6246
 481  6246              DisplayBoilerLine:      MMUSelectLayer1
 481  6246 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 482  624A 7E                                   ld      a,(hl)
 483  624B 5F                                   ld      e,a
 484  624C 23                                   inc     hl
 485  624D 7E                                   ld      a,(hl)
 486  624E 57                                   ld      d,a
 487  624F 23                                   inc     hl
 488  6250 CD D7 E0                             call    l1_print_at_char
 489  6253 C9                                   ret
 490  6254
 491  6254              ; Display S24 value at address IX at position DE
 492  6254              DisplayS24:             MMUSelectLayer1
 492  6254 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 493  6258 DD 7E 02                             ld      a,(ix+2)
 494  625B 67                                   ld      h,a
 495  625C DD 7E 01                             ld      a,(ix+1)
 496  625F 6F                                   ld      l,a
 497  6260 DD 7E 00                             ld      a,(ix+0)
 498  6263 CD 49 E1                             call    l1_print_s24_hex_at_char
 499  6266 C9                                   ret
 500  6267
 501  6267              DisplayS16:             MMUSelectLayer1
 501  6267 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 502  626B DD 7E 01                             ld      a,(ix+1)
 503  626E 67                                   ld      h,a
 504  626F DD 7E 00                             ld      a,(ix+0)
 505  6272 6F                                   ld      l,a
 506  6273 CD 75 E1                             call    l1_print_s16_hex_at_char
 507  6276 C9                                   ret
 508  6277
 509  6277              DisplayS8:              MMUSelectLayer1
 509  6277 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 510  627B DD 7E 00                             ld      a,(ix+0)
 511  627E CD A9 E1                             call    l1_print_s8_hex_at_char
 512  6281 C9                                   ret
 513  6282
 514  6282              DisplayU8:              MMUSelectLayer1
 514  6282 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 515  6286 DD 7E 00                             ld      a,(ix+0)
 516  6289 CD C0 E1                             call    l1_print_u8_hex_at_char
 517  628C C9                                   ret
 518  628D
 519  628D 3E FF        SetStatusSlow:          ld      a,$FF
 519  628F 32 4F 61       ld      (StatusSlow),a
 519  6292 C9             ret
 520  6293 3E FF        SetStatusFast:          ld      a,$FF
 520  6295 32 50 61       ld      (StatusFast),a
 520  6298 C9             ret
 521  6299 3E FF        SetStatusTurn:          ld      a,$FF
 521  629B 32 51 61       ld      (StatusTurn),a
 521  629E C9             ret
 522  629F 3E FF        SetStatusBehind:        ld      a,$FF
 522  62A1 32 52 61       ld      (StatusBehind),a
 522  62A4 C9             ret
 523  62A5 3E FF        SetStatusForward:       ld      a,$FF
 523  62A7 32 53 61       ld      (StatusForward),a
 523  62AA C9             ret
 524  62AB 3E FF        SetStatusHit:           ld      a,$FF
 524  62AD 32 8A 63       ld      (HideHit),a
 524  62B0 C9             ret
 525  62B1
 526  62B1 3E 00        ClearStatusSlow:        ld      a,$00
 526  62B3 32 4F 61       ld      (StatusSlow),a
 526  62B6 C9             ret
 527  62B7 3E 00        ClearStatusFast:        ld      a,$00
 527  62B9 32 50 61       ld      (StatusFast),a
 527  62BC C9             ret
 528  62BD 3E 00        ClearStatusTurn:        ld      a,$00
 528  62BF 32 51 61       ld      (StatusTurn),a
 528  62C2 C9             ret
 529  62C3 3E 00        ClearStatusBehind:      ld      a,$00
 529  62C5 32 52 61       ld      (StatusBehind),a
 529  62C8 C9             ret
 530  62C9 3E 00        ClearStatusForward:     ld      a,$00
 530  62CB 32 53 61       ld      (StatusForward),a
 530  62CE C9             ret
 531  62CF 3E 00        ClearStatusHit:         ld      a,$00
 531  62D1 32 8A 63       ld      (HideHit),a
 531  62D4 C9             ret
 532  62D5
 533  62D5 3A 4F 61     UpdateStatusSlow:       ld      a,(StatusSlow)
 534  62D8 A7                                   and     a
 535  62D9 CA 1C 63                             jp      z,HideSlow
 536  62DC C3 11 63                             jp      DisplaySlow
 537  62DF                                      ; Implicit Return
 538  62DF 3A 50 61     UpdateStatusFast:       ld      a,(StatusFast)
 539  62E2 A7                                   and     a
 540  62E3 CA 32 63                             jp      z,HideFast
 541  62E6 C3 27 63                             jp      DisplayFast
 542  62E9                                      ; Implicit Return
 543  62E9 3A 51 61     UpdateStatusTurn:       ld      a,(StatusTurn)
 544  62EC A7                                   and     a
 545  62ED CA 48 63                             jp      z,HideTurn
 546  62F0 C3 3D 63                             jp      DisplayTurn
 547  62F3                                      ; Implicit Return
 548  62F3 3A 52 61     UpdateStatusBehind:     ld      a,(StatusBehind)
 549  62F6 A7                                   and     a
 550  62F7 CA 5E 63                             jp      z,HideBehind
 551  62FA C3 53 63                             jp      DisplayBehind
 552  62FD                                      ; Implicit Return
 553  62FD 3A 53 61     UpdateStatusForward:    ld      a,(StatusForward)
 554  6300 A7                                   and     a
 555  6301 CA 74 63                             jp      z,HideForward
 556  6304 C3 69 63                             jp      DisplayForward
 557  6307                                      ; Implicit Return
 558  6307 3A 54 61     UpdateStatusHit:        ld      a,(StatusHit)
 559  630A A7                                   and     a
 560  630B CA 8A 63                             jp      z,HideHit
 561  630E C3 7F 63                             jp      DisplayHit
 562  6311                                      ; Implicit Return
 563  6311
 564  6311              DisplaySlow             MMUSelectLayer1
 564  6311 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 565  6315 21 F3 60                             ld      hl,ActionTextSlow
 566  6318 CD 46 62                             call    DisplayBoilerLine
 567  631B C9                                   ret
 568  631C
 569  631C              HideSlow                MMUSelectLayer1
 569  631C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 570  6320 21 21 61                             ld      hl,ClearTextSlow
 571  6323 CD 46 62                             call    DisplayBoilerLine
 572  6326 C9                                   ret
 573  6327
 574  6327              DisplayFast             MMUSelectLayer1
 574  6327 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 575  632B 21 FA 60                             ld      hl,ActionTextFast
 576  632E CD 46 62                             call    DisplayBoilerLine
 577  6331 C9                                   ret
 578  6332
 579  6332              HideFast                MMUSelectLayer1
 579  6332 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 580  6336 21 28 61                             ld      hl,ClearTextFast
 581  6339 CD 46 62                             call    DisplayBoilerLine
 582  633C C9                                   ret
 583  633D
 584  633D              DisplayTurn             MMUSelectLayer1
 584  633D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 585  6341 21 01 61                             ld      hl,ActionTextTurn
 586  6344 CD 46 62                             call    DisplayBoilerLine
 587  6347 C9                                   ret
 588  6348
 589  6348              HideTurn                MMUSelectLayer1
 589  6348 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 590  634C 21 2F 61                             ld      hl,ClearTextTurn
 591  634F CD 46 62                             call    DisplayBoilerLine
 592  6352 C9                                   ret
 593  6353
 594  6353              DisplayBehind           MMUSelectLayer1
 594  6353 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 595  6357 21 08 61                             ld      hl,ActionTextBehind
 596  635A CD 46 62                             call    DisplayBoilerLine
 597  635D C9                                   ret
 598  635E
 599  635E              HideBehind              MMUSelectLayer1
 599  635E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 600  6362 21 36 61                             ld      hl,ClearTextBehind
 601  6365 CD 46 62                             call    DisplayBoilerLine
 602  6368 C9                                   ret
 603  6369
 604  6369              DisplayForward          MMUSelectLayer1
 604  6369 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 605  636D 21 11 61                             ld      hl,ActionTextForward
 606  6370 CD 46 62                             call    DisplayBoilerLine
 607  6373 C9                                   ret
 608  6374
 609  6374              HideForward             MMUSelectLayer1
 609  6374 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 610  6378 21 3F 61                             ld      hl,ClearTextForward
 611  637B CD 46 62                             call    DisplayBoilerLine
 612  637E C9                                   ret
 613  637F
 614  637F              DisplayHit:             MMUSelectLayer1
 614  637F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 615  6383 21 1B 61                             ld      hl,ActionTextHit
 616  6386 CD 46 62                             call    DisplayBoilerLine
 617  6389 C9                                   ret
 618  638A
 619  638A              HideHit:                MMUSelectLayer1
 619  638A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 620  638E 21 49 61                             ld      hl,ClearTextHit
 621  6391 CD 46 62                             call    DisplayBoilerLine
 622  6394 C9                                   ret
 623  6395
 624  6395
 625  6395 21 E6 5F     DisplayBoiler:          ld      hl, BoilerPlate1
 626  6398 CD 46 62                             call    DisplayBoilerLine
 627  639B 21 06 60                             ld      hl, BoilerPlate2
 628  639E CD 46 62                             call    DisplayBoilerLine
 629  63A1 21 26 60                             ld      hl, BoilerPlate3
 630  63A4 CD 46 62                             call    DisplayBoilerLine
 631  63A7 21 2D 60                             ld      hl, BoilerPlate4
 632  63AA CD 46 62                             call    DisplayBoilerLine
 633  63AD 21 34 60                             ld      hl, BoilerPlate5
 634  63B0 CD 46 62                             call    DisplayBoilerLine
 635  63B3 21 3B 60                             ld      hl, BoilerPlate6
 636  63B6 CD 46 62                             call    DisplayBoilerLine
 637  63B9 21 56 60                             ld      hl, BoilerPlate7
 638  63BC CD 46 62                             call    DisplayBoilerLine
 639  63BF 21 71 60                             ld      hl, BoilerPlate8
 640  63C2 CD 46 62                             call    DisplayBoilerLine
 641  63C5 21 91 60                             ld      hl, BoilerPlate9
 642  63C8 CD 46 62                             call    DisplayBoilerLine
 643  63CB 21 9B 60                             ld      hl, BoilerPlate10
 644  63CE CD 46 62                             call    DisplayBoilerLine
 645  63D1 21 BB 60                             ld      hl, BoilerPlate11
 646  63D4 CD 46 62                             call    DisplayBoilerLine
 647  63D7 21 DB 60                             ld      hl, BoilerPlate12
 648  63DA CD 46 62                             call    DisplayBoilerLine
 649  63DD 21 E9 60                             ld      hl, BoilerPlate13
 650  63E0 CD 46 62                             call    DisplayBoilerLine
 651  63E3 C9                                   ret
 652  63E4
 653  63E4              ;----------------------------------------------------------------------------------------------------------------------------------
 654  63E4              ; Set initial ship position as X,Y,Z 000,000,03B4
 655  63E4 21 00 00     SetInitialShipPosition: ld      hl,$0000
 656  63E7 22 20 C0                             ld      (UBnKxlo),hl
 657  63EA 21 00 00                             ld      hl,$0000
 658  63ED 22 23 C0                             ld      (UBnKylo),hl
 659  63F0 21 B4 03                             ld      hl,$03B4
 660  63F3 22 26 C0                             ld      (UBnKzlo),hl
 661  63F6 AF                                   xor     a
 662  63F7 32 22 C0                             ld      (UBnKxsgn),a
 663  63FA 32 25 C0                             ld      (UBnKysgn),a
 664  63FD 32 28 C0                             ld      (UBnKzsgn),a
 665  6400 CD B6 C7                             call	InitialiseOrientation            ;#00;
 666  6403 3E 01                                ld      a,1
 667  6405 32 46 67                             ld      (DELTA),a
 668  6408 21 04 00                             ld      hl,4
 669  640B 22 47 67                             ld      (DELTA4),hl
 670  640E C9                                   ret
 671  640F
 672  640F              ; Use bank 0 as source and bank 7 as write target
 673  640F              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
 673  640F ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
 674  6413 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
 675  6415 06 0C                                ld		b,12
 676  6417 C5 F5        .ResetCopyLoop:         push	bc,,af
 677  6419                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
 677  6419 C6 46       >                     add    a,BankUNIVDATA0
 677  641B ED 92 56    >                     nextreg UniverseMMU,       a
 678  641E 21 00 C0                             ld		hl,UniverseBankAddr
 679  6421 11 00 00                             ld		de,dmaCopySrcAddr
 680  6424 01 51 19                             ld		bc,UnivBankSize
 681  6427 CD EE 65                             call	memcopy_dma
 682  642A F1 C1                                pop		bc,,af
 683  642C 57                                   ld      d,a
 684  642D C6 41                                add     "A"
 685  642F 32 0B C0                             ld      (StartOfUnivN),a
 686  6432 7A                                   ld      a,d
 687  6433 3C                                   inc		a
 688  6434 10 E1                                djnz	.ResetCopyLoop
 689  6436 C9                                   ret
 690  6437
 691  6437                          DISPLAY "../../Maths/Utilities/XX12EquNodeDotOrientation.asm"
 692  6437                          include "../../Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ../../Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 6437              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 6437              ; so xx12 = XX15 * XX16 row
   3+ 6437              XX12ProcessOneRow:
   4+ 6437              XX12CalcXCell:
   5+ 6437 ED 4B D6 C0          ld		bc,(UBnkXScaled)
   6+ 643B 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 643C 23           		inc		hl
   8+ 643D 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 643E 7A           		ld		a,d
  10+ 643F A8                   xor     b
  11+ 6440 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 6442 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 6444 78           		ld		a,b                                     ; now make bc abs bc
  14+ 6445 E6 7F        		and		SignMask8Bit
  15+ 6447 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 6448 E5           		push	hl
  17+ 6449 16 00                ld      d,0                                     ; d = value
  18+ 644B 60           		ld		h,b
  19+ 644C 69           		ld		l,c
  20+ 644D CD A8 6C     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 6450 22 09 66     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 6453 DD 7C        		ld		a,ixh
  23+ 6455 32 10 66     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 6458 E1           		pop		hl
  25+ 6459              XX12CalcYCell:
  26+ 6459 ED 4B D8 C0          ld		bc,(UBnkYScaled)
  27+ 645D 23           		inc		hl
  28+ 645E 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 645F 23           		inc		hl
  30+ 6460 56           		ld		d,(hl)
  31+ 6461 7A           		ld		a,d
  32+ 6462 A8                   xor     b
  33+ 6463 E6 80        		and		SignOnly8Bit
  34+ 6465 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 6467 78           		ld		a,b                                     ; now make bc abs bc
  36+ 6468 E6 7F        		and		SignMask8Bit
  37+ 646A 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 646B E5           		push	hl
  39+ 646C 16 00                ld      d,0                                     ; d = value
  40+ 646E 60           		ld		h,b
  41+ 646F 69           		ld		l,c
  42+ 6470 CD A8 6C     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 6473 22 0B 66     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 6476 DD 7C        		ld		a,ixh
  45+ 6478 32 0F 66     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 647B E1           		pop		hl
  47+ 647C              XX12CalcZCell:
  48+ 647C ED 4B DA C0          ld		bc,(UBnkZScaled)
  49+ 6480 23           		inc		hl
  50+ 6481 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 6482 23           		inc		hl
  52+ 6483 56           		ld		d,(hl)
  53+ 6484 7A           		ld		a,d
  54+ 6485 A8                   xor     b
  55+ 6486 E6 80        		and		SignOnly8Bit
  56+ 6488 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 648A 78           		ld		a,b                                     ; now make bc abs bc
  58+ 648B E6 7F        		and		SignMask8Bit
  59+ 648D 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 648E 16 00                ld      d,0                                     ; d = value
  61+ 6490 60           		ld		h,b
  62+ 6491 69           		ld		l,c
  63+ 6492 CD A8 6C     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 6495 22 0D 66     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 6498 DD 7C        		ld		a,ixh
  66+ 649A 32 11 66     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 649D              XX12CalcCellResult:
  68+ 649D 2A 09 66     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 64A0 ED 5B 0B 66  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 64A4 ED 4B 0F 66  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 64A8              XX12MSBOnly:
  72+ 64A8 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 64A9 5A           		ld		e,d									    ; for both results
  74+ 64AA AF           		xor		a									    ;
  75+ 64AB 67           		ld		h,a									    ;
  76+ 64AC 57           		ld		d,a									    ; so set high byte to 0
  77+ 64AD CD 33 00     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 64B0 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 64B1 3A 11 66     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 64B4 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 64B5 ED 5B 0D 66  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 64B9 5A           		ld		e,d                                     ; d = result /256
  83+ 64BA 16 00        		ld		d,0									    ; and only us high byte
  84+ 64BC CD 33 00     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 64BF C9           		ret											    ; hl = result, a = sign
  86+ 64C0              								    ; hl = result, a = sign
  87+ 64C0
  88+ 64C0              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 64C0              ;...X cell
  90+ 64C0 21 A9 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 64C3 CD 37 64             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 64C6 47           		ld		b,a                                 ; b = sign
  93+ 64C7 7C           		ld		a,h                                 ; a = high byte
  94+ 64C8 B0           		or		b
  95+ 64C9 32 DD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 64CC 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 64CD 32 DC C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 64D0              ;...Y cell
  99+ 64D0 21 B1 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 64D3 CD 37 64             call    XX12ProcessOneRow
 101+ 64D6 47           		ld		b,a
 102+ 64D7 7C           		ld		a,h
 103+ 64D8              ;		ld		a,l
 104+ 64D8 B0           		or		b
 105+ 64D9 32 DF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 64DC 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 64DD 32 DE C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 64E0              ;...Z cell
 109+ 64E0 21 B9 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 64E3 CD 37 64             call    XX12ProcessOneRow
 111+ 64E6 47           		ld		b,a
 112+ 64E7 7C                   ld		a,h
 113+ 64E8              ;		ld		a,l
 114+ 64E8 B0           		or		b
 115+ 64E9 32 E1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 64EC 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 64ED 32 E0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 64F0 C9                   ret
 119+ 64F1
 120+ 64F1              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 64F1              ;...X cell
 122+ 64F1 21 A9 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 64F4 CD 37 64             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 64F7 47           		ld		b,a                                 ; b = sign
 125+ 64F8 7C           		ld		a,h                                 ; a = high byte
 126+ 64F9 B0           		or		b
 127+ 64FA 32 DD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 64FD 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 64FE 32 DC C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 6501              ;...Y cell
 131+ 6501 21 B1 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 6504 CD 37 64             call    XX12ProcessOneRow
 133+ 6507 47           		ld		b,a
 134+ 6508 7C           		ld		a,h
 135+ 6509              ;		ld		a,l
 136+ 6509 B0           		or		b
 137+ 650A 32 DF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 650D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 650E 32 DE C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 6511              ;...Z cell
 141+ 6511 21 B9 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 6514 CD 37 64             call    XX12ProcessOneRow
 143+ 6517 47           		ld		b,a
 144+ 6518 7C                   ld		a,h
 145+ 6519              ;		ld		a,l
 146+ 6519 B0           		or		b
 147+ 651A 32 E1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 651D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 651E 32 E0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 6521 C9                   ret
 151+ 6522
 152+ 6522              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 6522              ;...X cell
 154+ 6522 21 91 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 6525 CD 37 64             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 6528 47           		ld		b,a                                 ; b = sign
 157+ 6529 7C           		ld		a,h                                 ; a = high byte
 158+ 652A B0           		or		b
 159+ 652B 32 DD C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 652E 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 652F 32 DC C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 6532              ;...Y cell
 163+ 6532 21 97 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 6535 CD 37 64             call    XX12ProcessOneRow
 165+ 6538 47           		ld		b,a
 166+ 6539 7C           		ld		a,h
 167+ 653A              ;		ld		a,l
 168+ 653A B0           		or		b
 169+ 653B 32 DF C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 653E 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 653F 32 DE C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 6542              ;...Z cell
 173+ 6542 21 9D C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 6545 CD 37 64             call    XX12ProcessOneRow
 175+ 6548 47           		ld		b,a
 176+ 6549 7C                   ld		a,h
 177+ 654A              ;		ld		a,l
 178+ 654A B0           		or		b
 179+ 654B 32 E1 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 654E 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 654F 32 E0 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 6552 C9                   ret
# file closed: ../../Maths/Utilities/XX12EquNodeDotOrientation.asm
 693  6553                          DISPLAY "../../ModelRender/CopyXX12ToXX15.asm"
 694  6553                          include "../../ModelRender/CopyXX12ToXX15.asm"
# file opened: ../../ModelRender/CopyXX12ToXX15.asm
   1+ 6553 21 DC C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 6556 11 D6 C0                             ld      de,XX15
   3+ 6559 01 06 00                             ld      bc,6
   4+ 655C ED B0                                ldir
   5+ 655E C9                                   ret
   6+ 655F
   7+ 655F 21 DC C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 6562 11 E2 C0                             ld      de,XX12Save
   9+ 6565 01 06 00                             ld      bc,6
  10+ 6568 ED B0                                ldir
  11+ 656A C9                                   ret
  12+ 656B
  13+ 656B 21 E2 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 656E 11 DC C0                             ld      de,XX12
  15+ 6571 01 06 00                             ld      bc,6
  16+ 6574 ED B0                                ldir
  17+ 6576 C9                                   ret
  18+ 6577
  19+ 6577 21 DC C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 657A 11 E8 C0                             ld      de,XX12Save2
  21+ 657D 01 06 00                             ld      bc,6
  22+ 6580 ED B0                                ldir
  23+ 6582 C9                                   ret
  24+ 6583
  25+ 6583 21 E8 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 6586 11 DC C0                             ld      de,XX12
  27+ 6589 01 06 00                             ld      bc,6
  28+ 658C ED B0                                ldir
  29+ 658E C9                                   ret
  30+ 658F
# file closed: ../../ModelRender/CopyXX12ToXX15.asm
 695  658F                          DISPLAY "../../Maths/Utilities/ScaleXX16Matrix197.asm"
 696  658F                          include "../../Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ../../Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 658F              ScaleXX16Matrix197:
   2+ 658F                      IFDEF LOGMATHS
   3+ 658F ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 658F ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 658F ~                                    MMUSelectMathsTables
   6+ 658F ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 658F ~                                    inc		hl                  ;
   8+ 658F ~                                    ld		a,(hl)              ;
   9+ 658F ~                                    ld		d,a                 ;
  10+ 658F ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 658F ~                                    ld		ixl,a				; retain for sign bit
  12+ 658F ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 658F ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 658F ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 658F ~                                    push	hl                  ; save HL
  16+ 658F ~                                    call    AEquAmul256Div197Log;
  17+ 658F ~                                    pop		hl
  18+ 658F ~                                    dec     hl                  ; move back to low byte
  19+ 658F ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 658F ~                                    inc     hl                  ; move back to high byte
  21+ 658F ~                                    ld      a,ixl
  22+ 658F ~                                    ld      (hl),a              ; write back just sign bit
  23+ 658F ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 658F ~                                    inc     hl                  ; no to next vertex value
  25+ 658F ~                                    djnz	.ScaleXX16Loop
  26+ 658F ~                                    MMUSelectROM0
  27+ 658F ~                                    ret
  28+ 658F                      ELSE
  29+ 658F 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 6591 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 6593 21 91 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 6596 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 6597 5F                                   ld		e,a                 ;
  34+ 6598 23                                   inc		hl                  ;
  35+ 6599 7E                                   ld		a,(hl)              ;
  36+ 659A 57                                   ld		d,a                 ;
  37+ 659B E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 659D DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 659F                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 659F CB 23       >			   sla e
  39+ 65A1 CB 12       >			   rl  d
  40+ 65A3 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 65A4 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 65A5 E5                                   push	hl                  ; save HL
  43+ 65A6 CD 81 71                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 65A9 E1                                   pop		hl
  45+ 65AA 2B                                   dec     hl                  ; move back to low byte
  46+ 65AB 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 65AC 23                                   inc     hl                  ; move back to high byte
  48+ 65AD                                  ;    ld      a,(hl)
  49+ 65AD                                  ;    and     $80
  50+ 65AD DD 7D                                ld      a,ixl
  51+ 65AF 77                                   ld      (hl),a              ; write back just sign bit
  52+ 65B0 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 65B1 23                                   inc     hl                  ; no to next vertex value
  54+ 65B2 10 E2                                djnz	.ScaleXX16Loop
  55+ 65B4 C9                                   ret
  56+ 65B5                      ENDIF
# file closed: ../../Maths/Utilities/ScaleXX16Matrix197.asm
 697  65B5
 698  65B5                          ;nclude "../../Universe/StarDust/StarRoutines.asm"
 699  65B5
 700  65B5                          INCLUDE	"../../Hardware/memfill_dma.asm"
# file opened: ../../Hardware/memfill_dma.asm
   1+ 65B5
   2+ 65B5 00           memfillvalue		DB 0
   3+ 65B6 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 65BA 7D
   4+ 65BB B5 65        memfill_astrt  		DW memfillvalue
   5+ 65BD 00 40        memfill_length 		DB $00,$40
   6+ 65BF 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 65C2 00 00        memfill_bstrt  		DB $00,$00
   8+ 65C4 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 65C8              memfill_cmd_len	  	EQU $ - memfill
  10+ 65C8
  11+ 65C8              memfill_dma:
  12+ 65C8              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 65C8              .set_fill_value:
  14+ 65C8 32 B5 65     	ld 		(memfillvalue),a
  15+ 65CB              .set_target:
  16+ 65CB 22 C2 65     	ld		(memfill_bstrt),hl
  17+ 65CE              .set_length:
  18+ 65CE ED 53 BD 65  	ld		(memfill_length),de
  19+ 65D2              .write_dma:
  20+ 65D2 21 B6 65     	ld 		hl, memfill
  21+ 65D5 06 12        	ld 		b, memfill_cmd_len
  22+ 65D7 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 65D9 ED B3        	otir
  24+ 65DB C9           	ret
  25+ 65DC
# file closed: ../../Hardware/memfill_dma.asm
 701  65DC                          INCLUDE	"../../Hardware/memcopy_dma.asm"
# file opened: ../../Hardware/memcopy_dma.asm
   1+ 65DC
   2+ 65DC 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 65E0 7D
   3+ 65E1 00 00        memcopy_astrt  		DB $00,$00
   4+ 65E3 00 40        memcopy_length 		DB $00,$40
   5+ 65E5 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 65E8 00 00        memcopy_bstrt  		DB $00,$00
   7+ 65EA 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 65EE              memcopy_cmd_len	  	equ $ - memcopy
   9+ 65EE
  10+ 65EE              memcopy_dma:
  11+ 65EE              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 65EE              .set_target:
  13+ 65EE 22 E8 65     	ld		(memcopy_bstrt),hl
  14+ 65F1              .set_source:
  15+ 65F1 ED 53 E1 65  	ld		(memcopy_astrt),de
  16+ 65F5              .set_length:
  17+ 65F5 ED 43 E3 65  	ld		(memcopy_length),bc
  18+ 65F9              .write_dma:
  19+ 65F9 21 DC 65     	ld 		hl, memcopy
  20+ 65FC 06 12        	ld 		b, memcopy_cmd_len
  21+ 65FE 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 6600 ED B3        	otir
  23+ 6602 C9           	ret
  24+ 6603
# file closed: ../../Hardware/memcopy_dma.asm
 702  6603 00 00        XX12PVarQ			DW 0
 703  6605 00 00        XX12PVarR			DW 0
 704  6607 00 00        XX12PVarS			DW 0
 705  6609 00 00        XX12PVarResult1		DW 0
 706  660B 00 00        XX12PVarResult2		DW 0
 707  660D 00 00        XX12PVarResult3		DW 0
 708  660F 00           XX12PVarSign2		DB 0
 709  6610 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 710  6611 00           XX12PVarSign3		DB 0
 711  6612                  INCLUDE "../../Variables/constant_equates.asm"
# file opened: ../../Variables/constant_equates.asm
   1+ 6612              ;Contants
   2+ 6612
   3+ 6612              SignMask8Bit		equ %01111111
   4+ 6612              SignMask16Bit		equ %0111111111111111
   5+ 6612              SignOnly8Bit		equ $80
   6+ 6612              SignOnly16Bit		equ $8000
   7+ 6612
   8+ 6612              Bit7Only            equ %10000000
   9+ 6612              Bit6Only            equ %01000000
  10+ 6612              Bit5Only            equ %00100000
  11+ 6612              Bit4Only            equ %00010000
  12+ 6612              Bit3Only            equ %00001000
  13+ 6612              Bit2Only            equ %00000100
  14+ 6612              Bit1Only            equ %00000010
  15+ 6612              Bit0Only            equ %00000001
  16+ 6612              Bit7Clear           equ %01111111
  17+ 6612              Bit6Clear           equ %10111111
  18+ 6612              Bit5Clear           equ %11011111
  19+ 6612              Bit4Clear           equ %11101111
  20+ 6612              Bit3Clear           equ %11110111
  21+ 6612              Bit2Clear           equ %11111011
  22+ 6612              Bit1Clear           equ %11111101
  23+ 6612              Bit0Clear           equ %11111110
  24+ 6612              ConstPi				equ $80
  25+ 6612              ConstNorm           equ 197
  26+ 6612              ;OpCodes
  27+ 6612              OpCodeSCF           equ $37
  28+ 6612              OpCodeCCF           equ $3F
  29+ 6612              OpCodeAndA          equ $A7
  30+ 6612              OpCodeClearCarryFlag equ OpCodeAndA
  31+ 6612
  32+ 6612              TidyInterval        equ 16
  33+ 6612
  34+ 6612              ;Text Tokens
  35+ 6612              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  36+ 6612              BrabenBellToken 	equ $0D
  37+ 6612              AcorToken			equ $0C
  38+ 6612              ; Cursor Bits
  39+ 6612              CursorClimb         equ %10000000
  40+ 6612              CursorDive          equ %01000000
  41+ 6612              CursorLeft          equ %00100000
  42+ 6612              CursorRight         equ %00010000
  43+ 6612              CursorHome          equ %00001000
  44+ 6612              CursorRecenter      equ %00000100
  45+ 6612
  46+ 6612              ; Intro Screen
  47+ 6612              TitleShip			equ	$8C
  48+ 6612              RotationUnity		equ $60
  49+ 6612              DBCheckCode			equ $DB
  50+ 6612              MaxVisibility		equ $1F
  51+ 6612              FarInFront			equ $C0
  52+ 6612              ; Equipment Flags
  53+ 6612              EquipmentItemFitted     equ $FF
  54+ 6612              EquipmentItemNotFitted  equ 0
  55+ 6612              ; Universe Managment
  56+ 6612              PlanetTypeMeridian      equ 128
  57+ 6612              PlanetMinRadius         equ 6
  58+ 6612
  59+ 6612              ShipTotalModelCount     equ 44
  60+ 6612              ShipTypeNormal          equ 0
  61+ 6612              ShipTypeMissile         equ 1
  62+ 6612              ShipTypeStation         equ 2
  63+ 6612              ShipTypeJunk            equ 3
  64+ 6612              ShipTypeScoopable       equ 4         ; a sub set of junk
  65+ 6612              ShipTypeTargoid         equ 5
  66+ 6612              ShipTypeUndefined1      equ 6
  67+ 6612              ShipTypeUndefined2      equ 7
  68+ 6612              ShipTypeUndefined3      equ 8
  69+ 6612              ShipTypeUndefined4      equ 9
  70+ 6612              ShipTypeUndefined5      equ 10
  71+ 6612              ShipTypeUndefined6      equ 11
  72+ 6612              ShipTypeUndefined7      equ 12
  73+ 6612              ShipTypeUndefined8      equ 13
  74+ 6612              ShipTypeUndefined9      equ 14
  75+ 6612              ShipTypeUndefined10      equ 15
  76+ 6612              ShipTypeNoAI            equ 16
  77+ 6612
  78+ 6612              ShipTypeText            equ 253
  79+ 6612              ShipTypeDebug           equ 254
  80+ 6612              ShipTypeEmpty           equ 255
  81+ 6612
  82+ 6612              SpawnTypeStation        EQU 0
  83+ 6612              SpawnTypeBodies         EQU SpawnTypeStation        + 1
  84+ 6612              SpawnTypeJunk           EQU SpawnTypeBodies         + 1
  85+ 6612              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  86+ 6612              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  87+ 6612              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  88+ 6612              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  89+ 6612              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  90+ 6612              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  91+ 6612              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  92+ 6612              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  93+ 6612              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  94+ 6612              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  95+ 6612
  96+ 6612
  97+ 6612              ; Laser and Missile Settings
  98+ 6612              ; Laser and Missile
  99+ 6612              ShipLaserPower          equ %11110000
 100+ 6612              ShipMissileCount        equ %00001111
 101+ 6612              ShipMissiles1           equ %00000001
 102+ 6612              ShipMissiles2           equ %00000010
 103+ 6612              ShipMissiles3           equ %00000011
 104+ 6612              ShipMissiles4           equ %00000100
 105+ 6612              ShipMissiles5           equ %00000101
 106+ 6612              ShipMissiles6           equ %00000110
 107+ 6612              ShipMissiles7           equ %00000111
 108+ 6612              ShipMissiles8           equ %00001000
 109+ 6612              ShipMissiles9           equ %00001001
 110+ 6612              ShipMissiles10          equ %00001010
 111+ 6612              ShipMissiles11          equ %00001011
 112+ 6612              ShipMissiles12          equ %00001100
 113+ 6612              ShipMissiles13          equ %00001101
 114+ 6612              ShipMissiles14          equ %00001110
 115+ 6612              ShipMissiles15          equ %00001111
 116+ 6612              ; AI Flags  UniverseAIControl
 117+ 6612              ShipCanAnger            equ %10000000   ; Yes or no
 118+ 6612              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 119+ 6612              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 120+ 6612              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 121+ 6612              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 122+ 6612              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 123+ 6612              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 124+ 6612              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 125+ 6612              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 126+ 6612              ShipFighterWorm         equ %00000000
 127+ 6612              ShipFighterSidewinder   equ %00000100
 128+ 6612              ShipFighterViper        equ %00001000
 129+ 6612              ShipFighterThargon      equ %00001100
 130+ 6612              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 131+ 6612              ShipFree                equ $00000011   ; Unused bits at present for later
 132+ 6612              ; NewBTactics
 133+ 6612              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 134+ 6612              ShipIsBountyHunter      equ Bit1Only   ;
 135+ 6612              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 136+ 6612              ShipIsPirate            equ Bit3Only   ;
 137+ 6612              ShipIsDocking           equ Bit4Only   ;
 138+ 6612              ShipIsBystander         equ Bit5Only   ;
 139+ 6612              ShipIsCop               equ Bit6Only   ;
 140+ 6612              ShipHasEscapePod        equ Bit7Only   ;
 141+ 6612              ShipHostileNewBitNbr    equ 2
 142+ 6612                      DISPLAY "TODO: Add bravery based on rank, new bits and type of ship"
 143+ 6612
 144+ 6612              ; UBnkaiatkecm
 145+ 6612              ;Unused                 equ Bit0Only
 146+ 6612              ;Unused                 equ Bit1Only
 147+ 6612              ;Unused                 equ Bit2Only
 148+ 6612              ShipIsDot               equ Bit3Only
 149+ 6612              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 150+ 6612              ShipExploding           equ Bit5Only
 151+ 6612              ShipIsVisible           equ Bit6Only
 152+ 6612              ShipAIEnabled           equ Bit7Only   ;
 153+ 6612
 154+ 6612
 155+ 6612              ; UBnkaiakecm 2
 156+ 6612              ;ShipAngryNewBitNbr      equ 4
 157+ 6612              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 158+ 6612              ShipNotHostile          equ Bit2Clear   ;
 159+ 6612              ShipIsNotDot            equ Bit3Clear
 160+ 6612              ShipIsDotBitNbr         equ 3
 161+ 6612              ShipKilledBitNbr        equ 4
 162+ 6612              ShipIsVisibleBitNbr     equ 6
 163+ 6612              ShipIsScoopDockEsc      equ Bit7Only   ;
 164+ 6612              ShipAIDisabled          equ Bit7Clear
 165+ 6612              ShipAIEnabledBitNbr     equ 7
 166+ 6612              ShipExplodingBitNbr     equ 5
 167+ 6612              ; Equipment Defaults
 168+ 6612              ECMCounterMax           equ $80
 169+ 6612              ; Main Loop State
 170+ 6612              StatePlayerDocked       equ $FF
 171+ 6612              StateCompletedLaunch    equ $FD
 172+ 6612              StateInTransition       equ $FE
 173+ 6612              StateHJumping           equ $FC
 174+ 6612              StateHEntering          equ $FB
 175+ 6612              StateCompletedHJump     equ $FA
 176+ 6612              StateNormal             equ 0
 177+ 6612              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 178+ 6612              StageMissileNotTargeting equ $FF
 179+ 6612              StageMissileTargeting   equ $FE
 180+ 6612
 181+ 6612
 182+ 6612              ShipMaxDistance     equ 192
 183+ 6612              HyperSpaceTimers    equ $0B0B
 184+ 6612
 185+ 6612              ; -- game limts
 186+ 6612              MaxNumberOfStars	equ 11
 187+ 6612              ConsoleRefreshInterval  equ 5
 188+ 6612              MaxJunkStation      equ 3
 189+ 6612              MaxJunkFreeSpace    equ 5
 190+ 6612              WarpCoolDownPeriod  equ 90
 191+ 6612
 192+ 6612              ShipTypeSize		equ	32 			;??????? just a guess for now
 193+ 6612              ShipSST				equ 4			; its a space station
 194+ 6612              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 195+ 6612              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 196+ 6612              ShipCountMax		equ	2			; For now just 2 ships to debug
 197+ 6612              LineLimitPerShip	equ 70			; Max lines per ship
 198+ 6612              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 199+ 6612              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 200+ 6612
 201+ 6612              ; Memory page managment	(Refers to a memory slot as a place to access data)
 202+ 6612              ShipDataSlot		equ	6			; this may move into rom swap out space later
 203+ 6612              UniverseObjectSlot	equ	7
 204+ 6612
 205+ 6612              KeyForwardsView		equ	$20
 206+ 6612              ; Game specific equates
 207+ 6612              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 208+ 6612              WarpSequenceCount   equ 50
 209+ 6612
 210+ 6612              ;...Game Colour Mapping
 211+ 6612              L2DustColour        equ L2ColourGREY_1
 212+ 6612              L2SunScannerBright  equ 252
 213+ 6612              L2SunScanner        equ 180
 214+ 6612              L2DebrisColour      equ L2ColourYELLOW_1
 215+ 6612
 216+ 6612
 217+ 6612              ; Ship Data
 218+ 6612              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 219+ 6612              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 220+ 6612              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 221+ 6612              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 222+ 6612              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 223+ 6612              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 224+ 6612              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 225+ 6612              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 226+ 6612              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 227+ 6612              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 228+ 6612              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 229+ 6612              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 230+ 6612              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 231+ 6612              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 232+ 6612              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 233+ 6612              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 234+ 6612              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 235+ 6612              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 236+ 6612              ;;;;00 00			 EQUW 0     \ type 18 is
 237+ 6612              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 238+ 6612              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 239+ 6612              ;;;;00 00			 EQUW 0     \ type 21 is
 240+ 6612              ;;;;00 00			 EQUW 0     \ type 22 is
 241+ 6612              ;;;;00 00			 EQUW 0     \ type 23 is
 242+ 6612              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 243+ 6612              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 244+ 6612              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 245+ 6612              ;;;;00 00			 EQUW 0     \ type 27 is
 246+ 6612              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 247+ 6612              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 248+ 6612              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 249+ 6612              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 250+ 6612              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 251+ 6612              ;;;;			\ NEWB examples
 252+ 6612              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 253+ 6612              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 254+ 6612              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 255+ 6612              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 256+ 6612              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 257+ 6612
# file closed: ../../Variables/constant_equates.asm
 712  6612                  INCLUDE "../../Variables/general_variables.asm"
# file opened: ../../Variables/general_variables.asm
   1+ 6612                  IFNDEF LASER_V2
   2+ 6612                  DEFINE  LASER_V2    1
   3+ 6612                  ENDIF
   4+ 6612              ; Debugging data
   5+ 6612 00 00 00...  failureDiag DS  10              ; 10 bytes to log data before a failure
   6+ 661C
   7+ 661C              LogFailure:     MACRO messageAddress
   8+ 661C ~                            ld      hl,messageAddress
   9+ 661C ~                            ld      de,failureDiag
  10+ 661C ~                            ld      bc,10
  11+ 661C ~                            ldir
  12+ 661C                              ENDM
  13+ 661C              ;-- Memory management variables
  14+ 661C 00 00 00...  SaveMMU0Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  15+ 6621 00 00 00...  SaveMMU6Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  16+ 6626 00 00 00...  SaveMMU7Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  17+ 662B              ;-- Note these are not counters but initialised to memory locations to simplify code
  18+ 662B              ;-- Point to the next free memory location to write to
  19+ 662B 1C 66        SaveMMU0QueueHead:      DW      SaveMMU0Queue       ; Current last saved MMU Entry
  20+ 662D 21 66        SaveMMU6QueueHead:      DW      SaveMMU6Queue       ; Current last saved MMU Entry
  21+ 662F 26 66        SaveMMU7QueueHead:      DW      SaveMMU7Queue       ; Current last saved MMU Entry
  22+ 6631
  23+ 6631 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  24+ 6633 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  25+ 6635              ; Variables to simulate 6502 registers until code fixed
  26+ 6635              ; These must be here in this order as reading Y and X can then be a 16 bit read
  27+ 6635 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  28+ 6636 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  29+ 6637 00           regA		DB	0
  30+ 6638
  31+ 6638
  32+ 6638 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  33+ 6639 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  34+ 663B 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  35+ 663D
  36+ 663D
  37+ 663D
  38+ 663D              ;XX16		DS	16				; 16 byte Matrix
  39+ 663D
  40+ 663D              P0INWK							; page 0 & 46
  41+ 663D              p0INWK31						; page 0 & 65
  42+ 663D              P0INWK36						; PAGE 0 &6A
  43+ 663D
  44+ 663D 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  45+ 663E              LastNormalVisible	equ	XX4
  46+ 663E              varXX4              equ XX4
  47+ 663E
  48+ 663E
  49+ 663E
  50+ 663E 00           PATG		DB	0				; 6502 &03C9
  51+ 663F 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  52+ 6641
  53+ 6641
  54+ 6641              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  55+ 6641              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &F XX21-1,Y
  56+ 6641
  57+ 6641              ; Present System Variables
  58+ 6641
  59+ 6641 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  60+ 6642 20           RandomSeed1				DB	32	            ; 01
  61+ 6643 0C           RandomSeed2				DB	12			    ; 02
  62+ 6644 42           RandomSeed3				DB	66			    ; 03
  63+ 6645 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  64+ 6649 00           varT1					DB	0				; 06
  65+ 664A 00           SClo					DB 0				; 07
  66+ 664B 00           SChi					DB 0				; 08
  67+ 664C 00           varP					DB 0 				; 10	XX16+7
  68+ 664D 00           varPhi					DB 0 				; 11	XX16+8
  69+ 664E 00           varPhi2					DB 0 				; 12	XX16+9
  70+ 664F 00           varPhiSign              DB 0
  71+ 6650              varPp1                  equ varPhi
  72+ 6650              varPp2                  equ varPhi2
  73+ 6650              varPp3                  equ varPhiSign
  74+ 6650 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  75+ 6651 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  76+ 6652              UnivPointer				equ	UnivPointerLo
  77+ 6652 00           varV					DB 0				; 22                          XX0+4
  78+ 6653 00           varVHi					DB 0				; 23                          XX0+5
  79+ 6654 00           varXXlo                 DB 0                ; 24
  80+ 6655 00           varXXHi                 DB 0                ; 25
  81+ 6656              varXX					equ	varXXlo
  82+ 6656 00           YYlo                    DB 0                ; 26
  83+ 6657 00           YYHi                    DB 0                ; 27
  84+ 6658              varYY					equ	YYlo
  85+ 6658              											;	28
  86+ 6658              											;	29
  87+ 6658              ;PlayerShipPositionData - Must be contiguous for setup
  88+ 6658 00           BETA 					DB	0               ; 2A        (pitch done)
  89+ 6659 00           JSTY                    DB  0               ; Joystick analog
  90+ 665A 00           BET1 					DB	0               ; 2B        lower7 magnitude
  91+ 665B 00           BET2                    DB  0               ;            climb sign
  92+ 665C 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  93+ 665D 1F           BET1MAXC                DB  31              ; max climb
  94+ 665E E1           BET1MAXD                DB  -31             ; max dive
  95+ 665F 00           XC						DB	0               ; 2C
  96+ 6660 00           YC						DB 	0               ; 2D
  97+ 6661              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  98+ 6661 00           ECMCountDown            DB  0
  99+ 6662 00           ECMLoopB                DB  0
 100+ 6663 00 00        JSTX                    DW  0               ;           Joystick analog value
 101+ 6665 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 102+ 6666 00           ALP1					DB 	0				; 31		ALP1	ABS Alpha
 103+ 6667 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 104+ 6668 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 105+ 6669 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 106+ 666A E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 107+ 666B
 108+ 666B
 109+ 666B              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
 110+ 666B              MAXMESSAGES             EQU 5
 111+ 666B              MESSAGETIMELIMIT        EQU 20
 112+ 666B              MESSAGESIZE             EQU 33
 113+ 666B              MESSAGELINE             EQU $0001
 114+ 666B
 115+ 666B 00           MessageCount            DB  0                ; used for enquing messages later
 116+ 666C 00           MessageCurrent          DB  0
 117+ 666D 05 00        MessageIndex            DW  MAXMESSAGES
 118+ 666F 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 119+ 6714 05           MessageTimeout          DB  MAXMESSAGES
 120+ 6715 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 121+ 673A
 122+ 673A              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 123+ 673A              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 124+ 673A              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 125+ 673A 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 126+ 673B              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 127+ 673B
 128+ 673B
 129+ 673B 00           QQ17					DB	0				;   72
 130+ 673C 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 131+ 673D 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 132+ 673E 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 133+ 673F 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 134+ 6740 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 135+ 6741 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 136+ 6742 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 137+ 6743 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 138+ 6744 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 139+ 6745
 140+ 6745 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 141+ 6746 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 142+ 6747 00           DELT4Lo					DB 	0				; 7E
 143+ 6748 00           DELT4Hi					DB 	0				; 7F
 144+ 6749              DELTA4                  equ                 DELT4Lo
 145+ 6749
 146+ 6749              ; SoundFX Variables -------------------------------------------------------------------------------------------
 147+ 6749              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 148+ 6749 FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 149+ 674A 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 150+ 674B
 151+ 674B
 152+ 674B              ; Not thise must be in this order else 16 bit fetches will fail
 153+ 674B 00           varU                    DB  0               ;   80
 154+ 674C 00           varQ					DB  0 				;	81
 155+ 674D 00           varR					DB  0 				;	82
 156+ 674E 00           varS					DB  0 				;	83
 157+ 674F              varRS                   equ varR
 158+ 674F
 159+ 674F 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 160+ 6751
 161+ 6751 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 162+ 6752 00           YSAV                    DB  0               ; 85
 163+ 6753 00           XX17					DB	0				; 86
 164+ 6754              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 165+ 6754              varXX17                 equ  XX17
 166+ 6754 00           ScreenChanged           DB  0
 167+ 6755 00           ScreenIndex             DB  0
 168+ 6756 00 00        ScreenIndexTablePointer DW  0
 169+ 6758 00           InvertedYAxis           DB  0
 170+ 6759 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 171+ 675A              											; Bit 7 Set  ShortRangeChart    $80
 172+ 675A              											; Bit 6 Set  Galactic Chart     $40
 173+ 675A              											; Bit 5 Set  Market Place       $20
 174+ 675A              											; Bit 4 Set  Status Screen      $10
 175+ 675A              											; Bit 3 Set  Display Inventory  $08
 176+ 675A                                                          ; Bit 2 Set  Planet Data        $04
 177+ 675A                                                          ; View bit combinations if the ones above not matched
 178+ 675A                                                          ; bits 1 0
 179+ 675A                                                          ;      1 1  Front view , i.e. $03
 180+ 675A                                                          ;      1 0  Aft View          $02
 181+ 675A                                                          ;      0 1  Left View         $01
 182+ 675A                                                          ;      0 0  Right view        $00
 183+ 675A              											; Bit 0 Set  Data On System
 184+ 675A              											; 0  Space View (Not a menu)
 185+ 675A 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 186+ 675B 00           XX13                    DB  0               ;   89
 187+ 675C 00           TYPE					DB	0				; 8C used for ship type in drawing
 188+ 675D              ;Docked flag = 00 = in free space
 189+ 675D              ;              FF = Docked
 190+ 675D              ;              FE = transition
 191+ 675D              ;              FD = Setup open space and transition to not docked
 192+ 675D              ;              FC = Hyperspace manimation
 193+ 675D              ;              FB = Hyperspace complete
 194+ 675D 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 195+ 675E 00           varCNT                  DB  0               ; 93
 196+ 675F
 197+ 675F 00           varK					DB	0				; 40
 198+ 6760 00           varKp1					DB	0				; 41
 199+ 6761 00           varKp2					DB	0				; 42
 200+ 6762 00           varKp3					DB	0				; 43
 201+ 6763
 202+ 6763 00           varK2                   DB  0               ; 9B
 203+ 6764 00           varK2p1                 DB  0               ; 9C K2 plus 1
 204+ 6765 00           varK2p2                 DB  0               ; 9D K2 plus 2
 205+ 6766 00           varK2p3                 DB  0               ; 9E K2 plus 3
 206+ 6767
 207+ 6767 00           Point                   DB  0               ; 9F      POINT
 208+ 6768
 209+ 6768 00           varT					DB	0				; D1
 210+ 6769 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 211+ 676A
 212+ 676A 00 00 00...  varVector9ByteWork      DS  9
 213+ 6773
 214+ 6773 00 00 00 00  varK3					DS	4				; D2
 215+ 6777 00           varK3p2					DB	0				; 42
 216+ 6778 00           varK3p3					DB	0				; 43
 217+ 6779              varK3p1					equ varK3+1			; D3
 218+ 6779 00 00 00 00  varK4					DS	4				; E0
 219+ 677D              varK4p1					equ varK4+1			; D3
 220+ 677D 00 00 00...  varK5                   DS  6
 221+ 6783              varK5p2                 equ varK5+2
 222+ 6783 00 00 00...  varK6                   DS  6
 223+ 6789              varK6p2                 equ varK6+2
 224+ 6789              ;Heap
 225+ 6789
 226+ 6789 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 227+ 678B 00 00 00...  HeapData				DS	50
 228+ 67BD              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 229+ 67BD              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 230+ 67BD              ; i.e. a list of programmed missiles in universe slot list code
 231+ 67BD 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 232+ 67C4              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 233+ 67C4              ;  #&5 Does J reverse both joystick channels
 234+ 67C4              ;  #&4 Does Y reverse joystick Y channel			03CB
 235+ 67C4              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 236+ 67C4              ;  #&3 Does F toggle flashing information			03CA
 237+ 67C4              ;  #&1 Does A toggle keyboard auto-recentering ?
 238+ 67C4              ;  #&0 Caps-lock toggles keyboard flight damping
 239+ 67C4
 240+ 67C4              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 241+ 67C4 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 242+ 67C9 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 243+ 67D9 00           AlienItemsAvaliability  DB	0				; 039D
 244+ 67DA 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 245+ 67DB 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 246+ 67DC 00 00 00...  WorkingSeeds			DS	6
 247+ 67E2 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 248+ 67E8 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 249+ 67EE 00           PresentSystemX			DB	0				; System we are currently in
 250+ 67EF 00           PresentSystemY			DB  0				; System we are currently in
 251+ 67F0 00           TargetSystemX			DB	0				; System we are targeting for jump
 252+ 67F1 00           TargetSystemY			DB	0				; System we are targeting for jump
 253+ 67F2              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 254+ 67F2 00           GovPresentSystem		DB	0				; 03AE Govenment
 255+ 67F3 00           TekPresentSystem		DB	0				; 03AF Technology
 256+ 67F4 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 257+ 67F5 00           ExtraVesselsCounter     DB  0
 258+ 67F6 00           JunkCount				DB  0				; $033E
 259+ 67F7 00           AsteroidCount           DB  0               ; Not used as yet
 260+ 67F8 00           TransporterCount        DB  0
 261+ 67F9 00           CopCount                DB  0
 262+ 67FA 00           PirateCount             DB  0
 263+ 67FB              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 264+ 67FB 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 265+ 67FC 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 266+ 67FD 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 267+ 67FE 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 268+ 6800 00           CurrentRank             DB  0   			;
 269+ 6801 00           MarketPrice				DB	0				; 03AA QQ24
 270+ 6802 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 271+ 6803 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 272+ 6804 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 273+ 6805 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 274+ 6807              											; this is ship lines stack pointer so may be redundant with paging
 275+ 6807              											; LS = line stack so we will have one for now to remove later
 276+ 6807              ; - no longer used, holding here intil its safe to delte
 277+ 6807 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 278+ 6808 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 279+ 6809              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 280+ 6809              ; - no longer used, holding here intil its safe to delte
 281+ 6809
 282+ 6809 00           DisplayEcononmy			DB	0				; 03B8
 283+ 680A 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 284+ 680B 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 285+ 680C 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 286+ 680E 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 287+ 6810 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 288+ 6812 00 00        DisplayRadius			DW	0
 289+ 6814              ; --- Used in creation of sun and planet and working out ship AI for travel direction ---------------------------------------------------
 290+ 6814 00 00 00     ParentPlanetX           DS  3               ; used when spawining space station to determine origin
 291+ 6817 00 00 00     ParentPlanetY           DS  3               ; provisioned for 24 bit values
 292+ 681A 00 00 00     ParentPlanetZ           DS  3               ; probably later on make station position an equate to planet
 293+ 681D 00 00 00     PlanetXPos              DS  3               ; .
 294+ 6820 00 00 00     PlanetYPos              DS  3               ; .
 295+ 6823 00 00 00     PlanetZPos              DS  3               ; .
 296+ 6826 00 00 00     PlanetType              DS  3               ; .
 297+ 6829 00 00 00     SunXPos                 DS  3               ; .
 298+ 682C 00 00 00     SunYPos                 DS  3               ; .
 299+ 682F 00 00 00     SunZPos                 DS  3               ; .
 300+ 6832 00 00 00     StationXPos             DS  3               ; .
 301+ 6835 00 00 00     StationYPos             DS  3               ; .
 302+ 6838 00 00 00     StationZPos             DS  3               ; .
 303+ 683B 00 00        DirectionVectorX        DS  2               ; Direction vector from one point to another
 304+ 683D 00 00        DirectionVectorY        DS  2               ; .
 305+ 683F 00 00        DirectionVectorZ        DS  2               ; .
 306+ 6841              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 307+ 6841 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 308+ 6842 00 00        MissileXPos             DW      0
 309+ 6844 00           MissileXSgn             DB      0
 310+ 6845 00 00        MissileYPos             DW      0
 311+ 6847 00           MissileYSgn             DB      0
 312+ 6848 00 00        MissileZPos             DW      0
 313+ 684A 00           MissileZSgn             DB      0
 314+ 684B 00 00        CurrentTargetXpos       DS      2
 315+ 684D 00 00        CurrentTargetXsgn       DS      2
 316+ 684F 00 00        CurrentTargetYpos       DS      2
 317+ 6851 00 00        CurrentTargetYsgn       DS      2
 318+ 6853 00 00        CurrentTargetZpos       DS      2
 319+ 6855 00 00        CurrentTargetZsgn       DS      2
 320+ 6857 00 00        TargetVectorXpos        DS      2
 321+ 6859 00           TargetVectorXsgn        DS      1
 322+ 685A 00 00        TargetVectorYpos        DS      2
 323+ 685C 00 00        TargetVectorYsgn        DS      2
 324+ 685E 00 00        TargetVectorZpos        DS      2
 325+ 6860 00 00        TargetVectorZsgn        DS      2
 326+ 6862 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 327+ 6863 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 328+ 6864 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 329+ 6865 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 330+ 6866              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 331+ 6866 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 332+ 686C 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 333+ 6872 00 00 00...  ShipClassId             DS 6
 334+ 6878              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 335+ 6878 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 336+ 688E 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 337+ 68D0 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 338+ 68E6 00           varStarX                DB 0
 339+ 68E7 00           varStarY                DB 0
 340+ 68E8 00 00 00...  varDustX                DS MaxNumberOfStars *2
 341+ 68FE 00 00 00...  varDustY                DS MaxNumberOfStars *2
 342+ 6914 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 343+ 692A              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 344+ 692A 00           DockedFlag				DB	0				; 8E -
 345+ 692B 00           GamePaused              DB  0
 346+ 692C 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 347+ 692D 00           SelectedUniverseSlot    DB  0
 348+ 692E 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 349+ 692F 00           ShipBlastCheckCounter   DB  0
 350+ 6930 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 351+ 6931 00           OuterHyperCount			DB 	0				; 2E QQ22
 352+ 6932 00           WarpCooldown            DB  0
 353+ 6933 00           EventCounter            DB  0
 354+ 6934 00           HyperCircle             DB  0
 355+ 6935 00           MissJumpFlag            DB  0
 356+ 6936 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 357+ 6937 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 358+ 6938 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 359+ 6939 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 360+ 693A 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 361+ 693B 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 362+ 693C              UniverseSlotListSize    equ	12
 363+ 693C 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 364+ 6948 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 365+ 6954              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 366+ 6954 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 367+ 6955 00           ConsoleRedrawFlag       DB  0
 368+ 6956 00           TextInputMode           DB  0
 369+ 6957 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 370+ 6958                                                          ; 7    6    5    4     3    2        1    0
 371+ 6958                                                          ; Up   Down Left Right Home Recentre
 372+ 6958 00           FireLaserPressed        DB  0
 373+ 6959 00           WarpPressed             DB  0
 374+ 695A 00           CompassColor			DB	0				; 03C5
 375+ 695B 00           SoundToggle				DB	0				; 03C6
 376+ 695C 00           KeyboardRecenterToggle	DB	0				; 03C8
 377+ 695D 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 378+ 695E 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 379+ 695F 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 380+ 6960 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 381+ 6961 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 382+ 6962 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 383+ 6963
 384+ 6963              ; Working Data
 385+ 6963
 386+ 6963              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 387+ 6963              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 388+ 6963              ; $0925 =	EQUW page9+37* 1
 389+ 6963              ; $094A =	EQUW page9+37* 2
 390+ 6963              ; $096F =	EQUW page9+37* 3
 391+ 6963              ; $0994 =	EQUW page9+37* 4
 392+ 6963              ; $09B9 =	EQUW page9+37* 5
 393+ 6963              ; $09DE =	EQUW page9+37* 6
 394+ 6963              ; $0A03 =	EQUW page9+37* 7
 395+ 6963              ; $0A28 =	EQUW page9+37* 8
 396+ 6963              ; $0A4D =	EQUW page9+37* 9
 397+ 6963              ; $0A72 =	EQUW page9+37*10
 398+ 6963              ; $0A97 =	EQUW page9+37*11
 399+ 6963              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 400+ 6963
 401+ 6963
 402+ 6963
 403+ 6963              ; 0b00 is start address of data to save
 404+ 6963              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 405+ 6963              											; Bit mask XXXX10XX - Thargoid plan mission
 406+ 6963
 407+ 6963 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 408+ 6964
 409+ 6964 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 410+ 6966 00 00        CommanderLoadAddress	DW	0				;0C03
 411+ 6968 00 00        LengthOfFile			DW	0				;0C0B
 412+ 696A 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 413+ 696C
 414+ 696C 00 00 00...  EdgesBuffer				DS 50
 415+ 699E              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 416+ 699E              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 417+ 699E
 418+ 699E 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 419+ 69E4              ShipLineStackTop		equ $ - ShipLineStack
 420+ 69E4
 421+ 69E4              ; No longer needed
 422+ 69E4              ;LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 423+ 69E4              ; LSX vector overlaps with LSO
 424+ 69E4              ;LSX2					DS	$C0				; &0EC0	    \ LSX2 bline buffer size?
 425+ 69E4              ;LSY2					DS  $C)	           	; &0F0E	    \ LSY2
 426+ 69E4
 427+ 69E4              ; -- Player Runtime Data
 428+ 69E4 00           GunTemperature          DB  0
 429+ 69E5 00           CabinTemperature        DB  0
 430+ 69E6 00           PlayerForwardSheild0	DB	0 ; ?????
 431+ 69E7 00           PlayerForwardSheild1    DB	0
 432+ 69E8 00           PlayerForwardSheild2    DB	0
 433+ 69E9 00           ForeShield				DB	0				; These three must be contiguous
 434+ 69EA 00           AftShield				DB	0				; .
 435+ 69EB 00           PlayerEnergy			DB	0				; and in this order
 436+ 69EC 00           CompassX				DB	0				; 03A8
 437+ 69ED 00           CompassY				DB	0				; 03A9
 438+ 69EE              ; Simplification of missile targetting
 439+ 69EE              ; $FF no missile targettting enabled
 440+ 69EE              ; $FE missile targetting, no target selected
 441+ 69EE              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 442+ 69EE              ; bit 7 clear launch at selected target in lower nibble
 443+ 69EE 00           MissileTargettingFlag   DB  0
 444+ 69EF              ;;MissileTarget			DB  0				; 45
 445+ 69EF              ;;MissileLaunchFlag       DB  0
 446+ 69EF 00 00 00...  CommanderName           DS  15
 447+ 69FE 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 448+ 69FF 00           BadnessStatus           DB  0
 449+ 6A00              ;note rapidly changing views could reset these so need to consider it in an array
 450+ 6A00              ; LaserType
 451+ 6A00              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 452+ 6A00              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 453+ 6A00              ; LaserPulseRest                          ; time before pulse count resets to 0
 454+ 6A00              ; LaserDamageOutput                       ; amount of damage for a laser hit
 455+ 6A00              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 456+ 6A00              ; LaserHeat                               ; amount of heat generated
 457+ 6A00              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 458+ 6A00              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 459+ 6A00              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 460+ 6A00              ; LaserTechLevel                          ; minimum tech level system to buy from
 461+ 6A00              ; need to add copy table routines
 462+ 6A00 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 463+ 6A01 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 464+ 6A02 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 465+ 6A03 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 466+ 6A04 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 467+ 6A05 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 468+ 6A06
 469+ 6A06                  IFDEF LASER_V2
 470+ 6A06 00           LaserBeamOn             DB  0
 471+ 6A07 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 472+ 6A08 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 473+ 6A09 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 474+ 6A0A                  ENDIF
 475+ 6A0A 00           CurrLaserBurstRate      DB  0
 476+ 6A0B 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 477+ 6A0C 00           CurrLaserDamageOutput   DB  0
 478+ 6A0D 00           CurrLaserEnergyDrain    DB  0
 479+ 6A0E 00           CurrLaserHeat           DB  0
 480+ 6A0F 00           CurrLaserDurability     DB  0
 481+ 6A10 00           CurrLaserDurabilityAmount DB  0
 482+ 6A11
 483+ 6A11              ; Count down timers must be aligned like this to work
 484+ 6A11 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 485+ 6A12 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 486+ 6A13 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 487+ 6A14 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 488+ 6A15
 489+ 6A15              ; -- Input variables
 490+ 6A15 00           JoystickX				DB	0				; 034C JSTX
 491+ 6A16 00           JoystickY				DB	0				; 034D JSTY
 492+ 6A17 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 493+ 6A18 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 494+ 6A19
 495+ 6A19              ; -- Console drawing data
 496+ 6A19              FShieldStart            equ $8410
 497+ 6A19              AShieldStart            equ $8D10
 498+ 6A19              FuelStart               equ $9410
 499+ 6A19
 500+ 6A19              EnergyBar4Start         equ $A5D5
 501+ 6A19              EnergyBar3Start         equ $ADD5
 502+ 6A19              EnergyBar2Start         equ $B5D5
 503+ 6A19              EnergyBar1Start         equ $BDD5
 504+ 6A19              ; 70 /2 = 35 values
 505+ 6A19              ;                            0                             1                             2                             3
 506+ 6A19              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 507+ 6A19 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 507+ 6A1D 04 04 05 06
 507+ 6A21 06 07 08 09
 507+ 6A25 0A 0A 0B 0C
 507+ 6A29 0D 0E 0E 0F
 507+ 6A2D 10 10 11 13
 507+ 6A31 14 15 15 16
 507+ 6A35 17 18 19 1A
 507+ 6A39 1B 1C 1E 1F
 507+ 6A3D 1F
 508+ 6A3E              SpeedoStart             equ $84D1
 509+ 6A3E              ;                            0                             1                             2                             3                             4
 510+ 6A3E              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 511+ 6A3E 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 511+ 6A42 04 04 05 06
 511+ 6A46 06 07 08 09
 511+ 6A4A 0A 0A 0B 0C
 511+ 6A4E 0D 0E 0E 0F
 511+ 6A52 10 10 11 12
 511+ 6A56 13 14 14 15
 511+ 6A5A 16 17 18 18
 511+ 6A5E 19 1A 1A 1B
 511+ 6A62 1C 1C 1D 1E
 511+ 6A66 1F
 512+ 6A67
 513+ 6A67              DialMiddleXPos          equ $E1
 514+ 6A67              RollMiddle              equ $8CE0
 515+ 6A67              PitchMiddle             equ $94E0
 516+ 6A67
 517+ 6A67
 518+ 6A67
 519+ 6A67
 520+ 6A67
# file closed: ../../Variables/general_variables.asm
 713  6A67                  ;NCLUDE "../../Variables/general_variablesRoutines.asm"
 714  6A67                  INCLUDE "../../Variables/UniverseSlotRoutines.asm"
# file opened: ../../Variables/UniverseSlotRoutines.asm
   1+ 6A67              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 6A67 AF           ClearSlotCount:         xor     a
   3+ 6A68 21 3C 69                             ld      hl,UniverseSlotList
   4+ 6A6B 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 6A6D 77           .fillLoop:              ld      (hl),a
   6+ 6A6E 23                                   inc     hl
   7+ 6A6F 10 FC                                djnz    .fillLoop
   8+ 6A71 C9                                   ret
   9+ 6A72
  10+ 6A72              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 6A72              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 6A72              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 6A72              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 6A72              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 6A72              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 6A72              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 6A72              ; DOE NOT WORK                         cp      $FF
  18+ 6A72              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 6A72              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 6A72              ; DOE NOT WORK                         inc     hl
  21+ 6A72              ; DOE NOT WORK                         ld      (hl),1
  22+ 6A72              ; DOE NOT WORK                         inc     hl
  23+ 6A72              ; DOE NOT WORK                         inc     hl
  24+ 6A72              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 6A72              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 6A72 C9                                   ret
  27+ 6A73              ; Wipe all items
  28+ 6A73 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 6A75 21 3C 69                             ld      hl,UniverseSlotList
  30+ 6A78 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 6A7A 77           .fillLoop:              ld      (hl),a
  32+ 6A7B 23                                   inc     hl
  33+ 6A7C 10 FC                                djnz    .fillLoop
  34+ 6A7E C9                                   ret
  35+ 6A7F
  36+ 6A7F 21 3C 69     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 6A82 36 02                                ld      (hl),ShipTypeStation
  38+ 6A84 21 48 69                             ld      hl,UniverseSlotType
  39+ 6A87 36 02                                ld      (hl),ShipTypeStation
  40+ 6A89 C9                                   ret
  41+ 6A8A
  42+ 6A8A 21 3C 69     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 6A8D ED 31                                add     hl,a
  44+ 6A8F 70                                   ld      (hl),b
  45+ 6A90 C9                                   ret
  46+ 6A91
  47+ 6A91 21 48 69     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 6A94 ED 31                                add     hl,a
  49+ 6A96 70                                   ld      (hl),b
  50+ 6A97 C9                                   ret
  51+ 6A98
  52+ 6A98              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 6A98 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 6A99 0E 00                                ld      c,0
  55+ 6A9B 21 3C 69                             ld      hl,UniverseSlotList
  56+ 6A9E 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 6AA0 79           .fillLoop:              ld      a,c
  58+ 6AA1 BA                                   cp      d
  59+ 6AA2 28 03                                jr      z,.SkipSlot
  60+ 6AA4 3E FF                                ld      a,$FF
  61+ 6AA6 77                                   ld      (hl),a
  62+ 6AA7 23           .SkipSlot:              inc     hl
  63+ 6AA8 23                                   inc     hl
  64+ 6AA9 10 F5                                djnz    .fillLoop
  65+ 6AAB C9                                   ret
  66+ 6AAC
  67+ 6AAC 21 3C 69     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 6AAF ED 31                                add     hl,a
  69+ 6AB1 36 FF                                ld      (hl),$FF
  70+ 6AB3 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 6AB5 ED 31                                add     hl,a
  72+ 6AB7 36 FF                                ld      (hl),$FF
  73+ 6AB9 C9                                   ret
  74+ 6ABA
  75+ 6ABA              ; Space Station will always be slot 0
  76+ 6ABA 21 49 69     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 6ABD 0E 01                                ld      c,1
  78+ 6ABF 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 6AC1 7E           .NextShip:              ld      a,(hl)
  80+ 6AC2 FE 03                                cp      ShipTypeJunk
  81+ 6AC4 CA D5 6A                             jp      z,.ProcessJunk
  82+ 6AC7 FE 04                                cp      ShipTypeScoopable
  83+ 6AC9 CA D5 6A                             jp      z,.ProcessJunk
  84+ 6ACC 23           .DoneIteration:         inc     hl
  85+ 6ACD 0C                                   inc     c
  86+ 6ACE 10 F1                                djnz    .NextShip
  87+ 6AD0                                      ClearJunkCount
  87+ 6AD0             >                        ZeroA
  87+ 6AD0 AF          >                        xor a
  87+ 6AD1 32 F6 67    >                        ld      (JunkCount),a
  88+ 6AD4 C9                                   ret
  89+ 6AD5 79           .ProcessJunk:           ld      a,c
  90+ 6AD6 CD AC 6A                             call    ClearSlotA
  91+ 6AD9 C3 CC 6A                             jp      .DoneIteration
  92+ 6ADC
  93+ 6ADC
  94+ 6ADC 21 49 69     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 6ADF 0E 01                                ld      c,1
  96+ 6AE1 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 6AE3 7E           .NextShip:              ld      a,(hl)
  98+ 6AE4 FE 03                                cp      ShipTypeJunk
  99+ 6AE6 CA F3 6A                             jp      z,.ProcessJunk
 100+ 6AE9 FE 04                                cp      ShipTypeScoopable
 101+ 6AEB CA F3 6A                             jp      z,.ProcessJunk
 102+ 6AEE 23           .DoneIteration:         inc     hl
 103+ 6AEF 0C                                   inc     c
 104+ 6AF0 10 F1                                djnz    .NextShip
 105+ 6AF2 C9                                   ret
 106+ 6AF3 79           .ProcessJunk:           ld      a,c
 107+ 6AF4                                      MMUSelectUniverseA
 107+ 6AF4 C6 46       >                     add    a,BankUNIVDATA0
 107+ 6AF6 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 6AF9 CD 8C C6                             call    WarpOffset
 109+ 6AFC C3 EE 6A                             jp      .DoneIteration
 110+ 6AFF
 111+ 6AFF 21 49 69     AreShipsPresent:        ld      hl,UniverseSlotType+1
 112+ 6B02 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 113+ 6B04 7E           .NextShip:              ld      a,(hl)
 114+ 6B05 FE 00                                cp      ShipTypeNormal
 115+ 6B07                                      ClearCarryFlag
 115+ 6B07 B7          >                        or a
 116+ 6B08 C8                                   ret     z
 117+ 6B09 23                                   inc     hl
 118+ 6B0A 10 F8                                djnz    .NextShip
 119+ 6B0C                                      SetCarryFlag
 119+ 6B0C 37          >                        scf
 120+ 6B0D C9                                   ret
 121+ 6B0E
 122+ 6B0E 21 3C 69     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 123+ 6B11                                      ClearCarryFlag
 123+ 6B11 B7          >                        or a
 124+ 6B12 7E           .SearchLoop:            ld      a,(hl)
 125+ 6B13                                      ReturnIfAEqNusng ShipTypeStation
 125+ 6B13 FE 02       >                        cp      ShipTypeStation
 125+ 6B15 C8          >                        ret     z
 126+ 6B16                                      SetCarryFlag
 126+ 6B16 37          >                        scf
 127+ 6B17 C9                                   ret
 128+ 6B18
 129+ 6B18 21 3C 69     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 130+ 6B1B ED 31                                add     hl,a
 131+ 6B1D 7E                                   ld      a,(hl)
 132+ 6B1E C9                                   ret
 133+ 6B1F
 134+ 6B1F 21 3D 69     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 135+ 6B22 7E                                   ld      a,(hl)
 136+ 6B23 C9                                   ret
 137+ 6B24              ;-----------------------------------------------------------------------------
 138+ 6B24              ;-- Search the slot list for a free slot and return the result in c register.
 139+ 6B24              ;-- Carry is clear if successful, else carry is set if all slots full
 140+ 6B24              ;-- uses hl, bc, a
 141+ 6B24 21 3C 69     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 142+ 6B27 06 0C                                ld      b, UniverseSlotListSize
 143+ 6B29 0E 00                                ld      c, 0
 144+ 6B2B 7E           .SearchLoop:            ld      a,(hl)
 145+ 6B2C                                      JumpIfAEqNusng $FF, .FoundSlot
 145+ 6B2C FE FF       >                        cp     $FF
 145+ 6B2E CA 37 6B    >                        jp      z,.FoundSlot
 146+ 6B31 0C                                   inc     c
 147+ 6B32 23                                   inc     hl
 148+ 6B33 10 F6                                djnz    .SearchLoop
 149+ 6B35                                      SetCarryFlag
 149+ 6B35 37          >                        scf
 150+ 6B36 C9                                   ret
 151+ 6B37              .FoundSlot:             ClearCarryFlag
 151+ 6B37 B7          >                        or a
 152+ 6B38 C9                                   ret
 153+ 6B39
 154+ 6B39              ;-----------------------------------------------------------------------------
 155+ 6B39              ;-- calls FindNextFreeSlotInC and returns the result in a and c registers.
 156+ 6B39              ;-- Carry is clear if successful, else carry is set if all slots full
 157+ 6B39              ;-- uses hl, bc, a
 158+ 6B39 CD 24 6B     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 159+ 6B3C 79                                   ld      a,c
 160+ 6B3D C9                                   ret
 161+ 6B3E
# file closed: ../../Variables/UniverseSlotRoutines.asm
 715  6B3E                  ;NCLUDE "../../Variables/EquipmentVariables.asm"
 716  6B3E                  INCLUDE "../../Variables/random_number.asm"
# file opened: ../../Variables/random_number.asm
   1+ 6B3E              ; dea = random number
   2+ 6B3E CD 4F 6B     doRandomS24:            call    doRandom
   3+ 6B41 57                                   ld      d,a
   4+ 6B42 E5                                   push    hl
   5+ 6B43 CD 4F 6B                             call    doRandom
   6+ 6B46 E1                                   pop     hl
   7+ 6B47 5F                                   ld      e,a
   8+ 6B48 E5                                   push    hl
   9+ 6B49 CD 4F 6B                             call    doRandom
  10+ 6B4C E1                                   pop     hl
  11+ 6B4D C9                                   ret
  12+ 6B4E
  13+ 6B4E              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
  14+ 6B4E              doRND2:
  15+ 6B4E A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
  16+ 6B4F              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
  17+ 6B4F              ; "doRandom, Random Seed update, new value in A & C)"
  18+ 6B4F              ; uses a 'a c h l registers, de not affected
  19+ 6B4F              doRND:                  ;exx                                     ; protect bc,de,hl
  20+ 6B4F 3A 41 66                             ld		a,(RandomSeed)					; Get Seed 0
  21+ 6B52 CB 17                                rl		a								; Rotate L including carry
  22+ 6B54 4F                                   ld		c,a								; c =  double lo
  23+ 6B55 21 43 66     .AddSeed2:              ld		hl,RandomSeed2
  24+ 6B58 8E                                   adc		a,(hl)							; RAND+2
  25+ 6B59 32 41 66     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  26+ 6B5C 08           .SaveBtoSeed2:          ex		af,af'
  27+ 6B5D 79                                   ld		a,c
  28+ 6B5E 32 43 66                             ld		(RandomSeed2),a
  29+ 6B61 08                                   ex		af,af'
  30+ 6B62 3A 42 66                             ld		a,(RandomSeed1)
  31+ 6B65 4F                                   ld		c,a								; C = Seed1
  32+ 6B66 21 44 66     .AddSeed3:              ld		hl,RandomSeed3
  33+ 6B69 8E                                   adc		a,(hl)
  34+ 6B6A 32 42 66                             ld		(RandomSeed1),a
  35+ 6B6D 08                                   ex		af,af'
  36+ 6B6E 79                                   ld		a,c
  37+ 6B6F 32 44 66                             ld		(RandomSeed3),a
  38+ 6B72 08                                   ex		af,af'
  39+ 6B73                                      ;exx                                     ; get bc,de,hl back
  40+ 6B73 C9                                   ret
  41+ 6B74
  42+ 6B74 21 41 66     saveRandomSeeds:        ld      hl,RandomSeed
  43+ 6B77 11 45 66                             ld      de,RandomSeedSave
  44+ 6B7A 01 04 00                             ld      bc,4
  45+ 6B7D ED A0                                ldi
  46+ 6B7F ED A0                                ldi
  47+ 6B81 ED A0                                ldi
  48+ 6B83 ED A0                                ldi
  49+ 6B85 C9                                   ret
  50+ 6B86
  51+ 6B86 21 45 66     restoreRandomSeeds:     ld      hl,RandomSeedSave
  52+ 6B89 11 41 66                             ld      de,RandomSeed
  53+ 6B8C 01 04 00                             ld      bc,4
  54+ 6B8F ED A0                                ldi
  55+ 6B91 ED A0                                ldi
  56+ 6B93 ED A0                                ldi
  57+ 6B95 ED A0                                ldi
  58+ 6B97 C9                                   ret
# file closed: ../../Variables/random_number.asm
 717  6B98              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 718  6B98              ; Include all maths libraries to test assembly
 719  6B98                  ;INCLUDE "../../Maths/asm_add.asm"
 720  6B98                  ;INCLUDE "../../Maths/asm_subtract.asm"
 721  6B98                  ;NCLUDE "../../Maths/DIVD3B2.asm"
 722  6B98                  INCLUDE "../../Maths/asm_multiply.asm"
# file opened: ../../Maths/asm_multiply.asm
   1+ 6B98              AequAdivDmul96Unsg:     JumpIfAGTENusng d, .Unity    			; if A >= Q then return with a 1 (unity i.e. 96)
   1+ 6B98 BA          >                        cp     d
   1+ 6B99 D2 B4 6B    >                        jp		nc,.Unity
   2+ 6B9C 06 FF                                ld          b,%11111111                 ; Loop through 8 bits
   3+ 6B9E CB 27        .DivLoop:               sla         a                           ; shift a left
   4+ 6BA0                                      JumpIfALTNusng d, .skipSubtract         ; if a < q skip the following
   4+ 6BA0 BA          >                        cp      d
   4+ 6BA1 DA A5 6B    >                        jp		c, .skipSubtract
   5+ 6BA4 92                                   sub         d
   6+ 6BA5              .skipSubtract:          FlipCarryFlag
   6+ 6BA5 3F          >                        ccf
   7+ 6BA6 CB 10                                rl          b
   8+ 6BA8 38 F4                                jr          c,.DivLoop
   9+ 6BAA 78                                   ld          a,b
  10+ 6BAB CB 3F                                srl         a                  			; t = t /4
  11+ 6BAD CB 3F                                srl			a							; result / 8
  12+ 6BAF 47                                   ld          b,a
  13+ 6BB0 CB 3F                                srl         a
  14+ 6BB2 80                                   add			a,b							; result /8 + result /4
  15+ 6BB3 C9                                   ret
  16+ 6BB4 3E 60        .Unity:                 ld			a,$60	    				; unity
  17+ 6BB6 C9                                   ret
  18+ 6BB7
  19+ 6BB7
  20+ 6BB7              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
  21+ 6BB7 2A 4D 67                             ld  hl,(varRS)
  22+ 6BBA 3A 4C 67                             ld  a,(varQ)
  23+ 6BBD C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
  24+ 6BBF 11 00 00                             ld  de,0        ; de = XY
  25+ 6BC2 47                                   ld  b,a         ; b = Q
  26+ 6BC3                                      ShiftHLRight1
  26+ 6BC3 CB 3C       >			   srl h
  26+ 6BC5 CB 1D       >			   rr  l
  27+ 6BC7 CB 20                                sla b
  28+ 6BC9 30 03                                jr  nc,.LL126
  29+ 6BCB EB           .LL125:                 ex de,hl
  30+ 6BCC 19                                   add hl,de
  31+ 6BCD EB                                   ex  de,hl       ; de = de + rs
  32+ 6BCE              .LL126:                 ShiftHLRight1
  32+ 6BCE CB 3C       >			   srl h
  32+ 6BD0 CB 1D       >			   rr  l
  33+ 6BD2 CB 20                                sla b
  34+ 6BD4 38 F5                                jr      c,.LL125
  35+ 6BD6 20 F6                                jr      nz,.LL126
  36+ 6BD8 EB                                   ex      de,hl   ; hl = result
  37+ 6BD9 D1 C1                                pop     bc,,de
  38+ 6BDB C9                                   ret
  39+ 6BDC
  40+ 6BDC              ; FMLTU - A = A * Q / 256
  41+ 6BDC 57           AequAmulQdiv256usgn:    ld      d,a
  42+ 6BDD 3A 4C 67                             ld      a,(varQ)
  43+ 6BE0 5F                                   ld      e,a
  44+ 6BE1              asm_defmutl:
  45+ 6BE1              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
  46+ 6BE1 ED 30        AequDmulEdiv256usgn:    mul     de
  47+ 6BE3 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  48+ 6BE4 C9                                   ret
  49+ 6BE5
  50+ 6BE5
  51+ 6BE5              ; muliptiply S7d ny S7e signed
  52+ 6BE5              ; used A and B registers
  53+ 6BE5              ; result in DE
  54+ 6BE5 7A           mulDbyESigned:          ld      a,d
  55+ 6BE6 AB                                   xor     e
  56+ 6BE7 E6 80                                and     SignOnly8Bit
  57+ 6BE9 47                                   ld      b,a
  58+ 6BEA 7A                                   ld      a,d
  59+ 6BEB E6 7F                                and     SignMask8Bit
  60+ 6BED 57                                   ld      d,a
  61+ 6BEE 7B                                   ld      a,e
  62+ 6BEF E6 7F                                and     SignMask8Bit
  63+ 6BF1 5F                                   ld      e,a
  64+ 6BF2 ED 30                                mul     de
  65+ 6BF4 7A                                   ld      a,d
  66+ 6BF5 B0                                   or      b
  67+ 6BF6 57                                   ld      d,a
  68+ 6BF7 C9                                   ret
  69+ 6BF8
  70+ 6BF8
  71+ 6BF8
  72+ 6BF8              MacroDEEquQmulASigned:  MACRO
  73+ 6BF8 ~                                    ld      d,a                         ; save a into d
  74+ 6BF8 ~                                    ld      a,(varQ)
  75+ 6BF8 ~                                    ld      e,a
  76+ 6BF8 ~                                    xor     d                           ; a = a xor var Q
  77+ 6BF8 ~                                    and     SignOnly8Bit
  78+ 6BF8 ~                                    ld      b,a                         ; b = sign of a xor q
  79+ 6BF8 ~                                    ld      a,d                         ; d = abs d (or a reg)
  80+ 6BF8 ~                                    and     SignMask8Bit
  81+ 6BF8 ~                                    ld      d,a
  82+ 6BF8 ~                                    ld      a,e                         ; e = abs e (or varQ)
  83+ 6BF8 ~                                    and     SignMask8Bit
  84+ 6BF8 ~                                    ld      e,a
  85+ 6BF8 ~                                    mul                                 ; de = a * Q
  86+ 6BF8 ~                                    ld      a,d
  87+ 6BF8 ~                                    or      b                           ; de = a * Q leading sign bit
  88+ 6BF8 ~                                    ld      d,a
  89+ 6BF8                                      ENDM
  90+ 6BF8
  91+ 6BF8
  92+ 6BF8
  93+ 6BF8                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  94+ 6BF8              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  94+ 6BF8 57          >                        ld      d,a                         ; save a into d
  94+ 6BF9 3A 4C 67    >                        ld      a,(varQ)
  94+ 6BFC 5F          >                        ld      e,a
  94+ 6BFD AA          >                        xor     d                           ; a = a xor var Q
  94+ 6BFE E6 80       >                        and     SignOnly8Bit
  94+ 6C00 47          >                        ld      b,a                         ; b = sign of a xor q
  94+ 6C01 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  94+ 6C02 E6 7F       >                        and     SignMask8Bit
  94+ 6C04 57          >                        ld      d,a
  94+ 6C05 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  94+ 6C06 E6 7F       >                        and     SignMask8Bit
  94+ 6C08 5F          >                        ld      e,a
  94+ 6C09 ED 30       >                        mul                                 ; de = a * Q
  94+ 6C0B 7A          >                        ld      a,d
  94+ 6C0C B0          >                        or      b                           ; de = a * Q leading sign bit
  94+ 6C0D 57          >                        ld      d,a
  95+ 6C0E 2A 4D 67                             ld		hl,(varR)
  96+ 6C11 CD 39 6C                             call	madXAAddHLDESigned
  97+ 6C14 EB                                   ex      de,hl                       ; de = R.S + DE
  98+ 6C15                                      ClearCarryFlag
  98+ 6C15 B7          >                        or a
  99+ 6C16 DD 6B                                ld      ixl,e
 100+ 6C18 7A                                   ld      a,d
 101+ 6C19 C9                                   ret
 102+ 6C1A
 103+ 6C1A              madDEequQmulAaddRS:     MacroDEEquQmulASigned
 103+ 6C1A 57          >                        ld      d,a                         ; save a into d
 103+ 6C1B 3A 4C 67    >                        ld      a,(varQ)
 103+ 6C1E 5F          >                        ld      e,a
 103+ 6C1F AA          >                        xor     d                           ; a = a xor var Q
 103+ 6C20 E6 80       >                        and     SignOnly8Bit
 103+ 6C22 47          >                        ld      b,a                         ; b = sign of a xor q
 103+ 6C23 7A          >                        ld      a,d                         ; d = abs d (or a reg)
 103+ 6C24 E6 7F       >                        and     SignMask8Bit
 103+ 6C26 57          >                        ld      d,a
 103+ 6C27 7B          >                        ld      a,e                         ; e = abs e (or varQ)
 103+ 6C28 E6 7F       >                        and     SignMask8Bit
 103+ 6C2A 5F          >                        ld      e,a
 103+ 6C2B ED 30       >                        mul                                 ; de = a * Q
 103+ 6C2D 7A          >                        ld      a,d
 103+ 6C2E B0          >                        or      b                           ; de = a * Q leading sign bit
 103+ 6C2F 57          >                        ld      d,a
 104+ 6C30 2A 4D 67                             ld		hl,(varR)
 105+ 6C33 CD 39 6C                             call	madXAAddHLDESigned
 106+ 6C36 EB                                   ex      de,hl                       ; de = R.S + DE
 107+ 6C37                                      ClearCarryFlag
 107+ 6C37 B7          >                        or a
 108+ 6C38 C9                                   ret
 109+ 6C39
 110+ 6C39 7C           madXAAddHLDESigned:     ld      a,h
 111+ 6C3A E6 80                                and     SignOnly8Bit
 112+ 6C3C 47                                   ld      b,a                         ;save sign bit in b
 113+ 6C3D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 114+ 6C3E                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 114+ 6C3E FA 56 6C    >                        jp		m, .ADDHLDEOppSGN
 115+ 6C41 78           .ADDHLDESameSigns:       ld      a,b
 116+ 6C42 B2                                   or      d
 117+ 6C43                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 117+ 6C43 FA 48 6C    >                        jp		m, .ADDHLDESameNeg
 118+ 6C46 19                                   add     hl,de
 119+ 6C47 C9                                   ret
 120+ 6C48 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 121+ 6C49 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 122+ 6C4B 67                                   ld      h,a
 123+ 6C4C 7A                                   ld      a,d
 124+ 6C4D E6 7F                                and     SignMask8Bit
 125+ 6C4F 57                                   ld      d,a
 126+ 6C50 19                                   add     hl,de
 127+ 6C51 3E 80                                ld      a,SignOnly8Bit
 128+ 6C53 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 129+ 6C54 67                                   ld      h,a
 130+ 6C55 C9                                   ret
 131+ 6C56 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 132+ 6C57 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 133+ 6C59 67                                   ld      h,a
 134+ 6C5A 7A                                   ld      a,d
 135+ 6C5B E6 7F                                and     SignMask8Bit
 136+ 6C5D 57                                   ld      d,a
 137+ 6C5E B7                                   or      a
 138+ 6C5F ED 52                                sbc     hl,de
 139+ 6C61 38 04                                jr      c,.ADDHLDEOppInvert
 140+ 6C63 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 141+ 6C64 B4                                   or      h
 142+ 6C65 67                                   ld      h,a                         ; set the previou sign value
 143+ 6C66 C9                                   ret
 144+ 6C67              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 144+ 6C67 AF          >                    xor a
 144+ 6C68 95          >                    sub l
 144+ 6C69 6F          >                    ld l,a
 144+ 6C6A 9F          >                    sbc a,a
 144+ 6C6B 94          >                    sub h
 144+ 6C6C 67          >                    ld h,a
 145+ 6C6D 78                                   ld      a,b
 146+ 6C6E EE 80                                xor     SignOnly8Bit                ; flip sign bit
 147+ 6C70 B4                                   or      h
 148+ 6C71 67                                   ld      h,a                         ; recover sign
 149+ 6C72 C9                                   ret
 150+ 6C73
 151+ 6C73
 152+ 6C73                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 153+ 6C73                  ;
 154+ 6C73                  ; enter : hl = 16-bit multiplier   = x
 155+ 6C73                  ;          e =  8-bit multiplicand = y
 156+ 6C73                  ;
 157+ 6C73                  ; exit  : ahl = 24-bit product
 158+ 6C73                  ;         carry reset
 159+ 6C73                  ;
 160+ 6C73                  ; uses  : af, de, hl
 161+ 6C73 54           AHLequHLmulE:           ld d,h                      ; xh
 162+ 6C74 63                                   ld h,e                      ; yl
 163+ 6C75 ED 30                                mul de                      ; xh*yl
 164+ 6C77 EB                                   ex de,hl
 165+ 6C78 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 166+ 6C7A
 167+ 6C7A 7A                                   ld  a,d                     ; sum products
 168+ 6C7B 85                                   add a,l
 169+ 6C7C 57                                   ld  d,a
 170+ 6C7D EB                                   ex de,hl
 171+ 6C7E
 172+ 6C7E 7A                                   ld  a,d
 173+ 6C7F CE 00                                adc a,0
 174+ 6C81 C9                                   ret
 175+ 6C82
 176+ 6C82 54           HLE0quH0mulE:           ld      d,h                 ; .
 177+ 6C83 63                                   ld      h,e                 ; .
 178+ 6C84 ED 30                                mul     de                  ; de = xh * yl
 179+ 6C86 EB                                   ex      de,hl
 180+ 6C87 C9                                   ret
 181+ 6C88
 182+ 6C88                 ; multiplication of two 16-bit numbers into a 32-bit product
 183+ 6C88                 ;
 184+ 6C88                 ; enter : de = 16-bit multiplicand = y
 185+ 6C88                 ;         hl = 16-bit multiplicand = x
 186+ 6C88                 ;
 187+ 6C88                 ; exit  : dehl = 32-bit product
 188+ 6C88                 ;         carry reset
 189+ 6C88                 ;
 190+ 6C88                 ; uses  : af, bc, de, hl
 191+ 6C88
 192+ 6C88
 193+ 6C88
 194+ 6C88 45           DEHLequDEmulHL:         ld b,l                      ; x0
 195+ 6C89 4B                                   ld c,e                      ; y0
 196+ 6C8A 5D                                   ld e,l                      ; x0
 197+ 6C8B 6A                                   ld l,d
 198+ 6C8C E5                                   push hl                     ; x1 y1
 199+ 6C8D 69                                   ld l,c                      ; y0
 200+ 6C8E              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 201+ 6C8E ED 30                                mul de                      ; y1*x0
 202+ 6C90 EB                                   ex de,hl
 203+ 6C91 ED 30                                mul de                      ; x1*y0
 204+ 6C93
 205+ 6C93 AF                                   xor a                       ; zero A
 206+ 6C94 19                                   add hl,de                   ; sum cross products p2 p1
 207+ 6C95 8F                                   adc a,a                     ; capture carry p3
 208+ 6C96
 209+ 6C96 59                                   ld e,c                      ; x0
 210+ 6C97 50                                   ld d,b                      ; y0
 211+ 6C98 ED 30                                mul de                      ; y0*x0
 212+ 6C9A
 213+ 6C9A 47                                   ld b,a                      ; carry from cross products
 214+ 6C9B 4C                                   ld c,h                      ; LSB of MSW from cross products
 215+ 6C9C
 216+ 6C9C 7A                                   ld a,d
 217+ 6C9D 85                                   add a,l
 218+ 6C9E 67                                   ld h,a
 219+ 6C9F 6B                                   ld l,e                      ; LSW in HL p1 p0
 220+ 6CA0
 221+ 6CA0 D1                                   pop de
 222+ 6CA1 ED 30                                mul de                      ; x1*y1
 223+ 6CA3
 224+ 6CA3 EB                                   ex de,hl
 225+ 6CA4 ED 4A                                adc hl,bc
 226+ 6CA6 EB                                   ex de,hl                    ; de = final MSW
 227+ 6CA7
 228+ 6CA7 C9                                   ret
 229+ 6CA8
 230+ 6CA8              ; multiplication of two 16-bit numbers into a 16-bit product
 231+ 6CA8              ; enter : de = 16-bit multiplicand
 232+ 6CA8              ;         hl = 16-bit multiplicand
 233+ 6CA8              ; exit  : hl = 16-bit product
 234+ 6CA8              ;         carry reset
 235+ 6CA8              ; maths is
 236+ 6CA8              ;        hl = y , de= x
 237+ 6CA8              ;        hl = xhi,ylo + (yhigh * xlow)
 238+ 6CA8              ;        hl = yhih & xlo + x
 239+ 6CA8              ;
 240+ 6CA8              ;
 241+ 6CA8              ; uses  : af, bc, de, hl
 242+ 6CA8 C5           mulDEbyHL:              push    bc
 243+ 6CA9 7A                                   ld a,d                      ; a = xh
 244+ 6CAA 54                                   ld d,h                      ; d = yh
 245+ 6CAB 67                                   ld h,a                      ; h = xh
 246+ 6CAC 4B                                   ld c,e                      ; c = xl
 247+ 6CAD 45                                   ld b,l                      ; b = yl
 248+ 6CAE ED 30                                mul                         ; yh * yl
 249+ 6CB0 EB                                   ex de,hl
 250+ 6CB1 ED 30                                mul                         ; xh * yl
 251+ 6CB3 19                                   add hl,de                   ; add cross products
 252+ 6CB4 59                                   ld e,c
 253+ 6CB5 50                                   ld d,b
 254+ 6CB6 ED 30                                mul                         ; yl * xl
 255+ 6CB8 7D                                   ld a,l                      ; cross products lsb
 256+ 6CB9 82                                   add a,d                     ; add to msb final
 257+ 6CBA 67                                   ld h,a
 258+ 6CBB 6B                                   ld l,e                      ; hl = final
 259+ 6CBC                                      ; 83 cycles, 19 bytes
 260+ 6CBC AF                                   xor a                       ; reset carry
 261+ 6CBD C1                                   pop     bc
 262+ 6CBE C9                                   ret
 263+ 6CBF
 264+ 6CBF              ; multiplication of 16-bit numbers by 8-bit product
 265+ 6CBF              ; enter : de = 16-bit multiplicand
 266+ 6CBF              ;          l = 8-bit multiplicand
 267+ 6CBF              ; exit  : hl = 16-bit product
 268+ 6CBF              ;         carry reset
 269+ 6CBF              ; maths is
 270+ 6CBF              ;        hl = y , de= x
 271+ 6CBF              ;        hl = xhi,ylo + (yhigh * xlow)
 272+ 6CBF              ;        hl = yhih & xlo + x
 273+ 6CBF              ;
 274+ 6CBF              ;
 275+ 6CBF              ; uses  : af, bc, de, hl
 276+ 6CBF C5 E5 D5     mulDEbyLSigned:         push    bc,,hl,,de
 277+ 6CC2 7A                                   ld a,d                      ; a = xh
 278+ 6CC3 16 00                                ld d,0                      ; d = yh = 0
 279+ 6CC5 67                                   ld h,a                      ; h = xh
 280+ 6CC6 4B                                   ld c,e                      ; c = xl
 281+ 6CC7 45                                   ld b,l                      ; b = yl
 282+ 6CC8              ;                        mul                         ; yh * xl which will always be 0
 283+ 6CC8 EB                                   ex de,hl                    ; de = xh yl
 284+ 6CC9 ED 30                                mul                         ; xh * yl
 285+ 6CCB EB                                   ex de,hl                    ; hl = xh * yl
 286+ 6CCC              ;                        add hl,de                   ; add cross products
 287+ 6CCC 59                                   ld e,c                      ; de = yl xl
 288+ 6CCD 50                                   ld d,b                      ; .
 289+ 6CCE ED 30                                mul                         ; yl * xl
 290+ 6CD0 7D                                   ld a,l                      ; cross products lsb
 291+ 6CD1 82                                   add a,d                     ; add to msb final
 292+ 6CD2 67                                   ld h,a
 293+ 6CD3 6B                                   ld l,e                      ; hl = final
 294+ 6CD4 AF                                   xor a                       ; reset carry
 295+ 6CD5 C1                                   pop     bc                  ; get de for sign
 296+ 6CD6 78                                   ld      a,b
 297+ 6CD7 C1                                   pop     bc                  ; get hl for sign
 298+ 6CD8 A8                                   xor     b
 299+ 6CD9 E6 80                                and     $80                 ; so we now have the sign bit
 300+ 6CDB B4                                   or      h                   ; so set the sign
 301+ 6CDC 67                                   ld      h,a                 ; .
 302+ 6CDD C1                                   pop     bc                  ; clear up stack
 303+ 6CDE C9                                   ret
 304+ 6CDF
 305+ 6CDF                  DISPLAY "TODO: TEST"
 306+ 6CDF 7A           mulDEbyHLSigned:        ld  a,d                     ; de = abs de
 307+ 6CE0 47                                   ld  b,a                     ;
 308+ 6CE1 E6 7F                                and     $7F                 ; .
 309+ 6CE3 57                                   ld  d,a                     ; .
 310+ 6CE4 7C                                   ld  a,h                     ; hl = abs hl
 311+ 6CE5 4F                                   ld  c,a                     ; .
 312+ 6CE6 E6 7F                                and     $7F                 ; .
 313+ 6CE8 67                                   ld      h,a                 ; .
 314+ 6CE9 79                                   ld      a,c                 ; ixl = target sign of de * hl
 315+ 6CEA AA                                   xor     d                   ;
 316+ 6CEB E6 80                                and     $80                 ;
 317+ 6CED DD 6F                                ld      ixl,a               ;
 318+ 6CEF CD A8 6C                             call    mulDEbyHL           ; calculate ABS(DE) * ABS(HL)
 319+ 6CF2 7C                                   ld      a,h                 ; recover sign bit
 320+ 6CF3 DD B5                                or      ixl
 321+ 6CF5 67                                   ld      h,a
 322+ 6CF6 C9                                   ret
 323+ 6CF7
 324+ 6CF7              ; CHL = multiplicand D = multiplier
 325+ 6CF7              ; DCHL = CHL * D
 326+ 6CF7 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 327+ 6CF8 AC                                   xor     h                   ; xor with h to get resultant sign
 328+ 6CF9 E6 80                                and     SignOnly8Bit        ; .
 329+ 6CFB FD 67                                ld      iyh,a               ; iyh = copy of sign
 330+ 6CFD 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 331+ 6CFE E6 7F                                and     SignMask8Bit        ; .
 332+ 6D00 4F                                   ld      c,a                 ; .
 333+ 6D01 7A                                   ld      a,d                 ; d = ABS D
 334+ 6D02 E6 7F                                and     SignMask8Bit        ; .
 335+ 6D04              ; At this point CHL = ABS (HLE), A = ABS(D)
 336+ 6D04 57           .mul1:                  ld      d,a                 ; first do D * L
 337+ 6D05 5D                                   ld      e,l                 ; .
 338+ 6D06 ED 30                                mul     de                  ; DE = L * D
 339+ 6D08 08                                   ex      af,af'              ; save multiplier
 340+ 6D09 6B                                   ld      l,e                 ; L = p0
 341+ 6D0A 7A                                   ld      a,d                 ; carry byte
 342+ 6D0B 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 343+ 6D0C 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 344+ 6D0D 57                                   ld      d,a                 ; and multiplier
 345+ 6D0E ED 30                                mul     de                  ; now its D & L
 346+ 6D10 08                                   ex      af,af'              ; get back carry byte with flags
 347+ 6D11 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 348+ 6D12 67                                   ld      h,a                 ; h = P1
 349+ 6D13 7A                                   ld      a,d                 ; a = carry byte
 350+ 6D14 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 351+ 6D15 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 352+ 6D16 57                                   ld      d,a                 ;
 353+ 6D17 ED 30                                mul     de                  ;
 354+ 6D19 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 355+ 6D1A 8B                                   adc     a,e                 ;
 356+ 6D1B FD B4                                or      iyh                 ; recover saved resultant sign
 357+ 6D1D 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 358+ 6D1E C9                                   ret
 359+ 6D1F
 360+ 6D1F              ;  CHL = 53456 D = 1E
 361+ 6D1F              ;  56 * 1E = A14 L = 14 carry = 0A
 362+ 6D1F              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 363+ 6D1F              ;  5  * 1E = 096 C = 96 + 6 = 9C
 364+ 6D1F              ;  CHL = 9C2214
 365+ 6D1F              ;mult3
 366+ 6D1F              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 367+ 6D1F              ; HLE = multiplicand D = multiplier
 368+ 6D1F              ; tested by mathstestsun.asm all passed
 369+ 6D1F              ; Algorithm
 370+ 6D1F              ; AC =  E * D   (save carry)         H    L    E
 371+ 6D1F              ; DE =  L * D                                  D
 372+ 6D1F              ;  L =  A + E + carry                         E*D (lo)
 373+ 6D1F              ; DE =  H * D                             L*D+ ^ (hi)
 374+ 6D1F              ;  E =  A + E + carry                H*D (lo) + carry
 375+ 6D1F              ;
 376+ 6D1F              ;
 377+ 6D1F 7A           mulHLbyDE2sc:           ld      a,d
 378+ 6D20 AC                                   xor     h
 379+ 6D21 E6 80                                and     SignOnly8Bit
 380+ 6D23 FD 67                                ld      iyh,a               ; save sign bit for result
 381+ 6D25 7C                                   ld      a,h
 382+ 6D26 E6 80                                and     SignOnly8Bit
 383+ 6D28 28 06                                jr      z,.HLPositive
 384+ 6D2A              .HLNegative:            NegHL
 384+ 6D2A AF          >                    xor a
 384+ 6D2B 95          >                    sub l
 384+ 6D2C 6F          >                    ld l,a
 384+ 6D2D 9F          >                    sbc a,a
 384+ 6D2E 94          >                    sub h
 384+ 6D2F 67          >                    ld h,a
 385+ 6D30 7A           .HLPositive:            ld      a,d
 386+ 6D31 E6 80                                and     SignOnly8Bit
 387+ 6D33 28 06                                jr      z,.DEPositive
 388+ 6D35              .DENegative:            NegDE
 388+ 6D35 AF          >                    xor a
 388+ 6D36 93          >                    sub e
 388+ 6D37 5F          >                    ld e,a
 388+ 6D38 9F          >                    sbc a,a
 388+ 6D39 92          >                    sub d
 388+ 6D3A 57          >                    ld d,a
 389+ 6D3B CD A8 6C     .DEPositive:            call    mulDEbyHL           ; now do calc
 390+ 6D3E FD 7C                                ld      a,iyh
 391+ 6D40 A7                                   and     a                   ; if its 0 then we are good
 392+ 6D41 C8                                   ret     z
 393+ 6D42
 394+ 6D42
 395+ 6D42              ; Mulitply HLE by D leading Sign
 396+ 6D42              ; used IY A BC
 397+ 6D42              ; result it loaded to DELC
 398+ 6D42 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 399+ 6D43 AC                                   xor     h                   ; xor with h to get resultant sign
 400+ 6D44 E6 80                                and     SignOnly8Bit        ; .
 401+ 6D46 FD 67                                ld      iyh,a               ; iyh = copy of sign
 402+ 6D48 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 403+ 6D49 E6 7F                                and     SignMask8Bit        ; .
 404+ 6D4B 67                                   ld      h,a                 ; .
 405+ 6D4C 7A                                   ld      a,d                 ; d = ABS D
 406+ 6D4D E6 7F                                and     SignMask8Bit        ; .
 407+ 6D4F 57                                   ld      d,a                 ; .
 408+ 6D50 B7           .testEitherSideZero:    or      a
 409+ 6D51 28 24                                jr      z,.ResultZero
 410+ 6D53 7C                                   ld      a,h
 411+ 6D54 B5                                   or      l
 412+ 6D55 B3                                   or      e
 413+ 6D56 28 1F                                jr      z,.ResultZero
 414+ 6D58              ; At this point HLE = ABS (HLE), A = ABS(D)
 415+ 6D58 42                                   ld      b,d                 ; save Quotient
 416+ 6D59 ED 30        .mul1:                  mul     de                  ; C = E * D
 417+ 6D5B 4B                                   ld      c,e                 ; C = p0
 418+ 6D5C FD 6A                                ld      iyl,d               ; save carry (p1)
 419+ 6D5E 5D           .mul2:                  ld      e,l                 ; L = L * D
 420+ 6D5F 50                                   ld      d,b                 ; .
 421+ 6D60 ED 30                                mul     de                  ; .
 422+ 6D62 FD 7D                                ld      a,iyl               ; get back p1
 423+ 6D64 83           .carrybyte1:            add     a,e                 ; L = L + E
 424+ 6D65 6F                                   ld      l,a                 ; .
 425+ 6D66 FD 6A                                ld      iyl,d               ; save new carry byte
 426+ 6D68 5C           .mul3:                  ld      e,h                 ; E = H * D
 427+ 6D69 50                                   ld      d,b                 ; .
 428+ 6D6A ED 30                                mul     de                  ; .
 429+ 6D6C FD 7D                                ld      a,iyl
 430+ 6D6E 8B                                   adc     a,e                 ; .
 431+ 6D6F 5F                                   ld      e,a                 ; .
 432+ 6D70 7A           .ItsNotZero:            ld      a,d                 ;
 433+ 6D71 CE 00                                adc     a,0                 ; final carry bit
 434+ 6D73 FD B4                                or      iyh                 ; bring back sign
 435+ 6D75 57                                   ld      d,a                 ; s = sign
 436+ 6D76 C9                                   ret
 437+ 6D77 11 00 00     .ResultZero:            ld      de,0
 438+ 6D7A                                      ZeroA
 438+ 6D7A AF          >                        xor a
 439+ 6D7B 4F                                   ld      c,a
 440+ 6D7C 6F                                   ld      l,a
 441+ 6D7D C9                                   ret
 442+ 6D7E
 443+ 6D7E              ;;;
 444+ 6D7E              ;;;
 445+ 6D7E              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 446+ 6D7E              ;;;                        xor     h                   ; xor with h to get resultant sign
 447+ 6D7E              ;;;                        and     SignOnly8Bit        ; .
 448+ 6D7E              ;;;                        ld      iyh,a               ; iyh = copy of sign
 449+ 6D7E              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 450+ 6D7E              ;;;                        and     SignMask8Bit        ; .
 451+ 6D7E              ;;;                        ld      h,a                 ; .
 452+ 6D7E              ;;;                        ld      a,d                 ; d = ABS D
 453+ 6D7E              ;;;                        and     SignMask8Bit        ; .
 454+ 6D7E              ;;;                        ld      d,a                 ; .
 455+ 6D7E              ;;;.testEitherSideZero:    or      a
 456+ 6D7E              ;;;                        jr      z,.ResultZero
 457+ 6D7E              ;;;                        ld      a,h
 458+ 6D7E              ;;;                        or      l
 459+ 6D7E              ;;;                        or      e
 460+ 6D7E              ;;;                        jr      z,.ResultZero
 461+ 6D7E              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 462+ 6D7E              ;;;.mul1:                  mul     de                  ; C = E * D
 463+ 6D7E              ;;;                        ex      af,af'              ; save mulitplier
 464+ 6D7E              ;;;                        ld      c,e                 ; C = p0
 465+ 6D7E              ;;;                        ld      a,d                 ; save carry (p1)
 466+ 6D7E              ;;;                        ex      af,af'              ; .
 467+ 6D7E              ;;;.mul2:                  ld      e,l                 ; L = L * D
 468+ 6D7E              ;;;                        ld      d,a                 ; .
 469+ 6D7E              ;;;                        mul     de                  ; .
 470+ 6D7E              ;;;                        ex      af,af'              ; .
 471+ 6D7E              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 472+ 6D7E              ;;;                        ld      l,a                 ; .
 473+ 6D7E              ;;;                        ld      a,d
 474+ 6D7E              ;;;                        ex      af,af'              ; save new carry byte
 475+ 6D7E              ;;;.mul3:                  ld      e,h                 ; E = H * D
 476+ 6D7E              ;;;                        ld      d,a                 ; .
 477+ 6D7E              ;;;                        mul     de                  ; .
 478+ 6D7E              ;;;                        ex      af,af'              ; .
 479+ 6D7E              ;;;                        adc     a,e                 ; .
 480+ 6D7E              ;;;                        ld      e,a                 ; .
 481+ 6D7E              ;;;.ItsNotZero:            ld      a,d                 ;
 482+ 6D7E              ;;;                        adc     a,0                 ; final carry bit
 483+ 6D7E              ;;;                        or      iyh                 ; bring back sign
 484+ 6D7E              ;;;                        ld      d,a                 ; s = sign
 485+ 6D7E              ;;;                        ret
 486+ 6D7E              ;;;.ResultZero:            ld      de,0
 487+ 6D7E              ;;;                        ZeroA
 488+ 6D7E              ;;;                        ld      c,a
 489+ 6D7E              ;;;                        ld      l,a
 490+ 6D7E              ;;;                        ret
 491+ 6D7E
 492+ 6D7E              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 493+ 6D7E              ; enter : de = 16-bit multiplicand
 494+ 6D7E              ;         hl = 16-bit multiplicand
 495+ 6D7E              ; exit  : hl = 16-bit product
 496+ 6D7E              ;         carry reset
 497+ 6D7E              ;
 498+ 6D7E              ; uses  : af, bc, de, hl
 499+ 6D7E 00           mulDEbyHLSignByte       DB      0
 500+ 6D7F AF           mulDEbyHLSgnTo2c:       xor     a
 501+ 6D80 32 7E 6D                             ld      (mulDEbyHLSignByte),a
 502+ 6D83 7A           .SignDE:                ld      a,d
 503+ 6D84 ED 27 80                             test    $80
 504+ 6D87 28 08                                jr      z,.SignHL
 505+ 6D89 E6 7F        .NegativeDE:            and     $7F
 506+ 6D8B 57                                   ld      d,a
 507+ 6D8C 3E 80                                ld      a,$80
 508+ 6D8E 32 7E 6D                             ld      (mulDEbyHLSignByte),a
 509+ 6D91 7C           .SignHL:                ld      a,h
 510+ 6D92 ED 27 80                             test    $80
 511+ 6D95 28 0B                                jr      z,.AbsoluteMultiply
 512+ 6D97 E6 7F        .NegativeHL:            and     $7F
 513+ 6D99 67                                   ld      h,a
 514+ 6D9A 3A 7E 6D                             ld      a,(mulDEbyHLSignByte)
 515+ 6D9D EE 80                                xor     $80
 516+ 6D9F 32 7E 6D                             ld      (mulDEbyHLSignByte),a
 517+ 6DA2 CD A8 6C     .AbsoluteMultiply:      call    mulDEbyHL
 518+ 6DA5 3A 7E 6D     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 519+ 6DA8 ED 27 80                             test    $80
 520+ 6DAB C8                                   ret     z
 521+ 6DAC AF           .Negateghl: 			xor 	a
 522+ 6DAD 95                                   sub 	l
 523+ 6DAE 6F                                   ld 		l,a
 524+ 6DAF 9F                                   sbc 	a,a
 525+ 6DB0 94                                   sub 	h
 526+ 6DB1 67                                   ld 		h,a
 527+ 6DB2 C9                                   ret
 528+ 6DB3
 529+ 6DB3 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 530+ 6DB4 32 7E 6D                             ld      (mulDEbyHLSignByte),a
 531+ 6DB7 7A           .SignDE:                ld      a,d
 532+ 6DB8 ED 27 80                             test    $80
 533+ 6DBB 28 08                                jr      z,.AbsoluteMultiply
 534+ 6DBD E6 7F        .NegativeDE:            and     $7F
 535+ 6DBF 57                                   ld      d,a
 536+ 6DC0 3E 80                                ld      a,$80
 537+ 6DC2 32 7E 6D                             ld      (mulDEbyHLSignByte),a
 538+ 6DC5 CD A8 6C     .AbsoluteMultiply:      call    mulDEbyHL
 539+ 6DC8 3A 7E 6D     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 540+ 6DCB ED 27 80                             test    $80
 541+ 6DCE C8                                   ret     z
 542+ 6DCF AF           .Negateghl:             xor 	a
 543+ 6DD0 95                                   sub 	l
 544+ 6DD1 6F                                   ld 		l,a
 545+ 6DD2 9F                                   sbc 	a,a
 546+ 6DD3 94                                   sub 	h
 547+ 6DD4 67                                   ld 		h,a
 548+ 6DD5 C9                                   ret
 549+ 6DD6
 550+ 6DD6
# file closed: ../../Maths/asm_multiply.asm
 723  6DD6                  INCLUDE "../../Maths/asm_square.asm"
# file opened: ../../Maths/asm_square.asm
   1+ 6DD6              ; "ASM_SQUA : TESTGOOD"
   2+ 6DD6              ; "AP = A^2 A = low,P = hi"
   3+ 6DD6
   4+ 6DD6              inline_squde: MACRO
   5+ 6DD6 ~            			ld	e,a
   6+ 6DD6 ~            			ld  d,a
   7+ 6DD6 ~            			mul
   8+ 6DD6              			ENDM
   9+ 6DD6
  10+ 6DD6              inline_squa: MACRO
  11+ 6DD6 ~            			ld	e,a
  12+ 6DD6 ~            			ld  d,a
  13+ 6DD6 ~            			mul
  14+ 6DD6 ~            			ld	a,e
  15+ 6DD6              			ENDM
  16+ 6DD6
# file closed: ../../Maths/asm_square.asm
 724  6DD6                  INCLUDE "../../Maths/asm_sine.asm"
# file opened: ../../Maths/asm_sine.asm
   1+ 6DD6              ;- MACROS
   2+ 6DD6              LookupSineAMacro:       MACRO
   3+ 6DD6 ~                                    ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   4+ 6DD6 ~                                    add     hl, a
   5+ 6DD6 ~                                    ld      a,(hl)
   6+ 6DD6                                      ENDM
   7+ 6DD6
   8+ 6DD6              ; Gets the sine of A from the lookup table into A
   9+ 6DD6              LookupSineA:            LookupSineAMacro
   9+ 6DD6 21 7F 6E    >                        ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   9+ 6DD9 ED 31       >                        add     hl, a
   9+ 6DDB 7E          >                        ld      a,(hl)
  10+ 6DDC C9                                   ret
  11+ 6DDD
# file closed: ../../Maths/asm_sine.asm
 725  6DDD                  INCLUDE "../../Maths/asm_sqrt.asm"
# file opened: ../../Maths/asm_sqrt.asm
   1+ 6DDD              ; "ASM SQRT : TESTGOOD"
   2+ 6DDD              ; "16-bit integer square root"
   3+ 6DDD              ; "call with de = number to square root"
   4+ 6DDD              ; "returns   hl = square root"
   5+ 6DDD              ; "corrupts  bc, de"
   6+ 6DDD              asm_sqrt:
   7+ 6DDD 01 00 80     	ld bc,$8000
   8+ 6DE0 61           	ld h,c
   9+ 6DE1 69           	ld l,c
  10+ 6DE2              .sqrloop:
  11+ 6DE2 CB 38        	srl b
  12+ 6DE4 CB 19        	rr c
  13+ 6DE6 09           	add hl,bc
  14+ 6DE7 EB           	ex de,hl
  15+ 6DE8 ED 52        	sbc hl,de
  16+ 6DEA 38 04        	jr c,.sqrbit
  17+ 6DEC EB           	ex de,hl
  18+ 6DED 09           	add hl,bc
  19+ 6DEE 18 05        	jr .sqrfi
  20+ 6DF0              .sqrbit:
  21+ 6DF0 19           	add hl,de
  22+ 6DF1 EB           	ex de,hl
  23+ 6DF2 B7           	or a
  24+ 6DF3 ED 42        	sbc hl,bc
  25+ 6DF5              .sqrfi:
  26+ 6DF5 CB 3C        	srl h
  27+ 6DF7 CB 1D        	rr l
  28+ 6DF9 CB 38        	srl b
  29+ 6DFB CB 19        	rr c
  30+ 6DFD 30 E3        	jr nc,.sqrloop
  31+ 6DFF C9           	ret
  32+ 6E00
  33+ 6E00
  34+ 6E00              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 6E00 3A 4C 67     	ld		a,(varQ)
  36+ 6E03 5F           	ld		e,a
  37+ 6E04 3A 4D 67     	ld		a,(varR)
  38+ 6E07 57           	ld		d,a
  39+ 6E08 CD DD 6D     	call	asm_sqrt
  40+ 6E0B 7D               ld      a,l
  41+ 6E0C 32 4C 67     	ld		(varQ),a
  42+ 6E0F C9           	ret
  43+ 6E10
# file closed: ../../Maths/asm_sqrt.asm
 726  6E10                  INCLUDE "../../Maths/asm_arctan.asm"
# file opened: ../../Maths/asm_arctan.asm
   1+ 6E10              ;Calculate A = arctan(P / Q)
   2+ 6E10              ; This finds the angle in the right-angled triangle where the opposite side to angle A is length P and the adjacent side to angle A has
   3+ 6E10              ; length Q, so:  tan(A) = P / Q
   4+ 6E10              ;
   5+ 6E10              ; The result in A is an integer representing the angle in radians. The routine returns values in the range 0 to 128,  (or 0 to PI radians).
   6+ 6E10 3A 4C 66     ARCTAN:                 ld      a,(varP)                    ; LDA P                  \ Set T1 = P EOR Q, which will have the sign of P * Q
   7+ 6E13 21 4C 67                             ld      hl,varQ                     ; EOR Q
   8+ 6E16 AE                                   xor     (hl)                        ; .
   9+ 6E17 32 49 66                             ld      (varT1),a                   ; STA T1
  10+ 6E1A 3A 4C 67                             ld      a,(varQ)                    ; LDA Q                  \ If Q = 0, jump to AR2 to return a right angle
  11+ 6E1D A7                                   and     a                           ; BEQ AR2
  12+ 6E1E CA 60 6E                             jp      z, .AR2                     ; .
  13+ 6E21 CB 27                                sla     a                           ; ASL A                  \ Set Q = |Q| * 2 (this is a quick way of clearing the
  14+ 6E23 32 4C 67                             ld      (varQ),a                    ; STA Q                  \ sign bit, and we don't need to shift right again as we only ever use this value in the division with |P| * 2, which we set next)
  15+ 6E26 3A 4C 66                             ld      a,(varP)                    ; LDA P                  \ Set A = |P| * 2
  16+ 6E29 CB 27                                sla     a                           ; ASL A
  17+ 6E2B 32 4C 66                             ld      (varP),a
  18+ 6E2E 21 4C 67                             ld      hl,varQ
  19+ 6E31 BE                                   cp      (hl)                        ; CMP Q                  \ If A >= Q, i.e. |P| > |Q|, jump to AR1 to swap P
  20+ 6E32 D2 44 6E                             jp      nc, .AR1                    ; BCS AR1                \ and Q around, so we can still use the lookup table
  21+ 6E35 CD 6C 6E                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table:  A = arctan(A / Q)  = arctan(|P / Q|)
  22+ 6E38                                      ClearCarryFlag                      ; SEC                    \ Set the C flag so the SBC instruction in AR3 will be correct, should we jump there
  22+ 6E38 B7          >                        or a
  23+ 6E39 4F           .AR4:                   ld      c,a                         ; as we have to use a we use c as a temp, we can't push af as we would loose flags on pop
  24+ 6E3A 3A 49 66                             ld      a,(varT1)                   ; LDX T1                 \ If T1 is negative, i.e. P and Q have different signs,
  25+ 6E3D 47                                   ld      b,a                         ; .
  26+ 6E3E A7                                   and     a                           ; BMI AR3                \ jump down to AR3 to return arctan(-|P / Q|)
  27+ 6E3F 79                                   ld      a,c                         ; .                      \ we need to get a back before jump
  28+ 6E40 FA 63 6E                             jp      m, .AR3                     ; .
  29+ 6E43 C9                                   ret                                 ; RTS                    \ Otherwise P and Q have the same sign, so our result is correct and we can return from the subroutine
  30+ 6E44              ; We want to calculate arctan(t) where |t| > 1, so we can use the calculation described in the documentation for the ACT table, i.e. 64 - arctan(1 / t)
  31+ 6E44              ; In the 6502 verion it works with A already being P but we will fetch it
  32+ 6E44 3A 4C 67     .AR1:                   ld      a,(varQ)                    ; LDX Q                  \ Swap the values in Q and P, using the fact that we
  33+ 6E47 47                                   ld      b,a                         ; .
  34+ 6E48 3A 4C 66                             ld      a,(varP)                    ; STA Q                  \ called AR1 with A = P
  35+ 6E4B 32 4C 67                             ld      (varQ),a                    ; .
  36+ 6E4E 78                                   ld      a,b                         ; TXA                    \ This also sets A = P (which now contains the original argument |Q|)
  37+ 6E4F 32 4C 66                             ld      (varP),a                    ; STX P                  \
  38+ 6E52 CD 6C 6E                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table: A = arctan(A / Q) = arctan(|Q / P|) = arctan(1 / |P / Q|)
  39+ 6E55 32 68 67                             ld      (varT),a                    ; STA T                  \ Set T = 64 - T, we use B as T (its not really that)
  40+ 6E58 47                                   ld      b,a                         ; its actually t = a, a = 64-a
  41+ 6E59 3E 40                                ld      a,64                        ; LDA #64 What is going on here is t = result
  42+ 6E5B                                      ClearCarryFlag                      ; SBC T                            a = 64- result
  42+ 6E5B B7          >                        or a
  43+ 6E5C 98                                   sbc     a,b                         ; .
  44+ 6E5D C3 39 6E                             jp      .AR4                        ; BCS AR4                \ Jump to AR4 to continue the calculation (this BCS is effectively a JMP as the subtraction will never underflow, as ARS1 returns values in the range 0-31)
  45+ 6E60              ; If we get here then Q = 0, so tan(A) = infinity and A is a right angle, or 0.25 of a circle. We allocate 255 to a full circle, so we should return 63 for a right angle
  46+ 6E60 3E 3F        .AR2:                   ld      a,63                        ; LDA #63                \ Set A to 63, to represent a right angle
  47+ 6E62 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  48+ 6E63              ; A contains arctan(|P / Q|) but P and Q have different signs, so we need to return arctan(-|P / Q|), using the calculation described in the documentation for the ACT table, i.e. 128 - A
  49+ 6E63 32 68 67     .AR3:                   ld      (varT),a
  50+ 6E66 47                                   ld      b,a                         ; STA T                  \ Set A = 128 - A, we use b as T
  51+ 6E67 3E 80                                ld      a,128                       ; LDA #128               \
  52+ 6E69                                      ClearCarryFlag                      ; SBC T                  \ The subtraction will work because we did a SEC before calling AR3
  52+ 6E69 B7          >                        or a
  53+ 6E6A 98                                   sbc     a,b
  54+ 6E6B C9                                   ret                                 ; RTS                    \ Return from the subroutine
  55+ 6E6C              ; This routine fetches arctan(A / Q) from the ACT table, so A will be set to an integer in the range 0 to 31 that represents an angle from 0 to 45 degrees (or 0 to \ PI / 4 radians)
  56+ 6E6C CD 2A 6F     ARS1:                   call    Amul256DivQ                 ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q
  57+ 6E6F 3A 4D 67                             ld      a,(varR)                    ; LDA R                  \ Set X = R / 8
  58+ 6E72 CB 3F                                srl     a                           ; LSR A                  \       = 32 * A / Q
  59+ 6E74 CB 3F                                srl     a                           ; LSR A                  \
  60+ 6E76 CB 3F                                srl     a                           ; LSR A                  \ so X has the value t * 32 where t = A / Q, which is
  61+ 6E78 21 9F 6E                             ld      hl,ACT                      ; TAX                    \ what we need to look up values in the ACT table
  62+ 6E7B ED 31                                add     hl,a                        ; LDA ACT,X              \ Fetch ACT+X from the ACT table into A, so now:
  63+ 6E7D 7E                                   ld      a,(hl)                      ;                        \   A = value in ACT + X = value in ACT + (32 * A / Q)= arctan(A / Q)
  64+ 6E7E C9                                   ret                                 ; RTS                    \ Return from the subroutine
  65+ 6E7F
  66+ 6E7F              ;;;arctan:										; .ARCTAN	\ -> &2A3C  \ A=TAN-1(P/Q) \ A=arctan (P/Q)  called from block E
  67+ 6E7F              ;;;		ld		a,(varP)					; a = var P
  68+ 6E7F              ;;;		ld		hl,varQ
  69+ 6E7F              ;;;		xor		(hl)						; a = var p XOR varQ
  70+ 6E7F              ;;;		ld		a,(varT1)					; \ T1	 \ quadrant info
  71+ 6E7F              ;;;		ld		c,a							; c = copy of T1
  72+ 6E7F              ;;;		ld		a,(hl)						; Q
  73+ 6E7F              ;;;		cp		0
  74+ 6E7F              ;;;		jr		z,.AR2						;  Q=0 so set angle to 63, pi/2
  75+ 6E7F              ;;;		ld		(varQ),a					; Q move to reg B?
  76+ 6E7F              ;;;		ld		d,a							; copy to reg d
  77+ 6E7F              ;;;		sla		a							; drop sign
  78+ 6E7F              ;;;		ld		a,(varP)					; P
  79+ 6E7F              ;;;		ld		e,a							; copy to reg e
  80+ 6E7F              ;;;		sla		a							; drop sign
  81+ 6E7F              ;;;		cp		d							; compare with b (unsigned varQ * 2)
  82+ 6E7F              ;;;		jr		nc, .ars1					; if q >  p then adjust  swop A and Q as A >= Q
  83+ 6E7F              ;;;		call	ars1						; \ ARS1 \ get Angle for A*32/Q from table.
  84+ 6E7F              ;;;		scf									; set carry flag
  85+ 6E7F              ;;;.ar4:										; sub o.k
  86+ 6E7F              ;;;		bit 	7,c							; is T1 (also in c) negative?
  87+ 6E7F              ;;;		jr		nz,.ar3						;  -ve quadrant
  88+ 6E7F              ;;;		ret
  89+ 6E7F              ;;;.ar1:										; swop A and Q entering here d = q and e = P
  90+ 6E7F              ;;;		ld		a,d							; a = varQ
  91+ 6E7F              ;;;		ld		d,e							; varQ = varP
  92+ 6E7F              ;;;		ld		e,a							; swap D and E around
  93+ 6E7F              ;;;		ld		(varP),a					; write to actual variables
  94+ 6E7F              ;;;		ld		a,d
  95+ 6E7F              ;;;		ld		(varQ),a					; write to actual variables
  96+ 6E7F              ;;;		call	.ars1
  97+ 6E7F              ;;;		ld		(varT),b
  98+ 6E7F              ;;;		ld		b,a							; B = T = angle
  99+ 6E7F              ;;;		ld		a,64						; next range of angle, pi/4 to pi/2
 100+ 6E7F              ;;;		sub		a,b							; a = 64 - T (or b)
 101+ 6E7F              ;;;		jr		nc,.ar4						;  sub o.k
 102+ 6E7F              ;;;.ar2:										; .AR2	\ set angle to 90 degrees
 103+ 6E7F              ;;;		ld 		a,&3F						;  #63
 104+ 6E7F              ;;;		ret
 105+ 6E7F              ;;;.ar3:										;.AR3	\ -ve quadrant
 106+ 6E7F              ;;;		ld		b,a							; b = T	= \ angle
 107+ 6E7F              ;;;		ld		a,ConstPi					; a = Pi
 108+ 6E7F              ;;;		sub		b,a							; A = 128-T, so now covering range pi/2 to pi correctly
 109+ 6E7F              ;;;		ret
 110+ 6E7F              ;;;.ars1:										; .ARS1	\ -> &2A75  \ get Angle for A*32/Q from table.
 111+ 6E7F              ;;;		call	RequAmul256divQ				;  LL28 \ BFRDIV R=A*256/Q
 112+ 6E7F              ;;;		ld		a,(regA)
 113+ 6E7F              ;;;		srl		a
 114+ 6E7F              ;;;		srl		a
 115+ 6E7F              ;;;		srl		a							;  31 max.
 116+ 6E7F              ;;;		ld		hl, ArcTanTable				; root of index into table at end of words data
 117+ 6E7F              ;;;		add		hl,a						; now at real data
 118+ 6E7F              ;;;		ld		a,(hl)						; a =  ACT[a]
 119+ 6E7F              ;;;.arsr:										; rts used by laser lines below (will not in later code)
 120+ 6E7F              ;;;		ret
 121+ 6E7F
 122+ 6E7F
 123+ 6E7F
# file closed: ../../Maths/asm_arctan.asm
 727  6E7F                  INCLUDE "../../Maths/SineTable.asm"
# file opened: ../../Maths/SineTable.asm
   1+ 6E7F              ;; PRINT "SIN TABLE"
   2+ 6E7F              ;; FOR I% =  0 TO  31
   3+ 6E7F              ;; N = ABS(SIN((I%/64)*2*PI))
   4+ 6E7F              ;; IF N >= 1 THEN B% = 255  ELSE B% = INT(256 * N + 0.5)
   5+ 6E7F              ;; PRINT B%
   6+ 6E7F              ;; NEXT I%
   7+ 6E7F
   8+ 6E7F
   9+ 6E7F 00 19 32 4A  SNE:            DB 000, 025, 050, 074, 098, 121, 142, 162
   9+ 6E83 62 79 8E A2
  10+ 6E87 B5 C6 D5 E2                  DB 181, 198, 213, 226, 237, 245, 251, 255
  10+ 6E8B ED F5 FB FF
  11+ 6E8F FF FF FB F5                  DB 255, 255, 251, 245, 237, 226, 213, 198
  11+ 6E93 ED E2 D5 C6
  12+ 6E97 B5 A2 8E 79                  DB 181, 162, 142, 121, 098, 074, 050, 025
  12+ 6E9B 62 4A 32 19
# file closed: ../../Maths/SineTable.asm
 728  6E9F                  INCLUDE "../../Maths/ArcTanTable.asm"
# file opened: ../../Maths/ArcTanTable.asm
   1+ 6E9F              ;PRINT "ARCTAN TABLE"
   2+ 6E9F              ;FOR I% = 0 TO 31
   3+ 6E9F              ;    PRINT INT((128/PI) * ATN(I%/32)+0.5)
   4+ 6E9F              ;NEXT I%
   5+ 6E9F
   6+ 6E9F 00 01 03 04  ACT:            DB 000, 001, 003, 004, 005, 006, 008, 009
   6+ 6EA3 05 06 08 09
   7+ 6EA7 0A 0B 0C 0D                  DB 010, 011, 012, 013, 015, 016, 017, 018
   7+ 6EAB 0F 10 11 12
   8+ 6EAF 13 14 15 16                  DB 019, 020, 021, 022, 023, 024, 025, 025
   8+ 6EB3 17 18 19 19
   9+ 6EB7 1A 1B 1C 1D                  DB 026, 027, 028, 029, 030, 031, 031, 031
   9+ 6EBB 1E 1F 1F 1F
  10+ 6EBF
# file closed: ../../Maths/ArcTanTable.asm
 729  6EBF                  INCLUDE "../../Maths/negate16.asm"
# file opened: ../../Maths/negate16.asm
   1+ 6EBF              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 6EBF              ;; 16-bit negate
   3+ 6EBF                      ; Input:
   4+ 6EBF                      ;       HL = value
   5+ 6EBF                      ; Output:
   6+ 6EBF                      ;       HL = -value
   7+ 6EBF                      ; Destroys:
   8+ 6EBF                      ;       AF
   9+ 6EBF                      ;
  10+ 6EBF              negate16:
  11+ 6EBF AF           negate16hl:         xor 	a
  12+ 6EC0 95                               sub 	l
  13+ 6EC1 6F                               ld 		l,a
  14+ 6EC2 9F                               sbc 	a,a
  15+ 6EC3 94                               sub 	h
  16+ 6EC4 67                               ld 		h,a
  17+ 6EC5 C9                               ret
  18+ 6EC6
  19+ 6EC6 AF           negate16de:         xor 	a
  20+ 6EC7 93                               sub 	e
  21+ 6EC8 5F                               ld 		e,a
  22+ 6EC9 9F                               sbc 	a,a
  23+ 6ECA 92                               sub 	d
  24+ 6ECB 57                               ld 		d,a
  25+ 6ECC C9                               ret
  26+ 6ECD
  27+ 6ECD AF           negate16bc:         xor 	a
  28+ 6ECE 91                               sub 	c
  29+ 6ECF 4F                               ld 		c,a
  30+ 6ED0 9F                               sbc 	a,a
  31+ 6ED1 90                               sub 	b
  32+ 6ED2 47                               ld 		b,a
  33+ 6ED3 C9                               ret
  34+ 6ED4
# file closed: ../../Maths/negate16.asm
 730  6ED4                  INCLUDE "../../Maths/asm_divide.asm"
# file opened: ../../Maths/asm_divide.asm
   1+ 6ED4              ;   K(3 2 1 0)           The result of the division
   2+ 6ED4              ;   X                    X is preserved
   3+ 6ED4
   4+ 6ED4              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) where zsign hi lo is in DE with zsign leading hi
   5+ 6ED4 00 00 00 00  varQRS                 DS      4
   6+ 6ED8 00 00 00     varAPP                 DS     3
   7+ 6EDB 00           Rvar                   DS     1
   8+ 6EDC
   9+ 6EDC                                  DISPLAY "TODO:  neds rewrite of whoel DIDV3B2"
  10+ 6EDC              ;; NEEDS REWRITE TODO OF WHOLE DIVD3B2
  11+ 6EDC              ;; NEEDS REWRITE TODO
  12+ 6EDC
  13+ 6EDC              ; b = varR, c= varQ
  14+ 6EDC              Requ256mulAdivQ_6502:
  15+ 6EDC CB 27        .LL31_6502:             sla     a                       ; ASL A                   \ Shift A to the left
  16+ 6EDE DA F3 6E                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  17+ 6EE1                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  17+ 6EE1 3F          >                        ccf
  18+ 6EE2                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  18+ 6EE2 B9          >                        cp      c
  18+ 6EE3 DA E8 6E    >                        jp		c, .LL31_SKIPSUB_6502
  19+ 6EE6                                                                      ; BCC P%+4
  20+ 6EE6 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  21+ 6EE7                                      ClearCarryFlag
  21+ 6EE7 B7          >                        or a
  22+ 6EE8              .LL31_SKIPSUB_6502:     FlipCarryFlag
  22+ 6EE8 3F          >                        ccf
  23+ 6EE9 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  24+ 6EEB DA DC 6E                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  25+ 6EEE 78                                   ld      a,b
  26+ 6EEF 32 DB 6E                             ld      (Rvar),a
  27+ 6EF2 C9                                   ret                             ; RTS                    \ R left with remainder of division
  28+ 6EF3 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  29+ 6EF4                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  29+ 6EF4 37          >                        scf
  30+ 6EF5 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  31+ 6EF7 DA DC 6E                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  32+ 6EFA 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  33+ 6EFB 32 DB 6E                             ld      (Rvar),a                ; .
  34+ 6EFE C9                                   ret                             ; .                      \ remainder of the division
  35+ 6EFF 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  36+ 6F01 32 4D 67                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  37+ 6F04 47                                   ld      b,a                     ; as we are using b as varR
  38+ 6F05                                      SetCarryFlag                    ; we failed so need carry flag set
  38+ 6F05 37          >                        scf
  39+ 6F06 C9                                   ret                             ; RTS                    \ Return from the subroutine
  40+ 6F07                             DISPLAY "TODO : Merge Requ256mulAdivQ_6502  RequAmul256divQ"
  41+ 6F07              ; Entry point if varQ is populated with demoninator
  42+ 6F07              RequAmul256divQ:
  43+ 6F07 F5           BFRDIV:                 push	af
  44+ 6F08 3A 4C 67                             ld		a,(varQ)
  45+ 6F0B 4F                                   ld		c,a
  46+ 6F0C F1                                   pop		af
  47+ 6F0D FE 00                                cp		0
  48+ 6F0F CA 26 6F                             jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  49+ 6F12 2E 00        RequAmul256divC:        ld		l,0
  50+ 6F14 67                                   ld		h,a
  51+ 6F15 06 10        HL_Div_Cold:			ld b,16			; fast entry point if C and HL are already set
  52+ 6F17 AF                                   xor a
  53+ 6F18 29           LOOPPOINT:	            add hl,hl
  54+ 6F19 17                                   rla
  55+ 6F1A B9                                   cp c
  56+ 6F1B 38 02                                jr c,SKIPINCSUB
  57+ 6F1D 2C                                   inc l
  58+ 6F1E 91                                   sub c
  59+ 6F1F 10 F7        SKIPINCSUB:             djnz LOOPPOINT
  60+ 6F21 7D                                   ld		a,l
  61+ 6F22 32 4D 67                             ld 		(varR),a
  62+ 6F25 C9                                   ret
  63+ 6F26 32 4D 67     HLDIVC_0_BY:            ld		(varR),a
  64+ 6F29 C9                                   ret
  65+ 6F2A
  66+ 6F2A
  67+ 6F2A 21 4C 67     Amul256DivQ:            ld      hl,varQ                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  68+ 6F2D 4E                                   ld      c,(hl)                  ; using c as Q var
  69+ 6F2E B9                                   cp      c
  70+ 6F2F                                      FlipCarryFlag
  70+ 6F2F 3F          >                        ccf
  71+ 6F30 DA 58 6F                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  72+ 6F33 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  73+ 6F35 CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  74+ 6F37 DA 4C 6F                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  75+ 6F3A                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  75+ 6F3A 3F          >                        ccf
  76+ 6F3B                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  76+ 6F3B B9          >                        cp      c
  76+ 6F3C DA 41 6F    >                        jp		c, .LL31_SKIPSUB_6502
  77+ 6F3F                                                                      ; BCC P%+4
  78+ 6F3F 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  79+ 6F40                                      ClearCarryFlag
  79+ 6F40 B7          >                        or a
  80+ 6F41              .LL31_SKIPSUB_6502:     FlipCarryFlag
  80+ 6F41 3F          >                        ccf
  81+ 6F42 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  82+ 6F44 DA 35 6F                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  83+ 6F47 78                                   ld      a,b
  84+ 6F48 32 4D 67                             ld      (varR),a
  85+ 6F4B C9                                   ret                             ; RTS                    \ R left with remainder of division
  86+ 6F4C 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  87+ 6F4D                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  87+ 6F4D 37          >                        scf
  88+ 6F4E CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  89+ 6F50 DA 35 6F                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  90+ 6F53 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  91+ 6F54 32 4D 67                             ld      (varR),a                ; .
  92+ 6F57 C9                                   ret                             ; .                      \ remainder of the division
  93+ 6F58 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  94+ 6F5A 32 4D 67                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  95+ 6F5D                                      SetCarryFlag                    ; we failed so need carry flag set
  95+ 6F5D 37          >                        scf
  96+ 6F5E C9                                   ret                             ; RTS                    \ Return from the subroutine
  97+ 6F5F
  98+ 6F5F
  99+ 6F5F 00           DIVD3B_SHIFT_REG:       DB      0
 100+ 6F60
 101+ 6F60 7B           DIV3B2DE:               ld      a,e                         ; load QRS with Z sign hi lo
 102+ 6F61 32 D6 6E                             ld      (varQRS+2),a
 103+ 6F64 7A                                   ld      a,d
 104+ 6F65 E6 7F                                and     $7F
 105+ 6F67 32 D5 6E                             ld      (varQRS+1),a
 106+ 6F6A 7A                                   ld      a,d
 107+ 6F6B E6 80                                and     $80
 108+ 6F6D 32 D4 6E                             ld      (varQRS),a
 109+ 6F70 C3 76 6F                             jp      DVID3B
 110+ 6F73              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) = A P[1 0 ] / (SRQ)
 111+ 6F73              ; We don't use zlo and assume its already loaded into SRQ
 112+ 6F73 32 4E 66     DVID3B2:                ld      (varP+2),a                  ;STA P+2                \ Set P+2 = A
 113+ 6F76                                                                          ; LDA INWK+6             \ Set Q = z_lo
 114+ 6F76                                                                          ; STA Q
 115+ 6F76                                                                          ; LDA INWK+7             \ Set R = z_hi
 116+ 6F76                                                                          ; STA R
 117+ 6F76                                                                          ; LDA INWK+8             \ Set S = z_sign
 118+ 6F76                                                                          ; STA S
 119+ 6F76              ;  Given the above assignments, we now want to calculate K(3 2 1 0) = P(2 1 0) / (S R Q)
 120+ 6F76 3A 4C 66     DVID3B:                 ld      a,(varP)                    ; LDA P                 \ Make sure P(2 1 0) is at least 1
 121+ 6F79 F6 01                                or      1                           ; ORA #1
 122+ 6F7B 32 4C 66                             ld      (varP),a                    ; STA P
 123+ 6F7E              ;--- t = sign of P2 xor S (i.e. sign of result) ------------;
 124+ 6F7E 3A 4E 66                             ld      a,(varP+2)                  ; LDA P+2                \ Set T to the sign of P+2 * S (i.e. the sign of the
 125+ 6F81 21 4E 67                             ld      hl, varS                    ; EOR S                  \ result) and store it in T
 126+ 6F84 AE                                   xor     (hl)
 127+ 6F85 E6 80                                and     $80                         ; AND #%10000000
 128+ 6F87 32 68 67                             ld      (varT),a                    ; STA T
 129+ 6F8A              ;--- New bit added to aviod a divde by 0 -------------------;
 130+ 6F8A 3A 4C 67     .CheckQRSAtLeast1:      ld      a,(varQ)                    ;
 131+ 6F8D 21 4D 67                             ld      hl,varR                     ;
 132+ 6F90 B6                                   or      (hl)                        ;
 133+ 6F91 C2 99 6F                             jp      nz,.DVL9Prep                ;
 134+ 6F94 3E 01                                ld      a,1                         ;
 135+ 6F96 32 4C 67                             ld      (varQ),a                    ;
 136+ 6F99              ; A P(1) P(0) = ABS P(2 1 0)
 137+ 6F99 06 00        .DVL9Prep:              ld      b,0                         ; LDY #0                 \ Set Y = 0 to store the scale factor (use b as Y)
 138+ 6F9B 3A 4E 66                             ld      a,(varP+2)                  ; LDA P+2                \ Clear the sign bit of P+2, so the division can be done
 139+ 6F9E E6 7F                                and     $7F                         ; AND #%01111111         \ with positive numbers and we'll set the correct sign below, once all the maths is done
 140+ 6FA0              ; We now shift (A P+1 P) left until A >= 64, counting the number of shifts in Y. This makes the top part of the division as large as possible, thus retaining as
 141+ 6FA0              ; much accuracy as we can.  When we come to return the final result, we shift the result by the number of places in Y, and in the correct direction
 142+ 6FA0                                      DISPLAY "TODO DVL9 and DVL6 move P and QRS into registers for faster shift"
 143+ 6FA0              ;-- while A < 64 shift A P(1) P(0) -------------------------;
 144+ 6FA0 FE 40        .DVL9:                  cp      64                          ; CMP #64                \ If A >= 64, jump down to DV14
 145+ 6FA2 D2 B3 6F                             jp      nc, .DV14                   ; BCS DV14
 146+ 6FA5 21 4C 66                             ld      hl,varP                     ; ASL P                  \ Shift (A P+1 P) to the left
 147+ 6FA8 CB 26                                sla     (hl)
 148+ 6FAA 23                                   inc     hl                          ; ROL P+1
 149+ 6FAB CB 16                                rl      (hl)
 150+ 6FAD CB 17                                rl      a                           ; ROL A
 151+ 6FAF 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 152+ 6FB0 C3 A0 6F                             jp      .DVL9                       ; BNE DVL9               \ Loop up to DVL9 (this BNE is effectively a JMP, as Y will never be zero)
 153+ 6FB3              ; If we get here, A >= 64 and contains the highest byte of the numerator, scaled up by the number of left shifts in Y (b in our code)
 154+ 6FB3 32 4E 66     .DV14:                  ld      (varP+2),a                  ; Store A in P+2, so we now have the scaled value of the numerator in P(2 1 0)
 155+ 6FB6 3A 4E 67                             ld      a,(varS)                    ; LDA S                  \ Set A = |S|
 156+ 6FB9 E6 7F                                and     $7F                         ; AND #%01111111
 157+ 6FBB                                      ;nop                                ;  BMI DV9               \ If bit 7 of A is set, jump down to DV9 (which can never happen)
 158+ 6FBB              ; We now shift (S R Q) left until bit 7 of S is set, reducing Y by the number of shifts. This makes the bottom part of the division as large as possible, thus
 159+ 6FBB              ; retaining as much accuracy as we can. When we come to return the final result, we shift the result by the total number of places in Y, and in the correct
 160+ 6FBB              ; direction, to give us the correct result
 161+ 6FBB              ; We set A to |S| above, so the following actually shifts (A R Q)
 162+ 6FBB 05           .DVL6:                  dec     b                           ; DEY                    \ Decrement the scale factor in Y (b)
 163+ 6FBC 21 4C 67                             ld      hl,varQ                     ; ASL Q                  \ Shift (A R Q) to the left
 164+ 6FBF CB 26                                sla     (hl)                        ; .
 165+ 6FC1 21 4D 67                             ld      hl,varR                     ; ROL R
 166+ 6FC4 CB 16                                rl      (hl)                        ; .
 167+ 6FC6 CB 17                                rl      a                           ; ROL A
 168+ 6FC8 F2 BB 6F                             jp      p,.DVL6                     ; BPL DVL6               \ Loop up to DVL6 to do another shift, until bit 7 of A is set and we can't shift left any further
 169+ 6FCB              ; We have now shifted both the numerator and denominator left as far as they will go, keeping a tally of the overall scale factor of the various shifts in Y. We
 170+ 6FCB              ; can now divide just the two highest bytes to get our result
 171+ 6FCB 32 4C 67     .DV9:                   ld      (varQ),a                    ; STA Q                  \ Set Q = A, the highest byte of the denominator
 172+ 6FCE 4F                                   ld      c,a                         ; for Requ256mulAdivQ_6502 as it uses c as Q
 173+ 6FCF 78                                   ld      a,b                         ; preserve shift register in DEVD3B_SHIFT_REG
 174+ 6FD0 32 5F 6F                             ld      (DIVD3B_SHIFT_REG),a
 175+ 6FD3              ; Note in Requ256mulAdivQ_6502 we use B as R Var for shift register
 176+ 6FD3 06 FE                                ld      b,254                       ; LDA #254               \ Set R to have bits 1-7 set, so we can pass this to
 177+ 6FD5 32 4D 67                             ld      (varR),a                    ; STA R                  \ LL31 to act as the bit counter in the division
 178+ 6FD8 3A 4E 66                             ld      a,(varP+2)                  ; LDA P+2                \ Set A to the highest byte of the numerator
 179+ 6FDB CD DC 6E                             call    Requ256mulAdivQ_6502        ; JSR LL31               \ Call LL31 to calculate: R = 256 * A / Q which means result is in b
 180+ 6FDE              ; The result of our division is now in R, so we just need to shift it back by the scale factor in Y
 181+ 6FDE                                      ZeroA                               ; LDA #0                \ Set K(3 2 1) = 0 to hold the result (we populate K)
 181+ 6FDE AF          >                        xor a
 182+ 6FDF 32 60 67                             ld      (varK+1),a                  ; STA K+1               \ next)
 183+ 6FE2 32 61 67                             ld      (varK+2),a                  ; STA K+2
 184+ 6FE5 32 62 67                             ld      (varK+3),a                  ; STA K+3
 185+ 6FE8 3A 5F 6F                             ld      a,(DIVD3B_SHIFT_REG)        ; TYA                   \ If Y (shift counter in b) is positive, jump to DV12
 186+ 6FEB B7                                   or      a                           ; .                      we want to check the sign or if its zero
 187+ 6FEC CA 17 70                             jp      z,.DV13                     ; Optimisation to save a second jump from DV12 to DV13
 188+ 6FEF F2 22 70                             jp      p,.DV12                     ; BPL DV12
 189+ 6FF2              ; If we get here then Y is negative, so we need to shift the result R to the left by Y places, and then set the correct sign for the result
 190+ 6FF2                                      DISPLAY "TODO check oprimisation here for var r  in b"
 191+ 6FF2 48                                   ld      c,b
 192+ 6FF3 3A 5F 6F                             ld      a,(DIVD3B_SHIFT_REG)
 193+ 6FF6 47                                   ld      b,a
 194+ 6FF7 79                                   ld      a,c
 195+ 6FF8                                      ; OPTIM ld      a,(varR)                    ; LDA R                  \ Set A = R
 196+ 6FF8 CB 27        .DVL8:                  sla     a                           ; ASL A                  \ Shift (K+3 K+2 K+1 A) left
 197+ 6FFA 21 60 67                             ld      hl,varK+1                   ; ROL K+1
 198+ 6FFD CB 16                                rl      (hl)                        ; .
 199+ 6FFF 23                                   inc     hl                          ; ROL K+2
 200+ 7000 CB 16                                rl      (hl)                        ; .
 201+ 7002 23                                   inc     hl                          ; ROL K+3
 202+ 7003 CB 16                                rl      (hl)                        ; .
 203+ 7005 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 204+ 7006 C2 F8 6F                             jp      nz,.DVL8                    ; BNE DVL8               \ Loop back to DVL8 until we have shifted left by Y places
 205+ 7009 32 5F 67                             ld      (varK),a                    ; STA K                  \ Store A in K so the result is now in K(3 2 1 0)
 206+ 700C 3A 62 67                             ld      a,(varK+3)                  ; LDA K+3                \ Set K+3 to the sign in T, which we set above to the
 207+ 700F 21 68 67                             ld      hl,varT                     ; ORA T                  \ correct sign for the result
 208+ 7012 B6                                   or      (hl)                        ; .
 209+ 7013 32 62 67                             ld      (varK+3),a                  ; STA K+3
 210+ 7016 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 211+ 7017              ; If we get here then Y is zero, so we don't need to shift the result R, we just need to set the correct sign for the result
 212+ 7017 78           .DV13:                  ld      a,b; varR)                  ; LDA R                  \ Store R in K so the result is now in K(3 2 1 0)
 213+ 7018 32 5F 67                             ld      (varK),a                    ; STA K
 214+ 701B 3A 68 67                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 215+ 701E 32 62 67                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 216+ 7021 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 217+ 7022              ; if we get here U is positive but still could be zero, now this is handled in DV9
 218+ 7022              .DV12:                  ; nop                               ; BEQ DV13               \ We jumped here having set A to the scale factor in Y, so this jumps up to DV13 if Y = 0
 219+ 7022              ; If we get here then Y is positive and non-zero, so we need to shift the result R to the right by Y places and then set the correct sign for the result. We also
 220+ 7022              ; know that K(3 2 1) will stay 0, as we are shifting the lowest byte to the right, so no set bits will make their way into the top three bytes
 221+ 7022                                      ;ld      a,(varR)                    ; LDA R                  \ Set A = R
 222+ 7022 48                                   ld      c,b
 223+ 7023 3A 5F 6F                             ld      a,(DIVD3B_SHIFT_REG)
 224+ 7026 47                                   ld      b,a
 225+ 7027 79                                   ld      a,c
 226+ 7028 CB 3F        .DVL10:                 srl     a                           ; LSR A                  \ Shift A right
 227+ 702A 05                                   dec     b                           ; DEY                    \ Decrement the scale factor in Y
 228+ 702B C2 28 70                             jp      nz,.DVL10                   ; BNE DVL10              \ Loop back to DVL10 until we have shifted right by Y places
 229+ 702E 32 5F 67                             ld      (varK),a                    ; STA K                  \ Store the shifted A in K so the result is now in K(3 2 1 0)
 230+ 7031 3A 68 67                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 231+ 7034 32 62 67                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 232+ 7037 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 233+ 7038              ;
 234+ 7038              ;   Set flags E to 11111110
 235+ 7038              ;   Loop:   A << 2
 236+ 7038              ;           if carry was 0
 237+ 7038              ;               if a >= D
 238+ 7038              ;                   A = A - D
 239+ 7038              ;                   clear carry (probably irrelevant really)
 240+ 7038              ;           else
 241+ 7038
 242+ 7038              ;               sla flags << bringing in carry of 1
 243+ 7038              ;               if bit 7 of flag was set then loop
 244+ 7038              ;                                        elase a = e and exit
 245+ 7038              ;
 246+ 7038              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
 247+ 7038              ;
 248+ 7038              ;INPUTS: hl = dividend dbc = divisor
 249+ 7038              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
 250+ 7038
 251+ 7038 57           DVIDT:                  ld      d,a                     ; D = var P+1
 252+ 7039 3A 4C 67                             ld      a,(varQ)
 253+ 703C 4F                                   ld      c,a                     ; C = var Q
 254+ 703D 3A 4C 66                             ld      a,(varP)
 255+ 7040 5F                                   ld      e,a                     ; E = var P
 256+ 7041                                      ; Need fast exists on ABS values
 257+ 7041 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
 258+ 7042 B3                                   or      e                       ; .
 259+ 7043 28 2A                                jr      z,.ResultIsZero         ; .
 260+ 7045 79                                   ld      a,c                     ; Fast exit is divide by 0
 261+ 7046 A7                                   and     a                       ;
 262+ 7047 28 29                                jr      z,.ResultIsFFFF         ;
 263+ 7049 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 264+ 704A A9                                   xor     c                       ;
 265+ 704B E6 80                                and     $80
 266+ 704D 6F                                   ld      l,a                     ; l = var T
 267+ 704E 3E 00                                ld      a,0
 268+ 7050 06 10                                ld      b,16
 269+ 7052                                      ShiftDELeft1
 269+ 7052 CB 23       >			   sla e
 269+ 7054 CB 12       >			   rl  d
 270+ 7056 CB 21                                sla     c                       ; c = abs c
 271+ 7058 CB 39                                srl     c
 272+ 705A CB 17        .DivideLoop:            rl      a
 273+ 705C                                      JumpIfALTNusng c, .SkipSubtract
 273+ 705C B9          >                        cp      c
 273+ 705D DA 63 70    >                        jp		c, .SkipSubtract
 274+ 7060                                      ClearCarryFlag
 274+ 7060 B7          >                        or a
 275+ 7061 99                                   sbc     c
 276+ 7062                                      ClearCarryFlag
 276+ 7062 B7          >                        or a
 277+ 7063 3F           .SkipSubtract:          ccf
 278+ 7064 CB 13                                rl      e
 279+ 7066 CB 12                                rl      d
 280+ 7068 05                                   dec     b
 281+ 7069 20 EF                                jr      nz,.DivideLoop
 282+ 706B 7B                                   ld      a,e
 283+ 706C B5                                   or      l
 284+ 706D 42                                   ld      b,d
 285+ 706E C9                                   ret
 286+ 706F              .ResultIsZero:          ZeroA
 286+ 706F AF          >                        xor a
 287+ 7070 47                                   ld      b,a
 288+ 7071 C9                                   ret
 289+ 7072 3E FF        .ResultIsFFFF:          ld      a,$FF
 290+ 7074 47                                   ld      b,a
 291+ 7075 C9                                   ret
 292+ 7076
 293+ 7076 57           DIV96:                  ld      d,a                     ; D = var P+1
 294+ 7077 3A 4C 67                             ld      a,(varQ)
 295+ 707A 0E 60                                ld      c,96                    ; C = var Q
 296+ 707C 3A 4C 66                             ld      a,(varP)
 297+ 707F 5F                                   ld      e,a                     ; E = var P
 298+ 7080                                      ; Need fast exists on ABS values
 299+ 7080 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
 300+ 7081 B3                                   or      e                       ; .
 301+ 7082 28 26                                jr      z,.ResultIsZero         ; .
 302+ 7084 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 303+ 7085 A9                                   xor     c                       ;
 304+ 7086 E6 80                                and     $80
 305+ 7088 6F                                   ld      l,a                     ; l = var T
 306+ 7089 3E 00                                ld      a,0
 307+ 708B 06 10                                ld      b,16
 308+ 708D                                      ShiftDELeft1
 308+ 708D CB 23       >			   sla e
 308+ 708F CB 12       >			   rl  d
 309+ 7091 CB 21                                sla     c                       ; c = abs c
 310+ 7093 CB 39                                srl     c
 311+ 7095 CB 17        .DivideLoop:            rl      a
 312+ 7097                                      JumpIfALTNusng c, .SkipSubtract
 312+ 7097 B9          >                        cp      c
 312+ 7098 DA 9E 70    >                        jp		c, .SkipSubtract
 313+ 709B                                      ClearCarryFlag
 313+ 709B B7          >                        or a
 314+ 709C 99                                   sbc     c
 315+ 709D                                      ClearCarryFlag
 315+ 709D B7          >                        or a
 316+ 709E 3F           .SkipSubtract:          ccf
 317+ 709F CB 13                                rl      e
 318+ 70A1 CB 12                                rl      d
 319+ 70A3 05                                   dec     b
 320+ 70A4 20 EF                                jr      nz,.DivideLoop
 321+ 70A6 7B                                   ld      a,e
 322+ 70A7 B5                                   or      l
 323+ 70A8 42                                   ld      b,d
 324+ 70A9 C9                                   ret
 325+ 70AA              .ResultIsZero:          ZeroA
 325+ 70AA AF          >                        xor a
 326+ 70AB 47                                   ld      b,a
 327+ 70AC C9                                   ret
 328+ 70AD
 329+ 70AD 14           Div16by24usgn:          inc     d                           ; can we fast retu
 330+ 70AE 15                                   dec     d
 331+ 70AF 20 13                                jr      nz,.ResultZero
 332+ 70B1 50 59                                ld      de,bc                       ; so prep for bc/de
 333+ 70B3 44 4D                                ld      bc,hl
 334+ 70B5 7A           .div16by16usng:         ld      a,d
 335+ 70B6 B3                                   or      e
 336+ 70B7 28 10                                jr      z,.DivideByZero
 337+ 70B9 14                                   inc     d
 338+ 70BA 15                                   dec     d
 339+ 70BB CD 0D 72                             call    BC_Div_DE
 340+ 70BE                                      ZeroA
 340+ 70BE AF          >                        xor a
 341+ 70BF EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 342+ 70C0 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 343+ 70C2 4F                                   ld      c,a                         ; now fix c
 344+ 70C3 C9                                   ret
 345+ 70C4 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 346+ 70C5 4F                                   ld      c,a                         ; c = 0
 347+ 70C6 67                                   ld      h,a
 348+ 70C7 6F                                   ld      l,a
 349+ 70C8 C9                                   ret
 350+ 70C9 3E FF        .DivideByZero:          ld      a,$FF
 351+ 70CB 67                                   ld      h,a
 352+ 70CC 6F                                   ld      l,a
 353+ 70CD                                      SetCarryFlag
 353+ 70CD 37          >                        scf
 354+ 70CE C9                                   ret
 355+ 70CF
 356+ 70CF              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 357+ 70CF                          IFDEF HLEquAmul256DivD_Used
 358+ 70CF ~            HLEquAmul256DivD:       ld		b,8							; counter
 359+ 70CF ~                                    sla		a							;
 360+ 70CF ~                                    ld		h,a							; r a * 2 we will build result in hl
 361+ 70CF ~            .DivideLoop:            rl		a							; a = a * 2
 362+ 70CF ~                                    jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 363+ 70CF ~                                    cp      d                           ; what was var Q
 364+ 70CF ~                                    jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 365+ 70CF ~            .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 366+ 70CF ~                                    sbc     a,d                         ; a = a - q
 367+ 70CF ~                                    ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 368+ 70CF ~            .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 369+ 70CF ~                                    rl      h                           ; roll d left bringing in carry if there was an sbc performed
 370+ 70CF ~                                    djnz    .DivideLoop                 ; 8 cycles
 371+ 70CF ~            .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 372+ 70CF ~                                    jr      nc, .RemainderTooBig
 373+ 70CF ~                                    ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 374+ 70CF ~            .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 375+ 70CF ~                                    ld      l,b                         ; and set l to capture result bits (R)
 376+ 70CF ~            .RemainderLoop:         sla     a                           ; shift a left
 377+ 70CF ~                                    jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 378+ 70CF ~                                    cp      d                           ; if a < d then skip subtraction
 379+ 70CF ~                                    jr      c,.RemainderSkipSubtract    ; .
 380+ 70CF ~                                    sbc     d                           ; a > q so a = a - q, carry will be clear here
 381+ 70CF ~            .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 382+ 70CF ~                                    rl      l                           ; rotate counter to the left
 383+ 70CF ~                                    jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 384+ 70CF ~                                    ret
 385+ 70CF ~            .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 386+ 70CF ~                                    SetCarryFlag                        ; roll in a carry bit to result
 387+ 70CF ~                                    rl      l                           ;
 388+ 70CF ~                                    jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 389+ 70CF ~                                    ret
 390+ 70CF ~            .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 391+ 70CF ~                                    ret
 392+ 70CF                          ENDIF
 393+ 70CF
 394+ 70CF BA           AEquAmul256DivD:        cp      d
 395+ 70D0 28 1D                                jr      z,.BothSame
 396+ 70D2 30 1E                                jr      nc,.DgtA
 397+ 70D4 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 398+ 70D6 CB 27        .DivideLoop:            sla     a
 399+ 70D8 38 0D                                jr      c,.LL29
 400+ 70DA                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 400+ 70DA BA          >                        cp      d
 400+ 70DB DA E0 70    >                        jp		c, .SkipSub
 401+ 70DE 92                                   sub     d
 402+ 70DF                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 402+ 70DF B7          >                        or a
 403+ 70E0              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 403+ 70E0 3F          >                        ccf
 404+ 70E1 CB 13                                rl      e
 405+ 70E3 38 F1                                jr      c,.DivideLoop
 406+ 70E5 7B                                   ld      a,e
 407+ 70E6 C9                                   ret
 408+ 70E7 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 409+ 70E8                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 409+ 70E8 37          >                        scf
 410+ 70E9 CB 13                                rl      e                           ; rotate counter e left
 411+ 70EB 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 412+ 70ED 7B                                   ld      a,e                         ; stick result in a
 413+ 70EE C9                                   ret
 414+ 70EF 3E 01        .BothSame:              ld  a,1
 415+ 70F1 C9                                   ret
 416+ 70F2 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 417+ 70F4 C9                                   ret
 418+ 70F5
 419+ 70F5              ; Divide 8-bit values
 420+ 70F5              ; In: Divide E by divider C
 421+ 70F5              ; Out: A = result, B = rest
 422+ 70F5              ;
 423+ 70F5              ;;;Div8:
 424+ 70F5              ;;;    xor a
 425+ 70F5              ;;;    ld b,8
 426+ 70F5              ;;;Div8_Loop:
 427+ 70F5              ;;;    rl e
 428+ 70F5              ;;;    rla
 429+ 70F5              ;;;    sub c
 430+ 70F5              ;;;    jr nc,Div8_NoAdd
 431+ 70F5              ;;;    add a,c
 432+ 70F5              ;;;Div8_NoAdd:
 433+ 70F5              ;;;    djnz Div8_Loop
 434+ 70F5              ;;;    ld b,a0
 435+ 70F5              ;;;    ld a,e
 436+ 70F5              ;;;    rla
 437+ 70F5              ;;;    cpl
 438+ 70F5              ;;;    ret
 439+ 70F5
 440+ 70F5              ;;Inputs: DE is the numerator, BC is the divisor
 441+ 70F5              ;;Outputs: DE is the result
 442+ 70F5              ;;         A is a copy of E
 443+ 70F5              ;;         HL is the remainder
 444+ 70F5              ;;         BC is not changed
 445+ 70F5              ;; so DE = DE /BC
 446+ 70F5              ;140 bytes
 447+ 70F5              ;145cc
 448+ 70F5
 449+ 70F5              MacroDEDivBC:       MACRO
 450+ 70F5 ~                                rla
 451+ 70F5 ~                                adc     hl,hl
 452+ 70F5 ~                                sbc     hl,bc
 453+ 70F5 ~                                jr      nc,$+3
 454+ 70F5 ~                                add     hl,bc
 455+ 70F5                                  ENDM
 456+ 70F5
 457+ 70F5 AF           DEequDEDivBC:       xor a
 458+ 70F6 ED 62                            sbc hl,hl
 459+ 70F8 7A                               ld a,d
 460+ 70F9                                  MacroDEDivBC
 460+ 70F9 17          >                    rla
 460+ 70FA ED 6A       >                    adc     hl,hl
 460+ 70FC ED 42       >                    sbc     hl,bc
 460+ 70FE 30 01       >                    jr      nc,$+3
 460+ 7100 09          >                    add     hl,bc
 461+ 7101                                  MacroDEDivBC
 461+ 7101 17          >                    rla
 461+ 7102 ED 6A       >                    adc     hl,hl
 461+ 7104 ED 42       >                    sbc     hl,bc
 461+ 7106 30 01       >                    jr      nc,$+3
 461+ 7108 09          >                    add     hl,bc
 462+ 7109                                  MacroDEDivBC
 462+ 7109 17          >                    rla
 462+ 710A ED 6A       >                    adc     hl,hl
 462+ 710C ED 42       >                    sbc     hl,bc
 462+ 710E 30 01       >                    jr      nc,$+3
 462+ 7110 09          >                    add     hl,bc
 463+ 7111                                  MacroDEDivBC
 463+ 7111 17          >                    rla
 463+ 7112 ED 6A       >                    adc     hl,hl
 463+ 7114 ED 42       >                    sbc     hl,bc
 463+ 7116 30 01       >                    jr      nc,$+3
 463+ 7118 09          >                    add     hl,bc
 464+ 7119                                  MacroDEDivBC
 464+ 7119 17          >                    rla
 464+ 711A ED 6A       >                    adc     hl,hl
 464+ 711C ED 42       >                    sbc     hl,bc
 464+ 711E 30 01       >                    jr      nc,$+3
 464+ 7120 09          >                    add     hl,bc
 465+ 7121                                  MacroDEDivBC
 465+ 7121 17          >                    rla
 465+ 7122 ED 6A       >                    adc     hl,hl
 465+ 7124 ED 42       >                    sbc     hl,bc
 465+ 7126 30 01       >                    jr      nc,$+3
 465+ 7128 09          >                    add     hl,bc
 466+ 7129                                  MacroDEDivBC
 466+ 7129 17          >                    rla
 466+ 712A ED 6A       >                    adc     hl,hl
 466+ 712C ED 42       >                    sbc     hl,bc
 466+ 712E 30 01       >                    jr      nc,$+3
 466+ 7130 09          >                    add     hl,bc
 467+ 7131                                  MacroDEDivBC
 467+ 7131 17          >                    rla
 467+ 7132 ED 6A       >                    adc     hl,hl
 467+ 7134 ED 42       >                    sbc     hl,bc
 467+ 7136 30 01       >                    jr      nc,$+3
 467+ 7138 09          >                    add     hl,bc
 468+ 7139 17                               rla
 469+ 713A 2F                               cpl
 470+ 713B 57                               ld d,a
 471+ 713C
 472+ 713C 7B                               ld a,e
 473+ 713D                                  MacroDEDivBC
 473+ 713D 17          >                    rla
 473+ 713E ED 6A       >                    adc     hl,hl
 473+ 7140 ED 42       >                    sbc     hl,bc
 473+ 7142 30 01       >                    jr      nc,$+3
 473+ 7144 09          >                    add     hl,bc
 474+ 7145                                  MacroDEDivBC
 474+ 7145 17          >                    rla
 474+ 7146 ED 6A       >                    adc     hl,hl
 474+ 7148 ED 42       >                    sbc     hl,bc
 474+ 714A 30 01       >                    jr      nc,$+3
 474+ 714C 09          >                    add     hl,bc
 475+ 714D                                  MacroDEDivBC
 475+ 714D 17          >                    rla
 475+ 714E ED 6A       >                    adc     hl,hl
 475+ 7150 ED 42       >                    sbc     hl,bc
 475+ 7152 30 01       >                    jr      nc,$+3
 475+ 7154 09          >                    add     hl,bc
 476+ 7155                                  MacroDEDivBC
 476+ 7155 17          >                    rla
 476+ 7156 ED 6A       >                    adc     hl,hl
 476+ 7158 ED 42       >                    sbc     hl,bc
 476+ 715A 30 01       >                    jr      nc,$+3
 476+ 715C 09          >                    add     hl,bc
 477+ 715D                                  MacroDEDivBC
 477+ 715D 17          >                    rla
 477+ 715E ED 6A       >                    adc     hl,hl
 477+ 7160 ED 42       >                    sbc     hl,bc
 477+ 7162 30 01       >                    jr      nc,$+3
 477+ 7164 09          >                    add     hl,bc
 478+ 7165                                  MacroDEDivBC
 478+ 7165 17          >                    rla
 478+ 7166 ED 6A       >                    adc     hl,hl
 478+ 7168 ED 42       >                    sbc     hl,bc
 478+ 716A 30 01       >                    jr      nc,$+3
 478+ 716C 09          >                    add     hl,bc
 479+ 716D                                  MacroDEDivBC
 479+ 716D 17          >                    rla
 479+ 716E ED 6A       >                    adc     hl,hl
 479+ 7170 ED 42       >                    sbc     hl,bc
 479+ 7172 30 01       >                    jr      nc,$+3
 479+ 7174 09          >                    add     hl,bc
 480+ 7175                                  MacroDEDivBC
 480+ 7175 17          >                    rla
 480+ 7176 ED 6A       >                    adc     hl,hl
 480+ 7178 ED 42       >                    sbc     hl,bc
 480+ 717A 30 01       >                    jr      nc,$+3
 480+ 717C 09          >                    add     hl,bc
 481+ 717D 17                               rla
 482+ 717E 2F                               cpl
 483+ 717F 5F                               ld e,a
 484+ 7180 C9                               ret
 485+ 7181              ;divdide by 16 using undocumented instrunctions
 486+ 7181              ;Input: BC = Dividend, DE = Divisor, HL = 0
 487+ 7181              ;Output: BC = Quotient, HL = Remainder
 488+ 7181              ; Our use
 489+ 7181              ; BC = A0
 490+ 7181              ; DE = 0C
 491+ 7181              ; so BC = a * 256 / C
 492+ 7181              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 492+ 7181 B9          >                        cp     c
 492+ 7182 D2 AD 71    >                        jp		nc,DEV16ATooLarge
 493+ 7185 47                                   ld      b,a
 494+ 7186 59                                   ld      e,c
 495+ 7187 0E 00                                ld      c,0
 496+ 7189 16 00                                ld      d,0
 497+ 718B C3 98 71                             jp      DIV16UNDOC
 498+ 718E 47           DIV16Amul256dQUNDOC:    ld      b,a
 499+ 718F 0E 00                                ld      c,0
 500+ 7191 21 4C 67                             ld      hl,varQ
 501+ 7194 7E                                   ld      a,(hl)
 502+ 7195 16 00                                ld      d,0
 503+ 7197 5F                                   ld      e,a
 504+ 7198              DIV16BCDivDEUNDOC:
 505+ 7198 21 00 00     DIV16UNDOC:             ld      hl,0
 506+ 719B 78                                   ld      a,b
 507+ 719C 06 10                                ld      b,16
 508+ 719E CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 509+ 71A0 17                                   rla			; ...
 510+ 71A1 ED 6A                                adc	hl,hl		; ...
 511+ 71A3 ED 52                                sbc	hl,de		; ...
 512+ 71A5 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 513+ 71A7 19                                   add	hl,de		; ...
 514+ 71A8 0D                                   dec	c		; ...
 515+ 71A9 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 516+ 71AB 47                                   ld   b,a
 517+ 71AC C9                                   ret
 518+ 71AD 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 519+ 71B0 C9                                   ret
 520+ 71B1              ; switch to logarithm version
 521+ 71B1              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 522+ 71B1 06 08        asm_div8:               ld b,8
 523+ 71B3 AF                                   xor a
 524+ 71B4 CB 21        .div8_loop:	            sla c
 525+ 71B6 17                                   rla
 526+ 71B7 BA                                   cp d
 527+ 71B8 38 02                                jr c,.div8_skip
 527+ 71BA
 528+ 71BA 0C                                   inc c
 529+ 71BB 92                                   sub d
 530+ 71BC 10 F6        .div8_skip:	            djnz .div8_loop
 531+ 71BE C9                                   ret
 532+ 71BF              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 533+ 71BF 06 10        asm_div16:              ld b,16
 534+ 71C1 AF                                   xor a
 535+ 71C2 CB 25        div16_loop:	            sla l
 536+ 71C4 CB 14                                rl	h
 537+ 71C6              ;    add hl,hl
 538+ 71C6 17                                   rla
 539+ 71C7 B9                                   cp c
 540+ 71C8 38 02                                jr c,div16_skip
 541+ 71CA 2C                                   inc l
 542+ 71CB 91                                   sub c
 543+ 71CC 10 F4        div16_skip:		        djnz div16_loop
 544+ 71CE C9                                   ret
 545+ 71CF              ;
 546+ 71CF              ; Divide 16-bit values (with 16-bit result)
 547+ 71CF              ; In: Divide BC by divider DE
 548+ 71CF              ; Out: BC = result, HL = rest
 549+ 71CF              ;
 550+ 71CF              HLDivC_Iteration: 	    MACRO
 551+ 71CF ~                                    add	hl,hl		; unroll 16 times
 552+ 71CF ~                                    rla				; ...
 553+ 71CF ~                                    cp	c			; ...
 554+ 71CF ~                                    jr	1F
 555+ 71CF ~                                    sub	c			; ...
 556+ 71CF ~            1:
 557+ 71CF ~                                    inc	l			; ...
 558+ 71CF                                      ENDM
 559+ 71CF
 560+ 71CF              EDivC_Iteration:        MACRO
 561+ 71CF ~                                    rl  e
 562+ 71CF ~                                    rla
 563+ 71CF ~                                    sub c
 564+ 71CF ~                                    jr  nc,.Div8_NoAdd
 565+ 71CF ~                                    add a,c
 566+ 71CF ~            .Div8_NoAdd:
 567+ 71CF                                      ENDM
 568+ 71CF
 569+ 71CF              ; Switch to a logarithm version
 570+ 71CF              ; Divide E by divider C Out: A = result, B = rest
 571+ 71CF              E_Div_C:                ZeroA
 571+ 71CF AF          >                        xor a
 572+ 71D0                                      EDivC_Iteration
 572+ 71D0 CB 13       >                        rl  e
 572+ 71D2 17          >                        rla
 572+ 71D3 91          >                        sub c
 572+ 71D4 30 01       >                        jr  nc,.Div8_NoAdd
 572+ 71D6 81          >                        add a,c
 572+ 71D7             >.Div8_NoAdd:
 573+ 71D7                                      EDivC_Iteration
 573+ 71D7 CB 13       >                        rl  e
 573+ 71D9 17          >                        rla
 573+ 71DA 91          >                        sub c
 573+ 71DB 30 01       >                        jr  nc,.Div8_NoAdd
 573+ 71DD 81          >                        add a,c
 573+ 71DE             >.Div8_NoAdd:
 574+ 71DE                                      EDivC_Iteration
 574+ 71DE CB 13       >                        rl  e
 574+ 71E0 17          >                        rla
 574+ 71E1 91          >                        sub c
 574+ 71E2 30 01       >                        jr  nc,.Div8_NoAdd
 574+ 71E4 81          >                        add a,c
 574+ 71E5             >.Div8_NoAdd:
 575+ 71E5                                      EDivC_Iteration
 575+ 71E5 CB 13       >                        rl  e
 575+ 71E7 17          >                        rla
 575+ 71E8 91          >                        sub c
 575+ 71E9 30 01       >                        jr  nc,.Div8_NoAdd
 575+ 71EB 81          >                        add a,c
 575+ 71EC             >.Div8_NoAdd:
 576+ 71EC                                      EDivC_Iteration
 576+ 71EC CB 13       >                        rl  e
 576+ 71EE 17          >                        rla
 576+ 71EF 91          >                        sub c
 576+ 71F0 30 01       >                        jr  nc,.Div8_NoAdd
 576+ 71F2 81          >                        add a,c
 576+ 71F3             >.Div8_NoAdd:
 577+ 71F3                                      EDivC_Iteration
 577+ 71F3 CB 13       >                        rl  e
 577+ 71F5 17          >                        rla
 577+ 71F6 91          >                        sub c
 577+ 71F7 30 01       >                        jr  nc,.Div8_NoAdd
 577+ 71F9 81          >                        add a,c
 577+ 71FA             >.Div8_NoAdd:
 578+ 71FA                                      EDivC_Iteration
 578+ 71FA CB 13       >                        rl  e
 578+ 71FC 17          >                        rla
 578+ 71FD 91          >                        sub c
 578+ 71FE 30 01       >                        jr  nc,.Div8_NoAdd
 578+ 7200 81          >                        add a,c
 578+ 7201             >.Div8_NoAdd:
 579+ 7201                                      EDivC_Iteration
 579+ 7201 CB 13       >                        rl  e
 579+ 7203 17          >                        rla
 579+ 7204 91          >                        sub c
 579+ 7205 30 01       >                        jr  nc,.Div8_NoAdd
 579+ 7207 81          >                        add a,c
 579+ 7208             >.Div8_NoAdd:
 580+ 7208 47                                   ld      b,a
 581+ 7209 7B                                   ld      a,e
 582+ 720A 17                                   rla
 583+ 720B 2F                                   cpl
 584+ 720C C9                                   ret
 585+ 720D
 586+ 720D
 587+ 720D              BCDIVDE_Iteration:      MACRO
 588+ 720D ~                                    rla
 589+ 720D ~                                    adc	    hl,hl
 590+ 720D ~                                    add	    hl,de
 591+ 720D ~                                    jr	    c,1F
 592+ 720D ~                                    sbc	    hl,de
 593+ 720D ~            1:
 594+ 720D                                      ENDM
 595+ 720D
 596+ 720D
 597+ 720D              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 598+ 720D              ;BC/DE ==> BC, remainder in HL
 599+ 720D              ;NOTE: BC/0 returns 0 as the quotient.
 600+ 720D              ;min: 738cc
 601+ 720D              ;max: 898cc
 602+ 720D              ;avg: 818cc
 603+ 720D              ;144 bytes
 604+ 720D AF           BC_Div_DE:              xor a
 605+ 720E 67                                   ld h,a
 606+ 720F 6F                                   ld l,a
 607+ 7210 93                                   sub e
 608+ 7211 5F                                   ld e,a
 609+ 7212 9F                                   sbc a,a
 610+ 7213 92                                   sub d
 611+ 7214 57                                   ld d,a
 612+ 7215 78                                   ld a,b
 613+ 7216                                      BCDIVDE_Iteration
 613+ 7216 17          >                        rla
 613+ 7217 ED 6A       >                        adc	    hl,hl
 613+ 7219 19          >                        add	    hl,de
 613+ 721A 38 02       >                        jr	    c,1F
 613+ 721C ED 52       >                        sbc	    hl,de
 613+ 721E             >1:
 614+ 721E                                      BCDIVDE_Iteration
 614+ 721E 17          >                        rla
 614+ 721F ED 6A       >                        adc	    hl,hl
 614+ 7221 19          >                        add	    hl,de
 614+ 7222 38 02       >                        jr	    c,1F
 614+ 7224 ED 52       >                        sbc	    hl,de
 614+ 7226             >1:
 615+ 7226                                      BCDIVDE_Iteration
 615+ 7226 17          >                        rla
 615+ 7227 ED 6A       >                        adc	    hl,hl
 615+ 7229 19          >                        add	    hl,de
 615+ 722A 38 02       >                        jr	    c,1F
 615+ 722C ED 52       >                        sbc	    hl,de
 615+ 722E             >1:
 616+ 722E                                      BCDIVDE_Iteration
 616+ 722E 17          >                        rla
 616+ 722F ED 6A       >                        adc	    hl,hl
 616+ 7231 19          >                        add	    hl,de
 616+ 7232 38 02       >                        jr	    c,1F
 616+ 7234 ED 52       >                        sbc	    hl,de
 616+ 7236             >1:
 617+ 7236                                      BCDIVDE_Iteration
 617+ 7236 17          >                        rla
 617+ 7237 ED 6A       >                        adc	    hl,hl
 617+ 7239 19          >                        add	    hl,de
 617+ 723A 38 02       >                        jr	    c,1F
 617+ 723C ED 52       >                        sbc	    hl,de
 617+ 723E             >1:
 618+ 723E                                      BCDIVDE_Iteration
 618+ 723E 17          >                        rla
 618+ 723F ED 6A       >                        adc	    hl,hl
 618+ 7241 19          >                        add	    hl,de
 618+ 7242 38 02       >                        jr	    c,1F
 618+ 7244 ED 52       >                        sbc	    hl,de
 618+ 7246             >1:
 619+ 7246                                      BCDIVDE_Iteration
 619+ 7246 17          >                        rla
 619+ 7247 ED 6A       >                        adc	    hl,hl
 619+ 7249 19          >                        add	    hl,de
 619+ 724A 38 02       >                        jr	    c,1F
 619+ 724C ED 52       >                        sbc	    hl,de
 619+ 724E             >1:
 620+ 724E                                      BCDIVDE_Iteration
 620+ 724E 17          >                        rla
 620+ 724F ED 6A       >                        adc	    hl,hl
 620+ 7251 19          >                        add	    hl,de
 620+ 7252 38 02       >                        jr	    c,1F
 620+ 7254 ED 52       >                        sbc	    hl,de
 620+ 7256             >1:
 621+ 7256 17                                   rla
 622+ 7257 47                                   ld b,a
 623+ 7258 79                                   ld a,c
 624+ 7259                                      BCDIVDE_Iteration
 624+ 7259 17          >                        rla
 624+ 725A ED 6A       >                        adc	    hl,hl
 624+ 725C 19          >                        add	    hl,de
 624+ 725D 38 02       >                        jr	    c,1F
 624+ 725F ED 52       >                        sbc	    hl,de
 624+ 7261             >1:
 625+ 7261                                      BCDIVDE_Iteration
 625+ 7261 17          >                        rla
 625+ 7262 ED 6A       >                        adc	    hl,hl
 625+ 7264 19          >                        add	    hl,de
 625+ 7265 38 02       >                        jr	    c,1F
 625+ 7267 ED 52       >                        sbc	    hl,de
 625+ 7269             >1:
 626+ 7269                                      BCDIVDE_Iteration
 626+ 7269 17          >                        rla
 626+ 726A ED 6A       >                        adc	    hl,hl
 626+ 726C 19          >                        add	    hl,de
 626+ 726D 38 02       >                        jr	    c,1F
 626+ 726F ED 52       >                        sbc	    hl,de
 626+ 7271             >1:
 627+ 7271                                      BCDIVDE_Iteration
 627+ 7271 17          >                        rla
 627+ 7272 ED 6A       >                        adc	    hl,hl
 627+ 7274 19          >                        add	    hl,de
 627+ 7275 38 02       >                        jr	    c,1F
 627+ 7277 ED 52       >                        sbc	    hl,de
 627+ 7279             >1:
 628+ 7279                                      BCDIVDE_Iteration
 628+ 7279 17          >                        rla
 628+ 727A ED 6A       >                        adc	    hl,hl
 628+ 727C 19          >                        add	    hl,de
 628+ 727D 38 02       >                        jr	    c,1F
 628+ 727F ED 52       >                        sbc	    hl,de
 628+ 7281             >1:
 629+ 7281                                      BCDIVDE_Iteration
 629+ 7281 17          >                        rla
 629+ 7282 ED 6A       >                        adc	    hl,hl
 629+ 7284 19          >                        add	    hl,de
 629+ 7285 38 02       >                        jr	    c,1F
 629+ 7287 ED 52       >                        sbc	    hl,de
 629+ 7289             >1:
 630+ 7289                                      BCDIVDE_Iteration
 630+ 7289 17          >                        rla
 630+ 728A ED 6A       >                        adc	    hl,hl
 630+ 728C 19          >                        add	    hl,de
 630+ 728D 38 02       >                        jr	    c,1F
 630+ 728F ED 52       >                        sbc	    hl,de
 630+ 7291             >1:
 631+ 7291                                      BCDIVDE_Iteration
 631+ 7291 17          >                        rla
 631+ 7292 ED 6A       >                        adc	    hl,hl
 631+ 7294 19          >                        add	    hl,de
 631+ 7295 38 02       >                        jr	    c,1F
 631+ 7297 ED 52       >                        sbc	    hl,de
 631+ 7299             >1:
 632+ 7299 17                                   rla
 633+ 729A 4F                                   ld c,a
 634+ 729B C9                                   ret
 635+ 729C 78           Floor_DivQSigned:       ld      a,b             ; save resultant sign
 636+ 729D AA                                   xor     d               ;
 637+ 729E E6 80                                and     $80             ;
 638+ 72A0 DD 67                                ld      ixh,a           ;
 639+ 72A2 78                                   ld      a,b
 640+ 72A3 E6 7F                                and     $7F
 641+ 72A5 47                                   ld      b,a
 642+ 72A6 7A                                   ld      a,d
 643+ 72A7 E6 7F                                and     $7F
 644+ 72A9 57                                   ld      d,a
 645+ 72AA CD B2 72                             call    Floor_DivQ
 646+ 72AD 78                                   ld      a,b
 647+ 72AE DD B4                                or      ixh
 648+ 72B0 47                                   ld      b,a
 649+ 72B1 C9                                   ret
 650+ 72B2
 651+ 72B2
 652+ 72B2
 653+ 72B2              ; BC = BC / DE
 654+ 72B2              ; HL = BC % DE
 655+ 72B2              ; if HL > 0 BC -= 1
 656+ 72B2 78           Floor_DivQ:             ld      a,b
 657+ 72B3 B1                                   or      c
 658+ 72B4 28 26                                jr      z, .divide0By   ; if bc is zero just return as result will be zero
 659+ 72B6 7A                                   ld      a,d
 660+ 72B7 B3                                   or      e
 661+ 72B8 28 26                                jr      z, .divideBy0
 662+ 72BA D5                                   push    de
 663+ 72BB CD 0D 72     .DoDivide:              call    BC_Div_DE       ; bc(q0) = bc / de , hl(r0) = bc %de
 664+ 72BE D1                                   pop     de              ; get divisor back to test
 665+ 72BF CB 7A                                bit     7,d             ; if divisor <0 or = 0 goto else branch
 666+ 72C1 C2 D1 72                             jp      nz,.deLTE0
 667+ 72C4 7A                                   ld      a,d
 668+ 72C5 B3                                   or      e
 669+ 72C6 CA D1 72                             jp      z,.deLTE0
 670+ 72C9 CB 7C        .deGT0:                 bit     7,h             ; if remainder >=0 return with no adjustment
 671+ 72CB C8                                   ret     z               ; if remainder was not negative then all done
 672+ 72CC 0B                                   dec     bc              ; else q --
 673+ 72CD                                      ClearCarryFlag          ;      r += b
 673+ 72CD B7          >                        or a
 674+ 72CE ED 5A                                adc     hl,de           ;      .
 675+ 72D0 C9                                   ret
 676+ 72D1 CB 7C        .deLTE0:                bit     7,h             ; if remainder <= 0 retun with no adjustment
 677+ 72D3 C8                                   ret     z               ; (return if negative)
 678+ 72D4 7C                                   ld      a,h
 679+ 72D5 B5                                   or      l               ; (return if zero)
 680+ 72D6 C8                                   ret     z
 681+ 72D7 0B                                   dec     bc              ; else q --
 682+ 72D8                                      ClearCarryFlag          ;      r += b
 682+ 72D8 B7          >                        or a
 683+ 72D9 ED 5A                                adc     hl,de           ;      .
 684+ 72DB C9                                   ret
 685+ 72DC 21 00 00     .divide0By:             ld      hl,0            ; hl = 0, bc is already 0
 686+ 72DF C9                                   ret
 687+ 72E0 21 00 00     .divideBy0:             ld      hl,0
 688+ 72E3 01 01 00                             ld      bc,1
 689+ 72E6 C9                                   ret
 690+ 72E7
 691+ 72E7
 692+ 72E7              L_DIV_0_ITERATION:      MACRO
 693+ 72E7 ~                                    rl      de              ;left shift dividend + quotient carry
 694+ 72E7 ~                                    ex      de,hl
 695+ 72E7 ~                                    rl      de              ;left shift remainder + dividend carry
 696+ 72E7 ~                                    ex      de,hl
 697+ 72E7 ~                                    sub     hl,bc           ;substract divisor from remainder
 698+ 72E7 ~                                    jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 699+ 72E7 ~                                    add     hl,bc           ;revert subtraction of divisor
 700+ 72E7 ~            .skip_revert0:          ccf                     ;complement carry
 701+ 72E7 ~                                    rl      de              ;left shift dividend + quotient carry
 702+ 72E7 ~                                    ex      de,hl
 703+ 72E7 ~                                    rl      de              ;left shift remainder + dividend carry
 704+ 72E7 ~                                    ex      de,hl
 705+ 72E7 ~                                    sub     hl,bc           ;substract divisor from remainder
 706+ 72E7 ~                                    jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 707+ 72E7 ~                                    add     hl,bc           ;revert subtraction of divisor
 708+ 72E7 ~            .skip_revert1:          ccf                     ;complement carry
 709+ 72E7                                      ENDM
 710+ 72E7
 711+ 72E7              ; HL = DE / BC, DE = DE % BC
 712+ 72E7 21 00 00     l_div_0:                ld      hl,0            ;clear remainder
 713+ 72EA                                      L_DIV_0_ITERATION
 713+ 72EA CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 713+ 72EE EB          >                        ex      de,hl
 713+ 72EF CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 713+ 72F3 EB          >                        ex      de,hl
 713+ 72F4 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 713+ 72F7 D2 FB 72    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 713+ 72FA 09          >                        add     hl,bc           ;revert subtraction of divisor
 713+ 72FB 3F          >.skip_revert0:          ccf                     ;complement carry
 713+ 72FC CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 713+ 7300 EB          >                        ex      de,hl
 713+ 7301 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 713+ 7305 EB          >                        ex      de,hl
 713+ 7306 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 713+ 7309 D2 0D 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 713+ 730C 09          >                        add     hl,bc           ;revert subtraction of divisor
 713+ 730D 3F          >.skip_revert1:          ccf                     ;complement carry
 714+ 730E                                      L_DIV_0_ITERATION
 714+ 730E CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 714+ 7312 EB          >                        ex      de,hl
 714+ 7313 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 714+ 7317 EB          >                        ex      de,hl
 714+ 7318 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 714+ 731B D2 1F 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 714+ 731E 09          >                        add     hl,bc           ;revert subtraction of divisor
 714+ 731F 3F          >.skip_revert0:          ccf                     ;complement carry
 714+ 7320 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 714+ 7324 EB          >                        ex      de,hl
 714+ 7325 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 714+ 7329 EB          >                        ex      de,hl
 714+ 732A B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 714+ 732D D2 31 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 714+ 7330 09          >                        add     hl,bc           ;revert subtraction of divisor
 714+ 7331 3F          >.skip_revert1:          ccf                     ;complement carry
 715+ 7332                                      L_DIV_0_ITERATION
 715+ 7332 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 715+ 7336 EB          >                        ex      de,hl
 715+ 7337 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 715+ 733B EB          >                        ex      de,hl
 715+ 733C B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 715+ 733F D2 43 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 715+ 7342 09          >                        add     hl,bc           ;revert subtraction of divisor
 715+ 7343 3F          >.skip_revert0:          ccf                     ;complement carry
 715+ 7344 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 715+ 7348 EB          >                        ex      de,hl
 715+ 7349 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 715+ 734D EB          >                        ex      de,hl
 715+ 734E B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 715+ 7351 D2 55 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 715+ 7354 09          >                        add     hl,bc           ;revert subtraction of divisor
 715+ 7355 3F          >.skip_revert1:          ccf                     ;complement carry
 716+ 7356                                      L_DIV_0_ITERATION
 716+ 7356 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 716+ 735A EB          >                        ex      de,hl
 716+ 735B CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 716+ 735F EB          >                        ex      de,hl
 716+ 7360 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 716+ 7363 D2 67 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 716+ 7366 09          >                        add     hl,bc           ;revert subtraction of divisor
 716+ 7367 3F          >.skip_revert0:          ccf                     ;complement carry
 716+ 7368 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 716+ 736C EB          >                        ex      de,hl
 716+ 736D CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 716+ 7371 EB          >                        ex      de,hl
 716+ 7372 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 716+ 7375 D2 79 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 716+ 7378 09          >                        add     hl,bc           ;revert subtraction of divisor
 716+ 7379 3F          >.skip_revert1:          ccf                     ;complement carry
 717+ 737A                                      L_DIV_0_ITERATION
 717+ 737A CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 717+ 737E EB          >                        ex      de,hl
 717+ 737F CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 717+ 7383 EB          >                        ex      de,hl
 717+ 7384 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 717+ 7387 D2 8B 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 717+ 738A 09          >                        add     hl,bc           ;revert subtraction of divisor
 717+ 738B 3F          >.skip_revert0:          ccf                     ;complement carry
 717+ 738C CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 717+ 7390 EB          >                        ex      de,hl
 717+ 7391 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 717+ 7395 EB          >                        ex      de,hl
 717+ 7396 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 717+ 7399 D2 9D 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 717+ 739C 09          >                        add     hl,bc           ;revert subtraction of divisor
 717+ 739D 3F          >.skip_revert1:          ccf                     ;complement carry
 718+ 739E                                      L_DIV_0_ITERATION
 718+ 739E CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 718+ 73A2 EB          >                        ex      de,hl
 718+ 73A3 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 718+ 73A7 EB          >                        ex      de,hl
 718+ 73A8 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 718+ 73AB D2 AF 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 718+ 73AE 09          >                        add     hl,bc           ;revert subtraction of divisor
 718+ 73AF 3F          >.skip_revert0:          ccf                     ;complement carry
 718+ 73B0 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 718+ 73B4 EB          >                        ex      de,hl
 718+ 73B5 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 718+ 73B9 EB          >                        ex      de,hl
 718+ 73BA B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 718+ 73BD D2 C1 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 718+ 73C0 09          >                        add     hl,bc           ;revert subtraction of divisor
 718+ 73C1 3F          >.skip_revert1:          ccf                     ;complement carry
 719+ 73C2                                      L_DIV_0_ITERATION
 719+ 73C2 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 719+ 73C6 EB          >                        ex      de,hl
 719+ 73C7 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 719+ 73CB EB          >                        ex      de,hl
 719+ 73CC B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 719+ 73CF D2 D3 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 719+ 73D2 09          >                        add     hl,bc           ;revert subtraction of divisor
 719+ 73D3 3F          >.skip_revert0:          ccf                     ;complement carry
 719+ 73D4 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 719+ 73D8 EB          >                        ex      de,hl
 719+ 73D9 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 719+ 73DD EB          >                        ex      de,hl
 719+ 73DE B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 719+ 73E1 D2 E5 73    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 719+ 73E4 09          >                        add     hl,bc           ;revert subtraction of divisor
 719+ 73E5 3F          >.skip_revert1:          ccf                     ;complement carry
 720+ 73E6                                      L_DIV_0_ITERATION
 720+ 73E6 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 720+ 73EA EB          >                        ex      de,hl
 720+ 73EB CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 720+ 73EF EB          >                        ex      de,hl
 720+ 73F0 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 720+ 73F3 D2 F7 73    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 720+ 73F6 09          >                        add     hl,bc           ;revert subtraction of divisor
 720+ 73F7 3F          >.skip_revert0:          ccf                     ;complement carry
 720+ 73F8 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 720+ 73FC EB          >                        ex      de,hl
 720+ 73FD CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 720+ 7401 EB          >                        ex      de,hl
 720+ 7402 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 720+ 7405 D2 09 74    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 720+ 7408 09          >                        add     hl,bc           ;revert subtraction of divisor
 720+ 7409 3F          >.skip_revert1:          ccf                     ;complement carry
 721+ 740A CB 13 CB 12                          rl      de              ;left shift dividend + quotient carry
 722+ 740E EB                                   ex      de,hl           ;dividend<>remainder
 723+ 740F C9                                   ret
 724+ 7410
 725+ 7410
 726+ 7410
 727+ 7410
 728+ 7410 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 729+ 7413              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 729+ 7413 CB 25       >			   sla l
 729+ 7415 CB 14       >			   rl  h
 730+ 7417 7C                                   ld      a,h
 731+ 7418 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 732+ 741A                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 732+ 741A B9          >                        cp      c
 732+ 741B DA 26 74    >                        jp		c, .LL132
 733+ 741E 3F           .LL131:                 ccf                                 ; compliment carry
 734+ 741F 99                                   sbc     a,c                         ; q
 735+ 7420 67                                   ld      h,a                         ; h (s)
 736+ 7421 7D                                   ld      a,l                         ; r
 737+ 7422 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 738+ 7424 37                                   scf                                 ; set carry for next rolls
 739+ 7425 3F                                   ccf
 740+ 7426              .LL132:                 RollDELeft1                         ; Rotate de bits left
 740+ 7426 CB 13       >               rl  e
 740+ 7428 CB 12       >               rl  d
 741+ 742A 38 E7                                jr      c,.LL130                    ;
 742+ 742C EB                                   ex      de,hl                       ; hl = result
 743+ 742D C9                                   ret
 744+ 742E
 745+ 742E
 746+ 742E AF           div_hl_c:               xor	a
 747+ 742F 06 10                                ld	b, 16
 748+ 7431 29           .loop:                  add	hl, hl
 749+ 7432 17                                   rla
 750+ 7433 38 03                                jr	c, $+5
 751+ 7435 B9                                   cp	c
 752+ 7436 38 02                                jr	c, $+4
 753+ 7438 91                                   sub	c
 754+ 7439 2C                                   inc	l
 755+ 743A 10 F5                                djnz	.loop
 756+ 743C C9                                   ret
 757+ 743D              ;l_div, signed division
 758+ 743D              ; comes in with DE and HL
 759+ 743D              ; HL = DE / HL, DE = DE % HL
 760+ 743D 4A           l_div:                  ld      c,d             ;sign of dividend
 761+ 743E 44                                   ld      b,h             ;sign of divisor
 762+ 743F C5                                   push    bc              ;save signs
 763+ 7440 4D                                   ld      c,l             ;divisor to bc
 764+ 7441 7A                                   ld      a,d
 765+ 7442 B7                                   or      a
 766+ 7443 F2 4C 74                             jp      p,.NotDENeg
 767+ 7446              .DeNegate:              macronegate16de
 767+ 7446 AF          >					xor 	a
 767+ 7447 93          >                    sub 	e
 767+ 7448 5F          >                    ld 		e,a
 767+ 7449 9F          >                    sbc 	a,a
 767+ 744A 92          >                    sub 	d
 767+ 744B 57          >                    ld 		d,a
 768+ 744C 78           .NotDENeg:              ld      a,b
 769+ 744D B7                                   or      a
 770+ 744E F2 57 74                             jp      p,.NotBCNeg     ; if signs are opposite them flip
 771+ 7451                                      macronegate16bc
 771+ 7451 AF          >					xor 	a
 771+ 7452 91          >                    sub 	c
 771+ 7453 4F          >                    ld 		c,a
 771+ 7454 9F          >                    sbc 	a,a
 771+ 7455 90          >                    sub 	b
 771+ 7456 47          >                    ld 		b,a
 772+ 7457 CD E7 72     .NotBCNeg:              call    l_div_0         ;unsigned HL = DE / BC, DE = DE % BC
 773+ 745A                                      ; C standard requires that the result of division satisfy a = (a/b)*b + a%b emainder takes sign of the dividend
 774+ 745A C1                                   pop     bc              ;restore sign info
 775+ 745B 78                                   ld      a,b
 776+ 745C A9                                   xor     c               ;quotient, sign of dividend^divisor
 777+ 745D F2 66 74                             jp      p,.NotHLNeg
 778+ 7460                                      macronegate16hl
 778+ 7460 AF          >					xor 	a
 778+ 7461 95          >					sub 	l
 778+ 7462 6F          >					ld 		l,a
 778+ 7463 9F          >					sbc 	a,a
 778+ 7464 94          >					sub 	h
 778+ 7465 67          >					ld 		h,a
 779+ 7466 79           .NotHLNeg:              ld      a,c
 780+ 7467 B7                                   or      a,a             ;remainder, sign of dividend
 781+ 7468 F0                                   ret     p
 782+ 7469                                      macronegate16de
 782+ 7469 AF          >					xor 	a
 782+ 746A 93          >                    sub 	e
 782+ 746B 5F          >                    ld 		e,a
 782+ 746C 9F          >                    sbc 	a,a
 782+ 746D 92          >                    sub 	d
 782+ 746E 57          >                    ld 		d,a
 783+ 746F C9                                   ret
 784+ 7470
# file closed: ../../Maths/asm_divide.asm
 731  7470                  INCLUDE "../../Maths/asm_unitvector.asm"
# file opened: ../../Maths/asm_unitvector.asm
   1+ 7470              asm_tis2:
   2+ 7470              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 7470              ; ">DOES NOT DO SIGNED YET"
   4+ 7470 F5           	push af
   5+ 7471 E6 7F            and SignMask8Bit
   6+ 7473 57           	ld d,a				;; d = A
   7+ 7474 3A 4C 67     	ld a,(varQ)
   8+ 7477 5F           	ld e,a
   9+ 7478 7A           	ld a,d
  10+ 7479 BB           	cp e
  11+ 747A 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 747C 1E 60        	ld e, 96
  13+ 747E ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 7480 EB           	ex de,hl
  15+ 7481 3A 4C 67     	ld a,(varQ)
  16+ 7484 4F           	ld c,a
  17+ 7485 CD BF 71     	call asm_div16
  18+ 7488 F1           	pop af
  19+ 7489 E6 80        	and $80
  20+ 748B B5           	or l
  21+ 748C C9           	ret
  22+ 748D              .tis2_set96:
  23+ 748D F1           	pop af
  24+ 748E E6 80        	and $80
  25+ 7490 F6 96        	or $96
  26+ 7492 C9           	ret
  27+ 7493
  28+ 7493
  29+ 7493              asm_unit_vector:
  30+ 7493              squareregfx:
  31+ 7493 3A D6 C0     	ld a,(UBnkXScaled)
  32+ 7496 57           	ld d,a
  33+ 7497 5F           	ld e,a
  34+ 7498 ED 30        	mul
  35+ 749A EB           	ex de,hl
  36+ 749B              squareregfy:
  37+ 749B 3A D8 C0     	ld a, (UBnkYScaled)
  38+ 749E 57           	ld d,a
  39+ 749F 5F           	ld e,a
  40+ 74A0 ED 30        	mul
  41+ 74A2 19           	add hl,de
  42+ 74A3              squareregfz:
  43+ 74A3 3A DA C0     	ld a, (UBnkZScaled)
  44+ 74A6 57           	ld d,a
  45+ 74A7 5F           	ld e,a
  46+ 74A8 ED 30        	mul
  47+ 74AA 19           	add hl,de
  48+ 74AB EB           	ex de,hl			; de de to number to root
  49+ 74AC              hlequsquareroot:
  50+ 74AC CD DD 6D     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 74AF E5           	push hl				; save it for work 3 copies
  52+ 74B0 E5           	push hl				; save it for work
  53+ 74B1 E5           	push hl				; save it for work
  54+ 74B2              normfx:
  55+ 74B2 3A D6 C0     	ld a,(UBnkXScaled)
  56+ 74B5 E1           	pop hl				; get copy #1
  57+ 74B6 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 74B7 4F           	ld c,a
  59+ 74B8 CD 70 74     	call asm_tis2
  60+ 74BB 32 D6 C0     	ld (UBnkXScaled),a
  61+ 74BE              normfy:
  62+ 74BE 3A D8 C0     	ld a,(UBnkYScaled)
  63+ 74C1 E1           	pop hl				; get copy #2
  64+ 74C2 7D           	ld a,l
  65+ 74C3 4F           	ld c,a
  66+ 74C4 CD 70 74     	call asm_tis2
  67+ 74C7 32 D8 C0     	ld (UBnkYScaled),a
  68+ 74CA              normfz:
  69+ 74CA 3A DA C0     	ld a,(UBnkZScaled)
  70+ 74CD E1           	pop hl				; get copy #2
  71+ 74CE 7D           	ld a,l
  72+ 74CF 4F           	ld c,a
  73+ 74D0 CD 70 74     	call asm_tis2
  74+ 74D3 32 DA C0     	ld (UBnkZScaled),a
  75+ 74D6              asm_unit_vector_end:
  76+ 74D6 C9           	ret
  77+ 74D7
# file closed: ../../Maths/asm_unitvector.asm
 732  74D7                  INCLUDE "../../Maths/compare16.asm"
# file opened: ../../Maths/compare16.asm
   1+ 74D7              ; Input:
   2+ 74D7              ;       HL = 1st value
   3+ 74D7              ;       DE = 2nd value
   4+ 74D7              ; Output:
   5+ 74D7              ;       CF, ZF = results of comparison:
   6+ 74D7              ;
   7+ 74D7              ;               CF      ZF      Result
   8+ 74D7              ;               -----------------------------------
   9+ 74D7              ;               0       0       HL > DE
  10+ 74D7              ;               0       1       HL == DE
  11+ 74D7              ;               1       0       HL < DE
  12+ 74D7              ;               1       1       Impossible
  13+ 74D7              ;
  14+ 74D7
  15+ 74D7
  16+ 74D7 E5           CompareBCDESigned:  push    hl
  17+ 74D8 A7                               and     a
  18+ 74D9 60 69                            ld      hl,bc
  19+ 74DB ED 52                            sbc     hl,de
  20+ 74DD E1                               pop     hl
  21+ 74DE C9                               ret
  22+ 74DF
  23+ 74DF E5           CompareDEBCSigned:  push    hl
  24+ 74E0 A7                               and     a
  25+ 74E1 62 6B                            ld      hl,de
  26+ 74E3 ED 42                            sbc     hl,bc
  27+ 74E5 E1                               pop     hl
  28+ 74E6 C9                               ret
  29+ 74E7
  30+ 74E7
  31+ 74E7              ;### CMPGTE -> test if A>=B
  32+ 74E7              ;### Input      HL=A, DE=B if hl=> de no carry else de > hl and set carry
  33+ 74E7 7C           CompareHLDESgn:     ld a,h
  34+ 74E8 AA                               xor d
  35+ 74E9 FA F3 74                         jp m, .cmpgte2
  36+ 74EC ED 52                            sbc hl,de
  37+ 74EE 30 09                            jr nc, .cmpgte3
  38+ 74F0 19           .cmpgte1            add hl,de
  39+ 74F1                                  SetCarryFlag
  39+ 74F1 37          >                        scf
  40+ 74F2 C9                               ret
  41+ 74F3 CB 7A        .cmpgte2            bit 7,d
  42+ 74F5 28 05                            jr z,.cmpgte4
  43+ 74F7              .cmpgte5:           ClearCarryFlag
  43+ 74F7 B7          >                        or a
  44+ 74F8 C9                               ret
  45+ 74F9 19           .cmpgte3            add hl,de
  46+ 74FA                                  ClearCarryFlag
  46+ 74FA B7          >                        or a
  47+ 74FB C9                               ret
  48+ 74FC              .cmpgte4:           SetCarryFlag
  48+ 74FC 37          >                        scf
  49+ 74FD C9                               ret
  50+ 74FE
  51+ 74FE              ; Compares HL and DE sets z flag if same, else nz
  52+ 74FE 7C           CompareHLDESame:    ld  a,h
  53+ 74FF BA                               cp  d
  54+ 7500 C0                               ret nz
  55+ 7501 7D                               ld  a,l
  56+ 7502 BB                               cp  e
  57+ 7503 C9                               ret
  58+ 7504
  59+ 7504
  60+ 7504
  61+ 7504 7C           CompareHLBCSgn:     ld a,h
  62+ 7505 A8                               xor b
  63+ 7506 FA 0F 75                         jp m, .cmpgte2
  64+ 7509 ED 42                            sbc hl,bc
  65+ 750B 30 06                            jr nc, .cmpgte3
  66+ 750D              .cmpgte1            SetCarryFlag
  66+ 750D 37          >                        scf
  67+ 750E C9                               ret
  68+ 750F CB 78        .cmpgte2            bit 7,b
  69+ 7511 28 FA                            jr z,.cmpgte1
  70+ 7513              .cmpgte3            ClearCarryFlag
  70+ 7513 B7          >                        or a
  71+ 7514 C9                               ret
  72+ 7515
  73+ 7515              CompareHLDESigned:
  74+ 7515 E5           compare16HLDE:      push    hl
  75+ 7516 A7                               and     a
  76+ 7517 ED 52                            sbc     hl,de
  77+ 7519 E1                               pop     hl
  78+ 751A C9                               ret
  79+ 751B              CompareHLBCSigned:
  80+ 751B E5           CompareHLBC:        push    hl
  81+ 751C A7                               and     a
  82+ 751D ED 42                            sbc     hl,bc
  83+ 751F E1                               pop     hl
  84+ 7520 C9                               ret
  85+ 7521
  86+ 7521              ; With compare signed we do ABS comparison
  87+ 7521              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  88+ 7521
  89+ 7521 E5 D5        compare16HLDEABS:   push    hl,,de
  90+ 7523 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  91+ 7524 E6 7F                            and     SignMask8Bit
  92+ 7526 67                               ld      h,a
  93+ 7527 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  94+ 7528 E6 7F                            and     SignMask8Bit
  95+ 752A 57                               ld      d,a
  96+ 752B A7                               and     a
  97+ 752C ED 52                            sbc     hl,de
  98+ 752E D1 E1                            pop     hl,,de
  99+ 7530 C9                               ret
 100+ 7531
 101+ 7531
# file closed: ../../Maths/compare16.asm
 733  7531                  INCLUDE "../../Maths/normalise96.asm"
# file opened: ../../Maths/normalise96.asm
   1+ 7531              ; a equal a / d * 96
   2+ 7531              ; Tested and works with signed numbers
   3+ 7531 DD 7E 01     NormaliseIXVector:      ld		a,(ix+1)			; Vector X high
   4+ 7534 E6 7F                                and		SignMask8Bit        ; a = abs X high
   5+ 7536 57                                   ld      d,a                 ; hl = abs X ^ 2
   6+ 7537 5F                                   ld      e,a                 ; .
   7+ 7538 ED 30                                mul     de                  ; .
   8+ 753A EB                                   ex      de,hl               ; .
   9+ 753B DD 7E 03                             ld		a,(ix+3)			; vector = Y high
  10+ 753E E6 7F                                and		SignMask8Bit        ; unsigned
  11+ 7540 57                                   ld      d,a                 ; de = abs Y ^ 2
  12+ 7541 5F                                   ld      e,a                 ; .
  13+ 7542 ED 30                                mul     de                  ; .
  14+ 7544 19                                   add     hl,de               ; hl = x^2 + y ^2
  15+ 7545 DD 7E 05                             ld		a,(ix+5)			; vector = Z high
  16+ 7548 E6 7F                                and		SignMask8Bit        ; unsigned
  17+ 754A 57                                   ld      d,a                 ; de = abs Z ^ 2
  18+ 754B 5F                                   ld      e,a                 ; .
  19+ 754C ED 30                                mul     de                  ; .
  20+ 754E 19                                   add     hl,de               ; de = x^2 + y ^2 + z ^ 2
  21+ 754F EB                                   ex      de,hl               ; .
  22+ 7550 CD DD 6D     .n96SQRT:               call	asm_sqrt			; hl = sqrt de
  23+ 7553 DD 7E 01     .n96NORMX:              ld		a,(ix+1)
  24+ 7556 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  25+ 7557 CD 89 77                             call	AequAdivDmul96Q8    ; does not use HL so we can retain it
  26+ 755A 47                                   ld		b,a				    ; Sort out restoring sign bit
  27+ 755B 0E 00                                ld      c,0                 ; .
  28+ 755D DD 71 00 DD                          ld		(ix+0),bc           ; .
  28+ 7561 70 01
  29+ 7563 DD 7E 03     .n96NORMY:              ld		a,(ix+3)
  30+ 7566 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  31+ 7567 CD 89 77                             call	AequAdivDmul96Q8	; does not use HL so we can retain it
  32+ 756A 47                                   ld		b,a				    ; Sort out restoring sign bit
  33+ 756B 0E 00                                ld      c,0                 ; .
  34+ 756D DD 71 02 DD                          ld		(ix+2),bc           ; .
  34+ 7571 70 03
  35+ 7573 DD 7E 05     .n96NORMZ:              ld		a,(ix+5)
  36+ 7576 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  37+ 7577 CD 89 77                             call	AequAdivDmul96Q8 	; does not use HL so we can retain it
  38+ 757A 47                                   ld		b,a				    ; Sort out restoring sign bit
  39+ 757B 0E 00                                ld      c,0                 ; .
  40+ 757D DD 71 04 DD                          ld		(ix+4),bc           ; .
  40+ 7581 70 05
  41+ 7583 C9                                   ret
  42+ 7584
  43+ 7584              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  44+ 7584 3A D6 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
  45+ 7587 DD 67                                ld		ixh,a               ; ixh = signed x component
  46+ 7589 E6 7F                                and		SignMask8Bit        ; a = unsigned version
  47+ 758B              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  47+ 758B 5F          >			ld	e,a
  47+ 758C 57          >			ld  d,a
  47+ 758D ED 30       >			mul
  48+ 758F 62                                   ld		h,d					; h == varR d = varO e= varA
  49+ 7590 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  50+ 7591 3A D7 C0     .n96SQY:                ld		a,(XX15VecY)
  51+ 7594 DD 6F                                ld		ixl,a               ; ixl = signed y componet
  52+ 7596 E6 7F                                and		SignMask8Bit                 ; = abs
  53+ 7598                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  53+ 7598 5F          >			ld	e,a
  53+ 7599 57          >			ld  d,a
  53+ 759A ED 30       >			mul
  54+ 759C 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  55+ 759D 3A D8 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  56+ 75A0 FD 67                                ld		iyh,a               ; iyh = signed
  57+ 75A2 E6 7F                                and		SignMask8Bit                 ; unsigned
  58+ 75A4                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  58+ 75A4 5F          >			ld	e,a
  58+ 75A5 57          >			ld  d,a
  58+ 75A6 ED 30       >			mul
  59+ 75A8 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  60+ 75A9 EB                                   ex		de,hl				; hl => de ready for square root
  61+ 75AA CD DD 6D     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  62+ 75AD 3A D6 C0     .n96NORMX:              ld		a,(XX15VecX)
  63+ 75B0 E6 7F                                and		SignMask8Bit
  64+ 75B2 4F                                   ld		c,a
  65+ 75B3 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ 75B4 CD 3F 77                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  67+ 75B7 47                                   ld		b,a				    ;++SGN
  68+ 75B8 DD 7C                                ld		a,ixh			    ;++SGN
  69+ 75BA E6 80                                and		$80				    ;++SGN
  70+ 75BC B0                                   or		b				    ;++SGN
  71+ 75BD 32 D6 C0                             ld		(XX15VecX),a
  72+ 75C0 3A D7 C0     .n96NORMY:              ld		a,(XX15VecY)
  73+ 75C3 E6 7F                                and		SignMask8Bit
  74+ 75C5 4F                                   ld		c,a
  75+ 75C6 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  76+ 75C7 CD 3F 77                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  77+ 75CA 47                                   ld		b,a				    ;++SGN
  78+ 75CB DD 7D                                ld		a,ixl			    ;++SGN
  79+ 75CD E6 80                                and		$80				    ;++SGN
  80+ 75CF B0                                   or		b				    ;++SGN
  81+ 75D0 32 D7 C0                             ld		(XX15VecY),a
  82+ 75D3 3A D8 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  83+ 75D6 E6 7F                                and		SignMask8Bit
  84+ 75D8 4F                                   ld		c,a
  85+ 75D9 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  86+ 75DA CD 3F 77                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  87+ 75DD 47                                   ld		b,a				    ;++SGN
  88+ 75DE FD 7C                                ld		a,iyh			    ;++SGN
  89+ 75E0 E6 80                                and		$80				    ;++SGN
  90+ 75E2 B0                                   or		b				    ;++SGN
  91+ 75E3 32 D8 C0                             ld		(XX15VecZ),a
  92+ 75E6 C9                                   ret
  93+ 75E7
  94+ 75E7              ; Normalise vector
  95+ 75E7              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  96+ 75E7              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  97+ 75E7              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  98+ 75E7              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  99+ 75E7
 100+ 75E7                      IFNDEF DEBUG_NO_TACTICS_CODE
 101+ 75E7 ~            ;------------------------------------------------------------
 102+ 75E7 ~            ; To normalise the 24 bit version, bring out sign into TargetVectorxsgn
 103+ 75E7 ~            ; and make UBnKTargetXpos = abs (UBnKTargetXPos)
 104+ 75E7 ~            ; set up UBnKTarget[XYZ]Pos with 7 bit version of vector normalised
 105+ 75E7 ~            ; set up UBnKTargetpXYZ]Sgn with the sign bit
 106+ 75E7 ~            NormalseUnivTarget:     ld      a,(UBnKTargetXPos+2)
 107+ 75E7 ~                                    ld      b,a
 108+ 75E7 ~                                    and     $80
 109+ 75E7 ~                                    ld      (UBnKTargetXPosSgn),a        ; Split out the sign into byte 3
 110+ 75E7 ~                                    ld      a,b
 111+ 75E7 ~                                    and     $7F
 112+ 75E7 ~                                    ld      (UBnKTargetXPos+2),a
 113+ 75E7 ~            .ABSYComponenet:        ld      a,(UBnKTargetYPos+2)
 114+ 75E7 ~                                    ld      b,a
 115+ 75E7 ~                                    and     $80
 116+ 75E7 ~                                    ld      (UBnKTargetYPosSgn),a        ; Split out the sign into byte 3
 117+ 75E7 ~                                    ld      a,b
 118+ 75E7 ~                                    and     $7F
 119+ 75E7 ~                                    ld      (UBnKTargetYPos+2),a
 120+ 75E7 ~            .ABSXZomponenet:        ld      a,(UBnKTargetZPos+2)
 121+ 75E7 ~                                    ld      b,a
 122+ 75E7 ~                                    and     $80
 123+ 75E7 ~                                    ld      (UBnKTargetZPosSgn),a        ; Split out the sign into byte 3
 124+ 75E7 ~                                    ld      a,b
 125+ 75E7 ~                                    and     $7F
 126+ 75E7 ~                                    ld      (UBnKTargetZPos+2),a
 127+ 75E7 ~            ;.. When we hit here the UBnKTargetX,Y and Z are 24 bit abs values to simplify scaling
 128+ 75E7 ~            .Scale:                 ld      hl, (TacticsVectorX)        ; pull 24 bit into registers
 129+ 75E7 ~                                    ld      a,(TacticsVectorX+2)        ; h l ixH = X
 130+ 75E7 ~                                    ld      ixh,a                       ;
 131+ 75E7 ~                                    ld      de, (TacticsVectorY)        ; d e iyH = Y
 132+ 75E7 ~                                    ld      a,(TacticsVectorY+2)        ;
 133+ 75E7 ~                                    ld      iyh,a                       ;
 134+ 75E7 ~                                    ld      bc, (TacticsVectorZ)        ; b c iyL = Y
 135+ 75E7 ~                                    ld      a,(TacticsVectorZ+2)        ;
 136+ 75E7 ~                                    ld      iyl,a                       ;
 137+ 75E7 ~            .ScaleLoop1:            ld      a,ixh                       ; first pass get to 16 bit
 138+ 75E7 ~                                    or      iyh
 139+ 75E7 ~                                    or      iyl
 140+ 75E7 ~                                    or      iyh
 141+ 75E7 ~                                    jp      z,.DoneScaling1
 142+ 75E7 ~                                    ShiftIXhHLRight1
 143+ 75E7 ~                                    ShiftIYhDERight1
 144+ 75E7 ~                                    ShiftIYlBCRight1
 145+ 75E7 ~            .DoneScaling1:          ;-- Now we have got here hl = X, de = Y, bc = Z
 146+ 75E7 ~                                    ;-- we cal just jump into the Normalize Tactics code
 147+ 75E7 ~            .ScaleLoop2:            ld      a,h
 148+ 75E7 ~                                    or      d
 149+ 75E7 ~                                    or      b
 150+ 75E7 ~                                    jr      z,.DoneScaling2
 151+ 75E7 ~                                    ShiftHLRight1
 152+ 75E7 ~                                    ShiftDERight1
 153+ 75E7 ~                                    ShiftBCRight1
 154+ 75E7 ~                                    jp      .ScaleLoop2
 155+ 75E7 ~            ;-- Now we are down to 8 bit values, so we need to scale again to get S7
 156+ 75E7 ~            .DoneScaling2:          ShiftHLRight1
 157+ 75E7 ~                                    ShiftDERight1
 158+ 75E7 ~                                    ShiftBCRight1
 159+ 75E7 ~            .CalculateLength:       push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 160+ 75E7 ~                                    ld      d,e                         ; hl = y ^ 2
 161+ 75E7 ~                                    mul     de                          ; .
 162+ 75E7 ~                                    ex      de,hl                       ; .
 163+ 75E7 ~                                    ld      d,e                         ; de = x ^ 2
 164+ 75E7 ~                                    mul     de                          ; .
 165+ 75E7 ~                                    add     hl,de                       ; hl = y^ 2 + x ^ 2
 166+ 75E7 ~                                    ld      d,c
 167+ 75E7 ~                                    ld      e,c
 168+ 75E7 ~                                    mul     de
 169+ 75E7 ~                                    add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 170+ 75E7 ~                                    ex      de,hl                       ; fix as hl was holding square
 171+ 75E7 ~                                    call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 172+ 75E7 ~                                    ; add in logic if h is low then use lower bytes for all
 173+ 75E7 ~            .NormaliseZ:            ld      a,l                         ; save length into iyh
 174+ 75E7 ~                                    ld      iyh,a                       ; .
 175+ 75E7 ~                                    ld      d,a                         ;
 176+ 75E7 ~                                    pop     bc                          ; retrive z scaled
 177+ 75E7 ~                                    ld      a,c                         ; a = scaled byte
 178+ 75E7 ~                                    call    AequAdivDmul967Bit
 179+ 75E7 ~                                    ld      (TacticsVectorZ),a          ; now Tactics Vector Z byte 1 is value
 180+ 75E7 ~            .NormaliseY:            pop     de
 181+ 75E7 ~                                    ld      a,e
 182+ 75E7 ~                                    ld      d,iyh
 183+ 75E7 ~                                    call    AequAdivDmul967Bit
 184+ 75E7 ~                                    ld      (TacticsVectorY),a
 185+ 75E7 ~            .NormaliseX:            pop     hl
 186+ 75E7 ~                                    ld      a,l
 187+ 75E7 ~                                    ld      d,iyh
 188+ 75E7 ~                                    call    AequAdivDmul967Bit
 189+ 75E7 ~                                    ld      (TacticsVectorX),a          ;
 190+ 75E7 ~                                    ret
 191+ 75E7 ~
 192+ 75E7 ~                        DISPLAY "TODO: Missle AI only works on S15 spread over 24 bits, i.e. ignores Sign byte 7 bits"
 193+ 75E7 ~            ;-- This norallises the Tactics vector in memory as much as possible, uses 16 bits
 194+ 75E7 ~            NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 195+ 75E7 ~                                    ld      de, (TacticsVectorY)        ; .
 196+ 75E7 ~                                    ld      bc, (TacticsVectorZ)        ; .
 197+ 75E7 ~            .ScaleLoop:             ld      a,h
 198+ 75E7 ~                                    or      d
 199+ 75E7 ~                                    or      b
 200+ 75E7 ~                                    jr      z,.DoneScaling
 201+ 75E7 ~                                    ShiftHLRight1
 202+ 75E7 ~                                    ShiftDERight1
 203+ 75E7 ~                                    ShiftBCRight1
 204+ 75E7 ~                                    jp      .ScaleLoop
 205+ 75E7 ~            .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 206+ 75E7 ~                                    ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 207+ 75E7 ~                                    ShiftBCRight1                       ; now values are in L E C
 208+ 75E7 ~                                    push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 209+ 75E7 ~                                    ld      d,e                         ; hl = y ^ 2
 210+ 75E7 ~                                    mul     de                          ; .
 211+ 75E7 ~                                    ex      de,hl                       ; .
 212+ 75E7 ~                                    ld      d,e                         ; de = x ^ 2
 213+ 75E7 ~                                    mul     de                          ; .
 214+ 75E7 ~                                    add     hl,de                       ; hl = y^ 2 + x ^ 2
 215+ 75E7 ~                                    ld      d,c
 216+ 75E7 ~                                    ld      e,c
 217+ 75E7 ~                                    mul     de
 218+ 75E7 ~                                    add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 219+ 75E7 ~                                    ex      de,hl                       ; fix as hl was holding square
 220+ 75E7 ~                                    call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 221+ 75E7 ~                                    ; add in logic if h is low then use lower bytes for all
 222+ 75E7 ~                                    ld      a,l
 223+ 75E7 ~                                    ld      iyh,a
 224+ 75E7 ~                                    ld      d,a
 225+ 75E7 ~                                    pop     bc                          ; retrive tacticsvectorz scaled
 226+ 75E7 ~                                    ld      a,c                         ; a = scaled byte
 227+ 75E7 ~                                    call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 228+ 75E7 ~                                    ld      (TacticsVectorZ),a
 229+ 75E7 ~                                    pop     de
 230+ 75E7 ~                                    ld      a,e
 231+ 75E7 ~                                    ld      d,iyh
 232+ 75E7 ~                                    call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 233+ 75E7 ~                                    ld      (TacticsVectorY),a
 234+ 75E7 ~                                    pop     hl
 235+ 75E7 ~                                    ld      a,l
 236+ 75E7 ~                                    ld      d,iyh
 237+ 75E7 ~                                    call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 238+ 75E7 ~                                    ld      (TacticsVectorX),a
 239+ 75E7 ~                                    ; BODGE FOR NOW
 240+ 75E7 ~                                    ZeroA                              ;; added to help debugging
 241+ 75E7 ~                                    ld      (TacticsVectorX+1),a       ;; added to help debugging
 242+ 75E7 ~                                    ld      (TacticsVectorY+1),a       ;; added to help debugging
 243+ 75E7 ~                                    ld      (TacticsVectorZ+1),a       ;; added to help debugging
 244+ 75E7 ~                                    SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 245+ 75E7 ~                                    SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 246+ 75E7 ~                                    SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 247+ 75E7 ~                                  ;; oly using byte 2 for sign  ldCopyByte TacticsVectorX+2, TacticsVectorX+1
 248+ 75E7 ~                                  ;; oly using byte 2 for sign  ldCopyByte TacticsVectorY+2, TacticsVectorY+1
 249+ 75E7 ~                                  ;; oly using byte 2 for sign  ldCopyByte TacticsVectorZ+2, TacticsVectorZ+1
 250+ 75E7 ~                                  ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorX+1     ; now upper byte is sign only
 251+ 75E7 ~                                  ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorY+1     ; (could move it to lower perhaps later if
 252+ 75E7 ~                                  ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorZ+1     ;  its worth it)
 253+ 75E7 ~                                    ret
 254+ 75E7                      ENDIF
 255+ 75E7
# file closed: ../../Maths/normalise96.asm
 734  75E7                  INCLUDE "../../Maths/binary_to_decimal.asm"
# file opened: ../../Maths/binary_to_decimal.asm
   1+ 75E7              ;Number in hl to decimal ASCII
   2+ 75E7              ;Thanks to z80 Bits
   3+ 75E7              ;inputs:	hl = number to ASCII
   4+ 75E7              ;example: hl=300 outputs '00300'
   5+ 75E7              ;destroys: af, bc, hl, de used
   6+ 75E7              DispHLtoDE:
   7+ 75E7              ; "DispHL, writes HL to DE address"
   8+ 75E7 01 F0 D8     	ld	bc,-10000
   9+ 75EA CD 00 76     	call	Num1
  10+ 75ED 01 18 FC     	ld	bc,-1000
  11+ 75F0 CD 00 76     	call	Num1
  12+ 75F3 01 9C FF     	ld	bc,-100
  13+ 75F6 CD 00 76     	call	Num1
  14+ 75F9 0E F6        	ld	c,-10
  15+ 75FB CD 00 76     	call	Num1
  16+ 75FE 0E FF        	ld	c,-1
  17+ 7600              Num1:
  18+ 7600 3E 2F        	ld	a,'0'-1
  19+ 7602              .Num2:
  20+ 7602 3C           	inc	a
  21+ 7603 09           	add	hl,bc
  22+ 7604 38 FC        	jr	c,.Num2
  23+ 7606 ED 42        	sbc	hl,bc
  24+ 7608 12           	ld	(de),a
  25+ 7609 13           	inc	de
  26+ 760A C9           	ret
  27+ 760B
  28+ 760B              DispAtoDE:
  29+ 760B 26 00        	ld h,0
  30+ 760D 6F           	ld l,a
  31+ 760E C3 E7 75     	jp DispHLtoDE
  32+ 7611
  33+ 7611              DispPriceAtoDE:
  34+ 7611 26 00        	ld h,0
  35+ 7613 6F           	ld l,a
  36+ 7614 01 9C FF     	ld	bc,-100
  37+ 7617 CD 27 76     	call	.NumLeadBlank1
  38+ 761A 0E F6        	ld	c,-10
  39+ 761C CD 00 76     	call	Num1
  40+ 761F 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 7621                                  DISPLAY "TODO:  optimise "
  42+ 7621 12           	ld		(de),a					; we can optimse that later TODO
  43+ 7622 13           	inc		de						; with just an inc De
  44+ 7623 0E FF        	ld	c,-1
  45+ 7625 18 D9        	jr		Num1
  46+ 7627              .NumLeadBlank1:
  47+ 7627 3E 2F        	ld	a,'0'-1
  48+ 7629              .NumLeadBlank2:
  49+ 7629 3C           	inc	a
  50+ 762A 09           	add	hl,bc
  51+ 762B 38 FC        	jr	c,.NumLeadBlank2
  52+ 762D FE 30        	cp	'0'
  53+ 762F 20 02        	jr	nz,.DontBlank
  54+ 7631              .Blank:
  55+ 7631 3E 20        	ld	a,' '
  56+ 7633              .DontBlank:
  57+ 7633 ED 42        	sbc	hl,bc
  58+ 7635 12           	ld	(de),a
  59+ 7636 13           	inc	de
  60+ 7637 C9           	ret
  61+ 7638
  62+ 7638              DispQtyAtoDE:
  63+ 7638 FE 00        	cp	0
  64+ 763A 28 23        	jr	z,.NoStock
  65+ 763C 26 00        	ld h,0
  66+ 763E 6F           	ld l,a
  67+ 763F 01 9C FF     	ld	bc,-100
  68+ 7642 CD 4E 76     	call	.NumLeadBlank1
  69+ 7645 0E F6        	ld	c,-10
  70+ 7647 CD 4E 76     	call	.NumLeadBlank1
  71+ 764A 0E FF        	ld	c,-1
  72+ 764C 18 B2        	jr		Num1
  73+ 764E              .NumLeadBlank1:
  74+ 764E 3E 2F        	ld	a,'0'-1
  75+ 7650              .NumLeadBlank2:
  76+ 7650 3C           	inc	a
  77+ 7651 09           	add	hl,bc
  78+ 7652 38 FC        	jr	c,.NumLeadBlank2
  79+ 7654 FE 30        	cp	'0'
  80+ 7656 20 02        	jr	nz,.DontBlank
  81+ 7658              .Blank:
  82+ 7658 3E 20        	ld	a,' '
  83+ 765A              .DontBlank:
  84+ 765A ED 42        	sbc	hl,bc
  85+ 765C 12           	ld	(de),a
  86+ 765D 13           	inc	de
  87+ 765E C9           	ret
  88+ 765F              .NoStock:
  89+ 765F 3E 20        	ld	a,' '
  90+ 7661 12           	ld	(de),a
  91+ 7662 13           	inc	de
  92+ 7663 12           	ld	(de),a
  93+ 7664 13           	inc	de
  94+ 7665 3E 2D        	ld	a,'-'
  95+ 7667 12           	ld	(de),a
  96+ 7668 13           	inc de
  97+ 7669 C9           	ret
  98+ 766A
  99+ 766A
 100+ 766A              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 101+ 766A              ;### Input      DE,IX=32bit value, IY=destination address
 102+ 766A              ;### Output     IY=last char in destination string
 103+ 766A              ;### Destroyed AF,BC,DE,HL,IX
 104+ 766A 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 104+ 766E 0A 00 00 00
 104+ 7672 64 00 00 00
 104+ 7676 E8 03 00 00
 104+ 767A 10 27 00 00
 105+ 767E A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 105+ 7682 40 42 0F 00
 105+ 7686 80 96 98 00
 105+ 768A 00 E1 F5 05
 105+ 768E 00 CA 9A 3B
 106+ 7692 00 00 00 00  clcn32z ds 4
 107+ 7696
 108+ 7696              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 109+ 7696 CD A5 76     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 110+ 7699 FD 7E 00                             ld      a,(IY+0)
 111+ 769C FD 77 01                             ld      (IY+1),a
 112+ 769F 3E 2E                                ld      a,"."
 113+ 76A1 FD 77 00                             ld      (IY+0),a
 114+ 76A4 C9                                   ret
 115+ 76A5
 116+ 76A5 DD 22 92 76  DispDEIXtoIY:           ld (clcn32z),ix
 117+ 76A9 ED 53 94 76                          ld (clcn32z+2),de
 118+ 76AD DD 21 8E 76                          ld ix,clcn32t+36
 119+ 76B1 06 09                                ld b,9
 120+ 76B3 0E 00                                ld c,0
 121+ 76B5 3E 30        .clcn321:               ld a,'0'
 122+ 76B7 B7                                   or a
 123+ 76B8 DD 5E 00     .clcn322:               ld e,(ix+0)
 124+ 76BB DD 56 01                             ld d,(ix+1)
 125+ 76BE 2A 92 76                             ld hl,(clcn32z)
 126+ 76C1 ED 52                                sbc hl,de
 127+ 76C3 22 92 76                             ld (clcn32z),hl
 128+ 76C6 DD 5E 02                             ld e,(ix+2)
 129+ 76C9 DD 56 03                             ld d,(ix+3)
 130+ 76CC 2A 94 76                             ld hl,(clcn32z+2)
 131+ 76CF ED 52                                sbc hl,de
 132+ 76D1 22 94 76                             ld (clcn32z+2),hl
 133+ 76D4 38 04                                jr c,.clcn325
 134+ 76D6 0C                                   inc c
 135+ 76D7 3C                                   inc a
 136+ 76D8 18 DE                                jr .clcn322
 137+ 76DA DD 5E 00     .clcn325:               ld e,(ix+0)
 138+ 76DD DD 56 01                             ld d,(ix+1)
 139+ 76E0 2A 92 76                             ld hl,(clcn32z)
 140+ 76E3 19                                   add hl,de
 141+ 76E4 22 92 76                             ld (clcn32z),hl
 142+ 76E7 DD 5E 02                             ld e,(ix+2)
 143+ 76EA DD 56 03                             ld d,(ix+3)
 144+ 76ED 2A 94 76                             ld hl,(clcn32z+2)
 145+ 76F0 ED 5A                                adc hl,de
 146+ 76F2 22 94 76                             ld (clcn32z+2),hl
 147+ 76F5 11 FC FF                             ld de,-4
 148+ 76F8 DD 19                                add ix,de
 149+ 76FA 0C                                   inc c
 150+ 76FB 0D                                   dec c
 151+ 76FC 28 05                                jr z,.clcn323
 152+ 76FE FD 77 00                             ld (iy+0),a
 153+ 7701 FD 23                                inc iy
 154+ 7703 10 B0        .clcn323:               djnz .clcn321
 155+ 7705 3A 92 76                             ld a,(clcn32z)
 156+ 7708 C6 30                                add A,'0'
 157+ 770A FD 77 00                             ld (iy+0),a
 158+ 770D FD 36 01 00                          ld (iy+1),0
 159+ 7711 C9                                   ret
 160+ 7712
# file closed: ../../Maths/binary_to_decimal.asm
 735  7712                  INCLUDE "../../Maths/asm_AequAdivQmul96.asm" ; AequAdivDmul96
# file opened: ../../Maths/asm_AequAdivQmul96.asm
   1+ 7712              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 7712 BA          >                        cp     d
   1+ 7713 D2 2E 77    >                        jp		nc,.TIS2AccGTEQ
   2+ 7716 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 7718 CB 27        .TIS2RollTLoop:			sla			a
   4+ 771A                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 771A BA          >                        cp      d
   4+ 771B DA 31 77    >                        jp		c, .TIS2SkipSub
   5+ 771E 9A                                   sbc			a,d							; do subtraction with carry
   6+ 771F 37                                   scf
   7+ 7720 CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 7722 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 7724 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 7725 CB 3F                                srl			a							; result / 2
  11+ 7727 CB 3F                                srl			a							; result / 4
  12+ 7729 47                                   ld			b,a							; t = t /4
  13+ 772A CB 3F                                srl			a							; result / 8
  14+ 772C 80                                   add			a,b							; result /8 + result /4
  15+ 772D C9                                   ret
  16+ 772E 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 7730 C9                                   ret
  18+ 7731 B7           .TIS2SkipSub:           or			a
  19+ 7732 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 7734 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 7736 C3 24 77                             jp			.TIS2SKIPCont
  22+ 7739
  23+ 7739
  24+ 7739              ;; USES 			A DE BC
  25+ 7739              ;; DOES NOT USE 	HL
  26+ 7739              ;TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 7739              ;	bit			        7,a
  28+ 7739              ;	jr			        z,AequAdivQmul96
  29+ 7739              ;	neg			        							; revers 2s'c and just set neg bit
  30+ 7739              ;	set			        7,a
  31+ 7739              ;; Note negative numbers are bit 7 set not 2's compliment
  32+ 7739              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 7739              TIS2:
  34+ 7739 4F                                   ld			c,a							; copy of Acc
  35+ 773A 3A 4C 67                             ld			a,(varQ)
  36+ 773D 57                                   ld			d,a							; d = varQ
  37+ 773E 79                                   ld			a,c							; recover a
  38+ 773F 4F           AequAdivDmul967Bit:     ld          c,a
  39+ 7740 7A                                   ld          a,d
  40+ 7741 CB 27                                sla         a       ; wipe sign bit
  41+ 7743 C8                                   ret         z       ; quick exit if dividing 0 as a will have the result of 0
  42+ 7744 30 10                                jr          nc, .OKToDivide
  43+ 7746 B7           .ScaleDown:             or          a       ; clear carry bit
  44+ 7747 CB 3A                                srl         d       ; d >> 1 to get back to 7 bit value
  45+ 7749 79                                   ld          a,c
  46+ 774A E6 7F                                and         SignMask8Bit
  47+ 774C CB 3F                                srl         a
  48+ 774E 47                                   ld          b,a
  49+ 774F 79                                   ld          a,c
  50+ 7750 E6 80                                and         $80
  51+ 7752 B0                                   or          b
  52+ 7753 C3 57 77                             jp          AequAdivDmul96
  53+ 7756 79           .OKToDivide:            ld          a,c
  54+ 7757 4F           AequAdivDmul96:         ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  55+ 7758 E6 7F                                and			SignMask8Bit				; ignore sign
  56+ 775A                                      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  56+ 775A BA          >                        cp     d
  56+ 775B D2 7B 77    >                        jp		nc,.TIS2AccGTEQ
  57+ 775E 06 FE                                ld			b,$FE						; division roll (replaced varT)
  58+ 7760              .TIS2RollTLoop:									; .TIL2	; roll T
  59+ 7760 CB 27                                sla			a
  60+ 7762                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  60+ 7762 BA          >                        cp      d
  60+ 7763 DA 81 77    >                        jp		c, .TIS2SkipSub
  61+ 7766 9A                                   sbc			a,d							; do subtraction with carry
  62+ 7767 37                                   scf                                     ; set carrry to roll into b
  63+ 7768 CB 10                                rl			b							; T rolled left to push bit out the end
  64+ 776A 38 F4                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  65+ 776C 78           .TIS2SKIPCont:	        ld			a,b							; A = T = 4 / 4
  66+ 776D CB 3F                                srl			a							; .
  67+ 776F CB 3F                                srl			a							; .
  68+ 7771 47                                   ld			b,a							; .
  69+ 7772 CB 3F                                srl			a							; A = A / 2 (i.e. T /8)
  70+ 7774 80                                   add			a,b							; A = T/8 + T/4 (3T/8)
  71+ 7775 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  72+ 7776 79                                   ld			a,c							; copy of Acc to look at sign bit
  73+ 7777 E6 80                                and			$80							; recover sign only
  74+ 7779 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  75+ 777A C9                                   ret
  76+ 777B              ;TI4:										;\ clean to +/- unity
  77+ 777B 79           .TIS2AccGTEQ:           ld			a,c
  78+ 777C E6 80                                and			$80							; copy of Acc
  79+ 777E F6 60                                or			$60							; unity
  80+ 7780 C9                                   ret
  81+ 7781              .TIS2SkipSub:           ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  81+ 7781 B7          >                        or a
  82+ 7782 CB 10                                rl			b							; T rolled left to push bit out the end
  83+ 7784 38 DA                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  84+ 7786 C3 6C 77                             jp			.TIS2SKIPCont
  85+ 7789
  86+ 7789
  87+ 7789
  88+ 7789              ; as per AequAdivDmul967Bit but Q is an 8 bit unsigned
  89+ 7789              ; a = a(S7)/Q(8u)*96
  90+ 7789 4F           AequAdivDmul96Q8:       ld          c,a                         ; c = a
  91+ 778A 7A           .CheckDivide0:          ld          a,d                         ; check if its a / 0
  92+ 778B A7                                   and         a                           ; .
  93+ 778C CA B3 77                             jp          z,.TIS2AccGTEQ              ; .
  94+ 778F 79           .NotDivide0:            ld          a,c                         ; get back value of A
  95+ 7790 E6 7F                                and         SignMask8Bit                ; and make it abs, so a = abs(a) c = original a
  96+ 7792                                      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  96+ 7792 BA          >                        cp     d
  96+ 7793 D2 B3 77    >                        jp		nc,.TIS2AccGTEQ
  97+ 7796 06 FE                                ld			b,$FE						; division roll (replaced varT)
  98+ 7798              .TIS2RollTLoop:									; .TIL2	; roll T
  99+ 7798 CB 27                                sla			a
 100+ 779A                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
 100+ 779A BA          >                        cp      d
 100+ 779B DA B9 77    >                        jp		c, .TIS2SkipSub
 101+ 779E 9A                                   sbc			a,d							; do subtraction with carry
 102+ 779F 37                                   scf                                     ; set carrry to roll into b
 103+ 77A0 CB 10                                rl			b							; T rolled left to push bit out the end
 104+ 77A2 38 F4                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
 105+ 77A4 78           .TIS2SKIPCont:	        ld			a,b							; A = T = 4 / 4
 106+ 77A5 CB 3F                                srl			a							; .
 107+ 77A7 CB 3F                                srl			a							; .
 108+ 77A9 47                                   ld			b,a							; .
 109+ 77AA CB 3F                                srl			a							; A = A / 2 (i.e. T /8)
 110+ 77AC 80                                   add			a,b							; A = T/8 + T/4 (3T/8)
 111+ 77AD 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
 112+ 77AE 79                                   ld			a,c							; copy of Acc to look at sign bit
 113+ 77AF E6 80                                and			SignOnly8Bit    			; recover sign only
 114+ 77B1 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
 115+ 77B2 C9                                   ret
 116+ 77B3              ;TI4:										;\ clean to +/- unity
 117+ 77B3 79           .TIS2AccGTEQ:           ld			a,c
 118+ 77B4 E6 80                                and			$80							; copy of Acc
 119+ 77B6 F6 60                                or			$60							; unity
 120+ 77B8 C9                                   ret
 121+ 77B9              .TIS2SkipSub:           ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
 121+ 77B9 B7          >                        or a
 122+ 77BA CB 10                                rl			b							; T rolled left to push bit out the end
 123+ 77BC 38 DA                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
 124+ 77BE C3 A4 77                             jp			.TIS2SKIPCont
 125+ 77C1
 126+ 77C1
# file closed: ../../Maths/asm_AequAdivQmul96.asm
 736  77C1                  INCLUDE "../../Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ../../Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 77C1              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 77C1              fmltu:
   3+ 77C1 57           AequAmulQdiv256:        ld	d,a
   4+ 77C2 3A 4C 67                             ld	a,(varQ)
   5+ 77C5 5F                                   ld	e,a
   6+ 77C6 ED 30                                mul
   7+ 77C8 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 77C9 C9                                   ret
   9+ 77CA
  10+ 77CA 5F           AequAmulDdiv256:        ld  e,a
  11+ 77CB ED 30                                mul
  12+ 77CD 7A                                   ld  a,d
  13+ 77CE C9                                   ret
  14+ 77CF
# file closed: ../../Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 737  77CF                  ;INCLUDE "../../Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
 738  77CF                  INCLUDE "../../Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ../../Maths/Utilities/APequQmulA-MULT1.asm
   1+ 77CF              APequQmulA:
   2+ 77CF              asm_mult1:
   3+ 77CF              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 77CF FE 00        	cp	0
   5+ 77D1 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 77D3 5F           	ld	e,a
   7+ 77D4 3A 4C 67     	ld	a,(varQ)
   8+ 77D7 57           	ld	d,a
   9+ 77D8 FE 00        	cp	0				; compare a
  10+ 77DA 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 77DC AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 77DD E6 80        	and $80				; get the resultant sign and save into b
  13+ 77DF 47           	ld	b,a
  14+ 77E0 7A           	ld	a,d
  15+ 77E1 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 77E3 57           	ld	d,a
  17+ 77E4 7B           	ld	a,e
  18+ 77E5 E6 7F        	and SignMask8Bit
  19+ 77E7 5F           	ld	e,a
  20+ 77E8 ED 30        	mul					; zxn de = d * e
  21+ 77EA 7B           	ld	a,e
  22+ 77EB 32 4C 66     	ld	(varP),a		; p = lo
  23+ 77EE 7A           	ld	a,d				; a = hi
  24+ 77EF B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 77F0 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 77F1 C9           	ret
  27+ 77F2              .mul0:
  28+ 77F2 AF           	xor	a
  29+ 77F3 32 4C 66     	ld	(varP),a
  30+ 77F6 57           	ld	d,a
  31+ 77F7 5F           	ld  e,a
  32+ 77F8 C9           	ret
  33+ 77F9
# file closed: ../../Maths/Utilities/APequQmulA-MULT1.asm
 739  77F9                  INCLUDE "../../Maths/Utilities/badd_ll38.asm"
# file opened: ../../Maths/Utilities/badd_ll38.asm
   1+ 77F9              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 77F9              SAEquSRPlusAQ:
   3+ 77F9              ; Calculate the following between sign-magnitude numbers:
   4+ 77F9              ;   (S A) = (S R) + (A Q)
   5+ 77F9              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 77F9              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 77F9              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 77F9              LL38:
   9+ 77F9              ;	ld		d,a
  10+ 77F9              ;	ld		a,(varQ)
  11+ 77F9              ;	ld		e,a
  12+ 77F9              ;	ld		a,(varS)
  13+ 77F9              ;	ld		h,a
  14+ 77F9              ;	ld		a,(varR)
  15+ 77F9              ;	ld		l,a
  16+ 77F9              ;	call	ADDHLDESignedv3
  17+ 77F9              ;	ld		a,h
  18+ 77F9              ;	ld		(varS),a
  19+ 77F9              ;	ld		a,l
  20+ 77F9              ;	ret
  21+ 77F9              ; calculation table
  22+ 77F9              ;   R     Q    Op            Sign calc
  23+ 77F9              ;	10    5    Add           +    sign same add R sign
  24+ 77F9              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 77F9              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 77F9              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 77F9              ;   5    10    Add           +    sign same add R sign
  28+ 77F9              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 77F9              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 77F9              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 77F9
  32+ 77F9              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 77F9              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 77F9              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 77F9              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 77F9
  37+ 77F9
  38+ 77F9              ; Calculate sign for Q from A and varS
  39+ 77F9 21 4E 67     	ld		hl,varS							;
  40+ 77FC AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 77FD FA 08 78     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 7800 3A 4C 67     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 7803 21 4D 67     	ld		hl,varR
  44+ 7806 86           	add		a,(hl)							; a = Q + R
  45+ 7807 C9           	ret										; Done carry set if overflow
  46+ 7808              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 7808 3A 4D 67     	ld		a,(varR)						; a = R
  48+ 780B 21 4C 67     	ld		hl,varQ                         ; Q
  49+ 780E              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 780E              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 780E B7          >                        or a
  51+ 780F 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 7810 38 01            jr      c,.LL39SignCorrection
  53+ 7812              ;--    jr      a,.LL39ResultZero
  54+ 7812              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 7812              ;--	or		a								; Clear carry flag to say result is correct
  56+ 7812 C9           	ret
  57+ 7813              .LL39SignCorrection:
  58+ 7813 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 7815 28 0E            jr      z,.LL39ResultZero
  60+ 7817 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 7819 08           	ex		af,af'							; save A temporarily
  62+ 781A 3A 4E 67     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 781D EE 80        	xor		$80							    ;
  64+ 781F 32 4E 67     	ld		(varS),a                        ; flip sign bit of a
  65+ 7822 08           	ex		af,af'                          ; get back a which is the result
  66+ 7823                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 7823 B7          >                        or a
  67+ 7824 C9           	ret
  68+ 7825              .LL39ResultZero:
  69+ 7825 32 4E 67         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 7828                  ClearCarryFlag                          ; clear carry
  70+ 7828 B7          >                        or a
  71+ 7829 C9               ret
  72+ 782A              ;--LL39SwapSubtraction:
  73+ 782A              ;--	push	bc
  74+ 782A              ;--	ld		b,a
  75+ 782A              ;--	ld		a,(hl)
  76+ 782A              ;--	sub		b
  77+ 782A              ;--	pop		bc
  78+ 782A              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 782A              ;--	ld		a,(varS)
  80+ 782A              ;--	xor		$80
  81+ 782A              ;--	ld		(varS),a
  82+ 782A              ;--	ex		af,af'
  83+ 782A              ;--	ret
  84+ 782A
  85+ 782A              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 782A              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 782A              ;;;;;   (S A) = (S R) + (A Q)
  88+ 782A              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 782A              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 782A              ;;;;LL38:
  91+ 782A              ;;;;; Calculate sign for Q from A and varS
  92+ 782A              ;;;;	ld		hl,varS							;
  93+ 782A              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 782A              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 782A              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 782A              ;;;;	ld		hl,varR
  97+ 782A              ;;;;	add		a,(hl)							; a = Q + R
  98+ 782A              ;;;;	ret										; Done
  99+ 782A              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 782A              ;;;;	ld		hl,varQ                         ;
 101+ 782A              ;;;;	ld		a,(hl)
 102+ 782A              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 782A              ;;;;	ld		a,(varR)						;
 104+ 782A              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 782A              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 782A              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 782A              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 782A              ;;;;	ret
 109+ 782A              ;;;;.SignCorrection:
 110+ 782A              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 782A              ;;;;	ex		af,af'							; save A temporarily
 112+ 782A              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 782A              ;;;;	xor		$80							    ;
 114+ 782A              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 782A              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 782A              ;;;;	ret
 117+ 782A              ;;;;LL39Sub16Bit:
 118+ 782A              ;;;;	ld		e,a
 119+ 782A              ;;;;	ld		d,0
 120+ 782A              ;;;;	ld		a,(varR)
 121+ 782A              ;;;;	ld		l,a
 122+ 782A              ;;;;	ld		h,0
 123+ 782A              ;;;;	ClearCarryFlag
 124+ 782A              ;;;;	sbc		hl,de
 125+ 782A              ;;;;	jr		c,.SignCorrection16bit
 126+ 782A              ;;;;	bit		7,h
 127+ 782A              ;;;;	jr		z,.GoodToReturn
 128+ 782A              ;;;;.Needtonegate:
 129+ 782A              ;;;;	macronegate16hl
 130+ 782A              ;;;;.GoodToReturn
 131+ 782A              ;;;;	ld		a,l
 132+ 782A              ;;;;	or		a
 133+ 782A              ;;;;	ret
 134+ 782A              ;;;;.SignCorrection16bit:
 135+ 782A              ;;;;	macronegate16hl
 136+ 782A              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 782A              ;;;;	xor		$80							    ;
 138+ 782A              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 782A              ;;;;	ld		a,l
 140+ 782A              ;;;;	ret
 141+ 782A
 142+ 782A
# file closed: ../../Maths/Utilities/badd_ll38.asm
 740  782A               ;   INCLUDE "../../Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
 741  782A               ;   INCLUDE "../../Maths/Utilities/RequAdivQ-LL61.asm"
 742  782A               ;   INCLUDE "../../Maths/Utilities/RSequQmulA-MULT12.asm"
 743  782A                  include "../../Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ../../Universe/Ships/CopyRotMattoXX15.asm
   1+ 782A              CopyRotMatNoseVtoXX15:
   2+ 782A                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 782A 3A 37 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 782D 32 D6 C0    >                        ld       (XX15VecX),a
   3+ 7830                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 7830 3A 39 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 7833 32 D7 C0    >                        ld       (XX15VecY),a
   4+ 7836                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 7836 3A 3B C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 7839 32 D8 C0    >                        ld       (XX15VecZ),a
   5+ 783C C9                   ret
   6+ 783D
   7+ 783D              CopyRotMatRoofVtoXX15:
   8+ 783D                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 783D 3A 31 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 7840 32 D6 C0    >                        ld       (XX15VecX),a
   9+ 7843                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 7843 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 7846 32 D7 C0    >                        ld       (XX15VecY),a
  10+ 7849                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 7849 3A 35 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 784C 32 D8 C0    >                        ld       (XX15VecZ),a
  11+ 784F C9                   ret
  12+ 7850
  13+ 7850              CopyRotMatSideVtoXX15:
  14+ 7850                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 7850 3A 2B C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 7853 32 D6 C0    >                        ld       (XX15VecX),a
  15+ 7856                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 7856 3A 2D C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 7859 32 D7 C0    >                        ld       (XX15VecY),a
  16+ 785C                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 785C 3A 2F C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 785F 32 D8 C0    >                        ld       (XX15VecZ),a
  17+ 7862 C9                   ret
  18+ 7863
# file closed: ../../Universe/Ships/CopyRotMattoXX15.asm
 744  7863                  include "../../Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ../../Universe/Ships/CopyXX15toRotMat.asm
   1+ 7863              CopyXX15toRotMatNoseV:
   2+ 7863                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 7863 3A D6 C0    >                        ld       a,(XX15VecX)
   2+ 7866 32 37 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 7869                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 7869 3A D7 C0    >                        ld       a,(XX15VecY)
   3+ 786C 32 39 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 786F                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 786F 3A D8 C0    >                        ld       a,(XX15VecZ)
   4+ 7872 32 3B C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 7875                      ZeroA
   5+ 7875 AF          >                        xor a
   6+ 7876 32 36 C0             ld  (UBnkrotmatNosevX),a
   7+ 7879 32 38 C0             ld  (UBnkrotmatNosevY),a
   8+ 787C 32 3A C0             ld  (UBnkrotmatNosevZ),a
   9+ 787F C9                   ret
  10+ 7880
  11+ 7880              CopyXX15toRotMatRoofV:
  12+ 7880                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 7880 3A D6 C0    >                        ld       a,(XX15VecX)
  12+ 7883 32 31 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 7886                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 7886 3A D7 C0    >                        ld       a,(XX15VecY)
  13+ 7889 32 33 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 788C                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 788C 3A D8 C0    >                        ld       a,(XX15VecZ)
  14+ 788F 32 35 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 7892                      ZeroA
  15+ 7892 AF          >                        xor a
  16+ 7893 32 30 C0             ld  (UBnkrotmatRoofvX),a
  17+ 7896 32 32 C0             ld  (UBnkrotmatRoofvY),a
  18+ 7899 32 34 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 789C C9                   ret
  20+ 789D
  21+ 789D              CopyXX15toRotMatSideV:
  22+ 789D                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 789D 3A D6 C0    >                        ld       a,(XX15VecX)
  22+ 78A0 32 2B C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 78A3                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 78A3 3A D7 C0    >                        ld       a,(XX15VecY)
  23+ 78A6 32 2D C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 78A9                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 78A9 3A D8 C0    >                        ld       a,(XX15VecZ)
  24+ 78AC 32 2F C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 78AF                      ZeroA
  25+ 78AF AF          >                        xor a
  26+ 78B0 32 2A C0             ld  (UBnkrotmatSidevX),a
  27+ 78B3 32 2C C0             ld  (UBnkrotmatSidevY),a
  28+ 78B6 32 2E C0             ld  (UBnkrotmatSidevZ),a
  29+ 78B9 C9                   ret
  30+ 78BA
# file closed: ../../Universe/Ships/CopyXX15toRotMat.asm
 745  78BA                  INCLUDE "../../Maths/asm_tidy.asm"
# file opened: ../../Maths/asm_tidy.asm
   1+ 78BA              ; d = vector 1 e = vector 2 h = vector3 l = vector 4 b = vector 5
   2+ 78BA              ; performs (d*e + h*l) / b and puts the result in de where e is 0
   3+ 78BA C5           TidyCalc:       push    bc
   4+ 78BB CD E5 6B                     call    mulDbyESigned           ; de = vector 1 * vector 2
   5+ 78BE EB                           ex      hl,de                   ; get hl into de and save result of de
   6+ 78BF CD E5 6B                     call    mulDbyESigned           ; de = vector 2 * vector 3
   7+ 78C2 CD 04 00                     call    AddDEtoHLSigned         ; BC = HL = HL + DE
   8+ 78C5 D1                           pop     de                      ; DE = BC saved from earlier
   9+ 78C6 7C                           ld      a,h                     ; check for result 0
  10+ 78C7 B5                           or      l                       ; .
  11+ 78C8 CA E9 78                     jp      z,.ZeroResult           ; .
  12+ 78CB 44 4D                        ld      bc,hl                   ; .
  13+ 78CD 7A                           ld      a,d                     ; check for divide by zero
  14+ 78CE A7                           and     a                       ; .
  15+ 78CF CA E0 78                     jp      z,.MaxedResult          ; .
  16+ 78D2 5A                           ld      e,d                     ; now de = 0b (i.e. b register not hex value)
  17+ 78D3 16 00                        ld      d,0                     ;
  18+ 78D5 CD 9C 72                     call    Floor_DivQSigned        ; TO BE TESTED should do BC = BC / DE
  19+ 78D8 78                           ld      a,b                     ; sign bit from b
  20+ 78D9 E6 80                        and     $80                     ; .
  21+ 78DB B1                           or      c                       ; bring in the value
  22+ 78DC 57                           ld      d,a                     ; de = c0 (i.e. c register not hex value)
  23+ 78DD 1E 00                        ld      e,0                     ; .
  24+ 78DF C9                           ret
  25+ 78E0 78           .MaxedResult:   ld      a,b                     ; make result signed unity (i.e. 1 or 96 in our case)
  26+ 78E1 EE 80                        xor     $80
  27+ 78E3 F6 60                        or      $60
  28+ 78E5 57                           ld      d,a
  29+ 78E6 1E 00                        ld      e,0
  30+ 78E8 C9                           ret
  31+ 78E9 11 00 00     .ZeroResult:    ld      de,0
  32+ 78EC C9                           ret
  33+ 78ED              ; as per tidy calc except
  34+ 78ED              ; d = vector 1 e = vector 2 h = vector3 l = vector 4
  35+ 78ED              ; performs (d*e - h*l) / 96 and puts the result in de where e is 0
  36+ 78ED
  37+ 78ED CD E5 6B     TidySide:       call    mulDbyESigned           ; de = vector 1 * vector 2
  38+ 78F0 EB                           ex      de,hl                   ; get hl = vector 1 * vector 2
  39+ 78F1 CD E5 6B                     call    mulDbyESigned           ; de = vector 2 * vector 3
  40+ 78F4 CD 00 00                     call    SubDEfromHLSigned       ; BC = HL = HL - DE
  41+ 78F7 44 4D                        ld      bc,hl                   ; .
  42+ 78F9 11 60 00                     ld      de,$60                  ; now de = 96
  43+ 78FC CD 9C 72                     call    Floor_DivQSigned        ; TO BE TESTED should do BC = BC / DE
  44+ 78FF 78                           ld      a,b                     ; sign bit from b
  45+ 7900 E6 80                        and     $80                     ; .
  46+ 7902 B1                           or      c                       ; bring in the value
  47+ 7903 57                           ld      d,a                     ; de = c0 (i.e. c register not hex value)
  48+ 7904 1E 00                        ld      e,0                     ; .
  49+ 7906 C9                           ret
  50+ 7907
  51+ 7907              ;; orthonormalise vector for UBnK ship vector uses IX IT
  52+ 7907                  DISPLAY "TidyVectorsIX"
  53+ 7907 DD 21 36 C0  TidyVectorsIX:  ld      ix,UBnkrotmatNosevX
  54+ 790B CD 31 75                     call    NormaliseIXVector       ; initially we normalise the nose vector
  55+ 790E 3A 37 C0     .CheckNoseXSize:ld      a,(UBnkrotmatNosevX+1)  ; a = nose x
  56+ 7911 E6 30                        and     %00110000                ; if bits 7 and 6 are clear the work with nosey
  57+ 7913 CA 47 79                     jp      z, .NoseXSmall
  58+ 7916              ;-- When nosex is large ------------------------  roofv_x =-(nosev_y * roofv_y + nosev_z * roofv_z) / nosev_x
  59+ 7916 3A 39 C0     .NoseXLarge:    ld      a,(UBnkrotmatNosevY+1)  ; a = nose x
  60+ 7919 57                           ld      d,a
  61+ 791A 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)  ; hl = nosev_y * roofv_y
  62+ 791D 5F                           ld      e,a                     ; we already have d so only need roofY
  63+ 791E 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)  ; de = nosev_z * roofv_z
  64+ 7921 67                           ld      h,a                     ; .
  65+ 7922 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)  ; .
  66+ 7925 6F                           ld      l,a                     ; .
  67+ 7926 3A 37 C0                     ld      a,(UBnkrotmatNosevX+1)
  68+ 7929 47                           ld      b,a
  69+ 792A CD BA 78                     call    TidyCalc
  70+ 792D 7A                           ld      a,d
  71+ 792E B3                           or      e
  72+ 792F CA 36 79                     jp      z,.NoRoofXFlip
  73+ 7932 3E 80                        ld      a,$80                   ; flip sign bit if not zero
  74+ 7934 AA                           xor     d
  75+ 7935 57                           ld      d,a
  76+ 7936 ED 53 30 C0  .NoRoofXFlip:   ld      (UBnkrotmatRoofvX),de   ; write roofvx
  77+ 793A C3 A2 79                     jp      .NormaliseRoofv
  78+ 793D 11 00 E0     .MaxedRoofX:    ld      de,$E000                ; TEST if sign is correct for all of these if was divide by zero make it -1
  79+ 7940 ED 53 30 C0                  ld      (UBnkrotmatRoofvX),de   ; write roofvx
  80+ 7944 C3 A2 79                     jp      .NormaliseRoofv
  81+ 7947              ;-- When noseX is small ------------------------ determine if we are doign roofz or roof y
  82+ 7947 3A 38 C0     .NoseXSmall:    ld      a,(UBnkrotmatNosevY)
  83+ 794A E6 60                        and     %01100000
  84+ 794C CA 7A 79                     jp      z,.NoseYSmall
  85+ 794F              ;-- When noseY is large ------------------------ roofv_z = -(nosev_x * roofv_x + nosev_y * roofv_y) / nosev_z
  86+ 794F 3A 37 C0     .NoseYLarge:    ld      a,(UBnkrotmatNosevX+1)
  87+ 7952 57                           ld      d,a
  88+ 7953 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
  89+ 7956 5F                           ld      e,a
  90+ 7957 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
  91+ 795A 67                           ld      h,a
  92+ 795B 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
  93+ 795E 6F                           ld      l,a
  94+ 795F 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
  95+ 7962 47                           ld      b,a
  96+ 7963 CD BA 78                     call    TidyCalc
  97+ 7966 7A                           ld      a,d
  98+ 7967 B3                           or      e
  99+ 7968 CA 73 79                     jp      z,.NoRoofZFlip
 100+ 796B 3E 80                        ld      a,$80                   ; flip sign bit if not zero
 101+ 796D AA                           xor     d
 102+ 796E 57                           ld      d,a
 103+ 796F 3E 80                        ld      a,$80                   ; flip sign bit
 104+ 7971 AA                           xor     d
 105+ 7972 57                           ld      d,a
 106+ 7973 ED 53 34 C0  .NoRoofZFlip:   ld      (UBnkrotmatRoofvZ),de   ; write roofvz
 107+ 7977 C3 A2 79                     jp      .NormaliseRoofv
 108+ 797A              ;-- When noseY is large ------------------------ roofv_y = -(nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y
 109+ 797A 3A 37 C0     .NoseYSmall:    ld      a,(UBnkrotmatNosevX+1)
 110+ 797D 57                           ld      d,a
 111+ 797E 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 112+ 7981 5F                           ld      e,a
 113+ 7982 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
 114+ 7985 67                           ld      h,a
 115+ 7986 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 116+ 7989 6F                           ld      l,a
 117+ 798A 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
 118+ 798D 47                           ld      b,a
 119+ 798E CD BA 78                     call    TidyCalc
 120+ 7991 7A                           ld      a,d
 121+ 7992 B3                           or      e
 122+ 7993 CA 9E 79                     jp      z,.NoRoofYFlip
 123+ 7996 3E 80                        ld      a,$80                   ; flip sign bit if not zero
 124+ 7998 AA                           xor     d
 125+ 7999 57                           ld      d,a
 126+ 799A 3E 80                        ld      a,$80                   ; flip sign bit
 127+ 799C AA                           xor     d
 128+ 799D 57                           ld      d,a
 129+ 799E ED 53 32 C0  .NoRoofYFlip:   ld      (UBnkrotmatRoofvY),de   ; write roofvy
 130+ 79A2 DD 21 30 C0  .NormaliseRoofv:ld      ix,UBnkrotmatRoofvX     ; now normalise roofv
 131+ 79A6 CD 31 75                     call    NormaliseIXVector
 132+ 79A9              ; -- sidev_x = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 133+ 79A9 3A 3B C0     .CalcSidevX:    ld      a,(UBnkrotmatNosevZ+1)
 134+ 79AC 57                           ld      d,a
 135+ 79AD 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
 136+ 79B0 5F                           ld      e,a
 137+ 79B1 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
 138+ 79B4 67                           ld      h,a
 139+ 79B5 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 140+ 79B8 6F                           ld      l,a
 141+ 79B9 CD ED 78                     call    TidySide
 142+ 79BC ED 53 2A C0                  ld      (UBnkrotmatSidevX),de   ; write sidevX
 143+ 79C0              ; -- sidev_y = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 144+ 79C0 3A 37 C0     .CalcSidevY:    ld      a,(UBnkrotmatNosevX+1)
 145+ 79C3 57                           ld      d,a
 146+ 79C4 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 147+ 79C7 5F                           ld      e,a
 148+ 79C8 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
 149+ 79CB 67                           ld      h,a
 150+ 79CC 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 151+ 79CF 6F                           ld      l,a
 152+ 79D0 CD ED 78                     call    TidySide
 153+ 79D3 ED 53 2C C0                  ld      (UBnkrotmatSidevY),de   ; write sidevX
 154+ 79D7              ; -- sidev_z = (nosev_y * roofv_x - nosev_x * roofv_y) / 96
 155+ 79D7 3A 39 C0     .CalcSidevZ:    ld      a,(UBnkrotmatNosevY+1)
 156+ 79DA 57                           ld      d,a
 157+ 79DB 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 158+ 79DE 5F                           ld      e,a
 159+ 79DF 3A 37 C0                     ld      a,(UBnkrotmatNosevX+1)
 160+ 79E2 67                           ld      h,a
 161+ 79E3 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
 162+ 79E6 6F                           ld      l,a
 163+ 79E7 CD ED 78                     call    TidySide
 164+ 79EA ED 53 2E C0                  ld      (UBnkrotmatSidevZ),de   ; write sidevX
 165+ 79EE                          IFDEF ROUND_ROLL_AND_PITCH
 166+ 79EE ~            .ClearLowBytes: ld      hl,UBnkrotmatSidevX
 167+ 79EE ~                            ZeroA
 168+ 79EE ~                            ld      b,9
 169+ 79EE ~            .WriteLoop:     ld      (hl),a
 170+ 79EE ~                            inc     hl
 171+ 79EE ~                            inc     hl
 172+ 79EE ~                            djnz    .WriteLoop
 173+ 79EE                          ENDIF
 174+ 79EE C9                           ret
 175+ 79EF
# file closed: ../../Maths/asm_tidy.asm
 746  79EF               ;   INCLUDE "../../Maths/Utilities/LL28AequAmul256DivD.asm"
 747  79EF               ;   INCLUDE "../../Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
 748  79EF                  INCLUDE "../../Menus/common_menu.asm"
# file opened: ../../Menus/common_menu.asm
   1+ 79EF 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ 79F3 41 4E 44 45
   1+ 79F7 52 00
   2+ 79F9 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ 79FD 4E 54 4F 52
   2+ 7A01 59 00
   3+ 7A03 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ 7A07 65 6E 74 20
   3+ 7A0B 53 79 73 74
   3+ 7A0F 65 6D 20 20
   3+ 7A13 20 3A 00
   4+ 7A16 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ 7A1A 72 73 70 61
   4+ 7A1E 63 65 20 53
   4+ 7A22 79 73 74 65
   4+ 7A26 6D 3A 00
   5+ 7A29 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ 7A2D 69 74 69 6F
   5+ 7A31 6E 20 20 20
   5+ 7A35 3A 00
   6+ 7A37 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ 7A3B 20 20 20 20
   6+ 7A3F 20 20 20 20
   6+ 7A43 3A 00
   7+ 7A45 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ 7A49 20 20 20 20
   7+ 7A4D 20 20 20 20
   7+ 7A51 3A 00
   8+ 7A53 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ 7A57 6C 20 53 74
   8+ 7A5B 61 74 75 73
   8+ 7A5F 3A 00
   9+ 7A61 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ 7A65 6E 67 20 20
   9+ 7A69 20 20 20 20
   9+ 7A6D 3A 00
  10+ 7A6F 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ 7A73 50 4D 45 4E
  10+ 7A77 54 3A 00
  11+ 7A7A
  12+ 7A7A 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ 7A7E 20 4C 69 67
  12+ 7A82 68 74 20 59
  12+ 7A86 65 61 72 73
  12+ 7A8A 00
  13+ 7A8B 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ 7A8F 58 58 58 58
  13+ 7A93 58 58 00
  14+ 7A96 2E           txt_cash_decimal        DB "."
  15+ 7A97 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ 7A9B 00
  16+ 7A9C
  17+ 7A9C              txt_status_colour		equ $FF
  18+ 7A9C
  19+ 7A9C              ;;DEFUNCTprint_boiler_text_l2:
  20+ 7A9C              ;;DEFUNCT; ">print_boilder_text hl = text structure, b = message count"
  21+ 7A9C              ;;DEFUNCTBoilerTextLoop:
  22+ 7A9C              ;;DEFUNCT	push		bc			; Save Message Count loop value
  23+ 7A9C              ;;DEFUNCT	ld			c,(hl)		; Get Row into b
  24+ 7A9C              ;;DEFUNCT	inc			hl
  25+ 7A9C              ;;DEFUNCT	ld			b,(hl)		; Get Col into b
  26+ 7A9C              ;;DEFUNCT	inc			hl
  27+ 7A9C              ;;DEFUNCT	ld			e,(hl)		; Get text address Lo into E
  28+ 7A9C              ;;DEFUNCT	inc			hl
  29+ 7A9C              ;;DEFUNCT	ld			d,(hl)		; Get text address Hi into E
  30+ 7A9C              ;;DEFUNCT	inc			hl
  31+ 7A9C              ;;DEFUNCT	push		hl			; Save present HL to stack as this is the address for the next message
  32+ 7A9C              ;;DEFUNCT	ex			de,hl		; now hl = address of text data
  33+ 7A9C              ;;DEFUNCT	ld			e,txt_status_colour
  34+ 7A9C              ;;DEFUNCT    MMUSelectLayer2
  35+ 7A9C              ;;DEFUNCT	call		l1_print_at
  36+ 7A9C              ;;DEFUNCT	pop			hl
  37+ 7A9C              ;;DEFUNCT	pop			bc
  38+ 7A9C              ;;DEFUNCT	djnz		BoilerTextLoop
  39+ 7A9C              ;;DEFUNCT	ret
  40+ 7A9C
  41+ 7A9C
  42+ 7A9C              ;:DEFUNCT print_boiler_text:
  43+ 7A9C              ;:DEFUNCT ; ">print_boilder_text hl = text structure, b = message count"
  44+ 7A9C              ;:DEFUNCT .BoilerTextLoop:
  45+ 7A9C              ;:DEFUNCT 	push		bc			; Save Message Count loop value
  46+ 7A9C              ;:DEFUNCT 	ld			c,(hl)		; Get Row into b
  47+ 7A9C              ;:DEFUNCT 	inc			hl
  48+ 7A9C              ;:DEFUNCT 	ld			b,(hl)		; Get Col into b
  49+ 7A9C              ;:DEFUNCT 	inc			hl
  50+ 7A9C              ;:DEFUNCT 	ld			e,(hl)		; Get text address Lo into E
  51+ 7A9C              ;:DEFUNCT 	inc			hl
  52+ 7A9C              ;:DEFUNCT 	ld			d,(hl)		; Get text address Hi into E
  53+ 7A9C              ;:DEFUNCT 	inc			hl
  54+ 7A9C              ;:DEFUNCT 	push		hl			; Save present HL to stack as this is the address for the next message
  55+ 7A9C              ;:DEFUNCT 	ex			de,hl		; now hl = address of text data
  56+ 7A9C              ;:DEFUNCT 	ld			e,txt_status_colour
  57+ 7A9C              ;:DEFUNCT 	push		bc
  58+ 7A9C              ;:DEFUNCT 	pop			de
  59+ 7A9C              ;:DEFUNCT 	call		l1_print_at
  60+ 7A9C              ;:DEFUNCT 	pop			hl
  61+ 7A9C              ;:DEFUNCT 	pop			bc
  62+ 7A9C              ;:DEFUNCT 	djnz		.BoilerTextLoop
  63+ 7A9C              ;:DEFUNCT 	ret
  64+ 7A9C
  65+ 7A9C              ;;DEFUNCTGetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
  66+ 7A9C
  67+ 7A9C              ;;DEFUNCTGetCash:                ld      hl,(Cash)
  68+ 7A9C              ;;DEFUNCT                        ex      de,hl
  69+ 7A9C              ;;DEFUNCT                        ld      ix,(Cash+2)
  70+ 7A9C              ;;DEFUNCT                        ld		iy,txt_cash_amount
  71+ 7A9C              ;;DEFUNCT                        call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ 7A9C              ;;DEFUNCT.ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ 7A9C              ;;DEFUNCT                        ld		(txt_cash_fraction),a
  74+ 7A9C              ;;DEFUNCT.UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ 7A9C              ;;DEFUNCT                        ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ 7A9C              ;;DEFUNCT                        cp		0
  77+ 7A9C              ;;DEFUNCT                        ret		z
  78+ 7A9C              ;;DEFUNCT                        ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ 7A9C              ;;DEFUNCT                        ret
  80+ 7A9C
# file closed: ../../Menus/common_menu.asm
 749  7A9C              MainNonBankedCodeEnd:
 750  7A9C                  DISPLAY "Main Non Banked Code Ends at ",$
 751  7A9C
 752  7A9C              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 753  7A9C                  SLOT    LAYER1Addr
 754  7A9C                  PAGE    BankLAYER1
 755  7A9C                  ORG     LAYER1Addr, BankLAYER1
 756  E000 42 61 6E 6B  Layer1Header:  DB "Bank L1 Utils--"
 756  E004 20 4C 31 20
 756  E008 55 74 69 6C
 756  E00C 73 2D 2D
 757  E00F
 758  E00F                  INCLUDE "../../Layer1Graphics/layer1_attr_utils.asm"
# file opened: ../../Layer1Graphics/layer1_attr_utils.asm
   1+ E00F
   2+ E00F 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E011 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E013 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E015 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E017 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E019 A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E01B C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E01D E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E01F 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E021 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E023 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E025 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E027 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E029 A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E02B C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E02D E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E02F 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E031 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E033 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E035 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E037 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E039 A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E03B C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E03D E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E03F
  27+ E03F              ; "l2_hilight_row, d = row, e = colour"
  28+ E03F 21 0F E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E042 4B                                   ld      c,e
  30+ E043 7A                                   ld      a,d
  31+ E044 CB 27                                sla     a
  32+ E046 ED 31                                add     hl,a
  33+ E048 7E                                   ld      a,(hl)
  34+ E049 5F                                   ld      e,a
  35+ E04A 23                                   inc     hl
  36+ E04B 7E                                   ld      a,(hl)
  37+ E04C 57                                   ld      d,a
  38+ E04D EB                                   ex      hl,de
  39+ E04E 79                                   ld		a,c
  40+ E04F 11 20 00                             ld		de, 32
  41+ E052 CD C8 65                             call	memfill_dma
  42+ E055 C9                                   ret
  43+ E056
# file closed: ../../Layer1Graphics/layer1_attr_utils.asm
 759  E056                  INCLUDE "../../Layer1Graphics/layer1_cls.asm"
# file opened: ../../Layer1Graphics/layer1_cls.asm
   1+ E056 AF           l1_cls_top:             xor     a
   2+ E057 21 00 40                             ld      hl, $4000
   3+ E05A 11 00 08                             ld      de, $0800
   4+ E05D CD C8 65                             call    memfill_dma
   5+ E060 C9                                   ret
   6+ E061
   7+ E061 AF           l1_cls_mid:             xor     a
   8+ E062 21 00 48                             ld      hl, $4800
   9+ E065 11 00 08                             ld      de, $0800
  10+ E068 CD C8 65                             call    memfill_dma
  11+ E06B C9                                   ret
  12+ E06C
  13+ E06C AF           l1_cls_bottom:          xor     a
  14+ E06D 21 00 50                             ld      hl, $5000
  15+ E070 11 00 08                             ld      de, $0800
  16+ E073 CD C8 65                             call    memfill_dma
  17+ E076 C9                                   ret
  18+ E077
  19+ E077              ; Designed specifically to clear a whole character aligned line
  20+ E077 1E 00        l1_cls_line_d:          ld      e,0
  21+ E079 ED 94                                pixelad
  22+ E07B 11 00 01                             ld      de,32 * 8
  23+ E07E AF                                   xor     a
  24+ E07F CD C8 65                             call    memfill_dma
  25+ E082 C9                                   ret
  26+ E083
  27+ E083              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E083 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E085 ED 94                                pixelad
  30+ E087 11 00 02                             ld      de,32 * 16
  31+ E08A AF                                   xor     a
  32+ E08B CD C8 65                             call    memfill_dma
  33+ E08E C9                                   ret
  34+ E08F
  35+ E08F AF           l1_cls:                 xor		a
  36+ E090 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E093 11 00 18                             ld		de, $1800
  38+ E096 CD C8 65                             call	memfill_dma
  39+ E099 C9                                   ret
  40+ E09A
  41+ E09A 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E09D 1E 20                                ld      e,32
  43+ E09F ED 30                                mul
  44+ E0A1 19                                   add     hl,de
  45+ E0A2 11 40 00                             ld		de, 32 * 2
  46+ E0A5 CD C8 65                             call	memfill_dma
  47+ E0A8 C9                                   ret
  48+ E0A9
  49+ E0A9
  50+ E0A9 AF           l1_attr_cls:            xor		a
  51+ E0AA 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E0AD 11 00 03                             ld		de, $0300
  53+ E0B0 CD C8 65                             call	memfill_dma
  54+ E0B3 C9                                   ret
  55+ E0B4
  56+ E0B4 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0B7 ED 79                                out		(c),a
  58+ E0B9 C9                                   ret
# file closed: ../../Layer1Graphics/layer1_cls.asm
 760  E0BA                  INCLUDE "../../Layer1Graphics/layer1_print_at.asm"
# file opened: ../../Layer1Graphics/layer1_print_at.asm
   1+ E0BA              ; "l1 print char a = character, de = Ypixel Xpxiel rounded to char of print"
   2+ E0BA D5 E5        l1_print_char:          push	de,,hl
   3+ E0BC ED 94                                pixelad								; hl = address of de
   4+ E0BE E5                                   push	hl							; save hl for loop
   5+ E0BF 26 00                                ld		h,0
   6+ E0C1 6F                                   ld		l,a
   7+ E0C2 29                                   add		hl,hl						; * 2
   8+ E0C3 29                                   add		hl,hl						; * 4
   9+ E0C4 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0C5 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0C9 EB                                   ex		de,hl						; save address into de
  12+ E0CA E1                                   pop		hl							; get back hl for loop
  13+ E0CB 06 08                                ld		b,8							; do 8 rows
  14+ E0CD 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0CE 13                                   inc		de							; next byte
  16+ E0CF 77                                   ld		(hl),a						; poke to screen
  17+ E0D0 ED 93                                pixeldn								; Down 1 row
  18+ E0D2 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0D4 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0D6 C9                                   ret
  21+ E0D7
  22+ E0D7              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0D7              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0D7              l1_print_at_char
  24+ E0D7 CB 22           sla     d       ; Convert D from char to pixel
  25+ E0D9 CB 22                                sla     d       ; by muliplying by 8
  26+ E0DB CB 22                                sla     d       ;
  27+ E0DD              l1_print_at:
  28+ E0DD 7E           .PrintLoop:             ld		a,(hl)
  29+ E0DE FE 00                                cp		0
  30+ E0E0 C8                                   ret		z
  31+ E0E1                                      CallIfAGTENusng " ", l1_print_char
  31+ E0E1 FE 20       >                        cp      " "
  31+ E0E3 D4 BA E0    >                        call	nc,l1_print_char
  32+ E0E6 23                                   inc		hl							; move 1 message character right
  33+ E0E7 7B                                   ld		a,e
  34+ E0E8 C6 08                                add		a,8
  35+ E0EA 5F                                   ld		e,a							; move 1 screen character right
  36+ E0EB 18 F0                                jr		.PrintLoop
  37+ E0ED                                                      DISPLAY "TODO: looks liek rogue popde"
  38+ E0ED              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  39+ E0ED C9                                   ret
  40+ E0EE
  41+ E0EE
  42+ E0EE
  43+ E0EE 30 30 00     HexU8Char:       DB "00",0
  44+ E0F1 30 30 30 30  HexU16Char:      DB "0000",0
  44+ E0F5 00
  45+ E0F6 2B 30 30 00  HexS8Char:       DB "+00",0
  46+ E0FA 2B 30 30 30  HexS16Char:      DB "+0000",0
  46+ E0FE 30 00
  47+ E100 2B 30 30 30  HexS24Char:      DB "+0000.00",0
  47+ E104 30 2E 30 30
  47+ E108 00
  48+ E109
  49+ E109              ; prints + sign for bit 7 clear in a else - sign for bit 7 set, Load to buffer location in ix
  50+ E109 CB 7F        l1_buffer_sign_at_ix:   bit     7,a
  51+ E10B CA 14 E1                             jp      z,.PrintPlus
  52+ E10E 3E 2D        .PrintMinus:            ld      a,"-"
  53+ E110 DD 77 00                             ld      (ix+0),a
  54+ E113 C9                                   ret
  55+ E114 3E 2B        .PrintPlus:             ld      a,"+"
  56+ E116 DD 77 00                             ld      (ix+0),a
  57+ E119 C9                                   ret
  58+ E11A
  59+ E11A 30 31 32 33  HexMapping:     DB "0123456789ABCDEF"
  59+ E11E 34 35 36 37
  59+ E122 38 39 41 42
  59+ E126 43 44 45 46
  60+ E12A              ; writes hex 8 bit to ix buffer position
  61+ E12A C5 E5        l1_buffer_hex_8_at_ix:  push    bc,,hl
  62+ E12C 47                                   ld      b,a
  63+ E12D ED 23                                swapnib
  64+ E12F E6 0F                                and     $0F
  65+ E131 21 1A E1                             ld      hl,HexMapping
  66+ E134 ED 31                                add     hl,a
  67+ E136 7E                                   ld      a,(hl)
  68+ E137 DD 77 00                             ld      (ix+0),a
  69+ E13A 21 1A E1                             ld      hl,HexMapping
  70+ E13D 78                                   ld      a,b
  71+ E13E E6 0F                                and     $0F
  72+ E140 ED 31                                add     hl,a
  73+ E142 7E                                   ld      a,(hl)
  74+ E143 DD 77 01                             ld      (ix+1),a
  75+ E146 E1 C1                                pop     bc,,hl
  76+ E148 C9                                   ret
  77+ E149
  78+ E149              ; prints 16 bit lead sign hex value in HLA at char pos DE
  79+ E149 F5           l1_print_s24_hex_at_char: push  af                      ; first off do sign
  80+ E14A DD 21 00 E1                            ld    ix,HexS24Char
  81+ E14E 7C                                     ld    a,h
  82+ E14F CD 09 E1                               call  l1_buffer_sign_at_ix
  83+ E152 F1                                     pop   af                      ; now do hl as an unsigned by clearing bit 7
  84+ E153 DD 23                                  inc   ix                      ; move to actual digits
  85+ E155 F5                                     push  af
  86+ E156 7C                                     ld    a,h
  87+ E157 CB BF                                  res   7,a                     ; clear sign bit regardless
  88+ E159 CD 2A E1                               call  l1_buffer_hex_8_at_ix
  89+ E15C DD 23                                  inc   ix
  90+ E15E DD 23                                  inc   ix
  91+ E160 7D                                     ld    a,l
  92+ E161 CD 2A E1                               call  l1_buffer_hex_8_at_ix
  93+ E164 DD 23                                  inc   ix
  94+ E166 DD 23                                  inc   ix
  95+ E168 DD 23                                  inc   ix                      ; also skip decimal point
  96+ E16A F1                                     pop   af
  97+ E16B CD 2A E1                               call  l1_buffer_hex_8_at_ix
  98+ E16E 21 00 E1                               ld    hl,HexS24Char           ; by here de is still unaffected
  99+ E171 CD D7 E0                               call  l1_print_at_char
 100+ E174 C9                                     ret
 101+ E175              ; prints 16 bit lead sign hex value in HL at char pos DE
 102+ E175 DD 21 FA E0  l1_print_s16_hex_at_char: ld    ix,HexS16Char
 103+ E179 7C                                     ld    a,h
 104+ E17A CD 09 E1                               call  l1_buffer_sign_at_ix
 105+ E17D DD 23                                  inc   ix                      ; move to actual digits
 106+ E17F 7C                                     ld    a,h
 107+ E180 CD 2A E1                               call  l1_buffer_hex_8_at_ix
 108+ E183 DD 23                                  inc   ix
 109+ E185 DD 23                                  inc   ix
 110+ E187 7D                                     ld    a,l
 111+ E188 CD 2A E1                               call  l1_buffer_hex_8_at_ix
 112+ E18B 21 FA E0                               ld    hl,HexS16Char           ; by here de is still unaffected
 113+ E18E CD D7 E0                               call  l1_print_at_char
 114+ E191 C9                                     ret
 115+ E192              ; prints 16 bit unsigned hext value in HL at char pos DE
 116+ E192 DD 21 F1 E0  l1_print_u16_hex_at_char: ld    ix,HexU16Char
 117+ E196 7C                                     ld    a,h
 118+ E197 CD 2A E1                               call  l1_buffer_hex_8_at_ix
 119+ E19A DD 23                                  inc   ix
 120+ E19C DD 23                                  inc   ix
 121+ E19E 7D                                     ld    a,l
 122+ E19F CD 2A E1                               call  l1_buffer_hex_8_at_ix
 123+ E1A2 21 F1 E0                               ld    hl,HexU16Char           ; by here de is still unaffected
 124+ E1A5 CD D7 E0                               call  l1_print_at_char
 125+ E1A8 C9                                     ret
 126+ E1A9              ; prints 8 bit signed hext value in a at char pos DE
 127+ E1A9 DD 21 F6 E0  l1_print_s8_hex_at_char:  ld    ix,HexS8Char
 128+ E1AD 67                                     ld    h,a                     ; save a into h
 129+ E1AE CD 09 E1                               call  l1_buffer_sign_at_ix
 130+ E1B1 DD 23                                  inc   ix                      ; move to actual digits
 131+ E1B3 7C                                     ld    a,h                     ; get a back
 132+ E1B4 CB BF                                  res   7,a                     ; clear sign bit regardless
 133+ E1B6 CD 2A E1                               call  l1_buffer_hex_8_at_ix
 134+ E1B9 21 F6 E0                               ld    hl,HexS8Char           ; by here de is still unaffected
 135+ E1BC CD D7 E0                               call  l1_print_at_char
 136+ E1BF C9                                     ret
 137+ E1C0
 138+ E1C0              ; prints 8 bit signed hext value in a at char pos DE
 139+ E1C0 DD 21 EE E0  l1_print_u8_hex_at_char:  ld    ix,HexU8Char
 140+ E1C4 CD 2A E1                               call  l1_buffer_hex_8_at_ix
 141+ E1C7 21 EE E0                               ld    hl,HexU8Char           ; by here de is still unaffected
 142+ E1CA CD D7 E0                               call  l1_print_at_char
 143+ E1CD C9                                     ret
 144+ E1CE
 145+ E1CE
 146+ E1CE
 147+ E1CE
 148+ E1CE
 149+ E1CE              ;l1_print_at_wrap:
 150+ E1CE              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 151+ E1CE              ;	ld      iyh,e
 152+ E1CE              ;.PrintLoop:
 153+ E1CE              ;	ld		a,(hl)
 154+ E1CE              ;	cp		0
 155+ E1CE              ;	ret		z
 156+ E1CE              ;.CountWordCharLen
 157+ E1CE              ;; Need to change to word wrap, so it will loop through string as before
 158+ E1CE              ;; but read up until a null or space, take the character count * 8 for pixels
 159+ E1CE              ;; if that is > 238 then force a premature line wrap
 160+ E1CE              ;
 161+ E1CE              ;
 162+ E1CE              ;    push    iy
 163+ E1CE              ;    call	l1_print_char
 164+ E1CE              ;    pop     iy
 165+ E1CE              ;	inc		hl							; move 1 message character right
 166+ E1CE              ;	ld		a,e
 167+ E1CE              ;    cp      238
 168+ E1CE              ;    jr      nc,.NextLine
 169+ E1CE              ;	add		a,8
 170+ E1CE              ;	ld		e,a							; move 1 screen character right
 171+ E1CE              ;	jr		.PrintLoop
 172+ E1CE              ;.Clearstackandfinish:
 173+ E1CE              ;	pop		de
 174+ E1CE              ;	ret
 175+ E1CE              ;.NextLine:
 176+ E1CE              ;    ld      a,(hl)
 177+ E1CE              ;    cp      " "
 178+ E1CE              ;    ld      e,iyh
 179+ E1CE              ;    ld      a,d
 180+ E1CE              ;    add     a,8
 181+ E1CE              ;    ld      d,a
 182+ E1CE              ;    jr		.PrintLoop
 183+ E1CE
 184+ E1CE              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
 185+ E1CE E5           L1LenWordAtHL:          push    hl
 186+ E1CF D5                                   push    de
 187+ E1D0 7E           .CountLoop:             ld      a,(hl)
 188+ E1D1 FE 00                                cp      0
 189+ E1D3 28 0F                                jr      z,.CountDone
 190+ E1D5 FE 20                                cp      32
 191+ E1D7 28 0B                                jr      z,.CountDone
 192+ E1D9 7B                                   ld      a,e
 193+ E1DA C6 08                                add     a,8
 194+ E1DC 5F                                   ld      e,a
 195+ E1DD FE EE                                cp      238
 196+ E1DF 30 07                                jr      nc,.TooLong
 197+ E1E1 23                                   inc     hl
 198+ E1E2 18 EC                                jr      .CountLoop
 199+ E1E4 D1           .CountDone:             pop     de
 200+ E1E5 E1                                   pop     hl
 201+ E1E6 AF                                   xor     a
 202+ E1E7 C9                                   ret
 203+ E1E8 D1           .TooLong                pop     de
 204+ E1E9 E1                                   pop     hl
 205+ E1EA 3E FF                                ld      a,$FF
 206+ E1EC C9                                   ret
 207+ E1ED
 208+ E1ED 7E           L1PrintWordAtHL:        ld      a,(hl)
 209+ E1EE FE 00                                cp      0
 210+ E1F0 C8                                   ret     z
 211+ E1F1 FE 20                                cp      32
 212+ E1F3 28 0F                                jr      z,.ItsASpace
 213+ E1F5 FD E5                                push    iy
 214+ E1F7 CD BA E0                             call	l1_print_char
 215+ E1FA FD E1                                pop     iy
 216+ E1FC 7B                                   ld      a,e
 217+ E1FD C6 08                                add     a,8
 218+ E1FF 5F                                   ld      e,a
 219+ E200 23                                   inc     hl
 220+ E201 C3 ED E1                             jp      L1PrintWordAtHL
 221+ E204 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 222+ E205 7B                                   ld      a,e
 223+ E206 C6 08                                add     a,8
 224+ E208 5F                                   ld      e,a
 225+ E209 C9                                   ret
 226+ E20A
 227+ E20A
 228+ E20A              ; print at based whole character positions DE=yx, HL = message Addr
 229+ E20A              ;
 230+ E20A CB 22        l1_print_at_char_wrap:  sla     d       ; Convert D from char to pixel
 231+ E20C CB 22                                sla     d       ; by muliplying by 8
 232+ E20E CB 22                                sla     d       ;
 233+ E210              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 234+ E210              ; Now has full word level wrapping
 235+ E210 FD 63        l1_print_at_wrap:       ld      iyh,e
 236+ E212 7E           .PrintLoop:             ld		a,(hl)
 237+ E213 FE 00                                cp		0
 238+ E215 C8                                   ret		z
 239+ E216 CD CE E1     .CountWordCharLen:      call    L1LenWordAtHL
 240+ E219 FE FF                                cp      $FF
 241+ E21B 28 06                                jr      z,.WrapNextLine
 242+ E21D CD ED E1     .NotTooLong:            call    L1PrintWordAtHL
 243+ E220              ; Need to change to word wrap, so it will loop through string as before
 244+ E220              ; but read up until a null or space, take the character count * 8 for pixels
 245+ E220              ; if that is > 238 then force a premature line wrap
 246+ E220 18 F0                                jr		.PrintLoop
 247+ E222              .Clearstackandfinish:   ;op		de
 248+ E222 C9                                   ret
 249+ E223              .WrapNextLine:
 250+ E223 FD 5C        .NextLine:              ld      e,iyh
 251+ E225 7A                                   ld      a,d
 252+ E226 C6 08                                add     a,8
 253+ E228 57                                   ld      d,a
 254+ E229 18 E7                                jr		.PrintLoop
 255+ E22B
 256+ E22B
# file closed: ../../Layer1Graphics/layer1_print_at.asm
 761  E22B                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 762  E22B
 763  E22B                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 764  E22B              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 765  E22B                                  SLOT    UniverseBankAddr
 766  E22B                                  PAGE    BankUNIVDATA0
 767  E22B                                  ORG	    UniverseBankAddr,BankUNIVDATA0
 768  C000                                  INCLUDE "../../Tests/Vectors/univ_ship_data.asm"
# file opened: ../../Tests/Vectors/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ;    DEFINE PLOTPOINTSONLY 1
   3+ C000              ;   DEFINE OVERLAYNODES 1
   4+ C000              ; In  flight ship data tables
   5+ C000              ; In  flight ship data tables
   6+ C000              ; There can be upto &12 objects in flight.
   7+ C000              ; To avoid hassle of memory heap managment, the free list
   8+ C000              ; will correspond to a memory bank offset so data will be held in
   9+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  10+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  11+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  12+ C000              ; This means each gets its own line list, inwork etc
  13+ C000
  14+ C000              ; "Runtime Ship Data paged into in Bank 7"
  15+ C000              ;                       1234567890123456
  16+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  16+ C004 65 72 73 65
  16+ C008 20 50 47
  17+ C00B 58           StartOfUnivN:       DB "X"
  18+ C00C 00 00        StartOfUnivPad:     DS 2
  19+ C00E 00           StartOfUnivM:       DB 0
  20+ C00F 00           StartOfUnivT        DB 0
  21+ C010 00 00 00...  StartOfUnivName     DS 16
  22+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  23+ C020                                     INCLUDE "../../Universe/Ships/AIRuntimeData.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00           UBnkTidyCounter             DB  0                       ; every 16 iterations the rotation matrix is normalised
  17++C02A 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  18++C02C              UBnkrotmatSidev             equ UBnkrotmatSidevX
  19++C02C 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  20++C02E 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  21++C030 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  22++C032              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  23++C032 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  24++C034 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  25++C036 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  26++C038              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  27++C038 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  28++C03A 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  29++C03C              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  30++C03C              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  31++C03C 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  33++C03E 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  34++C03F 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  35++C040              ; -- Metadata for ship to help with bank managment
  36++C040              UBnKStartOfRuntimeData:
  37++C040 00           UBnKSlotNumber              DB  0
  38++C041 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  39++C042 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  40++C043 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  41++C044 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  42++C045              ; -- Ship AI data
  43++C045              ; -- Targetting runtime data
  44++C045 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  45++C046 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  46++C047 00 00 00     UBnKTargetXPos              DS  3                       ; target position for AI
  47++C04A 00 00 00     UBnKTargetYPos              DS  3                       ; .
  48++C04D 00 00 00     UBnKTargetZPos              DS  3                       ; .
  49++C050 00           UBnKTargetXPosSgn           DS  1                       ; target position sign for AI
  50++C051 00           UBnKTargetYPosSgn           DS  1                       ; .
  51++C052 00           UBnKTargetZPosSgn           DS  1                       ; .
  52++C053 00 00        UBnKTargetVectorX           DS  2                       ; target vector for AI
  53++C055 00 00        UBnKTargetVectorY           DS  2                       ; .
  54++C057 00 00        UBnKTargetVectorZ           DS  2                       ; .
  55++C059 00 00        UBnKTargetDotProduct1       DS  2
  56++C05B 00 00        UBnKTargetDotProduct2       DS  2
  57++C05D 00 00        UBnKTargetDotProduct3       DS  2
  58++C05F 00           UBnKTacticsRotMatX          DB  0
  59++C060 00           UBnKTacticsRotMatXSign      DB  0
  60++C061 00           UBnKTacticsRotMatY          DB  0
  61++C062 00           UBnKTacticsRoyMatYSign      DB  0
  62++C063 00           UBnKTacticsRotMatZ          DB  0
  63++C064 00           UBnKTacticsRotMatZSign      DB  0
  64++C065 00 00 00...  UBnKOffset                  DS  3 * 3                   ; Offset position for target
  65++C06E 00 00 00...  UBnKDirection               DS  3 * 2                   ; Direction Vector
  66++C074 09           UBnKDotProduct              DB  9                       ; Dot Product
  67++C075 00           UBnKSpeed                   DB  0                       ; INWK +27
  68++C076 00           UBnKAccel                   DB  0                       ; INWK +28
  69++C077 00           UBnKRotXCounter             DB  0                       ; INWK +29
  70++C078 00           UBnKRotZCounter             DB  0                       ; INWK +30
  71++C079 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  72++C07A 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  73++C07B 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  74++C07C 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  75++C07D 00           univRAT                     DB  0               ; 99
  76++C07E 00           univRAT2                    DB  0               ; 9A
  77++C07F 00           univRAT2Val                 DB  0               ; 9A
  78++C080 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  79++C081 00           UBnkDrawAllFaces            DB  0
  80++C082 00           UBnKShipAggression          DB  0                       ; calculated agression factor
  81++C083 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  82++C084 00           UBnKSpawnObject             DB  0
  83++C085 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  84++C086 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  85++C087 00           UBnKEnergy                  DB  0                       ; INWK +35
  86++C088 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  87++C089 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  88++C08A 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
  89++C08B 00           UBnKMissilesLeft            DB  0
  90++C08C 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
  91++C08D 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
  92++C08E 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  93++C08F 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  94++C090 00           UBnKHeadingToPlanetOrSun    DB  0                       ; 0 = undefined 1 = heading to planet 2 = heading to sun, if it reaches planet then will move to docking, if it heads to sun then will jump
  95++C091
  96++C091              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  97++C091              ; Flags work as follows:
  98++C091              ; UBnKSpawnObject - signals on death to spawn cargo items
  99++C091              ; 0 -                   Spawn Cargo 1
 100++C091              ; 1 -                   Spawn Cargo 2
 101++C091              ; 2 -                   Spawn Cargo 3
 102++C091              ; 3 -                   Spawn Cargo 4
 103++C091              ; 4 -                   Spawn Alloy 1
 104++C091              ; 5 -                   Spawn Alloy 2
 105++C091              ; 6 -                   Spawn Alloy 3
 106++C091              ; 7 -                   Spawn Alloy 4
 107++C091
 108++C091              ; UBnkaiatkecm
 109++C091              ; Bit	                Description
 110++C091              ; 7 -                   AI Enabled Flag
 111++C091              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
 112++C091              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
 113++C091              ;                       linger can be done by not erasing ship unit missile equeue handled
 114++C091              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
 115++C091              ; 3 -                   Display state - Plot as a Dot
 116++C091              ; 2 -                   Nbr of Missiles bit 2
 117++C091              ; 1 -                   Nbr of Missiles bit 1
 118++C091              ; 0 -                   ECM present flag
 119++C091              ; ShipNewBitsAddr (in blueprint)
 120++C091              ;Bit	                Description
 121++C091              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
 122++C091              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
 123++C091              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 124++C091              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 125++C091              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 126++C091              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 127++C091              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 128++C091              ;                       Hostile ships will attack us on sight; there are quite a few of them
 129++C091              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 130++C091              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 131++C091              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 132++C091              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 133++C091              ;#4	Docking flag        * 0 = not docking * 1 = docking
 134++C091              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 135++C091              ;                       This flag is randomly set for traders when they are spawned
 136++C091              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 137++C091              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 138++C091              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 139++C091              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 140++C091              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 141++C091              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 142++C091              ;                       Ships that are cops: Viper, Transporter
 143++C091              ;#7	Scooped, docked, escape pod flag
 144++C091              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 145++C091              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 146++C091              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 147++C091
# file closed: ../../Tests/Vectors/../../Universe/Ships/AIRuntimeData.asm
  24+ C091                                      INCLUDE "../../Universe/Ships/XX16Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX16Vars.asm
   1++C091              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C091 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C093              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C093 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C095 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C097 00 00        UBnkTransmatRoofvX          DW 0
   7++C099              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C099 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C09B 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C09D 00 00        UBnkTransmatNosevX          DW 0
  11++C09F              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C09F 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C0A1 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C0A3 00 00        UbnkTransmatTransX          DW 0
  15++C0A5 00 00        UbnkTransmatTransY          DW 0
  16++C0A7 00 00        UbnkTransmatTransZ          DW 0
  17++C0A9              XX16                        equ UBnkTransmatSidev
  18++C0A9              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C0A9 00 00        UbnkTransInvRow0x0          DW 0
  20++C0AB 00 00        UbnkTransInvRow0x1          DW 0
  21++C0AD 00 00        UbnkTransInvRow0x2          DW 0
  22++C0AF 00 00        UbnkTransInvRow0x3          DW 0
  23++C0B1 00 00        UbnkTransInvRow1y0          DW 0
  24++C0B3 00 00        UbnkTransInvRow1y1          DW 0
  25++C0B5 00 00        UbnkTransInvRow1y2          DW 0
  26++C0B7 00 00        UbnkTransInvRow1y3          DW 0
  27++C0B9 00 00        UbnkTransInvRow2z0          DW 0
  28++C0BB 00 00        UbnkTransInvRow2z1          DW 0
  29++C0BD 00 00        UbnkTransInvRow2z2          DW 0
  30++C0BF 00 00        UbnkTransInvRow2z3          DW 0
  31++C0C1
  32++C0C1              XX16Inv             equ UbnkTransInvRow0x0
  33++C0C1
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX16Vars.asm
  25+ C0C1                                      INCLUDE "../../Universe/Ships/XX25Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX25Vars.asm
   1++C0C1              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C0C1 00           UbnkProjxLo                 DB  0
   3++C0C2 00           UbnkProjxHi                 DB  0
   4++C0C3 00           UbnkProjxSgn                DB  0
   5++C0C4              UbnkProjx                   EQU UbnkProjxLo
   6++C0C4 00           UbnkProjyLo                 DB  0
   7++C0C5 00           UbnkProjyHi                 DB  0
   8++C0C6 00           UbnkProjySgn                DB  0
   9++C0C7              UbnkProjy                   EQU UbnkProjyLo
  10++C0C7 00           UbnkProjzLo                 DB  0
  11++C0C8 00           UbnkProjzHi                 DB  0
  12++C0C9 00           UbnkProjzSgn                DB  0
  13++C0CA              UbnkProjz                   EQU UbnkProjzLo
  14++C0CA              XX25                        EQU UbnkProjxLo
  15++C0CA
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX25Vars.asm
  26+ C0CA                                      INCLUDE "../../Universe/Ships/XX18Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX18Vars.asm
   1++C0CA              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C0CA 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C0CB 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C0CC 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C0CD              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C0CD 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C0CE 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C0CF 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0D0              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0D0 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0D1 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0D2 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0D3              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0D3              XX18                        equ UBnkDrawCam0xLo
  15++C0D3
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX18Vars.asm
  27+ C0D3
  28+ C0D3              ; Used to make 16 bit reads a little cleaner in source code
  29+ C0D3 00 00 00     UbnkZPoint                  DS  3
  30+ C0D6              UbnkZPointLo                equ UbnkZPoint
  31+ C0D6              UbnkZPointHi                equ UbnkZPoint+1
  32+ C0D6              UbnkZPointSign              equ UbnkZPoint+2
  33+ C0D6                                      INCLUDE "../../Universe/Ships/XX15Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX15Vars.asm
   1++C0D6              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0D6 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0D7 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0D8 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0D9 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0DA 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0DB 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0DC
   9++C0DC              XX15                        equ UBnkXScaled
  10++C0DC              XX15VecX                    equ XX15
  11++C0DC              XX15VecY                    equ XX15+1
  12++C0DC              XX15VecZ                    equ XX15+2
  13++C0DC              UbnkXPoint                  equ XX15
  14++C0DC              UbnkXPointLo                equ XX15+0
  15++C0DC              UbnkXPointHi                equ XX15+1
  16++C0DC              UbnkXPointSign              equ XX15+2
  17++C0DC              UbnkYPoint                  equ XX15+3
  18++C0DC              UbnkYPointLo                equ XX15+3
  19++C0DC              UbnkYPointHi                equ XX15+4
  20++C0DC              UbnkYPointSign              equ XX15+5
  21++C0DC              ; Repurposed XX15 pre clip plines
  22++C0DC              UbnkPreClipX1               equ XX15+0
  23++C0DC              UbnkPreClipY1               equ XX15+2
  24++C0DC              UbnkPreClipX2               equ XX15+4
  25++C0DC              UbnkPreClipY2               equ XX15+6
  26++C0DC              ; Repurposed XX15 post clip lines
  27++C0DC              UBnkNewX1                   equ XX15+0
  28++C0DC              UBnkNewY1                   equ XX15+1
  29++C0DC              UBnkNewX2                   equ XX15+2
  30++C0DC              UBnkNewY2                   equ XX15+3
  31++C0DC              ; Repurposed XX15
  32++C0DC              regXX15fx                   equ UBnkXScaled
  33++C0DC              regXX15fxSgn                equ UBnkXScaledSign
  34++C0DC              regXX15fy                   equ UBnkYScaled
  35++C0DC              regXX15fySgn                equ UBnkYScaledSign
  36++C0DC              regXX15fz                   equ UBnkZScaled
  37++C0DC              regXX15fzSgn                equ UBnkZScaledSign
  38++C0DC              ; Repurposed XX15
  39++C0DC              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0DC              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0DC              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0DC              ; After clipping the coords are two 8 bit pairs
  43++C0DC              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0DC              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0DC              ; Repurposed XX15 when plotting lines
  46++C0DC              ; Repurposed XX15 before calling clip routine
  47++C0DC              UBnkX1                      equ XX15
  48++C0DC              UBnKx1Lo                    equ XX15
  49++C0DC              UBnKx1Hi                    equ XX15+1
  50++C0DC              UBnkY1                      equ XX15+2
  51++C0DC              UbnKy1Lo                    equ XX15+2
  52++C0DC              UBnkY1Hi                    equ XX15+3
  53++C0DC              UBnkX2                      equ XX15+4
  54++C0DC              UBnkX2Lo                    equ XX15+4
  55++C0DC              UBnkX2Hi                    equ XX15+5
  56++C0DC
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX15Vars.asm
  34+ C0DC                                      INCLUDE "../../Universe/Ships/XX12Vars.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/XX12Vars.asm
   1++C0DC              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0DC              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0DC 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0DD 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0DE 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0DF 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0E0 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0E1 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0E2 00 00 00...  XX12Save                    DS  6
  10++C0E8 00 00 00...  XX12Save2                   DS  6
  11++C0EE              XX12                        equ UBnkXX12xLo
  12++C0EE              varXX12                     equ UBnkXX12xLo
  13++C0EE              ; Repurposed XX12 when plotting lines
  14++C0EE              UBnkY2                      equ XX12+0
  15++C0EE              UbnKy2Lo                    equ XX12+0
  16++C0EE              UBnkY2Hi                    equ XX12+1
  17++C0EE              UBnkDeltaXLo                equ XX12+2
  18++C0EE              UBnkDeltaXHi                equ XX12+3
  19++C0EE              UBnkDeltaYLo                equ XX12+4
  20++C0EE              UBnkDeltaYHi                equ XX12+5
  21++C0EE              UbnkGradient                equ XX12+2
  22++C0EE              UBnkTemp1                   equ XX12+2
  23++C0EE              UBnkTemp1Lo                 equ XX12+2
  24++C0EE              UBnkTemp1Hi                 equ XX12+3
  25++C0EE              UBnkTemp2                   equ XX12+3
  26++C0EE              UBnkTemp2Lo                 equ XX12+3
  27++C0EE              UBnkTemp2Hi                 equ XX12+4
  28++C0EE
# file closed: ../../Tests/Vectors/../../Universe/Ships/XX12Vars.asm
  35+ C0EE
  36+ C0EE
  37+ C0EE              ; Post clipping the results are now 8 bit
  38+ C0EE 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  39+ C0EF 00           UBnkProjectedY              DB  0
  40+ C0F0 00           UBnkProjectedX              DB  0
  41+ C0F1              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  42+ C0F1 00 00 00...  XX15Save                    DS  8
  43+ C0F9 00 00 00...  XX15Save2                   DS  8
  44+ C101 00           VarBackface                 DB 0
  45+ C102              ; Heap (or array) information for lines and normals
  46+ C102              ; Coords are stored XY,XY,XY,XY
  47+ C102              ; Normals
  48+ C102              ; This needs re-oprganising now.
  49+ C102              ; Runtime Calculation Store
  50+ C102
  51+ C102              FaceArraySize               equ 30
  52+ C102              EdgeHeapSize                equ 40
  53+ C102              NodeArraySize               equ 40
  54+ C102              LineArraySize               equ 50; incerased for max of 28 lines, of 4 points of 16 bits each
  55+ C102              ; ONLY IF TESTING SOLID FILL TraingleArraySize           equ 25
  56+ C102              ; Storage arrays for data
  57+ C102              ; Structure of arrays
  58+ C102              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  59+ C102              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  60+ C102              ; NodeArray         -  4 bytes per element      0           1            2          3
  61+ C102              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  62+ C102              ; Line Array        -  4 bytes per eleement     0           1            2          3
  63+ C102              ;                                               X1          Y1           X2         Y2
  64+ C102 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  65+ C120              ; Node array holds the projected to screen position regardless of if its clipped or not
  66+ C120              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  67+ C120 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  68+ C1C0 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  69+ C260 00 00 00...  UbnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
  70+ C3F0              ; ONLY IF TESTING SOLID FILL UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  71+ C3F0              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  72+ C3F0 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  73+ C418              ; Array current Lengths
  74+ C418 00           UbnkFaceVisArrayLen         DS 1
  75+ C419 00           UBnkNodeArrayLen            DS 1
  76+ C41A 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  77+ C41B 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  78+ C41C              XX20                        equ UbnkLineArrayLen
  79+ C41C              varXX20                     equ UbnkLineArrayLen
  80+ C41C
  81+ C41C 00           UbnkEdgeHeapSize            DS 1
  82+ C41D 00           UbnkEdgeHeapBytes           DS 1
  83+ C41E 00           UBnkLinesHeapLen            DS 1
  84+ C41F 00           UbnKEdgeHeapCounter         DS 1
  85+ C420 00           UbnKEdgeRadius              DS 1
  86+ C421 00           UbnKEdgeShipType            DS 1
  87+ C422 00           UbnKEdgeExplosionType       DS 1
  88+ C423
  89+ C423              ; Node heap is used to write out transformed Vertexs
  90+ C423
  91+ C423              ; Lines
  92+ C423 00 00 00     UBnkXX19                    DS  3
  93+ C426
  94+ C426 00 00 00...  UBnkHullCopy                DS  ShipDataLength
  95+ C441              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
  96+ C441              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
  97+ C441              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
  98+ C441              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
  99+ C441              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 100+ C441              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 101+ C441              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 102+ C441              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 103+ C441              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 104+ C441              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 105+ C441              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 106+ C441              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 107+ C441              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 108+ C441              DotAddr                     equ UBnkHullCopy + DotOffset
 109+ C441              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 110+ C441              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 111+ C441              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 112+ C441              QAddr                       equ UBnkHullCopy + QOffset
 113+ C441              LaserAddr                   equ UBnkHullCopy + LaserOffset
 114+ C441              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 115+ C441              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 116+ C441              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 117+ C441              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 118+ C441              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 119+ C441              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 120+ C441              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 121+ C441              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 122+ C441              ; Static Ship Data. This is copied in when creating the universe object
 123+ C441              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 124+ C441
 125+ C441 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 126+ C531 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 127+ C5F9 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C649                  IFDEF SOLIDHULLTEST
 129+ C649 ~            UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 130+ C649                  ENDIF
 131+ C649 0C           OrthagCountdown             DB  12
 132+ C64A
 133+ C64A              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 134+ C64A              UBnk_Data_len               EQU $ - StartOfUniv
 135+ C64A
 136+ C64A
 137+ C64A              ZeroUnivPitch:          MACRO
 138+ C64A ~                                    xor     a
 139+ C64A ~                                    ld      (UBnKRotZCounter),a
 140+ C64A                                      ENDM
 141+ C64A
 142+ C64A              ZeroUnivRoll:           MACRO
 143+ C64A ~                                    xor     a
 144+ C64A ~                                    ld      (UBnKRotXCounter),a
 145+ C64A                                      ENDM
 146+ C64A
 147+ C64A              ZeroUnivPitchAndRoll:   MACRO
 148+ C64A ~                                    xor     a
 149+ C64A ~                                    ld      (UBnKRotXCounter),a
 150+ C64A ~                                    ld      (UBnKRotZCounter),a
 151+ C64A                                      ENDM
 152+ C64A
 153+ C64A
 154+ C64A              MaxUnivPitchAndRoll:    MACRO
 155+ C64A ~                                    ld      a,127
 156+ C64A ~                                    ld      (UBnKRotXCounter),a
 157+ C64A ~                                    ld      (UBnKRotZCounter),a
 158+ C64A                                      ENDM
 159+ C64A
 160+ C64A              InfinitePitch:          MACRO
 161+ C64A ~                                    ld      a,$FF
 162+ C64A ~                                    ld      (UBnKRotZCounter),a
 163+ C64A                                      ENDM
 164+ C64A
 165+ C64A              InfiniteRoll:           MACRO
 166+ C64A ~                                    ld      a,$FF
 167+ C64A ~                                    ld      (UBnKRotXCounter),a
 168+ C64A                                      ENDM
 169+ C64A
 170+ C64A              InfinitePitchAndRoll:    MACRO
 171+ C64A ~                                    ld      a,$FF
 172+ C64A ~                                    ld      (UBnKRotXCounter),a
 173+ C64A ~                                    ld      (UBnKRotZCounter),a
 174+ C64A                                      ENDM
 175+ C64A
 176+ C64A              RandomUnivPitchAndRoll: MACRO
 177+ C64A ~                                    call    doRandom
 178+ C64A ~                                    or      %01101111
 179+ C64A ~                                    ld      (UBnKRotXCounter),a
 180+ C64A ~                                    call    doRandom
 181+ C64A ~                                    or      %01101111
 182+ C64A ~                                    ld      (UBnKRotZCounter),a
 183+ C64A                                      ENDM
 184+ C64A
 185+ C64A              RandomUnivSpeed:        MACRO
 186+ C64A ~                                    call    doRandom
 187+ C64A ~                                    and     31
 188+ C64A ~                                    ld      (UBnKSpeed),a
 189+ C64A                                      ENDM
 190+ C64A
 191+ C64A              MaxUnivSpeed:           MACRO
 192+ C64A ~                                    ld      a,31
 193+ C64A ~                                    ld      (UBnKSpeed),a
 194+ C64A                                      ENDM
 195+ C64A
 196+ C64A              ZeroUnivAccelleration:  MACRO
 197+ C64A ~                                    xor     a
 198+ C64A ~                                    ld      (UBnKAccel),a
 199+ C64A                                      ENDM
 200+ C64A
 201+ C64A 3A 3E C4     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 202+ C64D F6 04                                or      ShipIsHostile
 203+ C64F 32 3E C4                             ld      (ShipNewBitsAddr),a
 204+ C652 C9                                   ret
 205+ C653
 206+ C653 3A 3E C4     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 207+ C656 E6 FB                                and     ShipNotHostile
 208+ C658 32 3E C4                             ld      (ShipNewBitsAddr),a
 209+ C65B C9                                   ret
 210+ C65C
 211+ C65C                                      ; --------------------------------------------------------------
 212+ C65C              ; Sets visibile and not a dot
 213+ C65C 3A 83 C0     UnivVisibleNonDot:      ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 214+ C65F F6 40                                or      ShipIsVisible
 215+ C661 E6 F7                                and     ShipIsNotDot
 216+ C663 32 83 C0                             ld      (UBnkaiatkecm),a                ;  .
 217+ C666 C9                                   ret
 218+ C667              ; --------------------------------------------------------------
 219+ C667              ; Sets visibile and  a dot
 220+ C667 3A 83 C0     UnivVisibleDot:         ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 221+ C66A F6 48                                or      ShipIsVisible | ShipIsDot
 222+ C66C 32 83 C0                             ld      (UBnkaiatkecm),a                ;  .
 223+ C66F C9                                   ret
 224+ C670              ; --------------------------------------------------------------
 225+ C670              ; Sets invisibile
 226+ C670              UnivInvisible:          ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 226+ C670 21 83 C0    >                        ld      hl,UBnkaiatkecm
 226+ C673 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 227+ C675 C9                                   ret
 228+ C676              ; --------------------------------------------------------------
 229+ C676 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 230+ C679 11 4A 06                             ld      de,UBnk_Data_len
 231+ C67C AF                                   xor     a
 232+ C67D CD C8 65                             call    memfill_dma
 233+ C680 C9                                   ret
 234+ C681              ; --------------------------------------------------------------
 235+ C681 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 236+ C684 06 09                                ld      b, 3*3
 237+ C686 AF                                   xor     a
 238+ C687 77           .zeroLoop:              ld      (hl),a
 239+ C688 23                                   inc     hl
 240+ C689 10 FC                                djnz    .zeroLoop
 241+ C68B C9                                   ret
 242+ C68C
 243+ C68C              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 244+ C68C              JumpOffSet:             MACRO   Axis
 245+ C68C ~                                    ld      hl,(Axis)
 246+ C68C ~                                    ld      a,h
 247+ C68C ~                                    and     SignOnly8Bit
 248+ C68C ~                                    jr      nz,.NegativeAxis
 249+ C68C ~            .PositiveAxis:          dec     l
 250+ C68C ~                                    jp      m,.MovingNegative
 251+ C68C ~                                    jp      .Done
 252+ C68C ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 253+ C68C ~                                    jp      .Done
 254+ C68C ~            .MovingNegative:        ld      hl,$8001                        ; -1
 255+ C68C ~            .Done                   ld      (Axis),hl
 256+ C68C                                      ENDM
 257+ C68C
 258+ C68C
 259+ C68C              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 259+ C68C 2A 27 C0    >                        ld      hl,(UBnKzhi)
 259+ C68F 7C          >                        ld      a,h
 259+ C690 E6 80       >                        and     SignOnly8Bit
 259+ C692 20 07       >                        jr      nz,.NegativeAxis
 259+ C694 2D          >.PositiveAxis:          dec     l
 259+ C695 FA 9F C6    >                        jp      m,.MovingNegative
 259+ C698 C3 A2 C6    >                        jp      .Done
 259+ C69B 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 259+ C69C C3 A2 C6    >                        jp      .Done
 259+ C69F 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 259+ C6A2 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 260+ C6A5 C9                                   ret
 261+ C6A6
 262+ C6A6 44           WarpUnivByHL:           ld      b,h
 263+ C6A7 4D                                   ld      c,l
 264+ C6A8 26 00                                ld      h,0
 265+ C6AA ED 5B 27 C0                          ld      de,(UBnKzhi)
 266+ C6AE 3A 26 C0                             ld      a,(UBnKzlo)
 267+ C6B1 6F                                   ld      l,a
 268+ C6B2                                      MMUSelectMathsBankedFns
 268+ C6B2 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 268+ C6B6 CD 10 01       call  SubBCHfromDELsigned
 269+ C6B9 ED 53 27 C0                          ld      (UBnKzhi),de
 270+ C6BD 7D                                   ld      a,l
 271+ C6BE 32 26 C0                             ld      (UBnKzlo),a
 272+ C6C1 C9                                   ret
 273+ C6C2              ; --------------------------------------------------------------
 274+ C6C2              ; This sets the position of the current ship if its a player launched missile
 275+ C6C2 CD D9 C7     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 276+ C6C5 CD 81 C6                             call    ResetUbnkPosition               ; home position
 277+ C6C8 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 278+ C6CA 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 279+ C6CD 3E 80                                ld      a,$80                           ;
 280+ C6CF 32 25 C0                             ld      (UBnKysgn),a                    ;
 281+ C6D2 3E 03                                ld      a,3                             ; set accelleration
 282+ C6D4 32 76 C0                             ld      (UBnKAccel),a                   ;
 283+ C6D7                                      ZeroA
 283+ C6D7 AF          >                        xor a
 284+ C6D8 32 77 C0                             ld      (UBnKRotXCounter),a
 285+ C6DB 32 78 C0                             ld      (UBnKRotZCounter),a
 286+ C6DE 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 287+ C6E0 32 79 C0                             ld      (UBnKRAT),a
 288+ C6E3 3C                                   inc     a
 289+ C6E4 32 7A C0                             ld      (UBnKRAT2),a
 290+ C6E7 3E 16                                ld      a,22
 291+ C6E9 32 7C C0                             ld      (UBnKCNT2),a
 292+ C6EC                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 292+ C6EC 3E 1F       >                        ld      a,31
 292+ C6EE 32 75 C0    >                        ld      (UBnKSpeed),a
 293+ C6F1                                      SetMemFalse UBnKMissleHitToProcess
 293+ C6F1 3E FF       >                        ld      a,$FF
 293+ C6F3 32 45 C0    >                        ld      (UBnKMissleHitToProcess),a
 294+ C6F6 CD 53 C6                             call    ClearShipHostile                ; its a player missile
 295+ C6F9 C9                                   ret
 296+ C6FA
 297+ C6FA              ; --------------------------------------------------------------
 298+ C6FA              ; update ship speed and pitch based on adjustments from AI Tactics
 299+ C6FA 3A 76 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 300+ C6FD                                      JumpIfAIsZero .SkipAccelleration
 300+ C6FD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C6FE CA 1C C7    >                        jp	    z, .SkipAccelleration
 301+ C701 47                                   ld      b,a                             ; b = accelleration in 2's c
 302+ C702 3A 75 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 303+ C705                                      ClearCarryFlag
 303+ C705 B7          >                        or a
 304+ C706 88                                   adc     a,b
 305+ C707                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 305+ C707 F2 0B C7    >                        jp		p, .DoneAccelleration
 306+ C70A              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 306+ C70A AF          >                        xor a
 307+ C70B 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 308+ C70C 3A 36 C4                             ld      a,(SpeedAddr)                   ;    speed = limit
 309+ C70F                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 309+ C70F B8          >                        cp     b
 309+ C710 D2 14 C7    >                        jp		nc,.SpeedInLimits
 310+ C713 47                                   ld      b,a                             ; .
 311+ C714 78           .SpeedInLimits:         ld      a,b                             ; .
 312+ C715 32 75 C0                             ld      (UBnKSpeed),a                   ; .
 313+ C718                                      ZeroA                                   ; acclleration = 0
 313+ C718 AF          >                        xor a
 314+ C719 32 76 C0                             ld      (UBnKAccel),a                   ; for next AI update
 315+ C71C              .SkipAccelleration:     ; handle roll and pitch rates
 316+ C71C C9                                   ret
 317+ C71D
 318+ C71D
 319+ C71D CD 56 C7     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 320+ C720 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 321+ C722 32 83 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 322+ C725 32 3E C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 323+ C728 3E 00                                ld      a,0
 324+ C72A 32 78 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 325+ C72D 32 77 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 326+ C730                                      ZeroA
 326+ C730 AF          >                        xor a
 327+ C731 32 22 C0                             ld      (UBnKxsgn),a
 328+ C734 32 25 C0                             ld      (UBnKysgn),a
 329+ C737 32 28 C0                             ld      (UBnKzsgn),a
 330+ C73A 21 00 00                             ld      hl,0
 331+ C73D 22 20 C0                             ld      (UBnKxlo),hl
 332+ C740 22 23 C0                             ld      (UBnKylo),hl
 333+ C743 3A 3D C4                             ld      a,(ShipTypeAddr)
 334+ C746 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 335+ C749                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 335+ C749 FE 02       >                        cp     ShipTypeStation
 335+ C74B C2 52 C7    >                        jp      nz,.SkipFurther
 336+ C74E 3E 05                                ld      a,5
 337+ C750 84                                   add     h
 338+ C751 67                                   ld      h,a
 339+ C752 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 340+ C755 C9                                   ret
 341+ C756                  DISPLAY "Tracing 1", $
 342+ C756              ; --------------------------------------------------------------
 343+ C756              ; This sets the position of the current ship randomly, called after spawing
 344+ C756              ; Spawns in withink 16 bit range so 24 bit friendly
 345+ C756 CD B6 C7     UnivSetSpawnPosition:   call    InitialiseOrientation
 346+ C759                                      RandomUnivPitchAndRoll
 346+ C759 CD 4F 6B    >                        call    doRandom
 346+ C75C F6 6F       >                        or      %01101111
 346+ C75E 32 77 C0    >                        ld      (UBnKRotXCounter),a
 346+ C761 CD 4F 6B    >                        call    doRandom
 346+ C764 F6 6F       >                        or      %01101111
 346+ C766 32 78 C0    >                        ld      (UBnKRotZCounter),a
 347+ C769 CD 4F 6B                             call    doRandom                        ; set x lo and y lo to random
 348+ C76C 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 349+ C76F 32 23 C0     .setYlo:                ld      (UBnKylo),a
 350+ C772 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 351+ C773 47                                   ld      b,a
 352+ C774 E6 80                                and     SignOnly8Bit
 353+ C776 32 22 C0                             ld      (UBnKxsgn),a
 354+ C779 78           .setYSign:              ld      a,b                             ; get random back again
 355+ C77A 0F                                   rrca                                    ; rotate by 1 bit right
 356+ C77B 47                                   ld      b,a
 357+ C77C E6 80                                and     SignOnly8Bit                    ; and set y sign
 358+ C77E 32 25 C0                             ld      (UBnKysgn),a
 359+ C781 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 360+ C783 78                                   ld      a,b                             ;
 361+ C784 E6 1F                                and     31                              ; set y hi to random 0 to 31
 362+ C786 32 24 C0                             ld      (UBnKyhi),a                     ;
 363+ C789 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 364+ C78B 78                                   ld      a,b
 365+ C78C E6 1F                                and     31                              ; set x hi to random 0 to 31
 366+ C78E 4F                                   ld      c,a                             ; save shifted into c as well
 367+ C78F 32 21 C0                             ld      (UBnKxhi),a
 368+ C792 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 369+ C794 98                                   sbc     b
 370+ C795 99                                   sbc     c
 371+ C796 32 27 C0                             ld      (UBnKzhi),a
 372+ C799 3A 3D C4     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 373+ C79C                                      ReturnIfAEqNusng ShipTypeJunk
 373+ C79C FE 03       >                        cp      ShipTypeJunk
 373+ C79E C8          >                        ret     z
 374+ C79F                                      ReturnIfAEqNusng ShipTypeScoopable
 374+ C79F FE 04       >                        cp      ShipTypeScoopable
 374+ C7A1 C8          >                        ret     z
 375+ C7A2 78                                   ld      a,b                             ; its not junk to set z sign
 376+ C7A3 0F                                   rrca                                    ; as it can jump in
 377+ C7A4 E6 80                                and     SignOnly8Bit
 378+ C7A6 32 28 C0                             ld      (UBnKzsgn),a
 379+ C7A9 C9                                   ret
 380+ C7AA                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 381+ C7AA              ;Output: BC = Quotient, HL = Remainder
 382+ C7AA
 383+ C7AA              ; Initialiase data, iyh must equal slot number
 384+ C7AA              ;                   iyl must be ship type
 385+ C7AA              ;                   a  = current bank number
 386+ C7AA 01 51 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 387+ C7AD 21 40 C0                             ld      hl,UBnKStartOfRuntimeData
 388+ C7B0                                      ZeroA
 388+ C7B0 AF          >                        xor a
 389+ C7B1 77           .InitLoop:              ld      (hl),a
 390+ C7B2 23                                   inc     hl
 391+ C7B3 10 FC                                djnz    .InitLoop
 392+ C7B5 C9                                   ret
 393+ C7B6                  DISPLAY "Tracing 2", $
 394+ C7B6
 395+ C7B6                                      include "../../Universe/Ships/InitialiseOrientation.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/InitialiseOrientation.asm
   1++C7B6              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++C7B6              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++C7B6              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++C7B6              InitialiseOrientation:
   5++C7B6 21 00 00     ZI1:                    ld      hl, 0
   6++C7B9 22 2C C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++C7BC 22 2E C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++C7BF 22 30 C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++C7C2 22 34 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++C7C5 22 36 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++C7C8 22 38 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++C7CB              ; Optimised as already have 0 in l
  13++C7CB 26 60                                ld      h, $60	             				; 96 in hi byte
  14++C7CD                                      ;ld      hl,1
  15++C7CD 22 2A C0                             ld      (UBnkrotmatSidevX),hl
  16++C7D0 22 32 C0                             ld      (UBnkrotmatRoofvY),hl
  17++C7D3              ; Optimised as already have 0 in l
  18++C7D3 26 E0                                ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19++C7D5 22 3A C0                             ld      (UBnkrotmatNosevZ),hl
  20++C7D8 C9                                   ret
  21++C7D9
  22++C7D9              InitialisePlayerMissileOrientation:
  23++C7D9 CD B6 C7                             call    InitialiseOrientation
  24++C7DC 21 00 60                             ld      hl,$6000
  25++C7DF 22 3A C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  26++C7E2 C9                                   ret
  27++C7E3
  28++C7E3
  29++C7E3              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  30++C7E3              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  31++C7E3              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  32++C7E3 CD B6 C7     LaunchedOrientation:    call    InitialiseOrientation
  33++C7E6                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  33++C7E6 3A 37 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  33++C7E9 EE 80       >                        xor SignOnly8Bit
  33++C7EB 32 37 C0    >                        ld  (UBnkrotmatNosevX+1),a
  34++C7EE                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  34++C7EE 3A 39 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  34++C7F1 EE 80       >                        xor SignOnly8Bit
  34++C7F3 32 39 C0    >                        ld  (UBnkrotmatNosevY+1),a
  35++C7F6                                      FlipSignMem UBnkrotmatNosevZ+1
  35++C7F6 3A 3B C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  35++C7F9 EE 80       >                        xor SignOnly8Bit
  35++C7FB 32 3B C0    >                        ld  (UBnkrotmatNosevZ+1),a
  36++C7FE C9                                   ret
  37++C7FF
# file closed: ../../Tests/Vectors/../../Universe/Ships/InitialiseOrientation.asm
 396+ C7FF
 397+ C7FF              ;--------------------------------------------------------------------------------------------------------
 398+ C7FF                                      INCLUDE "../../ModelRender/CLIP-LL145.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/CLIP-LL145.asm
   1++C7FF              ;--------------------------------------------------------------------------------------------------------------------
   2++C7FF
   3++C7FF 00           clipDx                  DB      0           ; also XX12+2
   4++C800 00           clipDxHigh              DB      0           ; also XX12+3
   5++C801 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C802 00           clipDy                  DB      0           ; also XX12+4
   7++C803 00           clipDyHigh              DB      0           ; also XX12+5
   8++C804 00           clipGradient            DB      0
   9++C805 00           clipDxySign             DB      0
  10++C806              varX12p3                equ     clipDxySign
  11++C806 00           clipXGTY                DB      0
  12++C807 00           clipFlags               DB      0
  13++C808 00           SWAP                    DB      0
  14++C809 00 00        varYX                   DW      0
  15++C80B              ;varRegX                 DB      0
  16++C80B              ;varXX12p2               DB      0
  17++C80B 00           clipXX13                 DB      0
  18++C80C 00           Gradient                DB      0
  19++C80D              ; for start and end y. bit7 of lower determines its not been setup yet
  20++C80D
  21++C80D              ;--------------------------------------------------------------------------------------
  22++C80D                      IFNDEF       CLIPVersion3
  23++C80D ED 4B D8 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3) Y1
  24++C811 DD 2A DC C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1) Y2
  25++C815 2A D6 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1) X1
  26++C818 ED 5B DA C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5) X2
  27++C81C AF                                   xor     a
  28++C81D 32 08 C8                             ld      (SWAP),a                    ; SWAP = 0
  29++C820 7A                                   ld      a,d                         ; A = X2Hi
  30++C821 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX (128 will actually do)
  31++C824 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  32++C826 20 0A                                jr      nz, .LL107
  33++C828 DD 7D                                ld      a,ixl
  34++C82A ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  35++C82D 20 03                                jr      nz,.LL107
  36++C82F FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  37++C832              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  38++C832              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  39++C832 FD 7C        .LL107                  ld      a,iyh
  40++C834 32 0B C8                             ld      (clipXX13),a                ; debug copy iyh to xx13
  41++C837 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  42++C838 B0                                   or      b                           ;
  43++C839 20 27                                jr      nz,.LL83                    ;
  44++C83B 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  45++C83C ED 27 80                             test    $80                         ; i.e  screen height < y1)
  46++C83F 20 21                                jr      nz,.LL83
  47++C841              ; If we get here, (x1, y1) is on-screen
  48++C841 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  49++C843 FE 00                                cp      0
  50++C845 20 15                                jr      nz, .LL108
  51++C847              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  52++C847 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  53++C848 32 D7 C0                             ld      (UBnkNewY1),a
  54++C84B DD 7D                                ld      a,ixl
  55++C84D 32 D9 C0                             ld      (UBnkNewY2),a
  56++C850 7D                                   ld      a,l
  57++C851 32 D6 C0                             ld      (UBnkNewX1),a
  58++C854 7B                                   ld      a,e
  59++C855 32 D8 C0                             ld      (UBnkNewX2),a
  60++C858                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  60++C858 B7          >                        or a
  61++C859 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  62++C85A              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  63++C85A              .PointsOutofBounds:     SetCarryFlag                        ; LL109 (ClipFailed) carry flag set as not visible
  63++C85A 37          >                        scf
  64++C85B C9                                   ret
  65++C85C FD 7C        .LL108:                 ld      a,iyh
  66++C85E B7                                   or      a
  67++C85F 1F                                   rra
  68++C860 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  69++C862 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  70++C864 ED 27 80                             test    $80                         ;
  71++C867 28 28                                jr      z, .LL115                   ;
  72++C869              ;                       Check for X1 and X2 negative
  73++C869 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++C86A A2                                   and     d
  75++C86B                                      JumpIfNegative  .PointsOutofBounds
  75++C86B FA 5A C8    >                        jp		m, .PointsOutofBounds
  76++C86E              ;                       Check for Y1 and Y2 negative
  77++C86E 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  78++C86F DD A4                                and     ixh
  79++C871                                      JumpIfNegative  .PointsOutofBounds
  79++C871 FA 5A C8    >                        jp		m, .PointsOutofBounds
  80++C874              ;                       Check for X1 and X2 both > 255
  81++C874 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  82++C875 3D                                   dec     a
  83++C876 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  84++C878 7A                                   ld      a,d                         ; a = x2 hi
  85++C879 3D                                   dec     a
  86++C87A FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  87++C87C                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  87++C87C F2 5A C8    >                        jp		p, .PointsOutofBounds
  88++C87F              ; by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  89++C87F DD 7C                                ld      a,ixh
  90++C881 3D                                   dec     a
  91++C882 FD 6F                                ld      iyl,a
  92++C884 78                                   ld      a,b
  93++C885 3D                                   dec     a
  94++C886 FD B5                                or      iyl
  95++C888                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  95++C888 F2 5A C8    >                        jp		p, .PointsOutofBounds
  96++C88B 79                                   ld      a,c
  97++C88C DD A5                                and     ixl
  98++C88E                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  98++C88E FA 5A C8    >                        jp		m, .PointsOutofBounds
  99++C891              ; Clip line: calulate the line's gradient
 100++C891              ; here as an optimisation we make sure X1 is always < X2  later on
 101++C891              .LL115:                 ClearCarryFlag
 101++C891 B7          >                        or a
 102++C892 E5 D5        .CalcDX:                push    hl,,de
 103++C894 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 104++C895 ED 52                                sbc     hl,de
 105++C897 22 FF C7                             ld      (clipDx),hl
 106++C89A 7C                                   ld      a,h
 107++C89B 32 01 C8                             ld      (clipDxHighNonABS),a
 108++C89E              .CalcDy:                ClearCarryFlag
 108++C89E B7          >                        or a
 109++C89F DD E5 E1                             ld      hl,ix
 110++C8A2 ED 42                                sbc     hl,bc
 111++C8A4 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 112++C8A6 22 02 C8                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 113++C8A9 7C           .CalcQuadrant:          ld      a,h
 114++C8AA 32 03 C8                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 115++C8AD              ; So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 116++C8AD 21 00 C8                             ld      hl,clipDxHigh
 117++C8B0 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 118++C8B1 32 4E 67                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 119++C8B4 32 05 C8                             ld      (clipDxySign),a
 120++C8B7 3A 03 C8     .AbsDy:                 ld      a,(clipDyHigh)
 121++C8BA ED 27 80                             test    $80
 122++C8BD 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 123++C8BF ED 5B 02 C8                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 124++C8C3                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 124++C8C3 AF          >					xor 	a
 124++C8C4 93          >                    sub 	e
 124++C8C5 5F          >                    ld 		e,a
 124++C8C6 9F          >                    sbc 	a,a
 124++C8C7 92          >                    sub 	d
 124++C8C8 57          >                    ld 		d,a
 125++C8C9 ED 53 02 C8                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 126++C8CD 2A FF C7     .LL110:                 ld      hl,(clipDx)
 127++C8D0 3A 00 C8                             ld      a,(clipDxHigh)
 128++C8D3 ED 27 80                             test    $80                         ; is it a negative X
 129++C8D6 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 130++C8D8                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 131++C8D8                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 131++C8D8 AF          >					xor 	a
 131++C8D9 95          >					sub 	l
 131++C8DA 6F          >					ld 		l,a
 131++C8DB 9F          >					sbc 	a,a
 131++C8DC 94          >					sub 	h
 131++C8DD 67          >					ld 		h,a
 132++C8DE              .LL111:
 133++C8DE 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 134++C8DF B2                                   or      d
 135++C8E0 28 0A                                jr      z,.CalculateDelta
 136++C8E2                                      ShiftDERight1
 136++C8E2 CB 3A       >			   srl d
 136++C8E4 CB 1B       >			   rr  e
 137++C8E6                                      ShiftHLRight1
 137++C8E6 CB 3C       >			   srl h
 137++C8E8 CB 1D       >			   rr  l
 138++C8EA 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 139++C8EC              .CalculateDelta:
 140++C8EC              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 141++C8EC AF           .LL113:                 xor     a
 142++C8ED 32 68 67                             ld      (varT),a                    ; t = 0
 143++C8F0 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 144++C8F1                                      JumpIfALTNusng  e, .LL114           ;
 144++C8F1 BB          >                        cp      e
 144++C8F2 DA 02 C9    >                        jp		c, .LL114
 145++C8F5              ; Here Dx >= Dy sp calculate Delta Y / delta X
 146++C8F5 32 4C 67     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 147++C8F8 57                                   ld      d,a                         ; d = also Q for calc
 148++C8F9 7B                                   ld      a,e                         ; Set A = delta_y_lo
 149++C8FA CD CF 70                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 150++C8FD 32 4D 67                             ld      (varR),a                    ;
 151++C900 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 152++C902              ; Here Delta Y > Delta X so calulate delta X / delta Y
 153++C902 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 154++C903 57                                   ld      d,a
 155++C904 32 4C 67                             ld      (varQ),a
 156++C907 7D                                   ld      a,l                         ; Set A = delta_x_lo
 157++C908 CD CF 70                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 158++C90B 32 4D 67                             ld      (varR),a                    ;
 159++C90E 21 68 67                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 160++C911 35                                   dec     (hl)
 161++C912 D1           .LL116:                 pop     de                          ; get back X2
 162++C913 E1                                   pop     hl                          ; get back X1 into hl,
 163++C914 3A 4D 67                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 164++C917 32 04 C8                             ld      (clipGradient),a
 165++C91A FD 6F                                ld      iyl,a
 166++C91C 3A 4E 67                             ld      a,(varS)
 167++C91F 32 05 C8                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 168++C922                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 169++C922 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 170++C924 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 171++C926 28 05                                jr      z,.LL138                    ;
 172++C928 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 173++C92B 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 174++C92D              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 175++C92D CD 54 C9     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 176++C930 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 177++C932 ED 27 80                             test    $80
 178++C935 28 1A                                jr      z,.LL124
 179++C937              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 180++C937 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 181++C938 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 182++C939 C2 5A C8                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 183++C93C B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 184++C93D FA 5A C8                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 185++C940              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 186++C940              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 187++C940 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 188++C941 DD E5                                push    ix                          ;  swap Y1 and Y2
 189++C943 C5                                   push    bc
 190++C944 DD E1                                pop     ix
 191++C946 C1                                   pop     bc
 192++C947 CD 54 C9                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 193++C94A 3A 08 C8                             ld      a,(SWAP)
 194++C94D 3D                                   dec     a
 195++C94E 32 08 C8                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 196++C951 C3 47 C8     .LL124:                 jp      .ClipDone                    ; now put points in place
 197++C954              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 198++C954              ; iyh still holds XX13 iyl still holds gradient
 199++C954 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 200++C955 ED 27 80                             test    $80
 201++C958 28 17                                jr      z,.LL119
 202++C95A 32 4E 67     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 203++C95D E5 D5 C5                             push    hl,,de,,bc
 204++C960 CD D6 C9                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 205++C963                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 206++C963                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 207++C963 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 208++C966 2A 09 C8                             ld      hl,(varYX)
 209++C969 09                                   add     hl,bc                       ; y1 = y1 + varYX
 210++C96A 44 4D                                ld      bc,hl
 211++C96C 21 00 00                             ld      hl,0                        ; Set x1 = 0
 212++C96F 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 213++C971 FE 00        .LL119:                 cp      0
 214++C973 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 215++C975 3D                                   dec     a
 216++C976 32 4E 67                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 217++C979 E5 D5 C5                             push    hl,,de,,bc
 218++C97C CD D6 C9                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 219++C97F                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 220++C97F                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 221++C97F C1 D1 E1                             pop     hl,,de,,bc
 222++C982 2A 09 C8                             ld      hl,(varYX)
 223++C985 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++C986 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 225++C988 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 226++C98B              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 227++C98B 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 228++C98C ED 27 80                             test    $80                         ;
 229++C98F 28 1A                                jr      z,.LL135                    ;
 230++C991 32 4E 67                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 231++C994 79                                   ld      a,c                         ; Set R = y1_lo
 232++C995 32 4D 67                             ld      (varR),a                    ;
 233++C998 E5 D5 C5                             push    hl,,de,,bc
 234++C99B CD 37 CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 235++C99E                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 236++C99E                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 237++C99E C1 D1 E1                             pop     hl,,de,,bc
 238++C9A1 D5                                   push    de
 239++C9A2 EB                                   ex      hl,de                       ; de = x1
 240++C9A3 2A 09 C8                             ld      hl,(varYX)                  ; hl = varYX
 241++C9A6 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 242++C9A7 D1                                   pop     de                          ; de = x2 again
 243++C9A8 01 00 00                             ld      bc,0                        ; Set y1 = 0
 244++C9AB 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 245++C9AC E6 80                                and     $80
 246++C9AE B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 247++C9AF C8                                   ret     z
 248++C9B0 E5                                   push    hl
 249++C9B1 60 69                                ld      hl,bc
 250++C9B3 01 80 00                             ld      bc,128
 251++C9B6 B7                                   or      a
 252++C9B7 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 253++C9B9 22 4D 67                             ld      (varRS), hl                 ; and now RS (or SR)
 254++C9BC 7C                                   ld      a,h
 255++C9BD E1                                   pop     hl
 256++C9BE ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 257++C9C1 C0                                   ret     nz
 258++C9C2              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 259++C9C2 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 260++C9C5 CD 37 CA                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 261++C9C8                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 262++C9C8                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 263++C9C8 C1 D1 E1                             pop     hl,,de,,bc
 264++C9CB D5                                   push    de
 265++C9CC EB                                   ex      hl,de
 266++C9CD 2A 09 C8                             ld      hl,(varYX)
 267++C9D0 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 268++C9D1 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 269++C9D4 D1                                   pop     de
 270++C9D5 C9           .LL136:                 ret                                 ;  Return from the subroutine
 271++C9D6                      ENDIF
 272++C9D6
 273++C9D6              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 274++C9D6              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 275++C9D6              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 276++C9D6              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 277++C9D6 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 278++C9D7 32 4D 67                             ld      (varR),a
 279++C9DA CD 94 CA                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 280++C9DD F5                                   push    af                           ;  Store A on the stack so we can use it later
 281++C9DE C5                                   push    bc
 282++C9DF 47                                   ld      b,a
 283++C9E0 3A 68 67                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 284++C9E3 FE 00                                cp      0
 285++C9E5 78                                   ld      a,b
 286++C9E6 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 287++C9E7 C2 FE C9                             jp      nz, .LL121
 288++C9EA              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 289++C9EA 3A 04 C8     .LL122:                  ld      a,(clipGradient)
 290++C9ED 32 4C 67                             ld      (varQ),a; optimise
 291++C9F0 CD B7 6B                             call    HLequSRmulQdiv256
 292++C9F3 22 09 C8                             ld      (varYX),hl
 293++C9F6 F1                                   pop     af
 294++C9F7 ED 27 80                             test    $80
 295++C9FA CA 2A CA                             jp      z,.LL133
 296++C9FD C9                                   ret
 297++C9FE 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 298++CA01 2A 4D 67                             ld      hl,(varRS)                  ; hl = RS
 299++CA04 3A 4C 67                             ld      a,(varQ)
 300++CA07 47                                   ld      b,a                         ; b = q
 301++CA08              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 301++CA08 CB 25       >			   sla l
 301++CA0A CB 14       >			   rl  h
 302++CA0C 7C                                   ld      a,h
 303++CA0D 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 304++CA0F                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 304++CA0F B8          >                        cp      b
 304++CA10 DA 1B CA    >                        jp		c, .LL132
 305++CA13 3F           .LL131:                 ccf                                 ; compliment carry
 306++CA14 98                                   sbc     a,b                         ; q
 307++CA15 67                                   ld      h,a                         ; h (s)
 308++CA16 7D                                   ld      a,l                         ; r
 309++CA17 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 310++CA19 37                                   scf                                 ; set carry for next rolls
 311++CA1A 3F                                   ccf
 312++CA1B              .LL132:                 RollDELeft1                         ; Rotate de bits left
 312++CA1B CB 13       >               rl  e
 312++CA1D CB 12       >               rl  d
 313++CA1F 38 E7                                jr      c,.LL130                    ;
 314++CA21 ED 53 09 C8                          ld      (varYX),de
 315++CA25 F1                                   pop     af              ; get back sign
 316++CA26 ED 27 80                             test    $80
 317++CA29 C8                                   ret     z               ; if negative then return with value as is reversed sign
 318++CA2A 2A 09 C8     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 319++CA2D                                      NegHL
 319++CA2D AF          >                    xor a
 319++CA2E 95          >                    sub l
 319++CA2F 6F          >                    ld l,a
 319++CA30 9F          >                    sbc a,a
 319++CA31 94          >                    sub h
 319++CA32 67          >                    ld h,a
 320++CA33 22 09 C8                             ld      (varYX),hl
 321++CA36 C9           .LL128:                 ret
 322++CA37
 323++CA37
 324++CA37
 325++CA37
 326++CA37              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 327++CA37              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 328++CA37              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 329++CA37              ;
 330++CA37              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 331++CA37              ;                          LL133                Negate (Y X) and return from the subroutine
 332++CA37              ;                          LL128                Contains an RTS
 333++CA37 CD 94 CA     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 334++CA3A F5                                   push    af                          ; Store A on the stack so we can use it later
 335++CA3B C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 336++CA3C 47                                   ld      b,a
 337++CA3D 3A 68 67                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 338++CA40 FE 00                                cp      0
 339++CA42 78                                   ld      a,b
 340++CA43 C1                                   pop     bc
 341++CA44 C2 80 CA                             jp      nz, .LL122
 342++CA47              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 343++CA47 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 344++CA4A 2A 4D 67                             ld      hl,(varRS)                  ; hl = RS
 345++CA4D 3A 4C 67                             ld      a,(varQ)
 346++CA50 47                                   ld      b,a                         ; b = q
 347++CA51              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 347++CA51 CB 25       >			   sla l
 347++CA53 CB 14       >			   rl  h
 348++CA55 7C                                   ld      a,h
 349++CA56 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 350++CA58                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 350++CA58 B8          >                        cp      b
 350++CA59 DA 64 CA    >                        jp		c, .LL132
 351++CA5C 3F           .LL131:                 ccf                                 ; compliment carry
 352++CA5D 98                                   sbc     a,b                         ; q
 353++CA5E 67                                   ld      h,a                         ; h (s)
 354++CA5F 7D                                   ld      a,l                         ; r
 355++CA60 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 356++CA62 37                                   scf                                 ; set carry for next rolls
 357++CA63 3F                                   ccf
 358++CA64              .LL132:                 RollDELeft1                         ; Rotate de bits left
 358++CA64 CB 13       >               rl  e
 358++CA66 CB 12       >               rl  d
 359++CA68 38 E7                                jr      c,.LL130                    ;
 360++CA6A ED 53 09 C8                          ld      (varYX),de
 361++CA6E F1                                   pop     af              ; get back sign
 362++CA6F ED 27 80                             test    $80
 363++CA72 C8                                   ret     z               ; if negative then return with value as is reversed sign
 364++CA73 2A 09 C8     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 365++CA76                                      NegHL
 365++CA76 AF          >                    xor a
 365++CA77 95          >                    sub l
 365++CA78 6F          >                    ld l,a
 365++CA79 9F          >                    sbc a,a
 365++CA7A 94          >                    sub h
 365++CA7B 67          >                    ld h,a
 366++CA7C 22 09 C8                             ld      (varYX),hl
 367++CA7F C9           .LL128:                 ret
 368++CA80              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 369++CA80 3A 04 C8     .LL122:                 ld      a,(clipGradient)
 370++CA83 32 4C 67                             ld      (varQ),a; optimise
 371++CA86 CD B7 6B                             call    HLequSRmulQdiv256
 372++CA89 22 09 C8                             ld      (varYX),hl
 373++CA8C F1                                   pop     af
 374++CA8D ED 27 80                             test    $80
 375++CA90 CA 73 CA                             jp      z,.LL133
 376++CA93 C9                                   ret
 377++CA94
 378++CA94              ; Do the following, in this order:  Q = XX12+2
 379++CA94              ;                                   A = S EOR XX12+3
 380++CA94              ;                                   (S R) = |S R|
 381++CA94              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 382++CA94 3A 04 C8     LL129:                  ld      a,(clipGradient)
 383++CA97 32 4C 67                             ld      (varQ),a                    ; Set Q = XX12+2
 384++CA9A 3A 4E 67                             ld      a,(varS)                    ; If S is positive, jump to LL127
 385++CA9D E5 F5                                push    hl,,af                      ; else
 386++CA9F ED 27 80                             test    $80                         ;   if bit 7 is clear
 387++CAA2 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 388++CAA4 2A 4D 67                             ld      hl,(varRS)                  ;      .
 389++CAA7                                      NegHL                               ;      .
 389++CAA7 AF          >                    xor a
 389++CAA8 95          >                    sub l
 389++CAA9 6F          >                    ld l,a
 389++CAAA 9F          >                    sbc a,a
 389++CAAB 94          >                    sub h
 389++CAAC 67          >                    ld h,a
 390++CAAD 22 4D 67                             ld      (varRS),hl                  ;      .
 391++CAB0 21 05 C8     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 392++CAB3 F1                                   pop     af                          ;
 393++CAB4 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 394++CAB5 E1                                   pop     hl
 395++CAB6 C9                                   ret
 396++CAB7
 397++CAB7              ;--------------------------------------------------------------------------------------
 398++CAB7              ; Thow away out of bounds by more than 250
 399++CAB7              ClipLineV3:             ;break
 400++CAB7                      IFDEF       CLIPVersion3
 401++CAB7 ~            ;My logic version
 402++CAB7 ~            .CheckYorder:
 403++CAB7 ~                                    ld      hl,(UbnkPreClipY1)
 404++CAB7 ~                                    ld      de,(UbnkPreClipY2)
 405++CAB7 ~                                    call    CompareHLDESgn
 406++CAB7 ~                                    jr      c,.LineP1toP2                          ; if Y1 < Y2 then we can use the points as is else we have to swap
 407++CAB7 ~            .LineP2toP1:            ld      bc,(UbnkPreClipY2)                      ; fetch and write out in reverse
 408++CAB7 ~                                    ld      ix,(UbnkPreClipY1)
 409++CAB7 ~                                    ld      de,(UbnkPreClipX1)
 410++CAB7 ~                                    ld      hl,(UbnkPreClipX2)
 411++CAB7 ~                                    ld      (UbnkPreClipY1),bc                      ; bc - XX15(2,3) Y1
 412++CAB7 ~                                    ld      (UbnkPreClipY2),ix                      ; ix - XX12(0,1) Y2
 413++CAB7 ~                                    ld      (UbnkPreClipX1),hl                      ; hl - XX15(0,1) X1
 414++CAB7 ~                                    ld      (UbnkPreClipX2),de                      ;  de - XX15(4,5) X2
 415++CAB7 ~                                    jp      .CheckNoClip
 416++CAB7 ~            .LineP1toP2             ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3) Y1
 417++CAB7 ~                                    ld      ix,(UbnkPreClipY2)                      ; ix - XX12(0,1) Y2
 418++CAB7 ~                                    ld      hl,(UbnkPreClipX1)                      ; hl - XX15(0,1) X1
 419++CAB7 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5) X2
 420++CAB7 ~            .CheckNoClip:           ld      a,b
 421++CAB7 ~                                    or      d
 422++CAB7 ~                                    or      h
 423++CAB7 ~                                    or      ixh
 424++CAB7 ~                                    jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 425++CAB7 ~                                    ld      a,c                                 ; then we clip
 426++CAB7 ~                                    and     ixl
 427++CAB7 ~                                    test    $80
 428++CAB7 ~                                    jp      z, .ClipComplete
 429++CAB7 ~            ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 430++CAB7 ~            .CheckXOffScreen:       ld      a,h
 431++CAB7 ~                                    xor     d
 432++CAB7 ~                                    test    $80                                 ; non descructive test of bit 7 is set
 433++CAB7 ~                                    jp      nz,.X1X2OppositeSign                ; if bit 7 was set then x1 and x2 must be opposite signs so its on screen
 434++CAB7 ~            .X1X2SameSigns:         ld      a,h                                 ; so to get there h and d must be the same sign
 435++CAB7 ~                                    test    $80                                 ; if they are the same sign and at x1 is negative then x2 must be negative so off screen
 436++CAB7 ~                                    JumpIfAIsZero .X1X2CheckIfBothRight
 437++CAB7 ~            .X1X2BothNegative:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 438++CAB7 ~                                    ret
 439++CAB7 ~            .X1X2CheckIfBothRight:  and     a                                   ; we have h in a already
 440++CAB7 ~                                    jr      z,.X1OnScreen
 441++CAB7 ~                                    ld      a,d
 442++CAB7 ~                                    and     a
 443++CAB7 ~                                    jr      z,.X2OnScreen
 444++CAB7 ~            .X1X2OffRightSide:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 445++CAB7 ~                                    ret
 446++CAB7 ~            ;                       to get to here x1 and x2 either span -ve to +ve or from on screen to off screen
 447++CAB7 ~            .X1OnScreen:
 448++CAB7 ~            .X2OnScreen:
 449++CAB7 ~            .X1X2OppositeSign:
 450++CAB7 ~            ;                       Now check to see if Y is off screen
 451++CAB7 ~            .CheckYOffScreen:       ld      a,b                                     ; Check if y1 and y2 are opposite signs, fi so it spans screen so we are good
 452++CAB7 ~            .CheckBothYNegative:    xor     ixh
 453++CAB7 ~                                    test    $80                                     ; if bit 7 is set then opposite signs
 454++CAB7 ~                                    jp      nz,.Y1Y2OppositeSign                    ; if y1 and y2 are opposite signs its on screen and spans at least one side
 455++CAB7 ~            .Y1Y2SameSign:          ld      a,b                                     ; if they are the same sign then if one is negative, so is the other so off screen
 456++CAB7 ~                                    test    $80
 457++CAB7 ~                                    jp      z,.Y1Y2Positive
 458++CAB7 ~            .Y1Y2Negative:          SetCarryFlag
 459++CAB7 ~                                    ret
 460++CAB7 ~            .Y1Y2Positive:          ld      a,c                                     ; if its the same sign y1 or y2 could be 0 and if they are
 461++CAB7 ~                                    and     $80                                     ; this will test to see if b >0 or c > 127
 462++CAB7 ~                                    or      b                                       ;
 463++CAB7 ~                                    jp      z,.Y1OnScreen
 464++CAB7 ~                                    ld      a,ixl
 465++CAB7 ~                                    and     $80
 466++CAB7 ~                                    or      ixh
 467++CAB7 ~                                    jp      z,.Y2OnScreen
 468++CAB7 ~            .Y1Y2OffBottomSide:     SetCarryFlag
 469++CAB7 ~                                    ret
 470++CAB7 ~            .Y1OnScreen:
 471++CAB7 ~            .Y2OnScreen:
 472++CAB7 ~            .Y1Y2OppositeSign:
 473++CAB7 ~            .StartProcessing:       ld      hl,(UbnkPreClipX1)                      ; Now we can test and Clip
 474++CAB7 ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5)
 475++CAB7 ~                                    ld      iyh,0                                   ; set iyh flags to 0
 476++CAB7 ~            ; if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord       ; we can optimise this later
 477++CAB7 ~                                    ld      a,h
 478++CAB7 ~                                    or      b
 479++CAB7 ~                                    jr      z,.CheckP1Ylo
 480++CAB7 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 481++CAB7 ~            ;                               bit 1 - P2 Needs Clipping
 482++CAB7 ~            ;                               bit 2 - x1 >= x2 (left to right)
 483++CAB7 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 484++CAB7 ~            ;                               bit 4 -  DY/DX (steep)
 485++CAB7 ~            .P1OffScreen:           ld      iyh,1                                   ; if either p1 x or y was off screen set bit 0 to 1
 486++CAB7 ~                                    jp      .CheckP2OffScreen                       ; .
 487++CAB7 ~            .CheckP1Ylo:            ld      a,c                                     ; .
 488++CAB7 ~                                    and     $80                                     ; .
 489++CAB7 ~                                    jr      z,.CheckP2OffScreen                     ; .
 490++CAB7 ~                                    ld      iyh,1                                   ; .
 491++CAB7 ~            .CheckP2OffScreen:      ld      a,d                                     ; if x2hi or y2 off screen then set bit 2 of clipcoord to 1
 492++CAB7 ~                                    or      ixh                                     ; .
 493++CAB7 ~                                    jr      z,.CheckP2Ylo                           ; .
 494++CAB7 ~            .P2OffScreen:           ld      a,iyh                                   ; .
 495++CAB7 ~                                    or      2                                       ; .
 496++CAB7 ~                                    ld      iyh,a                                   ; .
 497++CAB7 ~                                    jp      .CheckXDirection                        ; .
 498++CAB7 ~            .CheckP2Ylo:            ld      a,ixl                                   ; .
 499++CAB7 ~                                    and     $80                                     ; .
 500++CAB7 ~                                    jr      z,.CheckXDirection                      ; .
 501++CAB7 ~                                    ld      a,iyh                                   ; .
 502++CAB7 ~                                    or      2                                       ; .
 503++CAB7 ~                                    ld      iyh,a                                   ; .
 504++CAB7 ~            .CheckXDirection:       push    de,,hl
 505++CAB7 ~                                    call    CompareHLDESgn                          ; IF HL equals DE, Z=1,C=0, IF HL is less than DE, Z=0,C=1, IF HL is more than DE, Z=0,C=0
 506++CAB7 ~                                    pop     de,,hl
 507++CAB7 ~                                    jp      c,.CalculateDx                          ;
 508++CAB7 ~            .X1gteX2:               ld      a,iyh                                   ; if x1 >= x2 then set bit 3 to denote -ve x direction, note we will eliminate horziontal / vertical early as an optimisation
 509++CAB7 ~                                    or      4                                       ; .
 510++CAB7 ~                                    ld      iyh,a                                   ; .
 511++CAB7 ~                                    ; Y Direction is now always top to bottom
 512++CAB7 ~            .CalculateDx:           ClearCarryFlag                                  ;                       calculate DX
 513++CAB7 ~                                    sbc     hl,de                                   ; .
 514++CAB7 ~            .ABSDX:                 ld      a,h                                     ; HL = | HL - DE |
 515++CAB7 ~                                    test    $80                                     ; .
 516++CAB7 ~                                    jr      z,.DXPositive                           ; .
 517++CAB7 ~                                    macronegate16hl                                 ; .
 518++CAB7 ~            .DXPositive:            ex      de,hl                                   ; de = abs delta x
 519++CAB7 ~            .CalculateDy:           ClearCarryFlag                                  ; hl = Y2 -Y1 as its pre sorted its always positive if on screen
 520++CAB7 ~                                    ld      hl,ix                                   ; iy = hl = Y2 - Y1
 521++CAB7 ~                                    sbc     hl,bc                                   ; .
 522++CAB7 ~            .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 523++CAB7 ~            ;calculate DY
 524++CAB7 ~            .ScaleLoop:             ld      a,h                                     ; At this point DX and DY are ABS values
 525++CAB7 ~                                    or      d                                       ; .
 526++CAB7 ~                                    jr      z,.ScaleDone                            ; .
 527++CAB7 ~                                    ShiftDERight1                                   ; .
 528++CAB7 ~                                    ShiftHLRight1                                   ; .
 529++CAB7 ~                                    jr      .ScaleLoop                              ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 530++CAB7 ~            .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 531++CAB7 ~            ; if Dx = 0 then horizontal line and clip X1 & X2 only then exit
 532++CAB7 ~            ; if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 533++CAB7 ~
 534++CAB7 ~            ; if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 535++CAB7 ~            ;        else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 536++CAB7 ~            .CalculateDelta:        ld      a,e                                     ; if DX < DY goto DX/DY
 537++CAB7 ~                                    JumpIfALTNusng l,.DXdivDY                       ; else do DY/DX
 538++CAB7 ~            .DYdivDX:               ld      a,l                                     ;    A = DY
 539++CAB7 ~                                    ld      d,e                                     ;    D = DX
 540++CAB7 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DY / DX
 541++CAB7 ~            .SaveGradientDYDX:      ld      (Gradient),a
 542++CAB7 ~                                    ld      a,iyh                                   ;    bit 5 of iyh denotes that its a DX/DY (steep), if its clear its DY/DX (shallow)
 543++CAB7 ~                                    or      16                                      ;    .
 544++CAB7 ~                                    ld      iyh,a                                   ;    .
 545++CAB7 ~                                    jp      .ClipP1                                 ;    .
 546++CAB7 ~            .DXdivDY:               ld      a,e                                     ;    A = DX
 547++CAB7 ~                                    ld      d,l                                     ;    D = DY
 548++CAB7 ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DX / DY
 549++CAB7 ~            .SaveGradientDXDY:      ld      (Gradient),a
 550++CAB7 ~            ; if bit 1 of clipccord is set call    LL118
 551++CAB7 ~            .ClipP1:                ld      a,iyh                                   ; if bit 1 is clear to say no need to clip pont 1 we just jump to point 2
 552++CAB7 ~                                    test    1                                       ; .
 553++CAB7 ~                                    jp      z,.ClipP2                               ; .
 554++CAB7 ~                                    call    LL118v3                                 ; else clip P1 first
 555++CAB7 ~                                    ld      a,b                                     ;      and if b or h have a value its failed to totally clip  as it may be only in bounds on just x or y
 556++CAB7 ~                                    or      h                                       ;      .
 557++CAB7 ~                                    jr      z, .P1Ygt127Check                       ;      .
 558++CAB7 ~            .P1HighOutofBounds:     SetCarryFlag                                    ;      .
 559++CAB7 ~                                    ret                                             ;      .
 560++CAB7 ~            .P1Ygt127Check:         ld      a,c                                     ;      or if y > 127 its failed to totally clip
 561++CAB7 ~                                    test    $80                                     ;      .
 562++CAB7 ~                                    SetCarryFlag                                    ;      .
 563++CAB7 ~                                    ret     nz                                      ;      .
 564++CAB7 ~                                    ld      (UbnkPreClipY1), bc                     ;      else its valid and clipped point 1 so save ti back
 565++CAB7 ~                                    ld      (UbnkPreClipX1), hl
 566++CAB7 ~            ; if bit 2 of clipcoord is set
 567++CAB7 ~            ;        swap x1y1 with x2y2
 568++CAB7 ~            ;        call    LL118
 569++CAB7 ~            .ClipP2:                ld      a,iyh                                   ; so now repeat all that for point 2
 570++CAB7 ~                                    and     2
 571++CAB7 ~                                    jp      z,.ClipComplete
 572++CAB7 ~                                    call    LL118v3PreSwap                          ; now clip p2
 573++CAB7 ~                                    ld      a,b                                     ; if either high is set then it failed to properly clip
 574++CAB7 ~                                    or      h                                       ; .
 575++CAB7 ~                                    jr      z, .P2Ygt127Check                       ; .
 576++CAB7 ~            .P2HighOutofBounds:     SetCarryFlag                                    ; .
 577++CAB7 ~                                    ret                                             ; .
 578++CAB7 ~            .P2Ygt127Check:         ld      a,c                                     ; if c > 127 then it also failed to clip
 579++CAB7 ~                                    test    $80                                     ; .
 580++CAB7 ~                                    SetCarryFlag                                    ; .
 581++CAB7 ~                                    ret     nz                                      ; .
 582++CAB7 ~                                    ld      (UbnkPreClipY2), bc                     ; bc - XX15(2,3);;
 583++CAB7 ~                                    ld      (UbnkPreClipX2), hl
 584++CAB7 ~            ;clip compelte exit
 585++CAB7 ~            .ClipComplete:          ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3);;
 586++CAB7 ~                                    ld      hl,(UbnkPreClipX1)
 587++CAB7 ~                                    ld      ix,(UbnkPreClipY2)                      ; bc - XX15(2,3);;
 588++CAB7 ~                                    ld      de,(UbnkPreClipX2)
 589++CAB7 ~            .SaveClippedLine:       ld      a,c                                     ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 590++CAB7 ~                                    ld      (UBnkNewY1),a
 591++CAB7 ~                                    ld      a,ixl
 592++CAB7 ~                                    ld      (UBnkNewY2),a
 593++CAB7 ~                                    ld      a,l
 594++CAB7 ~                                    ld      (UBnkNewX1),a
 595++CAB7 ~                                    ld      a,e
 596++CAB7 ~                                    ld      (UBnkNewX2),a
 597++CAB7 ~                                    ClearCarryFlag                              ; we have a success so not carry
 598++CAB7 ~                                    ret
 599++CAB7 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 600++CAB7 ~            LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 601++CAB7 ~                                    ld      hl,(UbnkPreClipX2)
 602++CAB7 ~                                    jp      LL118v3Fetched
 603++CAB7 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 604++CAB7 ~            LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 605++CAB7 ~                                    ld      hl,(UbnkPreClipX1)
 606++CAB7 ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 607++CAB7 ~            LL118v3Fetched:
 608++CAB7 ~            ;                       At this point bc = y position, hl = x position both 16 bit
 609++CAB7 ~            ;                       if x < 0 then x = 0
 610++CAB7 ~            ;                                     adjust = -x */ gradient depending on if its steep or shallow
 611++CAB7 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 612++CAB7 ~            ;                       if x > 255 then x = 255
 613++CAB7 ~            ;                                     adjust = x-255 */ gradient
 614++CAB7 ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 615++CAB7 ~            ;                       if y < 0 then y = 0
 616++CAB7 ~            ;                                     adjust = -y */ gradient
 617++CAB7 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 618++CAB7 ~            ;                       if y >127 then y = 127
 619++CAB7 ~            ;                                     adjust = y-127 */ gradient
 620++CAB7 ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 621++CAB7 ~            ;
 622++CAB7 ~            ;                       iyh     bit 0 - P1 Needs Clipping
 623++CAB7 ~            ;                               bit 1 - P2 Needs Clipping
 624++CAB7 ~            ;                               bit 2 - x1 >= x2 (left to right)
 625++CAB7 ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 626++CAB7 ~            ;                               bit 4 -  DY/DX (steep)
 627++CAB7 ~            ; if X1 hi <> 0
 628++CAB7 ~            LL118:                  ;break
 629++CAB7 ~                                    ld      a,h                                     ; if x1 high is 0 then we don't need to clip x at all
 630++CAB7 ~                                    and     a
 631++CAB7 ~                                    jp      z,.X1NoClipNeeded
 632++CAB7 ~            ;                       if x1 hi bit 7 is set (so negative)
 633++CAB7 ~            .CalcBlockX:            test    $80                                     ; if h is postiive then jump to the XPositive Calc block
 634++CAB7 ~                                    jr      z,.CalcBlockXPositive
 635++CAB7 ~            ;                       if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 636++CAB7 ~            .CalcBlockXNegative:    ld      a,iyh                                   ;
 637++CAB7 ~                                    test    16                                      ; bit 5 of iyh denotes that its a DY/DX, if its clear its DX/DY
 638++CAB7 ~                                    jr      nz,.CalcBlockXNegMulGrad
 639++CAB7 ~            .CaclBlockXNegDivGrad:  macronegate16hl
 640++CAB7 ~                                    ld      a,(Gradient)
 641++CAB7 ~                                    push    bc                                      ; abs(X1) / Gradient
 642++CAB7 ~                                    ld      h,c                     ; move offset into high byte of h
 643++CAB7 ~                                    ld      l,0
 644++CAB7 ~                                    ld      c,a
 645++CAB7 ~                                    call    div_hl_c
 646++CAB7 ~                                    pop     bc
 647++CAB7 ~                                    jp      .DoneXNegCalc
 648++CAB7 ~            ;                       else set Adjust = abs(X1) * Gradient
 649++CAB7 ~            .CalcBlockXNegMulGrad:  push    bc                                      ; abs(X1) * Gradient
 650++CAB7 ~                                    macronegate16hl
 651++CAB7 ~                                    ld      a,(Gradient)
 652++CAB7 ~                                    call    HLeqyHLmulAdiv256
 653++CAB7 ~                                    pop     bc
 654++CAB7 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 655++CAB7 ~            ;                       x1 = 0 then call into DonrX1Calc
 656++CAB7 ~            ;                       we can skip the test for negative Y direection
 657++CAB7 ~            .DoneXNegCalc:          macronegate16hl
 658++CAB7 ~            .XNegSkipNegate:        ld      de,bc
 659++CAB7 ~                                    ex      hl,de
 660++CAB7 ~                                    add     hl,de
 661++CAB7 ~                                    ld      bc,hl
 662++CAB7 ~                                    ld      hl,0
 663++CAB7 ~                                    jp      .DoneXCalc
 664++CAB7 ~            ;                       else x1 hi is positive
 665++CAB7 ~            ;                       if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 666++CAB7 ~            .CalcBlockXPositive:    ld      a,iyh
 667++CAB7 ~                                    test    16
 668++CAB7 ~                                    jr      nz,.CalcBlockXPosMulGrad
 669++CAB7 ~            .CalcBlockXPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 670++CAB7 ~                                    push    bc
 671++CAB7 ~                                    ld      c,a
 672++CAB7 ~                                    ld      de,255
 673++CAB7 ~                                    sub     hl,de
 674++CAB7 ~                                    ld      h,l
 675++CAB7 ~                                    ld      l,0
 676++CAB7 ~                                    call    div_hl_c
 677++CAB7 ~                                    pop     bc
 678++CAB7 ~                                    jp      .DoneX2Calc
 679++CAB7 ~            ;                                 else set Adjust = X1 lo * Gradient
 680++CAB7 ~            .CalcBlockXPosMulGrad:  push    bc
 681++CAB7 ~                                    ld      a,(Gradient)            ;Q = gradient
 682++CAB7 ~                                    ld      de,255
 683++CAB7 ~                                    sub     hl,de
 684++CAB7 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 685++CAB7 ~                                    pop     bc
 686++CAB7 ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 687++CAB7 ~            ;                       x1 = 255
 688++CAB7 ~            ;                       we can skip the test for negative Y direection
 689++CAB7 ~            .DoneX2Calc:            macronegate16hl
 690++CAB7 ~            .X2SkipNegate:          ex      de,hl
 691++CAB7 ~                                    ld      hl,bc
 692++CAB7 ~                                    add     hl,de
 693++CAB7 ~                                    ld      bc,hl
 694++CAB7 ~                                    ld      hl,255
 695++CAB7 ~            ;                       if Y1 hi <> 0 or Y1 low >= 128 then y coordinate is good
 696++CAB7 ~            .DoneXCalc:             ld      a,b
 697++CAB7 ~                                    and     a
 698++CAB7 ~                                    jr      nz,.CalcBlockY1Test
 699++CAB7 ~                                    ld      a,c
 700++CAB7 ~                                    and     $80
 701++CAB7 ~                                    ClearCarryFlag                  ; speculative clear of carry in case its good
 702++CAB7 ~                                    ret     z
 703++CAB7 ~            ;                       if Y1 hi bit 7 is set
 704++CAB7 ~            .X1NoClipNeeded:
 705++CAB7 ~            .CalcBlockY1Test:       ld      a,b
 706++CAB7 ~                                    test    $80
 707++CAB7 ~                                    jr      z,.CalcBlockYPos       ; if Y is positive jump forward
 708++CAB7 ~            ;                       if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 709++CAB7 ~                                    break
 710++CAB7 ~            .CalcBlockY1:           ld      a,iyh
 711++CAB7 ~                                    test    16
 712++CAB7 ~                                    jr      nz,.CalcBlockYNegMulGrad
 713++CAB7 ~            .CalcBlockYNegDivGrad:  macronegate16bc
 714++CAB7 ~                                    ld      a,(Gradient)            ;Q = gradient
 715++CAB7 ~                                    push    hl
 716++CAB7 ~                                    ld      h,c                     ; move offset into high byte of h
 717++CAB7 ~                                    ld      l,0
 718++CAB7 ~                                    ld      c,a
 719++CAB7 ~                                    call    div_hl_c;LLHLdivC;div_hl_c
 720++CAB7 ~                                    pop     de
 721++CAB7 ~                                    ex      de,hl
 722++CAB7 ~                                    jp      .DoneBlockY1
 723++CAB7 ~            ;                                 else set Adjust = abs(Y1) * Gradient
 724++CAB7 ~            .CalcBlockYNegMulGrad:  macronegate16bc
 725++CAB7 ~                                    push    hl
 726++CAB7 ~                                    ld      hl,bc
 727++CAB7 ~                                    ld      a,(Gradient)            ;Q = gradient
 728++CAB7 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 729++CAB7 ~                                    pop     de
 730++CAB7 ~                                    ex      de,hl
 731++CAB7 ~            ;                       x1 += adjust * (-1 if bit 3 of clipcoord is set)
 732++CAB7 ~            ;                       y1 = 0
 733++CAB7 ~            ;                       ret
 734++CAB7 ~            ;                       now we have done the adjustment, if y or x are off screen then the line spans screen in only 1 dimension so doesn't get drawn
 735++CAB7 ~            .DoneBlockY1:           ld      a,iyh
 736++CAB7 ~                                    test    4
 737++CAB7 ~                                    jr      z,.Y1SkipNegate
 738++CAB7 ~                                    macronegate16de
 739++CAB7 ~            .Y1SkipNegate:          add     hl,de
 740++CAB7 ~                                    ld      bc,0
 741++CAB7 ~                                    ret
 742++CAB7 ~            ;                       if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 743++CAB7 ~            .CalcBlockYPos:         ld      a,iyh
 744++CAB7 ~                                    test    16
 745++CAB7 ~                                    jr      z,.CalcBlockYPosMulGrad
 746++CAB7 ~            .CalcBlockYPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 747++CAB7 ~                                    push    hl
 748++CAB7 ~                                    ld      hl,bc
 749++CAB7 ~                                    ld      de,127
 750++CAB7 ~                                    sub     hl,de
 751++CAB7 ~                                    ld      h,l
 752++CAB7 ~                                    ld      l,0
 753++CAB7 ~                                    ld      c,a
 754++CAB7 ~                                    call    div_hl_c;LLHLdivC
 755++CAB7 ~                                    pop     de
 756++CAB7 ~                                    ex      de,hl
 757++CAB7 ~                                    jp      .DoneBlockY2
 758++CAB7 ~            ;                                 else set Adjust = Y1 lo * Gradient
 759++CAB7 ~            .CalcBlockYPosMulGrad:  push    hl
 760++CAB7 ~                                    ld      hl,bc
 761++CAB7 ~                                    ld      de,127
 762++CAB7 ~                                    sub     hl,de
 763++CAB7 ~                                    ld      a,(Gradient)
 764++CAB7 ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 765++CAB7 ~                                    pop     de
 766++CAB7 ~                                    ex      de,hl
 767++CAB7 ~            ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 768++CAB7 ~            ;                y1 = 127
 769++CAB7 ~            .DoneBlockY2:           ld      a,iyh
 770++CAB7 ~                                    test    4
 771++CAB7 ~                                    jr      nz,.Y2SkipNegate
 772++CAB7 ~                                    macronegate16de
 773++CAB7 ~            .Y2SkipNegate:          add     hl,de
 774++CAB7 ~                                    ld      bc,127
 775++CAB7 ~                                    ret
 776++CAB7                      ELSE
 777++CAB7 C9                       ret
 778++CAB8                      ENDIF
 779++CAB8              ; old code for on screen test
 780++CAB8              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 781++CAB8              ;;;;;;
 782++CAB8              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 783++CAB8              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 784++CAB8              ;;;;;;                        and     ixh
 785++CAB8              ;;;;;;                        jp      .CheckYLow
 786++CAB8              ;;;;;;                        ld
 787++CAB8              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 788++CAB8              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 789++CAB8              ;;;;;;                        ld      a,ixh                               ;
 790++CAB8              ;;;;;;                        and     a                                   ;
 791++CAB8              ;;;;;;                        ret     nz                                  ;
 792++CAB8              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 793++CAB8              ;;;;;;                        ld      a,b                                 ;
 794++CAB8              ;;;;;;                        and     ixh                                 ;
 795++CAB8              ;;;;;;                        and     $80                                 ;
 796++CAB8              ;;;;;;                        ret     z                                   ;
 797++CAB8              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 798++CAB8              ;;;;;;                        ld      a,b                                 ;
 799++CAB8              ;;;;;;                        and     ixh                                 ;
 800++CAB8              ;;;;;;                        ret     nz                                  ;
 801++CAB8              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 802++CAB8              ;;;;;;                        ld      a,b
 803++CAB8              ;;;;;;                        or      ixh
 804++CAB8              ;;;;;;                        jr      nz,.StartProcessing
 805++CAB8              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 806++CAB8              ;;;;;;                        ld      a,c
 807++CAB8              ;;;;;;                        or      ixl
 808++CAB8              ;;;;;;                        and     $80
 809++CAB8              ;;;;;;                        jr      z,.StartProcessing
 810++CAB8              ;;;;;;
 811++CAB8              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 812++CAB8              ;;;;;;                        cp      0                                   ;
 813++CAB8              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 814++CAB8              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 815++CAB8              ;;;;;;                        cp      0                                   ;
 816++CAB8              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 817++CAB8              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 818++CAB8              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 819++CAB8              ;;;;;;                        and     $80                                 ;
 820++CAB8              ;;;;;;                        ret     z                                   ;
 821++CAB8              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 822++CAB8              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 823++CAB8              ;;;;;;                        cp      0                                   ;
 824++CAB8              ;;;;;;                        jr      nz,.Startprocessing                 ;
 825++CAB8              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 826++CAB8              ;;;;;;                        and     ixl
 827++CAB8              ;;;;;;
 828++CAB8              ;;;;;;                        .CheckY2Lo                        ;
 829++CAB8              ;;;;;;.CheckY1Lo:             ld      a,c
 830++CAB8              ;;;;;;                        and     $80
 831++CAB8              ;;;;;;                        jr      z,.StartProcessing
 832++CAB8              ;;;;;;.CheckY2Lo:             ld      a,ixl
 833++CAB8              ;;;;;;                        and     $80
 834++CAB8              ;;;;;;                        ret     nz
 835++CAB8              ;;;;;;;clip = 0
# file closed: ../../Tests/Vectors/../../ModelRender/CLIP-LL145.asm
 399+ CAB8              ;--------------------------------------------------------------------------------------------------------
 400+ CAB8                                      INCLUDE "../../Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyRotmatToTransMat.asm
   1++CAB8              ; Set TransMatTo
   2++CAB8              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CAB8              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CAB8              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CAB8              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CAB8              ; 18 byte fast copy
   7++CAB8
   8++CAB8              ; Fast copy using the stack                                                         ; T states
   9++CAB8 F3           CopyRotmatToTransMat:   di                                                          ; disable interrups to protect during copy
  10++CAB9 DD 21 00 00                          ld      ix,0                                                ; 14
  11++CABD DD 39                                add     ix,sp                                               ; 15
  12++CABF 31 2A C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  13++CAC2 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  14++CAC3 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  15++CAC4 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  16++CAC5 D9                                   exx                                                         ; 4
  17++CAC6 E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  18++CAC7 D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  19++CAC8 C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  20++CAC9 31 9D C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  21++CACC C5                                   push    bc                                                  ; 10
  22++CACD D5                                   push    de                                                  ; 10
  23++CACE E5                                   push    hl                                                  ; 10
  24++CACF D9                                   exx                                                         ; 4
  25++CAD0 C5                                   push    bc                                                  ; 10
  26++CAD1 D5                                   push    de                                                  ; 10
  27++CAD2 E5                                   push    hl                                                  ; 10
  28++CAD3 31 36 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  29++CAD6 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  30++CAD7 D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  31++CAD8 C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  32++CAD9 31 A3 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  33++CADC C5                                   push    bc                                                  ; 10
  34++CADD D5                                   push    de                                                  ; 10
  35++CADE E5                                   push    hl                                                  ; 10
  36++CADF DD F9                                ld      sp,ix               ; restore stack                 ; 10
  37++CAE1                                  IFNDEF INTERRUPS_DISABLE
  38++CAE1 ~                                    ei
  39++CAE1                                  ENDIF
  40++CAE1 C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  41++CAE2
  42++CAE2
  43++CAE2
  44++CAE2              ;CopyRotmatToTransMat:
  45++CAE2              ;                        ld      hl,UBnkrotmatSidevX
  46++CAE2              ;                        ld      de,UBnkTransmatSidevX
  47++CAE2              ;                        SixLDIInstrunctions
  48++CAE2              ;                        ld      hl,UBnkrotmatRoofvX
  49++CAE2              ;                        ld      de, UBnkTransmatRoofvX
  50++CAE2              ;                        SixLDIInstrunctions
  51++CAE2              ;                        ld      hl,UBnkrotmatNosevX
  52++CAE2              ;                        ld      de, UBnkTransmatNosevX
  53++CAE2              ;                        SixLDIInstrunctions
  54++CAE2              ;                        ret
  55++CAE2
  56++CAE2              CopyRotToTransMacro:    MACRO
  57++CAE2 ~                                    ld      hl,UBnkrotmatSidevX
  58++CAE2 ~                                    ld      de,UBnkTransmatSidevX
  59++CAE2 ~                                    SixLDIInstrunctions
  60++CAE2 ~                                    SixLDIInstrunctions
  61++CAE2 ~                                    SixLDIInstrunctions
  62++CAE2                                      ENDM
  63++CAE2
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyRotmatToTransMat.asm
 401+ CAE2                                      INCLUDE "../../Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CAE2              TransposeXX12ByShipToXX15:
   2++CAE2 2A DC C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CAE5 7C           		ld		a,h			                        ; get XX12 Sign
   4++CAE6 E6 80        		and		$80									; check sign bit on high byte
   5++CAE8 47           		ld		b,a									; and put it in of 12xlo in b
   6++CAE9                      ;110921 debugld      h,0
   7++CAE9 7C                   ld      a,h
   8++CAEA E6 7F                and     $7F
   9++CAEC 67                   ld      h,a
  10++CAED                      ;110921 debugld      h,0
  11++CAED ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CAF1 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CAF4 E6 80        		and		$80									; make sure we only have bit 7
  14++CAF6 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CAF7 CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CAFA B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CAFB 67           		ld		h,a
  18++CAFC 22 D6 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CAFF              ; ..................................
  20++CAFF 2A DE C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CB02 7C           		ld		a,h
  22++CB03 E6 80        		and		$80
  23++CB05 47           		ld		b,a
  24++CB06                      ;110921 debugld      h,0
  25++CB06 7C                   ld      a,h
  26++CB07 E6 7F                and     $7F
  27++CB09 67                   ld      h,a
  28++CB0A                      ;110921 debugld      h,0
  29++CB0A ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CB0E 3A 25 C0     		ld		a,(UBnKysgn)
  31++CB11 E6 80        		and		$80									; make sure we only have bit 7
  32++CB13 4F           		ld		c,a
  33++CB14 CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CB17 B4           		or		h									; combine sign in A with H
  35++CB18 67           		ld		h,a
  36++CB19 22 D8 C0     		ld		(UBnkYScaled),hl
  37++CB1C              ; ..................................
  38++CB1C 2A E0 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CB1F 7C           		ld		a,h
  40++CB20 E6 80        		and		$80
  41++CB22 47           		ld		b,a
  42++CB23                      ;110921 debugld      h,0
  43++CB23 7C                   ld      a,h
  44++CB24 E6 7F                and     $7F
  45++CB26 67                   ld      h,a
  46++CB27                      ;110921 debugld      h,0
  47++CB27 ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CB2B 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CB2E E6 80        		and		$80									; make sure we only have bit 7
  50++CB30 4F           		ld		c,a
  51++CB31 CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CB34 B4           		or		h									; combine sign in A with H
  53++CB35 67           		ld		h,a
  54++CB36 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CB38 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CB3A E6 7F                and     $7F                                 ; a = value unsigned
  57++CB3C 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CB3E 7D                   ld      a,l                                 ; get low byte now
  59++CB3F              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CB3F FE 04       >                        cp      4
  59++CB41 DA 50 CB    >                        jp		c, ClampZto4
  60++CB44              NoClampZto4:
  61++CB44 22 DA C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CB47 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CB48 32 68 67             ld      (varT),a
  64++CB4B 7C           		ld		a,h
  65++CB4C 32 4B 67             ld      (varU),a
  66++CB4F C9           		ret
  67++CB50              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CB50 21 04 00     		ld		hl,4
  69++CB53 22 DA C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CB56 7D           		ld		a,l
  71++CB57 32 68 67             ld      (varT),a                            ;                                                                           ;;;
  72++CB5A 7C           		ld		a,h
  73++CB5B 32 4B 67             ld      (varU),a 						; compatibility for now
  74++CB5E C9           		ret
  75++CB5F
# file closed: ../../Tests/Vectors/../../Universe/Ships/TransposeXX12ByShipToXX15.asm
 402+ CB5F                                      INCLUDE "../../Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ../../Tests/Vectors/../../Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CB5F              ScaleNodeTo8Bit:								; TODO make signed
   2++CB5F ED 4B DA C0  	ld			bc,(UBnkZScaled)
   3++CB63 2A D6 C0     	ld			hl,(UBnkXScaled)
   4++CB66 ED 5B D8 C0  	ld			de,(UBnkYScaled)
   5++CB6A              SetABSbc:
   6++CB6A 78           	ld			a,b
   7++CB6B DD 67        	ld			ixh,a
   8++CB6D E6 7F        	and			SignMask8Bit
   9++CB6F 47           	ld			b,a									; bc = ABS bc
  10++CB70              SetABShl:
  11++CB70 7C           	ld			a,h
  12++CB71 DD 6F        	ld			ixl,a
  13++CB73 E6 7F        	and			SignMask8Bit
  14++CB75 67           	ld			h,a									; hl = ABS hl
  15++CB76              SetABSde:
  16++CB76 7A           	ld			a,d
  17++CB77 FD 67        	ld			iyh,a
  18++CB79 E6 7F        	and			SignMask8Bit
  19++CB7B 57           	ld			d,a									; de = ABS de
  20++CB7C              ScaleNodeTo8BitLoop:
  21++CB7C 78               ld          a,b		                            ; U	\ z hi
  22++CB7D B4           	or			h                                   ; XX15+1	\ x hi
  23++CB7E B2           	or			d                                   ; XX15+4	\ y hi
  24++CB7F 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CB81                  ShiftHLRight1
  25++CB81 CB 3C       >			   srl h
  25++CB83 CB 1D       >			   rr  l
  26++CB85                  ShiftDERight1
  26++CB85 CB 3A       >			   srl d
  26++CB87 CB 1B       >			   rr  e
  27++CB89              	ShiftBCRight1
  27++CB89 CB 38       >			   srl b
  27++CB8B CB 19       >			   rr  c
  28++CB8D C3 7C CB         jp          ScaleNodeTo8BitLoop
  29++CB90              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CB90 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CB92 E6 80        	and			SignOnly8Bit
  32++CB94 B0           	or			b
  33++CB95 47           	ld			b,a
  34++CB96              SignforHL:
  35++CB96 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CB98 E6 80        	and			SignOnly8Bit
  37++CB9A B4           	or			h
  38++CB9B 67           	ld			h,a
  39++CB9C              SignforDE:
  40++CB9C FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CB9E E6 80        	and			SignOnly8Bit
  42++CBA0 B2           	or			d
  43++CBA1 57           	ld			d,a
  44++CBA2              SignsDoneSaveResult:
  45++CBA2 ED 43 DA C0  	ld			(UBnkZScaled),bc
  46++CBA6 22 D6 C0     	ld			(UBnkXScaled),hl
  47++CBA9 ED 53 D8 C0  	ld			(UBnkYScaled),de
  48++CBAD 78           	ld			a,b
  49++CBAE 32 4B 67     	ld			(varU),a
  50++CBB1 79           	ld			a,c
  51++CBB2 32 68 67     	ld			(varT),a
  52++CBB5 C9           	ret
  53++CBB6
# file closed: ../../Tests/Vectors/../../Maths/Utilities/ScaleNodeTo8Bit.asm
 403+ CBB6
 404+ CBB6              ;--------------------------------------------------------------------------------------------------------
 405+ CBB6 21 02 C1     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 406+ CBB9 ED 31                                add     hl,a
 407+ CBBB 3E FF                                ld      a,$FF
 408+ CBBD 77                                   ld      (hl),a
 409+ CBBE C9                                   ret
 410+ CBBF              ;--------------------------------------------------------------------------------------------------------
 411+ CBBF 21 02 C1     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 412+ CBC2 ED 31                                add     hl,a
 413+ CBC4 AF                                   xor     a
 414+ CBC5 77                                   ld      (hl),a
 415+ CBC6 C9                                   ret
 416+ CBC7              ;--------------------------------------------------------------------------------------------------------
 417+ CBC7 3A 33 C4     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 418+ CBCA CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 419+ CBCC CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 420+ CBCE 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 421+ CBCF 21 02 C1                             ld      hl,UbnkFaceVisArray
 422+ CBD2 3E FF                                ld      a,$FF
 423+ CBD4              SetAllFacesVisibleLoop:
 424+ CBD4 77           EE30:                   ld      (hl),a
 425+ CBD5 23                                   inc     hl
 426+ CBD6 10 FC                                djnz    SetAllFacesVisibleLoop
 427+ CBD8 C9                                   ret
 428+ CBD9              ;--------------------------------------------------------------------------------------------------------
 429+ CBD9 3A 33 C4     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 430+ CBDC CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 431+ CBDE CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 432+ CBE0 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 433+ CBE1 06 10                                ld      b,16
 434+ CBE3 21 02 C1                             ld      hl,UbnkFaceVisArray
 435+ CBE6 3E 00                                ld      a,$00
 436+ CBE8 77           SetAllFacesHiddenLoop:  ld      (hl),a
 437+ CBE9 23                                   inc     hl
 438+ CBEA 10 FC                                djnz    SetAllFacesHiddenLoop
 439+ CBEC C9                                   ret
 440+ CBED              ;--------------------------------------------------------------------------------------------------------
 441+ CBED                                      include "../../Universe/Ships/NormaliseTransMat.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/NormaliseTransMat.asm
   1++CBED              ;divdide by 16 using undocumented instrunctions
   2++CBED 47           Norm256mulAdivQ:        ld      b,a
   3++CBEE 0E 00                                ld      c,0
   4++CBF0 16 00                                ld      d,0
   5++CBF2 3A 4C 67                             ld      a,(varQ)
   6++CBF5 5F                                   ld      e,a
   7++CBF6              ;Input: BC = Dividend, DE = Divisor, HL = 0
   8++CBF6              ;Output: BC = Quotient, HL = Remainder
   9++CBF6 21 00 00     NormDIV16UNDOC:         ld      hl,0
  10++CBF9 78                                   ld      a,b
  11++CBFA 06 10                                ld      b,16
  12++CBFC CB 31        NormDIV16UNDOCLOOP:     sll	    c		; unroll 16 times
  13++CBFE 17                                   rla	    		; ...
  14++CBFF ED 6A                                adc	    hl,hl		; ...
  15++CC01 ED 52                                sbc	    hl,de		; ...
  16++CC03 30 02                                jr	    nc,NormDIV16UNDOCSKIP		; ...
  17++CC05 19                                   add	    hl,de		; ...
  18++CC06 0D                                   dec	    c		; ...
  19++CC07 10 F3        NormDIV16UNDOCSKIP:     djnz    NormDIV16UNDOCLOOP
  20++CC09 79                                   ld      a,c
  21++CC0A 32 4D 67                             ld      (varR),a
  22++CC0D C9                                   ret
  23++CC0E
  24++CC0E FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  25++CC10                                      ClearSignBitA
  25++CC10 E6 7F       >                        and     SignMask8Bit
  26++CC12 CD ED CB                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  27++CC15 FD 7C                                ld      a,iyh                       ; now correct R reg
  28++CC17                                      SignBitOnlyA
  28++CC17 E6 80       >                        and     SignOnly8Bit
  29++CC19 B1                                   or      c
  30++CC1A 32 4D 67                             ld      (varR),a
  31++CC1D C9                                   ret
  32++CC1E
  33++CC1E              ; Tested OK
  34++CC1E              ;LL21
  35++CC1E              NormaliseTransMat:
  36++CC1E                      IFDEF LOGMATHS
  37++CC1E ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  38++CC1E ~                            ld      b,9                         ; total of 9 elements to transform
  39++CC1E ~                            MMUSelectMathsTables
  40++CC1E ~            .LL21Loop:      ld      d,(hl)
  41++CC1E ~                            dec     hl
  42++CC1E ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  43++CC1E ~                            ShiftDELeft1                        ; De = DE * 2
  44++CC1E ~                            ld      a,d                         ; a = hi byte after shifting
  45++CC1E ~                            push	hl
  46++CC1E ~                            push	bc
  47++CC1E ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  48++CC1E ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  49++CC1E ~                            pop		bc
  50++CC1E ~                            pop		hl							; bc gets wrecked by BFRDIV
  51++CC1E ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  52++CC1E ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  53++CC1E ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  54++CC1E ~                            MMUSelectROM0
  55++CC1E ~                            ret
  56++CC1E                      ELSE
  57++CC1E 21 A2 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  58++CC21 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  59++CC23 79                           ld      a,c
  60++CC24 32 4C 67                     ld      (varQ),a                    ; set up varQ
  61++CC27 06 09                        ld      b,9                         ; total of 9 elements to transform
  62++CC29 56           LL21Loop:       ld      d,(hl)
  63++CC2A 2B                           dec     hl
  64++CC2B 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  65++CC2C                              ShiftDELeft1                        ; De = DE * 2
  65++CC2C CB 23       >			   sla e
  65++CC2E CB 12       >			   rl  d
  66++CC30 7A                           ld      a,d                         ; a = hi byte after shifting
  67++CC31 E5                           push	hl
  68++CC32 C5                           push	bc
  69++CC33 CD ED CB                     call    Norm256mulAdivQ
  70++CC36                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  71++CC36 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  72++CC37 C1                           pop		bc
  73++CC38 E1                           pop		hl							; bc gets wrecked by BFRDIV
  74++CC39 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  75++CC3A 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  76++CC3B 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  77++CC3D C9                           ret
  78++CC3E                      ENDIF
# file closed: ../../Tests/Vectors/../../Universe/Ships/NormaliseTransMat.asm
 442+ CC3E              ;--------------------------------------------------------------------------------------------------------
 443+ CC3E                                      include "../../Universe/Ships/InverseXX16.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/InverseXX16.asm
   1++CC3E              ; TESTEDOK
   2++CC3E
   3++CC3E              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CC3E              ;        ld      a,(XX17)
   5++CC3E              ;        ld      ixl,a
   6++CC3E              ;        ld      ixh,9
   7++CC3E              ;        ld      hl,UBnkTransInv0x
   8++CC3E              ;        ld      a,(hl)
   9++CC3E              ;ScaleNode:
  10++CC3E              ;        ld      b,ixl
  11++CC3E              ;ScaleNodeLoop:
  12++CC3E              ;        sla      a
  13++CC3E              ;        djnz    ScaleNodeLoop
  14++CC3E              ;        ld      (hl),a
  15++CC3E              ;        inc     hl
  16++CC3E              ;        inc     hl
  17++CC3E              ;        dec     ixh
  18++CC3E              ;        jr      nz,ScaleNode
  19++CC3E              ;        ret
  20++CC3E
  21++CC3E
  22++CC3E              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CC3E              ; we coudl combine this with move to transmat later as an optimisation
  24++CC3E              ; INPUT - All Scaled
  25++CC3E              ;  They transmat has already been put into side, roof nose order
  26++CC3E              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CC3E              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CC3E              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CC3E              ; OUTPUT
  30++CC3E              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CC3E              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CC3E              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CC3E              ; First all side values become compoment 0 of each vector
  34++CC3E 2A 91 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CC41 ED 5B 97 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CC45 ED 4B 9D C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CC49 22 A9 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CC4C ED 53 AB C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CC50 ED 43 AD C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CC54 2A 93 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CC57 ED 5B 99 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CC5B ED 4B 9F C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CC5F 22 B1 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CC62 ED 53 B3 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CC66 ED 43 B5 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CC6A 2A 95 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CC6D ED 5B 9B C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CC71 ED 4B A1 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CC75 22 B9 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CC78 ED 53 BB C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CC7C ED 43 BD C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CC80 C9                   ret
  53++CC81
  54++CC81
# file closed: ../../Tests/Vectors/../../Universe/Ships/InverseXX16.asm
 444+ CC81              ;--------------------------------------------------------------------------------------------------------
 445+ CC81              XX12DotOneRow:
 446+ CC81              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 446+ CC81 3A D6 C0    >                        ld      a,(UBnkXScaled)                        ;
 446+ CC84 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 446+ CC85 7E          >                        ld      a,(hl)                        ; A = XX16 element
 446+ CC86 57          >                        ld      d,a
 446+ CC87 ED 30       >                        mul
 446+ CC89 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 446+ CC8A 32 68 67    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 447+ CC8D 23                                   inc     hl                                  ; move to sign byte
 448+ CC8E              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 448+ CC8E 3A D7 C0    >                        ld      a,(UBnkXScaledSign)
 448+ CC91 AE          >                        xor     (hl)
 449+ CC92 32 4E 67                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 450+ CC95 23                                   inc     hl
 451+ CC96              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 451+ CC96 3A D8 C0    >                        ld      a,(UBnkYScaled)                        ;
 451+ CC99 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 451+ CC9A 7E          >                        ld      a,(hl)                        ; A = XX16 element
 451+ CC9B 57          >                        ld      d,a
 451+ CC9C ED 30       >                        mul
 451+ CC9E 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 451+ CC9F 32 4C 67    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 452+ CCA2                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 452+ CCA2 3A 68 67    >                        ld       a,(varT)
 452+ CCA5 32 4D 67    >                        ld       (varR),a
 453+ CCA8 23                                   inc     hl
 454+ CCA9                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 454+ CCA9 3A D9 C0    >                        ld      a,(UBnkYScaledSign)
 454+ CCAC AE          >                        xor     (hl)
 455+ CCAD              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 456+ CCAD E5           STequSRplusAQ           push    hl
 457+ CCAE CD F9 77                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 458+ CCB1 E1                                   pop     hl
 459+ CCB2 32 68 67                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 460+ CCB5 23                                   inc     hl
 461+ CCB6              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 461+ CCB6 3A DA C0    >                        ld      a,(UBnkZScaled)                        ;
 461+ CCB9 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 461+ CCBA 7E          >                        ld      a,(hl)                        ; A = XX16 element
 461+ CCBB 57          >                        ld      d,a
 461+ CCBC ED 30       >                        mul
 461+ CCBE 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 461+ CCBF 32 4C 67    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 462+ CCC2                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 462+ CCC2 3A 68 67    >                        ld       a,(varT)
 462+ CCC5 32 4D 67    >                        ld       (varR),a
 463+ CCC8 23                                   inc     hl
 464+ CCC9                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 464+ CCC9 3A DB C0    >                        ld      a,(UBnkZScaledSign)
 464+ CCCC AE          >                        xor     (hl)
 465+ CCCD              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 466+ CCCD CD F9 77                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 467+ CCD0              ; Now we exit with A = result S = Sign
 468+ CCD0 C9                                   ret
 469+ CCD1
 470+ CCD1
 471+ CCD1                  DISPLAY "Tracing 4", $
 472+ CCD1
 473+ CCD1              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 474+ CCD1              ;TESTED OK
 475+ CCD1              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 476+ CCD1              XX12EquXX15DotProductXX16:
 477+ CCD1 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 478+ CCD4 21 91 C0                             ld      hl,UBnkTransmatSidevX
 479+ CCD7 CD 81 CC                             call    XX12DotOneRow
 480+ CCDA 32 DC C0                             ld      (UBnkXX12xLo),a
 481+ CCDD 3A 4E 67                             ld      a,(varS)
 482+ CCE0 32 DD C0                             ld      (UBnkXX12xSign),a
 483+ CCE3 21 97 C0                             ld      hl,UBnkTransmatRoofvX
 484+ CCE6 CD 81 CC                             call    XX12DotOneRow
 485+ CCE9 32 DE C0                             ld      (UBnkXX12yLo),a
 486+ CCEC 3A 4E 67                             ld      a,(varS)
 487+ CCEF 32 DF C0                             ld      (UBnkXX12ySign),a
 488+ CCF2 21 9D C0                             ld      hl,UBnkTransmatNosevX
 489+ CCF5 CD 81 CC                             call    XX12DotOneRow
 490+ CCF8 32 E0 C0                             ld      (UBnkXX12zLo),a
 491+ CCFB 3A 4E 67                             ld      a,(varS)
 492+ CCFE 32 E1 C0                             ld      (UBnkXX12zSign),a
 493+ CD01 C9                                   ret
 494+ CD02              ;--------------------------------------------------------------------------------------------------------
 495+ CD02                                      INCLUDE "../../Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CD02              CopyXX12ScaledToXX18:
   2++CD02              CopyResultToDrawCam:
   3++CD02                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CD02 3A DC C0    >                        ld       a,(XX12)
   3++CD05 32 CA C0    >                        ld       (XX18),a
   4++CD08                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CD08 3A DD C0    >                        ld       a,(XX12+1)
   4++CD0B 32 CC C0    >                        ld       (XX18+2),a
   5++CD0E                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CD0E 3A DE C0    >                        ld       a,(XX12+2)
   5++CD11 32 CD C0    >                        ld       (XX18+3),a
   6++CD14                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CD14 3A DF C0    >                        ld       a,(XX12+3)
   6++CD17 32 CF C0    >                        ld       (XX18+5),a
   7++CD1A                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CD1A 3A E0 C0    >                        ld       a,(XX12+4)
   7++CD1D 32 D0 C0    >                        ld       (XX18+6),a
   8++CD20                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CD20 3A E1 C0    >                        ld       a,(XX12+5)
   8++CD23 32 D2 C0    >                        ld       (XX18+8),a
   9++CD26 C9                   ret
  10++CD27
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ScaledToXX18.asm
 496+ CD27                                      INCLUDE "../../Universe/Ships/CopyXX12toXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX12toXX15.asm
   1++CD27              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CD27 3A DC C0    >                        ld       a,(UBnkXX12xLo)
   1++CD2A 32 D6 C0    >                        ld       (UBnkXScaled),a
   2++CD2D                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CD2D 3A DD C0    >                        ld       a,(UBnkXX12xSign)
   2++CD30 32 D7 C0    >                        ld       (UBnkXScaledSign),a
   3++CD33                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CD33 3A DE C0    >                        ld       a,(UBnkXX12yLo)
   3++CD36 32 D8 C0    >                        ld       (UBnkYScaled),a
   4++CD39                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CD39 3A DF C0    >                        ld       a,(UBnkXX12ySign)
   4++CD3C 32 D9 C0    >                        ld       (UBnkYScaledSign),a
   5++CD3F                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CD3F 3A E0 C0    >                        ld       a,(UBnkXX12zLo)
   5++CD42 32 DA C0    >                        ld       (UBnkZScaled),a
   6++CD45                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CD45 3A E1 C0    >                        ld       a,(UBnkXX12zSign)
   6++CD48 32 DB C0    >                        ld       (UBnkZScaledSign),a
   7++CD4B C9                                   ret
   8++CD4C
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX12toXX15.asm
 497+ CD4C                                      INCLUDE "../../Universe/Ships/CopyXX18toXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX18toXX15.asm
   1++CD4C              CopyXX18toXX15:
   2++CD4C              CopyDrawCamToScaled:
   3++CD4C                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CD4C 3A CA C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CD4F 32 D6 C0    >                        ld       (UBnkXScaled),a
   4++CD52                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CD52 3A CC C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CD55 32 D7 C0    >                        ld       (UBnkXScaledSign),a
   5++CD58                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CD58 3A CD C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CD5B 32 D8 C0    >                        ld       (UBnkYScaled),a
   6++CD5E                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CD5E 3A CF C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CD61 32 D9 C0    >                        ld       (UBnkYScaledSign),a
   7++CD64                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CD64 3A D0 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CD67 32 DA C0    >                        ld       (UBnkZScaled),a
   8++CD6A                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CD6A 3A D2 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CD6D 32 DB C0    >                        ld       (UBnkZScaledSign),a
   9++CD70 C9                   ret
  10++CD71
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX18toXX15.asm
 498+ CD71                                      INCLUDE "../../Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CD71 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++CD74 ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++CD78 ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++CD7C 22 CA C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++CD7F ED 53 CC C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++CD83 ED 43 CE C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++CD87
   8++CD87 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++CD8A 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++CD8D 22 D0 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++CD90 32 D2 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++CD93 C9                                   ret
  13++CD94              ;                       ld      hl,UBnKxlo
  14++CD94              ;                       ld      de,UBnkDrawCam0xLo
  15++CD94              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++CD94 C9                                   ret
  17++CD95
  18++CD95 2A CA C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++CD98 3A CC C0                             ld  a,(UBnkDrawCam0xSgn)
  20++CD9B B4                                   or  h
  21++CD9C 67                                   ld  h,a
  22++CD9D 22 D6 C0                             ld  (UBnkXScaled),hl
  23++CDA0 2A CD C0                             ld  hl,(UBnkDrawCam0yLo)
  24++CDA3 3A CF C0                             ld  a,(UBnkDrawCam0ySgn)
  25++CDA6 B4                                   or  h
  26++CDA7 67                                   ld  h,a
  27++CDA8 22 D8 C0                             ld  (UBnkYScaled),hl
  28++CDAB 2A D0 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++CDAE 3A D2 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++CDB1 B4                                   or  h
  31++CDB2 67                                   ld  h,a
  32++CDB3 22 DA C0                             ld  (UBnkZScaled),hl
  33++CDB6 C9                                   ret
  34++CDB7
  35++CDB7              ;;;CopyXX18ScaledToXX15:
  36++CDB7              ;;;CopyDrawCamToScaledMatrix:
  37++CDB7              ;;;        ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  38++CDB7              ;;;        ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  39++CDB7              ;;;        ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  40++CDB7              ;;;        ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  41++CDB7              ;;;        ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  42++CDB7              ;;;        ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  43++CDB7              ;;;        ret
  44++CDB7
  45++CDB7              ;;;CopyXX15ToXX18Scaled:
  46++CDB7              ;;;CopyScaledMatrixToDrawCam:
  47++CDB7              ;;;        ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  48++CDB7              ;;;        ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  49++CDB7              ;;;        ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  50++CDB7              ;;;        ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  51++CDB7              ;;;        ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  52++CDB7              ;;;        ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  53++CDB7              ;;;        ret
  54++CDB7
  55++CDB7
  56++CDB7              XX15EquXX15AddXX18:
  57++CDB7              LL94Z:
  58++CDB7 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++CDB9 16 00                ld      d,0                                                     ;
  60++CDBB 3A DA C0             ld      a,(UBnkZScaled)                                         ;
  61++CDBE 6F                   ld      l,a                                                     ;
  62++CDBF 3A DB C0             ld      a,(UBnkZScaledSign)                                     ;
  63++CDC2 47                   ld      b,a                                                     ;
  64++CDC3 3A D0 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++CDC6 5F                   ld      e,a                                                     ;
  66++CDC7 3A D2 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++CDCA 4F                   ld      c,a                                                     ;
  68++CDCB CD 33 00             call    ADDHLDESignBC                                           ;
  69++CDCE 47                   ld      b,a                                                     ;
  70++CDCF 7C                   ld      a,h                                                     ;
  71++CDD0 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++CDD1 32 DB C0             ld      (UBnkZScaledSign),a                                     ;
  73++CDD4 7D                   ld      a,l                                                     ;
  74++CDD5 32 DA C0             ld      (UBnkZScaled),a                                         ;           endif
  75++CDD8              LL94X:
  76++CDD8 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++CDDA 16 00                ld      d,0                                                     ;
  78++CDDC 3A D6 C0             ld      a,(UBnkXScaled)                                         ;
  79++CDDF 6F                   ld      l,a                                                     ;
  80++CDE0 3A D7 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++CDE3 47                   ld      b,a                                                     ;
  82++CDE4 3A CA C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++CDE7 5F                   ld      e,a                                                     ;
  84++CDE8 3A CC C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++CDEB 4F                   ld      c,a                                                     ;
  86++CDEC CD 33 00             call    ADDHLDESignBC                                           ;
  87++CDEF 47                   ld      b,a                                                     ;
  88++CDF0 7C                   ld      a,h                                                     ;
  89++CDF1 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++CDF2 32 D7 C0             ld      (UBnkXScaledSign),a                                     ;
  91++CDF5 7D                   ld      a,l                                                     ;
  92++CDF6 32 D6 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++CDF9              LL94Y:
  94++CDF9 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++CDFB 16 00                ld      d,0                                                     ;
  96++CDFD 3A D8 C0             ld      a,(UBnkYScaled)                                         ;
  97++CE00 6F                   ld      l,a                                                     ;
  98++CE01 3A D9 C0             ld      a,(UBnkYScaledSign)                                     ;
  99++CE04 47                   ld      b,a                                                     ;
 100++CE05 3A CD C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++CE08 5F                   ld      e,a                                                     ;
 102++CE09 3A CF C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++CE0C 4F                   ld      c,a                                                     ;
 104++CE0D CD 33 00             call    ADDHLDESignBC                                           ;
 105++CE10 47                   ld      b,a                                                     ;
 106++CE11 7C                   ld      a,h                                                     ;
 107++CE12 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++CE13 32 D9 C0             ld      (UBnkYScaledSign),a                                     ;
 109++CE16 7D                   ld      a,l                                                     ;
 110++CE17 32 D8 C0             ld      (UBnkYScaled),a                                         ;
 111++CE1A C9                   ret
 112++CE1B
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX18ScaledToXX15.asm
 499+ CE1B                                      INCLUDE "../../Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ToScaled.asm
   1++CE1B              CopyXX12ToScaled:
   2++CE1B              CopyResultToScaled:
   3++CE1B                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CE1B 3A DC C0    >                        ld       a,(XX12+0)
   3++CE1E 32 D6 C0    >                        ld       (UBnkXScaled),a
   4++CE21                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CE21 3A DE C0    >                        ld       a,(XX12+2)
   4++CE24 32 D8 C0    >                        ld       (UBnkYScaled),a
   5++CE27                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CE27 3A E0 C0    >                        ld       a,(XX12+4)
   5++CE2A 32 DA C0    >                        ld       (UBnkZScaled),a
   6++CE2D C9                   ret
   7++CE2E
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyXX12ToScaled.asm
 500+ CE2E              ;--------------------------------------------------------------------------------------------------------
 501+ CE2E                                      INCLUDE "../../Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ../../Tests/Vectors/../../Maths/Utilities/DotProductXX12XX15.asm
   1++CE2E              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CE2E              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CE2E              ;;; S = XX12 XSign Xor XX15 XSign
   4++CE2E              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CE2E              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CE2E              ;;; R = T
   7++CE2E              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CE2E              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CE2E              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CE2E              ;;; Q = A * Q /256 usigned (zdot)
  11++CE2E              ;;; R = T
  12++CE2E              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CE2E
  14++CE2E
  15++CE2E
  16++CE2E
  17++CE2E
  18++CE2E              MacroAequDxEdiv256usgn:	MACRO
  19++CE2E ~            						mul
  20++CE2E ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CE2E              						ENDM
  22++CE2E              DotProductXX12XX15:
  23++CE2E 3A DC C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CE31                      JumpIfAIsZero dotxskipzero
  24++CE31 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CE32 CA 4F CE    >                        jp	    z, dotxskipzero
  25++CE35 5F                   ld          e,a
  26++CE36 3A D6 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CE39 57                   ld          d,a                     ; de = xx12 x signed
  28++CE3A                      JumpIfAIsZero dotxskipzero
  28++CE3A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CE3B CA 4F CE    >                        jp	    z, dotxskipzero
  29++CE3E ED 30        		mul
  30++CE40 42                   ld          b,d                     ; b = result
  31++CE41 3A DD C0             ld          a,(UBnkXX12xSign)
  32++CE44 21 D7 C0             ld          hl,UBnkXScaledSign
  33++CE47 AE                   xor         (hl)
  34++CE48 E6 80                and         $80                     ; so sign bit only
  35++CE4A FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CE4C C3 53 CE             jp          dotmuly
  37++CE4F              dotxskipzero:
  38++CE4F AF                   xor         a
  39++CE50 47                   ld          b,a
  40++CE51 FD 67                ld          iyh,a
  41++CE53              dotmuly:
  42++CE53              ; now we have b = XX12 x &d  norm x signed
  43++CE53 3A DE C0             ld          a,(UBnkXX12yLo)
  44++CE56                      JumpIfAIsZero dotyskipzero
  44++CE56 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++CE57 CA 76 CE    >                        jp	    z, dotyskipzero
  45++CE5A 5F                   ld          e,a
  46++CE5B 3A D8 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++CE5E                      JumpIfAIsZero dotyskipzero
  47++CE5E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++CE5F CA 76 CE    >                        jp	    z, dotyskipzero
  48++CE62 57                   ld          d,a                     ; de = xx12 x signed
  49++CE63 ED 30                mul
  50++CE65 4A                   ld          c,d                     ; c = result
  51++CE66 DD 69                ld          ixl,c
  52++CE68 3A DF C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++CE6B 21 D9 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++CE6E AE                   xor         (hl)                    ; XX15+3
  55++CE6F E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++CE71 DD 67                ld          ixh,a
  57++CE73 C3 7A CE             jp          dotaddxy
  58++CE76              dotyskipzero:
  59++CE76 AF                   xor         a
  60++CE77 4F                   ld          c,a
  61++CE78 DD 67                ld          ixh,a
  62++CE7A              dotaddxy:
  63++CE7A              ; Optimise later as this is 16 bit
  64++CE7A 26 00                ld          h,0                     ;
  65++CE7C 68                   ld          l,b                     ; hl = xlo + x scaled
  66++CE7D 16 00                ld          d,0                     ;
  67++CE7F 59                   ld          e,c                     ; de = ylo + yscaled
  68++CE80 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++CE82 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++CE83 CD 33 00             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++CE86 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++CE87 3A E0 C0             ld          a,(UBnkXX12zLo)         ;
  73++CE8A                      JumpIfAIsZero dotzskipzero
  73++CE8A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++CE8B CA B0 CE    >                        jp	    z, dotzskipzero
  74++CE8E 5F                   ld          e,a                     ;
  75++CE8F 3A DA C0             ld          a,(UBnkZScaled)         ;
  76++CE92                      JumpIfAIsZero dotzskipzero
  76++CE92 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++CE93 CA B0 CE    >                        jp	    z, dotzskipzero
  77++CE96 57                   ld          d,a
  78++CE97 ED 30                mul
  79++CE99 E5                   push        hl                      ; save prev result
  80++CE9A 3A DB C0             ld          a,(UBnkZScaledSign)
  81++CE9D 21 E1 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++CEA0 AE                   xor         (hl)                    ; hi sign
  83++CEA1 E6 80                and         $80                     ; a = sign of multiply
  84++CEA3 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++CEA4 E1                   pop         hl
  86++CEA5 5A                   ld          e,d
  87++CEA6 16 00                ld          d,0
  88++CEA8 CD 33 00             call ADDHLDESignBC
  89++CEAB 32 4E 67             ld          (varS),a
  90++CEAE 7D                   ld          a,l
  91++CEAF C9                   ret                                 ; returns with A = value, varS = sign
  92++CEB0              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++CEB0 78                   ld          a,b
  94++CEB1 32 4E 67             ld          (varS),a
  95++CEB4 7D                   ld          a,l
  96++CEB5 C9                   ret
  97++CEB6              ;;;;       DotProductXX12XX15:
  98++CEB6              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++CEB6              ;;;;       ld          e,a
 100++CEB6              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++CEB6              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++CEB6              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++CEB6              ;;;;		mul
 104++CEB6              ;;;;       ld          b,d                     ; b as var T
 105++CEB6              ;;;;       ld          a,(UBnkXX12xSign)
 106++CEB6              ;;;;       ld          hl,UBnkXScaledSign
 107++CEB6              ;;;;       xor         (hl)
 108++CEB6              ;;;;       and         $80                     ; so sign bit only
 109++CEB6              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++CEB6              ;;;; now we have b = XX12 x & norm x signed
 111++CEB6              ;;;; by here B = xlo & xscaled C = result sign
 112++CEB6              ;;;;       ld          a,(UBnkXX12yLo)
 113++CEB6              ;;;;       ld          e,a
 114++CEB6              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++CEB6              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++CEB6              ;;;;       mul
 117++CEB6              ;;;;       ld          a,d
 118++CEB6              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++CEB6              ;;;;       ld          a,b                     ; get back T from above held in b
 120++CEB6              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++CEB6              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++CEB6              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++CEB6              ;;;;       xor         (hl)                    ; XX15+3
 124++CEB6              ;;;;       and         $80
 125++CEB6              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++CEB6              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++CEB6              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++CEB6              ;;;;       ld          e,a                     ; use e as var Q
 129++CEB6              ;;;;       ld          a,(UBnkZScaled)         ;
 130++CEB6              ;;;;       ld          d,a
 131++CEB6              ;;;;       mul
 132++CEB6              ;;;;       ld          a,d
 133++CEB6              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++CEB6              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++CEB6              ;;;;       ld          a,(UBnkZScaledSign)
 136++CEB6              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++CEB6              ;;;;       xor         (hl)                    ; hi sign
 138++CEB6              ;;;;       and         $80
 139++CEB6              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++CEB6              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++CEB6
# file closed: ../../Tests/Vectors/../../Maths/Utilities/DotProductXX12XX15.asm
 502+ CEB6              ;--------------------------------------------------------------------------------------------------------
 503+ CEB6              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 504+ CEB6              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
 505+ CEB6              ;--------------------------------------------------------------------------------------------------------
 506+ CEB6                                      INCLUDE "../../Universe/Ships/ScaleObjectDistance.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ScaleObjectDistance.asm
   1++CEB6              ScaleObjectDistance:
   2++CEB6              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++CEB6 3A 39 C4             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++CEB9 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++CEBA              LL90:                                       ; scaling object distance
   6++CEBA 3A D1 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++CEBD 47                   ld      b,a                         ; z_hi (yReg)
   8++CEBE                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++CEBE A7          >                        and     a
   8++CEBF C8          >                        ret     z
   9++CEC0              LL90Loop:
  10++CEC0              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++CEC0 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++CEC1                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++CEC1 2A CD C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++CEC4 CB 3C       >                    srl   h
  12++CEC6 CB 1D       >                    rr    l
  12++CEC8 22 CD C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++CECB                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++CECB 2A CA C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++CECE CB 3C       >                    srl   h
  13++CED0 CB 1D       >                    rr    l
  13++CED2 22 CA C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++CED5                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++CED5 2A D0 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++CED8 CB 3C       >                    srl   h
  14++CEDA CB 1D       >                    rr    l
  14++CEDC 22 D0 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++CEDF 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++CEE0                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++CEE0 A7          >                        and     a
  16++CEE1 C2 C0 CE    >                        jp	    nz,LL90Loop
  17++CEE4 C9                   ret
  18++CEE5
# file closed: ../../Tests/Vectors/../../Universe/Ships/ScaleObjectDistance.asm
 507+ CEE5              ;--------------------------------------------------------------------------------------------------------
 508+ CEE5
 509+ CEE5              ; Backface cull
 510+ CEE5              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 511+ CEE5              ; normal vector = cross product of ship ccordinates
 512+ CEE5              ;
 513+ CEE5                                      INCLUDE "../../Universe/Ships/CopyFaceToXX15.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX15.asm
   1++CEE5 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CEE6 47                                   ld      b,a                                                    ;;;
   3++CEE7 E6 80                                and     SignOnly8Bit
   4++CEE9 32 D7 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CEEC 78                                   ld      a,b
   6++CEED CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CEEF 47                                   ld      b,a
   8++CEF0 E6 80                                and     SignOnly8Bit
   9++CEF2 32 D9 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++CEF5 78                                   ld      a,b
  11++CEF6 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CEF8 E6 80                                and     SignOnly8Bit
  13++CEFA 32 DB C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++CEFD 23                                   inc     hl                          ; move to X ccord
  15++CEFE 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CEFF 32 D6 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++CF02 23                                   inc     hl                                                                                                                 ;;;
  18++CF03 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF04 32 D8 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++CF07 23                                   inc     hl                                                                                                                 ;;;
  21++CF08 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF09 32 DA C0                             ld      (UBnkZScaled),a
  23++CF0C C9                                   ret
  24++CF0D
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX15.asm
 514+ CF0D                                      INCLUDE "../../Universe/Ships/CopyFaceToXX12.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX12.asm
   1++CF0D 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++CF0E 47                                   ld      b,a                         ; save sign bits to b
   3++CF0F E6 80                                and     SignOnly8Bit
   4++CF11 32 DD C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++CF14 78                                   ld      a,b
   6++CF15 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++CF17 47                                   ld      b,a
   8++CF18 E6 80                                and     SignOnly8Bit
   9++CF1A 32 DF C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++CF1D 78                                   ld      a,b
  11++CF1E CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++CF20 E6 80                                and     SignOnly8Bit
  13++CF22 32 E1 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++CF25 23                                   inc     hl                          ; move to X ccord
  15++CF26 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++CF27 32 DC C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++CF2A 23                                   inc     hl                                                                                                                 ;;;
  18++CF2B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++CF2C 32 DE C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++CF2F 23                                   inc     hl                                                                                                                 ;;;
  21++CF30 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++CF31 32 E0 C0                             ld      (UBnkXX12zLo),a
  23++CF34 C9                                   ret
  24++CF35
# file closed: ../../Tests/Vectors/../../Universe/Ships/CopyFaceToXX12.asm
 515+ CF35              ;--------------------------------------------------------------
 516+ CF35              ;--------------------------------------------------------------
 517+ CF35                                      INCLUDE "../../ModelRender/BackfaceCull.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/BackfaceCull.asm
   1++CF35              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++CF35                  DEFINE CHECKDOTSHIPDATA  1
   3++CF35               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4++CF35 00           CurrentNormIdx  DB 0
   5++CF36              ; SomeFacesVisible:
   6++CF36              ; EE29:
   7++CF36
   8++CF36              ;   Backface cull logic  line of sight vector . face normal vector
   9++CF36              ;       line of sight vector . face normal vector
  10++CF36              ;       => line of sight vector = [x y z] + face normal vector
  11++CF36              ;       Where [x y z] =
  12++CF36              ;                                               [ [x y z] . sidev ]
  13++CF36              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++CF36              ;                                               [ [x y z] . nosev ]
  15++CF36              ;
  16++CF36              ;   so project the [x y z] vector into the face's normal space
  17++CF36              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++CF36              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++CF36              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++CF36              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++CF36              ;
  22++CF36              ;                         [ [x y z] . sidev + normal_x ]
  23++CF36              ;                       = [ [x y z] . roofv + normal_y ]
  24++CF36              ;                         [ [x y z] . nosev + normal_z ]
  25++CF36              ;
  26++CF36              ; so
  27++CF36              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++CF36              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++CF36              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++CF36              ;
  31++CF36              ; where face is visible if visibility < 0
  32++CF36              ;
  33++CF36              ;   so we set XX15 to [x y z] . sidev
  34++CF36              ;                     [x y z] . roofv
  35++CF36              ;                     [x y z] . nosev
  36++CF36              ;
  37++CF36
  38++CF36
  39++CF36
  40++CF36 3A D1 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++CF39                                      JumpIfAIsZero .ScaleDone            ;
  41++CF39 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++CF3A CA 66 CF    >                        jp	    z, .ScaleDone
  42++CF3D 2A CA C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++CF40 ED 5B CD C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++CF44 ED 4B D0 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++CF48 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++CF4A                                      ShiftHLRight1                       ; divide cam position by 2
  46++CF4A CB 3C       >			   srl h
  46++CF4C CB 1D       >			   rr  l
  47++CF4E                                      ShiftDERight1                       ;
  47++CF4E CB 3A       >			   srl d
  47++CF50 CB 1B       >			   rr  e
  48++CF52                                      ShiftBCRight1                       ;
  48++CF52 CB 38       >			   srl b
  48++CF54 CB 19       >			   rr  c
  49++CF56 78                                   ld      a,b                         ; loop if not scaled down
  50++CF57                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++CF57 A7          >                        and     a
  50++CF58 C2 48 CF    >                        jp	    nz,.ScaleNormalLoop
  51++CF5B 22 CA C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++CF5E ED 53 CD C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++CF62 ED 43 D0 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++CF66 FD 7D        .ScaleDone:             ld      a,iyl
  55++CF68 32 53 67                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++CF6B C9                                   ret
  57++CF6C
  58++CF6C 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++CF6F E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++CF71 20 2A                                jr      nz,.ShipNoDraw               ; .
  61++CF73 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++CF76 7C                                   ld      a,h
  63++CF77                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++CF77 FE C0       >                        cp     ShipMaxDistance
  63++CF79 D2 9D CF    >                        jp		nc,.ShipNoDraw
  64++CF7C ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++CF80 CD 15 75                             call    compare16HLDE
  66++CF83 38 18                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++CF85 ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++CF89 CD 15 75                             call    compare16HLDE
  69++CF8C 38 0F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++CF8E                                      IFDEF   CHECKDOTSHIPDATA
  71++CF8E 3A 34 C4     .CheckDotV2:                ld      a,(DotAddr)
  72++CF91                                          JumpIfAGTENusng h, .DrawFull
  72++CF91 BC          >                        cp     h
  72++CF92 D2 98 CF    >                        jp		nc,.DrawFull
  73++CF95 C3 A1 CF                                 jp      .ShipIsADot
  74++CF98 CD 5C C6     .DrawFull:                  call    UnivVisibleNonDot           ;
  75++CF9B                                          ClearCarryFlag
  75++CF9B B7          >                        or a
  76++CF9C C9                                       ret
  77++CF9D                                      ELSE
  78++CF9D ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  79++CF9D ~                                        ShiftHLRight1                       ; .
  80++CF9D ~                                        ShiftHLRight1                       ; .
  81++CF9D ~                                        ld      a,h
  82++CF9D ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  83++CF9D ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  84++CF9D ~                                        ; Check visbility distance
  85++CF9D ~            .SetXX4Dist:                ;break
  86++CF9D ~                                        ld      a,l
  87++CF9D ~                                        rra                                 ; l may have had bit 0 of h carried in
  88++CF9D ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  89++CF9D ~                                        srl     a
  90++CF9D ~                                        srl     a
  91++CF9D ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  92++CF9D ~                                        call    UnivVisibleNonDot               ;
  93++CF9D ~                                        ClearCarryFlag
  94++CF9D ~                                        ret
  95++CF9D                                      ENDIF
  96++CF9D CD 70 C6     .ShipNoDraw:            call    UnivInvisible
  97++CFA0 C9                                   ret
  98++CFA1              .ShipIsADot:            IFDEF DEBUGDRAWDISTANCE
  99++CFA1 ~                                        call    UnivVisible  ;
 100++CFA1                                      ELSE
 101++CFA1 CD 67 C6                                 call    UnivVisibleDot
 102++CFA4                                      ENDIF
 103++CFA4 C9                                   ret
 104++CFA5
 105++CFA5                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
 106++CFA5              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 106++CFA5 3A 33 C4    >                        ld   a,(FaceCtX4Addr)
 106++CFA8 A7          >                        and a
 106++CFA9 C8          >                        ret    z
 107++CFAA                                      ;break
 108++CFAA CD B8 CA                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 109++CFAD CD 8F 65                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 110++CFB0 CD 71 CD                             call    LoadCraftToCamera           ; XX18 = camera
 111++CFB3                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 112++CFB3 3A 39 C4     .BackfaceLoop:          ld      a,(QAddr)                   ;
 113++CFB6 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 114++CFB8              ; By this point XX18 = scaled draw cam and iyl = scale factor
 115++CFB8 CD 36 CF                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 116++CFBB CD 95 CD                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 117++CFBE CD 22 65     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 118++CFC1 CD 02 CD                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 119++CFC4 21 F9 C5     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 120++CFC7 22 52 66                             ld      (varV),hl
 121++CFCA 3A 33 C4                             ld      a,(FaceCtX4Addr)                                        ; For each face
 122++CFCD CB 3F                                srl     a                                              ;
 123++CFCF CB 3F                                srl     a                                              ;
 124++CFD1 47                                   ld      b,a                                            ;
 125++CFD2 AF                                   xor     a
 126++CFD3 32 35 CF                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 127++CFD6 E5           .ProcessNormalsLoop:    push    hl
 128++CFD7 C5                                   push    bc
 129++CFD8 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 130++CFD9 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 131++CFDB E5                                   push    hl
 132++CFDC 21 81 C0                             ld      hl,UBnkDrawAllFaces
 133++CFDF BE                                   cp      (hl)
 134++CFE0 E1                                   pop     hl
 135++CFE1                                      IFDEF DEBUGFORCEFACEDRAW
 136++CFE1 ~                                        jp      .FaceVisible
 137++CFE1                                      ELSE
 138++CFE1 DA 26 D1                                 jp      c,.FaceVisible              ; then we always draw
 139++CFE4                                      ENDIF
 140++CFE4              ; This bit needs to be added to force face visible
 141++CFE4 CD 0D CF     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 142++CFE7 3A 53 67                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 143++CFEA 47                                   ld      b,a
 144++CFEB                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 144++CFEB FE 04       >                        cp      4
 144++CFED DA 28 D0    >                        jp		c, .ScaleNormByXX17
 145++CFF0 CD 4C CD     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 146++CFF3 C3 B7 D0                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 147++CFF6 3A CA C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 148++CFF9 CB 3F                                srl     a                           ; which is held in XX18
 149++CFFB 32 CA C0                             ld      (UBnkDrawCam0xLo),a         ; .
 150++CFFE 3A D0 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 151++D001 CB 3F                                srl     a                           ; .
 152++D003 32 D0 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 153++D006 3A CD C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 154++D009 CB 3F                                srl     a                           ; .
 155++D00B 32 CD C0                             ld      (UBnkDrawCam0yLo),a        ; .
 156++D00E 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 157++D010                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 157++D010 3A D6 C0    >                    ld      a,(UBnkXScaled)
 157++D013 CB 3F       >                    srl     a
 157++D015 32 D6 C0    >                    ld      (UBnkXScaled),a
 158++D018                                      ShiftMem8Right1 UBnkYScaled         ;
 158++D018 3A D8 C0    >                    ld      a,(UBnkYScaled)
 158++D01B CB 3F       >                    srl     a
 158++D01D 32 D8 C0    >                    ld      (UBnkYScaled),a
 159++D020                                      ShiftMem8Right1 UBnkZScaled         ;
 159++D020 3A DA C0    >                    ld      a,(UBnkZScaled)
 159++D023 CB 3F       >                    srl     a
 159++D025 32 DA C0    >                    ld      (UBnkZScaled),a
 160++D028              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 161++D028              .ScaleNormByXX17:       ;ld      b,a
 162++D028 CD 27 CD                             call    CopyXX12toXX15
 163++D02B 05           .LL93                   dec     b
 164++D02C FA 4B D0                             jp      m, .ScaledNorm
 165++D02F              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 165++D02F 3A D6 C0    >                    ld      a,(UBnkXScaled)
 165++D032 CB 3F       >                    srl     a
 165++D034 32 D6 C0    >                    ld      (UBnkXScaled),a
 166++D037                                      ShiftMem8Right1 UBnkYScaled        ;
 166++D037 3A D8 C0    >                    ld      a,(UBnkYScaled)
 166++D03A CB 3F       >                    srl     a
 166++D03C 32 D8 C0    >                    ld      (UBnkYScaled),a
 167++D03F                                      ShiftMem8Right1 UBnkZScaled        ;
 167++D03F 3A DA C0    >                    ld      a,(UBnkZScaled)
 167++D042 CB 3F       >                    srl     a
 167++D044 32 DA C0    >                    ld      (UBnkZScaled),a
 168++D047 05                                   dec     b                          ;
 169++D048 F2 2F D0                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 170++D04B              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 171++D04B              ; Add normal to XX15
 172++D04B              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 173++D04B              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 174++D04B              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 175++D04B              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 176++D04B              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 176++D04B 3A DA C0    >                        ld       a,(UBnkZScaled)
 176++D04E 32 4D 67    >                        ld       (varR),a
 177++D051                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 177++D051 3A E1 C0    >                        ld       a,(UBnkXX12zSign)
 177++D054 32 4E 67    >                        ld       (varS),a
 178++D057                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 178++D057 3A D0 C0    >                        ld       a,(UBnkDrawCam0zLo)
 178++D05A 32 4C 67    >                        ld       (varQ),a
 179++D05D 3A D2 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 180++D060 CD F9 77                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 181++D063 DA F6 CF                             jp      c,.Ovflw
 182++D066 32 DA C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 183++D069                                      ldCopyByte  varS, UBnkZScaledSign   ;
 183++D069 3A 4E 67    >                        ld       a,(varS)
 183++D06C 32 DB C0    >                        ld       (UBnkZScaledSign),a
 184++D06F                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 184++D06F 3A D6 C0    >                        ld       a,(UBnkXScaled)
 184++D072 32 4D 67    >                        ld       (varR),a
 185++D075                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 185++D075 3A DD C0    >                        ld       a,(UBnkXX12xSign)
 185++D078 32 4E 67    >                        ld       (varS),a
 186++D07B                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 186++D07B 3A CA C0    >                        ld       a,(UBnkDrawCam0xLo)
 186++D07E 32 4C 67    >                        ld       (varQ),a
 187++D081 3A CC C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 188++D084 CD F9 77                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 189++D087 DA F6 CF                             jp      c,.Ovflw
 190++D08A 32 D6 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 191++D08D                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 191++D08D 3A 4E 67    >                        ld       a,(varS)
 191++D090 32 D7 C0    >                        ld       (UBnkXScaledSign),a
 192++D093                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 192++D093 3A D8 C0    >                        ld       a,(UBnkYScaled)
 192++D096 32 4D 67    >                        ld       (varR),a
 193++D099                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 193++D099 3A DF C0    >                        ld       a,(UBnkXX12ySign)
 193++D09C 32 4E 67    >                        ld       (varS),a
 194++D09F                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 194++D09F 3A CD C0    >                        ld       a,(UBnkDrawCam0yLo)
 194++D0A2 32 4C 67    >                        ld       (varQ),a
 195++D0A5 3A CF C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 196++D0A8 CD F9 77                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 197++D0AB DA F6 CF                             jp      c,.Ovflw                    ; .
 198++D0AE 32 D8 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 199++D0B1                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 199++D0B1 3A 4E 67    >                        ld       a,(varS)
 199++D0B4 32 D9 C0    >                        ld       (UBnkYScaledSign),a
 200++D0B7              ; calculate dot product LL89
 201++D0B7              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 201++D0B7 3A DC C0    >                        ld       a,(UBnkXX12xLo)
 201++D0BA 32 4C 67    >                        ld       (varQ),a
 202++D0BD 3A D6 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 203++D0C0 CD C1 77                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 204++D0C3 32 68 67                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 205++D0C6 3A DD C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 206++D0C9 21 D7 C0                             ld      hl,UBnkXScaledSign          ; .
 207++D0CC AE                                   xor     (hl)                        ; .
 208++D0CD 32 4E 67                             ld      (varS),a                    ; .
 209++D0D0                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 209++D0D0 3A DE C0    >                        ld       a,(UBnkXX12yLo)
 209++D0D3 32 4C 67    >                        ld       (varQ),a
 210++D0D6 3A D8 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 211++D0D9 CD C1 77                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 212++D0DC 32 4C 67                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 213++D0DF                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 213++D0DF 3A 68 67    >                        ld       a,(varT)
 213++D0E2 32 4D 67    >                        ld       (varR),a
 214++D0E5 3A DF C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 215++D0E8 21 D9 C0                             ld      hl, UBnkYScaledSign         ; .
 216++D0EB AE                                   xor     (hl)                        ; .
 217++D0EC CD F9 77                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 218++D0EF 32 68 67                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 219++D0F2                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 219++D0F2 3A E0 C0    >                        ld       a,(UBnkXX12zLo)
 219++D0F5 32 4C 67    >                        ld       (varQ),a
 220++D0F8 3A DA C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 221++D0FB CD C1 77                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 222++D0FE 32 4C 67                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 223++D101                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 223++D101 3A 68 67    >                        ld       a,(varT)
 223++D104 32 4D 67    >                        ld       (varR),a
 224++D107 3A DB C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 225++D10A 21 E1 C0                             ld      hl, UBnkXX12zSign           ; .
 226++D10D AE                                   xor     (hl)                        ; .
 227++D10E CD F9 77                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 228++D111 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 229++D113 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 230++D115 3A 4E 67                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 231++D118 ED 27 80                             test    $80                         ; this should test S not A
 232++D11B 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 233++D11D 3A 35 CF     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 234++D120 CD BF CB                             call        SetFaceAHidden                                      ;           set face invisible
 235++D123 C3 2C D1                             jp          .ProcessNormalLoopEnd                                ;        end if
 236++D126 3A 35 CF     .FaceVisible:            ld          a,(CurrentNormIdx)
 237++D129 CD B6 CB                             call        SetFaceAVisible
 238++D12C 21 35 CF     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 239++D12F 34                                   inc         (hl)                    ; move index pointer up by one
 240++D130 C1                                   pop         bc
 241++D131 E1                                   pop         hl                      ; get normal data pointer back
 242++D132 3E 04                                ld          a,4
 243++D134 ED 31                                add         hl,a                    ; move to next normal entry
 244++D136 22 52 66                             ld          (varV),hl               ; save as we need it again
 245++D139 05                                   dec         b
 246++D13A C2 D6 CF                             jp          nz,.ProcessNormalsLoop
 247++D13D C9                                   ret
 248++D13E
# file closed: ../../Tests/Vectors/../../ModelRender/BackfaceCull.asm
 518+ D13E              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 519+ D13E
 520+ D13E              TransposeXX12NodeToXX15:
 521+ D13E                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 521+ D13E 3A 22 C0    >                        ld       a,(UBnKxsgn)
 521+ D141 32 D8 C0    >                        ld       (UbnkXPointSign),a
 522+ D144 ED 4B DC C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 523+ D148 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 524+ D149 FA 5F D1             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 525+ D14C              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 526+ D14C              NodeXPositiveX:
 527+ D14C 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 528+ D14D 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 529+ D14F 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 530+ D152 26 00                ld          h,0                                 ; but we don;t want the sign
 531+ D154 09                   add         hl,bc                               ; its a 16 bit add
 532+ D155 22 D6 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 533+ D158 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 534+ D159 32 D8 C0             ld          (UbnkXPointSign),a
 535+ D15C C3 7B D1             jp          FinishedThisNodeX
 536+ D15F              ; If we get here then _sign and vertv_ have different signs so do subtract
 537+ D15F              NodeNegativeX:
 538+ D15F              LL52X:                                                 ;
 539+ D15F 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
 540+ D162 ED 4B DC C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 541+ D166 06 00                ld          b,0                                 ; XX12 lo byte only
 542+ D168 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 543+ D16A F2 78 D1             jp          p,SetAndMopX                       ; if result is positive skip to write back
 544+ D16D              NodeXNegSignChangeX:
 545+ D16D              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 546+ D16D CD BF 6E             call        negate16hl                          ; Convert back to positive and flip sign
 547+ D170 3A D8 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 548+ D173 EE 80                xor         $80                                 ; Flip bit 7
 549+ D175 32 D8 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 550+ D178              SetAndMopX:
 551+ D178 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
 552+ D17B              FinishedThisNodeX:
 553+ D17B
 554+ D17B              LL53:
 555+ D17B
 556+ D17B                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 556+ D17B 3A 25 C0    >                        ld       a,(UBnKysgn)
 556+ D17E 32 DB C0    >                        ld       (UbnkYPointSign),a
 557+ D181 ED 4B DE C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 558+ D185 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 559+ D186 FA 9C D1             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 560+ D189              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 561+ D189              NodeXPositiveY:
 562+ D189 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 563+ D18A 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 564+ D18C 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
 565+ D18F 26 00                ld          h,0                                 ; but we don;t want the sign
 566+ D191 09                   add         hl,bc                               ; its a 16 bit add
 567+ D192 22 D9 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
 568+ D195 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 569+ D196 32 D8 C0             ld          (UbnkXPointSign),a
 570+ D199 C3 B8 D1             jp          FinishedThisNodeY
 571+ D19C              ; If we get here then _sign and vertv_ have different signs so do subtract
 572+ D19C              NodeNegativeY:
 573+ D19C              LL52Y:                                                 ;
 574+ D19C 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
 575+ D19F ED 4B DE C0          ld          bc,(UBnkXX12yLo)                   ; XX12
 576+ D1A3 06 00                ld          b,0                                 ; XX12 lo byte only
 577+ D1A5 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 578+ D1A7 F2 B5 D1             jp          p,SetAndMopY                       ; if result is positive skip to write back
 579+ D1AA              NodeXNegSignChangeY:
 580+ D1AA              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 581+ D1AA CD BF 6E             call        negate16hl                          ; Convert back to positive and flip sign
 582+ D1AD 3A DB C0             ld          a,(UbnkYPointSign)                 ; XX15+2
 583+ D1B0 EE 80                xor         $80                                 ; Flip bit 7
 584+ D1B2 32 DB C0             ld          (UbnkYPointSign),a                 ; XX15+2
 585+ D1B5              SetAndMopY:
 586+ D1B5 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
 587+ D1B8              FinishedThisNodeY:
 588+ D1B8
 589+ D1B8                  DISPLAY "Tracing 5", $
 590+ D1B8
 591+ D1B8              TransposeZ:
 592+ D1B8              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
 593+ D1B8 3A E1 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
 594+ D1BB                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
 594+ D1BB CB 7F       >                        bit 	7,a
 594+ D1BD C2 D1 D1    >                        jp      nz,NegativeNodeZ
 595+ D1C0 3A E0 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
 596+ D1C3 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
 597+ D1C6 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
 598+ D1C8 7D                   ld          a,l
 599+ D1C9 32 68 67             ld          (varT),a                            ;                                                                           ;;;
 600+ D1CC 7C                   ld          a,h
 601+ D1CD 32 4B 67             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
 602+ D1D0 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
 603+ D1D1              ; Doing additions and scalings for each visible node around here                                                                    ;;;
 604+ D1D1              NegativeNodeZ:
 605+ D1D1              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
 606+ D1D1 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
 607+ D1D4 ED 4B E0 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
 608+ D1D8 06 00                ld          b,0                                 ; upper byte will be garbage
 609+ D1DA                      ClearCarryFlag
 609+ D1DA B7          >                        or a
 610+ D1DB ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
 611+ D1DD 7D                   ld          a,l
 612+ D1DE 32 68 67             ld          (varT),a                            ; t = result low
 613+ D1E1 7C                   ld          a,h
 614+ D1E2 32 4B 67             ld          (varU),a                            ; u = result high
 615+ D1E5 E2 F2 D1             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
 616+ D1E8              LL56Overflow:
 617+ D1E8 FE 00                cp          0                                   ; is varU 0?
 618+ D1EA 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
 619+ D1EC 3A 68 67             ld          a,(varT)                            ; T \ restore z lo
 620+ D1EF                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
 620+ D1EF FE 04       >                        cp    4
 620+ D1F1 D0          >                        ret	 nc
 621+ D1F2              MakeNodeClose:
 622+ D1F2              LL140:                                                  ; else make node close
 623+ D1F2 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
 624+ D1F3 32 4B 67             ld          (varU),a                            ; U
 625+ D1F6 3E 04                ld          a,4                                 ; lo
 626+ D1F8 32 68 67             ld          (varT),a                            ; T
 627+ D1FB C9                   ret
 628+ D1FC              ;--LL49-------------------------------------------------------------------------------------------------------------------------
 629+ D1FC              ProcessVisibleNode:
 630+ D1FC              RotateNode:                                                                                                                         ;;;
 631+ D1FC CD D1 CC             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
 632+ D1FF              LL52LL53LL54LL55
 633+ D1FF              TransposeNode:
 634+ D1FF CD 3E D1             call        TransposeXX12NodeToXX15
 635+ D202
 636+ D202              ; ......................................................                                                         ;;;
 637+ D202              NodeAdditionsDone:
 638+ D202              Scale16BitTo8Bit:
 639+ D202              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
 640+ D202 3A 4B 67             ld          a,(varU)                            ; U \ z hi
 641+ D205 21 D7 C0             ld          hl,UbnkXPointHi
 642+ D208 B6                   or          (hl)                                ; XX15+1    \ x hi
 643+ D209 21 DA C0             ld          hl,UbnkYPointHi
 644+ D20C B6                   or          (hl)                                ; XX15+4    \ y hi
 645+ D20D              AreXYZHiAllZero:
 646+ D20D 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 647+ D20F              DivideXYZBy2:
 648+ D20F                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
 648+ D20F 2A D6 C0    >                    ld    hl,(UbnkXPoint)
 648+ D212 CB 3C       >                    srl   h
 648+ D214 CB 1D       >                    rr    l
 648+ D216 22 D6 C0    >                    ld    (UbnkXPoint),hl
 649+ D219                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
 649+ D219 2A D9 C0    >                    ld    hl,(UbnkYPoint)
 649+ D21C CB 3C       >                    srl   h
 649+ D21E CB 1D       >                    rr    l
 649+ D220 22 D9 C0    >                    ld    (UbnkYPoint),hl
 650+ D223 3A 4B 67             ld          a,(varU)                            ; U \ z hi
 651+ D226 67                   ld          h,a
 652+ D227 3A 68 67             ld          a,(varT)                            ; T \ z lo
 653+ D22A 6F                   ld          l,a
 654+ D22B                      ShiftHLRight1
 654+ D22B CB 3C       >			   srl h
 654+ D22D CB 1D       >			   rr  l
 655+ D22F 7C                   ld          a,h
 656+ D230 32 4B 67             ld          (varU),a
 657+ D233 7D                   ld          a,l
 658+ D234 32 68 67             ld          (varT),a                            ; T \ z lo
 659+ D237 C3 02 D2             jp          Scale16BitTo8Bit                    ; loop U
 660+ D23A              NodeScalingDone:
 661+ D23A              LL60:                                                   ; hi U rolled to 0, exited loop above.
 662+ D23A              ProjectNodeToScreen:
 663+ D23A                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
 663+ D23A 3A 68 67    >                        ld       a,(varT)
 663+ D23D 32 4C 67    >                        ld       (varQ),a
 664+ D240 3A D6 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
 665+ D243 21 4C 67             ld          hl,varQ
 666+ D246 BE                   cp          (hl)                                ; Q
 667+ D247                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
 667+ D247 DA 50 D2    >                        jp		c,DoSmallAngle
 668+ D24A CD 07 6F             call        RequAmul256divQ; RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
 669+ D24D C3 58 D2             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
 670+ D250              DoSmallAngle:                                           ; small x angle
 671+ D250              LL69:
 672+ D250              ; TODO check if we need to retain BC as this trashes it
 673+ D250              ;Input: BC = Dividend, DE = Divisor, HL = 0
 674+ D250              ;Output: BC = Quotient, HL = Remainder
 675+ D250 47                   ld      b,a
 676+ D251 CD 98 71             call    DIV16UNDOC
 677+ D254 79                   ld      a,c
 678+ D255 32 4D 67             ld      (varR),a
 679+ D258               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 680+ D258              SkipSmallAngle:
 681+ D258              ScaleX:
 682+ D258              LL65:                                                   ; both continue for scaling based on z
 683+ D258 3A D8 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
 684+ D25B                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 684+ D25B CB 7F       >                        bit 	7,a
 684+ D25D C2 70 D2    >                        jp      nz,NegativeXPoint
 685+ D260              ; ......................................................
 686+ D260              PositiveXPoint:
 687+ D260 3A 4D 67             ld          a,(varR)
 688+ D263 6F                   ld          l,a
 689+ D264 3A 4B 67             ld          a,(varU)
 690+ D267 67                   ld          h,a
 691+ D268 3E 80                ld          a,ScreenCenterX
 692+ D26A ED 31                add         hl,a
 693+ D26C EB                   ex          de,hl
 694+ D26D C3 80 D2             jp          StoreXPoint
 695+ D270              NegativeXPoint:
 696+ D270              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 697+ D270 3A 4D 67             ld          a,(varR)
 698+ D273 6F                   ld          l,a
 699+ D274 3A 4B 67             ld          a,(varU)
 700+ D277 67                   ld          h,a
 701+ D278 0E 80                ld          c,ScreenCenterX
 702+ D27A 06 00                ld          b,0
 703+ D27C                      ClearCarryFlag
 703+ D27C B7          >                        or a
 704+ D27D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 705+ D27F EB                   ex          de,hl
 706+ D280              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
 707+ D280 FD 73 00             ld          (iy+0),e                            ; Update X Point
 708+ D283 FD 72 01             ld          (iy+1),d                            ; Update X Point
 709+ D286 FD 23                inc         iy
 710+ D288 FD 23                inc         iy
 711+ D28A              ; ......................................................
 712+ D28A              LL66:
 713+ D28A              ProcessYPoint:
 714+ D28A AF                   xor         a                                   ; y hi = 0
 715+ D28B 32 4B 67             ld          (varU),a                            ; U
 716+ D28E                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
 716+ D28E 3A 68 67    >                        ld       a,(varT)
 716+ D291 32 4C 67    >                        ld       (varQ),a
 717+ D294 3A D9 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
 718+ D297 21 4C 67             ld          hl,varQ
 719+ D29A BE                   cp          (hl)                                ; Q
 720+ D29B                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
 720+ D29B DA A4 D2    >                        jp		c,SmallYHop
 721+ D29E              SmallYPoint:
 722+ D29E CD 07 6F             call        RequAmul256divQ;RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
 723+ D2A1 C3 A7 D2             jp          SkipYScale                          ; LL68 hop over small y yangle
 724+ D2A4              SmallYHop:
 725+ D2A4              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
 726+ D2A4 CD 07 6F             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
 727+ D2A7              SkipYScale:
 728+ D2A7              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
 729+ D2A7 3A DB C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
 730+ D2AA CB 7F                bit         7,a
 731+ D2AC C2 BF D2             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 732+ D2AF              PositiveYPoint:
 733+ D2AF 3A 4D 67             ld          a,(varR)
 734+ D2B2 6F                   ld          l,a
 735+ D2B3 3A 4B 67             ld          a,(varU)
 736+ D2B6 67                   ld          h,a
 737+ D2B7 3E 60                ld          a,ScreenHeightHalf
 738+ D2B9 ED 31                add         hl,a
 739+ D2BB EB                   ex          de,hl
 740+ D2BC C3 CF D2             jp          LL50
 741+ D2BF              NegativeYPoint:
 742+ D2BF              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
 743+ D2BF 3A 4D 67             ld          a,(varR)
 744+ D2C2 6F                   ld          l,a
 745+ D2C3 3A 4B 67             ld          a,(varU)
 746+ D2C6 67                   ld          h,a
 747+ D2C7 0E 60                ld          c,ScreenHeightHalf
 748+ D2C9 06 00                ld          b,0
 749+ D2CB                      ClearCarryFlag
 749+ D2CB B7          >                        or a
 750+ D2CC ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
 751+ D2CE EB                   ex          de,hl
 752+ D2CF              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
 753+ D2CF FD 73 00             ld          (iy+0),e                            ; Update X Point
 754+ D2D2 FD 72 01             ld          (iy+1),d                            ; Update X Point
 755+ D2D5 FD 23                inc         iy
 756+ D2D7 FD 23                inc         iy
 757+ D2D9 C9                   ret
 758+ D2DA              ;--------------------------------------------------------------------------------------------------------
 759+ D2DA              ;;;     Byte 0 = X magnitide with origin at middle of ship
 760+ D2DA              ;;;     Byte 1 = Y magnitide with origin at middle of ship
 761+ D2DA              ;;;     Byte 2 = Z magnitide with origin at middle of ship
 762+ D2DA              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
 763+ D2DA              CopyNodeToXX15:
 764+ D2DA                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 764+ D2DA 7E          >                        ld       a,(hl)
 764+ D2DB 32 D6 C0    >                        ld       (UBnkXScaled),a
 765+ D2DE 23                   inc         hl
 766+ D2DF                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 766+ D2DF 7E          >                        ld       a,(hl)
 766+ D2E0 32 D8 C0    >                        ld       (UBnkYScaled),a
 767+ D2E3 23                   inc         hl
 768+ D2E4                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
 768+ D2E4 7E          >                        ld       a,(hl)
 768+ D2E5 32 DA C0    >                        ld       (UBnkZScaled),a
 769+ D2E8 23                   inc         hl
 770+ D2E9              PopulateXX15SignBits:
 771+ D2E9              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
 772+ D2E9 7E                   ld          a,(hl)
 773+ D2EA 4F                   ld          c,a                                 ; copy sign and visibility to c
 774+ D2EB 47                   ld          b,a
 775+ D2EC E6 80                and         $80                                 ; keep high 3 bits
 776+ D2EE 32 D7 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 777+ D2F1 78                   ld          a,b
 778+ D2F2 E6 40                and         $40
 779+ D2F4 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
 780+ D2F6 32 D9 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 781+ D2F9 78                   ld          a,b
 782+ D2FA E6 20                and         $20
 783+ D2FC CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
 784+ D2FE CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
 785+ D300 32 DB C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
 786+ D303 79                   ld          a,c                                 ; returns a with visibility sign byte
 787+ D304 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
 788+ D306 32 68 67             ld          (varT),a                            ; and store in varT as its needed later
 789+ D309 C9                   ret
 790+ D30A
 791+ D30A              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 792+ D30A              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 793+ D30A              ;..............................................................................................................................
 794+ D30A              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
 795+ D30A              LL48GetScale:
 796+ D30A 3A 3D 66             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
 797+ D30D 5F                   ld          e,a
 798+ D30E CD DA D2             call        CopyNodeToXX15
 799+ D311              LL48GetVertices:
 800+ D311              LL48GetVertSignAndVisDist:
 801+ D311                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
 801+ D311 BB          >                        cp      e
 801+ D312 DA 4F D3    >                        jp		c, NodeIsNotVisible
 802+ D315              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
 803+ D315                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
 803+ D315 23          >                    inc         hl                                  ; vertex byte#1
 803+ D316 7E          >                    ld          a,(hl)                              ;
 803+ D317 32 4C 66    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
 804+ D31A 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
 805+ D31B E6 0F                and         $0F                                 ; face 1                                                                    ;;;
 806+ D31D E5                   push        hl                                  ; we need to save HL                                                        ;;;
 807+ D31E                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
 807+ D31E 21 02 C1    >                    ld          hl,UbnkFaceVisArray
 807+ D321 ED 31       >                    add         hl,a
 807+ D323 7E          >                    ld          a,(hl)
 808+ D324 E1                   pop         hl                                  ;                                                                           ;;;
 809+ D325                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 809+ D325 A7          >                        and     a
 809+ D326 C2 55 D3    >                        jp	    nz,NodeIsVisible
 810+ D329              CheckFace2:                                                                                                                         ;;;
 811+ D329 7A                   ld          a,d                                                                                                             ;;;
 812+ D32A ED 23                swapnib                                                                                                                     ;;;
 813+ D32C E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
 814+ D32E                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 814+ D32E A7          >                        and     a
 814+ D32F C2 55 D3    >                        jp	    nz,NodeIsVisible
 815+ D332              CheckFace3:                                                                                                                         ;;;
 816+ D332                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
 816+ D332 23          >                    inc         hl                                  ; vertex byte#1
 816+ D333 7E          >                    ld          a,(hl)                              ;
 816+ D334 32 4C 66    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
 817+ D337 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
 818+ D338 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
 819+ D33A E5                   push        hl                                  ; we need to save HL                                                        ;;;
 820+ D33B                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
 820+ D33B 21 02 C1    >                    ld          hl,UbnkFaceVisArray
 820+ D33E ED 31       >                    add         hl,a
 820+ D340 7E          >                    ld          a,(hl)
 821+ D341 E1                   pop         hl                                  ;                                                                           ;;;
 822+ D342                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 822+ D342 A7          >                        and     a
 822+ D343 C2 55 D3    >                        jp	    nz,NodeIsVisible
 823+ D346              CheckFace4:                                                                                                                         ;;;
 824+ D346 7A                   ld          a,d                                                                                                             ;;;
 825+ D347 ED 23                swapnib                                                                                                                     ;;;
 826+ D349 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
 827+ D34B                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
 827+ D34B A7          >                        and     a
 827+ D34C C2 55 D3    >                        jp	    nz,NodeIsVisible
 828+ D34F              NodeIsNotVisible:                                                                                                                   ;;;
 829+ D34F 01 04 00             ld          bc,4
 830+ D352 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
 831+ D354                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
 832+ D354 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
 833+ D355              NodeIsVisible:
 834+ D355              LL49:
 835+ D355 CD FC D1             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
 836+ D358 C9                   ret
 837+ D359
 838+ D359                  DISPLAY "Tracing 6", $
 839+ D359
 840+ D359              ProjectNodeToEye:
 841+ D359 ED 4B DA C0      ld          bc,(UBnkZScaled)                    ; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 842+ D35D 79               ld          a,c                                 ;  so no need for a negative check
 843+ D35E 32 4C 67         ld          (varQ),a                            ; VarQ = z
 844+ D361 3A D6 C0         ld          a,(UBnkXScaled)                     ; XX15  \ rolled x lo which is signed
 845+ D364 CD 81 71         call        DIV16Amul256dCUNDOC                 ; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 846+ D367 3A D7 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 847+ D36A                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 847+ D36A CB 7F       >                        bit 	7,a
 847+ D36C C2 77 D3    >                        jp      nz,EyeNegativeXPoint
 848+ D36F              EyePositiveXPoint:                                  ; x was positive result
 849+ D36F 2E 80            ld          l,ScreenCenterX                     ;
 850+ D371 26 00            ld          h,0
 851+ D373 09               add         hl,bc                               ; hl = Screen Centre + X
 852+ D374 C3 7E D3         jp          EyeStoreXPoint
 853+ D377              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 854+ D377 2E 80            ld          l,ScreenCenterX
 855+ D379 26 00            ld          h,0
 856+ D37B                  ClearCarryFlag
 856+ D37B B7          >                        or a
 857+ D37C ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 858+ D37E              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 859+ D37E EB               ex          de,hl
 860+ D37F FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 861+ D382 FD 72 01         ld          (iy+1),d                            ; Update X Point
 862+ D385              EyeProcessYPoint:
 863+ D385 ED 4B DA C0      ld          bc,(UBnkZScaled)                    ; Now process Y co-ordinate
 864+ D389 79               ld          a,c
 865+ D38A 32 4C 67         ld          (varQ),a
 866+ D38D 3A D8 C0         ld          a,(UBnkYScaled)                     ; XX15  \ rolled x lo
 867+ D390 CD 81 71         call        DIV16Amul256dCUNDOC                 ; a = Y scaled * 256 / zscaled
 868+ D393 3A D9 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 869+ D396                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 869+ D396 CB 7F       >                        bit 	7,a
 869+ D398 C2 A3 D3    >                        jp      nz,EyeNegativeYPoint
 870+ D39B              EyePositiveYPoint:                                  ; Y is positive so above the centre line
 871+ D39B 2E 60            ld          l,ScreenCenterY
 872+ D39D                  ClearCarryFlag
 872+ D39D B7          >                        or a
 873+ D39E ED 42            sbc         hl,bc                               ; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 874+ D3A0 C3 A8 D3         jp          EyeStoreYPoint
 875+ D3A3              EyeNegativeYPoint:                                  ; this bit is only 8 bit aware TODO FIX
 876+ D3A3 2E 60            ld          l,ScreenCenterY
 877+ D3A5 26 00            ld          h,0
 878+ D3A7 09               add         hl,bc                               ; hl = ScreenCenterY + Y as negative is below the center of screen
 879+ D3A8              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 880+ D3A8 EB               ex          de,hl
 881+ D3A9 FD 73 02         ld          (iy+2),e                            ; Update Y Point
 882+ D3AC FD 72 03         ld          (iy+3),d                            ; Update Y Point
 883+ D3AF C9               ret
 884+ D3B0              ; ---------------------------------------------------------------------------------------------------------------------------------
 885+ D3B0                          INCLUDE "../../Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ApplyMyRollAndPitch.asm
   1++D3B0
   2++D3B0              ; Full version
   3++D3B0              ; 1. K2 = y - alpha * x
   4++D3B0              ; 2. z = z + beta * K2
   5++D3B0              ; 3. y = K2 - beta * z
   6++D3B0              ; 4. x = x + alpha * y
   7++D3B0
   8++D3B0                  IFDEF USE_24BIT_ROLL_AND_PITCH
   9++D3B0 ~            UBnK24BitAlphaMulX      DB $00,$00, $00, $00
  10++D3B0 ~            UBnK24BitAlphaMulY      DB $00,$00, $00, $00
  11++D3B0 ~            UBnK24BitAlphaMulZ      DB $00,$00, $00, $00
  12++D3B0 ~            UBnK24BitBetaMulZ       DB $00,$00, $00, $00
  13++D3B0 ~            UBnK24BitBetaMulY       DB $00,$00, $00, $00
  14++D3B0 ~            UBnK24BitK2             DS 3
  15++D3B0 ~
  16++D3B0 ~            PitchBlock              DB  1
  17++D3B0 ~
  18++D3B0 ~            ApplyMyRollAndPitch:    ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  19++D3B0 ~            .CheckForRoll:          and		a
  20++D3B0 ~            						call	nz,UBnKRoll_24Bit
  21++D3B0 ~            .CheckForPitch:			ld		a,(BETA)
  22++D3B0 ~            						and		a
  23++D3B0 ~            						call	nz,UBnKPitch_24Bit
  24++D3B0 ~            .ApplySpeed:            ld      a,(DELTA)                   ; BCH = - Delta
  25++D3B0 ~                                    and     a
  26++D3B0 ~                                    jp      z,.ApplyOrientation
  27++D3B0 ~            						;ReturnIfAIsZero
  28++D3B0 ~            						ld      c,0                         ;
  29++D3B0 ~            						ld      h,a                         ;
  30++D3B0 ~            						ld      b,$80                       ;
  31++D3B0 ~            						ld      de,(UBnKzhi)                ; DEL = z position
  32++D3B0 ~            						ld      a,(UBnKzlo)                 ; .
  33++D3B0 ~            						ld      l,a                         ; .
  34++D3B0 ~            						call    AddBCHtoDELsigned           ; update speed
  35++D3B0 ~            						ld      (UBnKzhi),DE                ; write back to zpos
  36++D3B0 ~            						ld      a,l
  37++D3B0 ~                                    ld      (UBnKzlo),a                ;
  38++D3B0 ~            .ApplyOrientation:      ld      a,(ALPHA)
  39++D3B0 ~                                    ld      hl,BETA
  40++D3B0 ~                                    or      (hl)
  41++D3B0 ~                                    ret     z
  42++D3B0 ~                                    ld      a,(PitchBlock)
  43++D3B0 ~                                    and     a
  44++D3B0 ~                                    ret     z
  45++D3B0 ~                                    ;break
  46++D3B0 ~            PitchBreak:             ld      ix,UBnkrotmatSidevX
  47++D3B0 ~            DebugAlert1:            ld      a,(ix+1)
  48++D3B0 ~                                    ld      d,(ix+3)
  49++D3B0 ~                                    ld      e,(ix+5)
  50++D3B0 ~                                    or     d
  51++D3B0 ~                                    or     e
  52++D3B0 ~                                    and     $7F
  53++D3B0 ~                                    jp      nz,.NoBreak
  54++D3B0 ~                                    break
  55++D3B0 ~            .NoBreak
  56++D3B0 ~
  57++D3B0 ~                                    call    ApplyRollAndPitchToIX
  58++D3B0 ~            DebugAlert2:             ld      a,(ix+1)
  59++D3B0 ~                                    ld      d,(ix+3)
  60++D3B0 ~                                    ld      e,(ix+5)
  61++D3B0 ~                                    or     d
  62++D3B0 ~                                    or     e
  63++D3B0 ~                                    and     $7F
  64++D3B0 ~                                    jp      nz,.NoBreak
  65++D3B0 ~                                    break
  66++D3B0 ~            .NoBreak
  67++D3B0 ~                                    ld      ix,UBnkrotmatRoofvX
  68++D3B0 ~                                    call    ApplyRollAndPitchToIX
  69++D3B0 ~                                    ld      ix,UBnkrotmatNosevX
  70++D3B0 ~                                    call    ApplyRollAndPitchToIX
  71++D3B0 ~                                    ret
  72++D3B0 ~
  73++D3B0 ~            UBnKRoll_24Bit:			ld      a,(ALPHA)                   ; get roll value
  74++D3B0 ~            						and 	$7F
  75++D3B0 ~            						ld      d,a                         ; .
  76++D3B0 ~            						ld      a,(UBnKylo)                ; HLE = x sgn, hi, lo
  77++D3B0 ~            						ld      e,a                         ; .
  78++D3B0 ~            						ld      hl,(UBnKyhi)               ; .
  79++D3B0 ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  80++D3B0 ~            						ld		a,l
  81++D3B0 ~            						ld		(UBnK24BitAlphaMulY),a			; save result
  82++D3B0 ~            						ld		(UBnK24BitAlphaMulY+1),de		; save result
  83++D3B0 ~            						ld      a,(ALPHA)                   ; get roll value
  84++D3B0 ~            						and 	$7F
  85++D3B0 ~            						ld      d,a                         ; .
  86++D3B0 ~            						ld      a,(UBnKxlo)                ; HLE = x sgn, hi, lo
  87++D3B0 ~            						ld      e,a                         ; .
  88++D3B0 ~            						ld      hl,(UBnKxhi)               ; .
  89++D3B0 ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  90++D3B0 ~            						ld		a,l
  91++D3B0 ~            						ld		(UBnK24BitAlphaMulX),a			; save result
  92++D3B0 ~            						ld		(UBnK24BitAlphaMulX+1),de		; save result
  93++D3B0 ~            						ld		a,(ALPHA)
  94++D3B0 ~            						and		$80
  95++D3B0 ~            						jp		z,.RollingRight
  96++D3B0 ~            .RollingLeft:			ld		ix,UBnKxlo
  97++D3B0 ~            						ld		iy,UBnK24BitAlphaMulY
  98++D3B0 ~            						call	AddAtIXtoAtIY24Signed
  99++D3B0 ~            						ld		ix,UBnKylo
 100++D3B0 ~            						ld		iy,UBnK24BitAlphaMulX
 101++D3B0 ~            						call	SubAtIXtoAtIY24Signed
 102++D3B0 ~            						ret
 103++D3B0 ~            .RollingRight:			ld		ix,UBnKxlo
 104++D3B0 ~            						ld		iy,UBnK24BitAlphaMulY
 105++D3B0 ~            						call	SubAtIXtoAtIY24Signed
 106++D3B0 ~            						ld		ix,UBnKylo
 107++D3B0 ~            						ld		iy,UBnK24BitAlphaMulX
 108++D3B0 ~            						call	AddAtIXtoAtIY24Signed
 109++D3B0 ~            						ret
 110++D3B0 ~
 111++D3B0 ~            UBnKPitch_24Bit:		ld      a,(BETA)                   ; get roll value
 112++D3B0 ~            						and 	$7F
 113++D3B0 ~            						ld      d,a                         ; .
 114++D3B0 ~            						ld      a,(UBnKylo)                ; HLE = x sgn, hi, lo
 115++D3B0 ~            						ld      e,a                         ; .
 116++D3B0 ~            						ld      hl,(UBnKyhi)               ; .
 117++D3B0 ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 118++D3B0 ~            						ld		a,l
 119++D3B0 ~            						ld		(UBnK24BitBetaMulY),a			; save result
 120++D3B0 ~            						ld		(UBnK24BitBetaMulY+1),de		; save result
 121++D3B0 ~            						ld      a,(BETA)                   ; get roll value
 122++D3B0 ~            						and 	$7F
 123++D3B0 ~            						ld      d,a                         ; .
 124++D3B0 ~            						ld      a,(UBnKzlo)                ; HLE = x sgn, hi, lo
 125++D3B0 ~            						ld      e,a                         ; .
 126++D3B0 ~            						ld      hl,(UBnKzhi)               ; .
 127++D3B0 ~            						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 128++D3B0 ~            						ld		a,l
 129++D3B0 ~            						ld		(UBnK24BitBetaMulZ),a			; save result
 130++D3B0 ~            						ld		(UBnK24BitBetaMulZ+1),de		; save result
 131++D3B0 ~            						ld		a,(BETA)
 132++D3B0 ~            						and		$80
 133++D3B0 ~            						jp		z,.Climbing
 134++D3B0 ~            .Diving:				ld		ix,UBnKylo
 135++D3B0 ~            						ld		iy,UBnK24BitBetaMulZ
 136++D3B0 ~            						call	AddAtIXtoAtIY24Signed
 137++D3B0 ~            						ld		ix,UBnKzlo
 138++D3B0 ~            						ld		iy,UBnK24BitBetaMulY
 139++D3B0 ~            						call	SubAtIXtoAtIY24Signed
 140++D3B0 ~            						ret
 141++D3B0 ~            .Climbing:		     	ld		ix,UBnKylo
 142++D3B0 ~            						ld		iy,UBnK24BitBetaMulZ
 143++D3B0 ~            						call	SubAtIXtoAtIY24Signed
 144++D3B0 ~            						ld		ix,UBnKzlo
 145++D3B0 ~            						ld		iy,UBnK24BitBetaMulY
 146++D3B0 ~            						call	AddAtIXtoAtIY24Signed
 147++D3B0 ~            						ret
 148++D3B0 ~
 149++D3B0                  ELSE
 150++D3B0              APPequPosPlusAPP:       MACRO    Position, PositionSign
 151++D3B0 ~                                    push    bc
 152++D3B0 ~                                    ld      c,a                         ; save original value of a into c
 153++D3B0 ~                                    ld      a,(PositionSign)
 154++D3B0 ~                                    ld      b,a
 155++D3B0 ~                                    ld      a,c
 156++D3B0 ~                                    xor     b                           ; a = a xor x postition sign
 157++D3B0 ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 158++D3B0 ~            ; Signs are the same to we just add and take which ever sign
 159++D3B0 ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 160++D3B0 ~                                    ld      hl,(Position)
 161++D3B0 ~                                    add     hl,de
 162++D3B0 ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 163++D3B0 ~                                    ld      a,c                         ; and a = original sign as they were both the same
 164++D3B0 ~                                    pop     bc
 165++D3B0 ~                                    ret
 166++D3B0 ~            ; Signs are opposite so we subtract
 167++D3B0 ~            .MV50:                  ld      de,(varPp1)
 168++D3B0 ~                                    ld      hl,(Position)
 169++D3B0 ~                                    or      a
 170++D3B0 ~                                    sbc     hl,de
 171++D3B0 ~                                    jr      c,.MV51                     ; if the result was negative then negate result
 172++D3B0 ~                                    ld      a,c                         ; get back the original sign
 173++D3B0 ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
 174++D3B0 ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 175++D3B0 ~                                    pop     bc
 176++D3B0 ~                                    ret
 177++D3B0 ~            .MV51:                  NegHL
 178++D3B0 ~                                    ld      (varPp1),hl
 179++D3B0 ~                                    ld      a,c                         ; the original sign will still be good
 180++D3B0 ~                                    pop     bc
 181++D3B0 ~                                    ret
 182++D3B0                                      ENDM
 183++D3B0
 184++D3B0
 185++D3B0              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
 185++D3B0 C5          >                        push    bc
 185++D3B1 4F          >                        ld      c,a                         ; save original value of a into c
 185++D3B2 3A 22 C0    >                        ld      a,(UBnKxsgn)
 185++D3B5 47          >                        ld      b,a
 185++D3B6 79          >                        ld      a,c
 185++D3B7 A8          >                        xor     b                           ; a = a xor x postition sign
 185++D3B8 FA C9 D3    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 185++D3BB             >; Signs are the same to we just add and take which ever sign
 185++D3BB ED 5B 4D 66 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 185++D3BF 2A 20 C0    >                        ld      hl,(UBnKxlo)
 185++D3C2 19          >                        add     hl,de
 185++D3C3 22 4D 66    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 185++D3C6 79          >                        ld      a,c                         ; and a = original sign as they were both the same
 185++D3C7 C1          >                        pop     bc
 185++D3C8 C9          >                        ret
 185++D3C9             >; Signs are opposite so we subtract
 185++D3C9 ED 5B 4D 66 >.MV50:                  ld      de,(varPp1)
 185++D3CD 2A 20 C0    >                        ld      hl,(UBnKxlo)
 185++D3D0 B7          >                        or      a
 185++D3D1 ED 52       >                        sbc     hl,de
 185++D3D3 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
 185++D3D5 79          >                        ld      a,c                         ; get back the original sign
 185++D3D6 22 4D 66    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
 185++D3D9 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 185++D3DB C1          >                        pop     bc
 185++D3DC C9          >                        ret
 185++D3DD             >.MV51:                  NegHL
 185++D3DD AF          >                    xor a
 185++D3DE 95          >                    sub l
 185++D3DF 6F          >                    ld l,a
 185++D3E0 9F          >                    sbc a,a
 185++D3E1 94          >                    sub h
 185++D3E2 67          >                    ld h,a
 185++D3E3 22 4D 66    >                        ld      (varPp1),hl
 185++D3E6 79          >                        ld      a,c                         ; the original sign will still be good
 185++D3E7 C1          >                        pop     bc
 185++D3E8 C9          >                        ret
 186++D3E9
 187++D3E9              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
 187++D3E9 C5          >                        push    bc
 187++D3EA 4F          >                        ld      c,a                         ; save original value of a into c
 187++D3EB 3A 25 C0    >                        ld      a,(UBnKysgn)
 187++D3EE 47          >                        ld      b,a
 187++D3EF 79          >                        ld      a,c
 187++D3F0 A8          >                        xor     b                           ; a = a xor x postition sign
 187++D3F1 FA 02 D4    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 187++D3F4             >; Signs are the same to we just add and take which ever sign
 187++D3F4 ED 5B 4D 66 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 187++D3F8 2A 23 C0    >                        ld      hl,(UBnKylo)
 187++D3FB 19          >                        add     hl,de
 187++D3FC 22 4D 66    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 187++D3FF 79          >                        ld      a,c                         ; and a = original sign as they were both the same
 187++D400 C1          >                        pop     bc
 187++D401 C9          >                        ret
 187++D402             >; Signs are opposite so we subtract
 187++D402 ED 5B 4D 66 >.MV50:                  ld      de,(varPp1)
 187++D406 2A 23 C0    >                        ld      hl,(UBnKylo)
 187++D409 B7          >                        or      a
 187++D40A ED 52       >                        sbc     hl,de
 187++D40C 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
 187++D40E 79          >                        ld      a,c                         ; get back the original sign
 187++D40F 22 4D 66    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
 187++D412 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 187++D414 C1          >                        pop     bc
 187++D415 C9          >                        ret
 187++D416             >.MV51:                  NegHL
 187++D416 AF          >                    xor a
 187++D417 95          >                    sub l
 187++D418 6F          >                    ld l,a
 187++D419 9F          >                    sbc a,a
 187++D41A 94          >                    sub h
 187++D41B 67          >                    ld h,a
 187++D41C 22 4D 66    >                        ld      (varPp1),hl
 187++D41F 79          >                        ld      a,c                         ; the original sign will still be good
 187++D420 C1          >                        pop     bc
 187++D421 C9          >                        ret
 188++D422
 189++D422              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
 189++D422 C5          >                        push    bc
 189++D423 4F          >                        ld      c,a                         ; save original value of a into c
 189++D424 3A 28 C0    >                        ld      a,(UBnKzsgn)
 189++D427 47          >                        ld      b,a
 189++D428 79          >                        ld      a,c
 189++D429 A8          >                        xor     b                           ; a = a xor x postition sign
 189++D42A FA 3B D4    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 189++D42D             >; Signs are the same to we just add and take which ever sign
 189++D42D ED 5B 4D 66 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 189++D431 2A 26 C0    >                        ld      hl,(UBnKzlo)
 189++D434 19          >                        add     hl,de
 189++D435 22 4D 66    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 189++D438 79          >                        ld      a,c                         ; and a = original sign as they were both the same
 189++D439 C1          >                        pop     bc
 189++D43A C9          >                        ret
 189++D43B             >; Signs are opposite so we subtract
 189++D43B ED 5B 4D 66 >.MV50:                  ld      de,(varPp1)
 189++D43F 2A 26 C0    >                        ld      hl,(UBnKzlo)
 189++D442 B7          >                        or      a
 189++D443 ED 52       >                        sbc     hl,de
 189++D445 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
 189++D447 79          >                        ld      a,c                         ; get back the original sign
 189++D448 22 4D 66    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
 189++D44B EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 189++D44D C1          >                        pop     bc
 189++D44E C9          >                        ret
 189++D44F             >.MV51:                  NegHL
 189++D44F AF          >                    xor a
 189++D450 95          >                    sub l
 189++D451 6F          >                    ld l,a
 189++D452 9F          >                    sbc a,a
 189++D453 94          >                    sub h
 189++D454 67          >                    ld h,a
 189++D455 22 4D 66    >                        ld      (varPp1),hl
 189++D458 79          >                        ld      a,c                         ; the original sign will still be good
 189++D459 C1          >                        pop     bc
 189++D45A C9          >                        ret
 190++D45B
 191++D45B              ; rollWork holds Alpha intermidate results
 192++D45B 00 00 00     rollWork      DS 3
 193++D45E              rollWorkp1    equ rollWork
 194++D45E              rollWorkp2    equ rollWork+1
 195++D45E              rollWorkp3    equ rollWork+2
 196++D45E
 197++D45E              ;----------------------------------------------------------------------------------------------------------------------------------
 198++D45E              ; based on MVEIT part 4 of 9
 199++D45E 3A 66 66     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
 200++D461 21 5A 66                             ld      hl,BET1                     ; and pitch
 201++D464 B6                                   or      (hl)
 202++D465 CA 23 D5                             jp      z,.NoRotation               ; if both zero then don't compute
 203++D468              ; If the xsgn,ysng or zsng are not 0 or $80 then we use 24 bit routines
 204++D468              ; else we can just continue to use 16 bit
 205++D468                                     ;jp      ApplyMyRollAndPitch24Bit
 206++D468
 207++D468 3A 22 C0     .CheckFor24Bit:         ld      a,(UBnKxsgn)
 208++D46B 21 25 C0                             ld      hl,UBnKysgn
 209++D46E B6                                   or      (hl)
 210++D46F 21 28 C0                             ld      hl,UBnKzsgn
 211++D472 B6                                   or      (hl)
 212++D473 E6 7F                                and     $7F
 213++D475 C2 AD D5                             jp      nz,ApplyMyRollAndPitch24Bit
 214++D478                                      ;break
 215++D478              ; P[210] = x * alph (we use P[2]P[1] later as result/256
 216++D478 5F           .Not24BitCalcs:         ld      e,a                         ; e = roll magnitude
 217++D479 2A 20 C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
 218++D47C CD 73 6C                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
 219++D47F 32 4E 66                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
 220++D482 22 4C 66                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
 221++D485              ; A = Flip sign
 222++D485 3A 67 66                             ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
 223++D488 21 22 C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
 224++D48B AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
 225++D48C              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
 226++D48C CD E9 D3                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
 227++D48F              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
 228++D48F 32 5D D4                             ld      (rollWorkp3),a               ; k2+3 = sign of result
 229++D492 22 5B D4                             ld      (rollWorkp1),hl             ; k2+1,2 = result
 230++D495              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
 231++D495 3A 5A 66                             ld      a,(BET1)                    ; a = magnitude of pitch
 232++D498 5F                                   ld      e,a
 233++D499 CD 73 6C                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
 234++D49C 32 4E 66                             ld      (varPp2),a                   ; save highest byte in P2
 235++D49F 22 4C 66                             ld      (varP),hl
 236++D4A2              ; Fetch sign of previosu cal and xor with BETA inverted
 237++D4A2 3A 5D D4                             ld      a,(rollWorkp3)
 238++D4A5 5F                                   ld      e,a
 239++D4A6 3A 5B 66                             ld      a,(BET2)
 240++D4A9 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 241++D4AA              ; Z = P[210] =Z + APP
 242++D4AA CD 22 D4                             call    APPequZPosPlusAPP           ; MVT6
 243++D4AD 32 28 C0                             ld      (UBnKzsgn),a                ; save result back into z
 244++D4B0 22 26 C0                             ld      (UBnKzlo),hl
 245++D4B3              ; A[P1]P[0] = z * Beta
 246++D4B3 3A 5A 66                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 247++D4B6 5F                                   ld      e,a
 248++D4B7 CD 73 6C                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 249++D4BA 32 4E 66                             ld      (varPp2),a                  ; P2 = high byte of result
 250++D4BD 22 4C 66                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 251++D4C0              ; A xor BET2,Zsign
 252++D4C0 3A 5D D4                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 253++D4C3 32 25 C0                             ld      (UBnKysgn),a                ; save result back into y
 254++D4C6 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 255++D4C7 3A 5B 66                             ld      a,(BET2)                    ;
 256++D4CA AB                                   xor     e                           ;
 257++D4CB 5F                                   ld      e,a                         ; now xor it with z sign too
 258++D4CC 3A 28 C0                             ld      a,(UBnKzsgn)                ;
 259++D4CF AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 260++D4D0 F2 DF D4                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 261++D4D3 2A 4D 66                             ld      hl,(varPp1)
 262++D4D6 ED 5B 5B D4                          ld      de,(rollWorkp1)
 263++D4DA B7                                   or      a
 264++D4DB 19                                   add     hl,de
 265++D4DC C3 F9 D4                             jp      .MV44
 266++D4DF 2A 5B D4     .MV43:                  ld      hl,(rollWorkp1)
 267++D4E2 ED 5B 4D 66                          ld      de,(varPp1)
 268++D4E6 B7                                   or      a
 269++D4E7 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 270++D4E9 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 271++D4EB                                      NegHL
 271++D4EB AF          >                    xor a
 271++D4EC 95          >                    sub l
 271++D4ED 6F          >                    ld l,a
 271++D4EE 9F          >                    sbc a,a
 271++D4EF 94          >                    sub h
 271++D4F0 67          >                    ld h,a
 272++D4F1 3A 25 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and Univs are sign + 23 bit xpos
 273++D4F4 EE 80                                xor     SignOnly8Bit
 274++D4F6 32 25 C0                             ld      (UBnKysgn),a
 275++D4F9              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 276++D4F9 22 23 C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 277++D4FC 3A 66 66                             ld      a,(ALP1)                    ; get roll magnitude
 278++D4FF 5F                                   ld      e,a
 279++D500 2A 23 C0                             ld      hl,(UBnKylo)
 280++D503 CD 73 6C                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 281++D506 32 4E 66                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 282++D509 22 4C 66                             ld      (varP),hl
 283++D50C 3A 68 66                             ld      a,(ALP2FLIP)
 284++D50F 5F                                   ld      e,a
 285++D510 3A 25 C0                             ld      a,(UBnKysgn)
 286++D513 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 287++D514 CD B0 D3                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 288++D517 32 22 C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 289++D51A 22 20 C0                             ld      (UBnKxlo),hl
 290++D51D                                      ;break
 291++D51D CD 3C D5                             call    ApplyMyRollToOrientation
 292++D520 CD 6B D5                             call    ApplyMyPitchToOrientation
 293++D523                                      ; if its not a Univ then apply to local orientation
 294++D523 3A 46 67     .NoRotation:            ld      a,(DELTA)                   ; get speed
 295++D526 16 00                                ld      d,0
 296++D528 5F                                   ld      e,a                         ; de = speed in low byte
 297++D529 2A 26 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 298++D52C 3A 28 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 299++D52F 47                                   ld      b,a                         ;
 300++D530 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 301++D532 CD 33 00                             call    ADDHLDESignBC               ; update speed
 302++D535 22 26 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 303++D538 32 28 C0                             ld      (UBnKzsgn),a                ;
 304++D53B C9                                   ret
 305++D53C
 306++D53C                             DISPLAY "TODO: Looks like pitch is always being applied as positive"
 307++D53C              ApplyMyRollToOrientation:MMUSelectMathsBankedFns
 307++D53C ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 308++D540 3A 65 66                             ld      a,(ALPHA)
 308++D543 DD 21 36 C0    ld ix,UBnkrotmatNosevX
 308++D547 FD 21 38 C0    ld iy,UBnkrotmatNosevY
 308++D54B CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyRollToNosev:
 309++D54E 3A 65 66                             ld      a,(ALPHA)
 309++D551 DD 21 2A C0    ld ix,UBnkrotmatSidevX
 309++D555 FD 21 2C C0    ld iy,UBnkrotmatSidevY
 309++D559 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyRollToSidev:
 310++D55C 3A 65 66                             ld      a,(ALPHA)
 310++D55F DD 21 30 C0    ld ix,UBnkrotmatRoofvX
 310++D563 FD 21 32 C0    ld iy,UBnkrotmatRoofvY
 310++D567 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyRollToRoofv:
 311++D56A C9                                   ret
 312++D56B
 313++D56B              ApplyMyPitchToOrientation:
 314++D56B 3A 58 66                             ld      a,(BETA)
 314++D56E DD 21 3A C0    ld ix,UBnkrotmatNosevZ
 314++D572 FD 21 38 C0    ld iy,UBnkrotmatNosevY
 314++D576 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyPitchToNosev:
 315++D579 3A 58 66                             ld      a,(BETA)
 315++D57C DD 21 2E C0    ld ix,UBnkrotmatSidevZ
 315++D580 FD 21 2C C0    ld iy,UBnkrotmatSidevY
 315++D584 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyPitchToSidev:
 316++D587 3A 58 66                             ld      a,(BETA)
 316++D58A DD 21 34 C0    ld ix,UBnkrotmatRoofvZ
 316++D58E FD 21 32 C0    ld iy,UBnkrotmatRoofvY
 316++D592 CD 8B 02       call ApplyMyAngleAToIXIY ; ApplyMyPitchToRoofv:
 317++D595 C9                                   ret
 318++D596              ;----------------------------------------------------------------------------------------------------------------------------------
 319++D596              ; 24 bit version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
 320++D596              ; Need to write a test routine for roll and pitchs
 321++D596              ; Minsky Roll       Minsky Pitch
 322++D596              ;  y -= alpha * x    y -= beta * z
 323++D596              ;  x += alpha * y    z += beta * y
 324++D596              ; or once combined
 325++D596              ;   1. K2 = y - alpha * x
 326++D596              ;   2. z = z + beta * K2
 327++D596              ;   3. y = K2 - beta * z
 328++D596              ;   4. x = x + alpha * y
 329++D596              ;----------------------------------------------------------------------------------------------------------------------------------
 330++D596              ; Based on non optimised version of Planet pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
 331++D596              ; Now at least rolls the correct direction
 332++D596 00 00 00 00  UnivAlphaMulX               DB $00,$00, $00, $00
 333++D59A 00 00 00 00  UnivAlphaMulY               DB $00,$00, $00, $00
 334++D59E 00 00 00 00  UnivAlphaMulZ               DB $00,$00, $00, $00
 335++D5A2 00 00 00 00  UnivBetaMulZ                DB $00,$00, $00, $00
 336++D5A6 00 00 00 00  UnivBetaMulY                DB $00,$00, $00, $00
 337++D5AA 00 00 00     UnivK2                      DS 3
 338++D5AD
 339++D5AD 3A 65 66     ApplyMyRollAndPitch24Bit: 	 ld     a,(ALPHA)                   ; no roll or pitch, no calc needed
 340++D5B0 21 58 66                                  ld     hl,BETA
 341++D5B3 B6                                        or     (hl)
 342++D5B4 C4 D8 D5                                  call   nz, Univ_Roll_And_Pitch
 343++D5B7              ;.CheckForRoll:              and		a
 344++D5B7              ;							call	nz,Univ_Roll
 345++D5B7              ;.CheckForPitch:				ld		a,(BETA)
 346++D5B7              ;							and		a
 347++D5B7              ;							call	nz,Univ_Pitch
 348++D5B7 3A 46 67     .ApplySpeed:            	ld      a,(DELTA)                   ; BCH = - Delta
 349++D5BA              							ReturnIfAIsZero
 349++D5BA A7          >                        and     a
 349++D5BB C8          >                        ret     z
 350++D5BC 0E 00        							ld      c,0                         ;
 351++D5BE 67           							ld      h,a                         ;
 352++D5BF 06 80        							ld      b,$80                       ;
 353++D5C1 ED 5B 27 C0  							ld      de,(UBnKzhi)                ; DEL = z position
 354++D5C5 3A 26 C0     							ld      a,(UBnKzlo)                 ; .
 355++D5C8 6F           							ld      l,a                         ; .
 356++D5C9 CD 14 01     							call    AddBCHtoDELsigned           ; update speed
 357++D5CC ED 53 27 C0  							ld      (UBnKzhi),DE                ; write back to zpos
 358++D5D0 7D           							ld      a,l
 359++D5D1 32 26 C0     							ld      (UBnKzlo),a                ;
 360++D5D4 C9           							ret
 361++D5D5
 362++D5D5              ; Performs minsky rotation
 363++D5D5              ; Joystick left          Joystick right
 364++D5D5              ; ---------------------  ---------------------
 365++D5D5              ; x :=  x      + y / 64  x :=  x -  y / 64  so rather than /64  is z * alpha / 256
 366++D5D5              ; y :=  y      - x /64   y :=  y +  x / 64
 367++D5D5              ;
 368++D5D5              ; Joystick down          Joystick up
 369++D5D5              ; ---------------------  ---------------------
 370++D5D5              ; y :=  y      + z / 64  y :=  y - z / 64
 371++D5D5              ; z :=  z      - y / 64  z :=  z + y / 64
 372++D5D5              ;
 373++D5D5              ; get z, multiply by alpha, pick top 3 bytes with sign
 374++D5D5              ; get x, multiply by alpha, pick top 3 bytes with sign
 375++D5D5              ; if alpha +ve subtract x = x - z adj, z =z + x adj , else x += z adj z -= z adj
 376++D5D5              ; so we can assume 24 bit maths and just do 16 bit multiply of say HL = nosev x [sgn][hi] and de = [0][alpha] by calling AHLequHLmulE
 377++D5D5              ; for roll
 378++D5D5              ; nosev_y = nosev_y - alpha * nosev_x_hi
 379++D5D5              ; nosev_x = nosev_x + alpha * nosev_y_hi
 380++D5D5              ; and for pitch
 381++D5D5              ; nosev_y = nosev_y - beta * nosev_z_hi
 382++D5D5              ; nosev_z = nosev_z + beta * nosev_y_hi
 383++D5D5              ;  1. K2 = y - alpha * x
 384++D5D5              ;   2. z = z + beta * K2
 385++D5D5              ;   3. y = K2 - beta * z
 386++D5D5              ;   4. x = x + alpha * y
 387++D5D5              ;
 388++D5D5              ;   1a. K [3 2 1 0] = -alpha * (x sign hi lo)
 389++D5D5              ;   1b. K [3 2 1]   = y sign hi lo + K [321] (in effect y minus (alpha * x / 256)
 390++D5D5              ;   1c. K2 [3 2 1]  = k [3 2 1 ]
 391++D5D5              ;   2a. K[3 2 1 0]  = k2 [3 2 1] * beta
 392++D5D5              ;   2b. z sign hi lo += K[3 2 1] ( in effect z += (beta * K2)/256
 393++D5D5              ;   3a. K [3 2 1 0] = z sign hi lo * -beta
 394++D5D5              ;   3b. y sign hi lo = K2 [3 2 1] - K [3 2 1] ( in effect K2 - (beta * z) /256
 395++D5D5              ;
 396++D5D5              ;   4. x = x + alpha * y
 397++D5D5
 398++D5D5
 399++D5D5
 400++D5D5              ;-- Q = - ALPHA
 401++D5D5              ;-- A P[1 0] = xsign xhi xlo
 402++D5D5              ;-- call K[3 2 1 0] = A P[1 0] * Q which means  K(3 2 1) = (A P+1 P) * Q / 256 = x * -alpha / 256 = - alpha * x / 256
 403++D5D5              ;-- call K[3 2 1] = ysign hi lo + K[3 2 1] (= y - alpha * x / 256)
 404++D5D5              ;-- K2 [3 2 1 ] = K [ 3 2 1 ]
 405++D5D5              ;-- A P [1 0]   = K [3 2 1]
 406++D5D5              ;-- Q = BETA
 407++D5D5              ;-- K[3 2 1 0] = A P[1 0] * Q
 408++D5D5              ;-- K3[3 2 1] = z sign hi lo + K[3 2 1]
 409++D5D5              ;-- A P [1 0] = -K [3 2 1]
 410++D5D5              ;-- z sign hi lo = K[3 2 1]
 411++D5D5              ;-- K[3 2 1 0] = A P[1 0] * Q
 412++D5D5              ;-- T = K[3] sign bit
 413++D5D5              ;-- A = K[3] sign bit xor K2[3]
 414++D5D5              ;-- if positive A yhi lo - = K [3 2 1 0] + K2[3 2 1 0] so A yhi ylo = K + K2 /256 as we abandon low byte
 415++D5D5              ;-- if negative A yhi lo = (K - k2 )/256
 416++D5D5              ;-- A = A xor T
 417++D5D5              ;-- y sign = A
 418++D5D5              ;-- Q = alpha
 419++D5D5              ;-- A P(1 0) = y sign hi lo
 420++D5D5              ;-- K[3 2 1 0 ] A P[1 0] * Q
 421++D5D5              ;-- x sign hi lo = K[3 2 1] = xsign hi lo * K[3 2 1]
 422++D5D5
 423++D5D5 00 00 00     K2      DS  3
 424++D5D8
 425++D5D8 3A 65 66     Univ_Roll_And_Pitch:	    ld      a,(ALPHA)                   ; get roll value
 426++D5DB              ;** 1. K2 = y - alpha * x **************************************
 427++D5DB              ;-- DEL = alpha * (x sign hi lo) /256
 428++D5DB 57           							ld      d,a                         ; d = alpha
 429++D5DC 3A 20 C0     							ld      a,(UBnKxlo)                 ; HLE = x sgn, hi, lo
 430++D5DF 5F           							ld      e,a                         ; .
 431++D5E0 2A 21 C0     							ld      hl,(UBnKxhi)                ; hl = UBnKchi sgn
 432++D5E3 CD 42 6D     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * alpha / 256
 433++D5E6              ;-- DEL = K2 = y - alpha * x
 434++D5E6 42 4B                                    ld      bc,de                       ; transfer to BCH for now
 435++D5E8 65                                       ld      h,l
 436++D5E9 ED 5B 24 C0                              ld      de,(UBnKyhi)
 437++D5ED 3A 23 C0                                 ld      a,(UBnKylo)
 438++D5F0 6F                                       ld      l,a
 439++D5F1 CD 10 01                                 call    SubBCHfromDELsigned
 440++D5F4 ED 53 D6 D5                              ld      (K2+1),de
 441++D5F8 7D                                       ld      a,l
 442++D5F9 32 D5 D5                                 ld      (K2),a
 443++D5FC              ;** 2. z = z + beta * K2 ***************************************
 444++D5FC              ;-- HLE = DEL ..................................................
 445++D5FC EB                                       ex      de,hl                       ; will set hl to de and e to l in one go
 446++D5FD              ;-- DELC = beta * HLE, i.e. beta * K2
 447++D5FD 3A 58 66                                 ld      a,(BETA)
 448++D600 57                                       ld      d,a
 449++D601 CD 42 6D                                 call    mulHLEbyDSigned             ; DELC = beta * K2
 450++D604              ;-- DEL = z + DEL, i.e. z + Beta * K2 /256
 451++D604 ED 4B 27 C0                              ld      bc,(UBnKzhi)                ; BCH = z
 452++D608 3A 26 C0                                 ld      a,(UBnKzlo)                 ; .
 453++D60B 67                                       ld      h,a                         ; .
 454++D60C CD 14 01                                 call    AddBCHtoDELsigned           ; DEL =z + (beta * K2)/256
 455++D60F ED 53 27 C0                              ld      (UBnKzhi),de                ; and save to Z
 456++D613 7D                                       ld      a,l                         ; .
 457++D614 32 26 C0                                 ld      (UBnKzlo),a                 ; .
 458++D617              ;** 3. y = K2 - beta * z ***************************************
 459++D617              ;-- DEL = beta * z / 256
 460++D617 3A 58 66                                 ld      a,(BETA)                    ; get pitch value
 461++D61A 57           							ld      d,a                         ; d = pitch
 462++D61B 3A 26 C0     							ld      a,(UBnKzlo)                 ; HLE = z sgn, hi, lo
 463++D61E 5F           							ld      e,a                         ; .
 464++D61F 2A 27 C0     							ld      hl,(UBnKzhi)                ; hl = UBnKchi sgn
 465++D622 CD 42 6D     							call    mulHLEbyDSigned             ; DELC = z * beta, so DEL = z * beta / 256
 466++D625              ;-- BCH = DEL ..................................................
 467++D625 42 4B                                    ld      bc,de                       ; transfer to BCH for now
 468++D627 65                                       ld      h,l
 469++D628              ;-- y = DEL = K2 - beta * z = DEL - BCH
 470++D628 ED 5B D6 D5                              ld      de,(K2+1)                   ; del = K2
 471++D62C 3A D5 D5                                 ld      a,(K2)                      ; .
 472++D62F 6F                                       ld      l,a                         ; .
 473++D630 CD 10 01                                 call    SubBCHfromDELsigned         ; .
 474++D633 ED 53 24 C0                              ld      (UBnKyhi),de                ; and save to y
 475++D637 7D                                       ld      a,l                         ; .
 476++D638 32 23 C0                                 ld      (UBnKylo),a                 ; .
 477++D63B              ;** 4. x = x + alpha * y ***************************************
 478++D63B              ;-- DEL = alpha * y
 479++D63B 3A 65 66                                 ld      a,(ALPHA)                   ; get roll value
 480++D63E              ;-- DEL = alpha * (y sign hi lo) /256
 481++D63E 57           							ld      d,a                         ; d = alpha
 482++D63F 3A 23 C0     							ld      a,(UBnKylo)                 ; HLE = y sgn, hi, lo
 483++D642 5F           							ld      e,a                         ; .
 484++D643 2A 24 C0     							ld      hl,(UBnKyhi)                ; hl = UBnKyhi sgn
 485++D646 CD 42 6D     							call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256
 486++D649              ;-- DEL = x + alpha * y
 487++D649 42 4B                                    ld      bc,de                       ; transfer to BCH for now
 488++D64B 65                                       ld      h,l                         ; .
 489++D64C ED 5B 21 C0                              ld      de,(UBnKxhi)                ; del = x
 490++D650 3A 20 C0                                 ld      a,(UBnKxlo)                 ; .
 491++D653 6F                                       ld      l,a                         ; .
 492++D654 CD 14 01                                 call    AddBCHtoDELsigned           ; del = del + bch = x + alpha * y
 493++D657 ED 53 21 C0                              ld      (UBnKxhi),de                ; and save to x
 494++D65B 7D                                       ld      a,l                         ; .
 495++D65C 32 20 C0                                 ld      (UBnKxlo),a                 ; .
 496++D65F              .ApplyRollToRight:          ;call    ApplyMyRollToOrientation
 497++D65F CD 6B D5     .ApplyPitchToClimb:         call    ApplyMyPitchToOrientation
 498++D662                                        ;  call    TidyVectorsIX ; doesn't work
 499++D662 C9           							ret
 500++D663                  ENDIF
 501++D663
# file closed: ../../Tests/Vectors/../../Universe/Ships/ApplyMyRollAndPitch.asm
 886+ D663                          INCLUDE "../../Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ApplyShipRollAndPitch.asm
   1++D663
   2++D663              ; A = value for rotation
   3++D663              ; HL = address of value for rotation
   4++D663              ; TODO logic for permanent spin, I thik this it -127??
   5++D663              SplitAndDampenZ:        MACRO
   6++D663 ~                                    ld      b,a
   7++D663 ~                                    and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
   8++D663 ~                                    jp      z,.ProcessRoll
   9++D663 ~                                    ld      a,b                     ; b = rotate counter S7
  10++D663 ~                                    and     SignOnly8Bit            ; a = sign rat2 = c = sign
  11++D663 ~                                    ld      c,a                     ; .
  12++D663 ~                                    ld      (univRAT2),a            ; .
  13++D663 ~                                    ld      a,b                     ; a = abs b
  14++D663 ~                                    and     SignMask8Bit            ; .
  15++D663 ~                                    dec     a                       ; dampen
  16++D663 ~                                    ld      (univRAT2Val),a
  17++D663 ~                                    or      c                       ; make S7 again after dampening
  18++D663 ~                                    ld      (UBnKRotZCounter),a
  19++D663                                      ENDM
  20++D663
  21++D663              SplitAndDampenX:        MACRO
  22++D663 ~                                    ld      b,a
  23++D663 ~                                    and     SignMask8Bit            ; exit early is ABS = 0
  24++D663 ~                                    and     a                       ; .
  25++D663 ~                                    ret     z                       ; .
  26++D663 ~                                    ld      a,b                     ; a = rotate counter S7
  27++D663 ~                                    and     SignOnly8Bit            ; rat2 = c = sign
  28++D663 ~                                    ld      c,a                     ; .
  29++D663 ~                                    ld      (univRAT2),a            ; .
  30++D663 ~                                    ld      a,b                     ; a = abs b
  31++D663 ~                                    and     SignMask8Bit            ; .
  32++D663 ~                                    dec     a                       ; dampen
  33++D663 ~                                    ld      (univRAT2Val),a
  34++D663 ~                                    or      c                       ; make S7 again after dampening
  35++D663 ~                                    ld      (UBnKRotXCounter),a
  36++D663                                      ENDM
  37++D663
  38++D663
  39++D663              ;----------------------------------------------------------------------------------------------------------------------------------
  40++D663              ; based on MVEIT part 4 of 9
  41++D663              ; x and z counters are proper 2's c values
  42++D663 3A 78 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
  43++D666 FE FF                                cp      $FF
  44++D668 28 18                                jr      z,.PitchSAxes
  45++D66A                                      SplitAndDampenZ
  45++D66A 47          >                        ld      b,a
  45++D66B E6 7F       >                        and     SignMask8Bit            ; if abs (Rotz) is 0 then skip
  45++D66D CA AF D6    >                        jp      z,.ProcessRoll
  45++D670 78          >                        ld      a,b                     ; b = rotate counter S7
  45++D671 E6 80       >                        and     SignOnly8Bit            ; a = sign rat2 = c = sign
  45++D673 4F          >                        ld      c,a                     ; .
  45++D674 32 7E C0    >                        ld      (univRAT2),a            ; .
  45++D677 78          >                        ld      a,b                     ; a = abs b
  45++D678 E6 7F       >                        and     SignMask8Bit            ; .
  45++D67A 3D          >                        dec     a                       ; dampen
  45++D67B 32 7F C0    >                        ld      (univRAT2Val),a
  45++D67E B1          >                        or      c                       ; make S7 again after dampening
  45++D67F 32 78 C0    >                        ld      (UBnKRotZCounter),a
  46++D682                                      ;ld      a,(UBnKRotZCounter)
  47++D682 21 30 C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  48++D685 22 31 66                             ld	    (varAxis1),hl
  49++D688 21 36 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  50++D68B 22 33 66                             ld	    (varAxis2),hl
  51++D68E CD FB D6                             call    MVS5RotateAxis
  52++D691 21 32 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  53++D694 22 31 66                             ld	    (varAxis1),hl
  54++D697 21 38 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  55++D69A 22 33 66                             ld	    (varAxis2),hl
  56++D69D CD FB D6                             call    MVS5RotateAxis
  57++D6A0 21 34 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  58++D6A3 22 31 66                             ld	    (varAxis1),hl
  59++D6A6 21 3A C0                             ld	    hl,UBnkrotmatNosevZ
  60++D6A9 22 33 66                             ld	    (varAxis2),hl
  61++D6AC CD FB D6                             call    MVS5RotateAxis
  62++D6AF 3A 77 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  63++D6B2 FE FF                                cp      $FF
  64++D6B4 28 17                                jr      z,.RollSAxis
  65++D6B6                                      SplitAndDampenX
  65++D6B6 47          >                        ld      b,a
  65++D6B7 E6 7F       >                        and     SignMask8Bit            ; exit early is ABS = 0
  65++D6B9 A7          >                        and     a                       ; .
  65++D6BA C8          >                        ret     z                       ; .
  65++D6BB 78          >                        ld      a,b                     ; a = rotate counter S7
  65++D6BC E6 80       >                        and     SignOnly8Bit            ; rat2 = c = sign
  65++D6BE 4F          >                        ld      c,a                     ; .
  65++D6BF 32 7E C0    >                        ld      (univRAT2),a            ; .
  65++D6C2 78          >                        ld      a,b                     ; a = abs b
  65++D6C3 E6 7F       >                        and     SignMask8Bit            ; .
  65++D6C5 3D          >                        dec     a                       ; dampen
  65++D6C6 32 7F C0    >                        ld      (univRAT2Val),a
  65++D6C9 B1          >                        or      c                       ; make S7 again after dampening
  65++D6CA 32 77 C0    >                        ld      (UBnKRotXCounter),a
  66++D6CD 21 30 C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  67++D6D0 22 31 66                             ld	    (varAxis1),hl
  68++D6D3 21 2A C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  69++D6D6 22 33 66                             ld	    (varAxis2),hl
  70++D6D9 CD FB D6                             call    MVS5RotateAxis
  71++D6DC 21 32 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  72++D6DF 22 31 66                             ld	    (varAxis1),hl
  73++D6E2 21 2C C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  74++D6E5 22 33 66                             ld	    (varAxis2),hl
  75++D6E8 CD FB D6                             call    MVS5RotateAxis
  76++D6EB 21 34 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  77++D6EE 22 31 66                             ld	    (varAxis1),hl
  78++D6F1 21 2E C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  79++D6F4 22 33 66                             ld	    (varAxis2),hl
  80++D6F7 CD FB D6                             call    MVS5RotateAxis
  81++D6FA C9                                   ret
  82++D6FB
  83++D6FB
  84++D6FB
  85++D6FB              ; Roate around axis
  86++D6FB              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  87++D6FB              ; so the axis x1 points to roofv  x , y or z
  88++D6FB              ;             x2           nosev or sidev  x, y or z
  89++D6FB              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  90++D6FB              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  91++D6FB              ; var RAT2 gives direction
  92++D6FB              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  93++D6FB              ;-Set up S R -----------------------------------------
  94++D6FB              ; optimised we don't deal with sign here just the value of roof axis / 512
  95++D6FB 2A 31 66     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  96++D6FE 5E                                   ld      e,(hl)
  97++D6FF 23                                   inc     hl
  98++D700 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  99++D701 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 100++D702 7C                                   ld      a,h
 101++D703 E6 80                                and     SignOnly8Bit
 102++D705 FD 67                                ld      iyh,a           ; iyh = sign Axis1
 103++D707 7C                                   ld      a,h
 104++D708 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 105++D70A CB 3F                                srl     a               ; a = Axis1/2
 106++D70C 5F                                   ld      e,a             ;
 107++D70D FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 108++D70F 57                                   ld      d,a             ; de = signed Axis1 / 512
 109++D710 B7                                   or      a               ; clear carry
 110++D711 CD 75 01                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 111++D714              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 112++D714 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 113++D715 7D                                   ld      a,l
 114++D716 32 4D 67                             ld      (varR),a
 115++D719 7C                                   ld      a,h
 116++D71A 32 4E 67                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 117++D71D              ;-calculate roofv latter half of calc
 118++D71D 2A 33 66                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 119++D720 5E                                   ld      e,(hl)
 120++D721 23                                   inc     hl
 121++D722 56                                   ld      d,(hl)          ; de = value of roof axis
 122++D723 7A                                   ld      a,d
 123++D724 E6 80                                and     SignOnly8Bit
 124++D726 FD 67                                ld      iyh,a           ; save sign
 125++D728 7A                                   ld      a,d
 126++D729 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 127++D72B 57                                   ld      d,a             ; de = abs (nosev)
 128++D72C                                      ShiftDERight1
 128++D72C CB 3A       >			   srl d
 128++D72E CB 1B       >			   rr  e
 129++D730                                      ShiftDERight1
 129++D730 CB 3A       >			   srl d
 129++D732 CB 1B       >			   rr  e
 130++D734                                      ShiftDERight1
 130++D734 CB 3A       >			   srl d
 130++D736 CB 1B       >			   rr  e
 131++D738                                      ShiftDERight1           ; de = nosev /16 unsigned
 131++D738 CB 3A       >			   srl d
 131++D73A CB 1B       >			   rr  e
 132++D73C 3A 7E C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 133++D73F FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 134++D741 E6 80                                and     SignOnly8Bit
 135++D743 B2                                   or      d
 136++D744 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 137++D745              ;;; ld      a,e
 138++D745              ;;;     or      iyh
 139++D745              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 140++D745              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 141++D745 E1                                   pop     hl              ; get back RS POP ID 1
 142++D746                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 143++D746              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 144++D746 CD 56 00                             call    ADDHLDESignedV4 ; do add using hl and de
 145++D749 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 146++D74A              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 147++D74A              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 148++D74A 2A 33 66                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 149++D74D 5E                                   ld      e,(hl)
 150++D74E 23                                   inc     hl
 151++D74F 56                                   ld      d,(hl)
 152++D750 EB                                   ex      de,hl
 153++D751 7C                                   ld      a,h
 154++D752 E6 80                                and     $80
 155++D754 FD 67                                ld      iyh,a
 156++D756 7C                                   ld      a,h
 157++D757 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++D759 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 159++D75B 5F                                   ld      e,a
 160++D75C FD 7C                                ld      a,iyh
 161++D75E 57                                   ld      d,a
 162++D75F B7                                   or      a               ; clear carry
 163++D760 CD 75 01                             call    subHLDES15
 164++D763              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 165++D763 E5                                   push    hl              ; save hl on stack  PUSH ID 3
 166++D764 7D                                   ld      a,l
 167++D765 32 4C 66                             ld      (varP),a        ; p = low of resuilt
 168++D768 7C                                   ld      a,h
 169++D769 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 170++D76B 32 68 67                             ld      (varT),a        ; t = high of result
 171++D76E              ;-- Set up TQ
 172++D76E 2A 31 66                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 173++D771              ;   ld      hl,(varAxis2)   ; work on nosev again
 174++D771 5E                                   ld      e,(hl)
 175++D772 23                                   inc     hl
 176++D773 56                                   ld      d,(hl)
 177++D774 7A                                   ld      a,d
 178++D775 E6 80                                and     $80
 179++D777 FD 67                                ld      iyh,a           ; save sign
 180++D779 7A                                   ld      a,d
 181++D77A E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 182++D77C 57                                   ld      d,a             ; de = abs (nosev)
 183++D77D                                      ShiftDERight1
 183++D77D CB 3A       >			   srl d
 183++D77F CB 1B       >			   rr  e
 184++D781                                      ShiftDERight1
 184++D781 CB 3A       >			   srl d
 184++D783 CB 1B       >			   rr  e
 185++D785                                      ShiftDERight1
 185++D785 CB 3A       >			   srl d
 185++D787 CB 1B       >			   rr  e
 186++D789                                      ShiftDERight1           ; de = nosev /16 unsigned
 186++D789 CB 3A       >			   srl d
 186++D78B CB 1B       >			   rr  e
 187++D78D 3A 7E C0                             ld      a,(univRAT2)
 188++D790 FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 189++D792 E6 80                                and     $80
 190++D794 B2                                   or      d
 191++D795 57                                   ld      d,a
 192++D796              ;;; ld      a,e
 193++D796              ;;;     or      iyh
 194++D796              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 195++D796 E1                                   pop     hl              ; get back RS   POP ID 3
 196++D797              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 197++D797 CD 75 01                             call    subHLDES15 ; do add using hl and de
 198++D79A              ;-- Update nosev ---------------------------------------
 199++D79A EB                                   ex      de,hl           ; save hl to de
 200++D79B 2A 33 66                             ld      hl,(varAxis2)
 201++D79E 73                                   ld      (hl),e
 202++D79F 23                                   inc     hl
 203++D7A0 72                                   ld      (hl),d          ; copy result into nosev
 204++D7A1              ;-- Update roofv ---------------------------------------
 205++D7A1 D1                                   pop     de              ; get calc saved on stack POP ID 2
 206++D7A2 2A 31 66                             ld      hl,(varAxis1)
 207++D7A5 73                                   ld      (hl),e
 208++D7A6 23                                   inc     hl
 209++D7A7 72                                   ld      (hl),d          ; copy result into nosev
 210++D7A8 C9                                   ret
 211++D7A9
 212++D7A9
# file closed: ../../Tests/Vectors/../../Universe/Ships/ApplyShipRollAndPitch.asm
 887+ D7A9                          INCLUDE "../../Universe/Ships/ApplyShipSpeed.asm"
# file opened: ../../Tests/Vectors/../../Universe/Ships/ApplyShipSpeed.asm
   1++D7A9
   2++D7A9
   3++D7A9              ;AddSpeedToVert:         MACRO   vertex
   4++D7A9              ;                        ld      hl,(vertex)
   5++D7A9              ;                        ld      a,(vertex+2)
   6++D7A9              ;                        ld      b,a
   7++D7A9              ;                        call    AHLEquBHLaddCDE
   8++D7A9              ;                        ld      (vertex),hl
   9++D7A9              ;                        ld      (vertex+2),a
  10++D7A9              ;                        ENDM
  11++D7A9
  12++D7A9
  13++D7A9              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D7A9 3A 75 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++D7AC FE 00                                cp      0
  16++D7AE C8                                   ret     z
  17++D7AF CB 27                                sla     a
  18++D7B1 CB 27                                sla     a
  19++D7B3 FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D7B5              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D7B5 5F          >                        ld      e,a
  20++D7B6 2A 36 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D7B9 7C          >                        ld      a,h
  20++D7BA             >                        ClearSignBitA
  20++D7BA E6 7F       >                        and     SignMask8Bit
  20++D7BC 57          >                        ld      d,a
  20++D7BD ED 30       >                        mul     de
  20++D7BF 7C          >                        ld      a,h
  20++D7C0             >                        SignBitOnlyA
  20++D7C0 E6 80       >                        and     SignOnly8Bit
  20++D7C2 47          >                        ld      b,a;ld      c,a
  20++D7C3 62          >                        ld      h,d;ld      e,d
  20++D7C4 0E 00       >                        ld      c,0;ld      d,0
  21++D7C6              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++D7C6 ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++D7CA 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++D7CD 6F          >                        ld      l,a
  21++D7CE CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D7D1 7D          >                        ld      a,l
  21++D7D2 32 20 C0    >                        ld      (UBnKxlo),a
  21++D7D5 ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++D7D9              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D7D9 FD 5D       >                        ld      e,iyl
  22++D7DB 2A 38 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D7DE 7C          >                        ld      a,h
  22++D7DF             >                        ClearSignBitA
  22++D7DF E6 7F       >                        and     SignMask8Bit
  22++D7E1 57          >                        ld      d,a
  22++D7E2 ED 30       >                        mul     de
  22++D7E4 7C          >                        ld      a,h
  22++D7E5             >                        SignBitOnlyA
  22++D7E5 E6 80       >                        and     SignOnly8Bit
  22++D7E7 47          >                        ld      b,a;ld      c,a
  22++D7E8 62          >                        ld      h,d;ld      e,d
  22++D7E9 0E 00       >                        ld      c,0;ld      d,0
  23++D7EB              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++D7EB ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++D7EF 3A 23 C0    >                        ld      a,(UBnKylo)
  23++D7F2 6F          >                        ld      l,a
  23++D7F3 CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D7F6 7D          >                        ld      a,l
  23++D7F7 32 23 C0    >                        ld      (UBnKylo),a
  23++D7FA ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++D7FE              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++D7FE FD 5D       >                        ld      e,iyl
  24++D800 2A 3A C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++D803 7C          >                        ld      a,h
  24++D804             >                        ClearSignBitA
  24++D804 E6 7F       >                        and     SignMask8Bit
  24++D806 57          >                        ld      d,a
  24++D807 ED 30       >                        mul     de
  24++D809 7C          >                        ld      a,h
  24++D80A             >                        SignBitOnlyA
  24++D80A E6 80       >                        and     SignOnly8Bit
  24++D80C 47          >                        ld      b,a;ld      c,a
  24++D80D 62          >                        ld      h,d;ld      e,d
  24++D80E 0E 00       >                        ld      c,0;ld      d,0
  25++D810              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++D810 ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++D814 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++D817 6F          >                        ld      l,a
  25++D818 CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++D81B 7D          >                        ld      a,l
  25++D81C 32 26 C0    >                        ld      (UBnKzlo),a
  25++D81F ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++D823 C9                                   ret
  27++D824
# file closed: ../../Tests/Vectors/../../Universe/Ships/ApplyShipSpeed.asm
 888+ D824              ; ---------------------------------------------------------------------------------------------------------------------------------
 889+ D824              ; .....................................................
 890+ D824              ; Process Nodes does the following:
 891+ D824              ; for each node:
 892+ D824              ;     see if node >
 893+ D824 00           PNXX20DIV6          DB      0
 894+ D825 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
 895+ D827 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
 896+ D829 00           PNLASTNORM          DB      0
 897+ D82A              ProcessNodes:           ZeroA
 897+ D82A AF          >                        xor a
 898+ D82B 32 1A C4                             ld      (UbnkLineArrayLen),a
 899+ D82E CD B8 CA                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 900+ D831 CD 8F 65                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
 901+ D834 CD 71 CD                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 902+ D837 CD 3E CC                             call    InverseXX16                      ;#11; Invert rotation matrix
 903+ D83A 21 41 C4                             ld      hl,UBnkHullVerticies
 904+ D83D 3A 2F C4                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
 905+ D840 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
 906+ D841 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
 907+ D842 16 06                                ld      d,6
 908+ D844 CD B1 71                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 909+ D847 41                                   ld      b,c                              ; c = number of vertices
 910+ D848 FD 21 20 C1                          ld      iy,UBnkNodeArray
 911+ D84C              LL48:
 912+ D84C C5           PointLoop:              push    bc                                  ; save counters
 913+ D84D E5                                   push    hl                                  ; save verticies list pointer
 914+ D84E FD E5                                push    iy                                  ; save Screen plot array pointer
 915+ D850 78                                   ld      a,b
 916+ D851                                      ;break
 917+ D851 CD DA D2                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
 918+ D854 3A D7 C0                             ld      a,(UBnkXScaledSign)
 919+ D857 CD F1 64                             call    XX12EquNodeDotOrientation
 920+ D85A CD E2 CA                             call    TransposeXX12ByShipToXX15
 921+ D85D CD 5F CB                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
 922+ D860 FD E1                                pop     iy                                  ; get back screen plot array pointer
 923+ D862 CD 59 D3                             call    ProjectNodeToEye                     ; set up screen plot list entry
 924+ D865                 ; ld      hl,UbnkLineArrayLen
 925+ D865                ;  inc     (hl)                                ; another node done
 926+ D865 FD E5        ReadyForNextPoint:      push    iy                                  ; copy screen plot pointer to hl
 927+ D867 E1                                   pop     hl
 928+ D868 3E 04                                ld      a,4
 929+ D86A ED 31                                add     hl,a
 930+ D86C E5                                   push    hl                                  ; write it back at iy + 4
 931+ D86D FD E1                                pop     iy                                  ; and put it in iy again
 932+ D86F E1                                   pop     hl                                  ; get hl back as vertex list
 933+ D870 3E 06                                ld      a,6
 934+ D872 ED 31                                add     hl,a                                ; and move to next vertex
 935+ D874 C1                                   pop     bc                                  ; get counter back
 936+ D875 10 D5                                djnz    PointLoop
 937+ D877              ; ......................................................
 938+ D877                                      ClearCarryFlag
 938+ D877 B7          >                        or a
 939+ D878 C9                                   ret
 940+ D879              ; ...........................................................
 941+ D879 CD 6C CF     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
 942+ D87C              ;............................................................
 943+ D87C              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
 943+ D87C CB 77       >                        bit 	ShipIsVisibleBitNbr,a
 943+ D87E C8          >                        ret		z
 944+ D87F              ;............................................................
 945+ D87F C9                                   ret
 946+ D880
 947+ D880                  ;INCLUDE "../../Universe/Ships/PrepLines.asm"
 948+ D880              ;--------------------------------------------------------------------------------------------------------
 949+ D880                      DISPLAY "Tracing 8", $
 950+ D880
 951+ D880                  INCLUDE "../../ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX1Y1.asm
   1++D880              ;--------------------------------------------------------------------------------------------------------
   2++D880              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D880 21 20 C1     getVertexNodeAtAToDE:   ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D883 ED 31                                add         hl,a                                ; hl = address of Node
   5++D885 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D886 ED A0                                ldi                                             ; x1 lo
   7++D888 ED A0                                ldi                                             ; x1 hi
   8++D88A ED A0                                ldi                                             ; y1 lo
   9++D88C ED A0                                ldi                                             ; y1 hi
  10++D88E C9                                   ret
  11++D88F
  12++D88F              ;getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
  13++D88F              ;                        add         hl,a                                ; hl = address of Node
  14++D88F              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
  15++D88F              ;                        ld          de,UBnkX1
  16++D88F              ;                        ldi                                             ; x1 lo
  17++D88F              ;                        ldi                                             ; x1 hi
  18++D88F              ;                        ldi                                             ; y1 lo
  19++D88F              ;                        ldi                                             ; y1 hi
  20++D88F              ;                        ret
  21++D88F
# file closed: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX1Y1.asm
 952+ D88F
 953+ D88F                      DISPLAY "Tracing 9", $
 954+ D88F
 955+ D88F                  INCLUDE "../../ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX2Y2.asm
   1++D88F              ;--------------------------------------------------------------------------------------------------------
   2++D88F              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++D88F              ;getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++D88F              ;                        add         hl,a                                ; hl = address of Node
   5++D88F              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
   6++D88F              ;                        ld          de,UBnkX2
   7++D88F              ;                        ldi                                             ; x1 lo
   8++D88F              ;                        ldi                                             ; x1 hi
   9++D88F              ;                        ldi                                             ; y1 lo
  10++D88F              ;                        ldi                                             ; y1 hi
  11++D88F              ;                        ret
# file closed: ../../Tests/Vectors/../../ModelRender/getVertexNodeAtAToX2Y2.asm
 956+ D88F                      DISPLAY "Tracing 10", $
 957+ D88F
 958+ D88F                  INCLUDE "../../ModelRender/GetFaceAtA.asm"
# file opened: ../../Tests/Vectors/../../ModelRender/GetFaceAtA.asm
   1++D88F              ;--------------------------------------------------------------------------------------------------------
   2++D88F              GetFaceAtA:         MACRO
   3++D88F ~                                ld          hl,UbnkFaceVisArray
   4++D88F ~                                add         hl,a
   5++D88F ~                                ld          a,(hl)                              ; get face visibility
   6++D88F                                  ENDM
   7++D88F
# file closed: ../../Tests/Vectors/../../ModelRender/GetFaceAtA.asm
 959+ D88F                      DISPLAY "Tracing 11", $
 960+ D88F
 961+ D88F              ;--------------------------------------------------------------------------------------------------------
 962+ D88F              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
 963+ D88F               ;   DEFINE NOBACKFACECULL 1
 964+ D88F 00           PLEDGECTR           DB          0
 965+ D890
 966+ D890              PrepLines:
 967+ D890              InitialiseLineRead:
 968+ D890                      ;break
 969+ D890                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
 969+ D890 AF          >                        xor      a
 969+ D891 32 1A C4    >                        ld       (UbnkLineArrayLen),a
 970+ D894 32 1B C4             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 971+ D897 32 8F D8             ld          (PLEDGECTR),a
 972+ D89A 3A 30 C4             ld          a,(EdgeCountAddr)
 973+ D89D DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
 974+ D89F FD 2E 00             ld          iyl,0                               ; ixl = current edge index
 975+ D8A2 21 60 C2             ld          hl,UbnkLineArray                    ; head of array
 976+ D8A5 22 4F 67             ld          (varU16),hl                         ; store current line array pointer un varU16
 977+ D8A8                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
 977+ D8A8 3A 30 C4    >                        ld       a,(EdgeCountAddr)
 977+ D8AB 32 53 67    >                        ld       (XX17),a
 978+ D8AE 3A 80 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
 979+ D8B1                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
 979+ D8B1 CB 77       >                        bit 	6,a
 979+ D8B3 CA BB D8    >                        jp      z,CalculateNewLines
 980+ D8B6 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
 981+ D8B8 32 80 C0             ld          (UBnKexplDsp),a                     ; INWK+31
 982+ D8BB              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
 983+ D8BB              ; NOw we can calculate hull after including laser line
 984+ D8BB              CalculateNewLines:
 985+ D8BB              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
 986+ D8BB              CheckEdgesForVisibility:
 987+ D8BB 21 31 C5             ld          hl,UBnkHullEdges
 988+ D8BE                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
 989+ D8BE 22 52 66             ld          (varV),hl                           ; V \ is pointer to where edges data start
 990+ D8C1 3A 2B C4             ld          a,(LineX4Addr)
 991+ D8C4 47                   ld          b,a                                 ; nbr of bytes of edge data
 992+ D8C5              LL75Loop:                                               ; count Visible edges
 993+ D8C5              IsEdgeInVisibilityRange:
 994+ D8C5 2A 52 66             ld          hl,(varV)
 995+ D8C8 E5                   push        hl
 996+ D8C9 FD E1                pop         iy
 997+ D8CB 3A 3D 66             ld          a,(LastNormalVisible)               ; XX4 is visibility range
 998+ D8CE 57                   ld          d,a                                 ; d holds copy of XX4
 999+ D8CF              ; Get Edge Byte 0
1000+ D8CF FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
1001+ D8D2                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
1001+ D8D2 BA          >                        cp      d
1001+ D8D3 DA 2E D9    >                        jp		c, LL78EdgeNotVisible
1002+ D8D6              EdgeMayBeVisibile:
1003+ D8D6              ; Get Edge Byte 1
1004+ D8D6              IsFace1Visibile:                                        ; edges have 2 faces to test
1005+ D8D6 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
1006+ D8D9 4F                   ld          c,a                                 ;  c = a copy of byte 1
1007+ D8DA E6 0F                and         $0F                                 ;
1008+ D8DC                      GetFaceAtA
1008+ D8DC 21 02 C1    >                    ld          hl,UbnkFaceVisArray
1008+ D8DF ED 31       >                    add         hl,a
1008+ D8E1 7E          >                    ld          a,(hl)                              ; get face visibility
1009+ D8E2              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
1010+ D8E2                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
1010+ D8E2 A7          >                        and     a
1010+ D8E3 C2 F7 D8    >                        jp	    nz,VisibileEdge
1011+ D8E6              IsFace2Visibile:
1012+ D8E6 79                   ld          a,c                                 ; restore byte 1 from c register
1013+ D8E7 ED 23                swapnib                                         ;
1014+ D8E9 E6 0F                and         $0F                                 ; swap high byte into low byte
1015+ D8EB E5                   push        hl
1016+ D8EC                      GetFaceAtA
1016+ D8EC 21 02 C1    >                    ld          hl,UbnkFaceVisArray
1016+ D8EF ED 31       >                    add         hl,a
1016+ D8F1 7E          >                    ld          a,(hl)                              ; get face visibility
1017+ D8F2 E1                   pop         hl
1018+ D8F3                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
1018+ D8F3 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1018+ D8F4 CA 2E D9    >                        jp	    z, LL78EdgeNotVisible
1019+ D8F7              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
1020+ D8F7              ;LL79--Visible edge--------------------------------------
1021+ D8F7              ; Get Edge Byte 2
1022+ D8F7 FD 7E 02             ld          a,(IY+2)                            ; get Node id
1023+ D8FA 11 D6 C0             ld          de,UBnkX1
1024+ D8FD CD 80 D8             call        getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
1025+ D900 FD 7E 03             ld          a,(IY+3)
1026+ D903 11 DA C0             ld          de,UBnkX2
1027+ D906 CD 80 D8             call        getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
1028+ D909              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
1029+ D909 ED 5B 4F 67          ld          de,(varU16)                         ; clipped edges heap address
1030+ D90D 21 D6 C0             ld          hl,UbnkPreClipX1
1031+ D910                      FourLDIInstrunctions
1031+ D910 ED A0       >                        ldi
1031+ D912 ED A0       >                        ldi
1031+ D914 ED A0       >                        ldi
1031+ D916 ED A0       >                        ldi
1032+ D918                      FourLDIInstrunctions
1032+ D918 ED A0       >                        ldi
1032+ D91A ED A0       >                        ldi
1032+ D91C ED A0       >                        ldi
1032+ D91E ED A0       >                        ldi
1033+ D920 ED 53 4F 67          ld          (varU16),de                         ; update U16 with current address
1034+ D924 21 1A C4             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
1035+ D927 34                   inc         (hl)
1036+ D928 7E                   ld          a,(hl)
1037+ D929                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
1037+ D929 FE 32       >                        cp     LineArraySize
1037+ D92B D2 44 D9    >                        jp		nc,CompletedLineGeneration
1038+ D92E              ; If we hit here we skip the write of line arryay u16
1039+ D92E              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
1040+ D92E              LL78:
1041+ D92E 2A 52 66             ld          hl,(varV)                           ; varV is current edge address
1042+ D931 3E 04                ld          a,4
1043+ D933 ED 31                add         hl,a
1044+ D935 22 52 66             ld          (varV),hl
1045+ D938 21 8F D8             ld          hl,PLEDGECTR                        ;
1046+ D93B 34                   inc         (hl)                                ;
1047+ D93C 7E                   ld          a,(hl)                              ; current edge index ++
1048+ D93D                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
1048+ D93D 21 53 67    >                        ld    hl,XX17
1048+ D940 BE          >                        cp    (hl)
1048+ D941 C2 C5 D8    >                        jp      nz,LL75Loop
1049+ D944              CompletedLineGeneration:
1050+ D944              LL81:
1051+ D944              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
1052+ D944 3A 1A C4             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
1053+ D947 CB 27                sla         a
1054+ D949 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
1055+ D94B CB 27                sla         a                           ; multiple by 8 to equal number of bytes
1056+ D94D 32 1B C4             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
1057+ D950              ExitEdgeDataLoop:
1058+ D950 C9                   ret
1059+ D951
1060+ D951
1061+ D951                  DISPLAY "Tracing XX", $
1062+ D951
1063+ D951              UnivBankSize  EQU $ - StartOfUniv
1064+ D951
# file closed: ../../Tests/Vectors/univ_ship_data.asm
 769  D951                                  DISPLAY "Sizing Bank ",BankUNIVDATA0," - Start ",UniverseBankAddr," End - ",$, "- Universe Data A"
 770  D951                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
 771  D951                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 772  D951              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
 773  D951                                  SLOT    MathsTablesAddr
 774  D951                                  PAGE    BankMathsTables
 775  D951                                  ORG     MathsTablesAddr,BankMathsTables
 776  0000                                  INCLUDE "../../Maths/logmaths.asm"
# file opened: ../../Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 83 05                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 83 03                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 83 03                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              ; calculates R = 256 * A / Q
  35+ 0043              Requ256mulAdivQ_Log:    JumpIfAGTEMemusng varQ, LL2             ; If A >= Q, then the answer will not fit in one byte, return 255
  35+ 0043 21 4C 67    >                        ld      hl,varQ
  35+ 0046 BE          >                        cp      (hl)
  35+ 0047 D2 BB 00    >                        jp		nc,LL2
  36+ 004A FD 6F                                ld      iyl,a                           ; STA widget             \ Store A in widget, so now widget = argument A
  37+ 004C DD 67                                ld      ixh,a                           ; TAX                    \ Transfer A into X, so now X = argument A
  38+ 004E                                      JumpIfAIsZero LLfix                     ; If A = 0, jump to LLfix to return a result of 0
  38+ 004E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 004F CA B7 00    >                        jp	    z, LLfix
  39+ 0052              ; calculate log(A) - log(Q), first adding the low bytes (from the logL table), and then the high bytes (from the log table)
  40+ 0052              ; this determins if we branch to antilog or antilogodd for negative value
  41+ 0052 21 83 03     .GetLogA:               ld      hl,LogTable                     ; LDA logL,X             \ e = low byte of log(X)
  42+ 0055 ED 31                                add     hl,a                            ; have to add twice as ist 8 bit so cant shift
  43+ 0057 ED 31                                add     hl,a                            ;
  44+ 0059 5E                                   ld      e,(hl)                          ;
  45+ 005A 23                                   inc     hl                              ;
  46+ 005B 56                                   ld      d,(hl)                          ; de = logH[X] logL[X]
  47+ 005C 21 83 03                             ld      hl,LogTable                     ;
  48+ 005F 3A 4C 67                             ld      a,(varQ)                        ;
  49+ 0062 ED 31                                add     hl,a                            ;
  50+ 0064 ED 31                                add     hl,a                            ;
  51+ 0066 4E                                   ld      c,(hl)                          ;
  52+ 0067 23                                   inc     hl                              ;
  53+ 0068 46                                   ld      b,(hl)                          ; bc = logH[X] logL[X]
  54+ 0069 7B                                   ld      a,e                             ; SBC logL,X             \       = low byte of log(A) - low byte of log(Q)
  55+ 006A                                      ClearCarryFlag                          ; .
  55+ 006A B7          >                        or a
  56+ 006B 99                                   sbc     a,c                             ; .
  57+ 006C D2 93 00                             jp      nc,NoCarryBranch
  58+ 006F FA 83 00     CarryBranch:            jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  59+ 0072 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  60+ 0073 7A                                   ld      a,d                             ; a = logH(a)
  61+ 0074              .CarryFlagPoint1:       SetCarryFlag
  61+ 0074 37          >                        scf
  62+ 0075 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  63+ 0076 D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  64+ 0079 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  65+ 007C ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  66+ 007E 7E                                   ld      a,(hl)
  67+ 007F 32 4D 67                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  68+ 0082 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  69+ 0083 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  70+ 0084              .CarryFlagPoint2:       SetCarryFlag
  70+ 0084 37          >                        scf
  71+ 0085 98                                   sbc     a,b
  72+ 0086 D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  73+ 0089 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  74+ 008C ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  75+ 008E 7E                                   ld      a,(hl)
  76+ 008F 32 4D 67                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  77+ 0092 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  78+ 0093 FA A7 00     NoCarryBranch:          jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  79+ 0096 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  80+ 0097 7A                                   ld      a,d                             ; a = logH(a)
  81+ 0098              .CarryFlagPoint1:       ClearCarryFlag
  81+ 0098 B7          >                        or a
  82+ 0099 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  83+ 009A D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  84+ 009D 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  85+ 00A0 ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  86+ 00A2 7E                                   ld      a,(hl)
  87+ 00A3 32 4D 67                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  88+ 00A6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  89+ 00A7 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  90+ 00A8              .CarryFlagPoint2:       ClearCarryFlag
  90+ 00A8 B7          >                        or a
  91+ 00A9 98                                   sbc     a,b
  92+ 00AA D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  93+ 00AD 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  94+ 00B0 ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  95+ 00B2 7E                                   ld      a,(hl)
  96+ 00B3 32 4D 67                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  97+ 00B6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  98+ 00B7 32 4D 67     LLfix:                  ld      (varR),a                        ; Set the result in R to the value of A
  99+ 00BA C9                                   ret                                     ; RTS                    \ Return from the subroutine
 100+ 00BB 3E FF        LL2:                    ld      a,$FF
 101+ 00BD 32 4D 67                             ld      (varR),a
 102+ 00C0 C9                                   ret
 103+ 00C1
 104+ 00C1
 105+ 00C1              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 105+ 00C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 105+ 00C2 CA EA 00    >                        jp	    z, .ResultIsZero
 106+ 00C5 21 83 03                             ld      hl,LogTable                     ; de = log a
 107+ 00C8 ED 31                                add     hl,a                            ; .
 108+ 00CA ED 31                                add     hl,a                            ; .
 109+ 00CC 5E                                   ld      e,(hl)                          ; .
 110+ 00CD 23                                   inc     hl                              ; .
 111+ 00CE 56                                   ld      d,(hl)                          ; .
 112+ 00CF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 113+ 00D2 78                                   ld      a,b                             ; .
 114+ 00D3 ED 31                                add     hl,a                            ; .
 115+ 00D5 ED 31                                add     hl,a                            ; .
 116+ 00D7 7E                                   ld      a,(hl)                          ; .
 117+ 00D8 23                                   inc     hl                              ; .
 118+ 00D9 66                                   ld      h,(hl)                          ; .
 119+ 00DA 6F                                   ld      l,a                             ; .
 120+ 00DB                                      ClearCarryFlag                          ;
 120+ 00DB B7          >                        or a
 121+ 00DC EB                                   ex      de,hl                           ; now hl = log a and de = log b
 122+ 00DD ED 52                                sbc     hl,de                           ; hl = log a - log b
 123+ 00DF 7C                                   ld      a,h                             ; .
 124+ 00E0 21 83 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 125+ 00E3 ED 31                                add     hl,a                            ; which is also a / b
 126+ 00E5 ED 31                                add     hl,a                            ; .
 127+ 00E7 7E                                   ld      a,(hl)                          ; .
 128+ 00E8                                      ClearCarryFlag                          ;
 128+ 00E8 B7          >                        or a
 129+ 00E9 C9                                   ret
 130+ 00EA              .ResultIsZero:          ClearCarryFlag
 130+ 00EA B7          >                        or a
 131+ 00EB                                      ZeroA
 131+ 00EB AF          >                        xor a
 132+ 00EC C9                                   ret
 133+ 00ED
 134+ 00ED              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 134+ 00ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 00EE CA 24 01    >                        jp	    z, .ResultIsZero
 135+ 00F1                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 135+ 00F1 BA          >                        cp     d
 135+ 00F2 D2 C1 00    >                        jp		nc,AEquAmul256DivBLogLT
 136+ 00F5 21 83 03                             ld      hl,LogTable                     ; de = log a
 137+ 00F8 ED 31                                add     hl,a                            ; .
 138+ 00FA ED 31                                add     hl,a                            ; .
 139+ 00FC 5E                                   ld      e,(hl)                          ; .
 140+ 00FD 23                                   inc     hl                              ; .
 141+ 00FE 56                                   ld      d,(hl)                          ; .
 142+ 00FF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 143+ 0102 78                                   ld      a,b                             ; .
 144+ 0103 ED 31                                add     hl,a                            ; .
 145+ 0105 ED 31                                add     hl,a                            ; .
 146+ 0107 7E                                   ld      a,(hl)                          ; .
 147+ 0108 23                                   inc     hl                              ; .
 148+ 0109 66                                   ld      h,(hl)                          ; .
 149+ 010A 6F                                   ld      l,a                             ; .
 150+ 010B                                      ClearCarryFlag                          ;
 150+ 010B B7          >                        or a
 151+ 010C EB                                   ex      de,hl                           ; now hl = log a and de = log b
 152+ 010D ED 52                                sbc     hl,de                           ; hl = log a - log b
 153+ 010F 38 0B                                jr      c,.ResultIsOne                  ; .
 154+ 0111 7C                                   ld      a,h                             ; .
 155+ 0112 21 83 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 156+ 0115 ED 31                                add     hl,a                            ; which is also a / b
 157+ 0117 ED 31                                add     hl,a                            ; .
 158+ 0119 7E                                   ld      a,(hl)                          ; .
 159+ 011A                                      ClearCarryFlag                          ;
 159+ 011A B7          >                        or a
 160+ 011B C9                                   ret
 161+ 011C              .ResultIsOne:           ClearCarryFlag
 161+ 011C B7          >                        or a
 162+ 011D 3E FF                                ld      a,$FF
 163+ 011F C9                                   ret
 164+ 0120              .ResultIsInfinte:       SetCarryFlag
 164+ 0120 37          >                        scf
 165+ 0121 3E FF                                ld      a,$FF
 166+ 0123 C9                                   ret
 167+ 0124              .ResultIsZero:          ClearCarryFlag
 167+ 0124 B7          >                        or a
 168+ 0125 C9                                   ret
 169+ 0126
 170+ 0126              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
 170+ 0126 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 170+ 0127 CA 46 01    >                        jp	    z, .ResultIsZero
 171+ 012A 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 172+ 012D ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 173+ 012F ED 31                                add     hl,a
 174+ 0131 5E                                   ld      e,(hl)                          ; de = log a
 175+ 0132 23                                   inc     hl                              ; .
 176+ 0133 56                                   ld      d,(hl)                          ; .
 177+ 0134 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 178+ 0137                                      ClearCarryFlag
 178+ 0137 B7          >                        or a
 179+ 0138 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 180+ 0139 ED 52                                sbc     hl,de
 181+ 013B 7C                                   ld      a,h
 182+ 013C 21 83 02                             ld      hl,AnitLogODDTable
 183+ 013F ED 31                                add     hl,a
 184+ 0141 ED 31                                add     hl,a
 185+ 0143 7E                                   ld      a,(hl)
 186+ 0144                                      ClearCarryFlag
 186+ 0144 B7          >                        or a
 187+ 0145 C9                                   ret
 188+ 0146              .ResultIsZero:          ClearCarryFlag
 188+ 0146 B7          >                        or a
 189+ 0147                                      ZeroA
 189+ 0147 AF          >                        xor a
 190+ 0148 C9                                   ret
 191+ 0149
 192+ 0149
 193+ 0149              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 193+ 0149 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 193+ 014A CA 73 01    >                        jp	    z, .ResultIsZero
 194+ 014D                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 194+ 014D BA          >                        cp     d
 194+ 014E D2 26 01    >                        jp		nc,AEquAmul256Div197LogLT
 195+ 0151 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 196+ 0154 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 197+ 0156 ED 31                                add     hl,a
 198+ 0158 5E                                   ld      e,(hl)                          ; de = log a
 199+ 0159 23                                   inc     hl                              ; .
 200+ 015A 56                                   ld      d,(hl)                          ; .
 201+ 015B 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 202+ 015E                                      ClearCarryFlag
 202+ 015E B7          >                        or a
 203+ 015F EB                                   ex      hl,de                           ; hl = log a, de = log 197
 204+ 0160 ED 52                                sbc     hl,de
 205+ 0162 38 0B                                jr      c,.ResultIsOne
 206+ 0164 7C                                   ld      a,h
 207+ 0165 21 83 01                             ld      hl,AntiLogTable
 208+ 0168 ED 31                                add     hl,a
 209+ 016A ED 31                                add     hl,a
 210+ 016C 7E                                   ld      a,(hl)
 211+ 016D                                      ClearCarryFlag
 211+ 016D B7          >                        or a
 212+ 016E C9                                   ret
 213+ 016F              .ResultIsOne:           ClearCarryFlag
 213+ 016F B7          >                        or a
 214+ 0170 3E FF                                ld      a,$FF
 215+ 0172 C9                                   ret
 216+ 0173              .ResultIsZero:          ClearCarryFlag
 216+ 0173 B7          >                        or a
 217+ 0174 C9                                   ret
 218+ 0175
 219+ 0175              AEquAmul256Div197LogSignA:
 220+ 0175 FD 67                                ld      iyh,a
 221+ 0177                                      ClearSignBitA
 221+ 0177 E6 7F       >                        and     SignMask8Bit
 222+ 0179 CD 49 01                             call    AEquAmul256Div197Log
 223+ 017C 47                                   ld      b,a
 224+ 017D FD 7C                                ld      a,iyh
 225+ 017F                                      SignBitOnlyA
 225+ 017F E6 80       >                        and     SignOnly8Bit
 226+ 0181 B0                                   or      b
 227+ 0182 C9                                   ret
# file closed: ../../Maths/logmaths.asm
 777  0183                                  INCLUDE "../../Tables/antilogtable.asm"
# file opened: ../../Tables/antilogtable.asm
   1+ 0183 01 01 01 01  AntiLogTable:           DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
   1+ 0187 01 01 01 01
   1+ 018B 01 01
   2+ 018D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
   2+ 0191 01 01 01 01
   2+ 0195 01 01
   3+ 0197 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
   3+ 019B 01 01 01 01
   3+ 019F 01 01
   4+ 01A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
   4+ 01A5 02 02 02 02
   4+ 01A9 02 02
   5+ 01AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
   5+ 01AF 02 02 02 02
   5+ 01B3 02 02
   6+ 01B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
   6+ 01B9 03 03 03 03
   6+ 01BD 03 03
   7+ 01BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
   7+ 01C3 04 04 04 04
   7+ 01C7 04 04
   8+ 01C9 04 04 04 04                          DB $04, $04, $04, $04, $04, $05, $05, $05, $05, $05 ; 70 to 79
   8+ 01CD 04 05 05 05
   8+ 01D1 05 05
   9+ 01D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
   9+ 01D7 06 06 06 06
   9+ 01DB 06 06
  10+ 01DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  10+ 01E1 07 07 08 08
  10+ 01E5 08 08
  11+ 01E7 08 08 09 09                          DB $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A ; 100 to 109
  11+ 01EB 09 09 09 0A
  11+ 01EF 0A 0A
  12+ 01F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D ; 110 to 119
  12+ 01F5 0B 0C 0C 0C
  12+ 01F9 0C 0D
  13+ 01FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F, $10, $10 ; 120 to 129
  13+ 01FF 0E 0E 0F 0F
  13+ 0203 10 10
  14+ 0205 10 11 11 11                          DB $10, $11, $11, $11, $12, $12, $13, $13, $13, $14 ; 130 to 139
  14+ 0209 12 12 13 13
  14+ 020D 13 14
  15+ 020F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  15+ 0213 16 17 17 18
  15+ 0217 18 19
  16+ 0219 19 1A 1A 1B                          DB $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F ; 150 to 159
  16+ 021D 1C 1C 1D 1D
  16+ 0221 1E 1F
  17+ 0223 20 20 21 22                          DB $20, $20, $21, $22, $22, $23, $24, $25, $26, $26 ; 160 to 169
  17+ 0227 22 23 24 25
  17+ 022B 26 26
  18+ 022D 27 28 29 2A                          DB $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  18+ 0231 2B 2C 2D 2E
  18+ 0235 2F 30
  19+ 0237 31 32 33 34                          DB $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B ; 180 to 189
  19+ 023B 35 36 38 39
  19+ 023F 3A 3B
  20+ 0241 3D 3E 40 41                          DB $3D, $3E, $40, $41, $42, $44, $45, $47, $48, $4A ; 190 to 199
  20+ 0245 42 44 45 47
  20+ 0249 48 4A
  21+ 024B 4C 4D 4F 51                          DB $4C, $4D, $4F, $51, $52, $54, $56, $58, $5A, $5C ; 200 to 219
  21+ 024F 52 54 56 58
  21+ 0253 5A 5C
  22+ 0255 5E 60 62 64                          DB $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72 ; 210 to 229
  22+ 0259 67 69 6B 6D
  22+ 025D 70 72
  23+ 025F 75 77 7A 7D                          DB $75, $77, $7A, $7D, $80, $82, $85, $88, $8B, $8E ; 220 to 239
  23+ 0263 80 82 85 88
  23+ 0267 8B 8E
  24+ 0269 91 94 98 9B                          DB $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1 ; 230 to 239
  24+ 026D 9E A2 A5 A9
  24+ 0271 AD B1
  25+ 0273 B5 B8 BD C1                          DB $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB ; 240 to 249
  25+ 0277 C5 C9 CE D2
  25+ 027B D7 DB
  26+ 027D E0 E5 EA EF                          DB $E0, $E5, $EA, $EF, $F5, $FA                     ; 250 to 255
  26+ 0281 F5 FA
  27+ 0283
  28+ 0283 01 01 01 01  AnitLogODDTable:        DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
  28+ 0287 01 01 01 01
  28+ 028B 01 01
  29+ 028D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
  29+ 0291 01 01 01 01
  29+ 0295 01 01
  30+ 0297 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
  30+ 029B 01 01 01 01
  30+ 029F 01 01
  31+ 02A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
  31+ 02A5 02 02 02 02
  31+ 02A9 02 02
  32+ 02AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
  32+ 02AF 02 02 02 02
  32+ 02B3 02 02
  33+ 02B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
  33+ 02B9 03 03 03 03
  33+ 02BD 03 03
  34+ 02BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
  34+ 02C3 04 04 04 04
  34+ 02C7 04 04
  35+ 02C9 04 04 04 04                          DB $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 70 to 79
  35+ 02CD 05 05 05 05
  35+ 02D1 05 05
  36+ 02D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
  36+ 02D7 06 06 06 06
  36+ 02DB 06 06
  37+ 02DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  37+ 02E1 07 07 08 08
  37+ 02E5 08 08
  38+ 02E7 08 09 09 09                          DB $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A ; 100 to 109
  38+ 02EB 09 09 0A 0A
  38+ 02EF 0A 0A
  39+ 02F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D ; 110 to 119
  39+ 02F5 0B 0C 0C 0C
  39+ 02F9 0D 0D
  40+ 02FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F, $10, $10 ; 120 to 129
  40+ 02FF 0E 0F 0F 0F
  40+ 0303 10 10
  41+ 0305 10 11 11 12                          DB $10, $11, $11, $12, $12, $12, $13, $13, $14, $14 ; 130 to 139
  41+ 0309 12 12 13 13
  41+ 030D 14 14
  42+ 030F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  42+ 0313 16 17 17 18
  42+ 0317 18 19
  43+ 0319 1A 1A 1B 1B                          DB $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 150 to 159
  43+ 031D 1C 1D 1D 1E
  43+ 0321 1E 1F
  44+ 0323 20 21 21 22                          DB $20, $21, $21, $22, $23, $24, $24, $25, $26, $27 ; 160 to 169
  44+ 0327 23 24 24 25
  44+ 032B 26 27
  45+ 032D 28 29 29 2A                          DB $28, $29, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  45+ 0331 2B 2C 2D 2E
  45+ 0335 2F 30
  46+ 0337 31 32 34 35                          DB $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C ; 180 to 189
  46+ 033B 36 37 38 3A
  46+ 033F 3B 3C
  47+ 0341 3D 3F 40 42                          DB $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B ; 190 to 199
  47+ 0345 43 45 46 48
  47+ 0349 49 4B
  48+ 034B 4C 4E 50 52                          DB $4C, $4E, $50, $52, $53, $55, $57, $59, $5B, $5D ; 200 to 219
  48+ 034F 53 55 57 59
  48+ 0353 5B 5D
  49+ 0355 5F 61 63 65                          DB $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74 ; 210 to 229
  49+ 0359 68 6A 6C 6F
  49+ 035D 71 74
  50+ 035F 76 79 7B 7E                          DB $76, $79, $7B, $7E, $81, $84, $87, $8A, $8D, $90 ; 220 to 239
  50+ 0363 81 84 87 8A
  50+ 0367 8D 90
  51+ 0369 93 96 99 9D                          DB $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 230 to 239
  51+ 036D A0 A4 A7 AB
  51+ 0371 AF B3
  52+ 0373 B6 BA BF C3                          DB $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE ; 240 to 249
  52+ 0377 C7 CB D0 D4
  52+ 037B D9 DE
  53+ 037D E3 E8 ED F2                          DB $E3, $E8, $ED, $F2, $F7, $FD                     ; 250 to 255
  53+ 0381 F7 FD
  54+ 0383
# file closed: ../../Tables/antilogtable.asm
 778  0383                                  INCLUDE "../../Tables/logtable.asm"
# file opened: ../../Tables/logtable.asm
   1+ 0383 00 00        LogTable:               DW $0000                                                                   ; 0
   2+ 0385 00 00 00 20                          DW $0000, $2000, $32B8, $4000, $4A4D, $52B8, $59D6, $6000, $6570, $6A4D    ;   1 TO  10
   2+ 0389 B8 32 00 40
   2+ 038D 4D 4A B8 52
   2+ 0391 D6 59 00 60
   2+ 0395 70 65 4D 6A
   3+ 0399 B4 6E B8 72                          DW $6EB4, $72B8, $766A, $79D6, $7D05, $8000, $82CC, $8570, $87EF, $8A4D    ;  11 TO  20
   3+ 039D 6A 76 D6 79
   3+ 03A1 05 7D 00 80
   3+ 03A5 CC 82 70 85
   3+ 03A9 EF 87 4D 8A
   4+ 03AD 8E 8C B4 8E                          DW $8C8E, $8EB4, $90C1, $92B8, $949A, $966A, $9828, $99D6, $9B75, $9D05    ;  21 TO  30
   4+ 03B1 C1 90 B8 92
   4+ 03B5 9A 94 6A 96
   4+ 03B9 28 98 D6 99
   4+ 03BD 75 9B 05 9D
   5+ 03C1 89 9E 00 A0                          DW $9E89, $A000, $A16C, $A2CC, $A423, $A570, $A6B4, $A7EF, $A922, $AA4D    ;  31 TO  40
   5+ 03C5 6C A1 CC A2
   5+ 03C9 23 A4 70 A5
   5+ 03CD B4 A6 EF A7
   5+ 03D1 22 A9 4D AA
   6+ 03D5 71 AB 8E AC                          DW $AB71, $AC8E, $ADA4, $AEB4, $AFBD, $B0C1, $B1BF, $B2B8, $B3AC, $B49A    ;  41 TO  50
   6+ 03D9 A4 AD B4 AE
   6+ 03DD BD AF C1 B0
   6+ 03E1 BF B1 B8 B2
   6+ 03E5 AC B3 9A B4
   7+ 03E9 85 B5 6A B6                          DW $B585, $B66A, $B74B, $B828, $B901, $B9D6, $BAA7, $BB75, $BC3F, $BD05    ;  51 TO  60
   7+ 03ED 4B B7 28 B8
   7+ 03F1 01 B9 D6 B9
   7+ 03F5 A7 BA 75 BB
   7+ 03F9 3F BC 05 BD
   8+ 03FD C9 BD 89 BE                          DW $BDC9, $BE89, $BF46, $C000, $C0B7, $C16C, $C21D, $C2CC, $C379, $C423    ;  61 TO  70
   8+ 0401 46 BF 00 C0
   8+ 0405 B7 C0 6C C1
   8+ 0409 1D C2 CC C2
   8+ 040D 79 C3 23 C4
   9+ 0411 CB C4 70 C5                          DW $C4CB, $C570, $C613, $C6B4, $C752, $C7EF, $C88A, $C922, $C9B9, $CA4D    ;  71 TO  80
   9+ 0415 13 C6 B4 C6
   9+ 0419 52 C7 EF C7
   9+ 041D 8A C8 22 C9
   9+ 0421 B9 C9 4D CA
  10+ 0425 E0 CA 71 CB                          DW $CAE0, $CB71, $CC00, $CC8E, $CD1A, $CDA4, $CE2D, $CEB4, $CF39, $CFBD    ;  81 TO  90
  10+ 0429 00 CC 8E CC
  10+ 042D 1A CD A4 CD
  10+ 0431 2D CE B4 CE
  10+ 0435 39 CF BD CF
  11+ 0439 40 D0 C1 D0                          DW $D040, $D0C1, $D141, $D1BF, $D23C, $D2B8, $D332, $D3AC, $D424, $D49A    ;  91 TO 100
  11+ 043D 41 D1 BF D1
  11+ 0441 3C D2 B8 D2
  11+ 0445 32 D3 AC D3
  11+ 0449 24 D4 9A D4
  12+ 044D 10 D5 85 D5                          DW $D510, $D585, $D5F8, $D66A, $D6DB, $D74B, $D7BA, $D828, $D895, $D901    ; 101 TO 110
  12+ 0451 F8 D5 6A D6
  12+ 0455 DB D6 4B D7
  12+ 0459 BA D7 28 D8
  12+ 045D 95 D8 01 D9
  13+ 0461 6C D9 D6 D9                          DW $D96C, $D9D6, $DA3F, $DAA7, $DB0E, $DB75, $DBDA, $DC3F, $DCA2, $DD05    ; 111 TO 120
  13+ 0465 3F DA A7 DA
  13+ 0469 0E DB 75 DB
  13+ 046D DA DB 3F DC
  13+ 0471 A2 DC 05 DD
  14+ 0475 67 DD C9 DD                          DW $DD67, $DDC9, $DE29, $DE89, $DEE8, $DF46, $DFA3, $E000, $E05C, $E0B7    ; 121 TO 130
  14+ 0479 29 DE 89 DE
  14+ 047D E8 DE 46 DF
  14+ 0481 A3 DF 00 E0
  14+ 0485 5C E0 B7 E0
  15+ 0489 12 E1 6C E1                          DW $E112, $E16C, $E1C5, $E21D, $E275, $E2CC, $E323, $E379, $E3CE, $E423    ; 131 TO 140
  15+ 048D C5 E1 1D E2
  15+ 0491 75 E2 CC E2
  15+ 0495 23 E3 79 E3
  15+ 0499 CE E3 23 E4
  16+ 049D 77 E4 CB E4                          DW $E477, $E4CB, $E51E, $E570, $E5C2, $E613, $E664, $E6B4, $E703, $E752    ; 141 TO 150
  16+ 04A1 1E E5 70 E5
  16+ 04A5 C2 E5 13 E6
  16+ 04A9 64 E6 B4 E6
  16+ 04AD 03 E7 52 E7
  17+ 04B1 A1 E7 EF E7                          DW $E7A1, $E7EF, $E83D, $E88A, $E8D6, $E922, $E96E, $E9B9, $EA03, $EA4D    ; 151 TO 160
  17+ 04B5 3D E8 8A E8
  17+ 04B9 D6 E8 22 E9
  17+ 04BD 6E E9 B9 E9
  17+ 04C1 03 EA 4D EA
  18+ 04C5 97 EA E0 EA                          DW $EA97, $EAE0, $EB29, $EB71, $EBB9, $EC00, $EC47, $EC8E, $ECD4, $ED1A    ; 161 TO 170
  18+ 04C9 29 EB 71 EB
  18+ 04CD B9 EB 00 EC
  18+ 04D1 47 EC 8E EC
  18+ 04D5 D4 EC 1A ED
  19+ 04D9 5F ED A4 ED                          DW $ED5F, $EDA4, $EDE8, $EE2D, $EE70, $EEB4, $EEF7, $EF39, $EF7B, $EFBD    ; 171 TO 180
  19+ 04DD E8 ED 2D EE
  19+ 04E1 70 EE B4 EE
  19+ 04E5 F7 EE 39 EF
  19+ 04E9 7B EF BD EF
  20+ 04ED FF EF 40 F0                          DW $EFFF, $F040, $F081, $F0C1, $F101, $F141, $F180, $F1BF, $F1FE, $F23C    ; 181 TO 190
  20+ 04F1 81 F0 C1 F0
  20+ 04F5 01 F1 41 F1
  20+ 04F9 80 F1 BF F1
  20+ 04FD FE F1 3C F2
  21+ 0501 7A F2 B8 F2                          DW $F27A, $F2B8, $F2F5, $F332, $F36F, $F3AC, $F3E8, $F424, $F45F, $F49A    ; 191 TO 290
  21+ 0505 F5 F2 32 F3
  21+ 0509 6F F3 AC F3
  21+ 050D E8 F3 24 F4
  21+ 0511 5F F4 9A F4
  22+ 0515 D5 F4 10 F5                          DW $F4D5, $F510, $F54A, $F585, $F5BE, $F5F8, $F631, $F66A, $F6A3, $F6DB    ; 201 TO 210
  22+ 0519 4A F5 85 F5
  22+ 051D BE F5 F8 F5
  22+ 0521 31 F6 6A F6
  22+ 0525 A3 F6 DB F6
  23+ 0529 13 F7 4B F7                          DW $F713, $F74B, $F783, $F7BA, $F7F1, $F828, $F85F, $F895, $F8CB, $F901    ; 211 TO 220
  23+ 052D 83 F7 BA F7
  23+ 0531 F1 F7 28 F8
  23+ 0535 5F F8 95 F8
  23+ 0539 CB F8 01 F9
  24+ 053D 36 F9 6C F9                          DW $F936, $F96C, $F9A1, $F9D6, $FA0A, $FA3F, $FA73, $FAA7, $FADB, $FB0E    ; 221 TO 230
  24+ 0541 A1 F9 D6 F9
  24+ 0545 0A FA 3F FA
  24+ 0549 73 FA A7 FA
  24+ 054D DB FA 0E FB
  25+ 0551 42 FB 75 FB                          DW $FB42, $FB75, $FBA7, $FBDA, $FC0C, $FC3F, $FC71, $FCA2, $FCD4, $FD05    ; 231 TO 240
  25+ 0555 A7 FB DA FB
  25+ 0559 0C FC 3F FC
  25+ 055D 71 FC A2 FC
  25+ 0561 D4 FC 05 FD
  26+ 0565 36 FD 67 FD                          DW $FD36, $FD67, $FD98, $FDC9, $FDF9, $FE29, $FE59, $FE89, $FEB8, $FEE8    ; 241 TO 250
  26+ 0569 98 FD C9 FD
  26+ 056D F9 FD 29 FE
  26+ 0571 59 FE 89 FE
  26+ 0575 B8 FE E8 FE
  27+ 0579 17 FF 46 FF                          DW $FF17, $FF46, $FF75, $FFA3, $FFA3                                       ; 251 TO 255
  27+ 057D 75 FF A3 FF
  27+ 0581 A3 FF
  28+ 0583
  29+ 0583
  30+ 0583
  31+ 0583 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  31+ 0587 20 00 02 00
  31+ 058B 32 00 03 00
  31+ 058F 40 00 04 00
  31+ 0593 4A 00 05 00
  31+ 0597 52 00 06 00
  32+ 059B 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  32+ 059F 60 00 08 00
  32+ 05A3 65 00 09 00
  32+ 05A7 6A 00 0A 00
  32+ 05AB 6E 00 0B 00
  32+ 05AF 72 00 0C 00
  33+ 05B3 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  33+ 05B7 79 00 0E 00
  33+ 05BB 7D 00 0F 00
  33+ 05BF 80 00 10 00
  33+ 05C3 82 00 11 00
  33+ 05C7 85 00 12 00
  34+ 05CB 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  34+ 05CF 8A 00 14 00
  34+ 05D3 8C 00 15 00
  34+ 05D7 8E 00 16 00
  34+ 05DB 90 00 17 00
  34+ 05DF 92 00 18 00
  35+ 05E3 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  35+ 05E7 96 00 1A 00
  35+ 05EB 98 00 1B 00
  35+ 05EF 99 00 1C 00
  35+ 05F3 9B 00 1D 00
  35+ 05F7 9D 00 1E 00
  36+ 05FB 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  36+ 05FF A0 00 20 00
  36+ 0603 A1 00 21 00
  36+ 0607 A2 00 22 00
  36+ 060B A4 00 23 00
  36+ 060F A5 00 24 00
  37+ 0613 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  37+ 0617 A7 00 26 00
  37+ 061B A9 00 27 00
  37+ 061F AA 00 28 00
  37+ 0623 AB 00 29 00
  37+ 0627 AC 00 2A 00
  38+ 062B AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  38+ 062F AE 00 2C 00
  38+ 0633 AF 00 2D 00
  38+ 0637 B0 00 2E 00
  38+ 063B B1 00 2F 00
  38+ 063F B2 00 30 00
  39+ 0643 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  39+ 0647 B4 00 32 00
  39+ 064B B5 00 33 00
  39+ 064F B6 00 34 00
  39+ 0653 B7 00 35 00
  39+ 0657 B8 00 36 00
  40+ 065B B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  40+ 065F B9 00 38 00
  40+ 0663 BA 00 39 00
  40+ 0667 BB 00 3A 00
  40+ 066B BC 00 3B 00
  40+ 066F BD 00 3C 00
  41+ 0673 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  41+ 0677 BF 00 3F 00
  41+ 067B C0 00 40 00
  41+ 067F C1 00 42 00
  41+ 0683 C2 00 43 00
  41+ 0687 C3 00 45 00
  42+ 068B C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  42+ 068F C5 00 48 00
  42+ 0693 C6 00 48 00
  42+ 0697 C7 00 4A 00
  42+ 069B C8 00 4C 00
  42+ 069F C9 00 4D 00
  43+ 06A3 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  43+ 06A7 CB 00 52 00
  43+ 06AB CC 00 53 00
  43+ 06AF CD 00 55 00
  43+ 06B3 CE 00 57 00
  43+ 06B7 CF 00 58 00
  44+ 06BB D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  44+ 06BF D1 00 5C 00
  44+ 06C3 D2 00 5E 00
  44+ 06C7 D3 00 61 00
  44+ 06CB D4 00 64 00
  44+ 06CF D5 00 66 00
  45+ 06D3 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  45+ 06D7 D6 00 69 00
  45+ 06DB D7 00 6A 00
  45+ 06DF D7 00 6B 00
  45+ 06E3 D8 00 6C 00
  45+ 06E7 D8 00 6D 00
  46+ 06EB D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  46+ 06EF D9 00 6F 00
  46+ 06F3 D9 00 70 00
  46+ 06F7 DA 00 71 00
  46+ 06FB DB 00 72 00
  46+ 06FF DC 00 75 00
  47+ 0703 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  47+ 0707 DE 00 7B 00
  47+ 070B DF 00 7E 00
  47+ 070F E0 00 80 00
  47+ 0713 E1 00 83 00
  47+ 0717 E2 00 86 00
  48+ 071B E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  48+ 071F E4 00 8C 00
  48+ 0723 E5 00 8F 00
  48+ 0727 E6 00 92 00
  48+ 072B E7 00 95 00
  48+ 072F E8 00 99 00
  49+ 0733 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  49+ 0737 EA 00 9F 00
  49+ 073B EB 00 A3 00
  49+ 073F EC 00 A6 00
  49+ 0743 ED 00 AA 00
  49+ 0747 EE 00 AE 00
  50+ 074B EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  50+ 074F F0 00 B6 00
  50+ 0753 F1 00 B9 00
  50+ 0757 F2 00 BE 00
  50+ 075B F3 00 C2 00
  50+ 075F F4 00 C6 00
  51+ 0763 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  51+ 0767 F6 00 CF 00
  51+ 076B F7 00 D3 00
  51+ 076F F8 00 D8 00
  51+ 0773 F8 00 D9 00
  51+ 0777 F9 00 DC 00
  52+ 077B FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  52+ 077F FB 00 E6 00
  52+ 0783 FB 00 E9 00
  52+ 0787 FC 00 EB 00
  52+ 078B FD 00 F0 00
  52+ 078F FE 00 F6 00
  53+ 0793 FF 00 FB 00                          DW $FF, 251
  54+ 0797              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ../../Tables/logtable.asm
 779  0797                                  DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
 780  0797                                  ASSERT $-MathsTablesAddr <8912, Bank code leaks over 8K boundary
 781  0797              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
 782  0797                                  SLOT    KeyboardAddr
 783  0797                                  PAGE    BankKeyboard
 784  0797                                  ORG SoundAddr, BankKeyboard
 785  E000                                  INCLUDE "../../Hardware/keyboard.asm"
# file opened: ../../Hardware/keyboard.asm
   1+ E000              ;
   2+ E000              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ E000              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ E000              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ E000              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ E000              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ E000              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ E000              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ E000              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ E000              ;
  11+ E000              ; Keyboard
  12+ E000              ;
  13+ E000              ;   0      1       2       3       4       5        6       7       8       9
  14+ E000              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ E000              ;   10     11      12      13      14      15       16      17      18      19
  16+ E000              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ E000              ;   20     21      22      23      24      25       26      27      28      29
  18+ E000              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ E000              ;   30     31      32      33      34      35       36      37      38      39
  20+ E000              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ E000              ;
  22+ E000              ; ZX Spectrum Next Compound keys
  23+ E000              ;   40     41       42       43      44      45       46       47
  24+ E000              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ E000              ;   48       49      50       51         52          53       54      55
  26+ E000              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ E000              ; Default map
  28+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ E000              ;   0          1           2             3              4           5           6           7           8           9
  30+ E000              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ E000              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ E000              ;                                                                                                       Find System
  33+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ E000              ;   10         11          12            13             14          15          16          17          18          19
  35+ E000              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ E000              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ E000              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ E000              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ E000              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ E000              ;   PlanetData                                                      PauseGame   SaveGame
  42+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ E000              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ E000              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ E000              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ E000              ;              ResumeGame                WarpJump
  47+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ E000              ;   40         41          42            43             44          45          46          47          48          49
  49+ E000              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ E000              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ E000              ;
  52+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ E000              ;   50         51          52            53             54          55
  54+ E000              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ E000              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ E000              ;
  57+ E000
  58+ E000              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ E000
  60+ E000              c_Pressed_Front         equ 0  * 2
  61+ E000              c_Pressed_Aft           equ 1  * 2
  62+ E000              c_Pressed_Left          equ 2  * 2
  63+ E000              c_Pressed_Right         equ 3  * 2
  64+ E000              c_Pressed_RollLeft      equ 4  * 2
  65+ E000              c_Pressed_RollRight     equ 5  * 2
  66+ E000              c_Pressed_Dive          equ 6  * 2
  67+ E000              c_Pressed_Climb         equ 7  * 2
  68+ E000              c_Pressed_Accellerate   equ 8  * 2
  69+ E000              c_Pressed_Decellerate   equ 9  * 2
  70+ E000              c_Pressed_FireLaser     equ 10 * 2
  71+ E000              c_Pressed_TargetMissle  equ 11 * 2
  72+ E000              c_Pressed_FireMissile   equ 12 * 2
  73+ E000              c_Pressed_UnarmMissile  equ 13 * 2
  74+ E000              c_Pressed_ECM           equ 14 * 2
  75+ E000              c_Pressed_EnergyBomb    equ 15 * 2
  76+ E000              c_Pressed_EscapePod     equ 16 * 2
  77+ E000              c_Pressed_DockingComp   equ 17 * 2
  78+ E000              c_Pressed_Hyperspace    equ 18 * 2
  79+ E000              c_Pressed_Distance      equ 19 * 2
  80+ E000              c_Pressed_HomeCursor    equ 20 * 2
  81+ E000              c_Pressed_Launch        equ 21 * 2
  82+ E000              c_Pressed_BuyCargo      equ 22 * 2
  83+ E000              c_Pressed_SellCargo     equ 23 * 2
  84+ E000              c_Pressed_Equip         equ 24 * 2
  85+ E000              c_Pressed_GalacticChrt  equ 25 * 2
  86+ E000              c_Pressed_LocalChart    equ 26 * 2
  87+ E000              c_Pressed_MarketPrices  equ 27 * 2
  88+ E000              c_Pressed_Status        equ 28 * 2
  89+ E000              c_Pressed_Inventory     equ 29 * 2
  90+ E000              c_Pressed_GameSkip      equ 30 * 2
  91+ E000              c_Pressed_Save          equ 31 * 2
  92+ E000              c_Pressed_Freeze        equ 32 * 2
  93+ E000              c_Pressed_Resume        equ 33 * 2
  94+ E000              c_Pressed_Recentre      equ 34 * 2
  95+ E000              c_Pressed_Quit          equ 35 * 2
  96+ E000              c_Pressed_PlanetData    equ 36 * 2
  97+ E000              c_Pressed_CursorUp      equ 37 * 2
  98+ E000              c_Pressed_CursorDown    equ 38 * 2
  99+ E000              c_Pressed_Find          equ 39 * 2
 100+ E000              c_Pressed_Yes           equ 40 * 2
 101+ E000              c_Pressed_No            equ 41 * 2
 102+ E000              c_Pressed_Warp          equ 42 * 2
 103+ E000              c_Pressed_ExtMarket     equ 43 * 2
 104+ E000              c_Pressed_ExtEquip      equ 44 * 2
 105+ E000              c_Pressed_ExtPlanet     equ 45 * 2
 106+ E000              c_Pressed_ExtNearest    equ 46 * 2
 107+ E000              c_Pressed_ExtCurUp      equ 47 * 2
 108+ E000              c_Pressed_ExtCurDown    equ 48 * 2
 109+ E000              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ E000              c_Pressed_ExtCurRight   equ 50 * 2
 111+ E000              c_Pressed_ExtDelete     equ 51 * 2
 112+ E000              c_Pressed_ExtFindSystem equ 52 * 2
 113+ E000              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ E000              c_Pressed_ExtInventory  equ 54 * 2
 115+ E000              c_Pressed_ExtStatus     equ 55 * 2
 116+ E000              c_Pressed_ExtGlactic    equ 56 * 2
 117+ E000              c_Pressed_ExtLocal      equ 57 * 2
 118+ E000              c_Pressed_ExtSystemJump equ 58 * 2
 119+ E000
 120+ E000              ; half row 1
 121+ E000              VK_CAPS  				equ 0
 122+ E000              VK_Z  					equ 1
 123+ E000              VK_X  					equ 2
 124+ E000              VK_C  					equ 3
 125+ E000              VK_V  					equ 4
 126+ E000              ; half row 2
 127+ E000              VK_A  					equ 5
 128+ E000              VK_S  					equ 6
 129+ E000              VK_D  					equ 7
 130+ E000              VK_F					equ 8
 131+ E000              VK_G  					equ 9
 132+ E000              ; half row 3
 133+ E000              VK_Q  					equ 10
 134+ E000              VK_W  					equ 11
 135+ E000              VK_E  					equ 12
 136+ E000              VK_R  					equ 13
 137+ E000              VK_T  					equ 14
 138+ E000              ; half row 4
 139+ E000              VK_1  					equ 15
 140+ E000              VK_2  					equ 16
 141+ E000              VK_3  					equ 17
 142+ E000              VK_4  					equ 18
 143+ E000              VK_5  					equ 19
 144+ E000              ; half row 5
 145+ E000              VK_0 					equ 20
 146+ E000              VK_9 					equ 21
 147+ E000              VK_8 					equ 22
 148+ E000              VK_7 					equ 23
 149+ E000              VK_6 					equ 24
 150+ E000              ; half row 6
 151+ E000              VK_P  					equ 25
 152+ E000              VK_O  					equ 26
 153+ E000              VK_I  					equ 27
 154+ E000              VK_U  					equ 28
 155+ E000              VK_Y  					equ 29
 156+ E000              ; half row 7
 157+ E000              VK_ENTER 				equ 30
 158+ E000              VK_L  					equ 31
 159+ E000              VK_K  					equ 32
 160+ E000              VK_J  					equ 33
 161+ E000              VK_H  					equ 34
 162+ E000              ; half row 8
 163+ E000              VK_SPACE 				equ 35
 164+ E000              VK_SYM  				equ 36
 165+ E000              VK_M  					equ 37
 166+ E000              VK_N  					equ 38
 167+ E000              VK_B  					equ 39
 168+ E000              ; Extended Group B0
 169+ E000              VK_SEMI                 equ 40
 170+ E000              VK_QUOTE                equ 41
 171+ E000              VK_COMMA                equ 42
 172+ E000              VK_STOP                 equ 43
 173+ E000              VK_UP                   equ 44
 174+ E000              VK_DOWN                 equ 45
 175+ E000              VK_LEFT                 equ 46
 176+ E000              VK_RIGHT                equ 47
 177+ E000              ; Extended Group B1
 178+ E000              VK_DELETE               equ 48
 179+ E000              VK_EDIT                 equ 49
 180+ E000              VK_BREAK                equ 50
 181+ E000              VK_INV_VID              equ 51
 182+ E000              VK_TRUE_VID             equ 52
 183+ E000              VK_GRAPH                equ 53
 184+ E000              VK_EXTCAPS              equ 54
 185+ E000              VK_EXTEND               equ 55
 186+ E000              ;KeyboardMapping
 187+ E000              KeyCode_Front        	equ VK_1
 188+ E000              KeyCode_Aft          	equ VK_2
 189+ E000              KeyCode_Left         	equ VK_3
 190+ E000              KeyCode_Right        	equ VK_4
 191+ E000              KeyCode_RollLeft     	equ VK_O
 192+ E000              KeyCode_RollRight    	equ VK_P
 193+ E000              KeyCode_Dive         	equ VK_Q
 194+ E000              KeyCode_Climb        	equ VK_A
 195+ E000              KeyCode_Accellerate  	equ VK_W
 196+ E000              KeyCode_Decellerate  	equ VK_S
 197+ E000              KeyCode_FireLaser    	equ VK_SPACE
 198+ E000              KeyCode_TargetMissle 	equ VK_T
 199+ E000              KeyCode_FireMissile  	equ VK_STOP
 200+ E000              KeyCode_Find        	equ VK_F
 201+ E000              KeyCode_UnarmMissile 	equ VK_R
 202+ E000              KeyCode_ECM          	equ VK_E
 203+ E000              KeyCode_EnergyBomb   	equ VK_U
 204+ E000              KeyCode_EscapePod    	equ VK_CAPS
 205+ E000              KeyCode_DockingComp  	equ VK_N
 206+ E000              KeyCode_Hyperspace   	equ VK_H
 207+ E000              KeyCode_Distance     	equ VK_J
 208+ E000              KeyCode_HomeCursor   	equ VK_G
 209+ E000              KeyCode_Launch       	equ VK_L
 210+ E000              KeyCode_BuyCargo     	equ VK_B
 211+ E000              KeyCode_SellCargo    	equ VK_V
 212+ E000              KeyCode_Equip        	equ VK_C
 213+ E000              KeyCode_GalacticChrt 	equ VK_5
 214+ E000              KeyCode_LocalChart   	equ VK_6
 215+ E000              KeyCode_MarketPrices 	equ VK_7
 216+ E000              KeyCode_Status       	equ VK_8
 217+ E000              KeyCode_Inventory    	equ VK_9
 218+ E000              KeyCode_GameSkip     	equ VK_Z
 219+ E000              KeyCode_Save         	equ VK_O
 220+ E000              KeyCode_Freeze       	equ VK_B
 221+ E000              KeyCode_Resume       	equ VK_L
 222+ E000              KeyCode_Recentre     	equ VK_STOP
 223+ E000              KeyCode_Quit         	equ VK_Y
 224+ E000              KeyCode_PlanetData   	equ VK_0
 225+ E000              KeyCode_CursorUp        equ VK_Q
 226+ E000              KeyCode_CursorDown      equ VK_A
 227+ E000              KeyCode_PressedYes      equ VK_Y
 228+ E000              KeyCode_PressedNo       equ VK_N
 229+ E000              KeyCode_Warp            equ VK_J
 230+ E000              KeyCode_ExtMarket       equ VK_SEMI
 231+ E000              KeyCode_ExtEquip        equ VK_QUOTE
 232+ E000              KeyCode_ExtPlanet       equ VK_COMMA
 233+ E000              KeyCode_ExtNearest      equ VK_STOP
 234+ E000              KeyCode_ExtCurUp        equ VK_UP
 235+ E000              KeyCode_ExtCurDown      equ VK_DOWN
 236+ E000              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ E000              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ E000              KeyCode_ExtDelete       equ VK_DELETE
 239+ E000              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ E000              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ E000              KeyCode_ExtInventory    equ VK_INV_VID
 242+ E000              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ E000              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ E000              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ E000              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ E000
 247+ E000 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ E037              c_KeyBoardLen 			equ $ - Keys
 249+ E037 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ E041 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ E045 EF DF BF 7F
 251+ E049              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ E049              ; of updating this table with the respective location to look up
 253+ E049              ; key list sequence is in table above
 254+ E049 0F E0 10 E0  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ E04D 11 E0 12 E0
 254+ E051 1A E0
 255+ E053 19 E0 0A E0                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ E057 05 E0 0B E0
 255+ E05B 06 E0
 256+ E05D 23 E0 0E E0                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ E061 2B E0 0D E0
 256+ E065 0C E0
 257+ E067 1C E0 00 E0                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ E06B 26 E0 22 E0
 257+ E06F 21 E0
 258+ E071 09 E0 1F E0                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ E075 27 E0 04 E0
 258+ E079 03 E0
 259+ E07B 13 E0 18 E0                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ E07F 17 E0 16 E0
 259+ E083 15 E0
 260+ E085 01 E0 1A E0                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ E089 27 E0 1F E0
 260+ E08D 2B E0
 261+ E08F 1D E0 14 E0                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ E093 0A E0 05 E0
 261+ E097 08 E0
 262+ E099 1D E0 26 E0                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ E09D 21 E0 28 E0
 262+ E0A1 29 E0
 263+ E0A3 2A E0 2B E0                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ E0A7 2C E0 2D E0
 263+ E0AB 2E E0
 264+ E0AD 2F E0 30 E0                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ E0B1 31 E0 32 E0
 264+ E0B5 33 E0
 265+ E0B7 34 E0 35 E0                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ E0BB 36 E0 37 E0
 266+ E0BF
 267+ E0BF
 268+ E0BF 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 268+ E0C3 56
 269+ E0C4 41 53 44 46                          DB "A","S","D","F","G"
 269+ E0C8 47
 270+ E0C9 51 57 45 52                          DB "Q","W","E","R","T"
 270+ E0CD 54
 271+ E0CE 31 32 33 34                          DB "1","2","3","4","5"
 271+ E0D2 35
 272+ E0D3 30 39 38 37                          DB "0","9","8","7","6"
 272+ E0D7 36
 273+ E0D8 50 4F 49 55                          DB "P","O","I","U","Y"
 273+ E0DC 59
 274+ E0DD 3E 4C 4B 4A                          DB ">","L","K","J","H"
 274+ E0E1 48
 275+ E0E2 20 5E 4D 4E                          DB " ","^","M","N","B"
 275+ E0E6 42
 276+ E0E7 3B 22 2C 2E                          DB ";",'"',",",".","^","v","[","]"  ; Extended keys register 0 semicolon, quote, comman, fullstop, up, down, left, right
 276+ E0EB 5E 76 5B 5D
 277+ E0EF 23 65 62 69                          DB "#","e","b","i","t","g","c","x"  ; Extended keys register 1 delete, edit, break, inv video, true video graph, caps, extend
 277+ E0F3 74 67 63 78
 278+ E0F7              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 279+ E0F7              ; for the raw key press status
 280+ E0F7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 281+ E0F7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 282+ E0F7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 283+ E0F7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 284+ E0F7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 285+ E0F7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 286+ E0F7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 287+ E0F7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 288+ E0F7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 289+ E0F7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 290+ E0F7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 291+ E0F7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 292+ E0F7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 293+ E0F7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 294+ E0F7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 295+ E0F7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 296+ E0F7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 297+ E0F7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 298+ E0F7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 299+ E0F7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 300+ E0F7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 301+ E0F7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 302+ E0F7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 303+ E0F7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 304+ E0F7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 305+ E0F7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 306+ E0F7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 307+ E0F7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 308+ E0F7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 309+ E0F7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 310+ E0F7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 311+ E0F7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 312+ E0F7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 313+ E0F7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 314+ E0F7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 315+ E0F7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 316+ E0F7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 317+ E0F7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 318+ E0F7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 319+ E0F7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 320+ E0F7              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 321+ E0F7
 322+ E0F7
 323+ E0F7              MIsKeyPressed:          MACRO   keyaddress, misstarget
 324+ E0F7 ~                                    MMUSelectKeyboard
 325+ E0F7 ~                                    ld      hl,(keyaddress)
 326+ E0F7 ~                                    ld      a,(hl)
 327+ E0F7 ~                                    JumpIfAIsZero   misstarget
 328+ E0F7                                      ENDM
 329+ E0F7
 330+ E0F7
 331+ E0F7 21 00 E0     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 332+ E0FA 11 37 00                             ld		de, c_KeyBoardLen               ;
 333+ E0FD 3E 00                                ld		a,0                             ;
 334+ E0FF CD C8 65                             call	memfill_dma                     ;
 335+ E102 C9                                   ret                                     ;
 336+ E103
 337+ E103
 338+ E103
 339+ E103 DD 21 37 E0  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 340+ E107 21 41 E0                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 341+ E10A 0E 08                                ld		c,8                             ; 8 ports to ready
 342+ E10C 11 00 E0                             ld      de,Keys                         ; ix = table of key states from raw read
 343+ E10F 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 344+ E110 DB FE                                in		a,($FE)							; read port to a
 345+ E112 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 346+ E115 DD 23                                inc     ix
 347+ E117 23                                   inc		hl                              ; and ready for next read
 348+ E118 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 349+ E11A 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 350+ E11B 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 351+ E11D FD 6F                                ld      iyl,a
 352+ E11F                                      ZeroA
 352+ E11F AF          >                        xor a
 353+ E120 C3 2D E1                             jp      .SetKey
 354+ E123 20 0B                                jr		nz,.SkipKeySet
 355+ E125 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 356+ E127 1A                                   ld      a,(de)                          ; get current keystate
 357+ E128 FE 02                                cp      2
 358+ E12A 28 02                                jr      z,.AlreadyHeld
 359+ E12C 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 360+ E12D 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 361+ E12E FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 362+ E130 13           .SkipKeySet:	        inc		de								; move to next key
 363+ E131 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 364+ E133 0D                                   dec     c                               ; thats one row of bits all processed
 365+ E134 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 366+ E136              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 366+ E136 01 3B 24    >            ld bc,$243B
 366+ E139 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 366+ E13B ED 79       >            out (c),a
 366+ E13D 04          >            inc b
 366+ E13E ED 78       >            in a,(c)
 367+ E140 32 3F E0                             ld      (RawKeys+8),a                   ; save to extended slot
 368+ E143 06 08                                ld      b,8
 369+ E145 21 28 E0                             ld      hl,Keys + VK_SEMI
 370+ E148 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 371+ E149 30 04                                jr      nc,.SetExtend0KeyPressed
 372+ E14B              .Extend0NotPressed:     ZeroA
 372+ E14B AF          >                        xor a
 373+ E14C C3 55 E1                             jp      .SetExtend0Key
 374+ E14F 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 375+ E150 FE 02                                cp      2
 376+ E152 28 02                                jr      z,.Extend0AlreadyHeld
 377+ E154 3C                                   inc     a
 378+ E155 77           .SetExtend0Key:         ld      (hl),a
 379+ E156 23           .Extend0AlreadyHeld:    inc     hl
 380+ E157 10 EF                                djnz    .ProcessExtend0
 381+ E159              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 381+ E159 01 3B 24    >            ld bc,$243B
 381+ E15C 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 381+ E15E ED 79       >            out (c),a
 381+ E160 04          >            inc b
 381+ E161 ED 78       >            in a,(c)
 382+ E163 32 40 E0                             ld      (RawKeys+9),a                      ; save to extended slot
 383+ E166 06 08                                ld      b,8
 384+ E168 21 30 E0                             ld      hl,Keys + VK_DELETE
 385+ E16B 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 386+ E16C 30 04                                jr      nc,.SetExtend1KeyPressed
 387+ E16E              .Extend1NotPressed:     ZeroA
 387+ E16E AF          >                        xor a
 388+ E16F C3 78 E1                             jp      .SetExtend1Key
 389+ E172 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 390+ E173 FE 02                                cp      2
 391+ E175 28 02                                jr      z,.Extend1AlreadyHeld
 392+ E177 3C                                   inc     a
 393+ E178 77           .SetExtend1Key:         ld      (hl),a
 394+ E179 23           .Extend1AlreadyHeld:    inc     hl
 395+ E17A 10 EF                                djnz    .ProcessExtend1
 396+ E17C C9                                   ret
 397+ E17D
 398+ E17D
 399+ E17D
 400+ E17D              GetKeyStateAddressDE:   MACRO
 401+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 402+ E17D ~                                    add     hl,a
 403+ E17D ~                                    ld      e,(hl)
 404+ E17D ~                                    inc     hl
 405+ E17D ~                                    ld      d,(hl)                          ; now de = address in keypress list
 406+ E17D                                      ENDM
 407+ E17D
 408+ E17D              GetKeyStateAddressHL:   MACRO
 409+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 410+ E17D ~                                    add     hl,a
 411+ E17D ~                                    ld      a,(hl)
 412+ E17D ~                                    inc     hl
 413+ E17D ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 414+ E17D ~                                    ld      l,a
 415+ E17D                                      ENDM
 416+ E17D
 417+ E17D
 418+ E17D              ;;old debug codeCurrentX            DB 0
 419+ E17D              ;;old debug codeCurrentY            DB 0
 420+ E17D              ;;old debug code
 421+ E17D              ;;old debug codedisplayKeyStatus:       xor         a
 422+ E17D              ;;old debug code                        ld          (CurrentX),a
 423+ E17D              ;;old debug code                        ld          hl,RawKeys
 424+ E17D              ;;old debug code                        ld          a,(hl)
 425+ E17D              ;;old debug code                        and         %00011111
 426+ E17D              ;;old debug code                        ld          b,5
 427+ E17D              ;;old debug code.displayLoop:           push        bc,,hl
 428+ E17D              ;;old debug code                        rra
 429+ E17D              ;;old debug code                        jr          c,.displayNoPress
 430+ E17D              ;;old debug code.displayPress:          push        af
 431+ E17D              ;;old debug code                        ld          a,(CurrentX)
 432+ E17D              ;;old debug code                        ld          e,a
 433+ E17D              ;;old debug code                        ld          a,(CurrentY)
 434+ E17D              ;;old debug code                        ld          d,a
 435+ E17D              ;;old debug code                        ld          a,'*'
 436+ E17D              ;;old debug code                        MMUSelectLayer1
 437+ E17D              ;;old debug code                        call        l1_print_char
 438+ E17D              ;;old debug code                        ld          a,(CurrentX)
 439+ E17D              ;;old debug code                        add         a,8
 440+ E17D              ;;old debug code                        ld          (CurrentX),a
 441+ E17D              ;;old debug code                        pop         af
 442+ E17D              ;;old debug code                        pop         bc,,hl
 443+ E17D              ;;old debug code                        djnz        .displayLoop
 444+ E17D              ;;old debug code                        ret
 445+ E17D              ;;old debug code.displayNoPress:        push        af
 446+ E17D              ;;old debug code                        ld          a,(CurrentX)
 447+ E17D              ;;old debug code                        ld          e,a
 448+ E17D              ;;old debug code                        ld          a,(CurrentY)
 449+ E17D              ;;old debug code                        ld          d,a
 450+ E17D              ;;old debug code                        ld          a,'O'
 451+ E17D              ;;old debug code                        MMUSelectLayer1
 452+ E17D              ;;old debug code                        call        l1_print_char
 453+ E17D              ;;old debug code                        ld          a,(CurrentX)
 454+ E17D              ;;old debug code                        add         a,8
 455+ E17D              ;;old debug code                        ld          (CurrentX),a
 456+ E17D              ;;old debug code                        pop         af
 457+ E17D              ;;old debug code                        pop         bc,,hl
 458+ E17D              ;;old debug code                        djnz        .displayLoop
 459+ E17D              ;;old debug code                        ret
 460+ E17D              ;;old debug code
 461+ E17D              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 462+ E17D              ;;old debug code                        cp  0
 463+ E17D              ;;old debug code                        jr      z,.displayNoUp
 464+ E17D              ;;old debug code                        cp  1
 465+ E17D              ;;old debug code                        jr      z,.displayUp
 466+ E17D              ;;old debug code.displayHeld:           ld      de,8*15
 467+ E17D              ;;old debug code                        ld      a,"*"
 468+ E17D              ;;old debug code                        MMUSelectLayer1
 469+ E17D              ;;old debug code                        call        l1_print_char
 470+ E17D              ;;old debug code                        ret
 471+ E17D              ;;old debug code.displayUp:             ld      de,8*15
 472+ E17D              ;;old debug code                        ld      a,"+"
 473+ E17D              ;;old debug code                        MMUSelectLayer1
 474+ E17D              ;;old debug code                        call        l1_print_char
 475+ E17D              ;;old debug code                        ret
 476+ E17D              ;;old debug code.displayNoUp:             ld      de,8*15
 477+ E17D              ;;old debug code                        ld      a,"O"
 478+ E17D              ;;old debug code                        MMUSelectLayer1
 479+ E17D              ;;old debug code                        call        l1_print_char
 480+ E17D              ;;old debug code                        ret
 481+ E17D              ;;old debug code
 482+ E17D
 483+ E17D
 484+ E17D              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 485+ E17D              ; it will have to be let go to reset of 0 and scan again
 486+ E17D              ; Deprecated as not used as yet
 487+ E17D              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 488+ E17D              ;;;;;;                        push    hl
 489+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 490+ E17D              ;;;;;;                        pop     hl                              ; get key address into hl
 491+ E17D              ;;;;;;                        push    hl
 492+ E17D              ;;;;;;                        ld      a,(hl)
 493+ E17D              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 494+ E17D              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 495+ E17D              ;;;;;;                        ret
 496+ E17D              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 497+ E17D              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 498+ E17D              ;;;;;;                        push    hl
 499+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 500+ E17D              ;;;;;;                        pop     hl
 501+ E17D              ;;;;;;                        push    hl
 502+ E17D              ;;;;;;                        ld      a,(hl)
 503+ E17D              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 504+ E17D              ;;;;;;                        pop     hl
 505+ E17D              ;;;;;;                        ret
 506+ E17D
 507+ E17D              ; Gets the current keystate of the c_Pressed Key in a register
 508+ E17D 21 00 E0     get_vkey_a_state:       ld      hl,Keys
 509+ E180 ED 31                                add     hl,a
 510+ E182 7E                                   ld      a,(hl)
 511+ E183 C9                                   ret
 512+ E184
 513+ E184 21 00 E0     is_vkey_held:           ld      hl,Keys
 514+ E187 ED 31                                add     hl,a
 515+ E189 7E                                   ld      a,(hl)
 516+ E18A E6 02                                and     Bit1Only
 517+ E18C C9                                   ret
 518+ E18D
 519+ E18D 21 00 E0     is_vkey_pressed:        ld      hl,Keys
 520+ E190 ED 31                                add     hl,a
 521+ E192 7E                                   ld      a,(hl)
 522+ E193 FE 01                                cp      1
 523+ E195 C9                                   ret
 524+ E196
 525+ E196              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 525+ E196 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 525+ E199 ED 31       >                        add     hl,a
 525+ E19B 7E          >                        ld      a,(hl)
 525+ E19C 23          >                        inc     hl
 525+ E19D 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 525+ E19E 6F          >                        ld      l,a
 526+ E19F 7E                                   ld      a,(hl)                          ; a = keystate
 527+ E1A0 C9                                   ret
 528+ E1A1
 529+ E1A1              ; sets they keystate of c pressed key in a register to 1 (pressed)
 530+ E1A1              ; This will be used by auto dock
 531+ E1A1              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 531+ E1A1 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 531+ E1A4 ED 31       >                        add     hl,a
 531+ E1A6 7E          >                        ld      a,(hl)
 531+ E1A7 23          >                        inc     hl
 531+ E1A8 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 531+ E1A9 6F          >                        ld      l,a
 532+ E1AA 3E 01                                ld      a,1
 533+ E1AC 77                                   ld      (hl),a
 534+ E1AD C9                                   ret
 535+ E1AE
 536+ E1AE              is_key_up_state:        GetKeyStateAddressHL
 536+ E1AE 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 536+ E1B1 ED 31       >                        add     hl,a
 536+ E1B3 7E          >                        ld      a,(hl)
 536+ E1B4 23          >                        inc     hl
 536+ E1B5 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 536+ E1B6 6F          >                        ld      l,a
 537+ E1B7 7E                                   ld      a,(hl)
 538+ E1B8 FE 00                                cp      0
 539+ E1BA C9                                   ret
 540+ E1BB
 541+ E1BB              ; returns z is set if c_ key is pressed
 542+ E1BB              is_key_pressed:         GetKeyStateAddressHL
 542+ E1BB 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 542+ E1BE ED 31       >                        add     hl,a
 542+ E1C0 7E          >                        ld      a,(hl)
 542+ E1C1 23          >                        inc     hl
 542+ E1C2 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 542+ E1C3 6F          >                        ld      l,a
 543+ E1C4 7E                                   ld      a,(hl)                          ; a = keystate
 544+ E1C5 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 545+ E1C7 C9                                   ret
 546+ E1C8
 547+ E1C8              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 548+ E1C8              is_key_held:            GetKeyStateAddressHL
 548+ E1C8 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 548+ E1CB ED 31       >                        add     hl,a
 548+ E1CD 7E          >                        ld      a,(hl)
 548+ E1CE 23          >                        inc     hl
 548+ E1CF 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 548+ E1D0 6F          >                        ld      l,a
 549+ E1D1 7E                                   ld      a,(hl)                          ; a = keystate
 550+ E1D2 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 551+ E1D4 C9                                   ret
 552+ E1D5
 553+ E1D5              ; checks to see if any key is pressed in the key table
 554+ E1D5 21 00 E0     is_any_key_pressed:     ld      hl,Keys
 555+ E1D8 01 28 00                             ld      bc,40
 556+ E1DB 3E 01                                ld      a,1
 557+ E1DD ED B1                                cpir                                    ; search for the value 1
 558+ E1DF 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 559+ E1E1                                      SetAFalse
 559+ E1E1 3E FF       >                        ld      a,$FF
 560+ E1E3 C9                                   ret
 561+ E1E4 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 562+ E1E6 91                                   sub     c                               ; so a = 40 - c to get to result
 563+ E1E7 C9                                   ret
 564+ E1E8
 565+ E1E8 21 00 E0     is_any_key_held:        ld      hl,Keys
 566+ E1EB 06 28                                ld      b,40
 567+ E1ED 0E 00                                ld      c,0
 568+ E1EF 7E           .KeyReadLoop:           ld      a,(hl)
 569+ E1F0 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 570+ E1F2 C2 FC E1                             jp      nz,.KeyPressed
 571+ E1F5 23                                   inc     hl
 572+ E1F6 0C                                   inc     c
 573+ E1F7 10 F6                                djnz    .KeyReadLoop
 574+ E1F9                                      SetAFalse
 574+ E1F9 3E FF       >                        ld      a,$FF
 575+ E1FB C9                                   ret
 576+ E1FC 79           .KeyPressed:            ld      a,c
 577+ E1FD C9                                   ret
 578+ E1FE
 579+ E1FE
 580+ E1FE 21 41 E0     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 581+ E201 06 08                                ld		b,8                             ; 8 ports to ready
 582+ E203 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 583+ E204 DB FE                                in		a,($FE)							; read port to a
 584+ E206 E6 1F                                and     %00011111
 585+ E208 FE 1F                                cp      %00011111
 586+ E20A 20 F2                                jr      nz ,WaitForNoKey
 587+ E20C 23                                   inc		hl                              ; and ready for next read
 588+ E20D 10 F4                                djnz    .PortReadLoop
 589+ E20F C9                                   ret
 590+ E210
 591+ E210 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 592+ E214 CD FE E1                             call    WaitForNoKey
 593+ E217 21 41 E0     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 594+ E21A 06 08                                ld		b,8                             ; 8 ports to ready
 595+ E21C 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 596+ E21D DB FE                                in		a,($FE)							; read port to a
 597+ E21F E6 1F                                and     %00011111
 598+ E221 FE 1F                                cp      %00011111
 599+ E223 C2 2D E2                             jp      nz,.WaitComplete
 600+ E226 C0                                   ret     nz
 601+ E227 23                                   inc		hl                              ; and ready for next read
 602+ E228 10 F2                                djnz    .PortReadLoop
 603+ E22A C3 17 E2                             jp      .waitKeyLoop
 604+ E22D E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 605+ E231 C9                                   ret
 606+ E232
 607+ E232
 608+ E232 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 609+ E250 00                                   DB  0               ; end of string marker as a safety
 610+ E251 00           InputLength             DB  0               ; Current String length
 611+ E252 00           InputCursor             DB  0               ; Current Cursor Position
 612+ E253 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 613+ E254 00           InputChanged            DB  0
 614+ E255 00           InsertMode              DB  0
 615+ E256              InputLimit              EQU 20
 616+ E256
 617+ E256 21 32 E2     keyboard_copy_input_to_de:  ld      hl,InputString
 618+ E259 3A 52 E2                                 ld      a,(InputCursor)
 619+ E25C FE 00                                    cp      0
 620+ E25E 28 05                                    jr      z,.NoString
 621+ E260 4F                                       ld      c,a
 622+ E261 06 00                                    ld      b,0
 623+ E263 ED B0                                    ldir
 624+ E265 3E 00        .NoString                   ld      a,0
 625+ E267 12                                       ld      (de),a
 626+ E268 C9                                       ret
 627+ E269
 628+ E269               ;Input routine logic
 629+ E269               ;Intialise input state
 630+ E269
 631+ E269              ; Scans the key pressed to determine if its an alpha, returns ascii code or 0 if not alpha
 632+ E269              ; Input a = key pressed, returns with carry set if no alpha else carry is clear
 633+ E269              isKeyAlpha:             JumpIfALTNusng  "A",   .NotAlpha
 633+ E269 FE 41       >                        cp      "A"
 633+ E26B DA 75 E2    >                        jp		c, .NotAlpha
 634+ E26E                                      JumpIfAGTENusng "Z"+1, .NotAlpha
 634+ E26E FE 5B       >                        cp     "Z"+1
 634+ E270 D2 75 E2    >                        jp		nc,.NotAlpha
 635+ E273                                      ClearCarryFlag
 635+ E273 B7          >                        or a
 636+ E274 C9                                   ret
 637+ E275              .NotAlpha               SetCarryFlag
 637+ E275 37          >                        scf
 638+ E276 C9                                   ret
 639+ E277
 640+ E277 3A 52 E2     InsertKeystroke:        ld      a,(InputCursor)                         ; Current Cursor position
 641+ E27A FE 1E                                cp      30                                      ; protect from buffer overflow
 642+ E27C C8                                   ret     z                                       ; .
 643+ E27D 21 32 E2                             ld      hl,InputString                          ; position hl to position in input string
 644+ E280 ED 31                                add     hl,a                                    ; .
 645+ E282 E5                                   push    hl                                      ; save current cursor position
 646+ E283 47                                   ld      b,a                                     ; as a quick optimisation
 647+ E284                                      JumpIfMemFalse InsertMode, .NoCopyNeeded        ; if we are in overtype mode skip copy
 647+ E284 3A 55 E2    >                        ld      a,(InsertMode)
 647+ E287 A7          >                        and     a
 647+ E288 C2 A8 E2    >                        jp      nz, .NoCopyNeeded
 648+ E28B 3A 51 E2                             ld      a,(InputLength)                         ; no need to shuffle string
 649+ E28E B8                                   cp      b                                       ; if we are at the end already
 650+ E28F 78                                   ld      a,b                                     ; .
 651+ E290 CA A8 E2                             jp      z,.NoCopyNeeded                         ; so we can behave like overtype mode
 652+ E293 11 4F E2                             ld      de,InputString+29                       ; now from the end of the string
 653+ E296 21 4E E2                             ld      hl,InputString+28                       ; .
 654+ E299 06 1D                                ld      b,29                                    ; for up to 29 characters
 655+ E29B 4F                                   ld      c,a                                     ; back to the current cursor position
 656+ E29C C5           .CopyLoop:              push    bc                                      ; save current position
 657+ E29D 7E                                   ld      a,(hl)                                  ; now suffle from left char to right char
 658+ E29E 12                                   ld      (de),a                                  ; .
 659+ E29F 2B                                   dec     hl                                      ; moving back one byte at a time
 660+ E2A0 1B                                   dec     de                                      ;
 661+ E2A1 05                                   dec     b                                       ; and reducing the current copy position
 662+ E2A2 79                                   ld      a,c                                     ; have we reached the input cursor pos
 663+ E2A3 B8                                   cp      b                                       ;
 664+ E2A4 C1                                   pop     bc
 665+ E2A5 C2 9C E2                             jp      nz,.CopyLoop
 666+ E2A8 E1           .NoCopyNeeded:          pop     hl
 667+ E2A9 3A B4 E2                             ld      a,(LastKeyPressed)
 668+ E2AC 77                                   ld      (hl),a
 669+ E2AD 21 51 E2                             ld      hl,InputLength
 670+ E2B0 34                                   inc     (hl)
 671+ E2B1 23                                   inc     hl                                      ;  to input cursor as a short cut to logic
 672+ E2B2 34                                   inc     (hl)
 673+ E2B3 C9                                   ret
 674+ E2B4
 675+ E2B4
 676+ E2B4              ; We won't have any auto repeat on input
 677+ E2B4 00           LastKeyPressed:         db 0
 678+ E2B5
 679+ E2B5              initInputText:          ZeroA
 679+ E2B5 AF          >                        xor a
 680+ E2B6 32 52 E2                             ld      (InputCursor),a
 681+ E2B9 32 B4 E2                             ld      (LastKeyPressed),a
 682+ E2BC 32 51 E2                             ld      (InputLength),a
 683+ E2BF                                      SetMemTrue  InsertMode
 683+ E2BF AF          >                        xor     a
 683+ E2C0 32 55 E2    >                        ld      (InsertMode),a
 684+ E2C3                                      SetMemFalse EnterPressed
 684+ E2C3 3E FF       >                        ld      a,$FF
 684+ E2C5 32 53 E2    >                        ld      (EnterPressed),a
 685+ E2C8                                      SetMemFalse InputChanged
 685+ E2C8 3E FF       >                        ld      a,$FF
 685+ E2CA 32 54 E2    >                        ld      (InputChanged),a
 686+ E2CD 21 32 E2                             ld      hl,InputString
 687+ E2D0 06 1E                                ld      b,30
 688+ E2D2 77           .wipeloop:              ld      (hl),a
 689+ E2D3 23                                   inc     hl
 690+ E2D4 10 FC                                djnz    .wipeloop
 691+ E2D6 C9                                   ret
 692+ E2D7
 693+ E2D7              ;;;InputNameV2:            call    is_any_key_pressed              ; scan for key states
 694+ E2D7              ;;;                        cp      $FF                             ; no key means we reset auto repeat
 695+ E2D7              ;;;                        jp      z,.NoKeyPressed                 ;
 696+ E2D7              ;;;.IsItLastKeyHeld:       ld      hl,LastKeyPressed               ; is it the same key as before
 697+ E2D7              ;;;                        cp      (hl)                            ;
 698+ E2D7              ;;;                        ret     z                               ; if so just ignore it to avoid auto repeat
 699+ E2D7              ;;;.SetNewAntiRepeat:      ld      (LastKeyPressed),a
 700+ E2D7              ;;;.CheckKeyPressed:       call    isKeyAlpha
 701+ E2D7              ;;;                        jp      nc,.AlphaKeyPressed
 702+ E2D7              ;;;.CheckSpaceKeyPressed:  cp      " "
 703+ E2D7              ;;;                        jp      z,.SpacePressed
 704+ E2D7              ;;;.CheckEnterPressed:     cp      ">"
 705+ E2D7              ;;;                        jp      z,.EnterPressed
 706+ E2D7              ;;;.CheckLeftPressed:      cp      "["
 707+ E2D7              ;;;                        jp      z,.LeftPressed
 708+ E2D7              ;;;.CheckRightPressed:     cp      "]"
 709+ E2D7              ;;;                        jp      z,.RightPressed
 710+ E2D7              ;;;.CheckDeletePressed:    cp      "#"
 711+ E2D7              ;;;                        jp      z,.DeletePressed
 712+ E2D7              ;;;.AnyOtherKeyIsIgnored:  ret
 713+ E2D7              ;;;.AlphaKeyPressed:       ld      a,(InputLength)
 714+ E2D7              ;;;                        JumpIfAGTENusng 30,.MaxInputReached
 715+ E2D7              ;;;.InsertKey:             call    InsertKeystroke
 716+ E2D7              ;;;                        ret
 717+ E2D7              ;;;.SpacePressed:          call    InsertKeystroke
 718+ E2D7              ;;;                        ret
 719+ E2D7              ;;;.EnterPressed:
 720+ E2D7              ;;;
 721+ E2D7              ;;;.LeftPressed:           ld      a,(InputCusor)
 722+ E2D7              ;;;                        JumpIfAIsZero, .MaxInputReached
 723+ E2D7              ;;;                        dec     a
 724+ E2D7              ;;;                        ld      (InputCursor),a
 725+ E2D7              ;;;                        ret
 726+ E2D7              ;;;.RightPressed:          ld      a,(InputLength)
 727+ E2D7              ;;;                        inc     a
 728+ E2D7              ;;;                        ld      b,a
 729+ E2D7              ;;;                        ld      a,(InputCursor)
 730+ E2D7              ;;;                        JumpIfMemGTENusng b, .MaxInputReached
 731+ E2D7              ;;;                        inc     a
 732+ E2D7              ;;;                        ld      (InputCursor),a
 733+ E2D7              ;;;                        ret
 734+ E2D7              ;;;.DeletaPressed:         ld      a,(InputCusor)
 735+ E2D7              ;;;                        ld      c,a
 736+ E2D7              ;;;                        JumpIfAisZero, .MaxInputReached
 737+ E2D7              ;;;                        ld      a,(InputLength)
 738+ E2D7              ;;;                        JumpIfAisZero, .MaxInputReached
 739+ E2D7              ;;;                        ld      de,InputString
 740+ E2D7              ;;;                        ld      hl,de
 741+ E2D7              ;;;                        inc     hl
 742+ E2D7              ;;;                        ld      a,(InputLength)                 ; copy backwards
 743+ E2D7              ;;;                        dec     c                               ; for string length - curretn cursor
 744+ E2D7              ;;;                        ld      c,a
 745+ E2D7              ;;;                        ld      b,0
 746+ E2D7              ;;;                        ldir
 747+ E2D7              ;;;                        ret
 748+ E2D7              ;;;GOTTOHERE
 749+ E2D7
 750+ E2D7
 751+ E2D7
 752+ E2D7 C9           .MaxInputReached:       ret ; will add a beep later
 753+ E2D8
 754+ E2D8
 755+ E2D8
 756+ E2D8
 757+ E2D8              .NoKeyPressed:          ZeroA
 757+ E2D8 AF          >                        xor a
 758+ E2D9 32 B4 E2                             ld      (LastKeyPressed),a              ; Clear last key pressed
 759+ E2DC
 760+ E2DC
 761+ E2DC              InputName:              SetMemFalse InputChanged
 761+ E2DC 3E FF       >                        ld      a,$FF
 761+ E2DE 32 54 E2    >                        ld      (InputChanged),a
 762+ E2E1 CD D5 E1                             call    is_any_key_pressed
 763+ E2E4 FE FF                                cp      $FF
 764+ E2E6 C8                                   ret     z
 765+ E2E7 4F           .KeyPressed:            ld      c,a
 766+ E2E8 3A 52 E2                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 767+ E2EB FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 768+ E2ED 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 769+ E2EF 21 BF E0                             ld      hl,ASCII_Map
 770+ E2F2 79                                   ld      a,c
 771+ E2F3 ED 31                                add     hl,a
 772+ E2F5 7E                                   ld      a,(hl)
 773+ E2F6 FE 41                                cp      "A"
 774+ E2F8 30 09                                jr      nc,.AlphaPressed
 775+ E2FA              ; CAPS and Symbol act as delete for now
 776+ E2FA FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 777+ E2FC 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 778+ E2FE FE 3E                                cp      ">"         ; ENTER
 779+ E300 28 17                                jr      z,.EnterPressed
 780+ E302 C9                                   ret
 781+ E303 47           .AlphaPressed:          ld      b,a
 782+ E304 3A 52 E2                             ld      a,(InputCursor)
 783+ E307 4F                                   ld      c,a
 784+ E308 21 32 E2                             ld      hl,InputString
 785+ E30B ED 31                                add     hl,a
 786+ E30D 78                                   ld      a,b
 787+ E30E 70                                   ld      (hl),b
 788+ E30F 79                                   ld      a,c
 789+ E310 21 52 E2                             ld      hl,InputCursor
 790+ E313 34                                   inc     (hl)
 791+ E314                                      SetMemTrue InputChanged
 791+ E314 AF          >                        xor     a
 791+ E315 32 54 E2    >                        ld      (InputChanged),a
 792+ E318 C9                                   ret
 793+ E319 3A 52 E2     .EnterPressed:          ld      a,(InputCursor)
 794+ E31C 21 32 E2                             ld      hl,InputString
 795+ E31F ED 31                                add     hl,a
 796+ E321                                      ZeroA
 796+ E321 AF          >                        xor a
 797+ E322 77                                   ld      (hl),a
 798+ E323                                      SetMemTrue EnterPressed
 798+ E323 AF          >                        xor     a
 798+ E324 32 53 E2    >                        ld      (EnterPressed),a
 799+ E327                                      SetMemTrue InputChanged
 799+ E327 AF          >                        xor     a
 799+ E328 32 54 E2    >                        ld      (InputChanged),a
 800+ E32B CD F7 E0                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 801+ E32E C9                                   ret
 802+ E32F 3A 52 E2     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 803+ E332 FE 00                                cp      0                       ; if input is zero length then can not delete
 804+ E334 C8                                   ret     z
 805+ E335 3D                                   dec     a                       ; move back one and update cursor pos
 806+ E336 32 52 E2                             ld      (InputCursor),a         ;
 807+ E339 21 32 E2                             ld      hl,InputString          ; now update end of line to null
 808+ E33C ED 31                                add     hl,a                    ; .
 809+ E33E                                      ZeroA                           ; .
 809+ E33E AF          >                        xor a
 810+ E33F 77                                   ld      (hl),a                  ; .
 811+ E340                                      SetMemTrue InputChanged
 811+ E340 AF          >                        xor     a
 811+ E341 32 54 E2    >                        ld      (InputChanged),a
 812+ E344 C9                                   ret
 813+ E345
 814+ E345              TargetMissileTest:      AnyMissilesLeft
 814+ E345 3A FB 67    >                        ld      a,(NbrMissiles)
 814+ E348 A7          >                        and     a
 815+ E349                                      JumpIfZero      .ClearTargetting
 815+ E349 CA 60 E3    >                        jp	z,.ClearTargetting
 816+ E34C                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 816+ E34C 3A EE 69    >                        ld      a,(MissileTargettingFlag)
 816+ E34F E6 80       >                        and     $80
 817+ E351 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 818+ E352 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 819+ E354 CD BB E1                             call            is_key_pressed              ; .
 820+ E357 C0                                   ret             nz                          ; .
 821+ E358 3A EE 69     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 822+ E35B                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 822+ E35B FE FF       >                        cp     StageMissileNotTargeting
 822+ E35D CA 66 E3    >                        jp      z,.SetTargetting
 823+ E360              .ClearTargetting:       ClearMissileTargetting
 823+ E360 3E FF       >                        ld      a,StageMissileNotTargeting
 823+ E362 32 EE 69    >                        ld      (MissileTargettingFlag),a
 824+ E365 C9                                   ret
 825+ E366              .SetTargetting:         SetMissileTargetting
 825+ E366 3E FE       >                        ld      a,StageMissileTargeting
 825+ E368 32 EE 69    >                        ld      (MissileTargettingFlag),a
 826+ E36B C9                                   ret
 827+ E36C
 828+ E36C AF           MovementKeyTest:        xor     a
 829+ E36D 32 57 69                             ld      (CursorKeysPressed),a
 830+ E370 3A 59 67                             ld      a,(MenuIdMax)
 831+ E373 E6 FC                                and     $FC
 832+ E375 20 26                                jr      nz,CursorKeys
 833+ E377 2A 57 E0     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 834+ E37A 7E                                   ld      a,(hl)
 835+ E37B                                      JumpIfAIsZero ScanDiveKey
 835+ E37B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 835+ E37C CA 8A E3    >                        jp	    z, ScanDiveKey
 836+ E37F 3A 57 69                             ld      a,(CursorKeysPressed)
 837+ E382 F6 80                                or      CursorClimb
 838+ E384 32 57 69                             ld      (CursorKeysPressed),a
 839+ E387 C3 C0 E3                             jp      ScanLeftKey
 840+ E38A 2A 55 E0     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 841+ E38D 7E                                   ld      a,(hl)
 842+ E38E                                      JumpIfAIsZero ScanLeftKey
 842+ E38E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 842+ E38F CA C0 E3    >                        jp	    z, ScanLeftKey
 843+ E392 3A 57 69                             ld      a,(CursorKeysPressed)
 844+ E395 F6 40                                or      CursorDive
 845+ E397 32 57 69                             ld      (CursorKeysPressed),a
 846+ E39A C3 C0 E3                             jp      ScanLeftKey
 847+ E39D 2A 93 E0     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 848+ E3A0 7E                                   ld      a,(hl)
 849+ E3A1                                      JumpIfAIsZero ScanCursorDownKey
 849+ E3A1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 849+ E3A2 CA B0 E3    >                        jp	    z, ScanCursorDownKey
 850+ E3A5 3A 57 69                             ld      a,(CursorKeysPressed)
 851+ E3A8 F6 80                                or      CursorClimb
 852+ E3AA 32 57 69                             ld      (CursorKeysPressed),a
 853+ E3AD C3 C0 E3                             jp      ScanLeftKey
 854+ E3B0 2A 95 E0     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 855+ E3B3 7E                                   ld      a,(hl)
 856+ E3B4                                      JumpIfAIsZero ScanLeftKey
 856+ E3B4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 856+ E3B5 CA C0 E3    >                        jp	    z, ScanLeftKey
 857+ E3B8 3A 57 69                             ld      a,(CursorKeysPressed)
 858+ E3BB F6 40                                or      CursorDive
 859+ E3BD 32 57 69                             ld      (CursorKeysPressed),a
 860+ E3C0 2A 51 E0     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 861+ E3C3 7E                                   ld      a,(hl)
 862+ E3C4                                      JumpIfAIsZero ScanRightKey
 862+ E3C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 862+ E3C5 CA D1 E3    >                        jp	    z, ScanRightKey
 863+ E3C8 3A 57 69                             ld      a,(CursorKeysPressed)
 864+ E3CB F6 20                                or      CursorLeft
 865+ E3CD 32 57 69                             ld      (CursorKeysPressed),a
 866+ E3D0 C9                                   ret
 867+ E3D1 2A 53 E0     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 868+ E3D4 7E                                   ld      a,(hl)
 869+ E3D5                                      JumpIfAIsZero ScanHomeKey
 869+ E3D5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 869+ E3D6 CA E2 E3    >                        jp	    z, ScanHomeKey
 870+ E3D9 3A 57 69                             ld      a,(CursorKeysPressed)
 871+ E3DC F6 10                                or      CursorRight
 872+ E3DE 32 57 69                             ld      (CursorKeysPressed),a
 873+ E3E1 C9                                   ret
 874+ E3E2 2A 71 E0     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 875+ E3E5 7E                                   ld      a,(hl)
 876+ E3E6                                      JumpIfAIsZero ScanRecentreKey
 876+ E3E6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 876+ E3E7 CA F3 E3    >                        jp	    z, ScanRecentreKey
 877+ E3EA 3A 57 69                             ld      a,(CursorKeysPressed)
 878+ E3ED F6 08                                or      CursorHome
 879+ E3EF 32 57 69                             ld      (CursorKeysPressed),a
 880+ E3F2 C9                                   ret
 881+ E3F3 2A 8D E0     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 882+ E3F6 7E                                   ld      a,(hl)
 883+ E3F7                                      ReturnIfAIsZero
 883+ E3F7 A7          >                        and     a
 883+ E3F8 C8          >                        ret     z
 884+ E3F9 3A 57 69                             ld      a,(CursorKeysPressed)
 885+ E3FC F6 04                                or      CursorRecenter
 886+ E3FE 32 57 69                             ld      (CursorKeysPressed),a
 887+ E401 C9                                   ret
 888+ E402
 889+ E402
# file closed: ../../Hardware/keyboard.asm
 786  E402                                  DISPLAY "Keyboard ",BankKeyboard," - Bytes free ",/D, $2000 - ($-KeyboardAddr), " - BankKeyboard"
 787  E402                                  ASSERT $-KeyboardAddr <8912, Bank code leaks over 8K boundary
 788  E402               ; Bank 102  -----------------------------------------------------------------------------------------------------------------------
 789  E402                                  SLOT    MathsBankedFnsAddr
 790  E402                                  PAGE    BankMathsBankedFns
 791  E402                                  ORG     MathsBankedFnsAddr,BankMathsBankedFns
 792  0000                                  INCLUDE "../../Maths/MathsBankedFns.asm"
# file opened: ../../Maths/MathsBankedFns.asm
   1+ 0000              ;------------------------------------------------------------
   2+ 0000              ; HL Signed = HL - DE
   3+ 0000 7A           SubDEfromHLSigned:      ld      a,d
   4+ 0001 EE 80                                xor     $80
   5+ 0003 57                                   ld      d,a
   6+ 0004              ;------------------------------------------------------------
   7+ 0004              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
   8+ 0004 7C           AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
   9+ 0005 E6 80                                and     $80                         ; hl = abs (hl)
  10+ 0007 47                                   ld      b,a
  11+ 0008 7C                                   ld      a,h
  12+ 0009 E6 7F                                and     $7F
  13+ 000B 67                                   ld      h,a
  14+ 000C 7A                                   ld      a,d                         ; extract d sign to c
  15+ 000D E6 80                                and     $80                         ; de = abs (de)
  16+ 000F 4F                                   ld      c,a
  17+ 0010 7A                                   ld      a,d
  18+ 0011 E6 7F                                and     $7F
  19+ 0013 57                                   ld      d,a
  20+ 0014 78                                   ld      a,b
  21+ 0015 A9                                   xor     c
  22+ 0016 C2 1E 00                             jp      nz,.OppositeSigns
  23+ 0019 19           .SameSigns              add     hl,de                       ; same signs so just add
  24+ 001A 78                                   ld      a,b                         ; and bring in the sign from b
  25+ 001B B4                                   or      h                           ; note this has to be 15 bit result
  26+ 001C 67                                   ld      h,a                         ; but we can assume that
  27+ 001D C9                                   ret
  28+ 001E              .OppositeSigns:         ClearCarryFlag
  28+ 001E B7          >                        or a
  29+ 001F ED 52                                sbc     hl,de
  30+ 0021 38 04                                jr      c,.OppsiteSignInvert
  31+ 0023 78           .OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  32+ 0024 B4                                   or      h
  33+ 0025 67                                   ld      h,a                         ; set the previou sign value
  34+ 0026 C9                                   ret
  35+ 0027              .OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  35+ 0027 AF          >                    xor a
  35+ 0028 95          >                    sub l
  35+ 0029 6F          >                    ld l,a
  35+ 002A 9F          >                    sbc a,a
  35+ 002B 94          >                    sub h
  35+ 002C 67          >                    ld h,a
  36+ 002D 78                                   ld      a,b
  37+ 002E EE 80                                xor     SignOnly8Bit               ; flip sign bit
  38+ 0030 B4                                   or      h
  39+ 0031 67                                   ld      h,a                         ; recover sign
  40+ 0032 C9                                   ret
  41+ 0033
  42+ 0033              ;------------------------------------------------------------
  43+ 0033              ; BHL = BHL+CDE where signs are held in B and C
  44+ 0033 78           ADDHLDESignBC:          ld      a,b
  45+ 0034 E6 80                                and     SignOnly8Bit
  46+ 0036 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  47+ 0037                                      JumpIfNegative .ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  47+ 0037 FA 45 00    >                        jp		m, .ADDHLDEsBCOppSGN
  48+ 003A 78           .ADDHLDEsBCSameSigns:   ld      a,b
  49+ 003B B1                                   or      c
  50+ 003C                                      JumpIfNegative .ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  50+ 003C FA 41 00    >                        jp		m, .ADDHLDEsBCSameNeg
  51+ 003F 19                                   add     hl,de                       ; both positive so a will already be zero
  52+ 0040 C9                                   ret
  53+ 0041 19           .ADDHLDEsBCSameNeg:      add     hl,de
  54+ 0042 78                                   ld      a,b
  55+ 0043                                      DISPLAY "TODO: don't bother with overflow for now"
  56+ 0043 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  57+ 0044 C9                                   ret
  58+ 0045              .ADDHLDEsBCOppSGN:      ClearCarryFlag
  58+ 0045 B7          >                        or a
  59+ 0046 ED 52                                sbc     hl,de
  60+ 0048 38 02                                jr      c,.ADDHLDEsBCOppInvert
  61+ 004A 78           .ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  62+ 004B C9                                   ret
  63+ 004C              .ADDHLDEsBCOppInvert:   NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  63+ 004C AF          >                    xor a
  63+ 004D 95          >                    sub l
  63+ 004E 6F          >                    ld l,a
  63+ 004F 9F          >                    sbc a,a
  63+ 0050 94          >                    sub h
  63+ 0051 67          >                    ld h,a
  64+ 0052 78                                   ld      a,b
  65+ 0053 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  66+ 0055 C9                                   ret
  67+ 0056                  DISPLAY "TODO: Check if ADDHLDESignedV4 is deprecated by AddDEtoHLSigned"
  68+ 0056 7C           ADDHLDESignedV4:        ld      a,h
  69+ 0057 E6 80                                and     SignOnly8Bit
  70+ 0059 47                                   ld      b,a                         ;save sign bit in b
  71+ 005A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  72+ 005B                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  72+ 005B FA 73 00    >                        jp		m, .ADDHLDEOppSGN
  73+ 005E 78           .ADDHLDESameSigns:      ld      a,b
  74+ 005F B2                                   or      d
  75+ 0060                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  75+ 0060 FA 65 00    >                        jp		m, .ADDHLDESameNeg
  76+ 0063 19                                   add     hl,de
  77+ 0064 C9                                   ret
  78+ 0065 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  79+ 0066 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  80+ 0068 67                                   ld      h,a
  81+ 0069 7A                                   ld      a,d
  82+ 006A E6 7F                                and     SignMask8Bit
  83+ 006C 57                                   ld      d,a
  84+ 006D 19                                   add     hl,de
  85+ 006E 3E 80                                ld      a,SignOnly8Bit
  86+ 0070                                      DISPLAY "TODO:  dont bother with overflow for now"
  87+ 0070 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  88+ 0071 67                                   ld      h,a
  89+ 0072 C9                                   ret
  90+ 0073 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  91+ 0074 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  92+ 0076 67                                   ld      h,a
  93+ 0077 7A                                   ld      a,d
  94+ 0078 E6 7F                                and     SignMask8Bit
  95+ 007A 57                                   ld      d,a
  96+ 007B                                      ClearCarryFlag
  96+ 007B B7          >                        or a
  97+ 007C ED 52                                sbc     hl,de
  98+ 007E 38 04                                jr      c,.ADDHLDEOppInvert
  99+ 0080 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 100+ 0081 B4                                   or      h
 101+ 0082 67                                   ld      h,a                         ; set the previou sign value
 102+ 0083 C9                                   ret
 103+ 0084              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 103+ 0084 AF          >                    xor a
 103+ 0085 95          >                    sub l
 103+ 0086 6F          >                    ld l,a
 103+ 0087 9F          >                    sbc a,a
 103+ 0088 94          >                    sub h
 103+ 0089 67          >                    ld h,a
 104+ 008A 78                                   ld      a,b
 105+ 008B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 106+ 008D B4                                   or      h
 107+ 008E 67                                   ld      h,a                         ; recover sign
 108+ 008F C9                                   ret
 109+ 0090
 110+ 0090              ;------------------------------------------------------------
 111+ 0090              ; extension to AddBCHtoDELsigned
 112+ 0090              ; takes ix as the address of the values to load into DEL
 113+ 0090              ;       iy as the address of the values to load into BCH
 114+ 0090 DD 6E 00     AddAtIXtoAtIY24Signed:  ld      l,(ix+0)            ; del = ix (sign hi lo)
 115+ 0093 DD 5E 01                             ld      e,(ix+1)            ; .
 116+ 0096 DD 56 02                             ld      d,(ix+2)            ; .
 117+ 0099 FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 118+ 009C FD 4E 01                             ld      c,(iy+1)            ; .
 119+ 009F FD 46 02                             ld      b,(iy+2)            ; .
 120+ 00A2 FD E5                                push    iy                  ; save iy as add function changes is
 121+ 00A4 CD 14 01                             call    AddBCHtoDELsigned   ; Perform del += bch
 122+ 00A7 FD E1                                pop     iy                  ; get iy back
 123+ 00A9 DD 75 00                             ld      (ix+0),l            ; put result into (ix)
 124+ 00AC DD 73 01                             ld      (ix+1),e            ; .
 125+ 00AF DD 72 02                             ld      (ix+2),d            ; .
 126+ 00B2 C9                                   ret
 127+ 00B3              ;------------------------------------------------------------
 128+ 00B3              ; DEL = @IX + @IY 24 bit signed
 129+ 00B3              AddDELequAtIXPlusIY24Signed:
 130+ 00B3 DD 6E 00                             ld      l,(ix+0)            ; del = ix (sign hi lo)
 131+ 00B6 DD 5E 01                             ld      e,(ix+1)            ; .
 132+ 00B9 DD 56 02                             ld      d,(ix+2)            ; .
 133+ 00BC FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 134+ 00BF FD 4E 01                             ld      c,(iy+1)            ; .
 135+ 00C2 FD 46 02                             ld      b,(iy+2)            ; .
 136+ 00C5 FD E5                                push    iy                  ; save iy as add function changes is
 137+ 00C7 CD 14 01                             call    AddBCHtoDELsigned   ; Perform del += bch
 138+ 00CA FD E1                                pop     iy                  ; get iy back
 139+ 00CC C9                                   ret
 140+ 00CD              ;------------------------------------------------------------
 141+ 00CD              ; extension to AddBCHtoDELsigned
 142+ 00CD              ; takes ix as the address of the values to load into DEL
 143+ 00CD              ;       iy as the address of the values to load into BCH
 144+ 00CD              ; subtracts iy from ix putting result in ix
 145+ 00CD              ; DEL = @IX - @IY 24 bit signed
 146+ 00CD DD 6E 00     SubAtIXtoAtIY24Signed:  ld      l,(ix+0)            ; del = ix (sign hi lo)
 147+ 00D0 DD 5E 01                             ld      e,(ix+1)            ; .
 148+ 00D3 DD 56 02                             ld      d,(ix+2)            ; .
 149+ 00D6 FD 66 00                             ld      h,(iy+0)            ; bch = -iy (sign, hi, lo)
 150+ 00D9 FD 4E 01                             ld      c,(iy+1)            ; .
 151+ 00DC FD 7E 02                             ld      a,(iy+2)            ; .
 152+ 00DF EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 153+ 00E1 47                                   ld      b,a                 ; .
 154+ 00E2 FD E5                                push    iy                  ; save iy as add function changes is
 155+ 00E4 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 156+ 00E7 FD E1                                pop     iy                  ; get iy back
 157+ 00E9 DD 75 00                             ld      (ix+0),l            ; put result into (ix)
 158+ 00EC DD 73 01                             ld      (ix+1),e            ; .
 159+ 00EF DD 72 02                             ld      (ix+2),d            ; .
 160+ 00F2 C9                                   ret
 161+ 00F3              ;------------------------------------------------------------
 162+ 00F3              ; extension to AddBCHtoDELsigned
 163+ 00F3              ; takes ix as the address of the values to load into DEL
 164+ 00F3              ;       iy as the address of the values to load into BCH
 165+ 00F3              ; subtracts iy from ix leaving result in del
 166+ 00F3              SubDELequAtIXMinusAtIY24Signed:
 167+ 00F3 DD 6E 00                             ld      l,(ix+0)            ; del = ix (sign hi lo)
 168+ 00F6 DD 5E 01                             ld      e,(ix+1)            ; .
 169+ 00F9 DD 56 02                             ld      d,(ix+2)            ; .
 170+ 00FC FD 66 00                             ld      h,(iy+0)            ; bch = -iy (sign, hi, lo)
 171+ 00FF FD 4E 01                             ld      c,(iy+1)            ; .
 172+ 0102 FD 7E 02                             ld      a,(iy+2)            ; .
 173+ 0105 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 174+ 0107 47                                   ld      b,a                 ; .
 175+ 0108 FD E5                                push    iy                  ; save iy as add function changes is
 176+ 010A CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 177+ 010D FD E1                                pop     iy                  ; get iy back
 178+ 010F C9                                   ret
 179+ 0110              ;------------------------------------------------------------
 180+ 0110              ;tested mathstestsun2
 181+ 0110              ; DEL = DEL - BCH signed, uses BC, DE, HL, IY, A
 182+ 0110              ; Just flips sign on b then performs add
 183+ 0110 78           SubBCHfromDELsigned:    ld      a,b
 184+ 0111 EE 80                                xor     SignOnly8Bit
 185+ 0113 47                                   ld      b,a
 186+ 0114              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 187+ 0114 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 188+ 0115 AA                                   xor     d                   ; .
 189+ 0116 E6 80                                and     SignOnly8Bit        ; .
 190+ 0118 20 19                                jr      nz,.SignDifferent   ; .
 191+ 011A 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 192+ 011B E6 80                                and     SignOnly8Bit        ; so store it in iyh
 193+ 011D FD 67                                ld      iyh,a               ;
 194+ 011F 78                                   ld      a,b                 ; bch = abs bch
 195+ 0120 E6 7F                                and     SignMask8Bit        ; .
 196+ 0122 47                                   ld      b,a                 ; .
 197+ 0123 7A                                   ld      a,d                 ; del = abs del
 198+ 0124 E6 7F                                and     SignMask8Bit        ; .
 199+ 0126 57                                   ld      d,a                 ; .
 200+ 0127 7C                                   ld      a,h                 ; l = h + l
 201+ 0128 85                                   add     l                   ; .
 202+ 0129 6F                                   ld      l,a                 ; .
 203+ 012A 79                                   ld      a,c                 ; e = e + c + carry
 204+ 012B 8B                                   adc     e                   ; .
 205+ 012C 5F                                   ld      e,a                 ; .
 206+ 012D 78                                   ld      a,b                 ; d = b + d + carry (signed)
 207+ 012E 8A                                   adc     d                   ;
 208+ 012F FD B4                                or      iyh                 ; d = or back in sign bit
 209+ 0131 57                                   ld      d,a                 ;
 210+ 0132 C9                                   ret                         ; done
 211+ 0133 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 212+ 0134 FD 67                                ld      iyh,a               ; iyh = b sign
 213+ 0136 E6 7F                                and     SignMask8Bit        ; .
 214+ 0138 47                                   ld      b,a                 ; .
 215+ 0139 7A                                   ld      a,d                 ; del = abs del
 216+ 013A FD 6F                                ld      iyl,a               ; iyl = d sign
 217+ 013C E6 7F                                and     SignMask8Bit        ; .
 218+ 013E 57                                   ld      d,a                 ; .
 219+ 013F E5                                   push    hl                  ; save hl
 220+ 0140 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 221+ 0142 ED 52                                sbc     hl,de               ;
 222+ 0144 E1                                   pop     hl                  ;
 223+ 0145 38 0E                                jr      c,.BCHltDEL
 224+ 0147 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 225+ 0149 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 226+ 014A                                      JumpIfALTNusng l,.BCHltDEL
 226+ 014A BD          >                        cp      l
 226+ 014B DA 55 01    >                        jp		c, .BCHltDEL
 227+ 014E 20 15                                jr      nz,.DELltBCH
 228+ 0150              ; The same so its just zero
 229+ 0150 AF           .BCHeqDEL:              xor     a                  ; its just zero
 230+ 0151 57                                   ld      d,a                ; .
 231+ 0152 5F                                   ld      e,a                ; .
 232+ 0153 6F                                   ld      l,a                ; .
 233+ 0154 C9                                   ret                        ; .
 234+ 0155              ;BCH is less than DEL so its DEL - BCH the sort out sign
 235+ 0155 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 236+ 0156 94                                   sub     h                  ; .                              ;   01D70F DEL
 237+ 0157 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 238+ 0158 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 239+ 0159 99                                   sbc     c                  ; .                              ;
 240+ 015A 5F                                   ld      e,a                ; .                              ;
 241+ 015B 7A                                   ld      a,d                ; d = d - b - carry              ;
 242+ 015C 98                                   sbc     b                  ; .                              ;
 243+ 015D 57                                   ld      d,a                ; .                              ;
 244+ 015E FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 245+ 0160 E6 80                                and     SignOnly8Bit       ;
 246+ 0162 B2                                   or      d                  ;
 247+ 0163 57                                   ld      d,a                ;
 248+ 0164 C9                                   ret
 249+ 0165 7C           .DELltBCH:              ld      a,h                ; l = h - l
 250+ 0166 95                                   sub     l                  ;
 251+ 0167 6F                                   ld      l,a                ;
 252+ 0168 79                                   ld      a,c                ; e = c - e - carry
 253+ 0169 9B                                   sbc     e                  ;
 254+ 016A 5F                                   ld      e,a                ;
 255+ 016B 78                                   ld      a,b                ; d = b - d - carry
 256+ 016C 9A                                   sbc     d                  ;
 257+ 016D 57                                   ld      d,a                ;
 258+ 016E FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 259+ 0170 E6 80                                and     SignOnly8Bit       ;
 260+ 0172 B2                                   or      d                  ;
 261+ 0173 57                                   ld      d,a                ;
 262+ 0174 C9                                   ret
 263+ 0175              ;-----------------------------------------------------------------------------------------------------------
 264+ 0175              ; Subtract Functions
 265+ 0175              ;...subtract routines
 266+ 0175              ; we could cheat, flip the sign of DE and just add but its not very optimised
 267+ 0175 7C           subHLDES15:             ld      a,h
 268+ 0176 E6 80                                and     SignOnly8Bit
 269+ 0178 47                                   ld      b,a                         ;save sign bit in b
 270+ 0179 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 271+ 017A                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 271+ 017A FA A8 01    >                        jp		m, .SUBHLDEOppSGN
 272+ 017D 78           .SUBHLDESameSigns:      ld      a,b
 273+ 017E B2                                   or      d
 274+ 017F                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 274+ 017F FA 89 01    >                        jp		m, .SUBHLDESameNeg
 275+ 0182                                      ClearCarryFlag
 275+ 0182 B7          >                        or a
 276+ 0183 ED 52                                sbc     hl,de
 277+ 0185                                      JumpIfNegative .SUBHLDESameOvrFlw
 277+ 0185 FA 9C 01    >                        jp		m, .SUBHLDESameOvrFlw
 278+ 0188 C9                                   ret
 279+ 0189 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 280+ 018A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 281+ 018C 67                                   ld      h,a
 282+ 018D 7A                                   ld      a,d
 283+ 018E E6 7F                                and     SignMask8Bit
 284+ 0190 57                                   ld      d,a
 285+ 0191                                      ClearCarryFlag
 285+ 0191 B7          >                        or a
 286+ 0192 ED 52                                sbc     hl,de
 287+ 0194                                      JumpIfNegative .SUBHLDESameOvrFlw
 287+ 0194 FA 9C 01    >                        jp		m, .SUBHLDESameOvrFlw
 288+ 0197                                                          DISPLAY "TODO:  don't bother with overflow for now"
 289+ 0197 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 290+ 0198 F6 80                                or      SignOnly8Bit
 291+ 019A 67                                   ld      h,a
 292+ 019B C9                                   ret
 293+ 019C              .SUBHLDESameOvrFlw:     NegHL
 293+ 019C AF          >                    xor a
 293+ 019D 95          >                    sub l
 293+ 019E 6F          >                    ld l,a
 293+ 019F 9F          >                    sbc a,a
 293+ 01A0 94          >                    sub h
 293+ 01A1 67          >                    ld h,a
 294+ 01A2 78                                   ld      a,b
 295+ 01A3 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 296+ 01A5 B4                                   or      h
 297+ 01A6 67                                   ld      h,a                         ; recover sign
 298+ 01A7 C9                                   ret
 299+ 01A8 B7           .SUBHLDEOppSGN:         or      a
 300+ 01A9 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 301+ 01AA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 302+ 01AC 67                                   ld      h,a
 303+ 01AD 7A                                   ld      a,d
 304+ 01AE E6 7F                                and     SignMask8Bit
 305+ 01B0 57                                   ld      d,a
 306+ 01B1 19                                   add     hl,de
 307+ 01B2 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 308+ 01B3 B4                                   or      h
 309+ 01B4 67                                   ld      h,a                         ; set the previou sign value
 310+ 01B5 C9                                   ret
 311+ 01B6              ;------------------------------------------------------------------------------------------------
 312+ 01B6              ;-- checks to see if a postition is in range of another, e.g. missile hit
 313+ 01B6              ;-- ix = ship position    - pointer to xyz vector as 3 bytes per element
 314+ 01B6              ;-- oy = misisle position - pointer to xyz vector as 3 bytes per element
 315+ 01B6              ;-- sets carry if in blast range, else not carry
 316+ 01B6              ;-- blast range will always be an 8 bit value
 317+ 01B6              CheckInCollisionRange:
 318+ 01B6 CD F3 00     .CheckXDistance:        call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 319+ 01B9 7A                                   ld      a,d                 ; check abs distance
 320+ 01BA E6 7F                                and     SignMask8Bit        ; if high bytes are set
 321+ 01BC B3                                   or      e                   ; then no hit
 322+ 01BD C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 323+ 01C0 7D                                   ld      a,l
 324+ 01C1                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 324+ 01C1 21 62 68    >                        ld      hl,CurrentMissileBlastRange
 324+ 01C4 BE          >                        cp      (hl)
 324+ 01C5 D2 FC 01    >                        jp		nc,.NoCollision
 325+ 01C8 01 03 00     .CheckYDistance:        ld      bc,3                ; move ix and iy
 326+ 01CB DD 09                                add     ix,bc               ; on 3 bytes
 327+ 01CD FD 09                                add     iy,bc               ;
 328+ 01CF CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 329+ 01D2 7A                                   ld      a,d                 ; check abs distance
 330+ 01D3 E6 7F                                and     SignMask8Bit        ; if high bytes are set
 331+ 01D5 B3                                   or      e                   ; then no hit
 332+ 01D6 C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 333+ 01D9 7D                                   ld      a,l
 334+ 01DA                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 334+ 01DA 21 62 68    >                        ld      hl,CurrentMissileBlastRange
 334+ 01DD BE          >                        cp      (hl)
 334+ 01DE D2 FC 01    >                        jp		nc,.NoCollision
 335+ 01E1 01 03 00     .CheckZDistance:        ld      bc,3                ; move ix and iy
 336+ 01E4 DD 09                                add     ix,bc               ; on 3 bytes
 337+ 01E6 FD 09                                add     iy,bc               ;
 338+ 01E8 CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 339+ 01EB 7A                                   ld      a,d                 ; check abs distance
 340+ 01EC E6 7F                                and     SignMask8Bit        ; if high bytes are set
 341+ 01EE B3                                   or      e                   ; then no hit
 342+ 01EF C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 343+ 01F2 7D                                   ld      a,l
 344+ 01F3                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 344+ 01F3 21 62 68    >                        ld      hl,CurrentMissileBlastRange
 344+ 01F6 BE          >                        cp      (hl)
 344+ 01F7 D2 FC 01    >                        jp		nc,.NoCollision
 345+ 01FA              .CollisionDetected:     SetCarryFlag                ; collision in blast range
 345+ 01FA 37          >                        scf
 346+ 01FB C9                                   ret
 347+ 01FC              .NoCollision:           ClearCarryFlag              ; no collision in blast range
 347+ 01FC B7          >                        or a
 348+ 01FD C9                                   ret
 349+ 01FE
 350+ 01FE              ;------------------------------------------------------------------------------------------------
 351+ 01FE              ; -- Checks if 24 bit value at ix > iy and returns ix pointing to the correct value
 352+ 01FE              ; -- Sets carryflag if a swap occured as part of the Jump If A LessThan check
 353+ 01FE FD 7E 02     CompareAtIXtoIYABS:     ld      a,(iy+2)
 354+ 0201 E6 7F        .CheckSignByte:         and     SignMask8Bit
 355+ 0203 47                                   ld      b,a
 356+ 0204 DD 7E 02                             ld      a,(ix+2)
 357+ 0207 E6 7F                                and     SignMask8Bit
 358+ 0209                                      JumpIfALTNusng b,.SwapIXIY
 358+ 0209 B8          >                        cp      b
 358+ 020A DA 22 02    >                        jp		c, .SwapIXIY
 359+ 020D DD 7E 01     .CheckHighByte:         ld      a,(ix+1)
 360+ 0210 FD BE 01                             cp      (iy+1)
 361+ 0213                                      JumpIfALTNusng b,.SwapIXIY
 361+ 0213 B8          >                        cp      b
 361+ 0214 DA 22 02    >                        jp		c, .SwapIXIY
 362+ 0217 DD 7E 00     .CheckLowByte:          ld      a,(ix+0)
 363+ 021A FD BE 00                             cp      (iy+0)
 364+ 021D                                      JumpIfALTNusng b,.SwapIXIY
 364+ 021D B8          >                        cp      b
 364+ 021E DA 22 02    >                        jp		c, .SwapIXIY
 365+ 0221 C9                                   ret
 366+ 0222 DD E5        .SwapIXIY               push    ix                  ; swap over ix and iy
 367+ 0224 FD E5                                push    iy                  ; this means that ix is always larger of two or ix if they are the same value
 368+ 0226 DD E1                                pop     ix                  ; iy is a smaller of the two values, or untouched in the same value
 369+ 0228 FD E1                                pop     iy                  ; Thsi means we can do a compare and pick which one we preferr after, carry says if swap occured if we need that
 370+ 022A C9                                   ret
 371+ 022B              ;------------------------------------------------------------------------------------------------
 372+ 022B              ; -- Manhattan distance
 373+ 022B              ; -- very quick distance calculation based on a cube
 374+ 022B              ; -- ix = pointer to vector of 3x3, iy = distance to check
 375+ 022B              ; simploy done by ABS (ix)
 376+ 022B              ; returns z if outside box, nz if inside box
 377+ 022B DD 6E 00     ManhattanDistanceIXIY:  ld      l,(ix+0)            ; del = abs ix (sign hi lo)
 378+ 022E DD 5E 01     .checkX:                ld      e,(ix+1)            ; .
 379+ 0231 DD 7E 02                             ld      a,(ix+2)            ; .
 380+ 0234 E6 7F                                and     SignMask8Bit        ;
 381+ 0236 57                                   ld      d,a                 ;
 382+ 0237 FD 66 00                             ld      h,(iy+0)            ; bch = distiance to check
 383+ 023A FD 4E 01                             ld      c,(iy+1)            ; .
 384+ 023D FD 7E 02                             ld      a,(iy+2)            ; .
 385+ 0240 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 386+ 0242 47                                   ld      b,a                 ; .
 387+ 0243 C5 E5                                push    bc,,hl              ; save this for 2nd and 3rd test
 388+ 0245 FD E5                                push    iy                  ; save iy as add function changes is
 389+ 0247 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 390+ 024A FD E1                                pop     iy                  ; get iy back
 391+ 024C 7A                                   ld      a,d
 392+ 024D E6 80                                and     SignOnly8Bit
 393+ 024F CA 88 02                             jp      z,.ClearUp          ; so if its positive then outside boundary
 394+ 0252 E1 C1        .checkY:                pop     bc,,hl
 395+ 0254 C5 E5                                push    bc,,hl
 396+ 0256 DD 6E 03                             ld      l,(ix+3)            ; del = abs ix (sign hi lo)
 397+ 0259 DD 5E 04                             ld      e,(ix+4)            ; .
 398+ 025C DD 7E 05                             ld      a,(ix+5)            ; .
 399+ 025F E6 7F                                and     SignMask8Bit        ;
 400+ 0261 57                                   ld      d,a                 ;
 401+ 0262 FD E5                                push    iy                  ; save iy as add function changes is
 402+ 0264 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 403+ 0267 FD E1                                pop     iy                  ; get iy back
 404+ 0269 7A                                   ld      a,d
 405+ 026A E6 80                                and     SignOnly8Bit
 406+ 026C CA 88 02                             jp      z,.ClearUp          ; so if its positive then outside boundary
 407+ 026F E1 C1        .checkZ:                pop     bc,,hl
 408+ 0271 DD 6E 06                             ld      l,(ix+6)            ; del = abs ix (sign hi lo)
 409+ 0274 DD 5E 07                             ld      e,(ix+7)            ; .
 410+ 0277 DD 7E 08                             ld      a,(ix+8)            ; .
 411+ 027A E6 7F                                and     SignMask8Bit        ;
 412+ 027C 57                                   ld      d,a                 ;
 413+ 027D FD E5                                push    iy                  ; save iy as add function changes is
 414+ 027F CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 415+ 0282 FD E1                                pop     iy                  ; get iy back
 416+ 0284 7A                                   ld      a,d
 417+ 0285 E6 80                                and     SignOnly8Bit
 418+ 0287 C9                                   ret
 419+ 0288 E1 C1        .ClearUp:               pop     bc,,hl
 420+ 028A C9                                   ret
 421+ 028B
 422+ 028B
 423+ 028B              ;------------------------------------------------------------
 424+ 028B              ; Note vectors are 2 byte lead sign, angle is 8 bit lead sign
 425+ 028B              ApplyMyAngleAToIXIY:    ;break
 426+ 028B F5                                   push    af                          ; save angle
 427+ 028C              ; Calculate Angle * vector /256, i.e take angle and mutiple by high byte of vector
 428+ 028C 5F           .processVector1:        ld      e,a                         ; e = angle
 429+ 028D DD 56 01                             ld      d,(ix+1)                    ; d = vector 1 / 256
 430+ 0290 CD E5 6B                             call    mulDbyESigned               ; calcualte DE = Vector * angle /256
 431+ 0293 FD 6E 00 FD                          ld      hl,(iy+0)                   ; hl = vector 2
 431+ 0297 66 01
 432+ 0299 CD 00 00                             call    SubDEfromHLSigned           ; hl = vector 2 - (vector 1 * angle / 256)
 433+ 029C FD 75 00 FD                          ld      (iy+0),hl                   ; .
 433+ 02A0 74 01
 434+ 02A2 F1           .processVector2:        pop     af
 435+ 02A3 5F                                   ld      e,a                         ; e = angle
 436+ 02A4 FD 56 01                             ld      d,(iy+1)                    ; d = vector 2 / 256
 437+ 02A7 CD E5 6B                             call    mulDbyESigned               ; de = vector 2 * angle /256
 438+ 02AA DD 6E 00 DD                          ld      hl,(ix+0)                   ; hl = vector 1
 438+ 02AE 66 01
 439+ 02B0 CD 04 00                             call    AddDEtoHLSigned             ; hl = hl + de
 440+ 02B3 DD 75 00 DD                          ld      (ix+0),hl                   ; .
 440+ 02B7 74 01
 441+ 02B9 C9                                   ret
 442+ 02BA              ;------------------------------------------------------------
 443+ 02BA              ; Applies Roll Alpha and Pitch Beta to vector at IX
 444+ 02BA              ApplyRollAndPitchToIX:
 445+ 02BA              ;-- y Vector = y - alpha * nosev_x_hi
 446+ 02BA DD 5E 01                             ld      e,(ix+1)                    ; e = X component hi
 447+ 02BD 3A 65 66                             ld      a,(ALPHA)                   ; alpha S7
 448+ 02C0 57                                   ld      d,a
 449+ 02C1 CD E5 6B                             call    mulDbyESigned               ; d = X Vector * alpha / 256
 450+ 02C4 DD 6E 02                             ld      l,(ix+2)                    ; hl = Y Vector component
 451+ 02C7 DD 66 03                             ld      h,(ix+3)                    ;
 452+ 02CA CD 00 00                             call    SubDEfromHLSigned           ; hl = Y - (alpha * nosev x hi)
 453+ 02CD DD 75 02                             ld      (ix+2),l                    ; dont round Y up yet
 454+ 02D0 DD 74 03                             ld      (ix+3),h
 455+ 02D3              ;-- x Vector = x Vector + alpha * y_hi
 456+ 02D3 DD 5E 03                             ld      e,(ix+3)                    ; e = y component hi
 457+ 02D6 3A 65 66                             ld      a,(ALPHA)                   ; alpha S7
 458+ 02D9 57                                   ld      d,a
 459+ 02DA CD E5 6B                             call    mulDbyESigned               ; d = y Vector * alpha / 256
 460+ 02DD DD 6E 00                             ld      l,(ix+0)                    ; hl = x Vector component
 461+ 02E0 DD 66 01                             ld      h,(ix+1)                    ;
 462+ 02E3 CD 04 00                             call    AddDEtoHLSigned             ; hl = x + (alpha * nosev x hi)
 463+ 02E6                                  IFDEF ROUND_ROLL_AND_PITCH
 464+ 02E6 ~                                    ld      l,0                         ; round up x
 465+ 02E6                                  ENDIF
 466+ 02E6 DD 75 00                             ld      (ix+0),l
 467+ 02E9 DD 74 01                             ld      (ix+1),h
 468+ 02EC              ;-- nosev_y = nosev_y - beta * nosev_z_hi
 469+ 02EC DD 5E 05                             ld      e,(ix+5)                    ; e = z component hi
 470+ 02EF 3A 58 66                             ld      a,(BETA)                    ; beta S7
 471+ 02F2 57                                   ld      d,a
 472+ 02F3 CD E5 6B                             call    mulDbyESigned               ; d = Z Vector * beta / 256
 473+ 02F6 DD 6E 02                             ld      l,(ix+2)                    ; hl = y Vector component
 474+ 02F9 DD 66 03                             ld      h,(ix+3)                    ;
 475+ 02FC CD 00 00                             call    SubDEfromHLSigned           ; hl = Y - (beta * nosev z hi)
 476+ 02FF                                  IFDEF ROUND_ROLL_AND_PITCH
 477+ 02FF ~                                    ld      l,0                         ; round up Y
 478+ 02FF                                  ENDIF
 479+ 02FF DD 75 02                             ld      (ix+2),l
 480+ 0302 DD 74 03                             ld      (ix+3),h
 481+ 0305              ;-- nosev_z = nosev_z + beta * nosev_y_hi
 482+ 0305 DD 5E 03                             ld      e,(ix+3)                    ; e = y component hi
 483+ 0308 3A 58 66                             ld      a,(BETA)                    ; beta S7
 484+ 030B 57                                   ld      d,a
 485+ 030C CD E5 6B                             call    mulDbyESigned               ; d = y Vector * beta / 256
 486+ 030F DD 6E 04                             ld      l,(ix+4)                    ; hl = z Vector component
 487+ 0312 DD 66 05                             ld      h,(ix+5)                    ;
 488+ 0315 CD 04 00                             call    AddDEtoHLSigned             ; hl = z + (beta * nosev z hi)
 489+ 0318                                  IFDEF ROUND_ROLL_AND_PITCH
 490+ 0318 ~                                    ld      l,0                         ; round up zwd
 491+ 0318                                  ENDIF
 492+ 0318 DD 75 04                             ld      (ix+4),l
 493+ 031B DD 74 05                             ld      (ix+5),h
 494+ 031E C9                                   ret
 495+ 031F              ;------------------------------------------------------------
 496+ 031F              ; Calculates the following:
 497+ 031F              ; loads UBnKTargetVector from UBnkPostion to IY as IY - position
 498+ 031F DD 21 20 C0  VectorUnivtoIY:     ld      ix,UBnKxlo                      ; target x = iy [x] - Univ XPos
 499+ 0323 CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; .
 500+ 0326 7D                               ld      a,l                             ; .
 501+ 0327 32 47 C0                         ld      (UBnKTargetXPos),a              ; .
 502+ 032A ED 53 48 C0                      ld      (UBnKTargetXPos+1),de           ; .
 503+ 032E DD 21 23 C0                      ld      ix,UBnKylo                      ; move to y component
 504+ 0332 01 03 00                         ld      bc,3                            ; .
 505+ 0335 FD 09                            add     iy,bc                           ; .
 506+ 0337 CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; target y = iy [y] - Univ YPos
 507+ 033A 7D                               ld      a,l                             ; .
 508+ 033B 32 4A C0                         ld      (UBnKTargetYPos),a              ; .
 509+ 033E ED 53 4B C0                      ld      (UBnKTargetYPos+1),de           ; .
 510+ 0342 DD 21 26 C0                      ld      ix,UBnKzlo                      ; move to y component
 511+ 0346 01 03 00                         ld      bc,3                            ; move to z component
 512+ 0349 FD 09                            add     iy,bc                           ; .
 513+ 034B CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; target z = iy [z] - Univ ZPos
 514+ 034E 7D                               ld      a,l                             ; .
 515+ 034F 32 4D C0                         ld      (UBnKTargetZPos),a              ; .
 516+ 0352 ED 53 4E C0                      ld      (UBnKTargetZPos+1),de           ; .
 517+ 0356 C9                               ret
 518+ 0357              ;------------------------------------------------------------
 519+ 0357              ; Takes the UBnKTarget position and works out if its ready for a docking routine or jump
 520+ 0357              ; returns carry flag if move to docking else leaves carry unset
 521+ 0357              UnivDistanceToTarget:DISPLAY "TODO : WRITE CODE FOR UnivDistanceToTarget"
 522+ 0357                                  ClearCarryFlag                              ; for now clear carry flag so its not at target
 522+ 0357 B7          >                        or a
 523+ 0358 C9                               ret
 524+ 0359              ;------------------------------------------------------------
 525+ 0359              ; Takes the UBnKTarget position and works out if its ready for a docking routine or jump
 526+ 0359
 527+ 0359
 528+ 0359                      IFNDEF  DEBUG_NO_TACTICS_CODE
 529+ 0359 ~
 530+ 0359 ~            TacticsVarResult        DW 0
 531+ 0359 ~            TacticsDotRoofv:        ld      hl,UBnkrotmatRoofvX
 532+ 0359 ~                                    jp      TacticsDotHL
 533+ 0359 ~
 534+ 0359 ~            TacticsDotSidev:        ld      hl,UBnkrotmatSidevX
 535+ 0359 ~                                    jp      TacticsDotHL
 536+ 0359 ~
 537+ 0359 ~            TacticsDotNosev:        call    CopyRotNoseToUBnKTacticsMat
 538+ 0359 ~            TacticsDotHL:           ld      hl,UBnKTacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 539+ 0359 ~            .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 540+ 0359 ~                                    ld      e,a                                 ; .
 541+ 0359 ~                                    ld      a,(UBnKTargetVectorX)                  ; .
 542+ 0359 ~                                    ld      d,a                                 ; .
 543+ 0359 ~                                    mul                                         ; .
 544+ 0359 ~                                    ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 545+ 0359 ~                                    ld      (varS),a                            ; .
 546+ 0359 ~                                    inc     hl                                  ; move to sign byte
 547+ 0359 ~            .CalcXSign:             ld      a,(UBnKTargetVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 548+ 0359 ~                                    xor     (hl)                                ; .
 549+ 0359 ~                                    ld      b,a                                 ; .
 550+ 0359 ~            .MoveToY:               inc     hl                                  ; Move on to Y component
 551+ 0359 ~            .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 552+ 0359 ~                                    ld      e,a                                 ; .
 553+ 0359 ~                                    ld      a,(UBnKTargetVectorY)                  ; .
 554+ 0359 ~                                    ld      d,a                                 ; .
 555+ 0359 ~                                    mul     de                                  ; .
 556+ 0359 ~                                    ld      e,d                                 ; .
 557+ 0359 ~                                    ld      d,0                                 ; .
 558+ 0359 ~                                    inc     hl                                  ; move to sign byte
 559+ 0359 ~            .CalcYSign:             ld      a,(UBnKTargetVectorY+2)                ; c = sign of y_sign * sidev_y
 560+ 0359 ~                                    xor     (hl)                                ;
 561+ 0359 ~                                    ld      c,a                                 ;
 562+ 0359 ~            .MoveToZ:               inc     hl                                  ; Move on to Z component
 563+ 0359 ~            .AddXandY:              push    hl                                  ; but save HL as we need that
 564+ 0359 ~                                    ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 565+ 0359 ~                                    ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 566+ 0359 ~                                    ld      l,a                                 ;
 567+ 0359 ~                                    call    ADDHLDESignBC                       ; a(sign) hl = sum
 568+ 0359 ~                                    ld      b,a                                 ; b = sign of result
 569+ 0359 ~                                    ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 570+ 0359 ~            .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 571+ 0359 ~                                    ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 572+ 0359 ~                                    ld      e,a                                 ; .
 573+ 0359 ~                                    ld      a,(UBnKTargetVectorZ)                  ; .
 574+ 0359 ~                                    ld      d,a                                 ; .
 575+ 0359 ~                                    mul     de                                  ; .
 576+ 0359 ~                                    ld      e,d                                 ; .
 577+ 0359 ~                                    ld      d,0                                 ; .
 578+ 0359 ~                                    inc     hl                                  ; move to sign byte
 579+ 0359 ~            .CalcZSign:             ld      a,(UBnKTargetVectorZ+2)
 580+ 0359 ~                                    xor     (hl)
 581+ 0359 ~                                    ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 582+ 0359 ~                                    ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 583+ 0359 ~                                    call    ADDHLDESignBC                       ; so AHL = X y z products
 584+ 0359 ~                                    ld      (varS),a                            ; for backwards compatibility
 585+ 0359 ~                                    ld      a,l                                  ; .
 586+ 0359 ~                                    ret
 587+ 0359 ~
 588+ 0359 ~            CopyRotSideToUBnKTacticsMat:ld      hl,UBnkrotmatSidevX+1
 589+ 0359 ~                                    jp      CopyRotmatToTacticsMat
 590+ 0359 ~
 591+ 0359 ~            CopyRotNoseToUBnKTacticsMat:ld      hl,UBnkrotmatNosevX+1
 592+ 0359 ~                                    jp      CopyRotmatToTacticsMat
 593+ 0359 ~
 594+ 0359 ~            CopyRotRoofToBnKTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 595+ 0359 ~            ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 596+ 0359 ~            CopyRotmatToUBnKTacticsMat: ld      de,UBnKTacticsRotMatX
 597+ 0359 ~                                    ld      a,(hl)              ; matrix high byte of x
 598+ 0359 ~                                    ld      b,a
 599+ 0359 ~                                    and     SignMask8Bit
 600+ 0359 ~                                    ld      (de),a              ; set rot mat value
 601+ 0359 ~                                    inc     de
 602+ 0359 ~                                    ld      a,b
 603+ 0359 ~                                    and     SignOnly8Bit
 604+ 0359 ~                                    ld      (de),a              ; set rot mat sign
 605+ 0359 ~                                    inc     de                  ; move to next rot mat element
 606+ 0359 ~                                    inc     hl
 607+ 0359 ~                                    inc     hl                  ; matrix high byte of y
 608+ 0359 ~            .processYElement:       ld      a,(hl)              ; matrix high byte of y
 609+ 0359 ~                                    ld      b,a
 610+ 0359 ~                                    and     SignMask8Bit
 611+ 0359 ~                                    ld      (de),a              ; set rot mat value
 612+ 0359 ~                                    inc     de
 613+ 0359 ~                                    ld      a,b
 614+ 0359 ~                                    and     SignOnly8Bit
 615+ 0359 ~                                    ld      (de),a              ; set rot mat sign
 616+ 0359 ~                                    inc     de                  ; move to next rot mat element
 617+ 0359 ~                                    inc     hl
 618+ 0359 ~                                    inc     hl                  ; matrix high byte of z
 619+ 0359 ~            .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 620+ 0359 ~                                    ld      b,a
 621+ 0359 ~                                    and     SignMask8Bit
 622+ 0359 ~                                    ld      (de),a              ; set rot mat value
 623+ 0359 ~                                    inc     de
 624+ 0359 ~                                    ld      a,b
 625+ 0359 ~                                    and     SignOnly8Bit
 626+ 0359 ~                                    ld      (de),a              ; set rot mat sign
 627+ 0359 ~                                    ret
 628+ 0359                      ENDIF
 629+ 0359
 630+ 0359
 631+ 0359
# file closed: ../../Maths/MathsBankedFns.asm
 793  0359                                  DISPLAY "Bank ",MathsBankedFnsAddr," - Bytes free ",/D, $2000 - ($-MathsBankedFnsAddr), " - BankMathsBankedAdd"
 794  0359                                  ASSERT $-MathsBankedFnsAddr <8912, Bank code leaks over 8K boundary
 795  0359
 796  0359                  SAVENEX OPEN "VecTest.nex", EliteNextStartup , TopOfStack
 797  0359                  SAVENEX CFG  0,0,0,1
 798  0359                  SAVENEX AUTO
 799  0359                  SAVENEX CLOSE
 800  0359                  DISPLAY "Main Non Banked Code End ", MainNonBankedCodeEnd , " Bytes free ", 0B000H - MainNonBankedCodeEnd
 801  0359                  ASSERT MainNonBankedCodeEnd < 0B000H, Program code leaks intot interrup vector table
 802  0359
# file closed: VecTest.asm
