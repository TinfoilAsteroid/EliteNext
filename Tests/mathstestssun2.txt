# file opened: mathstestssun2.asm
  1   0000                                      DEVICE ZXSPECTRUMNEXT
  2   0000                                      DEFINE  DOUBLEBUFFER 1
  3   0000                                      CSPECTMAP testMaths.map
  4   0000                                      OPT --zxnext=cspect --syntax=a --reversepop
  5   0000
  6   0000              testStartup:            ORG         $8000
  7   8000
  8   8000 DD 21 8A 85                          ld      ix, TestCase1
  9   8004 3A 1B 86     .TestLoop:              ld      a,(testCounter)
 10   8007 21 1A 86                             ld      hl, testTotal
 11   800A BE                                   cp      (hl)
 12   800B 28 58                                jr      z,.Done
 13   800D DD 7E 00                             ld      a,(ix+testCase.SrcH)
 14   8010 67                                   ld      h,a
 15   8011 DD 7E 01                             ld      a,(ix+testCase.SrcC)
 16   8014 4F                                   ld      c,a
 17   8015 DD 7E 02                             ld      a,(ix+testCase.SrcB)
 18   8018 47                                   ld      b,a
 19   8019 DD 7E 03                             ld      a,(ix+testCase.SrcL)
 20   801C 6F                                   ld      l,a
 21   801D DD 7E 04                             ld      a,(ix+testCase.SrcE)
 22   8020 5F                                   ld      e,a
 23   8021 DD 7E 05                             ld      a,(ix+testCase.SrcD)
 24   8024 57                                   ld      d,a
 25   8025 CD 29 85                             call    AddBCHtoDELsigned
 26   8028 FD 2E 50                             ld      iyl,'P'
 27   802B 7D                                   ld      a,l
 28   802C DD 77 09                             ld      (ix+testCase.ActualL),a
 29   802F DD BE 06                             cp      (ix+testCase.ExpectedL)
 30   8032 28 03                                jr      z,.LOK
 31   8034 FD 2E 31                             ld      iyl,'1'
 32   8037              .LOK:
 33   8037 7B                                   ld      a,e
 34   8038 DD 77 0A                             ld      (ix+testCase.ActualE),a
 35   803B DD BE 07                             cp      (ix+testCase.ExpectedE)
 36   803E 28 03                                jr      z,.EOK
 37   8040 FD 2E 32                             ld      iyl,'2'
 38   8043              .EOK:
 39   8043 7A                                   ld      a,d
 40   8044 DD 77 0B                             ld      (ix+testCase.ActualD),a
 41   8047 DD BE 08                             cp      (ix+testCase.ExpectedD)
 42   804A 28 03                                jr      z,.DOK
 43   804C FD 2E 33                             ld      iyl,'3'
 44   804F              .DOK:
 45   804F
 46   804F FD 7D                                ld      a,iyl
 47   8051 DD 77 0F                             ld      (ix+testCase.PassFail),a
 48   8054 21 1B 86                             ld      hl,testCounter
 49   8057 34                                   inc     (hl)
 50   8058 DD E5                                push    ix
 51   805A E1                                   pop     hl
 52   805B 3E 10                                ld      a,16
 53   805D ED 31                                add     hl,a
 54   805F E5                                   push    hl
 55   8060 DD E1                                pop     ix
 56   8062 C3 04 80                             jp      .TestLoop
 57   8065
 58   8065 DD 01        .Done                   break
 59   8067 C3 65 80                             jp      .Done                   ; complete tight loop
 60   806A
 61   806A                                      INCLUDE "../Variables/constant_equates.asm"
# file opened: ../Variables/constant_equates.asm
  1+  806A              ;Contants
  2+  806A
  3+  806A              SignMask8Bit		equ %01111111
  4+  806A              SignMask16Bit		equ %0111111111111111
  5+  806A              SignOnly8Bit		equ $80
  6+  806A              SignOnly16Bit		equ $8000
  7+  806A
  8+  806A              Bit7Only            equ %10000000
  9+  806A              Bit6Only            equ %01000000
 10+  806A              Bit5Only            equ %00100000
 11+  806A              Bit4Only            equ %00010000
 12+  806A              Bit3Only            equ %00001000
 13+  806A              Bit2Only            equ %00000100
 14+  806A              Bit1Only            equ %00000010
 15+  806A              Bit0Only            equ %00000001
 16+  806A              Bit7Clear           equ %01111111
 17+  806A              Bit6Clear           equ %10111111
 18+  806A              Bit5Clear           equ %11011111
 19+  806A              Bit4Clear           equ %11101111
 20+  806A              Bit3Clear           equ %11110111
 21+  806A              Bit2Clear           equ %11111011
 22+  806A              Bit1Clear           equ %11111101
 23+  806A              Bit0Clear           equ %11111110
 24+  806A              ConstPi				equ $80
 25+  806A              ConstNorm           equ 197
 26+  806A
 27+  806A              ;Text Tokens
 28+  806A              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
 29+  806A              BrabenBellToken 	equ $0D
 30+  806A              AcorToken			equ $0C
 31+  806A
 32+  806A              ; Intro Screen
 33+  806A              TitleShip			equ	$8C
 34+  806A              RotationUnity		equ $60
 35+  806A              DBCheckCode			equ $DB
 36+  806A              MaxVisibility		equ $1F
 37+  806A              FarInFront			equ $C0
 38+  806A
 39+  806A              ; Universe Managment
 40+  806A              ShipTypeJunk        equ 3
 41+  806A              ShipTypeStation     equ 2
 42+  806A              ShipTypeMissile     equ 1
 43+  806A              ShipTypeNormal      equ 0
 44+  806A              ShipTypeEmpty       equ 255
 45+  806A              ; TacticsControl
 46+  806A              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 47+  806A              ShipIsBountyHunter  equ Bit1Only   ;
 48+  806A              ShipIsHostile       equ Bit2Only   ;
 49+  806A              ShipNotHostile      equ Bit2Clear   ;
 50+  806A              ShipIsPirate        equ Bit3Only   ;
 51+  806A              ShipIsDocking       equ Bit4Only   ;
 52+  806A              ShipIsBystander     equ Bit5Only   ;
 53+  806A              ShipIsCop           equ Bit6Only   ;
 54+  806A              ShipIsScoopDockEsc  equ Bit7Only   ;
 55+  806A              ShipAIEnabled       equ Bit7Only   ;
 56+  806A              ShipExploding       equ Bit5Only
 57+  806A              ShipKilled          equ Bit7Clear
 58+  806A
 59+  806A              ; UniverseAIControl
 60+  806A              ShipCanAnger        equ %00000001
 61+  806A
 62+  806A
 63+  806A              ShipMaxDistance     equ 192
 64+  806A              HyperSpaceTimers    equ $0B0B
 65+  806A
 66+  806A
 67+  806A              MaxNumberOfStars	equ 11
 68+  806A              ConsoleRefreshInterval  equ 4
 69+  806A
 70+  806A              ShipTypeSize		equ	32 			;??????? just a guess for now
 71+  806A              ShipSST				equ 4			; its a space station
 72+  806A              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 73+  806A              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 74+  806A              ShipCountMax		equ	2			; For now just 2 ships to debug
 75+  806A              LineLimitPerShip	equ 70			; Max lines per ship
 76+  806A              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 77+  806A              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 78+  806A              PlayerDocked		equ	$FF
 79+  806A
 80+  806A              ; Memory page managment	(Refers to a memory slot as a place to access data)
 81+  806A              ShipDataSlot		equ	6			; this may move into rom swap out space later
 82+  806A              UniverseObjectSlot	equ	7
 83+  806A
 84+  806A              KeyForwardsView		equ	$20
 85+  806A              ; Game specific equates
 86+  806A              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 87+  806A
 88+  806A              ;...Game Colour Mapping
 89+  806A              L2DustColour        equ L2ColourGREY_1
 90+  806A              L2SunScannerBright  equ 252
 91+  806A              L2SunScanner        equ 180
 92+  806A
 93+  806A
 94+  806A              ; Ship Data
 95+  806A              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 96+  806A              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 97+  806A              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 98+  806A              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 99+  806A              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
100+  806A              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
101+  806A              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
102+  806A              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
103+  806A              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
104+  806A              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
105+  806A              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
106+  806A              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
107+  806A              ;;;;00 00			 EQUW 0     \ type 12 is       Python
108+  806A              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
109+  806A              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
110+  806A              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
111+  806A              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
112+  806A              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
113+  806A              ;;;;00 00			 EQUW 0     \ type 18 is
114+  806A              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
115+  806A              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
116+  806A              ;;;;00 00			 EQUW 0     \ type 21 is
117+  806A              ;;;;00 00			 EQUW 0     \ type 22 is
118+  806A              ;;;;00 00			 EQUW 0     \ type 23 is
119+  806A              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
120+  806A              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
121+  806A              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
122+  806A              ;;;;00 00			 EQUW 0     \ type 27 is
123+  806A              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
124+  806A              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
125+  806A              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
126+  806A              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
127+  806A              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
128+  806A              ;;;;			\ NEWB examples
129+  806A              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
130+  806A              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
131+  806A              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
132+  806A              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
133+  806A              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
134+  806A
# file closed: ../Variables/constant_equates.asm
 62   806A                                      INCLUDE "../Hardware/L2ColourDefines.asm"
# file opened: ../Hardware/L2ColourDefines.asm
  1+  806A              L2ColourBLACK           EQU   0
  2+  806A              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
  3+  806A              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
  4+  806A              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
  5+  806A              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
  6+  806A              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
  7+  806A              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
  8+  806A              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
  9+  806A              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
 10+  806A              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
 11+  806A              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
 12+  806A              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
 13+  806A              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
 14+  806A              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
 15+  806A              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
 16+  806A              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
 17+  806A              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
 18+  806A              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
 19+  806A              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
 20+  806A              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
 21+  806A              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
 22+  806A              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
 23+  806A              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
 24+  806A              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
 25+  806A
 26+  806A
 27+  806A              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
 28+  806A              L2ColourWHITE_2         EQU 146
 29+  806A              L2ColourGREY_1		    EQU L2ColourWHITE_2
 30+  806A              L2ColourGREY_2		    EQU 109
 31+  806A              L2ColourGREY_3		    EQU  73
 32+  806A              L2ColourGREY_4		    EQU  37
 33+  806A
 34+  806A              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
 35+  806A              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
 36+  806A              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
 37+  806A              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
 38+  806A              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
 39+  806A
 40+  806A              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
 41+  806A              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
 42+  806A              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
 43+  806A              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
 44+  806A              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
 45+  806A              L2ColourORANGE_1        EQU 236                 ; RGB
 46+  806A              L2ColourORANGE_2        EQU 168                 ; RGB
 47+  806A              L2ColourORANGE_3        EQU  68                 ; RGB
 48+  806A              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
 49+  806A              L2ColourCYAN_2          EQU  18                 ; RGB
 50+  806A              L2ColourCYAN_3          EQU   9                 ; RGB
 51+  806A              L2ColourPURPLE_1        EQU 109                 ; RGB
 52+  806A              L2ColourPURPLE_2        EQU  66                 ; RGB
 53+  806A              L2ColourPURPLE_3        EQU  33                 ; RGB
 54+  806A              L2ColourPINK_1		    EQU 231                 ; RGB
 55+  806A              L2ColourPINK_2		    EQU 226                 ; RGB
 56+  806A              L2ColourPINK_3		    EQU 225                 ; RGB
 57+  806A              L2ColourPINK_4		    EQU 224                 ; RGB
 58+  806A
# file closed: ../Hardware/L2ColourDefines.asm
 63   806A                                      INCLUDE "../Macros/carryFlagMacros.asm"
# file opened: ../Macros/carryFlagMacros.asm
  1+  806A
  2+  806A              SetCarryFlag:           MACRO
  3+  806A ~                                    scf
  4+  806A                                      ENDM
  5+  806A
  6+  806A              ClearCarryFlag:	        MACRO
  7+  806A ~                                    or a
  8+  806A                                      ENDM
  9+  806A
 10+  806A              FlipCarryFlag:          MACRO
 11+  806A ~                                    ccf
 12+  806A                                      ENDM
 13+  806A
# file closed: ../Macros/carryFlagMacros.asm
 64   806A                                      INCLUDE "../Macros/jumpMacros.asm"
# file opened: ../Macros/jumpMacros.asm
  1+  806A              JumpIfPositive:	        MACRO target
  2+  806A ~                                    jp		p, target
  3+  806A                                      ENDM
  4+  806A
  5+  806A              JumpIfNegative:	        MACRO target
  6+  806A ~                                    jp		m, target
  7+  806A                                      ENDM
  8+  806A
  9+  806A
 10+  806A              JumpIfUnderflow:	    MACRO target
 11+  806A ~                                    jp		po, target
 12+  806A                                      ENDM
 13+  806A
 14+  806A              JumpIfOverflow:	        MACRO target
 15+  806A ~                                    jp		po, target
 16+  806A                                      ENDM
 17+  806A
 18+  806A
 19+  806A              JumpIfNotZero:	        MACRO target
 20+  806A ~                                    jp	nz,target
 21+  806A                                      ENDM
 22+  806A
 23+  806A              JumpIfZero:	            MACRO target
 24+  806A ~                                    jp	z,target
 25+  806A                                      ENDM
 26+  806A
 27+  806A              ;.. Bit routines
 28+  806A              JumpOnMemBitSet:        MACRO mem, bitnbr, target
 29+  806A ~                                    ld      a,(mem)
 30+  806A ~                                    bit 	bitnbr,a
 31+  806A ~                                    jp      nz,target
 32+  806A                                      ENDM
 33+  806A
 34+  806A              JumpOnMemBitClear:      MACRO mem, bitnbr, target
 35+  806A ~                                    ld      a,(mem)
 36+  806A ~                                    bit 	bitnbr,a
 37+  806A ~                                    jp      z,target
 38+  806A                                      ENDM
 39+  806A
 40+  806A              JumpOnABit5Set:         MACRO   target
 41+  806A ~                                    and     Bit5Only
 42+  806A ~                                    jp      nz,target
 43+  806A                                      ENDM
 44+  806A
 45+  806A              JumpOnABit5Clear:       MACRO   target
 46+  806A ~                                    and     Bit5Only
 47+  806A ~                                    jp      z,target
 48+  806A                                      ENDM
 49+  806A
 50+  806A              JumpOnBitMaskSet:       MACRO   bitmask, target
 51+  806A ~                                    and     bitmask
 52+  806A ~                                    jp      nz,target
 53+  806A                                      ENDM
 54+  806A
 55+  806A              JumpOnBitMaskClear:     MACRO   bitmask, target
 56+  806A ~                                    and     bitmask
 57+  806A ~                                    jp      z,target
 58+  806A                                      ENDM
 59+  806A
 60+  806A              JumpOnBitSet:           MACRO  reg, bitnbr, target
 61+  806A ~                                    bit 	bitnbr,reg
 62+  806A ~                                    jp      nz,target
 63+  806A                                      ENDM
 64+  806A
 65+  806A              JumpOnBitClear:         MACRO  reg, bitnbr, target
 66+  806A ~                                    bit 	bitnbr,reg
 67+  806A ~                                    jp      z,target
 68+  806A                                      ENDM
 69+  806A
 70+  806A              ; Comparison Routines
 71+  806A              JumpIfAGTEusng:         MACRO
 72+  806A ~                                    jp		nc,target
 73+  806A                                      ENDM
 74+  806A
 75+  806A              JumpIfAGTENusng:        MACRO reg,target
 76+  806A ~                                    cp     reg
 77+  806A ~                                    jp		nc,target
 78+  806A                                      ENDM
 79+  806A
 80+  806A              JumpIfAGTEMemusng:      MACRO mem,target
 81+  806A ~                                    ld      hl,mem
 82+  806A ~                                    cp      (hl)
 83+  806A ~                                    jp		nc,target
 84+  806A                                      ENDM
 85+  806A
 86+  806A              JumpIfALTMemusng:       MACRO mem,target
 87+  806A ~                                    ld      hl,mem
 88+  806A ~                                    cp      (hl)
 89+  806A ~                                    jp		c,target
 90+  806A                                      ENDM
 91+  806A
 92+  806A              JumpIfMemGTENusng:      MACRO mem, value, target
 93+  806A ~                                    ld     a,(mem)
 94+  806A ~                                    cp     value
 95+  806A ~                                    jp	  nc,target
 96+  806A                                      ENDM
 97+  806A
 98+  806A              JumpIfMemGTEMemusng:    MACRO mem, address, target
 99+  806A ~                                    ld   a,(mem)
100+  806A ~                                    ld   hl,address
101+  806A ~                                    cp   (hl)
102+  806A ~                                    jp	  nc,target
103+  806A                                      ENDM
104+  806A
105+  806A              JumpIfMemEqMemusng:     MACRO mem, address, target
106+  806A ~                                    ld   a,(mem)
107+  806A ~                                    ld   hl,address
108+  806A ~                                    cp   (hl)
109+  806A ~                                    jp	  z,target
110+  806A                                      ENDM
111+  806A
112+  806A              JumpIfMemTrue:          MACRO mem, target
113+  806A ~                                    ld      a,(mem)
114+  806A ~                                    and     a
115+  806A ~                                    jp      z, target
116+  806A                                      ENDM
117+  806A
118+  806A              JumpIfMemFalse:         MACRO mem, target
119+  806A ~                                    ld      a,(mem)
120+  806A ~                                    and     a
121+  806A ~                                    jp      nz, target
122+  806A                                      ENDM
123+  806A
124+  806A              JumpIfATrue:            MACRO target
125+  806A ~                                    and     a
126+  806A ~                                    jp      z, target
127+  806A                                      ENDM
128+  806A
129+  806A              JumpIfAFalse:           MACRO target
130+  806A ~                                    and     a
131+  806A ~                                    jp      nz, target
132+  806A                                      ENDM
133+  806A
134+  806A              JumpIfALTusng:          MACRO target
135+  806A ~                                    jp		c,target
136+  806A                                      ENDM
137+  806A
138+  806A              JumpIfALTNusng:         MACRO value, target
139+  806A ~                                    cp      value
140+  806A ~                                    jp		c, target
141+  806A                                      ENDM
142+  806A
143+  806A              JumpIfMemLTNusng:       MACRO mem, value, target
144+  806A ~                                    ld      a,(mem)
145+  806A ~                                    cp      value
146+  806A ~                                    jp	  c,target
147+  806A                                      ENDM
148+  806A
149+  806A              JumpIfMemLTMemusng:     MACRO mem, value, target
150+  806A ~                                    ld    a,(mem)
151+  806A ~                                    ld    hl,value
152+  806A ~                                    cp    (hl)
153+  806A ~                                    jp	  c,target
154+  806A                                      ENDM
155+  806A
156+  806A              JumpIfMemEqNusng:       MACRO mem,value,target
157+  806A ~                                    ld  a,(mem)
158+  806A ~                                    cp  value
159+  806A ~                                    jp  z,target
160+  806A                                      ENDM
161+  806A
162+  806A              JumpIfMemNeNusng:       MACRO mem,value,target
163+  806A ~                                    ld  a,(mem)
164+  806A ~                                    cp  value
165+  806A ~                                    jp  nz,target
166+  806A                                      ENDM
167+  806A
168+  806A              JumpIfMemZero:          MACRO mem,target
169+  806A ~                                    ld  a,(mem)
170+  806A ~                                    and a
171+  806A ~                                    jp  z,target
172+  806A                                      ENDM
173+  806A
174+  806A              JumpIfMemNotZero:       MACRO mem,target
175+  806A ~                                    ld  a,(mem)
176+  806A ~                                    and a
177+  806A ~                                    jp  nz,target
178+  806A                                      ENDM
179+  806A
180+  806A              JumpIfALTMemHLusng:     MACRO target
181+  806A ~                                    cp    (hl)
182+  806A ~                                    jp	  c,target
183+  806A                                      ENDM
184+  806A
185+  806A              JumpIfANENusng:         MACRO value, target
186+  806A ~                                    cp     value
187+  806A ~                                    jp      nz,target
188+  806A                                      ENDM
189+  806A
190+  806A              JumpIfANEMemusng:       MACRO  value, target
191+  806A ~                                    ld    hl,value
192+  806A ~                                    cp    (hl)
193+  806A ~                                    jp      nz,target
194+  806A                                      ENDM
195+  806A
196+  806A              JumpIfAEqNusng:         MACRO value, target
197+  806A ~                                    cp     value
198+  806A ~                                    jp      z,target
199+  806A                                      ENDM
200+  806A
201+  806A              JumpIfAIsZero:	        MACRO target
202+  806A ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
203+  806A ~                                    jp	z, target
204+  806A                                      ENDM
205+  806A
206+  806A              JumpIfAIsNotZero:       MACRO target
207+  806A ~                                    cp	0
208+  806A ~                                    jp	nz,target
209+  806A                                      ENDM
210+  806A
211+  806A              IfResultZeroGoto:	    MACRO target
212+  806A ~                                    jp	z,target
213+  806A                                      ENDM
214+  806A
215+  806A              IfResultNotZeroGoto:    MACRO target
216+  806A ~                                    jp	nz,target
217+  806A                                      ENDM
218+  806A
# file closed: ../Macros/jumpMacros.asm
 65   806A                                      INCLUDE "../Macros/ldCopyMacros.asm"
# file opened: ../Macros/ldCopyMacros.asm
  1+  806A              ZeroA:		            MACRO
  2+  806A ~                                    xor a
  3+  806A                                      ENDM
  4+  806A
  5+  806A              SetATrue:               MACRO
  6+  806A ~                                    xor     a
  7+  806A                                      ENDM
  8+  806A
  9+  806A              SetAFalse:              MACRO
 10+  806A ~                                    ld      a,$FF
 11+  806A                                      ENDM
 12+  806A
 13+  806A              SetMemFalse             MACRO   mem
 14+  806A ~                                    ld      a,$FF
 15+  806A ~                                    ld      (mem),a
 16+  806A                                      ENDM
 17+  806A
 18+  806A              SetMemTrue              MACRO   mem
 19+  806A ~                                    xor     a
 20+  806A ~                                    ld      (mem),a
 21+  806A                                      ENDM
 22+  806A
 23+  806A              SetMemToN:              MACRO   mem,value
 24+  806A ~                                    ld      a,value
 25+  806A ~                                    ld      (mem),a
 26+  806A                                      ENDM
 27+  806A
 28+  806A              ldCopyTextAtHLtoDE:     MACRO
 29+  806A ~            .CopyLoop:              ld      a,(hl)
 30+  806A ~                                    ld      (de),a
 31+  806A ~                                    cp      0
 32+  806A ~                                    jp      z,.DoneCopy
 33+  806A ~                                    inc     hl
 34+  806A ~                                    inc     de
 35+  806A ~                                    jr      .CopyLoop
 36+  806A ~            .DoneCopy:
 37+  806A                                      ENDM
 38+  806A
 39+  806A              ldClearTextLoop:        MACRO   TextSize
 40+  806A ~                                    ld      b,a
 41+  806A ~                                    ld      a,TextSize
 42+  806A ~            .ClearLoop:             ld      (hl),a
 43+  806A ~                                    inc     hl
 44+  806A ~                                    djnz    .ClearLoop
 45+  806A                                      ENDM
 46+  806A
 47+  806A              ldCopyByte:             MACRO memfrom, memto
 48+  806A ~                                    ld       a,(memfrom)
 49+  806A ~                                    ld       (memto),a
 50+  806A                                      ENDM
 51+  806A
 52+  806A
 53+  806A              ldCopyByteABS:          MACRO memfrom, memto
 54+  806A ~                                    ld       a,(memfrom)
 55+  806A ~                                    and		$7F
 56+  806A ~                                    ld       (memto),a
 57+  806A                                      ENDM
 58+  806A
 59+  806A              ldCopy2Byte             MACRO  memfrom, memto
 60+  806A ~                                    ld       hl,(memfrom)
 61+  806A ~                                    ld       (memto),hl
 62+  806A                                      ENDM
 63+  806A
 64+  806A              ldWriteConst            MACRO  memfrom, memto
 65+  806A ~                                    ld       a,memfrom
 66+  806A ~                                    ld       (memto),a
 67+  806A                                      ENDM
 68+  806A
 69+  806A              ldWriteZero             MACRO  memto
 70+  806A ~                                    xor      a
 71+  806A ~                                    ld       (memto),a
 72+  806A                                      ENDM
 73+  806A
 74+  806A              ldIXLaFromN:	        MACRO memfrom
 75+  806A ~                                    ld		a,(memfrom)
 76+  806A ~                                    ld		ixl,a
 77+  806A                                      ENDM
 78+  806A
 79+  806A              ldIXHaFromN:	        MACRO memfrom
 80+  806A ~                                    ld		a,(memfrom)
 81+  806A ~                                    ld		ixh,a
 82+  806A                                      ENDM
 83+  806A
 84+  806A              ldIYLaFromN:	        MACRO memfrom
 85+  806A ~                                    ld		a,(memfrom)
 86+  806A ~                                    ld		iyl,a
 87+  806A                                      ENDM
 88+  806A
 89+  806A              ldIYHaFromN:	        MACRO memfrom
 90+  806A ~                                    ld		a,(memfrom)
 91+  806A ~                                    ld		iyh,a
 92+  806A                                      ENDM
 93+  806A
 94+  806A              ldhlde:			        MACRO
 95+  806A ~                                    ld		h,d
 96+  806A ~                                    ld		l,e
 97+  806A                                      ENDM
 98+  806A
 99+  806A              ldhlbc:			        MACRO
100+  806A ~                                    ld		h,b
101+  806A ~                                    ld		l,c
102+  806A                                      ENDM
103+  806A
104+  806A              ldbcde:			        MACRO
105+  806A ~                                    ld		b,d
106+  806A ~                                    ld		c,e
107+  806A                                      ENDM
108+  806A
109+  806A              lddebc:			        MACRO
110+  806A ~                                    ld		d,b
111+  806A ~                                    ld		e,c
112+  806A                                      ENDM
113+  806A
114+  806A              ldbchl:			        MACRO
115+  806A ~                                    ld		b,h
116+  806A ~                                    ld		c,l
117+  806A                                      ENDM
118+  806A
119+  806A              lddeiy:			        MACRO
120+  806A ~                                    ld		d,iyh
121+  806A ~                                    ld		e,iyl
122+  806A                                      ENDM
123+  806A
124+  806A              ldiyde:			        MACRO
125+  806A ~                                    ld		iyh,d
126+  806A ~                                    ld		iyl,e
127+  806A                                      ENDM
128+  806A
129+  806A
130+  806A              FourLDIInstrunctions:   MACRO
131+  806A ~                                    ldi
132+  806A ~                                    ldi
133+  806A ~                                    ldi
134+  806A ~                                    ldi
135+  806A                                      ENDM
136+  806A
137+  806A              FiveLDIInstrunctions:   MACRO
138+  806A ~                                    ldi
139+  806A ~                                    ldi
140+  806A ~                                    ldi
141+  806A ~                                    ldi
142+  806A ~                                    ldi
143+  806A                                      ENDM
144+  806A
145+  806A              SixLDIInstrunctions:    MACRO
146+  806A ~                                    ldi
147+  806A ~                                    ldi
148+  806A ~                                    ldi
149+  806A ~                                    ldi
150+  806A ~                                    ldi
151+  806A ~                                    ldi
152+  806A                                      ENDM
153+  806A
154+  806A              EightLDIInstrunctions:  MACRO
155+  806A ~            		                ldi
156+  806A ~            		                ldi
157+  806A ~            		                ldi
158+  806A ~            		                ldi
159+  806A ~            		                ldi
160+  806A ~            		                ldi
161+  806A ~            		                ldi
162+  806A ~            		                ldi
163+  806A                                      ENDM
164+  806A
165+  806A              NineLDIInstrunctions:  MACRO
166+  806A ~            		                ldi
167+  806A ~            		                ldi
168+  806A ~            		                ldi
169+  806A ~            		                ldi
170+  806A ~            		                ldi
171+  806A ~            		                ldi
172+  806A ~            		                ldi
173+  806A ~            		                ldi
174+  806A ~            		                ldi
175+  806A                                      ENDM
# file closed: ../Macros/ldCopyMacros.asm
 66   806A                                      INCLUDE "../Macros/ShiftMacros.asm"
# file opened: ../Macros/ShiftMacros.asm
  1+  806A              ShiftIYRight1: MACRO
  2+  806A ~            			   ld 	a,iyh
  3+  806A ~            			   srl 	a
  4+  806A ~            			   ld	iyh,a
  5+  806A ~            			   ld 	a,iyl
  6+  806A ~            			   rra
  7+  806A ~            			   ld	iyl,a
  8+  806A              			   ENDM
  9+  806A
 10+  806A              ShiftHLRight1: MACRO
 11+  806A ~            			   srl h
 12+  806A ~            			   rr  l
 13+  806A              			   ENDM
 14+  806A
 15+  806A              ShiftDERight1: MACRO
 16+  806A ~            			   srl d
 17+  806A ~            			   rr  e
 18+  806A              			   ENDM
 19+  806A
 20+  806A              ShiftBCRight1: MACRO
 21+  806A ~            			   srl b
 22+  806A ~            			   rr  c
 23+  806A              			   ENDM
 24+  806A
 25+  806A
 26+  806A
 27+  806A              ShiftHLDiv8:   MACRO
 28+  806A ~            			   srl h
 29+  806A ~            			   rr  l
 30+  806A ~            			   srl h
 31+  806A ~            			   rr  l
 32+  806A ~            			   srl h
 33+  806A ~            			   rr  l
 34+  806A              			   ENDM
 35+  806A
 36+  806A              ShiftHLLeft1:  MACRO
 37+  806A ~            			   sla l
 38+  806A ~            			   rl  h
 39+  806A              			   ENDM
 40+  806A
 41+  806A              ShiftDELeft1:  MACRO
 42+  806A ~            			   sla e
 43+  806A ~            			   rl  d
 44+  806A              			   ENDM
 45+  806A
 46+  806A
 47+  806A              RollDELeft1:   MACRO
 48+  806A ~                           rl  e
 49+  806A ~                           rl  d
 50+  806A                             ENDM
 51+  806A
 52+  806A              ShiftBCLeft1:  MACRO
 53+  806A ~            			   sla c
 54+  806A ~            			   rl  b
 55+  806A              			   ENDM
 56+  806A
 57+  806A
 58+  806A              ShiftMem16Right1:   MACRO memaddr
 59+  806A ~                                ld    hl,(memaddr)
 60+  806A ~                                srl   h
 61+  806A ~                                rr    l
 62+  806A ~                                ld    (memaddr),hl
 63+  806A                                  ENDM
 64+  806A
 65+  806A              ShiftMem8Right1:    MACRO memaddr
 66+  806A ~                                ld      a,(memaddr)
 67+  806A ~                                srl     a
 68+  806A ~                                ld      (memaddr),a
 69+  806A                                  ENDM
 70+  806A
 71+  806A
 72+  806A              ShiftMem8Left1A:    MACRO memaddr
 73+  806A ~                                ld      a,(memaddr)
 74+  806A ~                                sla     a
 75+  806A ~                                ld      (memaddr),a
 76+  806A                                  ENDM
 77+  806A
# file closed: ../Macros/ShiftMacros.asm
 67   806A                                      INCLUDE "../Macros/NegateMacros.asm"
# file opened: ../Macros/NegateMacros.asm
  1+  806A
  2+  806A              NegIY:			    MACRO
  3+  806A ~                                xor a
  4+  806A ~                                sub iyl
  5+  806A ~                                ld iyl,a
  6+  806A ~                                sbc a,a
  7+  806A ~                                sub iyh
  8+  806A ~                                ld iyh,a
  9+  806A                                  ENDM
 10+  806A
 11+  806A              NegHL:			    MACRO
 12+  806A ~                                xor a
 13+  806A ~                                sub l
 14+  806A ~                                ld l,a
 15+  806A ~                                sbc a,a
 16+  806A ~                                sub h
 17+  806A ~                                ld h,a
 18+  806A                                  ENDM
 19+  806A
 20+  806A              NegDE:			    MACRO
 21+  806A ~                                xor a
 22+  806A ~                                sub e
 23+  806A ~                                ld e,a
 24+  806A ~                                sbc a,a
 25+  806A ~                                sub d
 26+  806A ~                                ld d,a
 27+  806A                                  ENDM
 28+  806A
 29+  806A              NegBC:			    MACRO
 30+  806A ~                                xor a
 31+  806A ~                                sub c
 32+  806A ~                                ld c,a
 33+  806A ~                                sbc a,a
 34+  806A ~                                sub  b
 35+  806A ~                                ld b,a
 36+  806A                                  ENDM
 37+  806A
 38+  806A              NegH                MACRO
 39+  806A ~                                ld      a,h
 40+  806A ~                                neg
 41+  806A ~                                ld      h,a
 42+  806A                                  ENDM
 43+  806A
 44+  806A              NegD                MACRO
 45+  806A ~                                ld      a,d
 46+  806A ~                                neg
 47+  806A ~                                ld      d,a
 48+  806A                                  ENDM
 49+  806A
 50+  806A              NegB                MACRO
 51+  806A ~                                ld      a,b
 52+  806A ~                                neg
 53+  806A ~                                ld      b,a
 54+  806A                                  ENDM
 55+  806A
# file closed: ../Macros/NegateMacros.asm
 68   806A                                      INCLUDE "../Variables/general_variables_macros.asm"
# file opened: ../Variables/general_variables_macros.asm
  1+  806A              ; limited to 255 character length
  2+  806A              CountLengthHL:          MACRO   Limiter
  3+  806A ~                                    ld      de,hl
  4+  806A ~                                    ld      bc,Limiter
  5+  806A ~                                    xor     a
  6+  806A ~                                    cpir
  7+  806A ~                                    ClearCarryFlag
  8+  806A ~                                    sbc     hl,de
  9+  806A ~                                    ld      a,l
 10+  806A ~                                    ret
 11+  806A                                      ENDM
 12+  806A
 13+  806A              HalfLengthHL:           MACRO
 14+  806A ~                                    ld      b,0
 15+  806A ~            .CountLenLoop:          ld      a,(hl)
 16+  806A ~                                    cp      0
 17+  806A ~                                    jr      z,.DoneCount
 18+  806A ~                                    inc     b
 19+  806A ~                                    inc     hl
 20+  806A ~                                    jr      .CountLenLoop
 21+  806A ~            .DoneCount:             ld      a,32
 22+  806A ~                                    sub     b
 23+  806A ~                                    sra     a
 24+  806A                                      ENDM
 25+  806A
 26+  806A              MakeInnocentMacro:		MACRO
 27+  806A ~            						xor		a
 28+  806A ~            						ld		(FugitiveInnocentStatus),a
 29+  806A              						ENDM
 30+  806A
 31+  806A              NoEscapePodMacro:		MACRO
 32+  806A ~            						xor		a
 33+  806A ~            						ld		(EscapePod),a
 34+  806A              						ENDM
 35+  806A
 36+  806A              MaxFuelLevel            EQU     70              ; 7.0 light years max
 37+  806A              MaxFuelMacro:			MACRO
 38+  806A ~            						ld		a,MaxFuelLevel
 39+  806A ~            						ld		(Fuel),a
 40+  806A              						ENDM
 41+  806A
 42+  806A              MaxThrottle:            MACRO
 43+  806A ~                                    ld      a,(SHIPMAXSPEED)
 44+  806A ~                                    ld      (DELTA),a
 45+  806A ~                                    ld      d,a
 46+  806A ~                                    ld      e,4
 47+  806A ~                                    mul
 48+  806A ~                                    ld      (DELT4Lo),de
 49+  806A                                      ENDM
 50+  806A
 51+  806A              ZeroThrottle:           MACRO
 52+  806A ~                                    xor     a
 53+  806A ~                                    ld      (DELTA),a
 54+  806A ~                                    ld      (DELT4Lo),a
 55+  806A ~                                    ld      (DELT4Lo+1),a
 56+  806A                                      ENDM
 57+  806A
 58+  806A              ZeroPitch:              MACRO
 59+  806A ~                                    xor     a
 60+  806A ~                                    ld      (BET2),a
 61+  806A ~                                    ld      (BET2FLIP),a
 62+  806A ~                                    ld      (JSTY),a
 63+  806A ~                                    ld      (BETA),a
 64+  806A                                      ENDM
 65+  806A
 66+  806A              ZeroRoll:               MACRO
 67+  806A ~                                    xor     a                              ; zero roll and climb
 68+  806A ~                                    ld      (ALP2),a
 69+  806A ~                                    ld      (ALP2FLIP),a
 70+  806A ~                                    ld      (JSTX),a
 71+  806A ~                                    ld      (ALPHA),a
 72+  806A                                      ENDM
 73+  806A
 74+  806A              CorrectPostJumpFuel:    MACRO
 75+  806A ~                                    ld      a,(Fuel)
 76+  806A ~                                    ld      hl,Distance
 77+  806A ~                                    sub     a,(hl)
 78+  806A ~                                    ld      (Fuel),a
 79+  806A                                      ENDM
 80+  806A
 81+  806A              AnyMissilesLeft:        MACRO
 82+  806A ~                                    ld      a,(NbrMissiles)
 83+  806A ~                                    and     a
 84+  806A                                      ENDM
 85+  806A
 86+  806A              SetMissileTargetA:      MACRO
 87+  806A ~                                    ld      (MissileTarget),a
 88+  806A                                      ENDM
 89+  806A
 90+  806A              IsMissileLockedOn:      MACRO
 91+  806A ~                                    ld      a,(MissileTarget)
 92+  806A ~                                    cp      $FF
 93+  806A ~                                    ret     z
 94+  806A ~                                    ReturnIfSlotAEmpty                  ; if target slot is empty
 95+  806A ~                                    ret                                 ; will return as nz now
 96+  806A                                      ENDM
 97+  806A
 98+  806A              ClearMissileTarget:     MACRO
 99+  806A ~                                    xor     a                           ; Set missile target to FF
100+  806A ~                                    dec     a
101+  806A ~                                    ld      (MissileTarget),a
102+  806A ~                                    SetMemFalse MissileLaunchFlag
103+  806A                                      ENDM
104+  806A
105+  806A              ClearECM:               MACRO
106+  806A ~                                    xor     a
107+  806A ~                                    ld      (ECMLoopA),a
108+  806A ~                                    ld      (ECMLoopB),a
109+  806A                                      ENDM
110+  806A
111+  806A              ChargeEnergyAndShields: MACRO
112+  806A ~                                    ld      a,$FF
113+  806A ~                                    ld      (PlayerEnergy),a
114+  806A ~                                    ld      (ForeShield),a
115+  806A ~                                    ld      (AftShield),a
116+  806A                                      ENDM
117+  806A
118+  806A              CopyPresentSystemToTarget: MACRO
119+  806A ~                                    ld      hl,(PresentSystemX)
120+  806A ~                                    ld      (TargetSystemX),hl
121+  806A                                      ENDM
122+  806A
123+  806A              CopyTargetSystemToPresent: MACRO
124+  806A ~                                    ld      hl,(TargetSystemX)
125+  806A ~                                    ld      (PresentSystemX),hl
126+  806A                                      ENDM
127+  806A
128+  806A              HalveFugitiveStatus:    MACRO
129+  806A ~                                    ld      hl,FugitiveInnocentStatus
130+  806A ~                                    srl     (hl)
131+  806A                                      ENDM
132+  806A
133+  806A              ClearForceTransition    MACRO
134+  806A ~                                    ld      a,$FF
135+  806A ~                                    ld      (ScreenTransitionForced),a
136+  806A                                      ENDM
137+  806A
138+  806A              ForceTransition:        MACRO newScreen
139+  806A ~                                    ld      a,newScreen
140+  806A ~                                    ld      (ScreenTransitionForced), a
141+  806A                                      ENDM
142+  806A
143+  806A              IsSpaceStationPresent:  MACRO
144+  806A ~                                    ld      a,(SpaceStationSafeZone)
145+  806A ~                                    and     a
146+  806A                                      ENDM
147+  806A
148+  806A              SetSafeZone:            MACRO
149+  806A ~                                    xor     a
150+  806A ~                                    ld      (SpaceStationSafeZone),a
151+  806A                                      ENDM
152+  806A
153+  806A              ClearSafeZone:          MACRO
154+  806A ~                                    ld      a,$FF
155+  806A ~                                    ld      (SpaceStationSafeZone),a
156+  806A                                      ENDM
157+  806A
158+  806A              CoolLasers:             MACRO
159+  806A ~                                    ld      a,(GunTemperature)
160+  806A ~                                    and     a
161+  806A ~                                    jr      z,.AlreadyCool
162+  806A ~                                    dec     a
163+  806A ~                                    ld      (GunTemperature),a
164+  806A ~            .AlreadyCool:
165+  806A                                      ENDM
166+  806A
167+  806A
168+  806A              InitEventCounter:       MACRO
169+  806A ~                                    xor     a
170+  806A ~                                    ld      (EventCounter),a
171+  806A                                      ENDM
172+  806A
173+  806A              ClearMissJump:          MACRO
174+  806A ~                                    ld      a,$FF
175+  806A ~                                    ld      (MissJumpFlag),a
176+  806A                                      ENDM
177+  806A
# file closed: ../Variables/general_variables_macros.asm
 69   806A                                      INCLUDE "../Variables/general_variables.asm"
# file opened: ../Variables/general_variables.asm
  1+  806A
  2+  806A
  3+  806A 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  4+  806C 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  5+  806E              ; Variables to simulate 6502 registers until code fixed
  6+  806E              ; These must be here in this order as reading Y and X can then be a 16 bit read
  7+  806E 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  8+  806F 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  9+  8070 00           regA		DB	0
 10+  8071
 11+  8071
 12+  8071 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 13+  8072 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 14+  8074 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 15+  8076
 16+  8076
 17+  8076
 18+  8076              ;XX16		DS	16				; 16 byte Matrix
 19+  8076
 20+  8076              P0INWK							; page 0 & 46
 21+  8076              p0INWK31						; page 0 & 65
 22+  8076              P0INWK36						; PAGE 0 &6A
 23+  8076
 24+  8076 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 25+  8077              LastNormalVisible	equ	XX4
 26+  8077              varXX4              equ XX4
 27+  8077
 28+  8077
 29+  8077
 30+  8077 00           PATG		DB	0				; 6502 &03C9
 31+  8078 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 32+  807A
 33+  807A
 34+  807A              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 35+  807A              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 36+  807A
 37+  807A              ; Present System Variables
 38+  807A
 39+  807A 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 40+  807B 20           RandomSeed1				DB	32	; 01
 41+  807C 0C           RandomSeed2				DB	12			; 02
 42+  807D 42           RandomSeed3				DB	66			; 03
 43+  807E
 44+  807E 00           varT1					DB	0				; 06
 45+  807F 00           SClo					DB 0				; 07
 46+  8080 00           SChi					DB 0				; 08
 47+  8081 00           varP					DB 0 				; 10	XX16+7
 48+  8082 00           varPhi					DB 0 				; 11	XX16+8
 49+  8083 00           varPhi2					DB 0 				; 12	XX16+9
 50+  8084              varPp1                  equ varPhi
 51+  8084              varPp2                  equ varPhi2
 52+  8084 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 53+  8085 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 54+  8086              UnivPointer				equ	UnivPointerLo
 55+  8086 00           varV					DB 0				; 22                          XX0+4
 56+  8087 00           varVHi					DB 0				; 23                          XX0+5
 57+  8088 00           varXXlo                 DB 0                ; 24
 58+  8089 00           varXXHi                 DB 0                ; 25
 59+  808A              varXX					equ	varXXlo
 60+  808A 00           YYlo                    DB 0                ; 26
 61+  808B 00           YYHi                    DB 0                ; 27
 62+  808C              varYY					equ	YYlo
 63+  808C              											;	28
 64+  808C              											;	29
 65+  808C              ;PlayerShipPositionData - Must be contiguous for setup
 66+  808C 00           BETA 					DB	0               ; 2A        (pitch done)
 67+  808D 00           JSTY                    DB  0               ; Joystick analog
 68+  808E 00           BET1 					DB	0               ; 2B        lower7 magnitude
 69+  808F 00           BET2                    DB  0               ;            climb sign
 70+  8090 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 71+  8091 1F           BET1MAXC                DB  31              ; max climb
 72+  8092 E1           BET1MAXD                DB  -31             ; max dive
 73+  8093 00           XC						DB	0               ; 2C
 74+  8094 00           YC						DB 	0               ; 2D
 75+  8095 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 76+  8096 00           OuterHyperCount			DB 	0				; 2E QQ22
 77+  8097 00           HyperCircle             DB  0
 78+  8098              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
 79+  8098 00           ECMActive				DB 	0				; 30		ECM Active flag
 80+  8099 00           ECMLoopA                DB  0
 81+  809A 00           ECMLoopB                DB  0
 82+  809B 00 00        JSTX                    DW  0               ;           Joystick analog value
 83+  809D 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 84+  809E 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 85+  809F 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 86+  80A0 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 87+  80A1 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 88+  80A2 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 89+  80A3
 90+  80A3
 91+  80A3
 92+  80A3              MAXMESSAGES             EQU 5
 93+  80A3              MESSAGETIMELIMIT        EQU 20
 94+  80A3              MESSAGESIZE             EQU 33
 95+  80A3              MESSAGELINE             EQU $0001
 96+  80A3
 97+  80A3 00           MessageCount            DB  0                ; used for enquing messages later
 98+  80A4 00           MessageCurrent          DB  0
 99+  80A5 05 00        MessageIndex            DW  MAXMESSAGES
100+  80A7 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
101+  814C 05           MessageTimeout          DB  MAXMESSAGES
102+  814D 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
103+  8172
104+  8172              ; MOVED TO Universe XX19					DB	0				; page 0 &67
105+  8172              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
106+  8172              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
107+  8172 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
108+  8173              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
109+  8173
110+  8173
111+  8173 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
112+  8178              											;	6D		QQ15+1
113+  8178              											;	6E		QQ15+2
114+  8178              											;	6F		QQ15+3
115+  8178              											;	70		QQ15+4
116+  8178              											;	71		QQ15+5
117+  8178 00           QQ17					DB	0				;   72
118+  8179 00           XX18xlo                 DB  0               ;	72		XX18   xlo
119+  817A 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
120+  817B 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
121+  817C 00           XX18ylo                 DB  0               ;	75		XX18   ylo
122+  817D 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
123+  817E 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
124+  817F 00           XX18zlo                 DB  0               ;	78		XX18   zlo
125+  8180 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
126+  8181 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
127+  8182
128+  8182 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
129+  8183 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
130+  8184 00           DELT4Lo					DB 	0				; 7E
131+  8185 00           DELT4Hi					DB 	0				; 7F
132+  8186              DELTA4                  equ                 DELT4Lo
133+  8186
134+  8186
135+  8186              ; Not thise must be in this order else 16 bit fetches will fail
136+  8186 00           varU                    DB  0               ;   80
137+  8187 00           varQ					DB  0 				;	81
138+  8188 00           varR					DB  0 				;	82
139+  8189 00           varS					DB  0 				;	83
140+  818A              varRS                   equ varR
141+  818A
142+  818A 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
143+  818C
144+  818C 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
145+  818D 00           YSAV                    DB  0               ; 85
146+  818E 00           XX17					DB	0				; 86
147+  818F              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
148+  818F              varXX17                 equ  XX17
149+  818F 00           ScreenChanged           DB  0
150+  8190 00           ScreenIndex             DB  0
151+  8191 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
152+  8192                                                          ; 7    6    5    4     3    2        1    0
153+  8192                                                          ; Up   Down Left Right Home Recentre
154+  8192 00           InvertedYAxis           DB  0
155+  8193 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
156+  8194              											; Bit 7 Set  ShortRangeChart    $80
157+  8194              											; Bit 6 Set  Galactic Chart     $40
158+  8194              											; Bit 5 Set  Market Place       $20
159+  8194              											; Bit 4 Set  Status Screen      $10
160+  8194              											; Bit 3 Set  Display Inventory  $08
161+  8194                                                          ; Bit 2 Set  Planet Data        $04
162+  8194                                                          ; View bit combinations if the ones above not matched
163+  8194                                                          ; bits 1 0
164+  8194                                                          ;      1 1  Front view , i.e. $03
165+  8194                                                          ;      1 0  Aft View          $02
166+  8194                                                          ;      0 1  Left View         $01
167+  8194                                                          ;      0 0  Right view        $00
168+  8194              											; Bit 0 Set  Data On System
169+  8194              											; 0  Space View (Not a menu)
170+  8194 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
171+  8195 00           XX13                    DB  0               ;   89
172+  8196 00           TYPE					DB	0				; 8C used for ship type in drawing
173+  8197              ;Docked flag = 00 = in free space
174+  8197              ;              FF = Docked
175+  8197              ;              FE = transition
176+  8197              ;              FD = Setup open space and transition to not docked
177+  8197              ;              FC = Hyperspace manimation
178+  8197              ;              FB = Hyperspace complete
179+  8197 00           DockedFlag				DB	0				; 8E -
180+  8198 00           GamePaused              DB  0
181+  8199 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
182+  819A 00           varCNT                  DB  0               ; 93
183+  819B
184+  819B 00           varK					DB	0				; 40
185+  819C 00           varKp1					DB	0				; 41
186+  819D 00           varKp2					DB	0				; 42
187+  819E 00           varKp3					DB	0				; 43
188+  819F
189+  819F 00           varK2                   DB  0               ; 9B
190+  81A0 00           varK2p1                 DB  0               ; 9C K2 plus 1
191+  81A1 00           varK2p2                 DB  0               ; 9D K2 plus 2
192+  81A2 00           varK2p3                 DB  0               ; 9E K2 plus 3
193+  81A3
194+  81A3 00           Point                   DB  0               ; 9F      POINT
195+  81A4
196+  81A4 00           varT					DB	0				; D1
197+  81A5
198+  81A5 00 00 00...  varVector9ByteWork      DS  9
199+  81AE
200+  81AE 00 00 00 00  varK3					DS	4				; D2
201+  81B2 00           varK3p2					DB	0				; 42
202+  81B3 00           varK3p3					DB	0				; 43
203+  81B4              varK3p1					equ varK3+1			; D3
204+  81B4 00 00 00 00  varK4					DS	4				; E0
205+  81B8              varK4p1					equ varK4+1			; D3
206+  81B8
207+  81B8
208+  81B8              ;Heap
209+  81B8
210+  81B8 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
211+  81BA 00 00 00...  HeapData				DS	50
212+  81EC              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
213+  81EC              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
214+  81EC              ; i.e. a list of programmed missiles in universe slot list code
215+  81EC 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
216+  81F3              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
217+  81F3              ;  #&5 Does J reverse both joystick channels
218+  81F3              ;  #&4 Does Y reverse joystick Y channel			03CB
219+  81F3              ;  #&2 Does X toggle startup message display ? PATG?	03C9
220+  81F3              ;  #&3 Does F toggle flashing information			03CA
221+  81F3              ;  #&1 Does A toggle keyboard auto-recentering ?
222+  81F3              ;  #&0 Caps-lock toggles keyboard flight damping
223+  81F3 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
224+  81F4 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
225+  81F5 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
226+  8205 00           AlienItemsAvaliability  DB	0				; 039D
227+  8206 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
228+  8207 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
229+  8209 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
230+  820A              											;
231+  820A 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
232+  820B 00           MarketPrice				DB	0				; 03AA QQ24
233+  820C 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
234+  820D 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
235+  820E 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
236+  820F 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
237+  8211              											; this is ship lines stack pointer so may be redundant with paging
238+  8211              											; LS = line stack so we will have one for now to remove later
239+  8211 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
240+  8212 00           DisplayEcononmy			DB	0				; 03B8
241+  8213 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
242+  8214 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
243+  8215 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
244+  8217 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
245+  8219 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
246+  821B 00 00        DisplayRadius			DW	0
247+  821D              ; --- Used in creation of sun and planet----;
248+  821D 00           PlanetXPos              DS  1
249+  821E 00           PlanetYPos              DS  1
250+  821F 00           PlanetZPos              DS  1
251+  8220 00           PlanetType              DS  1
252+  8221 00           SunXPos                 DS  1
253+  8222 00           SunYPos                 DS  1
254+  8223 00           SunZPos                 DS  1
255+  8224              ; -- Current Missile Runbtime data
256+  8224 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
257+  8225 00 00        MissileXPos             DW      0
258+  8227 00           MissileXSgn             DB      0
259+  8228 00 00        MissileYPos             DW      0
260+  822A 00           MissileYSgn             DB      0
261+  822B 00 00        MissileZPos             DW      0
262+  822D 00           MissileZSgn             DB      0
263+  822E 00 00        CurrentTargetXpos       DS      2
264+  8230 00 00        CurrentTargetXsgn       DS      2
265+  8232 00 00        CurrentTargetYpos       DS      2
266+  8234 00 00        CurrentTargetYsgn       DS      2
267+  8236 00 00        CurrentTargetZpos       DS      2
268+  8238 00 00        CurrentTargetZsgn       DS      2
269+  823A 00 00        TargetVectorXpos        DS      2
270+  823C 00 00        TargetVectorXsgn        DS      2
271+  823E 00 00        TargetVectorYpos        DS      2
272+  8240 00 00        TargetVectorYsgn        DS      2
273+  8242 00 00        TargetVectorZpos        DS      2
274+  8244 00 00        TargetVectorZsgn        DS      2
275+  8246 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
276+  8247 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
277+  8248 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
278+  8249 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
279+  824A
280+  824A              ; --- Main Loop Data -----------------------;
281+  824A 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
282+  824B 00           SelectedUniverseSlot    DB  0
283+  824C 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
284+  824D 00           ShipBlastCheckCounter   DB  0
285+  824E 00           EventCounter    		DB 	0				; 8A
286+  824F 00           MissJumpFlag            DB  0
287+  8250 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
288+  8251 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
289+  8252 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
290+  8253 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
291+  8254 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
292+  8255 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
293+  8256              UniverseSlotListSize    equ	12
294+  8256 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
295+  8262 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
296+  826E              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
297+  826E 04           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
298+  826F 00           ConsoleRedrawFlag       DB  0
299+  8270 00           TextInputMode           DB  0
300+  8271              ; --- Current System Data ------------------;
301+  8271 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
302+  8272 00           ExtraVesselsCounter     DB  0
303+  8273 00           JunkCount				DB  0				; $033E
304+  8274 00           AsteroidCount           DB  0               ; Not used as yet
305+  8275 00           TransporterCount        DB  0
306+  8276 00           CopCount                DB  0
307+  8277 00           PirateCount             DB  0
308+  8278              ; --- Galaxy Data --------------------------;
309+  8278 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
310+  8279 00 00 00...  WorkingSeeds			DS	6
311+  827F 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
312+  8285 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
313+  828B 00           PresentSystemX			DB	0				; System we are currently in
314+  828C 00           PresentSystemY			DB  0				; System we are currently in
315+  828D 00           TargetSystemX			DB	0				; System we are targeting for jump
316+  828E 00           TargetSystemY			DB	0				; System we are targeting for jump
317+  828F 00           GovPresentSystem		DB	0				; 03AE Govenment
318+  8290 00           TekPresentSystem		DB	0				; 03AF Technology
319+  8291
320+  8291 00           CompassColor			DB	0				; 03C5
321+  8292 00           SoundToggle				DB	0				; 03C6
322+  8293 00           KeyboardRecenterToggle	DB	0				; 03C8
323+  8294 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
324+  8295 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
325+  8296 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
326+  8297 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
327+  8298 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
328+  8299 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
329+  829A
330+  829A              ; Working Data
331+  829A
332+  829A              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
333+  829A              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
334+  829A              ; $0925 =	EQUW page9+37* 1
335+  829A              ; $094A =	EQUW page9+37* 2
336+  829A              ; $096F =	EQUW page9+37* 3
337+  829A              ; $0994 =	EQUW page9+37* 4
338+  829A              ; $09B9 =	EQUW page9+37* 5
339+  829A              ; $09DE =	EQUW page9+37* 6
340+  829A              ; $0A03 =	EQUW page9+37* 7
341+  829A              ; $0A28 =	EQUW page9+37* 8
342+  829A              ; $0A4D =	EQUW page9+37* 9
343+  829A              ; $0A72 =	EQUW page9+37*10
344+  829A              ; $0A97 =	EQUW page9+37*11
345+  829A              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
346+  829A
347+  829A
348+  829A
349+  829A              ; 0b00 is start address of data to save
350+  829A              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
351+  829A              											; Bit mask XXXX10XX - Thargoid plan mission
352+  829A
353+  829A 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
354+  829B
355+  829B 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
356+  829D 00 00        CommanderLoadAddress	DW	0				;0C03
357+  829F 00 00        LengthOfFile			DW	0				;0C0B
358+  82A1 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
359+  82A3
360+  82A3 00 00 00...  EdgesBuffer				DS 50
361+  82D5              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
362+  82D5              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
363+  82D5
364+  82D5 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
365+  831B              ShipLineStackTop		equ $ - ShipLineStack
366+  831B
367+  831B 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
368+  83DB              ; LSX vector overlaps with LSO
369+  83DB 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
370+  83DC 00           LSY2					DB	0           	; &0F0E	    \ LSY2
371+  83DD
372+  83DD              ; Star Positions are 16 bit 3d coordinates
373+  83DD 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
374+  841F 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
375+  8435 00           varStarX                DB  0
376+  8436 00           varStarY                DB  0
377+  8437 00 00 00...  varDustX                DS MaxNumberOfStars *2
378+  844D 00 00 00...  varDustY                DS MaxNumberOfStars *2
379+  8463 00 00 00...  varDustZ                DS MaxNumberOfStars *2
380+  8479              ; -- Player Runtime Data
381+  8479 00           GunTemperature          DB  0
382+  847A 00           CabinTemperature        DB  0
383+  847B 00           PlayerForwardSheild0	DB	0 ; ?????
384+  847C 00           PlayerForwardSheild1    DB	0
385+  847D 00           PlayerForwardSheild2    DB	0
386+  847E 00           ForeShield				DB	0				; 03A5
387+  847F 00           AftShield				DB	0				; 03A6
388+  8480 00           PlayerEnergy			DB	0				; 03A7
389+  8481 00           CompassX				DB	0				; 03A8
390+  8482 00           CompassY				DB	0				; 03A9
391+  8483 00           MissileTarget			DB  0				; 45
392+  8484 00           MissileLaunchFlag       DB  0
393+  8485 00 00 00...  CommanderName           DS  15
394+  8494 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
395+  8495 00           BadnessStatus           DB  0
396+  8496              ; -- Input variables
397+  8496 00           JoystickX				DB	0				; 034C JSTX
398+  8497 00           JoystickY				DB	0				; 034D JSTY
399+  8498 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
400+  8499 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
401+  849A
402+  849A              ; -- Console drawing data
403+  849A              FShieldStart            equ $8410
404+  849A              AShieldStart            equ $8D10
405+  849A              FuelStart               equ $9410
406+  849A
407+  849A              EnergyBar4Start         equ $A5D5
408+  849A              EnergyBar3Start         equ $ADD5
409+  849A              EnergyBar2Start         equ $B5D5
410+  849A              EnergyBar1Start         equ $BDD5
411+  849A              ; 70 /2 = 35 values
412+  849A              ;                            0                             1                             2                             3
413+  849A              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
414+  849A 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
414+  849E 04 04 05 06
414+  84A2 06 07 08 09
414+  84A6 0A 0A 0B 0C
414+  84AA 0D 0E 0E 0F
414+  84AE 10 10 11 13
414+  84B2 14 15 15 16
414+  84B6 17 18 19 1A
414+  84BA 1B 1C 1E 1F
414+  84BE 1F
415+  84BF              SpeedoStart             equ $84D1
416+  84BF              ;                            0                             1                             2                             3                             4
417+  84BF              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
418+  84BF 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
418+  84C3 04 04 05 06
418+  84C7 06 07 08 09
418+  84CB 0A 0A 0B 0C
418+  84CF 0D 0E 0E 0F
418+  84D3 10 10 11 12
418+  84D7 13 14 14 15
418+  84DB 16 17 18 18
418+  84DF 19 1A 1A 1B
418+  84E3 1C 1C 1D 1E
418+  84E7 1F
419+  84E8
420+  84E8              DialMiddleXPos          equ $E1
421+  84E8              RollMiddle              equ $8CE0
422+  84E8              PitchMiddle             equ $94E0
423+  84E8
424+  84E8
425+  84E8              ResetPlayerShip:        ZeroThrottle
425+  84E8 AF          >                        xor     a
425+  84E9 32 83 81    >                        ld      (DELTA),a
425+  84EC 32 84 81    >                        ld      (DELT4Lo),a
425+  84EF 32 85 81    >                        ld      (DELT4Lo+1),a
426+  84F2                                      ZeroPitch
426+  84F2 AF          >                        xor     a
426+  84F3 32 8F 80    >                        ld      (BET2),a
426+  84F6 32 90 80    >                        ld      (BET2FLIP),a
426+  84F9 32 8D 80    >                        ld      (JSTY),a
426+  84FC 32 8C 80    >                        ld      (BETA),a
427+  84FF                                      ZeroRoll
427+  84FF AF          >                        xor     a                              ; zero roll and climb
427+  8500 32 9F 80    >                        ld      (ALP2),a
427+  8503 32 A0 80    >                        ld      (ALP2FLIP),a
427+  8506 32 9B 80    >                        ld      (JSTX),a
427+  8509 32 9D 80    >                        ld      (ALPHA),a
428+  850C                                      ClearMissileTarget
428+  850C AF          >                        xor     a                           ; Set missile target to FF
428+  850D 3D          >                        dec     a
428+  850E 32 83 84    >                        ld      (MissileTarget),a
428+  8511             >                        SetMemFalse MissileLaunchFlag
428+  8511 3E FF       >                        ld      a,$FF
428+  8513 32 84 84    >                        ld      (MissileLaunchFlag),a
429+  8516                                      ClearECM
429+  8516 AF          >                        xor     a
429+  8517 32 99 80    >                        ld      (ECMLoopA),a
429+  851A 32 9A 80    >                        ld      (ECMLoopB),a
430+  851D                                      ChargeEnergyAndShields
430+  851D 3E FF       >                        ld      a,$FF
430+  851F 32 80 84    >                        ld      (PlayerEnergy),a
430+  8522 32 7E 84    >                        ld      (ForeShield),a
430+  8525 32 7F 84    >                        ld      (AftShield),a
431+  8528 C9                                   ret
432+  8529
# file closed: ../Variables/general_variables.asm
 70   8529
 71   8529              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 72   8529 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 73   852A AA                                   xor     d                   ; .
 74   852B E6 80                                and     SignOnly8Bit        ; .
 75   852D 20 19                                jr      nz,.SignDifferent   ; .
 76   852F 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 77   8530 E6 80                                and     SignOnly8Bit        ; so store it in iyh
 78   8532 FD 67                                ld      iyh,a               ;
 79   8534 78                                   ld      a,b                 ; bch = abs bch
 80   8535 E6 7F                                and     SignMask8Bit        ; .
 81   8537 47                                   ld      b,a                 ; .
 82   8538 7A                                   ld      a,d                 ; del = abs del
 83   8539 E6 7F                                and     SignMask8Bit        ; .
 84   853B 57                                   ld      d,a                 ; .
 85   853C 7C                                   ld      a,h                 ; l = h + l
 86   853D 85                                   add     l                   ; .
 87   853E 6F                                   ld      l,a                 ; .
 88   853F 79                                   ld      a,c                 ; e = e + c + carry
 89   8540 8B                                   adc     e                   ; .
 90   8541 5F                                   ld      e,a                 ; .
 91   8542 78                                   ld      a,b                 ; d = b + d + carry (signed)
 92   8543 8A                                   adc     d                   ;
 93   8544 FD B4                                or      iyh                 ; d = or back in sign bit
 94   8546 57                                   ld      d,a                 ;
 95   8547 C9                                   ret                         ; done
 96   8548 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 97   8549 FD 67                                ld      iyh,a               ; iyh = b sign
 98   854B E6 7F                                and     SignMask8Bit        ; .
 99   854D 47                                   ld      b,a                 ; .
100   854E 7A                                   ld      a,d                 ; del = abs del
101   854F FD 6F                                ld      iyl,a               ; iyl = d sign
102   8551 E6 7F                                and     SignMask8Bit        ; .
103   8553 57                                   ld      d,a                 ; .
104   8554 E5                                   push    hl                  ; hl = bc - de
105   8555 60 69                                ld      hl,bc               ; if bc < de then there is a carry
106   8557 ED 52                                sbc     hl,de               ;
107   8559 E1                                   pop     hl                  ;
108   855A 38 0E                                jr      c,.BCHltDEL
109   855C 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
110   855E 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
111   855F                                      JumpIfALTNusng l,.BCHltDEL
111   855F BD          >                        cp      l
111   8560 DA 6A 85    >                        jp		c, .BCHltDEL
112   8563 20 15                                jr      nz,.DELltBCH
113   8565              ; The same so its just zero
114   8565 AF           .BCHeqDEL:              xor     a                  ; its just zero
115   8566 57                                   ld      d,a                ; .
116   8567 5F                                   ld      e,a                ; .
117   8568 6F                                   ld      l,a                ; .
118   8569 C9                                   ret                        ; .
119   856A              ;BCH is less than DEL so its DEL - BCH the sort out sign
120   856A 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
121   856B 94                                   sub     h                  ; .                              ;   01D70F DEL
122   856C 6F                                   ld      l,a                ; .                              ;  -000028 BCH
123   856D 7B                                   ld      a,e                ; e = e - c - carry              ;1.
124   856E 99                                   sbc     c                  ; .                              ;
125   856F 5F                                   ld      e,a                ; .                              ;
126   8570 7A                                   ld      a,d                ; d = d - b - carry              ;
127   8571 98                                   sbc     b                  ; .                              ;
128   8572 57                                   ld      d,a                ; .                              ;
129   8573 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
130   8575 E6 80                                and     SignOnly8Bit       ;
131   8577 B2                                   or      d                  ;
132   8578 57                                   ld      d,a                ;
133   8579 C9                                   ret
134   857A 7C           .DELltBCH:              ld      a,h                ; l = h - l
135   857B 95                                   sub     l                  ;
136   857C 6F                                   ld      l,a                ;
137   857D 79                                   ld      a,c                ; e = c - e - carry
138   857E 9B                                   sbc     e                  ;
139   857F 5F                                   ld      e,a                ;
140   8580 78                                   ld      a,b                ; d = b - d - carry
141   8581 9A                                   sbc     d                  ;
142   8582 57                                   ld      d,a                ;
143   8583 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
144   8585 E6 80                                and     SignOnly8Bit       ;
145   8587 B2                                   or      d                  ;
146   8588 57                                   ld      d,a                ;
147   8589 C9                                   ret
148   858A
149   858A
150   858A                                      STRUCT testCase
151   858A ~            SrcH                    BYTE 1
152   858A ~            SrcC                    BYTE 2
153   858A ~            SrcB                    BYTE 3
154   858A ~            SrcL                    BYTE 4
155   858A ~            SrcE                    BYTE 5
156   858A ~            SrcD                    BYTE 6
157   858A ~            ExpectedL               BYTE 7
158   858A ~            ExpectedE               BYTE 8
159   858A ~            ExpectedD               BYTE 9
160   858A ~            ActualL                 BYTE 10
161   858A ~            ActualE                 BYTE 11
162   858A ~            ActualD                 BYTE 12
163   858A ~            Padding1                BYTE 13
164   858A ~            Padding2                BYTE 14
165   858A ~            Padding3                BYTE 15
166   858A ~            PassFail                BYTE 16
167   858A                                      ENDS
168   858A              ;                            01   02   03   04   05   06   07   08   09   10   11   12   13   14   15   16
169   858A 05 05 00 05  TestCase1               DB  $05, $05, $00, $05, $05, $00, $0A, $0A, $00, $00, $00, $00, $00, $00, $01, $00 ; basic
169   858E 05 00 0A 0A
169   8592 00 00 00 00
169   8596 00 00 01 00
170   859A 05 05 03 05  TestCase2               DB  $05, $05, $03, $05, $05, $03, $0A, $0A, $06, $00, $00, $00, $00, $00, $02, $00 ; basic 3 byte
170   859E 05 03 0A 0A
170   85A2 06 00 00 00
170   85A6 00 00 02 00
171   85AA 05 05 83 05  TestCase3               DB  $05, $05, $83, $05, $05, $03, $00, $00, $00, $00, $00, $00, $00, $00, $03, $00 ; - + = 0
171   85AE 05 03 00 00
171   85B2 00 00 00 00
171   85B6 00 00 03 00
172   85BA 05 05 03 05  TestCase4               DB  $05, $05, $03, $05, $05, $83, $00, $00, $00, $00, $00, $00, $00, $00, $04, $00 ; + -  =0
172   85BE 05 83 00 00
172   85C2 00 00 00 00
172   85C6 00 00 04 00
173   85CA 05 05 83 05  TestCase5               DB  $05, $05, $83, $05, $05, $83, $0A, $0A, $86, $00, $00, $00, $00, $00, $05, $00 ; - -  add
173   85CE 05 83 0A 0A
173   85D2 86 00 00 00
173   85D6 00 00 05 00
174   85DA 05 05 83 05  TestCase6               DB  $05, $05, $83, $05, $05, $02, $00, $00, $81, $00, $00, $00, $00, $00, $06, $00 ; - +<1
174   85DE 05 02 00 00
174   85E2 81 00 00 00
174   85E6 00 00 06 00
175   85EA 05 05 03 05  TestCase7               DB  $05, $05, $03, $05, $02, $83, $00, $03, $00, $00, $00, $00, $00, $00, $07, $00 ; + -<1
175   85EE 02 83 00 03
175   85F2 00 00 00 00
175   85F6 00 00 07 00
176   85FA 05 02 82 05  TestCase8               DB  $05, $02, $82, $05, $05, $03, $00, $03, $01, $00, $00, $00, $00, $00, $08, $00 ; - +>1
176   85FE 05 03 00 03
176   8602 01 00 00 00
176   8606 00 00 08 00
177   860A 05 02 03 05  TestCase9               DB  $05, $02, $03, $05, $05, $83, $00, $03, $80, $00, $00, $00, $00, $00, $09, $00 ; + ->1
177   860E 05 83 00 03
177   8612 80 00 00 00
177   8616 00 00 09 00
178   861A 09           testTotal               DB  ($-TestCase1)/16
179   861B 00           testCounter             DB   0
180   861C
181   861C
182   861C                  SAVENEX OPEN "mathssun2.nex", $8000 , $7F00
183   861C                  SAVENEX CFG  0,0,0,1
184   861C                  SAVENEX AUTO
185   861C                  SAVENEX CLOSE
186   861C
# file closed: mathstestssun2.asm
