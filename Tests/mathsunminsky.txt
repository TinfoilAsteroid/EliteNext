# file opened: mathsunminsky.asm
  1   0000                                      DEVICE ZXSPECTRUMNEXT
  2   0000                                      DEFINE  DOUBLEBUFFER 1
  3   0000                                      CSPECTMAP mathsunminsky.map
  4   0000                                      OPT --zxnext=cspect --syntax=a --reversepop
  5   0000
  6   0000              testStartup:            ORG         $8000
  7   8000
  8   8000 DD 21 F9 87                          ld      ix, TestCase1
  9   8004 3A 9C 8E     .TestLoop:              ld      a,(testCounter)
 10   8007 21 9A 8E                             ld      hl, testTotal
 11   800A BE                                   cp      (hl)
 12   800B CA BF 80                             jp     z,.Done
 13   800E 01 09 00     .CopyXYZ:               ld      bc,9
 14   8011 DD E5                                push    ix
 15   8013 E1                                   pop     hl
 16   8014 11 A9 8E                             ld      de,SBnKxlo
 17   8017 ED B0                                ldir
 18   8019 7E                                   ld      a,(hl)
 19   801A 32 99 83                             ld      (ALPHA),a
 20   801D 23                                   inc     hl
 21   801E 7E                                   ld      a,(hl)
 22   801F 32 8B 83                             ld      (BETA),a
 23   8022 CD C5 8E                             call    SunApplyMyRollAndPitch
 24   8025 DD E5        .SaveResults:           push    ix
 25   8027 E1                                   pop     hl
 26   8028 3E 20                                ld      a,32
 27   802A ED 31                                add     hl,a
 28   802C EB                                   ex      hl,de
 29   802D 21 A9 8E                             ld      hl,SBnKxlo
 30   8030 01 09 00                             ld      bc,9
 31   8033 ED B0                                ldir
 32   8035 EB                                   ex      de,hl
 33   8036 FD 2E 58     .TestX:                 ld      iyl,'X'
 34   8039 DD E5                                push    ix
 35   803B E1                                   pop     hl
 36   803C 3E 10                                ld      a,16
 37   803E ED 31                                add     hl,a
 38   8040 11 A9 8E                             ld      de,SBnKxlo
 39   8043 1B                                   dec     de
 40   8044 01 03 00                             ld      bc,3
 41   8047 13           .NextXByte:             inc     de
 42   8048 1A                                   ld      a,(de)
 43   8049 ED A1                                cpi
 44   804B E2 54 80                             jp      po,.TestY
 45   804E CA 47 80                             jp      z,.NextXByte
 46   8051 C3 93 80                             jp      .failed
 47   8054 FD 2E 59     .TestY:                 ld      iyl,'Y'
 48   8057 DD E5                                push    ix
 49   8059 E1                                   pop     hl
 50   805A 3E 13                                ld      a,16 + 3
 51   805C ED 31                                add     hl,a
 52   805E 11 AC 8E                             ld      de,SBnKylo
 53   8061 1B                                   dec     de
 54   8062 01 03 00                             ld      bc,3
 55   8065 13           .NextYByte:             inc     de
 56   8066 1A                                   ld      a,(de)
 57   8067 ED A1                                cpi
 58   8069 E2 72 80                             jp      po,.TestZ
 59   806C CA 65 80                             jp      z,.NextYByte
 60   806F C3 93 80                             jp      .failed
 61   8072 FD 2E 5A     .TestZ:                 ld      iyl,'Z'
 62   8075 DD E5                                push    ix
 63   8077 E1                                   pop     hl
 64   8078 3E 16                                ld      a,16 + 6
 65   807A ED 31                                add     hl,a
 66   807C 11 AF 8E                             ld      de,SBnKzlo
 67   807F 1B                                   dec     de
 68   8080 01 03 00                             ld      bc,3
 69   8083 13           .NextZByte:             inc     de
 70   8084 1A                                   ld      a,(de)
 71   8085 ED A1                                cpi
 72   8087 E2 90 80                             jp      po,.TestDone
 73   808A CA 83 80                             jp      z,.NextZByte
 74   808D C3 93 80                             jp      .failed
 75   8090 FD 2E 50     .TestDone:              ld      iyl,'P'
 76   8093 DD E5 E1     .failed:                ld      hl,ix
 77   8096 3E 0F                                ld      a,15
 78   8098 ED 31                                add     hl,a
 79   809A FD 7D                                ld      a,iyl
 80   809C 77                                   ld      (hl),a
 81   809D 3E 10                                ld      a,16
 82   809F ED 31                                add     hl,a
 83   80A1 FD 7D                                ld      a,iyl
 84   80A3 77                                   ld      (hl),a
 85   80A4 3E 10                                ld      a,16
 86   80A6 ED 31                                add     hl,a
 87   80A8 FD 7D                                ld      a,iyl
 88   80AA 77                                   ld      (hl),a
 89   80AB 32 9E 8E                             ld      (FailPoint),a
 90   80AE DD E5 E1                             ld      hl,ix
 91   80B1 3E 30                                ld      a,48
 92   80B3 ED 31                                add     hl,a
 93   80B5 E5 DD E1                             ld      ix,hl
 94   80B8 21 9C 8E                             ld      hl,testCounter
 95   80BB 34                                   inc     (hl)
 96   80BC C3 04 80                             jp      .TestLoop
 97   80BF
 98   80BF DD 01        .Done                   break
 99   80C1 C3 BF 80                             jp      .Done                   ; complete tight loop
100   80C4
101   80C4                                      INCLUDE "../Variables/constant_equates.asm"
# file opened: ../Variables/constant_equates.asm
  1+  80C4              ;Contants
  2+  80C4
  3+  80C4              SignMask8Bit		equ %01111111
  4+  80C4              SignMask16Bit		equ %0111111111111111
  5+  80C4              SignOnly8Bit		equ $80
  6+  80C4              SignOnly16Bit		equ $8000
  7+  80C4
  8+  80C4              Bit7Only            equ %10000000
  9+  80C4              Bit6Only            equ %01000000
 10+  80C4              Bit5Only            equ %00100000
 11+  80C4              Bit4Only            equ %00010000
 12+  80C4              Bit3Only            equ %00001000
 13+  80C4              Bit2Only            equ %00000100
 14+  80C4              Bit1Only            equ %00000010
 15+  80C4              Bit0Only            equ %00000001
 16+  80C4              Bit7Clear           equ %01111111
 17+  80C4              Bit6Clear           equ %10111111
 18+  80C4              Bit5Clear           equ %11011111
 19+  80C4              Bit4Clear           equ %11101111
 20+  80C4              Bit3Clear           equ %11110111
 21+  80C4              Bit2Clear           equ %11111011
 22+  80C4              Bit1Clear           equ %11111101
 23+  80C4              Bit0Clear           equ %11111110
 24+  80C4              ConstPi				equ $80
 25+  80C4              ConstNorm           equ 197
 26+  80C4
 27+  80C4              ;Text Tokens
 28+  80C4              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
 29+  80C4              BrabenBellToken 	equ $0D
 30+  80C4              AcorToken			equ $0C
 31+  80C4
 32+  80C4              ; Intro Screen
 33+  80C4              TitleShip			equ	$8C
 34+  80C4              RotationUnity		equ $60
 35+  80C4              DBCheckCode			equ $DB
 36+  80C4              MaxVisibility		equ $1F
 37+  80C4              FarInFront			equ $C0
 38+  80C4
 39+  80C4              ; Universe Managment
 40+  80C4              ShipTypeJunk        equ 3
 41+  80C4              ShipTypeStation     equ 2
 42+  80C4              ShipTypeMissile     equ 1
 43+  80C4              ShipTypeNormal      equ 0
 44+  80C4              ShipTypeText        equ 253
 45+  80C4              ShipTypeDebug       equ 254
 46+  80C4              ShipTypeEmpty       equ 255
 47+  80C4              ; TacticsControl
 48+  80C4              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 49+  80C4              ShipIsBountyHunter  equ Bit1Only   ;
 50+  80C4              ShipIsHostile       equ Bit2Only   ;
 51+  80C4              ShipNotHostile      equ Bit2Clear   ;
 52+  80C4              ShipIsPirate        equ Bit3Only   ;
 53+  80C4              ShipIsDocking       equ Bit4Only   ;
 54+  80C4              ShipIsBystander     equ Bit5Only   ;
 55+  80C4              ShipIsCop           equ Bit6Only   ;
 56+  80C4              ShipIsScoopDockEsc  equ Bit7Only   ;
 57+  80C4              ShipAIEnabled       equ Bit7Only   ;
 58+  80C4              ShipExploding       equ Bit5Only
 59+  80C4              ShipKilled          equ Bit7Clear
 60+  80C4
 61+  80C4              ; UniverseAIControl
 62+  80C4              ShipCanAnger        equ %00000001
 63+  80C4
 64+  80C4
 65+  80C4              ShipMaxDistance     equ 192
 66+  80C4              HyperSpaceTimers    equ $0B0B
 67+  80C4
 68+  80C4
 69+  80C4              MaxNumberOfStars	equ 11
 70+  80C4              ConsoleRefreshInterval  equ 4
 71+  80C4
 72+  80C4              ShipTypeSize		equ	32 			;??????? just a guess for now
 73+  80C4              ShipSST				equ 4			; its a space station
 74+  80C4              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 75+  80C4              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 76+  80C4              ShipCountMax		equ	2			; For now just 2 ships to debug
 77+  80C4              LineLimitPerShip	equ 70			; Max lines per ship
 78+  80C4              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 79+  80C4              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 80+  80C4              PlayerDocked		equ	$FF
 81+  80C4
 82+  80C4              ; Memory page managment	(Refers to a memory slot as a place to access data)
 83+  80C4              ShipDataSlot		equ	6			; this may move into rom swap out space later
 84+  80C4              UniverseObjectSlot	equ	7
 85+  80C4
 86+  80C4              KeyForwardsView		equ	$20
 87+  80C4              ; Game specific equates
 88+  80C4              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 89+  80C4
 90+  80C4              ;...Game Colour Mapping
 91+  80C4              L2DustColour        equ L2ColourGREY_1
 92+  80C4              L2SunScannerBright  equ 252
 93+  80C4              L2SunScanner        equ 180
 94+  80C4
 95+  80C4
 96+  80C4              ; Ship Data
 97+  80C4              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 98+  80C4              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 99+  80C4              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
100+  80C4              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
101+  80C4              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
102+  80C4              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
103+  80C4              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
104+  80C4              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
105+  80C4              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
106+  80C4              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
107+  80C4              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
108+  80C4              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
109+  80C4              ;;;;00 00			 EQUW 0     \ type 12 is       Python
110+  80C4              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
111+  80C4              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
112+  80C4              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
113+  80C4              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
114+  80C4              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
115+  80C4              ;;;;00 00			 EQUW 0     \ type 18 is
116+  80C4              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
117+  80C4              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
118+  80C4              ;;;;00 00			 EQUW 0     \ type 21 is
119+  80C4              ;;;;00 00			 EQUW 0     \ type 22 is
120+  80C4              ;;;;00 00			 EQUW 0     \ type 23 is
121+  80C4              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
122+  80C4              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
123+  80C4              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
124+  80C4              ;;;;00 00			 EQUW 0     \ type 27 is
125+  80C4              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
126+  80C4              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
127+  80C4              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
128+  80C4              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
129+  80C4              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
130+  80C4              ;;;;			\ NEWB examples
131+  80C4              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
132+  80C4              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
133+  80C4              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
134+  80C4              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
135+  80C4              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
136+  80C4
# file closed: ../Variables/constant_equates.asm
102   80C4                                      INCLUDE "../Hardware/L2ColourDefines.asm"
# file opened: ../Hardware/L2ColourDefines.asm
  1+  80C4              L2ColourBLACK           EQU   0
  2+  80C4              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
  3+  80C4              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
  4+  80C4              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
  5+  80C4              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
  6+  80C4              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
  7+  80C4              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
  8+  80C4              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
  9+  80C4              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
 10+  80C4              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
 11+  80C4              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
 12+  80C4              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
 13+  80C4              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
 14+  80C4              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
 15+  80C4              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
 16+  80C4              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
 17+  80C4              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
 18+  80C4              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
 19+  80C4              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
 20+  80C4              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
 21+  80C4              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
 22+  80C4              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
 23+  80C4              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
 24+  80C4              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
 25+  80C4
 26+  80C4
 27+  80C4              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
 28+  80C4              L2ColourWHITE_2         EQU 146
 29+  80C4              L2ColourGREY_1		    EQU L2ColourWHITE_2
 30+  80C4              L2ColourGREY_2		    EQU 109
 31+  80C4              L2ColourGREY_3		    EQU  73
 32+  80C4              L2ColourGREY_4		    EQU  37
 33+  80C4
 34+  80C4              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
 35+  80C4              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
 36+  80C4              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
 37+  80C4              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
 38+  80C4              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
 39+  80C4
 40+  80C4              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
 41+  80C4              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
 42+  80C4              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
 43+  80C4              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
 44+  80C4              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
 45+  80C4              L2ColourORANGE_1        EQU 236                 ; RGB
 46+  80C4              L2ColourORANGE_2        EQU 168                 ; RGB
 47+  80C4              L2ColourORANGE_3        EQU  68                 ; RGB
 48+  80C4              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
 49+  80C4              L2ColourCYAN_2          EQU  18                 ; RGB
 50+  80C4              L2ColourCYAN_3          EQU   9                 ; RGB
 51+  80C4              L2ColourPURPLE_1        EQU 109                 ; RGB
 52+  80C4              L2ColourPURPLE_2        EQU  66                 ; RGB
 53+  80C4              L2ColourPURPLE_3        EQU  33                 ; RGB
 54+  80C4              L2ColourPINK_1		    EQU 231                 ; RGB
 55+  80C4              L2ColourPINK_2		    EQU 226                 ; RGB
 56+  80C4              L2ColourPINK_3		    EQU 225                 ; RGB
 57+  80C4              L2ColourPINK_4		    EQU 224                 ; RGB
 58+  80C4
# file closed: ../Hardware/L2ColourDefines.asm
103   80C4                                      INCLUDE "../Macros/carryFlagMacros.asm"
# file opened: ../Macros/carryFlagMacros.asm
  1+  80C4
  2+  80C4              SetCarryFlag:           MACRO
  3+  80C4 ~                                    scf
  4+  80C4                                      ENDM
  5+  80C4
  6+  80C4              ClearCarryFlag:	        MACRO
  7+  80C4 ~                                    or a
  8+  80C4                                      ENDM
  9+  80C4
 10+  80C4              FlipCarryFlag:          MACRO
 11+  80C4 ~                                    ccf
 12+  80C4                                      ENDM
 13+  80C4
# file closed: ../Macros/carryFlagMacros.asm
104   80C4                                      INCLUDE "../Macros/signBitMacros.asm"
# file opened: ../Macros/signBitMacros.asm
  1+  80C4              ClearSignBitMem:        MACRO mem
  2+  80C4 ~                                    ld      a,(mem)
  3+  80C4 ~                                    and     SignMask8Bit
  4+  80C4 ~                                    ld      (mem),a
  5+  80C4                                      ENDM
  6+  80C4
  7+  80C4              SetSignBitMem:          MACRO   mem
  8+  80C4 ~                                    ld      a,(mem)
  9+  80C4 ~                                    or      SignOnly8Bit
 10+  80C4 ~                                    ld      (mem),a
 11+  80C4                                      ENDM
 12+  80C4
 13+  80C4              FlipSignMem:            MACRO mem
 14+  80C4 ~                                    ld  a,(mem)
 15+  80C4 ~                                    xor SignOnly8Bit
 16+  80C4 ~                                    ld  (mem),a
 17+  80C4                                      ENDM
 18+  80C4
 19+  80C4              ClearSignBit:           MACRO reg
 20+  80C4 ~                                    ld      a,reg
 21+  80C4 ~                                    and     SignMask8Bit
 22+  80C4 ~                                    ld      reg,a
 23+  80C4                                      ENDM
 24+  80C4
 25+  80C4              SetSignBit:             MACRO   reg
 26+  80C4 ~                                    ld      a,reg
 27+  80C4 ~                                    or      SignOnly8Bit
 28+  80C4 ~                                    ld      reg,a
 29+  80C4                                      ENDM
 30+  80C4
 31+  80C4              FlipSignBit:            MACRO   reg
 32+  80C4 ~                                    ld      a,reg
 33+  80C4 ~                                    xor     SignOnly8Bit
 34+  80C4 ~                                    ld      reg,a
 35+  80C4                                      ENDM
 36+  80C4
 37+  80C4              ClearSignBitA:          MACRO
 38+  80C4 ~                                    and     SignMask8Bit
 39+  80C4                                      ENDM
 40+  80C4
 41+  80C4              SetSignBitA:            MACRO
 42+  80C4 ~                                    or      SignOnly8Bit
 43+  80C4                                      ENDM
 44+  80C4
 45+  80C4              FlipSignBitA:           MACRO
 46+  80C4 ~                                    xor     SignOnly8Bit
 47+  80C4                                      ENDM
 48+  80C4
# file closed: ../Macros/signBitMacros.asm
105   80C4                                      INCLUDE "../Macros/jumpMacros.asm"
# file opened: ../Macros/jumpMacros.asm
  1+  80C4              JumpIfPositive:	        MACRO target
  2+  80C4 ~                                    jp		p, target
  3+  80C4                                      ENDM
  4+  80C4
  5+  80C4              JumpIfNegative:	        MACRO target
  6+  80C4 ~                                    jp		m, target
  7+  80C4                                      ENDM
  8+  80C4
  9+  80C4
 10+  80C4              JumpIfUnderflow:	    MACRO target
 11+  80C4 ~                                    jp		po, target
 12+  80C4                                      ENDM
 13+  80C4
 14+  80C4              JumpIfOverflow:	        MACRO target
 15+  80C4 ~                                    jp		po, target
 16+  80C4                                      ENDM
 17+  80C4
 18+  80C4
 19+  80C4              JumpIfNotZero:	        MACRO target
 20+  80C4 ~                                    jp	nz,target
 21+  80C4                                      ENDM
 22+  80C4
 23+  80C4              JumpIfZero:	            MACRO target
 24+  80C4 ~                                    jp	z,target
 25+  80C4                                      ENDM
 26+  80C4
 27+  80C4              ;.. Bit routines
 28+  80C4              JumpOnLeadSignSet:      MACRO   reg, target
 29+  80C4 ~                                    ld      a,reg
 30+  80C4 ~                                    and     SignOnly8Bit
 31+  80C4 ~                                    jp      nz,target
 32+  80C4                                      ENDM
 33+  80C4
 34+  80C4              JumpOnLeadSignClear:    MACRO   reg, target
 35+  80C4 ~                                    ld      a,reg
 36+  80C4 ~                                    and     SignOnly8Bit
 37+  80C4 ~                                    jp      z,target
 38+  80C4                                      ENDM
 39+  80C4
 40+  80C4              JumpOnLeadSignSetA:     MACRO   target
 41+  80C4 ~                                    and     SignOnly8Bit
 42+  80C4 ~                                    jp      nz,target
 43+  80C4                                      ENDM
 44+  80C4
 45+  80C4              JumpOnLeadSignClearA:   MACRO   target
 46+  80C4 ~                                    and     SignOnly8Bit
 47+  80C4 ~                                    jp      z,target
 48+  80C4                                      ENDM
 49+  80C4
 50+  80C4              JumpOnMemBitSet:        MACRO mem, bitnbr, target
 51+  80C4 ~                                    ld      a,(mem)
 52+  80C4 ~                                    bit 	bitnbr,a
 53+  80C4 ~                                    jp      nz,target
 54+  80C4                                      ENDM
 55+  80C4
 56+  80C4              JumpOnMemBitClear:      MACRO mem, bitnbr, target
 57+  80C4 ~                                    ld      a,(mem)
 58+  80C4 ~                                    bit 	bitnbr,a
 59+  80C4 ~                                    jp      z,target
 60+  80C4                                      ENDM
 61+  80C4
 62+  80C4              JumpOnABit5Set:         MACRO   target
 63+  80C4 ~                                    and     Bit5Only
 64+  80C4 ~                                    jp      nz,target
 65+  80C4                                      ENDM
 66+  80C4
 67+  80C4              JumpOnABit5Clear:       MACRO   target
 68+  80C4 ~                                    and     Bit5Only
 69+  80C4 ~                                    jp      z,target
 70+  80C4                                      ENDM
 71+  80C4
 72+  80C4              JumpOnBitMaskSet:       MACRO   bitmask, target
 73+  80C4 ~                                    and     bitmask
 74+  80C4 ~                                    jp      nz,target
 75+  80C4                                      ENDM
 76+  80C4
 77+  80C4              JumpOnBitMaskClear:     MACRO   bitmask, target
 78+  80C4 ~                                    and     bitmask
 79+  80C4 ~                                    jp      z,target
 80+  80C4                                      ENDM
 81+  80C4
 82+  80C4              JumpOnBitSet:           MACRO  reg, bitnbr, target
 83+  80C4 ~                                    bit 	bitnbr,reg
 84+  80C4 ~                                    jp      nz,target
 85+  80C4                                      ENDM
 86+  80C4
 87+  80C4              JumpOnBitClear:         MACRO  reg, bitnbr, target
 88+  80C4 ~                                    bit 	bitnbr,reg
 89+  80C4 ~                                    jp      z,target
 90+  80C4                                      ENDM
 91+  80C4
 92+  80C4              ; Comparison Routines
 93+  80C4              JumpIfAGTEusng:         MACRO
 94+  80C4 ~                                    jp		nc,target
 95+  80C4                                      ENDM
 96+  80C4
 97+  80C4              JumpIfAGTENusng:        MACRO reg,target
 98+  80C4 ~                                    cp     reg
 99+  80C4 ~                                    jp		nc,target
100+  80C4                                      ENDM
101+  80C4
102+  80C4              JumpIfAGTEMemusng:      MACRO mem,target
103+  80C4 ~                                    ld      hl,mem
104+  80C4 ~                                    cp      (hl)
105+  80C4 ~                                    jp		nc,target
106+  80C4                                      ENDM
107+  80C4
108+  80C4              JumpIfALTMemusng:       MACRO mem,target
109+  80C4 ~                                    ld      hl,mem
110+  80C4 ~                                    cp      (hl)
111+  80C4 ~                                    jp		c,target
112+  80C4                                      ENDM
113+  80C4
114+  80C4              JumpIfMemGTENusng:      MACRO mem, value, target
115+  80C4 ~                                    ld     a,(mem)
116+  80C4 ~                                    cp     value
117+  80C4 ~                                    jp	  nc,target
118+  80C4                                      ENDM
119+  80C4
120+  80C4              JumpIfMemGTEMemusng:    MACRO mem, address, target
121+  80C4 ~                                    ld   a,(mem)
122+  80C4 ~                                    ld   hl,address
123+  80C4 ~                                    cp   (hl)
124+  80C4 ~                                    jp	  nc,target
125+  80C4                                      ENDM
126+  80C4
127+  80C4              JumpIfMemEqMemusng:     MACRO mem, address, target
128+  80C4 ~                                    ld   a,(mem)
129+  80C4 ~                                    ld   hl,address
130+  80C4 ~                                    cp   (hl)
131+  80C4 ~                                    jp	  z,target
132+  80C4                                      ENDM
133+  80C4
134+  80C4              JumpIfMemNeMemusng:     MACRO mem, address, target
135+  80C4 ~                                    ld   a,(mem)
136+  80C4 ~                                    ld   hl,address
137+  80C4 ~                                    cp   (hl)
138+  80C4 ~                                    jp	  nz,target
139+  80C4                                      ENDM
140+  80C4
141+  80C4              JumpIfMemTrue:          MACRO mem, target
142+  80C4 ~                                    ld      a,(mem)
143+  80C4 ~                                    and     a
144+  80C4 ~                                    jp      z, target
145+  80C4                                      ENDM
146+  80C4
147+  80C4              JumpIfMemFalse:         MACRO mem, target
148+  80C4 ~                                    ld      a,(mem)
149+  80C4 ~                                    and     a
150+  80C4 ~                                    jp      nz, target
151+  80C4                                      ENDM
152+  80C4
153+  80C4              JumpIfATrue:            MACRO target
154+  80C4 ~                                    and     a
155+  80C4 ~                                    jp      z, target
156+  80C4                                      ENDM
157+  80C4
158+  80C4              JumpIfAFalse:           MACRO target
159+  80C4 ~                                    and     a
160+  80C4 ~                                    jp      nz, target
161+  80C4                                      ENDM
162+  80C4
163+  80C4              JumpIfALTusng:          MACRO target
164+  80C4 ~                                    jp		c,target
165+  80C4                                      ENDM
166+  80C4
167+  80C4              JumpIfALTNusng:         MACRO value, target
168+  80C4 ~                                    cp      value
169+  80C4 ~                                    jp		c, target
170+  80C4                                      ENDM
171+  80C4
172+  80C4              JumpIfMemLTNusng:       MACRO mem, value, target
173+  80C4 ~                                    ld      a,(mem)
174+  80C4 ~                                    cp      value
175+  80C4 ~                                    jp	  c,target
176+  80C4                                      ENDM
177+  80C4
178+  80C4              JumpIfMemLTMemusng:     MACRO mem, value, target
179+  80C4 ~                                    ld    a,(mem)
180+  80C4 ~                                    ld    hl,value
181+  80C4 ~                                    cp    (hl)
182+  80C4 ~                                    jp	  c,target
183+  80C4                                      ENDM
184+  80C4
185+  80C4              JumpIfMemEqNusng:       MACRO mem,value,target
186+  80C4 ~                                    ld  a,(mem)
187+  80C4 ~                                    cp  value
188+  80C4 ~                                    jp  z,target
189+  80C4                                      ENDM
190+  80C4
191+  80C4              JumpIfMemNeNusng:       MACRO mem,value,target
192+  80C4 ~                                    ld  a,(mem)
193+  80C4 ~                                    cp  value
194+  80C4 ~                                    jp  nz,target
195+  80C4                                      ENDM
196+  80C4
197+  80C4              JumpIfMemZero:          MACRO mem,target
198+  80C4 ~                                    ld  a,(mem)
199+  80C4 ~                                    and a
200+  80C4 ~                                    jp  z,target
201+  80C4                                      ENDM
202+  80C4
203+  80C4              JumpIfMemNotZero:       MACRO mem,target
204+  80C4 ~                                    ld  a,(mem)
205+  80C4 ~                                    and a
206+  80C4 ~                                    jp  nz,target
207+  80C4                                      ENDM
208+  80C4
209+  80C4              JumpIfALTMemHLusng:     MACRO target
210+  80C4 ~                                    cp    (hl)
211+  80C4 ~                                    jp	  c,target
212+  80C4                                      ENDM
213+  80C4
214+  80C4              JumpIfANENusng:         MACRO value, target
215+  80C4 ~                                    cp     value
216+  80C4 ~                                    jp      nz,target
217+  80C4                                      ENDM
218+  80C4
219+  80C4              JumpIfANEMemusng:       MACRO  value, target
220+  80C4 ~                                    ld    hl,value
221+  80C4 ~                                    cp    (hl)
222+  80C4 ~                                    jp      nz,target
223+  80C4                                      ENDM
224+  80C4
225+  80C4              JumpIfAEqNusng:         MACRO value, target
226+  80C4 ~                                    cp     value
227+  80C4 ~                                    jp      z,target
228+  80C4                                      ENDM
229+  80C4
230+  80C4              JumpIfAIsZero:	        MACRO target
231+  80C4 ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
232+  80C4 ~                                    jp	z, target
233+  80C4                                      ENDM
234+  80C4
235+  80C4              JumpIfAIsNotZero:       MACRO target
236+  80C4 ~                                    cp	0
237+  80C4 ~                                    jp	nz,target
238+  80C4                                      ENDM
239+  80C4
240+  80C4              IfResultZeroGoto:	    MACRO target
241+  80C4 ~                                    jp	z,target
242+  80C4                                      ENDM
243+  80C4
244+  80C4              IfResultNotZeroGoto:    MACRO target
245+  80C4 ~                                    jp	nz,target
246+  80C4                                      ENDM
247+  80C4
# file closed: ../Macros/jumpMacros.asm
106   80C4                                      INCLUDE "../Macros/ReturnMacros.asm"
# file opened: ../Macros/ReturnMacros.asm
  1+  80C4              ReturnOnBitSet:         MACRO  reg, bitnbr,
  2+  80C4 ~                                    bit 	bitnbr,reg
  3+  80C4 ~                                    ret     nz
  4+  80C4                                      ENDM
  5+  80C4
  6+  80C4              ReturnOnMemBitSet:      MACRO mem, bitnbr
  7+  80C4 ~                                    ld   a,(mem)
  8+  80C4 ~                                    bit 	bitnbr,a
  9+  80C4 ~                                    ret     nz
 10+  80C4                                      ENDM
 11+  80C4
 12+  80C4              ReturnOnBitClear:       MACRO reg, bitnbr
 13+  80C4 ~                                    bit 	bitnbr,reg
 14+  80C4 ~                                    ret		z
 15+  80C4                                      ENDM
 16+  80C4
 17+  80C4              ReturnOnMemBitClear:    MACRO mem, bitnbr
 18+  80C4 ~                                    ld     a,(mem)
 19+  80C4 ~                                    bit 	bitnbr,a
 20+  80C4 ~                                    ret		z
 21+  80C4                                      ENDM
 22+  80C4
 23+  80C4              ReturnIfMemFalse:       MACRO   mem
 24+  80C4 ~                                    ld      a,(mem)
 25+  80C4 ~                                    and     a
 26+  80C4 ~                                    ret     nz
 27+  80C4                                      ENDM
 28+  80C4
 29+  80C4              ReturnIfMemTrue:        MACRO   mem
 30+  80C4 ~                                    ld      a,(mem)
 31+  80C4 ~                                    and     a
 32+  80C4 ~                                    ret     z
 33+  80C4                                      ENDM
 34+  80C4
 35+  80C4              ReturnIfAIsZero:        MACRO
 36+  80C4 ~                                    and     a
 37+  80C4 ~                                    ret     z
 38+  80C4                                      ENDM
 39+  80C4
 40+  80C4              ReturnIfMemisZero:      MACRO mem
 41+  80C4 ~                                    ld   a,(mem)
 42+  80C4 ~                                    and a
 43+  80C4 ~                                    ret    z
 44+  80C4                                      ENDM
 45+  80C4
 46+  80C4              ReturnIfBitMaskClear    MACRO   bitmask
 47+  80C4 ~                                    and     bitmask
 48+  80C4 ~                                    ret     z
 49+  80C4                                      ENDM
 50+  80C4
 51+  80C4              ReturnIfBitMaskSet      MACRO   bitmask
 52+  80C4 ~                                    and     bitmask
 53+  80C4 ~                                    ret     nz
 54+  80C4                                      ENDM
 55+  80C4
 56+  80C4              ReturnIfMemEquN:        MACRO mem, value
 57+  80C4 ~                                    ld     a,(mem)
 58+  80C4 ~                                    cp     value
 59+  80C4 ~                                    ret    nz
 60+  80C4                                      ENDM
 61+  80C4
 62+  80C4              ReturnIfMemNeNusng:     MACRO mem, value
 63+  80C4 ~                                    ld   a,(mem)
 64+  80C4 ~                                    cp     value
 65+  80C4 ~                                    ret    z
 66+  80C4                                      ENDM
 67+  80C4
 68+  80C4              ReturnIfRegNotZero:     MACRO reg
 69+  80C4 ~                                    ld      a, reg
 70+  80C4 ~                                    and     a
 71+  80C4 ~                                    ret     nz
 72+  80C4                                      ENDM
 73+  80C4
 74+  80C4              ReturnIfANotZero:       MACRO
 75+  80C4 ~                                    and     a
 76+  80C4 ~                                    ret     nz
 77+  80C4                                      ENDM
 78+  80C4
 79+  80C4              ReturnIfNotZero:        MACRO
 80+  80C4 ~                                    ret     nz
 81+  80C4                                      ENDM
 82+  80C4
 83+  80C4
 84+  80C4              ReturnIfNegative:       MACRO
 85+  80C4 ~                                    ret     m
 86+  80C4                                      ENDM
 87+  80C4
 88+  80C4
 89+  80C4              ReturnIfMemNotZero:     MACRO mem
 90+  80C4 ~                                    ld     a,(mem)
 91+  80C4 ~                                    and     a
 92+  80C4 ~                                    ret    nz
 93+  80C4                                      ENDM
 94+  80C4
 95+  80C4              ReturnIfAGTEusng:       MACRO value
 96+  80C4 ~                                    cp    value
 97+  80C4 ~                                    ret	 nc
 98+  80C4                                      ENDM
 99+  80C4
100+  80C4              ReturnIfALTNusng:       MACRO value
101+  80C4 ~                                    cp    value
102+  80C4 ~                                    ret	 c
103+  80C4                                      ENDM
104+  80C4
105+  80C4              ReturnIfAGTENusng:      MACRO value
106+  80C4 ~                                    cp    value
107+  80C4 ~                                    ret	 nc
108+  80C4                                      ENDM
109+  80C4
110+  80C4              ReturnIfAGTEMemusng:    MACRO value
111+  80C4 ~                                    ld      hl,value
112+  80C4 ~                                    cp      (hl)
113+  80C4 ~                                    ret	    nc
114+  80C4                                      ENDM
115+  80C4
116+  80C4              ReturnIfANENusng:       MACRO value
117+  80C4 ~                                    cp      value
118+  80C4 ~                                    ret     nz
119+  80C4                                      ENDM
120+  80C4
121+  80C4              ReturnIfAEqNusng:       MACRO value
122+  80C4 ~                                    cp      value
123+  80C4 ~                                    ret     z
124+  80C4                                      ENDM
125+  80C4
# file closed: ../Macros/ReturnMacros.asm
107   80C4                                      INCLUDE "../Macros/ldCopyMacros.asm"
# file opened: ../Macros/ldCopyMacros.asm
  1+  80C4              ZeroA:		            MACRO
  2+  80C4 ~                                    xor a
  3+  80C4                                      ENDM
  4+  80C4
  5+  80C4              SetATrue:               MACRO
  6+  80C4 ~                                    xor     a
  7+  80C4                                      ENDM
  8+  80C4
  9+  80C4              SetAFalse:              MACRO
 10+  80C4 ~                                    ld      a,$FF
 11+  80C4                                      ENDM
 12+  80C4
 13+  80C4              SetMemFalse             MACRO   mem
 14+  80C4 ~                                    ld      a,$FF
 15+  80C4 ~                                    ld      (mem),a
 16+  80C4                                      ENDM
 17+  80C4
 18+  80C4              SetMemTrue              MACRO   mem
 19+  80C4 ~                                    xor     a
 20+  80C4 ~                                    ld      (mem),a
 21+  80C4                                      ENDM
 22+  80C4
 23+  80C4              SetMemToN:              MACRO   mem,value
 24+  80C4 ~                                    ld      a,value
 25+  80C4 ~                                    ld      (mem),a
 26+  80C4                                      ENDM
 27+  80C4
 28+  80C4              ldCopyStringLen:        MACRO   source, target, strlen
 29+  80C4 ~                                    ld      hl,source
 30+  80C4 ~                                    ld      de, target
 31+  80C4 ~                                    ld      bc, strlen
 32+  80C4 ~                                    ldir
 33+  80C4                                      ENDM
 34+  80C4
 35+  80C4              ldCopyTextAtHLtoDE:     MACRO
 36+  80C4 ~            .CopyLoop:              ld      a,(hl)
 37+  80C4 ~                                    ld      (de),a
 38+  80C4 ~                                    cp      0
 39+  80C4 ~                                    jp      z,.DoneCopy
 40+  80C4 ~                                    inc     hl
 41+  80C4 ~                                    inc     de
 42+  80C4 ~                                    jr      .CopyLoop
 43+  80C4 ~            .DoneCopy:
 44+  80C4                                      ENDM
 45+  80C4
 46+  80C4              ldClearTextLoop:        MACRO   TextSize
 47+  80C4 ~                                    ld      b,a
 48+  80C4 ~                                    ld      a,TextSize
 49+  80C4 ~            .ClearLoop:             ld      (hl),a
 50+  80C4 ~                                    inc     hl
 51+  80C4 ~                                    djnz    .ClearLoop
 52+  80C4                                      ENDM
 53+  80C4
 54+  80C4              ldCopyByte:             MACRO memfrom, memto
 55+  80C4 ~                                    ld       a,(memfrom)
 56+  80C4 ~                                    ld       (memto),a
 57+  80C4                                      ENDM
 58+  80C4
 59+  80C4
 60+  80C4              ldCopyByteABS:          MACRO memfrom, memto
 61+  80C4 ~                                    ld       a,(memfrom)
 62+  80C4 ~                                    and		$7F
 63+  80C4 ~                                    ld       (memto),a
 64+  80C4                                      ENDM
 65+  80C4
 66+  80C4              ldAtHLtoMem:            MACRO   memto
 67+  80C4 ~                                    ld      a,(hl)
 68+  80C4 ~                                    ld      (memto),a
 69+  80C4                                      ENDM
 70+  80C4
 71+  80C4              ldCopy2Byte             MACRO  memfrom, memto
 72+  80C4 ~                                    ld       hl,(memfrom)
 73+  80C4 ~                                    ld       (memto),hl
 74+  80C4                                      ENDM
 75+  80C4
 76+  80C4              ldWriteConst            MACRO  memfrom, memto
 77+  80C4 ~                                    ld       a,memfrom
 78+  80C4 ~                                    ld       (memto),a
 79+  80C4                                      ENDM
 80+  80C4
 81+  80C4              ldWriteZero             MACRO  memto
 82+  80C4 ~                                    xor      a
 83+  80C4 ~                                    ld       (memto),a
 84+  80C4                                      ENDM
 85+  80C4
 86+  80C4              ldIXLaFromN:	        MACRO memfrom
 87+  80C4 ~                                    ld		a,(memfrom)
 88+  80C4 ~                                    ld		ixl,a
 89+  80C4                                      ENDM
 90+  80C4
 91+  80C4              ldIXHaFromN:	        MACRO memfrom
 92+  80C4 ~                                    ld		a,(memfrom)
 93+  80C4 ~                                    ld		ixh,a
 94+  80C4                                      ENDM
 95+  80C4
 96+  80C4              ldIYLaFromN:	        MACRO memfrom
 97+  80C4 ~                                    ld		a,(memfrom)
 98+  80C4 ~                                    ld		iyl,a
 99+  80C4                                      ENDM
100+  80C4
101+  80C4              ldIYHaFromN:	        MACRO memfrom
102+  80C4 ~                                    ld		a,(memfrom)
103+  80C4 ~                                    ld		iyh,a
104+  80C4                                      ENDM
105+  80C4
106+  80C4              ldhlde:			        MACRO
107+  80C4 ~                                    ld		h,d
108+  80C4 ~                                    ld		l,e
109+  80C4                                      ENDM
110+  80C4
111+  80C4              ldhlbc:			        MACRO
112+  80C4 ~                                    ld		h,b
113+  80C4 ~                                    ld		l,c
114+  80C4                                      ENDM
115+  80C4
116+  80C4              ldbcde:			        MACRO
117+  80C4 ~                                    ld		b,d
118+  80C4 ~                                    ld		c,e
119+  80C4                                      ENDM
120+  80C4
121+  80C4              lddebc:			        MACRO
122+  80C4 ~                                    ld		d,b
123+  80C4 ~                                    ld		e,c
124+  80C4                                      ENDM
125+  80C4
126+  80C4              ldbchl:			        MACRO
127+  80C4 ~                                    ld		b,h
128+  80C4 ~                                    ld		c,l
129+  80C4                                      ENDM
130+  80C4
131+  80C4              lddeiy:			        MACRO
132+  80C4 ~                                    ld		d,iyh
133+  80C4 ~                                    ld		e,iyl
134+  80C4                                      ENDM
135+  80C4
136+  80C4              ldiyde:			        MACRO
137+  80C4 ~                                    ld		iyh,d
138+  80C4 ~                                    ld		iyl,e
139+  80C4                                      ENDM
140+  80C4
141+  80C4
142+  80C4              FourLDIInstrunctions:   MACRO
143+  80C4 ~                                    ldi
144+  80C4 ~                                    ldi
145+  80C4 ~                                    ldi
146+  80C4 ~                                    ldi
147+  80C4                                      ENDM
148+  80C4
149+  80C4              FiveLDIInstrunctions:   MACRO
150+  80C4 ~                                    ldi
151+  80C4 ~                                    ldi
152+  80C4 ~                                    ldi
153+  80C4 ~                                    ldi
154+  80C4 ~                                    ldi
155+  80C4                                      ENDM
156+  80C4
157+  80C4              SixLDIInstrunctions:    MACRO
158+  80C4 ~                                    ldi
159+  80C4 ~                                    ldi
160+  80C4 ~                                    ldi
161+  80C4 ~                                    ldi
162+  80C4 ~                                    ldi
163+  80C4 ~                                    ldi
164+  80C4                                      ENDM
165+  80C4
166+  80C4              EightLDIInstrunctions:  MACRO
167+  80C4 ~            		                ldi
168+  80C4 ~            		                ldi
169+  80C4 ~            		                ldi
170+  80C4 ~            		                ldi
171+  80C4 ~            		                ldi
172+  80C4 ~            		                ldi
173+  80C4 ~            		                ldi
174+  80C4 ~            		                ldi
175+  80C4                                      ENDM
176+  80C4
177+  80C4              NineLDIInstrunctions:  MACRO
178+  80C4 ~            		                ldi
179+  80C4 ~            		                ldi
180+  80C4 ~            		                ldi
181+  80C4 ~            		                ldi
182+  80C4 ~            		                ldi
183+  80C4 ~            		                ldi
184+  80C4 ~            		                ldi
185+  80C4 ~            		                ldi
186+  80C4 ~            		                ldi
187+  80C4                                      ENDM
# file closed: ../Macros/ldCopyMacros.asm
108   80C4                                      INCLUDE "../Macros/ShiftMacros.asm"
# file opened: ../Macros/ShiftMacros.asm
  1+  80C4              ShiftIYRight1: MACRO
  2+  80C4 ~            			   ld 	a,iyh
  3+  80C4 ~            			   srl 	a
  4+  80C4 ~            			   ld	iyh,a
  5+  80C4 ~            			   ld 	a,iyl
  6+  80C4 ~            			   rra
  7+  80C4 ~            			   ld	iyl,a
  8+  80C4              			   ENDM
  9+  80C4
 10+  80C4              ShiftHLRight1: MACRO
 11+  80C4 ~            			   srl h
 12+  80C4 ~            			   rr  l
 13+  80C4              			   ENDM
 14+  80C4
 15+  80C4              ShiftDERight1: MACRO
 16+  80C4 ~            			   srl d
 17+  80C4 ~            			   rr  e
 18+  80C4              			   ENDM
 19+  80C4
 20+  80C4              ShiftBCRight1: MACRO
 21+  80C4 ~            			   srl b
 22+  80C4 ~            			   rr  c
 23+  80C4              			   ENDM
 24+  80C4
 25+  80C4
 26+  80C4
 27+  80C4              ShiftHLDiv8:   MACRO
 28+  80C4 ~            			   srl h
 29+  80C4 ~            			   rr  l
 30+  80C4 ~            			   srl h
 31+  80C4 ~            			   rr  l
 32+  80C4 ~            			   srl h
 33+  80C4 ~            			   rr  l
 34+  80C4              			   ENDM
 35+  80C4
 36+  80C4              ShiftHLLeft1:  MACRO
 37+  80C4 ~            			   sla l
 38+  80C4 ~            			   rl  h
 39+  80C4              			   ENDM
 40+  80C4
 41+  80C4              ShiftDELeft1:  MACRO
 42+  80C4 ~            			   sla e
 43+  80C4 ~            			   rl  d
 44+  80C4              			   ENDM
 45+  80C4
 46+  80C4
 47+  80C4              RollDELeft1:   MACRO
 48+  80C4 ~                           rl  e
 49+  80C4 ~                           rl  d
 50+  80C4                             ENDM
 51+  80C4
 52+  80C4              ShiftBCLeft1:  MACRO
 53+  80C4 ~            			   sla c
 54+  80C4 ~            			   rl  b
 55+  80C4              			   ENDM
 56+  80C4
 57+  80C4
 58+  80C4              ShiftMem16Right1:   MACRO memaddr
 59+  80C4 ~                                ld    hl,(memaddr)
 60+  80C4 ~                                srl   h
 61+  80C4 ~                                rr    l
 62+  80C4 ~                                ld    (memaddr),hl
 63+  80C4                                  ENDM
 64+  80C4
 65+  80C4              ShiftMem8Right1:    MACRO memaddr
 66+  80C4 ~                                ld      a,(memaddr)
 67+  80C4 ~                                srl     a
 68+  80C4 ~                                ld      (memaddr),a
 69+  80C4                                  ENDM
 70+  80C4
 71+  80C4
 72+  80C4              ShiftMem8Left1A:    MACRO memaddr
 73+  80C4 ~                                ld      a,(memaddr)
 74+  80C4 ~                                sla     a
 75+  80C4 ~                                ld      (memaddr),a
 76+  80C4                                  ENDM
 77+  80C4
# file closed: ../Macros/ShiftMacros.asm
109   80C4                                      INCLUDE "../Macros/NegateMacros.asm"
# file opened: ../Macros/NegateMacros.asm
  1+  80C4
  2+  80C4              NegIY:			    MACRO
  3+  80C4 ~                                xor a
  4+  80C4 ~                                sub iyl
  5+  80C4 ~                                ld iyl,a
  6+  80C4 ~                                sbc a,a
  7+  80C4 ~                                sub iyh
  8+  80C4 ~                                ld iyh,a
  9+  80C4                                  ENDM
 10+  80C4
 11+  80C4              NegHL:			    MACRO
 12+  80C4 ~                                xor a
 13+  80C4 ~                                sub l
 14+  80C4 ~                                ld l,a
 15+  80C4 ~                                sbc a,a
 16+  80C4 ~                                sub h
 17+  80C4 ~                                ld h,a
 18+  80C4                                  ENDM
 19+  80C4
 20+  80C4              NegDE:			    MACRO
 21+  80C4 ~                                xor a
 22+  80C4 ~                                sub e
 23+  80C4 ~                                ld e,a
 24+  80C4 ~                                sbc a,a
 25+  80C4 ~                                sub d
 26+  80C4 ~                                ld d,a
 27+  80C4                                  ENDM
 28+  80C4
 29+  80C4              NegBC:			    MACRO
 30+  80C4 ~                                xor a
 31+  80C4 ~                                sub c
 32+  80C4 ~                                ld c,a
 33+  80C4 ~                                sbc a,a
 34+  80C4 ~                                sub  b
 35+  80C4 ~                                ld b,a
 36+  80C4                                  ENDM
 37+  80C4
 38+  80C4              NegH                MACRO
 39+  80C4 ~                                ld      a,h
 40+  80C4 ~                                neg
 41+  80C4 ~                                ld      h,a
 42+  80C4                                  ENDM
 43+  80C4
 44+  80C4              NegD                MACRO
 45+  80C4 ~                                ld      a,d
 46+  80C4 ~                                neg
 47+  80C4 ~                                ld      d,a
 48+  80C4                                  ENDM
 49+  80C4
 50+  80C4              NegB                MACRO
 51+  80C4 ~                                ld      a,b
 52+  80C4 ~                                neg
 53+  80C4 ~                                ld      b,a
 54+  80C4                                  ENDM
 55+  80C4
# file closed: ../Macros/NegateMacros.asm
110   80C4
111   80C4                                      INCLUDE "../Variables/general_variables_macros.asm"
# file opened: ../Variables/general_variables_macros.asm
  1+  80C4              ; limited to 255 character length
  2+  80C4              CountLengthHL:          MACRO   Limiter
  3+  80C4 ~                                    ld      de,hl
  4+  80C4 ~                                    ld      bc,Limiter
  5+  80C4 ~                                    xor     a
  6+  80C4 ~                                    cpir
  7+  80C4 ~                                    ClearCarryFlag
  8+  80C4 ~                                    sbc     hl,de
  9+  80C4 ~                                    ld      a,l
 10+  80C4 ~                                    ret
 11+  80C4                                      ENDM
 12+  80C4
 13+  80C4              HalfLengthHL:           MACRO
 14+  80C4 ~                                    ld      b,0
 15+  80C4 ~            .CountLenLoop:          ld      a,(hl)
 16+  80C4 ~                                    cp      0
 17+  80C4 ~                                    jr      z,.DoneCount
 18+  80C4 ~                                    inc     b
 19+  80C4 ~                                    inc     hl
 20+  80C4 ~                                    jr      .CountLenLoop
 21+  80C4 ~            .DoneCount:             ld      a,32
 22+  80C4 ~                                    sub     b
 23+  80C4 ~                                    sra     a
 24+  80C4                                      ENDM
 25+  80C4
 26+  80C4              MakeInnocentMacro:		MACRO
 27+  80C4 ~            						xor		a
 28+  80C4 ~            						ld		(FugitiveInnocentStatus),a
 29+  80C4              						ENDM
 30+  80C4
 31+  80C4              NoEscapePodMacro:		MACRO
 32+  80C4 ~            						xor		a
 33+  80C4 ~            						ld		(EscapePod),a
 34+  80C4              						ENDM
 35+  80C4
 36+  80C4              MaxFuelLevel            EQU     70              ; 7.0 light years max
 37+  80C4              MaxFuelMacro:			MACRO
 38+  80C4 ~            						ld		a,MaxFuelLevel
 39+  80C4 ~            						ld		(Fuel),a
 40+  80C4              						ENDM
 41+  80C4
 42+  80C4              MaxThrottle:            MACRO
 43+  80C4 ~                                    ld      a,(SHIPMAXSPEED)
 44+  80C4 ~                                    ld      (DELTA),a
 45+  80C4 ~                                    ld      d,a
 46+  80C4 ~                                    ld      e,4
 47+  80C4 ~                                    mul
 48+  80C4 ~                                    ld      (DELT4Lo),de
 49+  80C4                                      ENDM
 50+  80C4
 51+  80C4              ZeroThrottle:           MACRO
 52+  80C4 ~                                    xor     a
 53+  80C4 ~                                    ld      (DELTA),a
 54+  80C4 ~                                    ld      (DELT4Lo),a
 55+  80C4 ~                                    ld      (DELT4Lo+1),a
 56+  80C4                                      ENDM
 57+  80C4
 58+  80C4              ZeroPitch:              MACRO
 59+  80C4 ~                                    xor     a
 60+  80C4 ~                                    ld      (BET2),a
 61+  80C4 ~                                    ld      (BET2FLIP),a
 62+  80C4 ~                                    ld      (JSTY),a
 63+  80C4 ~                                    ld      (BETA),a
 64+  80C4                                      ENDM
 65+  80C4
 66+  80C4              ZeroRoll:               MACRO
 67+  80C4 ~                                    xor     a                              ; zero roll and climb
 68+  80C4 ~                                    ld      (ALP2),a
 69+  80C4 ~                                    ld      (ALP2FLIP),a
 70+  80C4 ~                                    ld      (JSTX),a
 71+  80C4 ~                                    ld      (ALPHA),a
 72+  80C4                                      ENDM
 73+  80C4
 74+  80C4              CorrectPostJumpFuel:    MACRO
 75+  80C4 ~                                    ld      a,(Fuel)
 76+  80C4 ~                                    ld      hl,Distance
 77+  80C4 ~                                    sub     a,(hl)
 78+  80C4 ~                                    ld      (Fuel),a
 79+  80C4                                      ENDM
 80+  80C4
 81+  80C4              AnyMissilesLeft:        MACRO
 82+  80C4 ~                                    ld      a,(NbrMissiles)
 83+  80C4 ~                                    and     a
 84+  80C4                                      ENDM
 85+  80C4
 86+  80C4              SetMissileTargetA:      MACRO
 87+  80C4 ~                                    ld      (MissileTarget),a
 88+  80C4                                      ENDM
 89+  80C4
 90+  80C4              IsMissileLockedOn:      MACRO
 91+  80C4 ~                                    ld      a,(MissileTarget)
 92+  80C4 ~                                    cp      $FF
 93+  80C4 ~                                    ret     z
 94+  80C4 ~                                    ReturnIfSlotAEmpty                  ; if target slot is empty
 95+  80C4 ~                                    ret                                 ; will return as nz now
 96+  80C4                                      ENDM
 97+  80C4
 98+  80C4              ClearMissileTarget:     MACRO
 99+  80C4 ~                                    xor     a                           ; Set missile target to FF
100+  80C4 ~                                    dec     a
101+  80C4 ~                                    ld      (MissileTarget),a
102+  80C4 ~                                    SetMemFalse MissileLaunchFlag
103+  80C4                                      ENDM
104+  80C4
105+  80C4              ClearECM:               MACRO
106+  80C4 ~                                    xor     a
107+  80C4 ~                                    ld      (ECMLoopA),a
108+  80C4 ~                                    ld      (ECMLoopB),a
109+  80C4                                      ENDM
110+  80C4
111+  80C4              ChargeEnergyAndShields: MACRO
112+  80C4 ~                                    ld      a,$FF
113+  80C4 ~                                    ld      (PlayerEnergy),a
114+  80C4 ~                                    ld      (ForeShield),a
115+  80C4 ~                                    ld      (AftShield),a
116+  80C4                                      ENDM
117+  80C4
118+  80C4              CopyPresentSystemToTarget: MACRO
119+  80C4 ~                                    ld      hl,(PresentSystemX)
120+  80C4 ~                                    ld      (TargetSystemX),hl
121+  80C4                                      ENDM
122+  80C4
123+  80C4              CopyTargetSystemToPresent: MACRO
124+  80C4 ~                                    ld      hl,(TargetSystemX)
125+  80C4 ~                                    ld      (PresentSystemX),hl
126+  80C4                                      ENDM
127+  80C4
128+  80C4              HalveFugitiveStatus:    MACRO
129+  80C4 ~                                    ld      hl,FugitiveInnocentStatus
130+  80C4 ~                                    srl     (hl)
131+  80C4                                      ENDM
132+  80C4
133+  80C4              ClearForceTransition    MACRO
134+  80C4 ~                                    ld      a,$FF
135+  80C4 ~                                    ld      (ScreenTransitionForced),a
136+  80C4                                      ENDM
137+  80C4
138+  80C4              ForceTransition:        MACRO newScreen
139+  80C4 ~                                    ld      a,newScreen
140+  80C4 ~                                    ld      (ScreenTransitionForced), a
141+  80C4                                      ENDM
142+  80C4
143+  80C4              IsSpaceStationPresent:  MACRO
144+  80C4 ~                                    ld      a,(SpaceStationSafeZone)
145+  80C4 ~                                    and     a
146+  80C4                                      ENDM
147+  80C4
148+  80C4              SetSafeZone:            MACRO
149+  80C4 ~                                    xor     a
150+  80C4 ~                                    ld      (SpaceStationSafeZone),a
151+  80C4                                      ENDM
152+  80C4
153+  80C4              ClearSafeZone:          MACRO
154+  80C4 ~                                    ld      a,$FF
155+  80C4 ~                                    ld      (SpaceStationSafeZone),a
156+  80C4                                      ENDM
157+  80C4
158+  80C4              ClearTemperatures:      MACRO
159+  80C4 ~                                    xor     a
160+  80C4 ~                                    ld      (CabinTemperature),a
161+  80C4 ~                                    ld      (GunTemperature),a
162+  80C4                                      ENDM
163+  80C4
164+  80C4              CoolCabin:              MACRO
165+  80C4 ~                                    ld      a,(CabinTemperature)
166+  80C4 ~                                    and     a
167+  80C4 ~                                    jr      z,.AlreadyCool
168+  80C4 ~                                    dec     a
169+  80C4 ~                                    ld      (CabinTemperature),a
170+  80C4 ~            .AlreadyCool:
171+  80C4                                      ENDM
172+  80C4
173+  80C4              CoolLasers:             MACRO
174+  80C4 ~                                    ld      a,(GunTemperature)
175+  80C4 ~                                    and     a
176+  80C4 ~                                    jr      z,.AlreadyCool
177+  80C4 ~                                    dec     a
178+  80C4 ~                                    ld      (GunTemperature),a
179+  80C4 ~            .AlreadyCool:
180+  80C4                                      ENDM
181+  80C4
182+  80C4              ; type 255 is "not fitted"
183+  80C4
184+  80C4
185+  80C4              InitEventCounter:       MACRO
186+  80C4 ~                                    xor     a
187+  80C4 ~                                    ld      (EventCounter),a
188+  80C4                                      ENDM
189+  80C4
190+  80C4              ClearMissJump:          MACRO
191+  80C4 ~                                    ld      a,$FF
192+  80C4 ~                                    ld      (MissJumpFlag),a
193+  80C4                                      ENDM
194+  80C4
195+  80C4
196+  80C4              DrainSystem:            MACRO   SystemMem, DrainMem
197+  80C4 ~                                    ld      a,(DrainMem)
198+  80C4 ~                                    ld      b,a
199+  80C4 ~                                    ld      a,(SystemMem)
200+  80C4 ~                                    sub     a,b
201+  80C4 ~                                    ld      (SystemMem),a
202+  80C4 ~                                    jr      c,.ZeroSystem
203+  80C4 ~                                    jp      .ExitPoint
204+  80C4 ~            .ZeroSystem:            ZeroA
205+  80C4 ~                                    ld      (SystemMem),a
206+  80C4 ~            .ExitPoint
207+  80C4                                      ENDM
208+  80C4
209+  80C4              BoostSystem:            MACRO   SystemMem, BoostMem
210+  80C4 ~                                    ld      a,(BoostMem)
211+  80C4 ~                                    ld      b,a
212+  80C4 ~                                    ld      a,(SystemMem)
213+  80C4 ~                                    add     b
214+  80C4 ~                                    ld      (SystemMem),a
215+  80C4 ~                                    jr      c, .MaxSystem
216+  80C4 ~                                    jp      .ExitPoint
217+  80C4 ~            .MaxSystem:             ld      a,255
218+  80C4 ~                                    ld      (SystemMem),a
219+  80C4 ~            .ExitPoint
220+  80C4                                      ENDM
221+  80C4
# file closed: ../Variables/general_variables_macros.asm
112   80C4                                      INCLUDE "../Maths/multiply.asm"
# file opened: ../Maths/multiply.asm
  1+  80C4              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
  2+  80C4 2A 84 84                             ld  hl,(varRS)
  3+  80C7 3A 83 84                             ld  a,(varQ)
  4+  80CA C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
  5+  80CC 11 00 00                             ld  de,0        ; de = XY
  6+  80CF 47                                   ld  b,a         ; b = Q
  7+  80D0                                      ShiftHLRight1
  7+  80D0 CB 3C       >			   srl h
  7+  80D2 CB 1D       >			   rr  l
  8+  80D4 CB 20                                sla b
  9+  80D6 30 03                                jr  nc,.LL126
 10+  80D8 EB           .LL125:                 ex de,hl
 11+  80D9 19                                   add hl,de
 12+  80DA EB                                   ex  de,hl       ; de = de + rs
 13+  80DB              .LL126:                 ShiftHLRight1
 13+  80DB CB 3C       >			   srl h
 13+  80DD CB 1D       >			   rr  l
 14+  80DF CB 20                                sla b
 15+  80E1 38 F5                                jr      c,.LL125
 16+  80E3 20 F6                                jr      nz,.LL126
 17+  80E5 EB                                   ex      de,hl   ; hl = result
 18+  80E6 D1 C1                                pop     bc,,de
 19+  80E8 C9                                   ret
 20+  80E9
 21+  80E9
 22+  80E9              MacroDEEquQmulASigned:  MACRO
 23+  80E9 ~                                    ld      d,a                         ; save a into d
 24+  80E9 ~                                    ld      a,(varQ)
 25+  80E9 ~                                    ld      e,a
 26+  80E9 ~                                    xor     d                           ; a = a xor var Q
 27+  80E9 ~                                    and     SignOnly8Bit
 28+  80E9 ~                                    ld      b,a                         ; b = sign of a xor q
 29+  80E9 ~                                    ld      a,d                         ; d = abs d (or a reg)
 30+  80E9 ~                                    and     SignMask8Bit
 31+  80E9 ~                                    ld      d,a
 32+  80E9 ~                                    ld      a,e                         ; e = abs e (or varQ)
 33+  80E9 ~                                    and     SignMask8Bit
 34+  80E9 ~                                    ld      e,a
 35+  80E9 ~                                    mul                                 ; de = a * Q
 36+  80E9 ~                                    ld      a,d
 37+  80E9 ~                                    or      b                           ; de = a * Q leading sign bit
 38+  80E9 ~                                    ld      d,a
 39+  80E9                                      ENDM
 40+  80E9
 41+  80E9
 42+  80E9
 43+  80E9                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
 44+  80E9              madXAequQmulAaddRS:     MacroDEEquQmulASigned
 44+  80E9 57          >                        ld      d,a                         ; save a into d
 44+  80EA 3A 83 84    >                        ld      a,(varQ)
 44+  80ED 5F          >                        ld      e,a
 44+  80EE AA          >                        xor     d                           ; a = a xor var Q
 44+  80EF E6 80       >                        and     SignOnly8Bit
 44+  80F1 47          >                        ld      b,a                         ; b = sign of a xor q
 44+  80F2 7A          >                        ld      a,d                         ; d = abs d (or a reg)
 44+  80F3 E6 7F       >                        and     SignMask8Bit
 44+  80F5 57          >                        ld      d,a
 44+  80F6 7B          >                        ld      a,e                         ; e = abs e (or varQ)
 44+  80F7 E6 7F       >                        and     SignMask8Bit
 44+  80F9 5F          >                        ld      e,a
 44+  80FA ED 30       >                        mul                                 ; de = a * Q
 44+  80FC 7A          >                        ld      a,d
 44+  80FD B0          >                        or      b                           ; de = a * Q leading sign bit
 44+  80FE 57          >                        ld      d,a
 45+  80FF 2A 84 84     madDEaddRS:             ld		hl,(varR)
 46+  8102 CD 0B 81                             call	madXAAddHLDESigned
 47+  8105 EB                                   ex      de,hl                       ; de = R.S + DE
 48+  8106                                      ClearCarryFlag
 48+  8106 B7          >                        or a
 49+  8107 DD 6B                                ld      ixl,e
 50+  8109 7A                                   ld      a,d
 51+  810A C9                                   ret
 52+  810B
 53+  810B
 54+  810B 7C           madXAAddHLDESigned:     ld      a,h
 55+  810C E6 80                                and     SignOnly8Bit
 56+  810E 47                                   ld      b,a                         ;save sign bit in b
 57+  810F AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 58+  8110                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 58+  8110 FA 28 81    >                        jp		m, .ADDHLDEOppSGN
 59+  8113 78           .ADDHLDESameSigns:       ld      a,b
 60+  8114 B2                                   or      d
 61+  8115                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 61+  8115 FA 1A 81    >                        jp		m, .ADDHLDESameNeg
 62+  8118 19                                   add     hl,de
 63+  8119 C9                                   ret
 64+  811A 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 65+  811B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 66+  811D 67                                   ld      h,a
 67+  811E 7A                                   ld      a,d
 68+  811F E6 7F                                and     SignMask8Bit
 69+  8121 57                                   ld      d,a
 70+  8122 19                                   add     hl,de
 71+  8123 3E 80                                ld      a,SignOnly8Bit
 72+  8125 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 73+  8126 67                                   ld      h,a
 74+  8127 C9                                   ret
 75+  8128 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 76+  8129 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 77+  812B 67                                   ld      h,a
 78+  812C 7A                                   ld      a,d
 79+  812D E6 7F                                and     SignMask8Bit
 80+  812F 57                                   ld      d,a
 81+  8130 B7                                   or      a
 82+  8131 ED 52                                sbc     hl,de
 83+  8133 38 04                                jr      c,.ADDHLDEOppInvert
 84+  8135 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 85+  8136 B4                                   or      h
 86+  8137 67                                   ld      h,a                         ; set the previou sign value
 87+  8138 C9                                   ret
 88+  8139              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 88+  8139 AF          >                    xor a
 88+  813A 95          >                    sub l
 88+  813B 6F          >                    ld l,a
 88+  813C 9F          >                    sbc a,a
 88+  813D 94          >                    sub h
 88+  813E 67          >                    ld h,a
 89+  813F 78                                   ld      a,b
 90+  8140 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 91+  8142 B4                                   or      h
 92+  8143 67                                   ld      h,a                         ; recover sign
 93+  8144 C9                                   ret
 94+  8145
 95+  8145
 96+  8145                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 97+  8145                  ;
 98+  8145                  ; enter : hl = 16-bit multiplier   = x
 99+  8145                  ;          e =  8-bit multiplicand = y
100+  8145                  ;
101+  8145                  ; exit  : ahl = 24-bit product
102+  8145                  ;         carry reset
103+  8145                  ;
104+  8145                  ; uses  : af, de, hl
105+  8145 54           AHLequHLmulE:           ld d,h                      ; xh
106+  8146 63                                   ld h,e                      ; yl
107+  8147 ED 30                                mul de                      ; xh*yl
108+  8149 EB                                   ex de,hl
109+  814A ED 30                                mul de                      ; yl*xl, hl = xh*yl
110+  814C
111+  814C 7A                                   ld  a,d                     ; sum products
112+  814D 85                                   add a,l
113+  814E 57                                   ld  d,a
114+  814F EB                                   ex de,hl
115+  8150
116+  8150 7A                                   ld  a,d
117+  8151 CE 00                                adc a,0
118+  8153 C9                                   ret
119+  8154
120+  8154
121+  8154
122+  8154                 ; multiplication of two 16-bit numbers into a 32-bit product
123+  8154                 ;
124+  8154                 ; enter : de = 16-bit multiplicand = y
125+  8154                 ;         hl = 16-bit multiplicand = x
126+  8154                 ;
127+  8154                 ; exit  : dehl = 32-bit product
128+  8154                 ;         carry reset
129+  8154                 ;
130+  8154                 ; uses  : af, bc, de, hl
131+  8154
132+  8154
133+  8154
134+  8154 45           DEHLequDEmulHL:         ld b,l                      ; x0
135+  8155 4B                                   ld c,e                      ; y0
136+  8156 5D                                   ld e,l                      ; x0
137+  8157 6A                                   ld l,d
138+  8158 E5                                   push hl                     ; x1 y1
139+  8159 69                                   ld l,c                      ; y0
140+  815A              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
141+  815A ED 30                                mul de                      ; y1*x0
142+  815C EB                                   ex de,hl
143+  815D ED 30                                mul de                      ; x1*y0
144+  815F
145+  815F AF                                   xor a                       ; zero A
146+  8160 19                                   add hl,de                   ; sum cross products p2 p1
147+  8161 8F                                   adc a,a                     ; capture carry p3
148+  8162
149+  8162 59                                   ld e,c                      ; x0
150+  8163 50                                   ld d,b                      ; y0
151+  8164 ED 30                                mul de                      ; y0*x0
152+  8166
153+  8166 47                                   ld b,a                      ; carry from cross products
154+  8167 4C                                   ld c,h                      ; LSB of MSW from cross products
155+  8168
156+  8168 7A                                   ld a,d
157+  8169 85                                   add a,l
158+  816A 67                                   ld h,a
159+  816B 6B                                   ld l,e                      ; LSW in HL p1 p0
160+  816C
161+  816C D1                                   pop de
162+  816D ED 30                                mul de                      ; x1*y1
163+  816F
164+  816F EB                                   ex de,hl
165+  8170 ED 4A                                adc hl,bc
166+  8172 EB                                   ex de,hl                    ; de = final MSW
167+  8173
168+  8173 C9                                   ret
169+  8174
170+  8174              ; multiplication of two 16-bit numbers into a 16-bit product
171+  8174              ; enter : de = 16-bit multiplicand
172+  8174              ;         hl = 16-bit multiplicand
173+  8174              ; exit  : hl = 16-bit product
174+  8174              ;         carry reset
175+  8174              ; maths is
176+  8174              ;        hl = y , de= x
177+  8174              ;        hl = xhi,ylo + (yhigh * xlow)
178+  8174              ;        hl = yhih & xlo + x
179+  8174              ;
180+  8174              ;
181+  8174              ; uses  : af, bc, de, hl
182+  8174 C5           mulDEbyHL:              push    bc
183+  8175 7A                                   ld a,d                      ; a = xh
184+  8176 54                                   ld d,h                      ; d = yh
185+  8177 67                                   ld h,a                      ; h = xh
186+  8178 4B                                   ld c,e                      ; c = xl
187+  8179 45                                   ld b,l                      ; b = yl
188+  817A ED 30                                mul                         ; yh * yl
189+  817C EB                                   ex de,hl
190+  817D ED 30                                mul                         ; xh * yl
191+  817F 19                                   add hl,de                   ; add cross products
192+  8180 59                                   ld e,c
193+  8181 50                                   ld d,b
194+  8182 ED 30                                mul                         ; yl * xl
195+  8184 7D                                   ld a,l                      ; cross products lsb
196+  8185 82                                   add a,d                     ; add to msb final
197+  8186 67                                   ld h,a
198+  8187 6B                                   ld l,e                      ; hl = final
199+  8188                                      ; 83 cycles, 19 bytes
200+  8188 AF                                   xor a                       ; reset carry
201+  8189 C1                                   pop     bc
202+  818A C9                                   ret
203+  818B
204+  818B
205+  818B              ; CHL = multiplicand D = multiplier
206+  818B              ; DCHL = CHL * D
207+  818B 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
208+  818C AC                                   xor     h                   ; xor with h to get resultant sign
209+  818D E6 80                                and     SignOnly8Bit        ; .
210+  818F FD 67                                ld      iyh,a               ; iyh = copy of sign
211+  8191 79                                   ld      a,c                 ; now CHL = ABS (CHL)
212+  8192 E6 7F                                and     SignMask8Bit        ; .
213+  8194 4F                                   ld      c,a                 ; .
214+  8195 7A                                   ld      a,d                 ; d = ABS D
215+  8196 E6 7F                                and     SignMask8Bit        ; .
216+  8198              ; At this point CHL = ABS (HLE), A = ABS(D)
217+  8198 57           .mul1:                  ld      d,a                 ; first do D * L
218+  8199 5D                                   ld      e,l                 ; .
219+  819A ED 30                                mul     de                  ; DE = L * D
220+  819C 08                                   ex      af,af'              ; save multiplier
221+  819D 6B                                   ld      l,e                 ; L = p0
222+  819E 7A                                   ld      a,d                 ; carry byte
223+  819F 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
224+  81A0 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
225+  81A1 57                                   ld      d,a                 ; and multiplier
226+  81A2 ED 30                                mul     de                  ; now its D & L
227+  81A4 08                                   ex      af,af'              ; get back carry byte with flags
228+  81A5 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
229+  81A6 67                                   ld      h,a                 ; h = P1
230+  81A7 7A                                   ld      a,d                 ; a = carry byte
231+  81A8 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
232+  81A9 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
233+  81AA 57                                   ld      d,a                 ;
234+  81AB ED 30                                mul     de                  ;
235+  81AD 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
236+  81AE 8B                                   adc     a,e                 ;
237+  81AF FD B4                                or      iyh                 ; recover saved resultant sign
238+  81B1 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
239+  81B2 C9                                   ret
240+  81B3
241+  81B3              ;  CHL = 53456 D = 1E
242+  81B3              ;  56 * 1E = A14 L = 14 carry = 0A
243+  81B3              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
244+  81B3              ;  5  * 1E = 096 C = 96 + 6 = 9C
245+  81B3              ;  CHL = 9C2214
246+  81B3              ;mult3
247+  81B3              ; DELC = HLE * D, uses HL, DE, C , A , IYH
248+  81B3              ; HLE = multiplicand D = multiplier
249+  81B3              ; tested by mathstestsun.asm all passed
250+  81B3              ; Algorithm
251+  81B3              ; AC =  E * D   (save carry)         H    L    E
252+  81B3              ; DE =  L * D                                  D
253+  81B3              ;  L =  A + E + carry                         E*D (lo)
254+  81B3              ; DE =  H * D                             L*D+ ^ (hi)
255+  81B3              ;  E =  A + E + carry                H*D (lo) + carry
256+  81B3              ;
257+  81B3              ;
258+  81B3 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
259+  81B4 AC                                   xor     h                   ; xor with h to get resultant sign
260+  81B5 E6 80                                and     SignOnly8Bit        ; .
261+  81B7 FD 67                                ld      iyh,a               ; iyh = copy of sign
262+  81B9 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
263+  81BA E6 7F                                and     SignMask8Bit        ; .
264+  81BC 67                                   ld      h,a                 ; .
265+  81BD 7A                                   ld      a,d                 ; d = ABS D
266+  81BE E6 7F                                and     SignMask8Bit        ; .
267+  81C0 57                                   ld      d,a                 ; .
268+  81C1 B7           .testEitherSideZero:    or      a
269+  81C2 28 24                                jr      z,.ResultZero
270+  81C4 7C                                   ld      a,h
271+  81C5 B5                                   or      l
272+  81C6 B3                                   or      e
273+  81C7 28 1F                                jr      z,.ResultZero
274+  81C9              ; At this point HLE = ABS (HLE), A = ABS(D)
275+  81C9 42                                   ld      b,d                 ; save Quotient
276+  81CA ED 30        .mul1:                  mul     de                  ; C = E * D
277+  81CC 4B                                   ld      c,e                 ; C = p0
278+  81CD FD 6A                                ld      iyl,d               ; save carry (p1)
279+  81CF 5D           .mul2:                  ld      e,l                 ; L = L * D
280+  81D0 50                                   ld      d,b                 ; .
281+  81D1 ED 30                                mul     de                  ; .
282+  81D3 FD 7D                                ld      a,iyl               ; get back p1
283+  81D5 83           .carrybyte1:            add     a,e                 ; L = L + E
284+  81D6 6F                                   ld      l,a                 ; .
285+  81D7 FD 6A                                ld      iyl,d               ; save new carry byte
286+  81D9 5C           .mul3:                  ld      e,h                 ; E = H * D
287+  81DA 50                                   ld      d,b                 ; .
288+  81DB ED 30                                mul     de                  ; .
289+  81DD FD 7D                                ld      a,iyl
290+  81DF 8B                                   adc     a,e                 ; .
291+  81E0 5F                                   ld      e,a                 ; .
292+  81E1 7A           .ItsNotZero:            ld      a,d                 ;
293+  81E2 CE 00                                adc     a,0                 ; final carry bit
294+  81E4 FD B4                                or      iyh                 ; bring back sign
295+  81E6 57                                   ld      d,a                 ; s = sign
296+  81E7 C9                                   ret
297+  81E8 11 00 00     .ResultZero:            ld      de,0
298+  81EB                                      ZeroA
298+  81EB AF          >                        xor a
299+  81EC 4F                                   ld      c,a
300+  81ED 6F                                   ld      l,a
301+  81EE C9                                   ret
302+  81EF
303+  81EF              ;;;
304+  81EF              ;;;
305+  81EF              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
306+  81EF              ;;;                        xor     h                   ; xor with h to get resultant sign
307+  81EF              ;;;                        and     SignOnly8Bit        ; .
308+  81EF              ;;;                        ld      iyh,a               ; iyh = copy of sign
309+  81EF              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
310+  81EF              ;;;                        and     SignMask8Bit        ; .
311+  81EF              ;;;                        ld      h,a                 ; .
312+  81EF              ;;;                        ld      a,d                 ; d = ABS D
313+  81EF              ;;;                        and     SignMask8Bit        ; .
314+  81EF              ;;;                        ld      d,a                 ; .
315+  81EF              ;;;.testEitherSideZero:    or      a
316+  81EF              ;;;                        jr      z,.ResultZero
317+  81EF              ;;;                        ld      a,h
318+  81EF              ;;;                        or      l
319+  81EF              ;;;                        or      e
320+  81EF              ;;;                        jr      z,.ResultZero
321+  81EF              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
322+  81EF              ;;;.mul1:                  mul     de                  ; C = E * D
323+  81EF              ;;;                        ex      af,af'              ; save mulitplier
324+  81EF              ;;;                        ld      c,e                 ; C = p0
325+  81EF              ;;;                        ld      a,d                 ; save carry (p1)
326+  81EF              ;;;                        ex      af,af'              ; .
327+  81EF              ;;;.mul2:                  ld      e,l                 ; L = L * D
328+  81EF              ;;;                        ld      d,a                 ; .
329+  81EF              ;;;                        mul     de                  ; .
330+  81EF              ;;;                        ex      af,af'              ; .
331+  81EF              ;;;.carrybyte1:            add     a,e                 ; L = L + E
332+  81EF              ;;;                        ld      l,a                 ; .
333+  81EF              ;;;                        ld      a,d
334+  81EF              ;;;                        ex      af,af'              ; save new carry byte
335+  81EF              ;;;.mul3:                  ld      e,h                 ; E = H * D
336+  81EF              ;;;                        ld      d,a                 ; .
337+  81EF              ;;;                        mul     de                  ; .
338+  81EF              ;;;                        ex      af,af'              ; .
339+  81EF              ;;;                        adc     a,e                 ; .
340+  81EF              ;;;                        ld      e,a                 ; .
341+  81EF              ;;;.ItsNotZero:            ld      a,d                 ;
342+  81EF              ;;;                        adc     a,0                 ; final carry bit
343+  81EF              ;;;                        or      iyh                 ; bring back sign
344+  81EF              ;;;                        ld      d,a                 ; s = sign
345+  81EF              ;;;                        ret
346+  81EF              ;;;.ResultZero:            ld      de,0
347+  81EF              ;;;                        ZeroA
348+  81EF              ;;;                        ld      c,a
349+  81EF              ;;;                        ld      l,a
350+  81EF              ;;;                        ret
351+  81EF
352+  81EF              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
353+  81EF              ; enter : de = 16-bit multiplicand
354+  81EF              ;         hl = 16-bit multiplicand
355+  81EF              ; exit  : hl = 16-bit product
356+  81EF              ;         carry reset
357+  81EF              ;
358+  81EF              ; uses  : af, bc, de, hl
359+  81EF 00           mulDEbyHLSignByte       DB      0
360+  81F0 AF           mulDEbyHLSgnTo2c:       xor     a
361+  81F1 32 EF 81                             ld      (mulDEbyHLSignByte),a
362+  81F4 7A           .SignDE:                ld      a,d
363+  81F5 ED 27 80                             test    $80
364+  81F8 28 08                                jr      z,.SignHL
365+  81FA E6 7F        .NegativeDE:            and     $7F
366+  81FC 57                                   ld      d,a
367+  81FD 3E 80                                ld      a,$80
368+  81FF 32 EF 81                             ld      (mulDEbyHLSignByte),a
369+  8202 7C           .SignHL:                ld      a,h
370+  8203 ED 27 80                             test    $80
371+  8206 28 0B                                jr      z,.AbsoluteMultiply
372+  8208 E6 7F        .NegativeHL:            and     $7F
373+  820A 67                                   ld      h,a
374+  820B 3A EF 81                             ld      a,(mulDEbyHLSignByte)
375+  820E EE 80                                xor     $80
376+  8210 32 EF 81                             ld      (mulDEbyHLSignByte),a
377+  8213 CD 74 81     .AbsoluteMultiply:      call    mulDEbyHL
378+  8216 3A EF 81     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
379+  8219 ED 27 80                             test    $80
380+  821C C8                                   ret     z
381+  821D AF           .Negateghl: 			xor 	a
382+  821E 95                                   sub 	l
383+  821F 6F                                   ld 		l,a
384+  8220 9F                                   sbc 	a,a
385+  8221 94                                   sub 	h
386+  8222 67                                   ld 		h,a
387+  8223 C9                                   ret
388+  8224
389+  8224 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
390+  8225 32 EF 81                             ld      (mulDEbyHLSignByte),a
391+  8228 7A           .SignDE:                ld      a,d
392+  8229 ED 27 80                             test    $80
393+  822C 28 08                                jr      z,.AbsoluteMultiply
394+  822E E6 7F        .NegativeDE:            and     $7F
395+  8230 57                                   ld      d,a
396+  8231 3E 80                                ld      a,$80
397+  8233 32 EF 81                             ld      (mulDEbyHLSignByte),a
398+  8236 CD 74 81     .AbsoluteMultiply:      call    mulDEbyHL
399+  8239 3A EF 81     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
400+  823C ED 27 80                             test    $80
401+  823F C8                                   ret     z
402+  8240 AF           .Negateghl:             xor 	a
403+  8241 95                                   sub 	l
404+  8242 6F                                   ld 		l,a
405+  8243 9F                                   sbc 	a,a
406+  8244 94                                   sub 	h
407+  8245 67                                   ld 		h,a
408+  8246 C9                                   ret
409+  8247
410+  8247
# file closed: ../Maths/multiply.asm
113   8247                                      INCLUDE "../Maths/asm_add.asm"
# file opened: ../Maths/asm_add.asm
  1+  8247
  2+  8247              ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
  3+  8247 16 00        HL2cEquHLSgnPlusAusgn:  ld      d,0
  4+  8249 5F                                   ld      e,a                         ; set up DE = A
  5+  824A 7C                                   ld      a,h
  6+  824B E6 7F                                and     SignMask8Bit
  7+  824D 28 07                                jr      z,.HLPositive               ; if HL is negative then do HL - A
  8+  824F 67           .HLNegative:            ld      h,a                         ; hl = ABS (HL)
  9+  8250                                      NegHL                               ; hl = - hl
  9+  8250 AF          >                    xor a
  9+  8251 95          >                    sub l
  9+  8252 6F          >                    ld l,a
  9+  8253 9F          >                    sbc a,a
  9+  8254 94          >                    sub h
  9+  8255 67          >                    ld h,a
 10+  8256              .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
 10+  8256 B7          >                        or a
 11+  8257 ED 5A                                adc     hl,de                       ; aftert his hl will be 2's c
 12+  8259 C9                                   ret
 13+  825A
 14+  825A 5F           HLEquHLSgnPlusAusgn:    ld      e,a
 15+  825B 7C                                   ld      a,h
 16+  825C E6 7F                                and     SignMask8Bit
 17+  825E 20 04                                jr      nz,.HLNegative              ; if HL is negative then do HL - A
 18+  8260 7B           .HLPositive:            ld      a,e                         ; else its HL + A
 19+  8261 ED 31                                add     hl,a
 20+  8263 C9                                   ret
 21+  8264              .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
 21+  8264 7C          >                        ld      a,h
 21+  8265 E6 7F       >                        and     SignMask8Bit
 21+  8267 67          >                        ld      h,a
 22+  8268                                      NegHL                               ; and convert to 2's C
 22+  8268 AF          >                    xor a
 22+  8269 95          >                    sub l
 22+  826A 6F          >                    ld l,a
 22+  826B 9F          >                    sbc a,a
 22+  826C 94          >                    sub h
 22+  826D 67          >                    ld h,a
 23+  826E 16 00                                ld      d,0
 24+  8270                                      ClearCarryFlag
 24+  8270 B7          >                        or a
 25+  8271 ED 52                                sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 26+  8273 FA 7B 82                             jp      m,.FlipResult               ; if it was negative then its really positive
 27+  8276                                      SetSignBit      h
 27+  8276 7C          >                        ld      a,h
 27+  8277 F6 80       >                        or      SignOnly8Bit
 27+  8279 67          >                        ld      h,a
 28+  827A C9                                   ret
 29+  827B              .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 29+  827B AF          >                    xor a
 29+  827C 95          >                    sub l
 29+  827D 6F          >                    ld l,a
 29+  827E 9F          >                    sbc a,a
 29+  827F 94          >                    sub h
 29+  8280 67          >                    ld h,a
 30+  8281 C9                                   ret
 31+  8282
 32+  8282
 33+  8282
 34+  8282              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 35+  8282 57           AddAusngToHLsng:        ld      d,a
 36+  8283 5C                                   ld      e,h
 37+  8284 7C                                   ld      a,h
 38+  8285 E6 7F                                and     SignMask8Bit
 39+  8287 67                                   ld      h,a
 40+  8288 7A                                   ld      a,d
 41+  8289 ED 31                                add     hl,a
 42+  828B 7B                                   ld      a,e
 43+  828C E6 80                                and     SignOnly8Bit
 44+  828E B4                                   or      h
 45+  828F C9                                   ret
 46+  8290              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 47+  8290 44           HLEequAusngMinusHLsng:  ld      b,h
 48+  8291 4F                                   ld      c,a
 49+  8292 78                                   ld      a,b
 50+  8293 E6 80                                and     SignOnly8Bit
 51+  8295 20 08                                jr      nz,.DoAdd
 52+  8297 EB           .DoSubtract:            ex      de,hl               ; move hl into de
 53+  8298 26 00                                ld      h,0                 ; hl = a
 54+  829A 69                                   ld      l,c
 55+  829B                                      ClearCarryFlag
 55+  829B B7          >                        or a
 56+  829C ED 52                                sbc     hl,de               ; hl = a - hl
 57+  829E C9                                   ret
 58+  829F 79           .DoAdd:                 ld      a,c
 59+  82A0 ED 31                                add hl,a
 60+  82A2 C9                                   ret
 61+  82A3              ;tested mathstestsun2
 62+  82A3              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 63+  82A3 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 64+  82A4 AA                                   xor     d                   ; .
 65+  82A5 E6 80                                and     SignOnly8Bit        ; .
 66+  82A7 20 19                                jr      nz,.SignDifferent   ; .
 67+  82A9 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 68+  82AA E6 80                                and     SignOnly8Bit        ; so store it in iyh
 69+  82AC FD 67                                ld      iyh,a               ;
 70+  82AE 78                                   ld      a,b                 ; bch = abs bch
 71+  82AF E6 7F                                and     SignMask8Bit        ; .
 72+  82B1 47                                   ld      b,a                 ; .
 73+  82B2 7A                                   ld      a,d                 ; del = abs del
 74+  82B3 E6 7F                                and     SignMask8Bit        ; .
 75+  82B5 57                                   ld      d,a                 ; .
 76+  82B6 7C                                   ld      a,h                 ; l = h + l
 77+  82B7 85                                   add     l                   ; .
 78+  82B8 6F                                   ld      l,a                 ; .
 79+  82B9 79                                   ld      a,c                 ; e = e + c + carry
 80+  82BA 8B                                   adc     e                   ; .
 81+  82BB 5F                                   ld      e,a                 ; .
 82+  82BC 78                                   ld      a,b                 ; d = b + d + carry (signed)
 83+  82BD 8A                                   adc     d                   ;
 84+  82BE FD B4                                or      iyh                 ; d = or back in sign bit
 85+  82C0 57                                   ld      d,a                 ;
 86+  82C1 C9                                   ret                         ; done
 87+  82C2 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 88+  82C3 FD 67                                ld      iyh,a               ; iyh = b sign
 89+  82C5 E6 7F                                and     SignMask8Bit        ; .
 90+  82C7 47                                   ld      b,a                 ; .
 91+  82C8 7A                                   ld      a,d                 ; del = abs del
 92+  82C9 FD 6F                                ld      iyl,a               ; iyl = d sign
 93+  82CB E6 7F                                and     SignMask8Bit        ; .
 94+  82CD 57                                   ld      d,a                 ; .
 95+  82CE E5                                   push    hl                  ; save hl
 96+  82CF 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 97+  82D1 ED 52                                sbc     hl,de               ;
 98+  82D3 E1                                   pop     hl                  ;
 99+  82D4 38 0E                                jr      c,.BCHltDEL
100+  82D6 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
101+  82D8 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
102+  82D9                                      JumpIfALTNusng l,.BCHltDEL
102+  82D9 BD          >                        cp      l
102+  82DA DA E4 82    >                        jp		c, .BCHltDEL
103+  82DD 20 15                                jr      nz,.DELltBCH
104+  82DF              ; The same so its just zero
105+  82DF AF           .BCHeqDEL:              xor     a                  ; its just zero
106+  82E0 57                                   ld      d,a                ; .
107+  82E1 5F                                   ld      e,a                ; .
108+  82E2 6F                                   ld      l,a                ; .
109+  82E3 C9                                   ret                        ; .
110+  82E4              ;BCH is less than DEL so its DEL - BCH the sort out sign
111+  82E4 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
112+  82E5 94                                   sub     h                  ; .                              ;   01D70F DEL
113+  82E6 6F                                   ld      l,a                ; .                              ;  -000028 BCH
114+  82E7 7B                                   ld      a,e                ; e = e - c - carry              ;1.
115+  82E8 99                                   sbc     c                  ; .                              ;
116+  82E9 5F                                   ld      e,a                ; .                              ;
117+  82EA 7A                                   ld      a,d                ; d = d - b - carry              ;
118+  82EB 98                                   sbc     b                  ; .                              ;
119+  82EC 57                                   ld      d,a                ; .                              ;
120+  82ED FD 7D                                ld      a,iyl              ; as d was larger, take d sign
121+  82EF E6 80                                and     SignOnly8Bit       ;
122+  82F1 B2                                   or      d                  ;
123+  82F2 57                                   ld      d,a                ;
124+  82F3 C9                                   ret
125+  82F4 7C           .DELltBCH:              ld      a,h                ; l = h - l
126+  82F5 95                                   sub     l                  ;
127+  82F6 6F                                   ld      l,a                ;
128+  82F7 79                                   ld      a,c                ; e = c - e - carry
129+  82F8 9B                                   sbc     e                  ;
130+  82F9 5F                                   ld      e,a                ;
131+  82FA 78                                   ld      a,b                ; d = b - d - carry
132+  82FB 9A                                   sbc     d                  ;
133+  82FC 57                                   ld      d,a                ;
134+  82FD FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
135+  82FF E6 80                                and     SignOnly8Bit       ;
136+  8301 B2                                   or      d                  ;
137+  8302 57                                   ld      d,a                ;
138+  8303 C9                                   ret
139+  8304
140+  8304
141+  8304              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
142+  8304 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
143+  8305 4A                                   ld      c,d                     ; .
144+  8306 A9                                   xor     c                       ; A = A xor C
145+  8307 CB BA                                res     7,d                     ; clear sign bit of D
146+  8309 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
147+  830B 19                                   add     hl,de                   ; HL = HL + DE
148+  830C C9                                   ret                             ; return
149+  830D ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
150+  830F D0                                   ret     nc                      ; if no carry return
151+  8310 19                                   add     hl,de                   ; else HL = HL + DE
152+  8311 EB                                   ex      de,hl                   ;      swap HL and DE
153+  8312 A7                                   and     a                       ;      reset carry
154+  8313 ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
155+  8315 41                                   ld      b,c                     ;      B = sign of C
156+  8316 C9                                   ret                             ;      ret
157+  8317
158+  8317
159+  8317
160+  8317              ; a = value to add
161+  8317              ; b = offset (equivalent to regX)
162+  8317              ; returns INWK [x] set to new value
163+  8317              addINWKbasigned:
164+  8317 21 C1 8E     		ld 		hl,UBnKxlo                  ; hl = INWK 0
165+  831A 4F           		ld      c,a                         ; preserve a
166+  831B 78           		ld		a,b
167+  831C ED 31        		add		hl,a                        ; hl = INWK[x]
168+  831E 79                   ld      a,c                         ; get back a value
169+  831F E6 80                and     $80                         ; get sign bit from a
170+  8321 47                   ld      b,a                         ; now b = sign bit of a
171+  8322 79                   ld      a,c                         ; a = original value
172+  8323 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
173+  8325              ; hl = unsigned version of INWK0[b]
174+  8325              ; a = value to add, also in c which will optimise later code
175+  8325              ; b = sign bit of a ( in old code was varT)
176+  8325              addhlcsigned:
177+  8325 5E                   ld      e,(hl)                      ; de = INKK value
178+  8326 23                   inc     hl
179+  8327 56                   ld      d,(hl)
180+  8328 23                   inc     hl                          ; now pointing a sign
181+  8329 7E                   ld      a,(hl)                      ; a = sign bit
182+  832A EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
183+  832B A8                   xor     b                           ; a = resultant sign
184+  832C CB 7F                bit     7,a                         ; is it negative?
185+  832E 28 2B                jr      z,.postivecalc
186+  8330              .negativecalc:
187+  8330 7C                   ld      a,h
188+  8331 E6 7F                and     SignMask8Bit
189+  8333 67                   ld      h,a                         ; strip high bit
190+  8334 DD 68                ld      ixl,b                       ; save sign bit from b into d
191+  8336 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
192+  8338 ED 42                sbc     hl,bc
193+  833A DD 45                ld      b,ixl                       ; get sign back
194+  833C EB                   ex      de,hl                       ; de = value hl = pointer to sign
195+  833D 7E                   ld      a,(hl)                      ;
196+  833E E6 7F                and     SignMask8Bit
197+  8340 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
198+  8342 F6 80                or      $80                         ; set bit 0
199+  8344 A8                   xor     b                           ; flip bit on sign (var T)
200+  8345 77                   ld      (hl),a
201+  8346 2B                   dec     hl
202+  8347 72                   ld      (hl),d
203+  8348 2B                   dec     hl
204+  8349 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
205+  834A EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
206+  834B D8                   ret     c                           ; if carry was set then we can exit now
207+  834C              .nocarry:
208+  834C                      NegHL                               ; get hl back to positive, a is still inkw+2
208+  834C AF          >                    xor a
208+  834D 95          >                    sub l
208+  834E 6F          >                    ld l,a
208+  834F 9F          >                    sbc a,a
208+  8350 94          >                    sub h
208+  8351 67          >                    ld h,a
209+  8352 B0                   or      b                           ; b is still varT
210+  8353 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
211+  8354 73                   ld      (hl),e
212+  8355 23                   inc     hl
213+  8356 72                   ld      (hl),d
214+  8357 23                   inc     hl
215+  8358 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
216+  8359 EB                   ex      de,hl                       ; hl = value de = pointer to sign
217+  835A C9                   ret
218+  835B              .postivecalc:
219+  835B DD 68                ld      ixl,b
220+  835D 06 00                ld      b,0
221+  835F 19                   add     hl,de
222+  8360 EB                   ex      de,hl
223+  8361 DD B5                or      ixl                         ; we don;t need to recover b here
224+  8363 77                   ld      (hl),a                      ; push sign into INWK[x]
225+  8364 2B                   dec     hl
226+  8365 72                   ld      (hl),d
227+  8366 2B                   dec     hl
228+  8367 73                   ld      (hl),e
229+  8368 C9                   ret
230+  8369
231+  8369              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
232+  8369              ;MVT1
233+  8369              ;    S = bits 6 to 0 of A
234+  8369              ;    A = sign bit => T
235+  8369              ;    xor sign bit with ink[x] Sign
236+  8369              ;    if negative thn its not an add
237+  8369              ;
238+  8369              ;        and h, 7F
239+  8369              ;        b = 0
240+  8369              ;        c = varS
241+  8369              ;        subtract INW[X]hilo, bc
242+  8369              ;        retain carry
243+  8369              ;        get INKW[x]Sign
244+  8369              ;        and 7F
245+  8369              ;        subtract carry (so will go negtive if negative)
246+  8369              ;        xor bit 7 of h with T to flip bit
247+  8369              ;        write to INKW[x]Sign
248+  8369              ;
249+  8369              ;    else
250+  8369              ;MV10.
251+  8369              ;        add INWK[x]hi,lo, varS
252+  8369              ;        or      sign bit
253+  8369
254+  8369
# file closed: ../Maths/asm_add.asm
114   8369                                      INCLUDE "../Variables/general_variables.asm"
# file opened: ../Variables/general_variables.asm
  1+  8369
  2+  8369
  3+  8369 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  4+  836B 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  5+  836D              ; Variables to simulate 6502 registers until code fixed
  6+  836D              ; These must be here in this order as reading Y and X can then be a 16 bit read
  7+  836D 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  8+  836E 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  9+  836F 00           regA		DB	0
 10+  8370
 11+  8370
 12+  8370 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 13+  8371 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 14+  8373 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 15+  8375
 16+  8375
 17+  8375
 18+  8375              ;XX16		DS	16				; 16 byte Matrix
 19+  8375
 20+  8375              P0INWK							; page 0 & 46
 21+  8375              p0INWK31						; page 0 & 65
 22+  8375              P0INWK36						; PAGE 0 &6A
 23+  8375
 24+  8375 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 25+  8376              LastNormalVisible	equ	XX4
 26+  8376              varXX4              equ XX4
 27+  8376
 28+  8376
 29+  8376
 30+  8376 00           PATG		DB	0				; 6502 &03C9
 31+  8377 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 32+  8379
 33+  8379
 34+  8379              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 35+  8379              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 36+  8379
 37+  8379              ; Present System Variables
 38+  8379
 39+  8379 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 40+  837A 20           RandomSeed1				DB	32	; 01
 41+  837B 0C           RandomSeed2				DB	12			; 02
 42+  837C 42           RandomSeed3				DB	66			; 03
 43+  837D
 44+  837D 00           varT1					DB	0				; 06
 45+  837E 00           SClo					DB 0				; 07
 46+  837F 00           SChi					DB 0				; 08
 47+  8380 00           varP					DB 0 				; 10	XX16+7
 48+  8381 00           varPhi					DB 0 				; 11	XX16+8
 49+  8382 00           varPhi2					DB 0 				; 12	XX16+9
 50+  8383              varPp1                  equ varPhi
 51+  8383              varPp2                  equ varPhi2
 52+  8383 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 53+  8384 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 54+  8385              UnivPointer				equ	UnivPointerLo
 55+  8385 00           varV					DB 0				; 22                          XX0+4
 56+  8386 00           varVHi					DB 0				; 23                          XX0+5
 57+  8387 00           varXXlo                 DB 0                ; 24
 58+  8388 00           varXXHi                 DB 0                ; 25
 59+  8389              varXX					equ	varXXlo
 60+  8389 00           YYlo                    DB 0                ; 26
 61+  838A 00           YYHi                    DB 0                ; 27
 62+  838B              varYY					equ	YYlo
 63+  838B              											;	28
 64+  838B              											;	29
 65+  838B              ;PlayerShipPositionData - Must be contiguous for setup
 66+  838B 00           BETA 					DB	0               ; 2A        (pitch done)
 67+  838C 00           JSTY                    DB  0               ; Joystick analog
 68+  838D 00           BET1 					DB	0               ; 2B        lower7 magnitude
 69+  838E 00           BET2                    DB  0               ;            climb sign
 70+  838F 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 71+  8390 1F           BET1MAXC                DB  31              ; max climb
 72+  8391 E1           BET1MAXD                DB  -31             ; max dive
 73+  8392 00           XC						DB	0               ; 2C
 74+  8393 00           YC						DB 	0               ; 2D
 75+  8394              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
 76+  8394 00           ECMActive				DB 	0				; 30		ECM Active flag
 77+  8395 00           ECMLoopA                DB  0
 78+  8396 00           ECMLoopB                DB  0
 79+  8397 00 00        JSTX                    DW  0               ;           Joystick analog value
 80+  8399 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 81+  839A 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 82+  839B 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 83+  839C 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 84+  839D 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 85+  839E E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 86+  839F
 87+  839F
 88+  839F
 89+  839F              MAXMESSAGES             EQU 5
 90+  839F              MESSAGETIMELIMIT        EQU 20
 91+  839F              MESSAGESIZE             EQU 33
 92+  839F              MESSAGELINE             EQU $0001
 93+  839F
 94+  839F 00           MessageCount            DB  0                ; used for enquing messages later
 95+  83A0 00           MessageCurrent          DB  0
 96+  83A1 05 00        MessageIndex            DW  MAXMESSAGES
 97+  83A3 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 98+  8448 05           MessageTimeout          DB  MAXMESSAGES
 99+  8449 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
100+  846E
101+  846E              ; MOVED TO Universe XX19					DB	0				; page 0 &67
102+  846E              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
103+  846E              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
104+  846E 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
105+  846F              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
106+  846F
107+  846F
108+  846F 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
109+  8474              											;	6D		QQ15+1
110+  8474              											;	6E		QQ15+2
111+  8474              											;	6F		QQ15+3
112+  8474              											;	70		QQ15+4
113+  8474              											;	71		QQ15+5
114+  8474 00           QQ17					DB	0				;   72
115+  8475 00           XX18xlo                 DB  0               ;	72		XX18   xlo
116+  8476 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
117+  8477 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
118+  8478 00           XX18ylo                 DB  0               ;	75		XX18   ylo
119+  8479 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
120+  847A 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
121+  847B 00           XX18zlo                 DB  0               ;	78		XX18   zlo
122+  847C 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
123+  847D 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
124+  847E
125+  847E 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
126+  847F 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
127+  8480 00           DELT4Lo					DB 	0				; 7E
128+  8481 00           DELT4Hi					DB 	0				; 7F
129+  8482              DELTA4                  equ                 DELT4Lo
130+  8482
131+  8482
132+  8482              ; Not thise must be in this order else 16 bit fetches will fail
133+  8482 00           varU                    DB  0               ;   80
134+  8483 00           varQ					DB  0 				;	81
135+  8484 00           varR					DB  0 				;	82
136+  8485 00           varS					DB  0 				;	83
137+  8486              varRS                   equ varR
138+  8486
139+  8486 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
140+  8488
141+  8488 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
142+  8489 00           YSAV                    DB  0               ; 85
143+  848A 00           XX17					DB	0				; 86
144+  848B              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
145+  848B              varXX17                 equ  XX17
146+  848B 00           ScreenChanged           DB  0
147+  848C 00           ScreenIndex             DB  0
148+  848D 00           InvertedYAxis           DB  0
149+  848E 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
150+  848F              											; Bit 7 Set  ShortRangeChart    $80
151+  848F              											; Bit 6 Set  Galactic Chart     $40
152+  848F              											; Bit 5 Set  Market Place       $20
153+  848F              											; Bit 4 Set  Status Screen      $10
154+  848F              											; Bit 3 Set  Display Inventory  $08
155+  848F                                                          ; Bit 2 Set  Planet Data        $04
156+  848F                                                          ; View bit combinations if the ones above not matched
157+  848F                                                          ; bits 1 0
158+  848F                                                          ;      1 1  Front view , i.e. $03
159+  848F                                                          ;      1 0  Aft View          $02
160+  848F                                                          ;      0 1  Left View         $01
161+  848F                                                          ;      0 0  Right view        $00
162+  848F              											; Bit 0 Set  Data On System
163+  848F              											; 0  Space View (Not a menu)
164+  848F 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
165+  8490 00           XX13                    DB  0               ;   89
166+  8491 00           TYPE					DB	0				; 8C used for ship type in drawing
167+  8492              ;Docked flag = 00 = in free space
168+  8492              ;              FF = Docked
169+  8492              ;              FE = transition
170+  8492              ;              FD = Setup open space and transition to not docked
171+  8492              ;              FC = Hyperspace manimation
172+  8492              ;              FB = Hyperspace complete
173+  8492 00           DockedFlag				DB	0				; 8E -
174+  8493 00           GamePaused              DB  0
175+  8494 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
176+  8495 00           varCNT                  DB  0               ; 93
177+  8496
178+  8496 00           varK					DB	0				; 40
179+  8497 00           varKp1					DB	0				; 41
180+  8498 00           varKp2					DB	0				; 42
181+  8499 00           varKp3					DB	0				; 43
182+  849A
183+  849A 00           varK2                   DB  0               ; 9B
184+  849B 00           varK2p1                 DB  0               ; 9C K2 plus 1
185+  849C 00           varK2p2                 DB  0               ; 9D K2 plus 2
186+  849D 00           varK2p3                 DB  0               ; 9E K2 plus 3
187+  849E
188+  849E 00           Point                   DB  0               ; 9F      POINT
189+  849F
190+  849F 00           varT					DB	0				; D1
191+  84A0
192+  84A0 00 00 00...  varVector9ByteWork      DS  9
193+  84A9
194+  84A9 00 00 00 00  varK3					DS	4				; D2
195+  84AD 00           varK3p2					DB	0				; 42
196+  84AE 00           varK3p3					DB	0				; 43
197+  84AF              varK3p1					equ varK3+1			; D3
198+  84AF 00 00 00 00  varK4					DS	4				; E0
199+  84B3              varK4p1					equ varK4+1			; D3
200+  84B3
201+  84B3
202+  84B3              ;Heap
203+  84B3
204+  84B3 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
205+  84B5 00 00 00...  HeapData				DS	50
206+  84E7              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
207+  84E7              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
208+  84E7              ; i.e. a list of programmed missiles in universe slot list code
209+  84E7 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
210+  84EE              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
211+  84EE              ;  #&5 Does J reverse both joystick channels
212+  84EE              ;  #&4 Does Y reverse joystick Y channel			03CB
213+  84EE              ;  #&2 Does X toggle startup message display ? PATG?	03C9
214+  84EE              ;  #&3 Does F toggle flashing information			03CA
215+  84EE              ;  #&1 Does A toggle keyboard auto-recentering ?
216+  84EE              ;  #&0 Caps-lock toggles keyboard flight damping
217+  84EE 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
218+  84EF 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
219+  84F0 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
220+  8500 00           AlienItemsAvaliability  DB	0				; 039D
221+  8501 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
222+  8502 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
223+  8504 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
224+  8505              											;
225+  8505 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
226+  8506 00           MarketPrice				DB	0				; 03AA QQ24
227+  8507 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
228+  8508 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
229+  8509 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
230+  850A 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
231+  850C              											; this is ship lines stack pointer so may be redundant with paging
232+  850C              											; LS = line stack so we will have one for now to remove later
233+  850C 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
234+  850D 00           DisplayEcononmy			DB	0				; 03B8
235+  850E 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
236+  850F 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
237+  8510 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
238+  8512 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
239+  8514 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
240+  8516 00 00        DisplayRadius			DW	0
241+  8518              ; --- Used in creation of sun and planet----;
242+  8518 00           PlanetXPos              DS  1
243+  8519 00           PlanetYPos              DS  1
244+  851A 00           PlanetZPos              DS  1
245+  851B 00           PlanetType              DS  1
246+  851C 00           SunXPos                 DS  1
247+  851D 00           SunYPos                 DS  1
248+  851E 00           SunZPos                 DS  1
249+  851F              ; -- Current Missile Runbtime data
250+  851F 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
251+  8520 00 00        MissileXPos             DW      0
252+  8522 00           MissileXSgn             DB      0
253+  8523 00 00        MissileYPos             DW      0
254+  8525 00           MissileYSgn             DB      0
255+  8526 00 00        MissileZPos             DW      0
256+  8528 00           MissileZSgn             DB      0
257+  8529 00 00        CurrentTargetXpos       DS      2
258+  852B 00 00        CurrentTargetXsgn       DS      2
259+  852D 00 00        CurrentTargetYpos       DS      2
260+  852F 00 00        CurrentTargetYsgn       DS      2
261+  8531 00 00        CurrentTargetZpos       DS      2
262+  8533 00 00        CurrentTargetZsgn       DS      2
263+  8535 00 00        TargetVectorXpos        DS      2
264+  8537 00 00        TargetVectorXsgn        DS      2
265+  8539 00 00        TargetVectorYpos        DS      2
266+  853B 00 00        TargetVectorYsgn        DS      2
267+  853D 00 00        TargetVectorZpos        DS      2
268+  853F 00 00        TargetVectorZsgn        DS      2
269+  8541 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
270+  8542 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
271+  8543 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
272+  8544 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
273+  8545
274+  8545              ; --- Main Loop Data -----------------------;
275+  8545 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
276+  8546 00           SelectedUniverseSlot    DB  0
277+  8547 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
278+  8548 00           ShipBlastCheckCounter   DB  0
279+  8549 00           InnerHyperCount			DB 	0				; 2F QQ22+1
280+  854A 00           OuterHyperCount			DB 	0				; 2E QQ22
281+  854B 00           EventCounter            DB  0
282+  854C 00           HyperCircle             DB  0
283+  854D 00           MissJumpFlag            DB  0
284+  854E 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
285+  854F 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
286+  8550 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
287+  8551 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
288+  8552 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
289+  8553 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
290+  8554              UniverseSlotListSize    equ	12
291+  8554 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
292+  8560 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
293+  856C              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
294+  856C 04           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
295+  856D 00           ConsoleRedrawFlag       DB  0
296+  856E 00           TextInputMode           DB  0
297+  856F 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
298+  8570                                                          ; 7    6    5    4     3    2        1    0
299+  8570                                                          ; Up   Down Left Right Home Recentre
300+  8570 00           FireLaserPressed        DB  0
301+  8571              ; --- Current System Data ------------------;
302+  8571 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
303+  8572 00           ExtraVesselsCounter     DB  0
304+  8573 00           JunkCount				DB  0				; $033E
305+  8574 00           AsteroidCount           DB  0               ; Not used as yet
306+  8575 00           TransporterCount        DB  0
307+  8576 00           CopCount                DB  0
308+  8577 00           PirateCount             DB  0
309+  8578              ; --- Galaxy Data --------------------------;
310+  8578 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
311+  8579 00 00 00...  WorkingSeeds			DS	6
312+  857F 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
313+  8585 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
314+  858B 00           PresentSystemX			DB	0				; System we are currently in
315+  858C 00           PresentSystemY			DB  0				; System we are currently in
316+  858D 00           TargetSystemX			DB	0				; System we are targeting for jump
317+  858E 00           TargetSystemY			DB	0				; System we are targeting for jump
318+  858F 00           GovPresentSystem		DB	0				; 03AE Govenment
319+  8590 00           TekPresentSystem		DB	0				; 03AF Technology
320+  8591
321+  8591 00           CompassColor			DB	0				; 03C5
322+  8592 00           SoundToggle				DB	0				; 03C6
323+  8593 00           KeyboardRecenterToggle	DB	0				; 03C8
324+  8594 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
325+  8595 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
326+  8596 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
327+  8597 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
328+  8598 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
329+  8599 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
330+  859A
331+  859A              ; Working Data
332+  859A
333+  859A              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
334+  859A              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
335+  859A              ; $0925 =	EQUW page9+37* 1
336+  859A              ; $094A =	EQUW page9+37* 2
337+  859A              ; $096F =	EQUW page9+37* 3
338+  859A              ; $0994 =	EQUW page9+37* 4
339+  859A              ; $09B9 =	EQUW page9+37* 5
340+  859A              ; $09DE =	EQUW page9+37* 6
341+  859A              ; $0A03 =	EQUW page9+37* 7
342+  859A              ; $0A28 =	EQUW page9+37* 8
343+  859A              ; $0A4D =	EQUW page9+37* 9
344+  859A              ; $0A72 =	EQUW page9+37*10
345+  859A              ; $0A97 =	EQUW page9+37*11
346+  859A              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
347+  859A
348+  859A
349+  859A
350+  859A              ; 0b00 is start address of data to save
351+  859A              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
352+  859A              											; Bit mask XXXX10XX - Thargoid plan mission
353+  859A
354+  859A 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
355+  859B
356+  859B 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
357+  859D 00 00        CommanderLoadAddress	DW	0				;0C03
358+  859F 00 00        LengthOfFile			DW	0				;0C0B
359+  85A1 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
360+  85A3
361+  85A3 00 00 00...  EdgesBuffer				DS 50
362+  85D5              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
363+  85D5              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
364+  85D5
365+  85D5 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
366+  861B              ShipLineStackTop		equ $ - ShipLineStack
367+  861B
368+  861B 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
369+  86DB              ; LSX vector overlaps with LSO
370+  86DB 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
371+  86DC 00           LSY2					DB	0           	; &0F0E	    \ LSY2
372+  86DD
373+  86DD              ; Star Positions are 16 bit 3d coordinates
374+  86DD 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
375+  871F 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
376+  8735 00           varStarX                DB  0
377+  8736 00           varStarY                DB  0
378+  8737 00 00 00...  varDustX                DS MaxNumberOfStars *2
379+  874D 00 00 00...  varDustY                DS MaxNumberOfStars *2
380+  8763 00 00 00...  varDustZ                DS MaxNumberOfStars *2
381+  8779              ; -- Player Runtime Data
382+  8779 00           GunTemperature          DB  0
383+  877A 00           CabinTemperature        DB  0
384+  877B 00           PlayerForwardSheild0	DB	0 ; ?????
385+  877C 00           PlayerForwardSheild1    DB	0
386+  877D 00           PlayerForwardSheild2    DB	0
387+  877E 00           ForeShield				DB	0				; 03A5
388+  877F 00           AftShield				DB	0				; 03A6
389+  8780 00           PlayerEnergy			DB	0				; 03A7
390+  8781 00           CompassX				DB	0				; 03A8
391+  8782 00           CompassY				DB	0				; 03A9
392+  8783 00           MissileTarget			DB  0				; 45
393+  8784 00           MissileLaunchFlag       DB  0
394+  8785 00 00 00...  CommanderName           DS  15
395+  8794 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
396+  8795 00           BadnessStatus           DB  0
397+  8796              ; need to add copy table routines
398+  8796 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
399+  8797 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
400+  8798 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
401+  8799 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
402+  879A 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
403+  879B 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
404+  879C              ; Count down timers must be aligned like this to work
405+  879C 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
406+  879D 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
407+  879E 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
408+  879F 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
409+  87A0              ;note rapidly changing views could reset these so need to consider it in an array
410+  87A0
411+  87A0              ; LaserType
412+  87A0              ; LaserPulseRate                          ; how many pulses can be fired before long pause
413+  87A0              ; LaserPulsePause                         ; time before next pulse - 0 = beam
414+  87A0              ; LaserPulseRest                          ; time before pulse count resets to 0
415+  87A0              ; LaserDamageOutput                       ; amount of damage for a laser hit
416+  87A0              ; LaserEnergyDrain                        ; amount of energy drained by cycle
417+  87A0              ; LaserHeat                               ; amount of heat generated
418+  87A0              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
419+  87A0              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
420+  87A0              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
421+  87A0              ; LaserTechLevel                          ; minimum tech level system to buy from
422+  87A0
423+  87A0 00           CurrLaserBurstRate      DB  0
424+  87A1 00           CurrLaserBurstCount     DB  0
425+  87A2 00           CurrLaserDamageOutput   DB  0
426+  87A3 00           CurrLaserEnergyDrain    DB  0
427+  87A4 00           CurrLaserHeat           DB  0
428+  87A5 00           CurrLaserDurability     DB  0
429+  87A6 00           CurrLaserDurabilityAmount DB  0
430+  87A7
431+  87A7              ; -- Input variables
432+  87A7 00           JoystickX				DB	0				; 034C JSTX
433+  87A8 00           JoystickY				DB	0				; 034D JSTY
434+  87A9 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
435+  87AA 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
436+  87AB
437+  87AB              ; -- Console drawing data
438+  87AB              FShieldStart            equ $8410
439+  87AB              AShieldStart            equ $8D10
440+  87AB              FuelStart               equ $9410
441+  87AB
442+  87AB              EnergyBar4Start         equ $A5D5
443+  87AB              EnergyBar3Start         equ $ADD5
444+  87AB              EnergyBar2Start         equ $B5D5
445+  87AB              EnergyBar1Start         equ $BDD5
446+  87AB              ; 70 /2 = 35 values
447+  87AB              ;                            0                             1                             2                             3
448+  87AB              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
449+  87AB 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
449+  87AF 04 04 05 06
449+  87B3 06 07 08 09
449+  87B7 0A 0A 0B 0C
449+  87BB 0D 0E 0E 0F
449+  87BF 10 10 11 13
449+  87C3 14 15 15 16
449+  87C7 17 18 19 1A
449+  87CB 1B 1C 1E 1F
449+  87CF 1F
450+  87D0              SpeedoStart             equ $84D1
451+  87D0              ;                            0                             1                             2                             3                             4
452+  87D0              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
453+  87D0 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
453+  87D4 04 04 05 06
453+  87D8 06 07 08 09
453+  87DC 0A 0A 0B 0C
453+  87E0 0D 0E 0E 0F
453+  87E4 10 10 11 12
453+  87E8 13 14 14 15
453+  87EC 16 17 18 18
453+  87F0 19 1A 1A 1B
453+  87F4 1C 1C 1D 1E
453+  87F8 1F
454+  87F9
455+  87F9              DialMiddleXPos          equ $E1
456+  87F9              RollMiddle              equ $8CE0
457+  87F9              PitchMiddle             equ $94E0
458+  87F9
459+  87F9
460+  87F9
461+  87F9
462+  87F9
# file closed: ../Variables/general_variables.asm
115   87F9
116   87F9
117   87F9
118   87F9                                      STRUCT testCase
119   87F9 ~            XLo                     BYTE 1  ; ROW 1
120   87F9 ~            XHi                     BYTE 2  ; ROW 1
121   87F9 ~            XSgn                    BYTE 3  ; ROW 1
122   87F9 ~            YLo                     BYTE 4  ; ROW 1
123   87F9 ~            YHi                     BYTE 5  ; ROW 1
124   87F9 ~            YSgn                    BYTE 6  ; ROW 1
125   87F9 ~            ZLo                     BYTE 7  ; ROW 1
126   87F9 ~            ZHi                     BYTE 8  ; ROW 1
127   87F9 ~            ZSgn                    BYTE 9  ; ROW 1
128   87F9 ~            Pitch                   BYTE 10 ; ROW 1
129   87F9 ~            Roll                    BYTE 11 ; ROW 1
130   87F9 ~            Padding1                BYTE 12 ; ROW 1
131   87F9 ~            Padding2                BYTE 13 ; ROW 1
132   87F9 ~            Padding3                BYTE 14 ; ROW 1
133   87F9 ~            Padding4                BYTE 15 ; ROW 1
134   87F9 ~            Padding5                BYTE 16 ; ROW 1
135   87F9 ~            XLoRes                  BYTE 17 ; ROW 2
136   87F9 ~            XHRes                   BYTE 18 ; ROW 2
137   87F9 ~            XSgnRes                 BYTE 19 ; ROW 2
138   87F9 ~            YLoRes                  BYTE 20 ; ROW 2
139   87F9 ~            YHRes                   BYTE 21 ; ROW 2
140   87F9 ~            YSgnRes                 BYTE 22 ; ROW 2
141   87F9 ~            ZLoRes                  BYTE 23 ; ROW 2
142   87F9 ~            ZHiRes                  BYTE 24 ; ROW 2
143   87F9 ~            ZSgnRes                 BYTE 25 ; ROW 2
144   87F9 ~            Padding6                BYTE 26 ; ROW 2
145   87F9 ~            Padding7                BYTE 27 ; ROW 2
146   87F9 ~            Padding8                BYTE 28 ; ROW 2
147   87F9 ~            Padding9                BYTE 29 ; ROW 2
148   87F9 ~            Padding10               BYTE 30 ; ROW 2
149   87F9 ~            Padding11               BYTE 31 ; ROW 2
150   87F9 ~            PassFail                BYTE 32 ; ROW 3
151   87F9 ~            XLoAct                  BYTE 33 ; ROW 3
152   87F9 ~            XHAct                   BYTE 34 ; ROW 3
153   87F9 ~            XSgnAct                 BYTE 35 ; ROW 3
154   87F9 ~            YLoAct                  BYTE 36 ; ROW 3
155   87F9 ~            YHAct                   BYTE 37 ; ROW 3
156   87F9 ~            YSgnAct                 BYTE 38 ; ROW 3
157   87F9 ~            ZLoAct                  BYTE 39 ; ROW 3
158   87F9 ~            ZHiAct                  BYTE 40 ; ROW 3
159   87F9 ~            ZSgnAct                 BYTE 41 ; ROW 3
160   87F9 ~            Padding12               BYTE 42 ; ROW 3
161   87F9 ~            Padding13               BYTE 43 ; ROW 3
162   87F9 ~            Padding14               BYTE 44 ; ROW 3
163   87F9 ~            Padding15               BYTE 45 ; ROW 3
164   87F9 ~            Padding16               BYTE 46 ; ROW 3
165   87F9 ~            Padding17               BYTE 47 ; ROW 3
166   87F9 ~            Padding18               BYTE 48 ; ROW 3
167   87F9 ~
168   87F9 ~
169   87F9                                      ENDS
170   87F9                                      ;    X              Y              Z              pit  rll                            X              Y              Z
171   87F9              ;                            01   02   03   04   05   06   07   08   09   10   11   12   13   14   15   16    01   02   03   04   05   06   07   08   09   10   11   12   13   14   15   16    01   02   03   04   05   06   07   08   09   10   11   12   13   14   15   16
172   87F9 00 00 00 00  TestCase1               DB  $00, $00, $00, $00, $00, $00, $32, $00, $00, $0B, $00, $00, "T", "0", "1", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "R", "0", "1", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "1", $00      ;TestCase1
172   87FD 00 00 32 00
172   8801 00 0B 00 00
172   8805 54 30 31 00
172   8809 00 00 00 00
172   880D 00 00 32 00
172   8811 00 00 00 00
172   8815 52 30 31 00
172   8819 00 00 00 00
172   881D 00 00 32 00
172   8821 00 00 00 00
172   8825 41 30 31 00
173   8829 64 00 00 00  TestCase2               DB  $64, $00, $00, $00, $00, $00, $32, $00, $00, $0B, $0B, $00, "T", "0", "2", $00,  $64, $00, $00, $06, $00, $80, $32, $00, $00, $00, $00, $00, "R", "0", "2", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "2", $00      ;TestCase2
173   882D 00 00 32 00
173   8831 00 0B 0B 00
173   8835 54 30 32 00
173   8839 64 00 00 06
173   883D 00 80 32 00
173   8841 00 00 00 00
173   8845 52 30 32 00
173   8849 00 00 00 00
173   884D 00 00 32 00
173   8851 00 00 00 00
173   8855 41 30 32 00
174   8859 64 00 00 00  TestCase3               DB  $64, $00, $00, $00, $00, $00, $32, $00, $00, $0B, $00, $00, "T", "0", "3", $00,  $64, $00, $00, $04, $00, $80, $32, $00, $00, $00, $00, $00, "R", "0", "3", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "3", $00      ;TestCase3
174   885D 00 00 32 00
174   8861 00 0B 00 00
174   8865 54 30 33 00
174   8869 64 00 00 04
174   886D 00 80 32 00
174   8871 00 00 00 00
174   8875 52 30 33 00
174   8879 00 00 00 00
174   887D 00 00 32 00
174   8881 00 00 00 00
174   8885 41 30 33 00
175   8889 64 00 00 00  TestCase4               DB  $64, $00, $00, $00, $00, $00, $32, $00, $00, $0B, $0B, $00, "T", "0", "4", $00,  $64, $00, $00, $06, $00, $80, $32, $00, $00, $00, $00, $00, "R", "0", "4", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "4", $00      ;TestCase4
175   888D 00 00 32 00
175   8891 00 0B 0B 00
175   8895 54 30 34 00
175   8899 64 00 00 06
175   889D 00 80 32 00
175   88A1 00 00 00 00
175   88A5 52 30 34 00
175   88A9 00 00 00 00
175   88AD 00 00 32 00
175   88B1 00 00 00 00
175   88B5 41 30 34 00
176   88B9 00 00 00 64  TestCase5               DB  $00, $00, $00, $64, $00, $00, $32, $00, $00, $0B, $00, $00, "T", "0", "5", $00,  $04, $00, $00, $64, $00, $00, $32, $00, $00, $00, $00, $00, "R", "0", "5", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "5", $00      ;TestCase5
176   88BD 00 00 32 00
176   88C1 00 0B 00 00
176   88C5 54 30 35 00
176   88C9 04 00 00 64
176   88CD 00 00 32 00
176   88D1 00 00 00 00
176   88D5 52 30 35 00
176   88D9 00 00 00 00
176   88DD 00 00 32 00
176   88E1 00 00 00 00
176   88E5 41 30 35 00
177   88E9 00 00 00 64  TestCase6               DB  $00, $00, $00, $64, $00, $00, $32, $00, $00, $0B, $00, $00, "T", "0", "6", $00,  $04, $00, $00, $64, $00, $00, $32, $00, $00, $00, $00, $00, "R", "0", "6", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "6", $00      ;TestCase6
177   88ED 00 00 32 00
177   88F1 00 0B 00 00
177   88F5 54 30 36 00
177   88F9 04 00 00 64
177   88FD 00 00 32 00
177   8901 00 00 00 00
177   8905 52 30 36 00
177   8909 00 00 00 00
177   890D 00 00 32 00
177   8911 00 00 00 00
177   8915 41 30 36 00
178   8919 00 00 00 64  TestCase7               DB  $00, $00, $00, $64, $00, $00, $32, $00, $00, $00, $0B, $00, "T", "0", "7", $00,  $00, $00, $00, $62, $00, $00, $36, $00, $00, $00, $00, $00, "R", "0", "7", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "7", $00      ;TestCase7
178   891D 00 00 32 00
178   8921 00 00 0B 00
178   8925 54 30 37 00
178   8929 00 00 00 62
178   892D 00 00 36 00
178   8931 00 00 00 00
178   8935 52 30 37 00
178   8939 00 00 00 00
178   893D 00 00 32 00
178   8941 00 00 00 00
178   8945 41 30 37 00
179   8949 00 00 00 64  TestCase8               DB  $00, $00, $00, $64, $00, $00, $32, $00, $00, $00, $0B, $00, "T", "0", "8", $00,  $00, $00, $00, $62, $00, $00, $36, $00, $00, $00, $00, $00, "R", "0", "8", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "8", $00      ;TestCase8
179   894D 00 00 32 00
179   8951 00 00 0B 00
179   8955 54 30 38 00
179   8959 00 00 00 62
179   895D 00 00 36 00
179   8961 00 00 00 00
179   8965 52 30 38 00
179   8969 00 00 00 00
179   896D 00 00 32 00
179   8971 00 00 00 00
179   8975 41 30 38 00
180   8979 E2 04 00 64  TestCase9               DB  $E2, $04, $00, $64, $00, $00, $C8, $00, $00, $0B, $00, $00, "T", "0", "9", $00,  $E4, $04, $00, $2f, $00, $00, $C8, $00, $00, $00, $00, $00, "R", "0", "9", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "0", "9", $00      ;TestCase9
180   897D 00 00 C8 00
180   8981 00 0B 00 00
180   8985 54 30 39 00
180   8989 E4 04 00 2F
180   898D 00 00 C8 00
180   8991 00 00 00 00
180   8995 52 30 39 00
180   8999 00 00 00 00
180   899D 00 00 32 00
180   89A1 00 00 00 00
180   89A5 41 30 39 00
181   89A9 E3 04 00 64  TestCase10              DB  $E3, $04, $00, $64, $00, $00, $C8, $00, $00, $00, $0B, $00, "T", "1", "0", $00,  $E3, $04, $00, $5C, $00, $00, $CC, $00, $00, $00, $00, $00, "R", "1", "0", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "0", $00      ;TestCase10
181   89AD 00 00 C8 00
181   89B1 00 00 0B 00
181   89B5 54 31 30 00
181   89B9 E3 04 00 5C
181   89BD 00 00 CC 00
181   89C1 00 00 00 00
181   89C5 52 31 30 00
181   89C9 00 00 00 00
181   89CD 00 00 32 00
181   89D1 00 00 00 00
181   89D5 41 31 30 00
182   89D9 E4 04 00 64  TestCase11              DB  $E4, $04, $00, $64, $00, $00, $C8, $00, $00, $0B, $0B, $00, "T", "1", "1", $00,  $E5, $04, $00, $27, $00, $00, $CA, $00, $00, $00, $00, $00, "R", "1", "1", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "1", $00      ;TestCase11
182   89DD 00 00 C8 00
182   89E1 00 0B 0B 00
182   89E5 54 31 31 00
182   89E9 E5 04 00 27
182   89ED 00 00 CA 00
182   89F1 00 00 00 00
182   89F5 52 31 31 00
182   89F9 00 00 00 00
182   89FD 00 00 32 00
182   8A01 00 00 00 00
182   8A05 41 31 31 00
183   8A09 64 00 00 E2  TestCase12              DB  $64, $00, $00, $E2, $04, $00, $C8, $00, $00, $0B, $00, $00, "T", "1", "2", $00,  $99, $00, $00, $DE, $04, $00, $C8, $00, $00, $00, $00, $00, "R", "1", "2", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "2", $00      ;TestCase12
183   8A0D 04 00 C8 00
183   8A11 00 0B 00 00
183   8A15 54 31 32 00
183   8A19 99 00 00 DE
183   8A1D 04 00 C8 00
183   8A21 00 00 00 00
183   8A25 52 31 32 00
183   8A29 00 00 00 00
183   8A2D 00 00 32 00
183   8A31 00 00 00 00
183   8A35 41 31 32 00
184   8A39 64 00 00 E2  TestCase13              DB  $64, $00, $00, $E2, $04, $00, $C8, $00, $00, $00, $0B, $00, "T", "1", "3", $00,  $64, $00, $00, $D8, $04, $00, $FD, $00, $00, $00, $00, $00, "R", "1", "3", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "3", $00      ;TestCase13
184   8A3D 04 00 C8 00
184   8A41 00 00 0B 00
184   8A45 54 31 33 00
184   8A49 64 00 00 D8
184   8A4D 04 00 FD 00
184   8A51 00 00 00 00
184   8A55 52 31 33 00
184   8A59 00 00 00 00
184   8A5D 00 00 32 00
184   8A61 00 00 00 00
184   8A65 41 31 33 00
185   8A69 64 00 00 E2  TestCase14              DB  $64, $00, $00, $E2, $04, $00, $C8, $00, $00, $0B, $0B, $00, "T", "1", "4", $00,  $99, $00, $00, $D4, $04, $00, $FD, $00, $00, $00, $00, $00, "R", "1", "4", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "4", $00      ;TestCase14
185   8A6D 04 00 C8 00
185   8A71 00 0B 0B 00
185   8A75 54 31 34 00
185   8A79 99 00 00 D4
185   8A7D 04 00 FD 00
185   8A81 00 00 00 00
185   8A85 52 31 34 00
185   8A89 00 00 00 00
185   8A8D 00 00 32 00
185   8A91 00 00 00 00
185   8A95 41 31 34 00
186   8A99 E2 04 00 64  TestCase15              DB  $E2, $04, $00, $64, $00, $00, $C8, $00, $00, $0B, $00, $00, "T", "1", "5", $00,  $E4, $04, $00, $2F, $00, $00, $C8, $00, $00, $00, $00, $00, "R", "1", "5", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "5", $00      ;TestCase15
186   8A9D 00 00 C8 00
186   8AA1 00 0B 00 00
186   8AA5 54 31 35 00
186   8AA9 E4 04 00 2F
186   8AAD 00 00 C8 00
186   8AB1 00 00 00 00
186   8AB5 52 31 35 00
186   8AB9 00 00 00 00
186   8ABD 00 00 32 00
186   8AC1 00 00 00 00
186   8AC5 41 31 35 00
187   8AC9 64 00 00 E2  TestCase16              DB  $64, $00, $00, $E2, $04, $00, $D0, $07, $00, $0B, $00, $00, "T", "1", "6", $00,  $99, $00, $00, $DE, $04, $00, $D0, $07, $00, $00, $00, $00, "R", "1", "6", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "6", $00      ;TestCase16
187   8ACD 04 00 D0 07
187   8AD1 00 0B 00 00
187   8AD5 54 31 36 00
187   8AD9 99 00 00 DE
187   8ADD 04 00 D0 07
187   8AE1 00 00 00 00
187   8AE5 52 31 36 00
187   8AE9 00 00 00 00
187   8AED 00 00 32 00
187   8AF1 00 00 00 00
187   8AF5 41 31 36 00
188   8AF9 64 00 00 E2  TestCase17              DB  $64, $00, $00, $E2, $04, $00, $D0, $07, $00, $00, $0B, $00, "T", "1", "7", $00,  $64, $00, $00, $8A, $04, $00, $05, $08, $00, $00, $00, $00, "R", "1", "7", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "7", $00      ;TestCase17
188   8AFD 04 00 D0 07
188   8B01 00 00 0B 00
188   8B05 54 31 37 00
188   8B09 64 00 00 8A
188   8B0D 04 00 05 08
188   8B11 00 00 00 00
188   8B15 52 31 37 00
188   8B19 00 00 00 00
188   8B1D 00 00 32 00
188   8B21 00 00 00 00
188   8B25 41 31 37 00
189   8B29 64 00 00 E2  TestCase18              DB  $64, $00, $00, $E2, $04, $00, $D0, $07, $00, $0B, $0B, $00, "T", "1", "8", $00,  $95, $00, $00, $86, $04, $00, $05, $08, $00, $00, $00, $00, "R", "1", "8", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "8", $00      ;TestCase18
189   8B2D 04 00 D0 07
189   8B31 00 0B 0B 00
189   8B35 54 31 38 00
189   8B39 95 00 00 86
189   8B3D 04 00 05 08
189   8B41 00 00 00 00
189   8B45 52 31 38 00
189   8B49 00 00 00 00
189   8B4D 00 00 32 00
189   8B51 00 00 00 00
189   8B55 41 31 38 00
190   8B59 E2 04 00 64  TestCase19              DB  $E2, $04, $00, $64, $00, $00, $D0, $07, $00, $0B, $00, $00, "T", "1", "9", $00,  $E4, $04, $00, $2F, $00, $00, $D0, $07, $00, $00, $00, $00, "R", "1", "9", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "1", "9", $00      ;TestCase19
190   8B5D 00 00 D0 07
190   8B61 00 0B 00 00
190   8B65 54 31 39 00
190   8B69 E4 04 00 2F
190   8B6D 00 00 D0 07
190   8B71 00 00 00 00
190   8B75 52 31 39 00
190   8B79 00 00 00 00
190   8B7D 00 00 32 00
190   8B81 00 00 00 00
190   8B85 41 31 39 00
191   8B89 E2 04 00 64  TestCase20              DB  $E2, $04, $00, $64, $00, $00, $D0, $07, $00, $00, $0B, $00, "T", "2", "0", $00,  $E2, $04, $00, $0E, $00, $00, $D4, $07, $00, $00, $00, $00, "R", "2", "0", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "0", $00      ;TestCase20
191   8B8D 00 00 D0 07
191   8B91 00 00 0B 00
191   8B95 54 32 30 00
191   8B99 E2 04 00 0E
191   8B9D 00 00 D4 07
191   8BA1 00 00 00 00
191   8BA5 52 32 30 00
191   8BA9 00 00 00 00
191   8BAD 00 00 32 00
191   8BB1 00 00 00 00
191   8BB5 41 32 30 00
192   8BB9 E2 04 00 64  TestCase21              DB  $E2, $04, $00, $64, $00, $00, $D0, $07, $00, $0B, $0B, $00, "T", "2", "1", $00,  $E1, $04, $00, $27, $00, $80, $D2, $07, $00, $00, $00, $00, "R", "2", "1", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "1", $00      ;TestCase21
192   8BBD 00 00 D0 07
192   8BC1 00 0B 0B 00
192   8BC5 54 32 31 00
192   8BC9 E1 04 00 27
192   8BCD 00 80 D2 07
192   8BD1 00 00 00 00
192   8BD5 52 32 31 00
192   8BD9 00 00 00 00
192   8BDD 00 00 32 00
192   8BE1 00 00 00 00
192   8BE5 41 32 31 00
193   8BE9 64 00 00 64  TestCase22              DB  $64, $00, $00, $64, $00, $00, $D0, $07, $00, $0B, $00, $00, "T", "2", "2", $00,  $68, $00, $00, $60, $00, $00, $D0, $07, $00, $00, $00, $00, "R", "2", "2", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "2", $00      ;TestCase22
193   8BED 00 00 D0 07
193   8BF1 00 0B 00 00
193   8BF5 54 32 32 00
193   8BF9 68 00 00 60
193   8BFD 00 00 D0 07
193   8C01 00 00 00 00
193   8C05 52 32 32 00
193   8C09 00 00 00 00
193   8C0D 00 00 32 00
193   8C11 00 00 00 00
193   8C15 41 32 32 00
194   8C19 64 00 00 64  TestCase23              DB  $64, $00, $00, $64, $00, $00, $D0, $07, $00, $00, $0B, $00, "T", "2", "3", $00,  $64, $00, $00, $0E, $00, $00, $D4, $07, $00, $00, $00, $00, "R", "2", "3", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "3", $00      ;TestCase23
194   8C1D 00 00 D0 07
194   8C21 00 00 0B 00
194   8C25 54 32 33 00
194   8C29 64 00 00 0E
194   8C2D 00 00 D4 07
194   8C31 00 00 00 00
194   8C35 52 32 33 00
194   8C39 00 00 00 00
194   8C3D 00 00 32 00
194   8C41 00 00 00 00
194   8C45 41 32 33 00
195   8C49 64 00 00 64  TestCase24              DB  $64, $00, $00, $64, $00, $00, $D0, $07, $00, $0B, $0B, $00, "T", "2", "4", $00,  $64, $00, $00, $0A, $00, $00, $D4, $07, $00, $00, $00, $00, "R", "2", "4", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "4", $00      ;TestCase24
195   8C4D 00 00 D0 07
195   8C51 00 0B 0B 00
195   8C55 54 32 34 00
195   8C59 64 00 00 0A
195   8C5D 00 00 D4 07
195   8C61 00 00 00 00
195   8C65 52 32 34 00
195   8C69 00 00 00 00
195   8C6D 00 00 32 00
195   8C71 00 00 00 00
195   8C75 41 32 34 00
196   8C79 88 01 03 64  TestCase25              DB  $88, $01, $03, $64, $00, $00, $C8, $00, $00, $0B, $00, $00, "T", "2", "5", $00,  $21, $00, $03, $AC, $20, $80, $C8, $00, $00, $00, $00, $00, "R", "2", "5", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "5", $00      ;TestCase25
196   8C7D 00 00 C8 00
196   8C81 00 0B 00 00
196   8C85 54 32 35 00
196   8C89 21 00 03 AC
196   8C8D 20 80 C8 00
196   8C91 00 00 00 00
196   8C95 52 32 35 00
196   8C99 00 00 00 00
196   8C9D 00 00 32 00
196   8CA1 00 00 00 00
196   8CA5 41 32 35 00
197   8CA9 88 01 03 64  TestCase26              DB  $88, $01, $03, $64, $00, $00, $C8, $00, $00, $00, $0B, $00, "T", "2", "6", $00,  $88, $01, $03, $5C, $00, $00, $CC, $00, $00, $00, $00, $00, "R", "2", "6", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "6", $00      ;TestCase26
197   8CAD 00 00 C8 00
197   8CB1 00 00 0B 00
197   8CB5 54 32 36 00
197   8CB9 88 01 03 5C
197   8CBD 00 00 CC 00
197   8CC1 00 00 00 00
197   8CC5 52 32 36 00
197   8CC9 00 00 00 00
197   8CCD 00 00 32 00
197   8CD1 00 00 00 00
197   8CD5 41 32 36 00
198   8CD9 88 01 03 64  TestCase27              DB  $88, $01, $03, $64, $00, $00, $C8, $00, $00, $0B, $0B, $00, "T", "2", "7", $00,  $21, $00, $03, $A6, $20, $80, $9F, $00, $00, $00, $00, $00, "R", "2", "7", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "7", $00      ;TestCase27
198   8CDD 00 00 C8 00
198   8CE1 00 0B 0B 00
198   8CE5 54 32 37 00
198   8CE9 21 00 03 A6
198   8CED 20 80 9F 00
198   8CF1 00 00 00 00
198   8CF5 52 32 37 00
198   8CF9 00 00 00 00
198   8CFD 00 00 32 00
198   8D01 00 00 00 00
198   8D05 41 32 37 00
199   8D09 E2 04 00 64  TestCase28              DB  $E2, $04, $00, $64, $00, $00, $88, $01, $03, $0B, $00, $00, "T", "2", "8", $00,  $E4, $04, $00, $2F, $00, $00, $88, $01, $03, $00, $00, $00, "R", "2", "8", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "8", $00      ;TestCase28
199   8D0D 00 00 88 01
199   8D11 03 0B 00 00
199   8D15 54 32 38 00
199   8D19 E4 04 00 2F
199   8D1D 00 00 88 01
199   8D21 03 00 00 00
199   8D25 52 32 38 00
199   8D29 00 00 00 00
199   8D2D 00 00 32 00
199   8D31 00 00 00 00
199   8D35 41 32 38 00
200   8D39 E2 04 00 64  TestCase29              DB  $E2, $04, $00, $64, $00, $00, $88, $01, $03, $00, $0B, $00, "T", "2", "9", $00,  $E2, $04, $00, $AD, $20, $80, $8C, $01, $03, $00, $00, $00, "R", "2", "9", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "2", "9", $00      ;TestCase29
200   8D3D 00 00 88 01
200   8D41 03 00 0B 00
200   8D45 54 32 39 00
200   8D49 E2 04 00 AD
200   8D4D 20 80 8C 01
200   8D51 03 00 00 00
200   8D55 52 32 39 00
200   8D59 00 00 00 00
200   8D5D 00 00 32 00
200   8D61 00 00 00 00
200   8D65 41 32 39 00
201   8D69 E2 04 00 64  TestCase30              DB  $E2, $04, $00, $64, $00, $00, $88, $01, $03, $0B, $0B, $00, "T", "3", "0", $00,  $79, $03, $00, $E1, $20, $80, $8A, $01, $03, $00, $00, $00, "R", "3", "0", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "3", "0", $00      ;TestCase30
201   8D6D 00 00 88 01
201   8D71 03 0B 0B 00
201   8D75 54 33 30 00
201   8D79 79 03 00 E1
201   8D7D 20 80 8A 01
201   8D81 03 00 00 00
201   8D85 52 33 30 00
201   8D89 00 00 00 00
201   8D8D 00 00 32 00
201   8D91 00 00 00 00
201   8D95 41 33 30 00
202   8D99 E2 04 00 88  TestCase31              DB  $E2, $04, $00, $88, $01, $03, $88, $01, $03, $0B, $00, $00, "T", "3", "1", $00,  $F0, $25, $00, $53, $01, $03, $88, $01, $03, $00, $00, $00, "R", "3", "1", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "3", "1", $00      ;TestCase31
202   8D9D 01 03 88 01
202   8DA1 03 0B 00 00
202   8DA5 54 33 31 00
202   8DA9 F0 25 00 53
202   8DAD 01 03 88 01
202   8DB1 03 00 00 00
202   8DB5 52 33 31 00
202   8DB9 00 00 00 00
202   8DBD 00 00 32 00
202   8DC1 00 00 00 00
202   8DC5 41 33 31 00
203   8DC9 E2 04 00 88  TestCase32              DB  $E2, $04, $00, $88, $01, $03, $88, $01, $03, $00, $0B, $00, "T", "3", "2", $00,  $E2, $04, $00, $0C, $DF, $02, $98, $22, $03, $00, $00, $00, "R", "3", "2", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "3", "2", $00      ;TestCase32
203   8DCD 01 03 88 01
203   8DD1 03 00 0B 00
203   8DD5 54 33 32 00
203   8DD9 E2 04 00 0C
203   8DDD DF 02 98 22
203   8DE1 03 00 00 00
203   8DE5 52 33 32 00
203   8DE9 00 00 00 00
203   8DED 00 00 32 00
203   8DF1 00 00 00 00
203   8DF5 41 33 32 00
204   8DF9 E2 04 00 88  TestCase33              DB  $E2, $04, $00, $88, $01, $03, $88, $01, $03, $0B, $0B, $00, "T", "3", "3", $00,  $75, $24, $00, $D7, $DE, $02, $96, $22, $03, $00, $00, $00, "R", "3", "3", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "3", "3", $00      ;TestCase33
204   8DFD 01 03 88 01
204   8E01 03 0B 0B 00
204   8E05 54 33 33 00
204   8E09 75 24 00 D7
204   8E0D DE 02 96 22
204   8E11 03 00 00 00
204   8E15 52 33 33 00
204   8E19 00 00 00 00
204   8E1D 00 00 32 00
204   8E21 00 00 00 00
204   8E25 41 33 33 00
205   8E29 88 01 03 64  TestCase34              DB  $88, $01, $03, $64, $00, $00, $D0, $07, $00, $0B, $00, $00, "T", "3", "4", $00,  $21, $00, $03, $AC, $20, $80, $D0, $07, $00, $00, $00, $00, "R", "3", "4", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "3", "4", $00      ;TestCase25
205   8E2D 00 00 D0 07
205   8E31 00 0B 00 00
205   8E35 54 33 34 00
205   8E39 21 00 03 AC
205   8E3D 20 80 D0 07
205   8E41 00 00 00 00
205   8E45 52 33 34 00
205   8E49 00 00 00 00
205   8E4D 00 00 32 00
205   8E51 00 00 00 00
205   8E55 41 33 34 00
206   8E59 E2 04 00 64  TestCase35              DB  $E2, $04, $00, $64, $00, $00, $C8, $00, $00, $0B, $00, $00, "T", "3", "5", $00,  $E4, $04, $00, $2F, $00, $00, $C8, $00, $00, $00, $00, $00, "R", "3", "5", $00,  $00, $00, $00, $00, $00, $00, $32, $00, $00, $00, $00, $00, "A", "3", "5", $00      ;TestCase28
206   8E5D 00 00 C8 00
206   8E61 00 0B 00 00
206   8E65 54 33 35 00
206   8E69 E4 04 00 2F
206   8E6D 00 00 C8 00
206   8E71 00 00 00 00
206   8E75 52 33 35 00
206   8E79 00 00 00 00
206   8E7D 00 00 32 00
206   8E81 00 00 00 00
206   8E85 41 33 35 00
207   8E89 2D 2D 2D 2D  PaddingString           DB "----------------"
207   8E8D 2D 2D 2D 2D
207   8E91 2D 2D 2D 2D
207   8E95 2D 2D 2D 2D
208   8E99 3E           PaddingString2          DB ">"
209   8E9A 23           testTotal               DB  ($-TestCase1)/48
210   8E9B 7E           PaddingString3          DB "~"
211   8E9C 00           testCounter             DB   0
212   8E9D 7E           PaddingString4          DB "~"
213   8E9E 00           FailPoint               DB   0
214   8E9F 3C 2D 2D 2D  PaddingString5          DB "<---------"
214   8EA3 2D 2D 2D 2D
214   8EA7 2D 2D
215   8EA9 00           SBnKxlo                 DB 0
216   8EAA 00           SBnKxhi                 DB 0
217   8EAB 00           SBnKxsgn                DB 0
218   8EAC 00           SBnKylo                 DB 0
219   8EAD 00           SBnKyhi                 DB 0
220   8EAE 00           SBnKysgn                DB 0
221   8EAF 00           SBnKzlo                 DB 0
222   8EB0 00           SBnKzhi                 DB 0
223   8EB1 00           SBnKzsgn                DB 0
224   8EB2 00 00 00 00  SunAlphaMulX            DS 4
225   8EB6 00 00 00 00  SunAlphaMulY            DS 4
226   8EBA 00 00 00 00  SunBetaMulZ             DS 4
227   8EBE 00 00 00     SunK2                   DS 3
228   8EC1 00 00 00 00  UBnKxlo                 DS 4
229   8EC5
230   8EC5
231   8EC5 3A 99 83     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
232   8EC8 21 8B 83                             ld      hl,BETA
233   8ECB B6                                   or      (hl)
234   8ECC E6 7F                                and     SignMask8Bit
235   8ECE CA 7F 8F                             jp      z,.NoRotation
236   8ED1 3A 99 83     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
237   8ED4 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
238   8ED6 57                                   ld      d,a                         ; .
239   8ED7 3A A9 8E                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
240   8EDA 5F                                   ld      e,a                         ; .
241   8EDB 2A AA 8E                             ld      hl,(SBnKxhi)                ; .
242   8EDE CD B3 81                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
243   8EE1              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
244   8EE1                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
245   8EE1 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
246   8EE2 32 B3 8E                             ld      (SunAlphaMulX+1),a
247   8EE5 7B                                   ld      a,e
248   8EE6 32 B4 8E                             ld      (SunAlphaMulX+2),a
249   8EE9 7A                                   ld      a,d
250   8EEA 32 B5 8E                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
251   8EED ED 5B AD 8E  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
252   8EF1 3A AC 8E                             ld      a,(SBnKylo)                 ; .
253   8EF4 6F                                   ld      l,a                         ; .
254   8EF5 ED 4B B4 8E                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
255   8EF9 3A B3 8E                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
256   8EFC 67                                   ld      h,a                         ; .
257   8EFD CD A3 82                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
258   8F00 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
259   8F01 32 BE 8E                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
260   8F04 ED 53 BF 8E                          ld      (SunK2+1),de                ;
261   8F08 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
262   8F09 5F                                   ld      e,a                         ; .
263   8F0A 3A 8B 83                             ld      a,(BETA)                    ; D = BETA
264   8F0D 57                                   ld      d,a                         ; .
265   8F0E CD B3 81                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
266   8F11 ED 4B B0 8E  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
267   8F15 3A AF 8E                             ld      a,(SBnKzlo)                 ;
268   8F18 67                                   ld      h,a                         ;
269   8F19 CD A3 82                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
270   8F1C ED 53 B0 8E                          ld      (SBnKzhi),de                ; z = resuklt
271   8F20 7D                                   ld      a,l                         ; .
272   8F21 32 AF 8E                             ld      (SBnKzlo),a                 ; .
273   8F24 3A 8B 83     .CalcBetaZ:             ld      a,(BETA)
274   8F27 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
275   8F29 57                                   ld      d,a                         ; .
276   8F2A 3A AF 8E                             ld      a,(SBnKzlo)                 ; HLE = z
277   8F2D 5F                                   ld      e,a                         ; .
278   8F2E 2A B0 8E                             ld      hl,(SBnKzhi)                ; .
279   8F31 CD B3 81                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
280   8F34              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
281   8F34                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
282   8F34                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
283   8F34                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
284   8F34                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
285   8F34                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
286   8F34                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
287   8F34                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
288   8F34 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
289   8F36 65                                   ld      h,l
290   8F37 ED 5B BF 8E                          ld      de,(SunK2+1)                ; DEL = k2
291   8F3B 3A BE 8E                             ld      a,(SunK2)
292   8F3E 6F                                   ld      l,a
293   8F3F CD A3 82                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
294   8F42 ED 53 AD 8E                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
295   8F46 7D                                   ld      a,l                         ; .
296   8F47 32 AC 8E                             ld      (SBnKylo),a                 ; .
297   8F4A 3A 99 83     .CalcAlphaMulY:         ld      a,(ALPHA)
298   8F4D 57                                   ld      d,a                         ; d = alpha (Q value)
299   8F4E 3A AC 8E                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
300   8F51 5F                                   ld      e,a                         ; .
301   8F52 2A AD 8E                             ld      hl,(SBnKyhi)                ; .
302   8F55 CD B3 81                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
303   8F58 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
304   8F59 32 B6 8E                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
305   8F5C 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
306   8F5D 32 B7 8E                             ld      (SunAlphaMulY+1),a
307   8F60 7B                                   ld      a,e
308   8F61 32 B8 8E                             ld      (SunAlphaMulY+2),a
309   8F64 7A                                   ld      a,d
310   8F65 32 B9 8E                             ld      (SunAlphaMulY+3),a
311   8F68 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
312   8F6A 65                                   ld      h,l                         ; .
313   8F6B ED 5B AA 8E                          ld      de,(SBnKxhi)                ; DEL = Y
314   8F6F 3A A9 8E                             ld      a,(SBnKxlo)                 ; .
315   8F72 6F                                   ld      l,a                         ; .
316   8F73 CD A3 82                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
317   8F76 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
318   8F77 63                                   ld      h,e                         ;
319   8F78 32 AB 8E     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
320   8F7B 22 A9 8E                             ld      (SBnKxlo) ,hl               ; .
321   8F7E C9                                   ret
322   8F7F 3A 7F 84     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
323   8F82                                      ReturnIfAIsZero
323   8F82 A7          >                        and     a
323   8F83 C8          >                        ret     z
324   8F84 0E 00                                ld      c,0                         ;
325   8F86 67                                   ld      h,a                         ;
326   8F87 06 80                                ld      b,$80                       ;
327   8F89 ED 5B B0 8E                          ld      de,(SBnKzhi)                ; DEL = z position
328   8F8D 3A AF 8E                             ld      a,(SBnKzlo)                 ; .
329   8F90 6F                                   ld      l,a                         ; .
330   8F91 CD A3 82                             call    AddBCHtoDELsigned           ; update speed
331   8F94 ED 53 B0 8E                          ld      (SBnKzhi),DE                ; write back to zpos
332   8F98 7D                                   ld      a,l
333   8F99 32 AF 8E                             ld      (SBnKzlo),a                ;
334   8F9C C9                                   ret
335   8F9D
336   8F9D
337   8F9D
338   8F9D                  SAVENEX OPEN "mathsunminsky.nex", $8000 , $7F00
339   8F9D                  SAVENEX CFG  0,0,0,1
340   8F9D                  SAVENEX AUTO
341   8F9D                  SAVENEX CLOSE
342   8F9D
# file closed: mathsunminsky.asm
