# file opened: m24test.asm
  1   0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
  2   0000                              DISPLAY "m24test test"
  3   0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
  4   0000
  5   0000
  6   0000                  DEFINE DEBUGMODE 1
  7   0000                  DEVICE ZXSPECTRUMNEXT
  8   0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  9   0000                  ;DEFINE  TESTING_MATHS_DIVIDE 1
 10   0000               CSPECTMAP m24test.map
 11   0000               OPT --zxnext=cspect --syntax=a --reversepop
 12   0000                             DEFINE     MAIN_INTERRUPTENABLE 1
 13   0000              DEBUGSEGSIZE   equ 1
 14   0000              DEBUGLOGSUMMARY equ 1
 15   0000
 16   0000
 17   0000              ;----------------------------------------------------------------------------------------------------------------------------------
 18   0000              ; Game Defines
 19   0000              ScreenLocal      EQU 0
 20   0000              ScreenGalactic   EQU ScreenLocal + 1
 21   0000              ScreenMarket     EQU ScreenGalactic + 1
 22   0000              ScreenMarketDsp  EQU ScreenMarket + 1
 23   0000              ScreenStatus     EQU ScreenMarketDsp + 1
 24   0000              ScreenInvent     EQU ScreenStatus + 1
 25   0000              ScreenPlanet     EQU ScreenInvent + 1
 26   0000              ScreenEquip      EQU ScreenPlanet + 1
 27   0000              ScreenLaunch     EQU ScreenEquip + 1
 28   0000              ScreenFront      EQU ScreenLaunch + 1
 29   0000              ScreenAft        EQU ScreenFront+1
 30   0000              ScreenLeft       EQU ScreenAft+1
 31   0000              ScreenRight      EQU ScreenLeft+1
 32   0000              ScreenDocking    EQU ScreenRight+1
 33   0000              ScreenHyperspace EQU ScreenDocking+1
 34   0000              ;----------------------------------------------------------------------------------------------------------------------------------
 35   0000              ; Colour Defines
 36   0000              SignMask8Bit		equ %01111111
 37   0000              SignMask16Bit		equ %0111111111111111
 38   0000              SignOnly8Bit		equ $80
 39   0000              SignOnly16Bit		equ $8000
 40   0000
 41   0000              Bit7Only            equ %10000000
 42   0000              Bit6Only            equ %01000000
 43   0000              Bit5Only            equ %00100000
 44   0000              Bit4Only            equ %00010000
 45   0000              Bit3Only            equ %00001000
 46   0000              Bit2Only            equ %00000100
 47   0000              Bit1Only            equ %00000010
 48   0000              Bit0Only            equ %00000001
 49   0000              Bit7Clear           equ %01111111
 50   0000              Bit6Clear           equ %10111111
 51   0000              Bit5Clear           equ %11011111
 52   0000              Bit4Clear           equ %11101111
 53   0000              Bit3Clear           equ %11110111
 54   0000              Bit2Clear           equ %11111011
 55   0000              Bit1Clear           equ %11111101
 56   0000              Bit0Clear           equ %11111110
 57   0000              ConstPi				equ $80
 58   0000              ConstNorm           equ 197
 59   0000
 60   0000
 61   0000
 62   0000                                      INCLUDE "../../Macros/jumpMacros.asm"
# file opened: jumpMacros.asm
  1+  0000              JumpIfHLNegative:       MACRO target
  2+  0000 ~                                    bit     7,h
  3+  0000 ~                                    jp      nz,target
  4+  0000                                      ENDM
  5+  0000
  6+  0000              JumpIfPositive:	        MACRO target
  7+  0000 ~                                    jp		p, target
  8+  0000                                      ENDM
  9+  0000
 10+  0000              JumpIfNegative:	        MACRO target
 11+  0000 ~                                    jp		m, target
 12+  0000                                      ENDM
 13+  0000
 14+  0000
 15+  0000              JumpIfUnderflow:	    MACRO target
 16+  0000 ~                                    jp		po, target
 17+  0000                                      ENDM
 18+  0000
 19+  0000              JumpIfOverflow:	        MACRO target
 20+  0000 ~                                    jp		po, target
 21+  0000                                      ENDM
 22+  0000
 23+  0000
 24+  0000              JumpIfNotZero:	        MACRO target
 25+  0000 ~                                    jp	nz,target
 26+  0000                                      ENDM
 27+  0000
 28+  0000              JumpIfZero:	            MACRO target
 29+  0000 ~                                    jp	z,target
 30+  0000                                      ENDM
 31+  0000
 32+  0000              ;.. Bit routines
 33+  0000              JumpOnLeadSignSet:      MACRO   reg, target
 34+  0000 ~                                    ld      a,reg
 35+  0000 ~                                    and     SignOnly8Bit
 36+  0000 ~                                    jp      nz,target
 37+  0000                                      ENDM
 38+  0000
 39+  0000              JumpOnLeadSignClear:    MACRO   reg, target
 40+  0000 ~                                    ld      a,reg
 41+  0000 ~                                    and     SignOnly8Bit
 42+  0000 ~                                    jp      z,target
 43+  0000                                      ENDM
 44+  0000
 45+  0000              JumpOnLeadSignSetA:     MACRO   target
 46+  0000 ~                                    and     SignOnly8Bit
 47+  0000 ~                                    jp      nz,target
 48+  0000                                      ENDM
 49+  0000
 50+  0000              JumpOnLeadSignClearA:   MACRO   target
 51+  0000 ~                                    and     SignOnly8Bit
 52+  0000 ~                                    jp      z,target
 53+  0000                                      ENDM
 54+  0000
 55+  0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
 56+  0000 ~                                    ld      a,(mem)
 57+  0000 ~                                    bit 	bitnbr,a
 58+  0000 ~                                    jp      nz,target
 59+  0000                                      ENDM
 60+  0000
 61+  0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
 62+  0000 ~                                    ld      a,(mem)
 63+  0000 ~                                    bit 	bitnbr,a
 64+  0000 ~                                    jp      z,target
 65+  0000                                      ENDM
 66+  0000
 67+  0000
 68+  0000              JumpOnABitSet:          MACRO   bitnbr, target
 69+  0000 ~                                    bit 	bitnbr, a
 70+  0000 ~                                    jp      nz,target
 71+  0000                                      ENDM
 72+  0000
 73+  0000              JumpOnABitClear:        MACRO   bitnbr, target
 74+  0000 ~                                    bit 	bitnbr, a
 75+  0000 ~                                    jp      z,target
 76+  0000                                      ENDM
 77+  0000
 78+  0000              JumpOnABit5Set:         MACRO   target
 79+  0000 ~                                    and     Bit5Only
 80+  0000 ~                                    jp      nz,target
 81+  0000                                      ENDM
 82+  0000
 83+  0000              JumpOnABit5Clear:       MACRO   target
 84+  0000 ~                                    and     Bit5Only
 85+  0000 ~                                    jp      z,target
 86+  0000                                      ENDM
 87+  0000
 88+  0000              JumpOnBitMaskSet:       MACRO   bitmask, target
 89+  0000 ~                                    and     bitmask
 90+  0000 ~                                    jp      nz,target
 91+  0000                                      ENDM
 92+  0000
 93+  0000              JumpOnBitMaskClear:     MACRO   bitmask, target
 94+  0000 ~                                    and     bitmask
 95+  0000 ~                                    jp      z,target
 96+  0000                                      ENDM
 97+  0000
 98+  0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
 99+  0000 ~                                    ld      a,(mem)
100+  0000 ~                                    and     bitmask
101+  0000 ~                                    jp      nz,target
102+  0000                                      ENDM
103+  0000
104+  0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
105+  0000 ~                                    ld      a,(mem)
106+  0000 ~                                    and     bitmask
107+  0000 ~                                    jp      z,target
108+  0000                                      ENDM
109+  0000
110+  0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
111+  0000 ~                                    bit 	bitnbr,reg
112+  0000 ~                                    jp      nz,target
113+  0000                                      ENDM
114+  0000
115+  0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
116+  0000 ~                                    bit 	bitnbr,reg
117+  0000 ~                                    jp      z,target
118+  0000                                      ENDM
119+  0000
120+  0000              ; Comparison Routines
121+  0000              JumpIfAGTEusng:         MACRO
122+  0000 ~                                    jp		nc,target
123+  0000                                      ENDM
124+  0000
125+  0000              JumpIfAGTENusng:        MACRO reg,target
126+  0000 ~                                    cp     reg
127+  0000 ~                                    jp		nc,target
128+  0000                                      ENDM
129+  0000
130+  0000              JumpIfAGTEMemusng:      MACRO mem,target
131+  0000 ~                                    ld      hl,mem
132+  0000 ~                                    cp      (hl)
133+  0000 ~                                    jp		nc,target
134+  0000                                      ENDM
135+  0000              JumpIfMemGTENusng:      MACRO mem, value, target
136+  0000 ~                                    ld     a,(mem)
137+  0000 ~                                    cp     value
138+  0000 ~                                    jp	  nc,target
139+  0000                                      ENDM
140+  0000
141+  0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
142+  0000 ~                                    ld   a,(mem)
143+  0000 ~                                    ld   hl,address
144+  0000 ~                                    cp   (hl)
145+  0000 ~                                    jp	  nc,target
146+  0000                                      ENDM
147+  0000
148+  0000              JumpIfMemEqMemusng:     MACRO mem, address, target
149+  0000 ~                                    ld   a,(mem)
150+  0000 ~                                    ld   hl,address
151+  0000 ~                                    cp   (hl)
152+  0000 ~                                    jp	  z,target
153+  0000                                      ENDM
154+  0000
155+  0000              JumpIfMemNeMemusng:     MACRO mem, address, target
156+  0000 ~                                    ld   a,(mem)
157+  0000 ~                                    ld   hl,address
158+  0000 ~                                    cp   (hl)
159+  0000 ~                                    jp	  nz,target
160+  0000                                      ENDM
161+  0000
162+  0000              JumpIfMemTrue:          MACRO mem, target
163+  0000 ~                                    ld      a,(mem)
164+  0000 ~                                    and     a
165+  0000 ~                                    jp      z, target
166+  0000                                      ENDM
167+  0000
168+  0000              JumpIfMemFalse:         MACRO mem, target
169+  0000 ~                                    ld      a,(mem)
170+  0000 ~                                    and     a
171+  0000 ~                                    jp      nz, target
172+  0000                                      ENDM
173+  0000
174+  0000              JumpIfATrue:            MACRO target
175+  0000 ~                                    and     a
176+  0000 ~                                    jp      z, target
177+  0000                                      ENDM
178+  0000
179+  0000              JumpIfAFalse:           MACRO target
180+  0000 ~                                    and     a
181+  0000 ~                                    jp      nz, target
182+  0000                                      ENDM
183+  0000
184+  0000              JumpIfANotFalse:        MACRO target
185+  0000 ~                                    cp      $FF
186+  0000 ~                                    jp      nz, target
187+  0000                                      ENDM
188+  0000
189+  0000              ;-- Less than Macros -------------------------------------------
190+  0000              JumpIfALTMemHLusng:     MACRO target
191+  0000 ~                                    cp    (hl)
192+  0000 ~                                    jp	  c,target
193+  0000                                      ENDM
194+  0000
195+  0000              JumpIfRegLTE:           MACRO   reg, value, target
196+  0000 ~                                    ld      a,reg
197+  0000 ~                                    cp      value
198+  0000 ~                                    jp	    z,target
199+  0000 ~                                    jp		c, target
200+  0000                                      ENDM
201+  0000
202+  0000              JumpIfALTMemusng:       MACRO mem,target
203+  0000 ~                                    ld      hl,mem
204+  0000 ~                                    cp      (hl)
205+  0000 ~                                    jp		c,target
206+  0000                                      ENDM
207+  0000
208+  0000
209+  0000              JumpIfALTusng:          MACRO target
210+  0000 ~                                    jp		c,target
211+  0000                                      ENDM
212+  0000
213+  0000              JumpIfALTNusng:         MACRO value, target
214+  0000 ~                                    cp      value
215+  0000 ~                                    jp		c, target
216+  0000                                      ENDM
217+  0000
218+  0000              JumpIfALTNsigned:       MACRO   value, target
219+  0000 ~                                    cp      value
220+  0000 ~                                    jp      m,.SignSet
221+  0000 ~            .SignClear:             jp      pe,target       ; Sign (0), P/V (1)
222+  0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (0)
223+  0000 ~            .SignSet:               jp      po,target
224+  0000 ~            .CheckComplete:
225+  0000                                      ENDM
226+  0000
227+  0000              JumpIfMemLTNusng:       MACRO mem, value, target
228+  0000 ~                                    ld      a,(mem)
229+  0000 ~                                    cp      value
230+  0000 ~                                    jp	  c,target
231+  0000                                      ENDM
232+  0000
233+  0000              JumpIfMemLTMemusng:     MACRO mem, value, target
234+  0000 ~                                    ld    a,(mem)
235+  0000 ~                                    ld    hl,value
236+  0000 ~                                    cp    (hl)
237+  0000 ~                                    jp	  c,target
238+  0000                                      ENDM
239+  0000              ;-- ------------------------------------------------------------
240+  0000              JumpIfAGTENsigned       MACRO   value, target
241+  0000 ~                                    cp      value
242+  0000 ~                                    jp      m,.SignSet
243+  0000 ~            .SignClear:             jp      po,target       ; Sign (0), P/V (0)
244+  0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (1)
245+  0000 ~            .SignSet:               jp      pe,target
246+  0000 ~            .CheckComplete:
247+  0000                                      ENDM
248+  0000
249+  0000              JumpIfMemEqNusng:       MACRO mem,value,target
250+  0000 ~                                    ld  a,(mem)
251+  0000 ~                                    cp  value
252+  0000 ~                                    jp  z,target
253+  0000                                      ENDM
254+  0000
255+  0000              JumpIfMemNeNusng:       MACRO mem,value,target
256+  0000 ~                                    ld  a,(mem)
257+  0000 ~                                    cp  value
258+  0000 ~                                    jp  nz,target
259+  0000                                      ENDM
260+  0000
261+  0000              JumpIfMemZero:          MACRO mem,target
262+  0000 ~                                    ld  a,(mem)
263+  0000 ~                                    and a
264+  0000 ~                                    jp  z,target
265+  0000                                      ENDM
266+  0000
267+  0000              JumpIfMemNotZero:       MACRO mem,target
268+  0000 ~                                    ld  a,(mem)
269+  0000 ~                                    and a
270+  0000 ~                                    jp  nz,target
271+  0000                                      ENDM
272+  0000
273+  0000              JumpIfANENusng:         MACRO value, target
274+  0000 ~                                    cp     value
275+  0000 ~                                    jp      nz,target
276+  0000                                      ENDM
277+  0000
278+  0000              JumpIfANEquNusng:       MACRO value, target
279+  0000 ~                                    cp     value
280+  0000 ~                                    jp     z,target
281+  0000                                      ENDM
282+  0000
283+  0000              JumpIfANEMemusng:       MACRO  value, target
284+  0000 ~                                    ld    hl,value
285+  0000 ~                                    cp    (hl)
286+  0000 ~                                    jp      nz,target
287+  0000                                      ENDM
288+  0000
289+  0000              JumpIfAEqNusng:         MACRO value, target
290+  0000 ~                                    cp     value
291+  0000 ~                                    jp      z,target
292+  0000                                      ENDM
293+  0000
294+  0000              JumpIfAIsZero:	        MACRO target
295+  0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
296+  0000 ~                                    jp	    z, target
297+  0000                                      ENDM
298+  0000
299+  0000              JumpIfRegIsNotZero:     MACRO   reg, target
300+  0000 ~                                    ld      a,reg
301+  0000 ~                                    and     a
302+  0000 ~                                    jp	    nz,target
303+  0000                                      ENDM
304+  0000
305+  0000
306+  0000              JumpIfAIsNotZero:       MACRO target
307+  0000 ~                                    and     a
308+  0000 ~                                    jp	    nz,target
309+  0000                                      ENDM
310+  0000
311+  0000              JumpIfMemIsNotZero:     MACRO value, target
312+  0000 ~                                    ld      a,(value)
313+  0000 ~                                    and     a
314+  0000 ~                                    jp	    nz,target
315+  0000                                      ENDM
316+  0000              IfResultZeroGoto:	    MACRO target
317+  0000 ~                                    jp	z,target
318+  0000                                      ENDM
319+  0000
320+  0000              IfResultNotZeroGoto:    MACRO target
321+  0000 ~                                    jp	nz,target
322+  0000                                      ENDM
323+  0000
# file closed: jumpMacros.asm
 63   0000                                      INCLUDE "../../Macros/MathsMacros.asm"
# file opened: MathsMacros.asm
  1+  0000              ZeroA:		            MACRO
  2+  0000 ~                                    xor a
  3+  0000                                      ENDM
  4+  0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
  5+  0000              IsHLGT255:              MACRO
  6+  0000 ~                                    bit     7,h
  7+  0000 ~                                    ret     z
  8+  0000 ~                                    ld      a,h
  9+  0000 ~                                    and     a
 10+  0000                                      ENDM
 11+  0000
 12+  0000              ; Sets z flat if HL = 255 else sets it to nz
 13+  0000              IsHLEqu255:             MACRO
 14+  0000 ~                                    ld      a,h
 15+  0000 ~                                    and     a               ; if its non zero then it can't be 255
 16+  0000 ~                                    ret     nz
 17+  0000 ~                                    ld      a,l
 18+  0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
 19+  0000                                      ENDM
 20+  0000
 21+  0000              ; Sets Z flag if GT 127 else nz
 22+  0000              IsHLGT127:              MACRO
 23+  0000 ~                                    bit     7,h             ; -ve?
 24+  0000 ~                                    jr      nz,.DoneCheck
 25+  0000 ~                                    ld      a,h             ; +ve > 256?
 26+  0000 ~                                    and     a
 27+  0000 ~                                    jr      nz,.DoneCheck
 28+  0000 ~                                    ld      a,l
 29+  0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
 30+  0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
 31+  0000 ~            .DoneCheck:
 32+  0000                                      ENDM
 33+  0000
 34+  0000              ReturnIfHLGT127:        MACRO
 35+  0000 ~                                    bit     7,h             ; -ve?
 36+  0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
 37+  0000 ~                                    ld      a,h             ; +ve > 256?
 38+  0000 ~                                    and     a               ;
 39+  0000 ~                                    ret     nz              ; forces a return
 40+  0000 ~                                    bit     7,l             ; bit 7 of lower set?
 41+  0000 ~                                    ret     nz              ; forces a return
 42+  0000 ~            .DoneCheck:
 43+  0000                                      ENDM
 44+  0000
 45+  0000              IsDEGT127:              MACRO
 46+  0000 ~                                    bit     7,d
 47+  0000 ~                                    jr      nz,.DoneCheck
 48+  0000 ~                                    ld      a,d
 49+  0000 ~                                    jr      nz,.DoneCheck
 50+  0000 ~                                    ld      a,e
 51+  0000 ~                                    and     $80
 52+  0000 ~            .DoneCheck:
 53+  0000                                      ENDM
 54+  0000
 55+  0000              ABSa2c:                 MACRO
 56+  0000 ~                                    bit     7,a
 57+  0000 ~                                    jp      z,.DoneABSa
 58+  0000 ~                                    neg
 59+  0000 ~            .DoneABSa:
 60+  0000                                      ENDM
 61+  0000
 62+  0000              DEEquSquareA:           MACRO
 63+  0000 ~                                    ld  d,a
 64+  0000 ~                                    ld  e,a
 65+  0000 ~                                    mul de
 66+  0000                                      ENDM
 67+  0000
 68+  0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
 69+  0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 70+  0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
 71+  0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
 72+  0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
 73+  0000 ~                                    xor $80                             ;
 74+  0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 75+  0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 76+  0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
 77+  0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
 78+  0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 79+  0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 80+  0000                                      ENDM
 81+  0000
 82+  0000              SignedHLTo2C:           MACRO
 83+  0000 ~                                    bit     7,h
 84+  0000 ~                                    jr      z,.Done2c
 85+  0000 ~                                    ld      a,h
 86+  0000 ~                                    and     SignMask8Bit
 87+  0000 ~                                    ld      h,a
 88+  0000 ~                                    NegHL
 89+  0000 ~            .Done2c:
 90+  0000                                      ENDM
 91+  0000
 92+  0000              MemSignedTo2C:          MACRO   memfrom
 93+  0000 ~                                    ld      hl,(memfrom)
 94+  0000 ~                                    bit     7,h
 95+  0000 ~                                    jr      z,.Done2c
 96+  0000 ~                                    ld      a,h
 97+  0000 ~                                    and     SignMask8Bit
 98+  0000 ~                                    ld      h,a
 99+  0000 ~            .Done2c:                ld      (memfrom),hl
100+  0000                                      ENDM
101+  0000
102+  0000
103+  0000                  ;returns result in H
104+  0000              EDiv10Inline:           MACRO
105+  0000 ~                                    ld      d,0
106+  0000 ~                                    ld      hl,de
107+  0000 ~                                    add     hl,hl
108+  0000 ~                                    add     hl,de
109+  0000 ~                                    add     hl,hl
110+  0000 ~                                    add     hl,hl
111+  0000 ~                                    add     hl,de
112+  0000 ~                                    add     hl,hl
113+  0000                                      ENDM
114+  0000
115+  0000              cpHLDE:                 MACRO
116+  0000 ~                                    push    hl
117+  0000 ~                                    and     a
118+  0000 ~                                    sbc     hl,de
119+  0000 ~                                    pop     hl
120+  0000                                      ENDM
121+  0000
122+  0000              cpABSDEHL:              MACRO
123+  0000 ~                                    push     hl,,de
124+  0000 ~                                    ld      a,h
125+  0000 ~                                    and     $7F
126+  0000 ~                                    ld      h,a
127+  0000 ~                                    ld      a,d
128+  0000 ~                                    and     $7F
129+  0000 ~                                    ld      d,a
130+  0000 ~                                    ex      de,hl
131+  0000 ~                                    sbc     hl,de
132+  0000 ~                                    pop     hl,,de
133+  0000                                      ENDM
134+  0000
135+  0000              ; Simple are they both the same setting z if they are
136+  0000              ; tehcicall this works but it measn the final ret z is alwys done
137+  0000              ; so jp needs to be to a target
138+  0000              cpHLEquDE:              MACRO   passedCheck
139+  0000 ~                                    ld      a,h
140+  0000 ~                                    cp      d
141+  0000 ~                                    jp      nz, passedCheck
142+  0000 ~                                    ld      a,l
143+  0000 ~                                    cp      e
144+  0000 ~            .NoTheSame:
145+  0000                                      ENDM
146+  0000
147+  0000              cpHLEquBC:              MACRO   passedCheck
148+  0000 ~                                    ld      a,h
149+  0000 ~                                    cp      b
150+  0000 ~                                    jp      nz, passedCheck
151+  0000 ~                                    ld      a,l
152+  0000 ~                                    cp      c
153+  0000 ~            .NoTheSame:
154+  0000                                      ENDM
155+  0000
156+  0000              cpDEEquBC:              MACRO   passedCheck
157+  0000 ~                                    ld      a,d
158+  0000 ~                                    cp      b
159+  0000 ~                                    jp      nz, passedCheck
160+  0000 ~                                    ld      a,e
161+  0000 ~                                    cp      c
162+  0000 ~            .NoTheSame:
163+  0000                                      ENDM
164+  0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
165+  0000              cpHLDELeadSign:         MACRO
166+  0000 ~                                    ld      a,h
167+  0000 ~                                    cp      d
168+  0000 ~                                    jr      nz,.FullCompare
169+  0000 ~                                    ld      a,l
170+  0000 ~                                    cp      e
171+  0000 ~                                    ret     z
172+  0000 ~            .FullCompare:           ld      a,h
173+  0000 ~                                    xor     d
174+  0000 ~                                    and     $80
175+  0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
176+  0000 ~                                    ld      a,h                 ; same signs so a little simpler
177+  0000 ~                                    and     $80
178+  0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
179+  0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
180+  0000 ~            .OppositeSigns:         ld      a,h
181+  0000 ~                                    and     $80
182+  0000 ~                                    and     $80
183+  0000 ~                                    jp      z,.HLGTDE
184+  0000 ~            .HLLTDE:                SetCarryFlag
185+  0000 ~                                    ret
186+  0000 ~            .HLGTDE:                ClearCarryFlag
187+  0000 ~                                    ret
188+  0000                                      ENDM
189+  0000
190+  0000              ;Unsigned
191+  0000              ;If HL == DE, then Z flag is set.
192+  0000              ;If HL != DE, then Z flag is reset.
193+  0000              ;If HL <  DE, then C flag is set.
194+  0000              ;If HL >= DE, then C flag is reset.
195+  0000              ;
196+  0000              ;Signed
197+  0000              ;If HL == DE, then Z flag is set.
198+  0000              ;If HL != DE, then Z flag is reset.
199+  0000              ;If HL <  DE, then S and P/V are different.
200+  0000              ;If HL >= DE, then S and P/V are the same.
201+  0000
202+  0000
203+  0000              N0equN1byN2div256:      MACRO param1,param2,param3
204+  0000 ~                                    ld      a,param3                        ;
205+  0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
206+  0000 ~                                    ld      a,param2                        ; A = XX16 element
207+  0000 ~                                    ld      d,a
208+  0000 ~                                    mul
209+  0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
210+  0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
211+  0000                                      ENDM
212+  0000
213+  0000              AequN1xorN2:            MACRO  param1,param2
214+  0000 ~                                    ld      a,(param1)
215+  0000 ~                                    xor     param2
216+  0000                                      ENDM
217+  0000
218+  0000              SpeedMulAxis:           MACRO   speedreg, axis
219+  0000 ~                                    ld      e,speedreg
220+  0000 ~                                    ld      hl,(axis)
221+  0000 ~                                    ld      a,h
222+  0000 ~                                    ClearSignBitA
223+  0000 ~                                    ld      d,a
224+  0000 ~                                    mul     de
225+  0000 ~                                    ld      a,h
226+  0000 ~                                    SignBitOnlyA
227+  0000 ~                                    ld      b,a;ld      c,a
228+  0000 ~                                    ld      h,d;ld      e,d
229+  0000 ~                                    ld      c,0;ld      d,0
230+  0000                                      ENDM
231+  0000
232+  0000              ; Adds speed (8 bit) to vertex (24 bit signed)
233+  0000              AddSpeedToVert:         MACRO   vertex
234+  0000 ~                                    ld      de,(vertex+1)
235+  0000 ~                                    ld      a,(vertex)
236+  0000 ~                                    ld      l,a
237+  0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
238+  0000 ~                                    ld      a,l
239+  0000 ~                                    ld      (vertex),a
240+  0000 ~                                    ld      (vertex+1),de
241+  0000                                      ENDM
# file closed: MathsMacros.asm
 64   0000                                      INCLUDE "../../Macros/ShiftMacros.asm"
# file opened: ShiftMacros.asm
  1+  0000              ShiftIYRight1: MACRO
  2+  0000 ~                           ld   a,iyh
  3+  0000 ~                           srl  a
  4+  0000 ~                           ld   iyh,a
  5+  0000 ~                           ld   a,iyl
  6+  0000 ~                           rra
  7+  0000 ~                           ld   iyl,a
  8+  0000                             ENDM
  9+  0000
 10+  0000              ShiftIXRight1: MACRO
 11+  0000 ~                           ld   a,ixh
 12+  0000 ~                           srl  a
 13+  0000 ~                           ld   ixh,a
 14+  0000 ~                           ld   a,ixl
 15+  0000 ~                           rra
 16+  0000 ~                           ld   ixl,a
 17+  0000                             ENDM
 18+  0000
 19+  0000              ShiftIXhHLRight1: MACRO
 20+  0000 ~                           ld  a,ixh
 21+  0000 ~                           srl a
 22+  0000 ~                           ld  ixh,a
 23+  0000 ~                           rr  h
 24+  0000 ~                           rr  l
 25+  0000                             ENDM
 26+  0000
 27+  0000              ShiftIYhDERight1: MACRO
 28+  0000 ~                           ld  a,iyh
 29+  0000 ~                           srl a
 30+  0000 ~                           ld  iyh,a
 31+  0000 ~                           rr  d
 32+  0000 ~                           rr  e
 33+  0000                             ENDM
 34+  0000
 35+  0000              ShiftIYlBCRight1: MACRO
 36+  0000 ~                           ld  a,iyl
 37+  0000 ~                           srl a
 38+  0000 ~                           ld  iyl,a
 39+  0000 ~                           rr  b
 40+  0000 ~                           rr  c
 41+  0000                             ENDM
 42+  0000
 43+  0000              ShiftIXlBCRight1: MACRO
 44+  0000 ~                           ld  a,ixl
 45+  0000 ~                           srl a
 46+  0000 ~                           ld  ixl,a
 47+  0000 ~                           rr  b
 48+  0000 ~                           rr  c
 49+  0000                             ENDM
 50+  0000
 51+  0000              ShiftHLRight1: MACRO
 52+  0000 ~                           srl h
 53+  0000 ~                           rr  l
 54+  0000                             ENDM
 55+  0000
 56+  0000              ShiftBHLRight1:MACRO
 57+  0000 ~                           srl b
 58+  0000 ~                           rr h
 59+  0000 ~                           rr  l
 60+  0000                             ENDM
 61+  0000
 62+  0000              ShiftCDERight1:MACRO
 63+  0000 ~                           srl c
 64+  0000 ~                           rr  d
 65+  0000 ~                           rr  e
 66+  0000                             ENDM
 67+  0000
 68+  0000
 69+  0000              SRAHLRight1: MACRO
 70+  0000 ~                           sra h
 71+  0000 ~                           rr  l
 72+  0000                             ENDM
 73+  0000
 74+  0000              ShiftDERight1: MACRO
 75+  0000 ~                           srl d
 76+  0000 ~                           rr  e
 77+  0000                             ENDM
 78+  0000
 79+  0000              ShiftBCRight1: MACRO
 80+  0000 ~                           srl b
 81+  0000 ~                           rr  c
 82+  0000                             ENDM
 83+  0000
 84+  0000
 85+  0000              ShiftHLDiv8:   MACRO
 86+  0000 ~                           srl h
 87+  0000 ~                           rr  l
 88+  0000 ~                           srl h
 89+  0000 ~                           rr  l
 90+  0000 ~                           srl h
 91+  0000 ~                           rr  l
 92+  0000                             ENDM
 93+  0000
 94+  0000              ShiftBHLLeft1:  MACRO
 95+  0000 ~                            sla l
 96+  0000 ~                            rl  h
 97+  0000 ~                            rl  b
 98+  0000                              ENDM
 99+  0000
100+  0000              ShiftCDELeft1:  MACRO
101+  0000 ~                            sla e
102+  0000 ~                            rl  d
103+  0000 ~                            rl  c
104+  0000                              ENDM
105+  0000
106+  0000              ShiftHLLeft1:  MACRO    ; 16 T states
107+  0000 ~                           sla l
108+  0000 ~                           rl  h
109+  0000                             ENDM
110+  0000
111+  0000              ShiftDELeft1:  MACRO    ; 16 T states
112+  0000 ~                           sla e
113+  0000 ~                           rl  d
114+  0000                             ENDM
115+  0000
116+  0000              BarrelHLLeft3: MACRO
117+  0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
118+  0000 ~                           push     bc      ; 10
119+  0000 ~                           ld       b,3     ; 7
120+  0000 ~                           bsrl     de,b    ; 8
121+  0000 ~                           pop      bc      ; 10
122+  0000 ~                           ex       de,hl   ; 4
123+  0000                             ENDM
124+  0000
125+  0000              BarrelHLRight3: MACRO
126+  0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
127+  0000 ~                           push     bc      ; 10
128+  0000 ~                           ld       b,3     ; 7
129+  0000 ~                           bsrl     de,b    ; 8
130+  0000 ~                           pop      bc      ; 10
131+  0000 ~                           ex       de,hl   ; 4
132+  0000                             ENDM
133+  0000
134+  0000              RollBCLeft1:   MACRO    ; 16 T states
135+  0000 ~                           rl  c
136+  0000 ~                           rl  b
137+  0000                             ENDM
138+  0000
139+  0000              RollDELeft1:   MACRO    ; 16 T states
140+  0000 ~                           rl  e
141+  0000 ~                           rl  d
142+  0000                             ENDM
143+  0000
144+  0000              ShiftBCLeft1:  MACRO    ; 16 T states
145+  0000 ~                           sla c
146+  0000 ~                           rl  b
147+  0000                             ENDM
148+  0000
149+  0000              ShiftLeftMem:       MACRO   reg
150+  0000 ~                                ld      hl,reg
151+  0000 ~                                sla     (hl)
152+  0000                                  ENDM
153+  0000
154+  0000
155+  0000
156+  0000              ShiftMem16Right1:   MACRO memaddr
157+  0000 ~                                ld    hl,(memaddr)
158+  0000 ~                                srl   h
159+  0000 ~                                rr    l
160+  0000 ~                                ld    (memaddr),hl
161+  0000                                  ENDM
162+  0000
163+  0000              ShiftMem8Right1:    MACRO memaddr
164+  0000 ~                                ld      a,(memaddr)
165+  0000 ~                                srl     a
166+  0000 ~                                ld      (memaddr),a
167+  0000                                  ENDM
168+  0000
169+  0000
170+  0000              ShiftMem8Left1A:    MACRO memaddr
171+  0000 ~                                ld      a,(memaddr)
172+  0000 ~                                sla     a
173+  0000 ~                                ld      (memaddr),a
174+  0000                                  ENDM
175+  0000
# file closed: ShiftMacros.asm
 65   0000                                      INCLUDE "../../Macros/NegateMacros.asm"
# file opened: NegateMacros.asm
  1+  0000
  2+  0000              macronegate16hl:	MACRO
  3+  0000 ~            					xor 	a
  4+  0000 ~            					sub 	l
  5+  0000 ~            					ld 		l,a
  6+  0000 ~            					sbc 	a,a
  7+  0000 ~            					sub 	h
  8+  0000 ~            					ld 		h,a
  9+  0000              					ENDM
 10+  0000
 11+  0000
 12+  0000              macroAbsHL:         MACRO
 13+  0000 ~                                bit     7,h
 14+  0000 ~                                jp      z,.alreadyABS
 15+  0000 ~            					xor 	a
 16+  0000 ~            					sub 	l
 17+  0000 ~            					ld 		l,a
 18+  0000 ~            					sbc 	a,a
 19+  0000 ~            					sub 	h
 20+  0000 ~            					ld 		h,a
 21+  0000 ~            .alreadyABS:
 22+  0000                                  ENDM
 23+  0000
 24+  0000              macronegate16de:	MACRO
 25+  0000 ~            					xor 	a
 26+  0000 ~                                sub 	e
 27+  0000 ~                                ld 		e,a
 28+  0000 ~                                sbc 	a,a
 29+  0000 ~                                sub 	d
 30+  0000 ~                                ld 		d,a
 31+  0000              					ENDM
 32+  0000
 33+  0000              macronegate16bc:	MACRO
 34+  0000 ~            					xor 	a
 35+  0000 ~                                sub 	c
 36+  0000 ~                                ld 		c,a
 37+  0000 ~                                sbc 	a,a
 38+  0000 ~                                sub 	b
 39+  0000 ~                                ld 		b,a
 40+  0000              					ENDM
 41+  0000
 42+  0000              macronegate16ix:	MACRO
 43+  0000 ~            					xor 	a
 44+  0000 ~                                sub 	ixl
 45+  0000 ~                                ld 		ixl,a
 46+  0000 ~                                sbc 	a,a
 47+  0000 ~                                sub 	ixh
 48+  0000 ~                                ld 		ixh,a
 49+  0000              					ENDM
 50+  0000
 51+  0000
 52+  0000              NegIY:			    MACRO
 53+  0000 ~                                xor a
 54+  0000 ~                                sub iyl
 55+  0000 ~                                ld iyl,a
 56+  0000 ~                                sbc a,a
 57+  0000 ~                                sub iyh
 58+  0000 ~                                ld iyh,a
 59+  0000                                  ENDM
 60+  0000
 61+  0000              NegHL:			    MACRO
 62+  0000 ~                                xor     a
 63+  0000 ~                                sub     l
 64+  0000 ~                                ld      l,a
 65+  0000 ~                                sbc     a,a
 66+  0000 ~                                sub     h
 67+  0000 ~                                ld      h,a
 68+  0000                                  ENDM
 69+  0000
 70+  0000              NegBHL:             MACRO
 71+  0000 ~                                ld      a,l
 72+  0000 ~                                cpl
 73+  0000 ~                                add     a,1
 74+  0000 ~                                ld      l,a
 75+  0000 ~                                ld      a,h
 76+  0000 ~                                cpl
 77+  0000 ~                                adc     a,0
 78+  0000 ~                                ld      h,a
 79+  0000 ~                                ld      a,b
 80+  0000 ~                                cpl
 81+  0000 ~                                adc     a,0
 82+  0000 ~                                ld      b,a
 83+  0000                                  ENDM
 84+  0000
 85+  0000              NegCDE:             MACRO
 86+  0000 ~                                ld      a,e
 87+  0000 ~                                cpl
 88+  0000 ~                                add     a,1
 89+  0000 ~                                ld      e,a
 90+  0000 ~                                ld      a,d
 91+  0000 ~                                cpl
 92+  0000 ~                                adc     a,0
 93+  0000 ~                                ld      d,a
 94+  0000 ~                                ld      a,c
 95+  0000 ~                                cpl
 96+  0000 ~                                adc     a,0
 97+  0000 ~                                ld      c,a
 98+  0000                                  ENDM
 99+  0000
100+  0000              NegAHL:			    MACRO
101+  0000 ~                                ld      b,a
102+  0000 ~                                ld      a,l
103+  0000 ~                                cpl
104+  0000 ~                                add     a,1
105+  0000 ~                                ld      l,a
106+  0000 ~                                ld      a,h
107+  0000 ~                                cpl
108+  0000 ~                                adc     a,0
109+  0000 ~                                ld      h,a
110+  0000 ~                                ld      a,b
111+  0000 ~                                cpl
112+  0000 ~                                adc     a,0
113+  0000                                  ENDM
114+  0000
115+  0000
116+  0000              NegDE:			    MACRO
117+  0000 ~                                xor     a
118+  0000 ~                                sub     e
119+  0000 ~                                ld      e,a
120+  0000 ~                                sbc     a,a
121+  0000 ~                                sub     d
122+  0000 ~                                ld      d,a
123+  0000                                  ENDM
124+  0000
125+  0000              NegBC:			    MACRO
126+  0000 ~                                xor     a
127+  0000 ~                                sub     c
128+  0000 ~                                ld      c,a
129+  0000 ~                                sbc     a,a
130+  0000 ~                                sub     b
131+  0000 ~                                ld      b,a
132+  0000                                  ENDM
133+  0000
134+  0000              NegH                MACRO
135+  0000 ~                                ld      a,h
136+  0000 ~                                neg
137+  0000 ~                                ld      h,a
138+  0000                                  ENDM
139+  0000
140+  0000              NegD                MACRO
141+  0000 ~                                ld      a,d
142+  0000 ~                                neg
143+  0000 ~                                ld      d,a
144+  0000                                  ENDM
145+  0000
146+  0000              NegB                MACRO
147+  0000 ~                                ld      a,b
148+  0000 ~                                neg
149+  0000 ~                                ld      b,a
150+  0000                                  ENDM
151+  0000
# file closed: NegateMacros.asm
 66   0000                                      INCLUDE "../../Macros/carryFlagMacros.asm"
# file opened: carryFlagMacros.asm
  1+  0000
  2+  0000              SetCarryFlag:           MACRO
  3+  0000 ~                                    scf
  4+  0000                                      ENDM
  5+  0000
  6+  0000              ClearCarryFlag:	        MACRO
  7+  0000 ~                                    or a
  8+  0000                                      ENDM
  9+  0000
 10+  0000              FlipCarryFlag:          MACRO
 11+  0000 ~                                    ccf
 12+  0000                                      ENDM
 13+  0000
# file closed: carryFlagMacros.asm
 67   0000                                      INCLUDE "../../Macros/UniverseObjectPosMacros.asm"
# file opened: UniverseObjectPosMacros.asm
  1+  0000              ; Universe position data manipulation
  2+  0000              ;------------------------------------------------------------------------------
  3+  0000              ; Sets IYH to sign bits, bit 7 = x, bit 6 = y bit 5 = z
  4+  0000              SetIYHToSignBits:       MACRO
  5+  0000 ~                                    ld      a,(ix+8)                ; get Z sign
  6+  0000 ~                                    and     $80                     ; and shift it via A into IYH bit 7
  7+  0000 ~                                    sra     a                       ;
  8+  0000 ~                                    ld      iyh,a                   ;
  9+  0000 ~                                    ld      a,(ix+5)                ; get Y sign
 10+  0000 ~                                    and     $80                     ; and shift it via A into IYH bit 7
 11+  0000 ~                                    or      iyh                     ; which moves Z into IYH bit 6
 12+  0000 ~                                    sra     a                       ;
 13+  0000 ~                                    ld      iyh,a                   ;
 14+  0000 ~                                    ld      a,(ix+2)                ; get X sign
 15+  0000 ~                                    and     $80                     ; and shift it via A into IYH bit 7
 16+  0000 ~                                    or      iyh                     ; which moves Y into IYH bit 6 and Z into IYH bit 5
 17+  0000 ~                                    ld      iyh,a                   ;
 18+  0000                                      ENDM
 19+  0000              ;------------------------------------------------------------------------------
 20+  0000              ; gets high bytes of vector at IX
 21+  0000              ; sets h = abs x sign, l = abs y sgn d and a to abs z|y|x sgn
 22+  0000              SetAHLDToABSXYZSgn      MACRO
 23+  0000 ~                                    ld      a,(ix+2)
 24+  0000 ~                                    and     $7F
 25+  0000 ~                                    ld      h,a
 26+  0000 ~                                    ld      a,(ix+5)
 27+  0000 ~                                    and     $7F
 28+  0000 ~                                    ld      l,a
 29+  0000 ~                                    ld      a,(ix+8)
 30+  0000 ~                                    and     $7F
 31+  0000 ~                                    ld      d,a
 32+  0000 ~                                    or      h
 33+  0000 ~                                    or      l
 34+  0000                                      ENDM
 35+  0000              ;------------------------------------------------------------------------------
 36+  0000              SetAHLDToABSXYZHi       MACRO
 37+  0000 ~                                    ld      a,(ix+1)
 38+  0000 ~                                    ld      h,a
 39+  0000 ~                                    ld      a,(ix+4)
 40+  0000 ~                                    ld      l,a
 41+  0000 ~                                    ld      a,(ix+7)
 42+  0000 ~                                    ld      d,a
 43+  0000 ~                                    or      h
 44+  0000 ~                                    or      l
 45+  0000                                      ENDM
 46+  0000              ;------------------------------------------------------------------------------
 47+  0000              SetAHLDToABSXYZLo       MACRO
 48+  0000 ~                                    ld      a,(ix+0)
 49+  0000 ~                                    ld      h,a
 50+  0000 ~                                    ld      a,(ix+3)
 51+  0000 ~                                    ld      l,a
 52+  0000 ~                                    ld      a,(ix+6)
 53+  0000 ~                                    ld      d,a
 54+  0000 ~                                    or      h
 55+  0000 ~                                    or      l
 56+  0000                                      ENDM
 57+  0000              ;------------------------------------------------------------------------------
 58+  0000              SetBHLtoX:              MACRO
 59+  0000 ~                                    ld      b,(ix+2)
 60+  0000 ~                                    ld      hl,(ix)
 61+  0000                                      ENDM
 62+  0000              ;------------------------------------------------------------------------------
 63+  0000              SetCDEtoX:              MACRO
 64+  0000 ~                                    ld      c,(ix+2)
 65+  0000 ~                                    ld      de,(ix)
 66+  0000                                      ENDM
 67+  0000              ;------------------------------------------------------------------------------
 68+  0000              SaveDEHToX:             MACRO
 69+  0000 ~                                    ld      (ix+2),d                ; save DE.H into Zd
 70+  0000 ~                                    ld      (ix+1),e                ; .
 71+  0000 ~                                    ld      (ix),h                  ; .
 72+  0000                                      ENDM
 73+  0000              ;------------------------------------------------------------------------------
 74+  0000              SaveAHLToX:             MACRO
 75+  0000 ~                                    ld      (ix+2),a                ; save DE.H into Zd
 76+  0000 ~                                    ld      (ix+1),h                ; .
 77+  0000 ~                                    ld      (ix),l                  ; .
 78+  0000                                      ENDM
 79+  0000              ;------------------------------------------------------------------------------
 80+  0000              SetCDEtoY:              MACRO
 81+  0000 ~                                    ld      c,(ix+5)
 82+  0000 ~                                    ld      de,(ix+3)
 83+  0000                                      ENDM
 84+  0000              ;------------------------------------------------------------------------------
 85+  0000              SetBHLtoY:              MACRO
 86+  0000 ~                                    ld      b,(ix+5)
 87+  0000 ~                                    ld      hl,(ix+3)
 88+  0000                                      ENDM
 89+  0000              ;------------------------------------------------------------------------------
 90+  0000              SaveDEHToY:             MACRO
 91+  0000 ~                                    ld      (ix+5),d                ; save DE.H into Zd
 92+  0000 ~                                    ld      (ix+4),e                ; .
 93+  0000 ~                                    ld      (ix+3),h                ; .
 94+  0000                                      ENDM
 95+  0000              ;------------------------------------------------------------------------------
 96+  0000              SaveAHLToY:             MACRO
 97+  0000 ~                                    ld      (ix+5),a                ; save DE.H into Zd
 98+  0000 ~                                    ld      (ix+4),h                ; .
 99+  0000 ~                                    ld      (ix+3),l                ; .
100+  0000                                      ENDM
101+  0000              ;------------------------------------------------------------------------------
102+  0000              SetCDEtoZ:              MACRO
103+  0000 ~                                    ld      c,(ix+8)
104+  0000 ~                                    ld      de,(ix+6)
105+  0000                                      ENDM
106+  0000              ;------------------------------------------------------------------------------
107+  0000              SetBHLtoZ:              MACRO
108+  0000 ~                                    ld      b,(ix+8)
109+  0000 ~                                    ld      hl,(ix+6)
110+  0000                                      ENDM
111+  0000              ;------------------------------------------------------------------------------
112+  0000              SaveDEHToZ:             MACRO
113+  0000 ~                                    ld      (ix+8),d                ; save DE.H into Zd
114+  0000 ~                                    ld      (ix+7),e                ; .
115+  0000 ~                                    ld      (ix+6),h                ; .
116+  0000                                      ENDM
117+  0000              ;------------------------------------------------------------------------------
118+  0000              SaveAHLToZ:             MACRO
119+  0000 ~                                    ld      (ix+8),a                ; save DE.H into Zd
120+  0000 ~                                    ld      (ix+7),h                ; .
121+  0000 ~                                    ld      (ix+6),l                ; .
122+  0000                                      ENDM
123+  0000              ;------------------------------------------------------------------------------
124+  0000              SetDEAtoABSX:           MACRO
125+  0000 ~                                    ld      de,(ix+1)
126+  0000 ~                                    ld      a,(ix+0)
127+  0000 ~                                    res     7,d
128+  0000                                      ENDM
129+  0000              ;------------------------------------------------------------------------------
130+  0000              SetDEAtoABSY:           MACRO
131+  0000 ~                                    ld      de,(ix+4)
132+  0000 ~                                    ld      a,(ix+3)
133+  0000 ~                                    res     7,d
134+  0000                                      ENDM
135+  0000              ;------------------------------------------------------------------------------
136+  0000              SetDEAtoABSZ:           MACRO
137+  0000 ~                                    ld      de,(ix+7)
138+  0000 ~                                    ld      a,(ix+6)
139+  0000 ~                                    res     7,d
140+  0000                                      ENDM
141+  0000              ;------------------------------------------------------------------------------
142+  0000              SetHLtoABSXHiLo:        MACRO
143+  0000 ~                                    ld      hl,(ix)
144+  0000                                      ENDM
145+  0000              ;------------------------------------------------------------------------------
146+  0000              SetDEtoABSYHiLo:        MACRO
147+  0000 ~                                    ld      de,(ix+3)
148+  0000                                      ENDM
149+  0000              ;------------------------------------------------------------------------------
150+  0000              SetBCtoABSZHiLo:        MACRO
151+  0000 ~                                    ld      bc,(ix+6)
152+  0000                                      ENDM
153+  0000              ;------------------------------------------------------------------------------
154+  0000              SetHLtoABSXSgnHi:       MACRO
155+  0000 ~                                    ld      hl,(ix+1)
156+  0000 ~                                    ld      a, h
157+  0000 ~                                    and     $7F
158+  0000 ~                                    ld      h,a
159+  0000                                      ENDM
160+  0000              ;------------------------------------------------------------------------------
161+  0000              SetDEtoABSYSgnHi:       MACRO
162+  0000 ~                                    ld      de,(ix+4)
163+  0000 ~                                    ld      a, d
164+  0000 ~                                    and     $7F
165+  0000 ~                                    ld      d,a
166+  0000                                      ENDM
167+  0000              ;------------------------------------------------------------------------------
168+  0000              SetBCtoABSZSgnHi:       MACRO
169+  0000 ~                                    ld      bc,(ix+7)
170+  0000 ~                                    ld      a, b
171+  0000 ~                                    and     $7F
172+  0000 ~                                    ld      b,a
173+  0000                                      ENDM
174+  0000              ;------------------------------------------------------------------------------
175+  0000              SetNormXToHL:           MACRO
176+  0000 ~                                    ld     (ix+20),hl
177+  0000                                      ENDM
178+  0000              ;------------------------------------------------------------------------------
179+  0000              SetNormX96ToDE:         MACRO
180+  0000 ~                                    ld     (ix+20),de
181+  0000                                      ENDM
182+  0000              ;------------------------------------------------------------------------------
183+  0000              SetNormY96ToDE:         MACRO
184+  0000 ~                                    ld     (ix+22),de
185+  0000                                      ENDM
186+  0000              ;------------------------------------------------------------------------------
187+  0000              SetNormZ96ToBC:         MACRO
188+  0000 ~                                    ld     (ix+24),bc
189+  0000                                      ENDM
190+  0000              ;------------------------------------------------------------------------------
191+  0000              SetNormZ96ToDE:         MACRO
192+  0000 ~                                    ld     (ix+24),de
193+  0000                                      ENDM
194+  0000              ;------------------------------------------------------------------------------
195+  0000              ; IYH holds sign bits so we need bit 7 for x
196+  0000              SetABSNormXToDE:        MACRO
197+  0000 ~            .skipSign:              ld     (ix+26),de
198+  0000                                      ENDM
199+  0000              ;------------------------------------------------------------------------------
200+  0000              ; IYH holds sign bits so we need bit 6 for y
201+  0000              SetABSNormYToDE:        MACRO
202+  0000 ~                                    ld     (ix+28),de
203+  0000                                      ENDM
204+  0000              ;------------------------------------------------------------------------------
205+  0000              ; IYH holds sign bits so we need bit 5 for z
206+  0000              SetABSNormZToBC:        MACRO
207+  0000 ~                                    ld     (ix+30),bc
208+  0000                                      ENDM
209+  0000              ;------------------------------------------------------------------------------
210+  0000              ; IYH holds sign bits so we need bit 5 for z
211+  0000              SetABSNormZToDE:        MACRO
212+  0000 ~                                    ld     (ix+30),de
213+  0000                                      ENDM
214+  0000              ;------------------------------------------------------------------------------
215+  0000              NormXMul96:             MACRO
216+  0000 ~                                    ld      e,a
217+  0000 ~                                    ld      d,96
218+  0000 ~                                    mul     de
219+  0000 ~                                    ld      a,d                 ; is norm 0,
220+  0000 ~                                    or      e                   ; if so we can skip
221+  0000 ~                                    jp      z,.DoneNorm96X      ; sign check
222+  0000 ~                                    ld      a,(ix+2)            ;
223+  0000 ~                                    and     $80                 ;
224+  0000 ~                                    or      d
225+  0000 ~                                    ld      d,a
226+  0000 ~            .DoneNorm96X:
227+  0000                                      ENDM
228+  0000              ;------------------------------------------------------------------------------
229+  0000              NormYMul96:             MACRO
230+  0000 ~                                    ld      e,a
231+  0000 ~                                    ld      d,96
232+  0000 ~                                    mul     de
233+  0000 ~                                    ld      a,d                 ; is norm 0,
234+  0000 ~                                    or      e                   ; if so we can skip
235+  0000 ~                                    jp      z,.DoneNorm96Y      ; sign check
236+  0000 ~                                    ld      a,(ix+5)            ;
237+  0000 ~                                    and     $80                 ;
238+  0000 ~                                    or      d
239+  0000 ~                                    ld      d,a
240+  0000 ~            .DoneNorm96Y:
241+  0000                                      ENDM
242+  0000              ;------------------------------------------------------------------------------
243+  0000              NormZMul96:             MACRO
244+  0000 ~                                    ld      e,a
245+  0000 ~                                    ld      d,96
246+  0000 ~                                    mul     de
247+  0000 ~                                    ld      a,d                 ; is norm 0,
248+  0000 ~                                    or      e                   ; if so we can skip
249+  0000 ~                                    jp      z,.DoneNorm96Z      ; sign check
250+  0000 ~                                    ld      a,(ix+8)            ;
251+  0000 ~                                    and     $80                 ;
252+  0000 ~                                    or      d
253+  0000 ~                                    ld      d,a
254+  0000 ~            .DoneNorm96Z:
255+  0000                                      ENDM
256+  0000              ;------------------------------------------------------------------------------
257+  0000
# file closed: UniverseObjectPosMacros.asm
 68   0000              ;----------------------------------------------------------------------------------------------------------------------------------
 69   0000              ; Total screen list
 70   0000              ; Local Chart
 71   0000              ; Galactic Chart
 72   0000              ; Market Prices
 73   0000              ; Inventory
 74   0000              ; Comander status
 75   0000              ; System Data
 76   0000              ; Mission Briefing
 77   0000              ; missio completion
 78   0000              ; Docked  Menu (only place otehr than pause you can load and save)
 79   0000              ; Pause Menu (only place you can load from )
 80   0000              ; byint and selling equipment
 81   0000              ; bying and selling stock
 82   0000
 83   0000              TopOfStack              equ $5CCB ;$6100
 84   0000
 85   0000                                      ORG $5DCB;      $6200
 86   5DCB F3           EliteNextStartup:       di
 87   5DCC FD 00                                break
 88   5DCE FD 21 FD 5D                          ld      iy,Test1
 89   5DD2 06 0F                                ld      b,15
 90   5DD4 FD E5 C5     .testloop:              push    iy,,bc
 91   5DD7 CD ED 5E                             call    TestMult
 92   5DDA C1 FD E1                             pop     iy,,bc
 93   5DDD FD E5 E1                             ld      hl,iy
 94   5DE0 3E 10                                ld      a,$10
 95   5DE2 ED 31                                add     hl,a
 96   5DE4 E5 FD E1                             ld      iy,hl
 97   5DE7 10 EB                                djnz    .testloop
 98   5DE9 FD 00                                break
 99   5DEB
100   5DEB 00 00        ErrorCount:             DW  0
101   5DED
102   5DED 00 00 00...  MultiplyResult:         DS  16  ; reserve 6 bytes for maths result, little endian rest is padding for console display alignment
103   5DFD
104   5DFD
105   5DFD                                      ;  X............  Y............   Fill Expected (hlbc)...  Actual............  Pass/Fail
106   5DFD                                      ;   0    1    2    3    4    5    6    7,   8,   9,   A,   B,   C,   D,   E,   F
107   5DFD C0 FA 00 00  Test1:                   DB $C0, $FA, $00, $00, $4B, $00, $00, $40, $76, $49, $00, $00, $00, $00, $00, $11 ;
107   5E01 4B 00 00 40
107   5E05 76 49 00 00
107   5E09 00 00 00 11
108   5E0D C0 00 04 C0  Test2:                   DB $C0, $00, $04, $C0, $00, $00, $00, $90, $00, $03, $00, $00, $00, $00, $00, $11
108   5E11 00 00 00 90
108   5E15 00 03 00 00
108   5E19 00 00 00 11
109   5E1D B3 FA 00 00  Test3:                   DB $B3, $FA, $00, $00, $4B, $00, $00, $71, $72, $49, $00, $00, $00, $00, $00, $11 ; 250.6692 * 75 = 18802.44
109   5E21 4B 00 00 71
109   5E25 72 49 00 00
109   5E29 00 00 00 11
110   5E2D 6E 4D 00 6E  Test4:                   DB $6E, $4D, $00, $6E, $4B, $00, $00, $7F, $D0, $16, $00, $00, $00, $00, $00, $11 ; 77.4296875 * 75.4296875 = 5840.497131
110   5E31 4B 00 00 7F
110   5E35 D0 16 00 00
110   5E39 00 00 00 11
111   5E3D 00 73 00 00  Test5:                   DB $00, $73, $00, $00, $D7, $00, $00, $00, $95, $60, $00, $00, $00, $00, $00, $11
111   5E41 D7 00 00 00
111   5E45 95 60 00 00
111   5E49 00 00 00 11
112   5E4D 00 00 0B C0  Test6:                   DB $00, $00, $0B, $C0, $00, $00, $00, $00, $40, $08, $00, $00, $00, $00, $00, $11
112   5E51 00 00 00 00
112   5E55 40 08 00 00
112   5E59 00 00 00 11
113   5E5D 40 54 02 80  Test7:                   DB $40, $54, $02, $80, $0E, $00, $00, $A0, $C5, $21, $00, $00, $00, $00, $00, $11
113   5E61 0E 00 00 A0
113   5E65 C5 21 00 00
113   5E69 00 00 00 11
114   5E6D C0 00 00 00  Test8:                   DB $C0, $00, $00, $00, $02, $00, $00, $80, $01, $00, $00, $00, $00, $00, $00, $11
114   5E71 02 00 00 80
114   5E75 01 00 00 00
114   5E79 00 00 00 11
115   5E7D 40 00 00 00  Test9:                   DB $40, $00, $00, $00, $02, $00, $00, $80, $00, $00, $00, $00, $00, $00, $00, $11
115   5E81 02 00 00 80
115   5E85 00 00 00 00
115   5E89 00 00 00 11
116   5E8D 80 06 05 00  TestA:                   DB $80, $06, $05, $00, $02, $00, $00, $00, $0D, $0A, $00, $00, $00, $00, $00, $11
116   5E91 02 00 00 00
116   5E95 0D 0A 00 00
116   5E99 00 00 00 11
117   5E9D C0 00 04 C0  TestB:                   DB $C0, $00, $04, $C0, $00, $00, $00, $90, $00, $03, $00, $00, $00, $00, $00, $11
117   5EA1 00 00 00 90
117   5EA5 00 03 00 00
117   5EA9 00 00 00 11
118   5EAD C0 00 04 C0  TestC:                   DB $C0, $00, $04, $C0, $00, $04, $00, $90, $00, $06, $10, $00, $00, $00, $00, $11
118   5EB1 00 04 00 90
118   5EB5 00 06 10 00
118   5EB9 00 00 00 11
119   5EBD 40 00 02 80  TestD:                   DB $40, $00, $02, $80, $00, $00, $00, $20, $00, $01, $00, $00, $00, $00, $00, $11
119   5EC1 00 00 00 20
119   5EC5 00 01 00 00
119   5EC9 00 00 00 11
120   5ECD C0 00 04 80  TestE:                   DB $C0, $00, $04, $80, $61, $00, $00, $20, $49, $86, $01, $00, $00, $00, $00, $11
120   5ED1 61 00 00 20
120   5ED5 49 86 01 00
120   5ED9 00 00 00 11
121   5EDD 66 12 06 80  TestF:                   DB $66, $12, $06, $80, $61, $00, $00, $D9, $01, $50, $02, $00, $00, $00, $00, $11
121   5EE1 61 00 00 D9
121   5EE5 01 50 02 00
121   5EE9 00 00 00 11
122   5EED
123   5EED FD 6E 00 FD  TestMult:               ld      hl,(iy+0)           ; dehl = X
123   5EF1 66 01
124   5EF3 FD 7E 02                             ld      a,(iy+2)            ; .
125   5EF6 47                                   ld      b,a                 ; .
126   5EF7 FD 5E 03 FD                          ld      de,(iy+3)           ; dehl = Y
126   5EFB 56 04
127   5EFD FD 7E 05                             ld      a,(iy+5)            ;
128   5F00 4F                                   ld      c,a                 ;
129   5F01 FD 00                                break
130   5F03 CD 30 60                             call    mul24               ; dehl dehl' = dehl * dehl'
131   5F06 7C                                   ld      a,h
132   5F07 FD 77 0B                             ld      (iy+$0B),a          ; .
133   5F0A FD 73 0C FD                          ld      (iy+$0C),de         ; .
133   5F0E 72 0D
134   5F10                                      ZeroA
134   5F10 AF          >                        xor a
135   5F11 FD 77 0E                             ld      (iy+$0E),a          ; and finally l
136   5F14 FD 7E 07     .CheckResult:           ld      a,(iy+$07)
137   5F17 47                                   ld      b,a
138   5F18 FD 7E 0B                             ld      a,(iy+$0B)
139   5F1B B8                                   cp      b
140   5F1C C2 46 5F                             jp      nz,.Fail
141   5F1F
142   5F1F FD 7E 08                             ld      a,(iy+$08)
143   5F22 47                                   ld      b,a
144   5F23 FD 7E 0C                             ld      a,(iy+$0C)
145   5F26 B8                                   cp      b
146   5F27 C2 46 5F                             jp      nz,.Fail
147   5F2A
148   5F2A FD 7E 09                             ld      a,(iy+$09)
149   5F2D 47                                   ld      b,a
150   5F2E FD 7E 0D                             ld      a,(iy+$0D)
151   5F31 B8                                   cp      b
152   5F32 C2 46 5F                             jp      nz,.Fail
153   5F35
154   5F35 FD 7E 0A                             ld      a,(iy+$0A)
155   5F38 47                                   ld      b,a
156   5F39 FD 7E 0E                             ld      a,(iy+$0E)
157   5F3C B8                                   cp      b
158   5F3D C2 46 5F                             jp      nz,.Fail
159   5F40
160   5F40 3E FF                                ld      a,$FF
161   5F42 FD 77 0F                             ld      (iy+$0F),a
162   5F45 C9                                   ret
163   5F46 3E 00        .Fail:                  ld      a,$00
164   5F48 FD 77 0F                             ld      (iy+$0F),a
165   5F4B 21 EB 5D                             ld      hl,ErrorCount
166   5F4E 34                                   inc     (hl)
167   5F4F C9                                   ret
168   5F50
169   5F50              ;--------------------------------------------------------------------------------------
170   5F50                  INCLUDE	"../../Maths24/asm_multiply24.asm"
# file opened: asm_multiply24.asm
  1+  5F50              ;; perform dehl & de'hl' with d and d' always being 0
  2+  5F50              ;mulu_48:    ld bc,hl                    ; prep de'de bc'bc
  3+  5F50              ;            push de                     ;
  4+  5F50              ;            exx                         ;
  5+  5F50              ;            pop bc                      ;
  6+  5F50              ;            push hl                     ;
  7+  5F50              ;            exx                         ;
  8+  5F50              ;            pop de                      ;
  9+  5F50              ;            ; perform multipication as 0e'de * 0c'bc
 10+  5F50              ;mulu_64debc:exx                         ; save material for the byte p7 p6 = x3*y3 + p5 carry
 11+  5F50              ;            ld h,d
 12+  5F50              ;            ld l,b
 13+  5F50              ;            push hl                     ;'x3 y3                                 SP + 1 X
 14+  5F50              ;
 15+  5F50              ;
 16+  5F50              ;            ld l,c                      ; save material for the byte p5 = x3*y2 + x2*y3 + p4 carry
 17+  5F50              ;            push hl                     ;'x3 y2                                 SP + 2 X
 18+  5F50              ;            ld h,b
 19+  5F50              ;            ld l,e
 20+  5F50              ;            push hl                     ;'y3 x2                                 SP + 3 X
 21+  5F50              ;
 22+  5F50              ;
 23+  5F50              ;            ld h,e                      ; save material for the byte p4 = x3*y1 + x2*y2 + x1*y3 + p3 carry
 24+  5F50              ;            ld l,c
 25+  5F50              ;            push hl                     ;'x2 y2                                 SP + 4
 26+  5F50              ;            ld h,d
 27+  5F50              ;            ld l,b
 28+  5F50              ;            push hl                     ;'x3 y3                                 SP + 5 X
 29+  5F50              ;            exx                         ; Now we have the alternate register pairs we can start optimising by binning off d' and b' calculations
 30+  5F50              ;
 31+  5F50              ;            ld l,b
 32+  5F50              ;            ld h,d
 33+  5F50              ;            push hl                     ; x1 y1                                 SP + 6
 34+  5F50              ;
 35+  5F50              ;
 36+  5F50              ;            push bc                     ; save material for the byte p3 = x3*y0 + x2*y1 + x1*y2 + x0*y3 + p2 carry y1 y0
 37+  5F50              ;            exx                         ;'
 38+  5F50              ;            push de                     ;'x3 x2                                 SP + 7 X
 39+  5F50              ;            push bc                     ;'y3 y2                                 SP + 8 X
 40+  5F50              ;            exx                         ;
 41+  5F50              ;            push de                     ; x1 x0                                 SP + 9
 42+  5F50              ;
 43+  5F50              ;
 44+  5F50              ;            exx                         ; save material for the byte p2 = x2*y0 + x0*y2 + x1*y1 + p1 carry start of 32_32x32
 45+  5F50              ;            ld h,e
 46+  5F50              ;            ld l,c
 47+  5F50              ;            push hl                     ;'x2 y2                                 SP + 10
 48+  5F50              ;
 49+  5F50              ;            exx                         ;
 50+  5F50              ;            ld h,e
 51+  5F50              ;            ld l,c
 52+  5F50              ;            push hl                     ; x0 y0                                 SP + 11
 53+  5F50              ;
 54+  5F50              ;
 55+  5F50              ;            ;
 56+  5F50              ;
 57+  5F50              ;            ld h,d                      ; start of 32_16x16          p1 = x1*y0 + x0*y1 + p0 carry  p0 = x0*y0
 58+  5F50              ;            ld l,b
 59+  5F50              ;            push hl                     ; x1 y1                                 SP + 12
 60+  5F50              ;
 61+  5F50              ;            ld h,d                      ; x1
 62+  5F50              ;            ld d,b                      ; y1
 63+  5F50              ;            ld l,c                      ; y0
 64+  5F50              ;            ld b,e                      ; x0
 65+  5F50              ;            mul de                       ; bc = x0 y0 de = y1 x0 hl = x1 y0 stack = x1 y1, y1*x0
 66+  5F50              ;            ex de,hl
 67+  5F50              ;            mul de                      ; x1*y0
 68+  5F50              ;
 69+  5F50              ;            xor a                       ; zero A
 70+  5F50              ;            add hl,de                   ; sum cross products p2 p1
 71+  5F50              ;            adc a,a                     ; capture carry p3
 72+  5F50              ;
 73+  5F50              ;            ld e,c                      ; x0
 74+  5F50              ;            ld d,b                      ; y0
 75+  5F50              ;            mul de                      ; y0*x0
 76+  5F50              ;
 77+  5F50              ;            ld b,a                      ; carry from cross products
 78+  5F50              ;            ld c,h                      ; LSB of MSW from cross products
 79+  5F50              ;
 80+  5F50              ;            ld a,d
 81+  5F50              ;            add a,l
 82+  5F50              ;            ld h,a
 83+  5F50              ;            ld l,e                      ; LSW in HL p1 p0
 84+  5F50              ;
 85+  5F50              ;            pop de                      ;                                       SP + 11
 86+  5F50              ;            mul de                      ; x1*y1
 87+  5F50              ;
 88+  5F50              ;            ex de,hl
 89+  5F50              ;            adc hl,bc                   ; HL = interim MSW p3 p2
 90+  5F50              ;            ex de,hl                    ; DEHL = 32_16x16
 91+  5F50              ;
 92+  5F50              ;            push de                     ; stack interim p3 p2                   SP + 12
 93+  5F50              ;
 94+  5F50              ;
 95+  5F50              ;            exx                         ; continue doing the p2 byte
 96+  5F50              ;            pop bc                      ;'recover interim p3 p2                 SP + 11
 97+  5F50              ;
 98+  5F50              ;            pop hl                      ;'x0 y0                                 SP + 10
 99+  5F50              ;            pop de                      ;'x2 y2                                 SP + 9
100+  5F50              ;            ld a,h
101+  5F50              ;            ld h,d
102+  5F50              ;            ld d,a
103+  5F50              ;            mul de                      ;'x0*y2
104+  5F50              ;            ex de,hl
105+  5F50              ;            mul de                      ;'x2*y0
106+  5F50              ;
107+  5F50              ;            xor a
108+  5F50              ;            add hl,bc
109+  5F50              ;            adc a,a                     ;'capture carry p4
110+  5F50              ;            add hl,de
111+  5F50              ;            adc a,0                     ;'capture carry p4
112+  5F50              ;
113+  5F50              ;            push hl                     ;                                       SP + 10
114+  5F50              ;            exx
115+  5F50              ;            pop de                      ; save p2 in E'                         SP + 9
116+  5F50              ;            exx                         ;'
117+  5F50              ;
118+  5F50              ;            ld c,h                      ;'promote BC p4 p3
119+  5F50              ;            ld b,a
120+  5F50              ;
121+  5F50              ;            pop hl                      ; start doing the p3 byte, 'x1 x0       SP + 9
122+  5F50              ;            pop de                      ;'y3 y2                                 SP + 8 X
123+  5F50              ;            ld a,h
124+  5F50              ;            ld h,d
125+  5F50              ;            ld d,a
126+  5F50              ;            mul de                      ;'y3*x0                                        X
127+  5F50              ;            ex de,hl
128+  5F50              ;            mul de                      ;'x1*y2
129+  5F50              ;
130+  5F50              ;            xor a                       ;'zero A
131+  5F50              ;            add hl,de                   ;'p4 p3
132+  5F50              ;            adc a,a                     ;'p5
133+  5F50              ;            add hl,bc                   ;'p4 p3
134+  5F50              ;            adc a,0
135+  5F50              ;            ld b,h
136+  5F50              ;            ld c,l
137+  5F50              ;            ex af,af
138+  5F50              ;
139+  5F50              ;            pop hl                      ;'x3 x2                                 SP + 7 X
140+  5F50              ;            pop de                      ;'y1 y0                                 SP + 6
141+  5F50              ;            ld a,h
142+  5F50              ;            ld h,d
143+  5F50              ;            ld d,a
144+  5F50              ;            mul de                      ;'x3*y0                                        X
145+  5F50              ;            ex de,hl
146+  5F50              ;            mul de                      ;'y1*x2
147+  5F50              ;
148+  5F50              ;            ex af,af
149+  5F50              ;            add hl,de                   ;'p4 p3
150+  5F50              ;            adc a,0                     ;'p5
151+  5F50              ;            add hl,bc                   ;'p4 p3
152+  5F50              ;            adc a,0                     ;'p5
153+  5F50              ;
154+  5F50              ;            push hl                     ;'leave final p3 in L                   SP + 7
155+  5F50              ;            exx                         ;
156+  5F50              ;            pop bc                      ;                                       SP + 6
157+  5F50              ;            ld d,c                      ; put final p3 in D
158+  5F50              ;            exx                         ;'low 32bits in DEHL
159+  5F50              ;
160+  5F50              ;            ld c,h                      ;'prepare BC for next cycle
161+  5F50              ;            ld b,a                      ;'promote BC p5 p4
162+  5F50              ;
163+  5F50              ;            ; start doing the p4 byte
164+  5F50              ;
165+  5F50              ;            pop hl                      ;'x1 y1                                 SP + 5
166+  5F50              ;            pop de                      ;'x3 y3                                 SP + 4 X
167+  5F50              ;            ld a,h
168+  5F50              ;            ld h,d
169+  5F50              ;            ld d,a
170+  5F50              ;            mul de                      ;'x1*y3                                        X
171+  5F50              ;            ex de,hl
172+  5F50              ;            mul de                      ;'x3*y1
173+  5F50              ;
174+  5F50              ;
175+  5F50              ;            xor a                       ;'zero A
176+  5F50              ;            add hl,de                   ;'p5 p4
177+  5F50              ;            adc a,a                     ;'p6
178+  5F50              ;            add hl,bc                   ;'p5 p4
179+  5F50              ;            adc a,0                     ;'p6
180+  5F50              ;
181+  5F50              ;            pop de                      ;'x2 y2                                 SP + 3
182+  5F50              ;            mul de                      ;'x2*y2
183+  5F50              ;
184+  5F50              ;            add hl,de                   ;'p5 p4
185+  5F50              ;            adc a,0                     ;'p6
186+  5F50              ;
187+  5F50              ;            ld c,l                      ;'final p4 byte in C
188+  5F50              ;            ld l,h                      ;'prepare HL for next cycle
189+  5F50              ;            ld h,a                      ;'promote HL p6 p5
190+  5F50              ;
191+  5F50              ;            ; start doing the p5 byte
192+  5F50              ;
193+  5F50              ;            pop de                      ;'y3 x2                                 SP + 2 X
194+  5F50              ;            mul de                      ;'y3*x2                                        X
195+  5F50              ;
196+  5F50              ;            xor a                       ;'zero A
197+  5F50              ;            add hl,de                   ;'p6 p5
198+  5F50              ;            adc a,a                     ;'p7
199+  5F50              ;
200+  5F50              ;            pop de                      ;'x3 y2                                 SP + 1
201+  5F50              ;            mul de                      ;'x3*y2
202+  5F50              ;
203+  5F50              ;            add hl,de                   ;'p6 p5
204+  5F50              ;            adc a,0                     ;'p7
205+  5F50              ;
206+  5F50              ;            ld b,l                      ;'final p5 byte in B
207+  5F50              ;            ld l,h                      ;'prepare HL for next cycle
208+  5F50              ;            ld h,a                      ;'promote HL p7 p6
209+  5F50              ;
210+  5F50              ;            ; start doing the p6 p7 bytes
211+  5F50              ;            pop de                      ;'y3 x3                                 SP + 0
212+  5F50              ;            mul de                      ;'y3*x3
213+  5F50              ;
214+  5F50              ;            add hl,de                   ;'p7 p6
215+  5F50              ;            ex de,hl                    ;'p7 p6
216+  5F50              ;            ld h,b                      ;'p5
217+  5F50              ;            ld l,c                      ;'p4
218+  5F50              ;
219+  5F50              ;            ret                         ;'exit  : DEHL DEHL' = 64-bit product
220+  5F50
221+  5F50              ; dehl dehl' = dehl * dehl'
222+  5F50 44 4D        mulu_64:    ld bc,hl                    ; prep de'de bc'bc
223+  5F52 D5                       push de                     ;
224+  5F53 D9                       exx                         ;
225+  5F54 C1                       pop bc                      ;
226+  5F55 E5                       push hl                     ;
227+  5F56 D9                       exx                         ;
228+  5F57 D1                       pop de                      ;
229+  5F58 D9           mulu_64debc:exx                         ; save material for the byte p7 p6 = x3*y3 + p5 carry
230+  5F59 62                       ld h,d
231+  5F5A 68                       ld l,b
232+  5F5B E5                       push hl                     ;'x3 y3
233+  5F5C
234+  5F5C
235+  5F5C 69                       ld l,c                      ; save material for the byte p5 = x3*y2 + x2*y3 + p4 carry
236+  5F5D E5                       push hl                     ;'x3 y2
237+  5F5E 60                       ld h,b
238+  5F5F 6B                       ld l,e
239+  5F60 E5                       push hl                     ;'y3 x2
240+  5F61
241+  5F61
242+  5F61 63                       ld h,e                      ; save material for the byte p4 = x3*y1 + x2*y2 + x1*y3 + p3 carry
243+  5F62 69                       ld l,c
244+  5F63 E5                       push hl                     ;'x2 y2
245+  5F64 62                       ld h,d
246+  5F65 68                       ld l,b
247+  5F66 E5                       push hl                     ;'x3 y3
248+  5F67 D9                       exx                         ;
249+  5F68 68                       ld l,b
250+  5F69 62                       ld h,d
251+  5F6A E5                       push hl                     ; x1 y1
252+  5F6B
253+  5F6B
254+  5F6B C5                       push bc                     ; ; save material for the byte p3 = x3*y0 + x2*y1 + x1*y2 + x0*y3 + p2 carry y1 y0
255+  5F6C D9                       exx                         ;'
256+  5F6D D5                       push de                     ;'x3 x2
257+  5F6E C5                       push bc                     ;'y3 y2
258+  5F6F D9                       exx                         ;
259+  5F70 D5                       push de                     ; x1 x0
260+  5F71
261+  5F71
262+  5F71 D9                       exx                         ; save material for the byte p2 = x2*y0 + x0*y2 + x1*y1 + p1 carry start of 32_32x32
263+  5F72 63                       ld h,e
264+  5F73 69                       ld l,c
265+  5F74 E5                       push hl                     ;'x2 y2
266+  5F75
267+  5F75 D9                       exx                         ;
268+  5F76 63                       ld h,e
269+  5F77 69                       ld l,c
270+  5F78 E5                       push hl                     ; x0 y0
271+  5F79
272+  5F79
273+  5F79                          ;
274+  5F79
275+  5F79 62                       ld h,d                      ; start of 32_16x16          p1 = x1*y0 + x0*y1 + p0 carry  p0 = x0*y0
276+  5F7A 68                       ld l,b
277+  5F7B E5                       push hl                     ; x1 y1
278+  5F7C
279+  5F7C 62                       ld h,d                      ; x1
280+  5F7D 50                       ld d,b                      ; y1
281+  5F7E 69                       ld l,c                      ; y0
282+  5F7F 43                       ld b,e                      ; x0
283+  5F80 ED 30                    mul de                       ; bc = x0 y0 de = y1 x0 hl = x1 y0 stack = x1 y1, y1*x0
284+  5F82 EB                       ex de,hl
285+  5F83 ED 30                    mul de                      ; x1*y0
286+  5F85
287+  5F85 AF                       xor a                       ; zero A
288+  5F86 19                       add hl,de                   ; sum cross products p2 p1
289+  5F87 8F                       adc a,a                     ; capture carry p3
290+  5F88
291+  5F88 59                       ld e,c                      ; x0
292+  5F89 50                       ld d,b                      ; y0
293+  5F8A ED 30                    mul de                      ; y0*x0
294+  5F8C
295+  5F8C 47                       ld b,a                      ; carry from cross products
296+  5F8D 4C                       ld c,h                      ; LSB of MSW from cross products
297+  5F8E
298+  5F8E 7A                       ld a,d
299+  5F8F 85                       add a,l
300+  5F90 67                       ld h,a
301+  5F91 6B                       ld l,e                      ; LSW in HL p1 p0
302+  5F92
303+  5F92 D1                       pop de
304+  5F93 ED 30                    mul de                      ; x1*y1
305+  5F95
306+  5F95 EB                       ex de,hl
307+  5F96 ED 4A                    adc hl,bc                   ; HL = interim MSW p3 p2
308+  5F98 EB                       ex de,hl                    ; DEHL = 32_16x16
309+  5F99
310+  5F99 D5                       push de                     ; stack interim p3 p2
311+  5F9A
312+  5F9A
313+  5F9A D9                       exx                         ; continue doing the p2 byte
314+  5F9B C1                       pop bc                      ;'recover interim p3 p2
315+  5F9C
316+  5F9C E1                       pop hl                      ;'x0 y0
317+  5F9D D1                       pop de                      ;'x2 y2
318+  5F9E 7C                       ld a,h
319+  5F9F 62                       ld h,d
320+  5FA0 57                       ld d,a
321+  5FA1 ED 30                    mul de                      ;'x0*y2
322+  5FA3 EB                       ex de,hl
323+  5FA4 ED 30                    mul de                      ;'x2*y0
324+  5FA6
325+  5FA6 AF                       xor a
326+  5FA7 09                       add hl,bc
327+  5FA8 8F                       adc a,a                     ;'capture carry p4
328+  5FA9 19                       add hl,de
329+  5FAA CE 00                    adc a,0                     ;'capture carry p4
330+  5FAC
331+  5FAC E5                       push hl
332+  5FAD D9                       exx
333+  5FAE D1                       pop de                      ; save p2 in E'
334+  5FAF D9                       exx                         ;'
335+  5FB0
336+  5FB0 4C                       ld c,h                      ;'promote BC p4 p3
337+  5FB1 47                       ld b,a
338+  5FB2
339+  5FB2 E1                       pop hl                      ; start doing the p3 byte, 'x1 x0
340+  5FB3 D1                       pop de                      ;'y3 y2
341+  5FB4 7C                       ld a,h
342+  5FB5 62                       ld h,d
343+  5FB6 57                       ld d,a
344+  5FB7 ED 30                    mul de                      ;'y3*x0
345+  5FB9 EB                       ex de,hl
346+  5FBA ED 30                    mul de                      ;'x1*y2
347+  5FBC
348+  5FBC AF                       xor a                       ;'zero A
349+  5FBD 19                       add hl,de                   ;'p4 p3
350+  5FBE 8F                       adc a,a                     ;'p5
351+  5FBF 09                       add hl,bc                   ;'p4 p3
352+  5FC0 CE 00                    adc a,0
353+  5FC2 44                       ld b,h
354+  5FC3 4D                       ld c,l
355+  5FC4 08                       ex af,af
356+  5FC5
357+  5FC5 E1                       pop hl                      ;'x3 x2
358+  5FC6 D1                       pop de                      ;'y1 y0
359+  5FC7 7C                       ld a,h
360+  5FC8 62                       ld h,d
361+  5FC9 57                       ld d,a
362+  5FCA ED 30                    mul de                      ;'x3*y0
363+  5FCC EB                       ex de,hl
364+  5FCD ED 30                    mul de                      ;'y1*x2
365+  5FCF
366+  5FCF 08                       ex af,af
367+  5FD0 19                       add hl,de                   ;'p4 p3
368+  5FD1 CE 00                    adc a,0                     ;'p5
369+  5FD3 09                       add hl,bc                   ;'p4 p3
370+  5FD4 CE 00                    adc a,0                     ;'p5
371+  5FD6
372+  5FD6 E5                       push hl                     ;'leave final p3 in L
373+  5FD7 D9                       exx                         ;
374+  5FD8 C1                       pop bc
375+  5FD9 51                       ld d,c                      ; put final p3 in D
376+  5FDA D9                       exx                         ;'low 32bits in DEHL
377+  5FDB
378+  5FDB 4C                       ld c,h                      ;'prepare BC for next cycle
379+  5FDC 47                       ld b,a                      ;'promote BC p5 p4
380+  5FDD
381+  5FDD                          ; start doing the p4 byte
382+  5FDD
383+  5FDD E1                       pop hl                      ;'x1 y1
384+  5FDE D1                       pop de                      ;'x3 y3
385+  5FDF 7C                       ld a,h
386+  5FE0 62                       ld h,d
387+  5FE1 57                       ld d,a
388+  5FE2 ED 30                    mul de                      ;'x1*y3
389+  5FE4 EB                       ex de,hl
390+  5FE5 ED 30                    mul de                      ;'x3*y1
391+  5FE7
392+  5FE7
393+  5FE7 AF                       xor a                       ;'zero A
394+  5FE8 19                       add hl,de                   ;'p5 p4
395+  5FE9 8F                       adc a,a                     ;'p6
396+  5FEA 09                       add hl,bc                   ;'p5 p4
397+  5FEB CE 00                    adc a,0                     ;'p6
398+  5FED
399+  5FED D1                       pop de                      ;'x2 y2
400+  5FEE ED 30                    mul de                      ;'x2*y2
401+  5FF0
402+  5FF0 19                       add hl,de                   ;'p5 p4
403+  5FF1 CE 00                    adc a,0                     ;'p6
404+  5FF3
405+  5FF3 4D                       ld c,l                      ;'final p4 byte in C
406+  5FF4 6C                       ld l,h                      ;'prepare HL for next cycle
407+  5FF5 67                       ld h,a                      ;'promote HL p6 p5
408+  5FF6
409+  5FF6                          ; start doing the p5 byte
410+  5FF6
411+  5FF6 D1                       pop de                      ;'y3 x2
412+  5FF7 ED 30                    mul de                      ;'y3*x2
413+  5FF9
414+  5FF9 AF                       xor a                       ;'zero A
415+  5FFA 19                       add hl,de                   ;'p6 p5
416+  5FFB 8F                       adc a,a                     ;'p7
417+  5FFC
418+  5FFC D1                       pop de                      ;'x3 y2
419+  5FFD ED 30                    mul de                      ;'x3*y2
420+  5FFF
421+  5FFF 19                       add hl,de                   ;'p6 p5
422+  6000 CE 00                    adc a,0                     ;'p7
423+  6002
424+  6002 45                       ld b,l                      ;'final p5 byte in B
425+  6003 6C                       ld l,h                      ;'prepare HL for next cycle
426+  6004 67                       ld h,a                      ;'promote HL p7 p6
427+  6005
428+  6005                          ; start doing the p6 p7 bytes
429+  6005 D1                       pop de                      ;'y3 x3
430+  6006 ED 30                    mul de                      ;'y3*x3
431+  6008
432+  6008 19                       add hl,de                   ;'p7 p6
433+  6009 EB                       ex de,hl                    ;'p7 p6
434+  600A 60                       ld h,b                      ;'p5
435+  600B 69                       ld l,c                      ;'p4
436+  600C
437+  600C C9                       ret                         ;'exit  : DEHL DEHL' = 64-bit product
438+  600D
439+  600D
# file closed: asm_multiply24.asm
171   600D                  INCLUDE "../../Maths24/asm_mul24_notbank0safe.asm"
# file opened: asm_mul24_notbank0safe.asm
  1+  600D              ;   For divide
  2+  600D              ;   Split BHL/CDE into
  3+  600D              ;         BCDE.HL = HL/CD + BCDE.HL = BHL*1/E
  4+  600D              ;         ; for 24 bit divide
  5+  600D              ;         ; if both BC are non zero, to BH.0/CD.0
  6+  600D              ;         ; if CD = 0 do BH.L/00.L
  7+  600D              ;         ; if B = 0 & C != 0 then result is B*256/C >> 8
  8+  600D              ; Table B   H   L   C   D   E                                    HLD.E
  9+  600D              ;       !   !   !   !   !   !       BH.0/CD.0 (16/16) => HL/DE  =>00D.0
 10+  600D              ;       !   !   !   0   !   !       BH.0/D.0 (16/8)      BHL/DE =>0LD.0 (result << 8)
 11+  600D              ;       0   !   !   !   !   !       0
 12+  600D              ;       0   !   !   0   !   !       H.L/D.E (16 bit)  => HL/DE  =>00D.E (result >> 8)
 13+  600D              ;       0   !   !   0   0   !       H.L/0.E (16 bit)  => HL/DE  =>00D.E (result >> 8)
 14+  600D              ;       0   0   !   !   !   !       0
 15+  600D              ;       0   0   !   0   !   !       0
 16+  600D              ;       0   0   !   0   0   !       00.L/00.E
 17+  600D              ;       0   0   0   X   X   X       0
 18+  600D              ;       X   X   X   0   0   0       carry set
 19+  600D              ; Fixed  24 bit maths S48.16 = BDE * AHL where A=S BCDE=48 HL=16, used by other routines which drop unneeded bytes
 20+  600D              ;  X 2 1 0 Y 2 1 0
 21+  600D              ;    B H L   C D E
 22+  600D              ; 24 bit multiply
 23+  600D              ; start with lower and help with add sequence           ; all with carry flag (as lower case target reg)
 24+  600D              ;        L *     E   X0mulY0 1>> 1>>  shift >> 16       ;     HL = L * E
 25+  600D              ;        L *   D     Y1mulX0 0   1>>  shift >> 8        ;   DEHL = 00HL  + 0[L*D]0
 26+  600D              ;      H   *     E   X1mulY0 0   1>>  shift >> 8        ;   DEHL = DEHL  + 0[H*E]0 = DEH + 0[H*E]
 27+  600D              ;    B     *     E   X2mulY0 1<< 1>>  shift 0           ;  CDE   = 0DE   + 0[B*E]
 28+  600D              ;        L * C       Y2mulX0 1<< 1>>  shift 0           ;  CDE   = CDE   + 0[L*C]
 29+  600D              ;      H   *   D     X1mulY1 0   0    shift 0           ;  CDE   = CDE   + 0[H*D]
 30+  600D              ;    B     *   D     X2mulY1 1<< 0<<  shift << 8        ; BCD    = 0CD   + 0[B*D]
 31+  600D              ;      H   * C       Y2mulX1 1<< 0    shift << 8        ; BCD    = 0CD   + 0[H*C]
 32+  600D              ;    B     * C       X2mulY2 1<< 1<<  shift <<16        ; BC     = BC    + [B*C]
 33+  600D              ; 16 bit multiply
 34+  600D              ; start with lower and help with add sequence           ; all with carry flag (as lower case target reg)
 35+  600D              ;        L *     E   X0mulY0 1>> 1>>  shift >> 16       ;     HL = L * E
 36+  600D              ;        L *   D     Y1mulX0 0   1>>  shift >> 8        ;   DEHL = 00HL  + 0[L*D]0
 37+  600D              ;      H   *     E   X1mulY0 0   1>>  shift >> 8        ;   DEHL = DEHL  + 0[H*E]0 = DEH + 0[H*E]
 38+  600D              ;      H   *   D     X1mulY1 0   0    shift 0           ;  CDE   = CDE   + 0[H*D]
 39+  600D              ;                                                       ; Result BCDE.HL
 40+  600D
 41+  600D              ; so in our calcs we have
 42+  600D              ;     bhl  *  cde
 43+  600D              ;     HLD1    HLD2
 44+  600D              ; which maps to bytes 5 4 3 2 1 0
 45+  600D              ;  D1 * D2                    X X  1    de = l * e   (D1 * D2)
 46+  600D              ;  L1 * D2                  X X    2    hl = h * e   (L1 * D2)  e = d, d = 0 add hl,de and move carry to a (result ahl)
 47+  600D              ;  D1 * L2                  X X    3    de = l * d   (D1 * L2)  add hl,de and adc a,0                      (result ahl) with l being final ".h" A is starter for e so we now have l spare
 48+  600D              ;  D1 * H2                X X      4    de = l * c   (D1 * H2)
 49+  600D              ;  L1 * L2                X X      5    hl = h * d   (L1 * L2)
 50+  600D              ;  H1 * D2                X X      6    bc = b * e   (H1 * D2)  add hl,de,bc, a (from previous carry)      (result ahl) with l being final "e." h is starter for d and a is starter for c
 51+  600D              ;  L1 * H2              X X        7    de = h * c   (L1 * H2)
 52+  600D              ;  H1 * L2              X X        8    bc = b * d   (H1 * L2)  add de,bc, ah                              (result ahl) with l being final "d"  h is starter for c and a is starter for b
 53+  600D              ;  H1 * H2            X X          9    bc = b * c   (H1 * H2)  add bc,ah,c                                (result ahl) with hl being
 54+  600D              ;                     b c d e h l for result we only care about cde.h
 55+  600D              ;signed muliply
 56+  600D                  DISPLAY "TO DO - add leading sign to mul24"
 57+  600D                  DISPLAY "TO DO - Optimisae mul24 for leading 0's to do 8.8 x 8.8"
 58+  600D                  DISPLAY "NOT BANK0 SAFE"
 59+  600D              ;BH.L by CD.E putting result in BCDE.HL and put the resullt in MulitplyResults then puyll teh actual result to BCDE.HL
 60+  600D 78           mul24Signed:            ld      a,b
 61+  600E A9                                   xor     c
 62+  600F E6 80                                and     $80
 63+  6011 F5                                   push    af
 64+  6012 CB B8                                res     7,b
 65+  6014 CB B9                                res     7,c
 66+  6016 78           .TestForZero:           ld      a,b
 67+  6017 B4                                   or      h
 68+  6018 B5                                   or      l
 69+  6019 CA 29 60                             jp      z,.resultIsZero
 70+  601C 79                                   ld      a,c
 71+  601D B2                                   or      d
 72+  601E B3                                   or      e
 73+  601F CA 29 60                             jp      z,.resultIsZero
 74+  6022 CD 30 60                             call    mul24
 75+  6025 F1                                   pop     af
 76+  6026 B2                                   or      d
 77+  6027 57                                   ld      d,a
 78+  6028 C9                                   ret
 79+  6029 F1           .resultIsZero:          pop     af
 80+  602A 11 00 00                             ld      de,0
 81+  602D 26 00                                ld      h,0
 82+  602F C9                                   ret
 83+  6030
 84+  6030 7A           mul24:                  ld      a,d                 ; preserve L2 for later
 85+  6031 55                                   ld      d,l
 86+  6032 ED 53 61 60                          ld      (.mul24_1+1),de     ; write to D1 * D2 calc 1
 87+  6036 54                                   ld      d,h
 88+  6037 ED 53 6E 60                          ld      (.mul24_2+1),de     ; write to L1 * D2 calc 2
 89+  603B 50                                   ld      d,b
 90+  603C ED 53 92 60                          ld      (.mul24_6+1),de     ; write to H1 * D2 calc 6
 91+  6040 57                                   ld      d,a                 ; get back L2
 92+  6041 5D                                   ld      e,l
 93+  6042 ED 53 76 60                          ld      (.mul24_3+1),de     ; (D1 * L2)   3
 94+  6046 5C                                   ld      e,h
 95+  6047 ED 53 8A 60                          ld      (.mul24_5+1),de     ; (L1 * L2)   5
 96+  604B 58                                   ld      e,b
 97+  604C ED 53 A7 60                          ld      (.mul24_8+1),de     ; (H1 * L2)   8
 98+  6050 50 59                                ld      de,bc
 99+  6052 ED 53 B4 60                          ld      (.mul24_9+1),de     ; (H1 * H2)   9
100+  6056 55                                   ld      d,l
101+  6057 ED 53 82 60                          ld      (.mul24_4+1),de     ; (D1 * H2)   4
102+  605B 54                                   ld      d,h
103+  605C ED 53 9F 60                          ld      (.mul24_7+1),de     ; (L1 * H2)   7
104+  6060 11 00 00     .mul24_1:               ld      de,$0000            ; D1 * D2 for lowest 16 bites
105+  6063 ED 30                                mul     de
106+  6065 ED 53 ED 5D                          ld      (MultiplyResult),de ; save result as we have a completed byte 0 of result
107+  6069 6A                                   ld      l,d                 ; now we have thbe shifed result for step 2
108+  606A 26 00                                ld      h,0                 ;
109+  606C                                      ZeroA                       ; clear accumulator for carry bit
109+  606C AF          >                        xor a
110+  606D 11 00 00     .mul24_2:               ld      de,$0000            ; L1 * D2
111+  6070 ED 30                                mul     de
112+  6072 19                                   add     hl,de               ; hl = (L1 * D2) + (D1*D2)high byte with a carry
113+  6073 CE 00                                adc     a,0                 ; a holds carry incase of any overflow
114+  6075 11 00 00     .mul24_3:               ld      de,$0000            ; now add in D1 * L2
115+  6078 ED 30                                mul     de                  ; so we have a completed byte 1 of result
116+  607A 19                                   add     hl,de               ;
117+  607B 8F                                   adc     a,a                 ; So now we hbave byte 1 complete and ahl holding current bytes 321
118+  607C 22 EE 5D                             ld      (MultiplyResult+1),hl; save byte 1 (in l) of result
119+  607F 6C                                   ld      l,h                 ; prep carry over for step 4
120+  6080 67                                   ld      h,a                 ; .
121+  6081 11 00 00     .mul24_4:               ld      de,$0000            ; now (D1 * H2)
122+  6084 ED 30                                mul     de                  ; .
123+  6086                                      ZeroA
123+  6086 AF          >                        xor a
124+  6087 19                                   add     hl,de               ; and bring in carry over from step 3
125+  6088 8F                                   adc     a,a                 ; so ahl is the result
126+  6089 11 00 00     .mul24_5:               ld      de,$0000            ; now (D1 * H2)
127+  608C ED 30                                mul     de                  ; .
128+  608E B7                                   or      a                   ; clear carry flag
129+  608F 19                                   add     hl,de               ; and bring in carry over from step 4
130+  6090 8F                                   adc     a,a                 ; so ahl is the result
131+  6091 11 00 00     .mul24_6:               ld      de,$0000            ; now (D1 * H2)
132+  6094 ED 30                                mul     de                  ; .
133+  6096 B7                                   or      a                   ; clear carry flag
134+  6097 19                                   add     hl,de               ; and bring in carry over from step 5
135+  6098 8F                                   adc     a,a                 ; so ahl is the result of bytes 654
136+  6099 22 EF 5D                             ld      (MultiplyResult+2),hl; save byte 2 (in l) of result
137+  609C 6C                                   ld      l,h                 ; prep carry over for step 7
138+  609D 67                                   ld      h,a                 ; .
139+  609E 11 00 00     .mul24_7:               ld      de,$0000            ; now (D1 * H2)
140+  60A1 ED 30                                mul     de                  ; .
141+  60A3 B7                                   or      a                   ; clear carry flag
142+  60A4 19                                   add     hl,de               ; and bring in carry over from step 6
143+  60A5 8F                                   adc     a,a                 ; so ahl is the result
144+  60A6 11 00 00     .mul24_8:               ld      de,$0000            ; now (D1 * H2)
145+  60A9 ED 30                                mul     de                  ; .
146+  60AB B7                                   or      a                   ; clear carry flag
147+  60AC 19                                   add     hl,de               ; and bring in carry over from step 7
148+  60AD 8F                                   adc     a,a                 ; so ahl is the result
149+  60AE 22 F0 5D                             ld      (MultiplyResult+3),hl; save byte 3 (in l) of result
150+  60B1 6C                                   ld      l,h                 ; prep carry over for step 8
151+  60B2 67                                   ld      h,a                 ; .
152+  60B3 11 00 00     .mul24_9:               ld      de,$0000            ; now (D1 * H2)
153+  60B6 ED 30                                mul     de                  ; .
154+  60B8 19                                   add     hl,de               ; and bring in carry over from step 7
155+  60B9 8F                                   adc     a,a                 ; so ahl is the result
156+  60BA 22 F1 5D                             ld      (MultiplyResult+4),hl; save bytes 4 5 of result
157+  60BD 2A ED 5D                             ld      hl,(MultiplyResult)
158+  60C0 ED 5B EF 5D                          ld      de,(MultiplyResult+2)
159+  60C4 ED 4B F1 5D                          ld      bc,(MultiplyResult+4)
160+  60C8 C9                                   ret
161+  60C9
# file closed: asm_mul24_notbank0safe.asm
172   60C9                  SAVENEX OPEN "m24test.nex", EliteNextStartup , TopOfStack
173   60C9                  SAVENEX CFG  0,0,0,1
174   60C9                  SAVENEX AUTO
175   60C9                  SAVENEX CLOSE
176   60C9
177   60C9
# file closed: m24test.asm
