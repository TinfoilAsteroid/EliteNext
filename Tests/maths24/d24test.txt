# file opened: d24test.asm
  1   0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
  2   0000                              DISPLAY "d24test test"
  3   0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
  4   0000
  5   0000
  6   0000                  DEFINE DEBUGMODE 1
  7   0000                  DEVICE ZXSPECTRUMNEXT
  8   0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  9   0000                  ;DEFINE  TESTING_MATHS_DIVIDE 1
 10   0000                  DEFINE  TESTING_ROLL_PITCH 1
 11   0000               CSPECTMAP d24test.map
 12   0000               OPT --zxnext=cspect --syntax=a --reversepop
 13   0000                              DEFINE  SOUNDPACE 3
 14   0000              ;                DEFINE  ENABLE_SOUND 1
 15   0000                             DEFINE     MAIN_INTERRUPTENABLE 1
 16   0000              ;               DEFINE INTERRUPT_BLOCKER 1
 17   0000              DEBUGSEGSIZE   equ 1
 18   0000              DEBUGLOGSUMMARY equ 1
 19   0000              ;DEBUGLOGDETAIL equ 1
 20   0000
 21   0000              ;----------------------------------------------------------------------------------------------------------------------------------
 22   0000              ; Game Defines
 23   0000              ScreenLocal      EQU 0
 24   0000              ScreenGalactic   EQU ScreenLocal + 1
 25   0000              ScreenMarket     EQU ScreenGalactic + 1
 26   0000              ScreenMarketDsp  EQU ScreenMarket + 1
 27   0000              ScreenStatus     EQU ScreenMarketDsp + 1
 28   0000              ScreenInvent     EQU ScreenStatus + 1
 29   0000              ScreenPlanet     EQU ScreenInvent + 1
 30   0000              ScreenEquip      EQU ScreenPlanet + 1
 31   0000              ScreenLaunch     EQU ScreenEquip + 1
 32   0000              ScreenFront      EQU ScreenLaunch + 1
 33   0000              ScreenAft        EQU ScreenFront+1
 34   0000              ScreenLeft       EQU ScreenAft+1
 35   0000              ScreenRight      EQU ScreenLeft+1
 36   0000              ScreenDocking    EQU ScreenRight+1
 37   0000              ScreenHyperspace EQU ScreenDocking+1
 38   0000              ;----------------------------------------------------------------------------------------------------------------------------------
 39   0000              ; Colour Defines
 40   0000              SignMask8Bit		equ %01111111
 41   0000              SignMask16Bit		equ %0111111111111111
 42   0000              SignOnly8Bit		equ $80
 43   0000              SignOnly16Bit		equ $8000
 44   0000
 45   0000              Bit7Only            equ %10000000
 46   0000              Bit6Only            equ %01000000
 47   0000              Bit5Only            equ %00100000
 48   0000              Bit4Only            equ %00010000
 49   0000              Bit3Only            equ %00001000
 50   0000              Bit2Only            equ %00000100
 51   0000              Bit1Only            equ %00000010
 52   0000              Bit0Only            equ %00000001
 53   0000              Bit7Clear           equ %01111111
 54   0000              Bit6Clear           equ %10111111
 55   0000              Bit5Clear           equ %11011111
 56   0000              Bit4Clear           equ %11101111
 57   0000              Bit3Clear           equ %11110111
 58   0000              Bit2Clear           equ %11111011
 59   0000              Bit1Clear           equ %11111101
 60   0000              Bit0Clear           equ %11111110
 61   0000              ConstPi				equ $80
 62   0000              ConstNorm           equ 197
 63   0000
 64   0000
 65   0000
 66   0000                                      INCLUDE "../../Macros/jumpMacros.asm"
# file opened: jumpMacros.asm
  1+  0000              JumpIfHLNegative:       MACRO target
  2+  0000 ~                                    bit     7,h
  3+  0000 ~                                    jp      nz,target
  4+  0000                                      ENDM
  5+  0000
  6+  0000              JumpIfPositive:	        MACRO target
  7+  0000 ~                                    jp		p, target
  8+  0000                                      ENDM
  9+  0000
 10+  0000              JumpIfNegative:	        MACRO target
 11+  0000 ~                                    jp		m, target
 12+  0000                                      ENDM
 13+  0000
 14+  0000
 15+  0000              JumpIfUnderflow:	    MACRO target
 16+  0000 ~                                    jp		po, target
 17+  0000                                      ENDM
 18+  0000
 19+  0000              JumpIfOverflow:	        MACRO target
 20+  0000 ~                                    jp		po, target
 21+  0000                                      ENDM
 22+  0000
 23+  0000
 24+  0000              JumpIfNotZero:	        MACRO target
 25+  0000 ~                                    jp	nz,target
 26+  0000                                      ENDM
 27+  0000
 28+  0000              JumpIfZero:	            MACRO target
 29+  0000 ~                                    jp	z,target
 30+  0000                                      ENDM
 31+  0000
 32+  0000              ;.. Bit routines
 33+  0000              JumpOnLeadSignSet:      MACRO   reg, target
 34+  0000 ~                                    ld      a,reg
 35+  0000 ~                                    and     SignOnly8Bit
 36+  0000 ~                                    jp      nz,target
 37+  0000                                      ENDM
 38+  0000
 39+  0000              JumpOnLeadSignClear:    MACRO   reg, target
 40+  0000 ~                                    ld      a,reg
 41+  0000 ~                                    and     SignOnly8Bit
 42+  0000 ~                                    jp      z,target
 43+  0000                                      ENDM
 44+  0000
 45+  0000              JumpOnLeadSignSetA:     MACRO   target
 46+  0000 ~                                    and     SignOnly8Bit
 47+  0000 ~                                    jp      nz,target
 48+  0000                                      ENDM
 49+  0000
 50+  0000              JumpOnLeadSignClearA:   MACRO   target
 51+  0000 ~                                    and     SignOnly8Bit
 52+  0000 ~                                    jp      z,target
 53+  0000                                      ENDM
 54+  0000
 55+  0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
 56+  0000 ~                                    ld      a,(mem)
 57+  0000 ~                                    bit 	bitnbr,a
 58+  0000 ~                                    jp      nz,target
 59+  0000                                      ENDM
 60+  0000
 61+  0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
 62+  0000 ~                                    ld      a,(mem)
 63+  0000 ~                                    bit 	bitnbr,a
 64+  0000 ~                                    jp      z,target
 65+  0000                                      ENDM
 66+  0000
 67+  0000
 68+  0000              JumpOnABitSet:          MACRO   bitnbr, target
 69+  0000 ~                                    bit 	bitnbr, a
 70+  0000 ~                                    jp      nz,target
 71+  0000                                      ENDM
 72+  0000
 73+  0000              JumpOnABitClear:        MACRO   bitnbr, target
 74+  0000 ~                                    bit 	bitnbr, a
 75+  0000 ~                                    jp      z,target
 76+  0000                                      ENDM
 77+  0000
 78+  0000              JumpOnABit5Set:         MACRO   target
 79+  0000 ~                                    and     Bit5Only
 80+  0000 ~                                    jp      nz,target
 81+  0000                                      ENDM
 82+  0000
 83+  0000              JumpOnABit5Clear:       MACRO   target
 84+  0000 ~                                    and     Bit5Only
 85+  0000 ~                                    jp      z,target
 86+  0000                                      ENDM
 87+  0000
 88+  0000              JumpOnBitMaskSet:       MACRO   bitmask, target
 89+  0000 ~                                    and     bitmask
 90+  0000 ~                                    jp      nz,target
 91+  0000                                      ENDM
 92+  0000
 93+  0000              JumpOnBitMaskClear:     MACRO   bitmask, target
 94+  0000 ~                                    and     bitmask
 95+  0000 ~                                    jp      z,target
 96+  0000                                      ENDM
 97+  0000
 98+  0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
 99+  0000 ~                                    ld      a,(mem)
100+  0000 ~                                    and     bitmask
101+  0000 ~                                    jp      nz,target
102+  0000                                      ENDM
103+  0000
104+  0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
105+  0000 ~                                    ld      a,(mem)
106+  0000 ~                                    and     bitmask
107+  0000 ~                                    jp      z,target
108+  0000                                      ENDM
109+  0000
110+  0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
111+  0000 ~                                    bit 	bitnbr,reg
112+  0000 ~                                    jp      nz,target
113+  0000                                      ENDM
114+  0000
115+  0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
116+  0000 ~                                    bit 	bitnbr,reg
117+  0000 ~                                    jp      z,target
118+  0000                                      ENDM
119+  0000
120+  0000              ; Comparison Routines
121+  0000              JumpIfAGTEusng:         MACRO
122+  0000 ~                                    jp		nc,target
123+  0000                                      ENDM
124+  0000
125+  0000              JumpIfAGTENusng:        MACRO reg,target
126+  0000 ~                                    cp     reg
127+  0000 ~                                    jp		nc,target
128+  0000                                      ENDM
129+  0000
130+  0000              JumpIfAGTEMemusng:      MACRO mem,target
131+  0000 ~                                    ld      hl,mem
132+  0000 ~                                    cp      (hl)
133+  0000 ~                                    jp		nc,target
134+  0000                                      ENDM
135+  0000              JumpIfMemGTENusng:      MACRO mem, value, target
136+  0000 ~                                    ld     a,(mem)
137+  0000 ~                                    cp     value
138+  0000 ~                                    jp	  nc,target
139+  0000                                      ENDM
140+  0000
141+  0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
142+  0000 ~                                    ld   a,(mem)
143+  0000 ~                                    ld   hl,address
144+  0000 ~                                    cp   (hl)
145+  0000 ~                                    jp	  nc,target
146+  0000                                      ENDM
147+  0000
148+  0000              JumpIfMemEqMemusng:     MACRO mem, address, target
149+  0000 ~                                    ld   a,(mem)
150+  0000 ~                                    ld   hl,address
151+  0000 ~                                    cp   (hl)
152+  0000 ~                                    jp	  z,target
153+  0000                                      ENDM
154+  0000
155+  0000              JumpIfMemNeMemusng:     MACRO mem, address, target
156+  0000 ~                                    ld   a,(mem)
157+  0000 ~                                    ld   hl,address
158+  0000 ~                                    cp   (hl)
159+  0000 ~                                    jp	  nz,target
160+  0000                                      ENDM
161+  0000
162+  0000              JumpIfMemTrue:          MACRO mem, target
163+  0000 ~                                    ld      a,(mem)
164+  0000 ~                                    and     a
165+  0000 ~                                    jp      z, target
166+  0000                                      ENDM
167+  0000
168+  0000              JumpIfMemFalse:         MACRO mem, target
169+  0000 ~                                    ld      a,(mem)
170+  0000 ~                                    and     a
171+  0000 ~                                    jp      nz, target
172+  0000                                      ENDM
173+  0000
174+  0000              JumpIfATrue:            MACRO target
175+  0000 ~                                    and     a
176+  0000 ~                                    jp      z, target
177+  0000                                      ENDM
178+  0000
179+  0000              JumpIfAFalse:           MACRO target
180+  0000 ~                                    and     a
181+  0000 ~                                    jp      nz, target
182+  0000                                      ENDM
183+  0000
184+  0000              JumpIfANotFalse:        MACRO target
185+  0000 ~                                    cp      $FF
186+  0000 ~                                    jp      nz, target
187+  0000                                      ENDM
188+  0000
189+  0000              ;-- Less than Macros -------------------------------------------
190+  0000              JumpIfALTMemHLusng:     MACRO target
191+  0000 ~                                    cp    (hl)
192+  0000 ~                                    jp	  c,target
193+  0000                                      ENDM
194+  0000
195+  0000              JumpIfRegLTE:           MACRO   reg, value, target
196+  0000 ~                                    ld      a,reg
197+  0000 ~                                    cp      value
198+  0000 ~                                    jp	    z,target
199+  0000 ~                                    jp		c, target
200+  0000                                      ENDM
201+  0000
202+  0000              JumpIfALTMemusng:       MACRO mem,target
203+  0000 ~                                    ld      hl,mem
204+  0000 ~                                    cp      (hl)
205+  0000 ~                                    jp		c,target
206+  0000                                      ENDM
207+  0000
208+  0000
209+  0000              JumpIfALTusng:          MACRO target
210+  0000 ~                                    jp		c,target
211+  0000                                      ENDM
212+  0000
213+  0000              JumpIfALTNusng:         MACRO value, target
214+  0000 ~                                    cp      value
215+  0000 ~                                    jp		c, target
216+  0000                                      ENDM
217+  0000
218+  0000              JumpIfALTNsigned:       MACRO   value, target
219+  0000 ~                                    cp      value
220+  0000 ~                                    jp      m,.SignSet
221+  0000 ~            .SignClear:             jp      pe,target       ; Sign (0), P/V (1)
222+  0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (0)
223+  0000 ~            .SignSet:               jp      po,target
224+  0000 ~            .CheckComplete:
225+  0000                                      ENDM
226+  0000
227+  0000              JumpIfMemLTNusng:       MACRO mem, value, target
228+  0000 ~                                    ld      a,(mem)
229+  0000 ~                                    cp      value
230+  0000 ~                                    jp	  c,target
231+  0000                                      ENDM
232+  0000
233+  0000              JumpIfMemLTMemusng:     MACRO mem, value, target
234+  0000 ~                                    ld    a,(mem)
235+  0000 ~                                    ld    hl,value
236+  0000 ~                                    cp    (hl)
237+  0000 ~                                    jp	  c,target
238+  0000                                      ENDM
239+  0000              ;-- ------------------------------------------------------------
240+  0000              JumpIfAGTENsigned       MACRO   value, target
241+  0000 ~                                    cp      value
242+  0000 ~                                    jp      m,.SignSet
243+  0000 ~            .SignClear:             jp      po,target       ; Sign (0), P/V (0)
244+  0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (1)
245+  0000 ~            .SignSet:               jp      pe,target
246+  0000 ~            .CheckComplete:
247+  0000                                      ENDM
248+  0000
249+  0000              JumpIfMemEqNusng:       MACRO mem,value,target
250+  0000 ~                                    ld  a,(mem)
251+  0000 ~                                    cp  value
252+  0000 ~                                    jp  z,target
253+  0000                                      ENDM
254+  0000
255+  0000              JumpIfMemNeNusng:       MACRO mem,value,target
256+  0000 ~                                    ld  a,(mem)
257+  0000 ~                                    cp  value
258+  0000 ~                                    jp  nz,target
259+  0000                                      ENDM
260+  0000
261+  0000              JumpIfMemZero:          MACRO mem,target
262+  0000 ~                                    ld  a,(mem)
263+  0000 ~                                    and a
264+  0000 ~                                    jp  z,target
265+  0000                                      ENDM
266+  0000
267+  0000              JumpIfMemNotZero:       MACRO mem,target
268+  0000 ~                                    ld  a,(mem)
269+  0000 ~                                    and a
270+  0000 ~                                    jp  nz,target
271+  0000                                      ENDM
272+  0000
273+  0000              JumpIfANENusng:         MACRO value, target
274+  0000 ~                                    cp     value
275+  0000 ~                                    jp      nz,target
276+  0000                                      ENDM
277+  0000
278+  0000              JumpIfANEquNusng:       MACRO value, target
279+  0000 ~                                    cp     value
280+  0000 ~                                    jp     z,target
281+  0000                                      ENDM
282+  0000
283+  0000              JumpIfANEMemusng:       MACRO  value, target
284+  0000 ~                                    ld    hl,value
285+  0000 ~                                    cp    (hl)
286+  0000 ~                                    jp      nz,target
287+  0000                                      ENDM
288+  0000
289+  0000              JumpIfAEqNusng:         MACRO value, target
290+  0000 ~                                    cp     value
291+  0000 ~                                    jp      z,target
292+  0000                                      ENDM
293+  0000
294+  0000              JumpIfAIsZero:	        MACRO target
295+  0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
296+  0000 ~                                    jp	    z, target
297+  0000                                      ENDM
298+  0000
299+  0000              JumpIfRegIsNotZero:     MACRO   reg, target
300+  0000 ~                                    ld      a,reg
301+  0000 ~                                    and     a
302+  0000 ~                                    jp	    nz,target
303+  0000                                      ENDM
304+  0000
305+  0000
306+  0000              JumpIfAIsNotZero:       MACRO target
307+  0000 ~                                    and     a
308+  0000 ~                                    jp	    nz,target
309+  0000                                      ENDM
310+  0000
311+  0000              JumpIfMemIsNotZero:     MACRO value, target
312+  0000 ~                                    ld      a,(value)
313+  0000 ~                                    and     a
314+  0000 ~                                    jp	    nz,target
315+  0000                                      ENDM
316+  0000              IfResultZeroGoto:	    MACRO target
317+  0000 ~                                    jp	z,target
318+  0000                                      ENDM
319+  0000
320+  0000              IfResultNotZeroGoto:    MACRO target
321+  0000 ~                                    jp	nz,target
322+  0000                                      ENDM
323+  0000
# file closed: jumpMacros.asm
 67   0000                                      INCLUDE "../../Macros/MathsMacros.asm"
# file opened: MathsMacros.asm
  1+  0000              ZeroA:		            MACRO
  2+  0000 ~                                    xor a
  3+  0000                                      ENDM
  4+  0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
  5+  0000              IsHLGT255:              MACRO
  6+  0000 ~                                    bit     7,h
  7+  0000 ~                                    ret     z
  8+  0000 ~                                    ld      a,h
  9+  0000 ~                                    and     a
 10+  0000                                      ENDM
 11+  0000
 12+  0000              ; Sets z flat if HL = 255 else sets it to nz
 13+  0000              IsHLEqu255:             MACRO
 14+  0000 ~                                    ld      a,h
 15+  0000 ~                                    and     a               ; if its non zero then it can't be 255
 16+  0000 ~                                    ret     nz
 17+  0000 ~                                    ld      a,l
 18+  0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
 19+  0000                                      ENDM
 20+  0000
 21+  0000              ; Sets Z flag if GT 127 else nz
 22+  0000              IsHLGT127:              MACRO
 23+  0000 ~                                    bit     7,h             ; -ve?
 24+  0000 ~                                    jr      nz,.DoneCheck
 25+  0000 ~                                    ld      a,h             ; +ve > 256?
 26+  0000 ~                                    and     a
 27+  0000 ~                                    jr      nz,.DoneCheck
 28+  0000 ~                                    ld      a,l
 29+  0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
 30+  0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
 31+  0000 ~            .DoneCheck:
 32+  0000                                      ENDM
 33+  0000
 34+  0000              ReturnIfHLGT127:        MACRO
 35+  0000 ~                                    bit     7,h             ; -ve?
 36+  0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
 37+  0000 ~                                    ld      a,h             ; +ve > 256?
 38+  0000 ~                                    and     a               ;
 39+  0000 ~                                    ret     nz              ; forces a return
 40+  0000 ~                                    bit     7,l             ; bit 7 of lower set?
 41+  0000 ~                                    ret     nz              ; forces a return
 42+  0000 ~            .DoneCheck:
 43+  0000                                      ENDM
 44+  0000
 45+  0000              IsDEGT127:              MACRO
 46+  0000 ~                                    bit     7,d
 47+  0000 ~                                    jr      nz,.DoneCheck
 48+  0000 ~                                    ld      a,d
 49+  0000 ~                                    jr      nz,.DoneCheck
 50+  0000 ~                                    ld      a,e
 51+  0000 ~                                    and     $80
 52+  0000 ~            .DoneCheck:
 53+  0000                                      ENDM
 54+  0000
 55+  0000              ABSa2c:                 MACRO
 56+  0000 ~                                    bit     7,a
 57+  0000 ~                                    jp      z,.DoneABSa
 58+  0000 ~                                    neg
 59+  0000 ~            .DoneABSa:
 60+  0000                                      ENDM
 61+  0000
 62+  0000              DEEquSquareA:           MACRO
 63+  0000 ~                                    ld  d,a
 64+  0000 ~                                    ld  e,a
 65+  0000 ~                                    mul de
 66+  0000                                      ENDM
 67+  0000
 68+  0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
 69+  0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
 70+  0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
 71+  0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
 72+  0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
 73+  0000 ~                                    xor $80                             ;
 74+  0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
 75+  0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
 76+  0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
 77+  0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
 78+  0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
 79+  0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
 80+  0000                                      ENDM
 81+  0000
 82+  0000              SignedHLTo2C:           MACRO
 83+  0000 ~                                    bit     7,h
 84+  0000 ~                                    jr      z,.Done2c
 85+  0000 ~                                    ld      a,h
 86+  0000 ~                                    and     SignMask8Bit
 87+  0000 ~                                    ld      h,a
 88+  0000 ~                                    NegHL
 89+  0000 ~            .Done2c:
 90+  0000                                      ENDM
 91+  0000
 92+  0000              MemSignedTo2C:          MACRO   memfrom
 93+  0000 ~                                    ld      hl,(memfrom)
 94+  0000 ~                                    bit     7,h
 95+  0000 ~                                    jr      z,.Done2c
 96+  0000 ~                                    ld      a,h
 97+  0000 ~                                    and     SignMask8Bit
 98+  0000 ~                                    ld      h,a
 99+  0000 ~            .Done2c:                ld      (memfrom),hl
100+  0000                                      ENDM
101+  0000
102+  0000
103+  0000                  ;returns result in H
104+  0000              EDiv10Inline:           MACRO
105+  0000 ~                                    ld      d,0
106+  0000 ~                                    ld      hl,de
107+  0000 ~                                    add     hl,hl
108+  0000 ~                                    add     hl,de
109+  0000 ~                                    add     hl,hl
110+  0000 ~                                    add     hl,hl
111+  0000 ~                                    add     hl,de
112+  0000 ~                                    add     hl,hl
113+  0000                                      ENDM
114+  0000
115+  0000              cpHLDE:                 MACRO
116+  0000 ~                                    push    hl
117+  0000 ~                                    and     a
118+  0000 ~                                    sbc     hl,de
119+  0000 ~                                    pop     hl
120+  0000                                      ENDM
121+  0000
122+  0000              cpABSDEHL:              MACRO
123+  0000 ~                                    push     hl,,de
124+  0000 ~                                    ld      a,h
125+  0000 ~                                    and     $7F
126+  0000 ~                                    ld      h,a
127+  0000 ~                                    ld      a,d
128+  0000 ~                                    and     $7F
129+  0000 ~                                    ld      d,a
130+  0000 ~                                    ex      de,hl
131+  0000 ~                                    sbc     hl,de
132+  0000 ~                                    pop     hl,,de
133+  0000                                      ENDM
134+  0000
135+  0000              ; Simple are they both the same setting z if they are
136+  0000              ; tehcicall this works but it measn the final ret z is alwys done
137+  0000              ; so jp needs to be to a target
138+  0000              cpHLEquDE:              MACRO   passedCheck
139+  0000 ~                                    ld      a,h
140+  0000 ~                                    cp      d
141+  0000 ~                                    jp      nz, passedCheck
142+  0000 ~                                    ld      a,l
143+  0000 ~                                    cp      e
144+  0000 ~            .NoTheSame:
145+  0000                                      ENDM
146+  0000
147+  0000              cpHLEquBC:              MACRO   passedCheck
148+  0000 ~                                    ld      a,h
149+  0000 ~                                    cp      b
150+  0000 ~                                    jp      nz, passedCheck
151+  0000 ~                                    ld      a,l
152+  0000 ~                                    cp      c
153+  0000 ~            .NoTheSame:
154+  0000                                      ENDM
155+  0000
156+  0000              cpDEEquBC:              MACRO   passedCheck
157+  0000 ~                                    ld      a,d
158+  0000 ~                                    cp      b
159+  0000 ~                                    jp      nz, passedCheck
160+  0000 ~                                    ld      a,e
161+  0000 ~                                    cp      c
162+  0000 ~            .NoTheSame:
163+  0000                                      ENDM
164+  0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
165+  0000              cpHLDELeadSign:         MACRO
166+  0000 ~                                    ld      a,h
167+  0000 ~                                    cp      d
168+  0000 ~                                    jr      nz,.FullCompare
169+  0000 ~                                    ld      a,l
170+  0000 ~                                    cp      e
171+  0000 ~                                    ret     z
172+  0000 ~            .FullCompare:           ld      a,h
173+  0000 ~                                    xor     d
174+  0000 ~                                    and     $80
175+  0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
176+  0000 ~                                    ld      a,h                 ; same signs so a little simpler
177+  0000 ~                                    and     $80
178+  0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
179+  0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
180+  0000 ~            .OppositeSigns:         ld      a,h
181+  0000 ~                                    and     $80
182+  0000 ~                                    and     $80
183+  0000 ~                                    jp      z,.HLGTDE
184+  0000 ~            .HLLTDE:                SetCarryFlag
185+  0000 ~                                    ret
186+  0000 ~            .HLGTDE:                ClearCarryFlag
187+  0000 ~                                    ret
188+  0000                                      ENDM
189+  0000
190+  0000              ;Unsigned
191+  0000              ;If HL == DE, then Z flag is set.
192+  0000              ;If HL != DE, then Z flag is reset.
193+  0000              ;If HL <  DE, then C flag is set.
194+  0000              ;If HL >= DE, then C flag is reset.
195+  0000              ;
196+  0000              ;Signed
197+  0000              ;If HL == DE, then Z flag is set.
198+  0000              ;If HL != DE, then Z flag is reset.
199+  0000              ;If HL <  DE, then S and P/V are different.
200+  0000              ;If HL >= DE, then S and P/V are the same.
201+  0000
202+  0000
203+  0000              N0equN1byN2div256:      MACRO param1,param2,param3
204+  0000 ~                                    ld      a,param3                        ;
205+  0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
206+  0000 ~                                    ld      a,param2                        ; A = XX16 element
207+  0000 ~                                    ld      d,a
208+  0000 ~                                    mul
209+  0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
210+  0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
211+  0000                                      ENDM
212+  0000
213+  0000              AequN1xorN2:            MACRO  param1,param2
214+  0000 ~                                    ld      a,(param1)
215+  0000 ~                                    xor     param2
216+  0000                                      ENDM
217+  0000
218+  0000              SpeedMulAxis:           MACRO   speedreg, axis
219+  0000 ~                                    ld      e,speedreg
220+  0000 ~                                    ld      hl,(axis)
221+  0000 ~                                    ld      a,h
222+  0000 ~                                    ClearSignBitA
223+  0000 ~                                    ld      d,a
224+  0000 ~                                    mul     de
225+  0000 ~                                    ld      a,h
226+  0000 ~                                    SignBitOnlyA
227+  0000 ~                                    ld      b,a;ld      c,a
228+  0000 ~                                    ld      h,d;ld      e,d
229+  0000 ~                                    ld      c,0;ld      d,0
230+  0000                                      ENDM
231+  0000
232+  0000              ; Adds speed (8 bit) to vertex (24 bit signed)
233+  0000              AddSpeedToVert:         MACRO   vertex
234+  0000 ~                                    ld      de,(vertex+1)
235+  0000 ~                                    ld      a,(vertex)
236+  0000 ~                                    ld      l,a
237+  0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
238+  0000 ~                                    ld      a,l
239+  0000 ~                                    ld      (vertex),a
240+  0000 ~                                    ld      (vertex+1),de
241+  0000                                      ENDM
# file closed: MathsMacros.asm
 68   0000                                      INCLUDE "../../Macros/ShiftMacros.asm"
# file opened: ShiftMacros.asm
  1+  0000              ShiftIYRight1: MACRO
  2+  0000 ~                           ld   a,iyh
  3+  0000 ~                           srl  a
  4+  0000 ~                           ld   iyh,a
  5+  0000 ~                           ld   a,iyl
  6+  0000 ~                           rra
  7+  0000 ~                           ld   iyl,a
  8+  0000                             ENDM
  9+  0000
 10+  0000              ShiftIXRight1: MACRO
 11+  0000 ~                           ld   a,ixh
 12+  0000 ~                           srl  a
 13+  0000 ~                           ld   ixh,a
 14+  0000 ~                           ld   a,ixl
 15+  0000 ~                           rra
 16+  0000 ~                           ld   ixl,a
 17+  0000                             ENDM
 18+  0000
 19+  0000              ShiftIXhHLRight1: MACRO
 20+  0000 ~                           ld  a,ixh
 21+  0000 ~                           srl a
 22+  0000 ~                           ld  ixh,a
 23+  0000 ~                           rr  h
 24+  0000 ~                           rr  l
 25+  0000                             ENDM
 26+  0000
 27+  0000              ShiftIYhDERight1: MACRO
 28+  0000 ~                           ld  a,iyh
 29+  0000 ~                           srl a
 30+  0000 ~                           ld  iyh,a
 31+  0000 ~                           rr  d
 32+  0000 ~                           rr  e
 33+  0000                             ENDM
 34+  0000
 35+  0000              ShiftIYlBCRight1: MACRO
 36+  0000 ~                           ld  a,iyl
 37+  0000 ~                           srl a
 38+  0000 ~                           ld  iyl,a
 39+  0000 ~                           rr  b
 40+  0000 ~                           rr  c
 41+  0000                             ENDM
 42+  0000
 43+  0000              ShiftIXlBCRight1: MACRO
 44+  0000 ~                           ld  a,ixl
 45+  0000 ~                           srl a
 46+  0000 ~                           ld  ixl,a
 47+  0000 ~                           rr  b
 48+  0000 ~                           rr  c
 49+  0000                             ENDM
 50+  0000
 51+  0000              ShiftHLRight1: MACRO
 52+  0000 ~                           srl h
 53+  0000 ~                           rr  l
 54+  0000                             ENDM
 55+  0000
 56+  0000              ShiftBHLRight1:MACRO
 57+  0000 ~                           srl b
 58+  0000 ~                           rr h
 59+  0000 ~                           rr  l
 60+  0000                             ENDM
 61+  0000
 62+  0000              ShiftCDERight1:MACRO
 63+  0000 ~                           srl c
 64+  0000 ~                           rr  d
 65+  0000 ~                           rr  e
 66+  0000                             ENDM
 67+  0000
 68+  0000
 69+  0000              SRAHLRight1: MACRO
 70+  0000 ~                           sra h
 71+  0000 ~                           rr  l
 72+  0000                             ENDM
 73+  0000
 74+  0000              ShiftDERight1: MACRO
 75+  0000 ~                           srl d
 76+  0000 ~                           rr  e
 77+  0000                             ENDM
 78+  0000
 79+  0000              ShiftBCRight1: MACRO
 80+  0000 ~                           srl b
 81+  0000 ~                           rr  c
 82+  0000                             ENDM
 83+  0000
 84+  0000
 85+  0000              ShiftHLDiv8:   MACRO
 86+  0000 ~                           srl h
 87+  0000 ~                           rr  l
 88+  0000 ~                           srl h
 89+  0000 ~                           rr  l
 90+  0000 ~                           srl h
 91+  0000 ~                           rr  l
 92+  0000                             ENDM
 93+  0000
 94+  0000              ShiftBHLLeft1:  MACRO
 95+  0000 ~                            sla l
 96+  0000 ~                            rl  h
 97+  0000 ~                            rl  b
 98+  0000                              ENDM
 99+  0000
100+  0000              ShiftCDELeft1:  MACRO
101+  0000 ~                            sla e
102+  0000 ~                            rl  d
103+  0000 ~                            rl  c
104+  0000                              ENDM
105+  0000
106+  0000              ShiftHLLeft1:  MACRO    ; 16 T states
107+  0000 ~                           sla l
108+  0000 ~                           rl  h
109+  0000                             ENDM
110+  0000
111+  0000              ShiftDELeft1:  MACRO    ; 16 T states
112+  0000 ~                           sla e
113+  0000 ~                           rl  d
114+  0000                             ENDM
115+  0000
116+  0000              BarrelHLLeft3: MACRO
117+  0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
118+  0000 ~                           push     bc      ; 10
119+  0000 ~                           ld       b,3     ; 7
120+  0000 ~                           bsrl     de,b    ; 8
121+  0000 ~                           pop      bc      ; 10
122+  0000 ~                           ex       de,hl   ; 4
123+  0000                             ENDM
124+  0000
125+  0000              BarrelHLRight3: MACRO
126+  0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
127+  0000 ~                           push     bc      ; 10
128+  0000 ~                           ld       b,3     ; 7
129+  0000 ~                           bsrl     de,b    ; 8
130+  0000 ~                           pop      bc      ; 10
131+  0000 ~                           ex       de,hl   ; 4
132+  0000                             ENDM
133+  0000
134+  0000              RollBCLeft1:   MACRO    ; 16 T states
135+  0000 ~                           rl  c
136+  0000 ~                           rl  b
137+  0000                             ENDM
138+  0000
139+  0000              RollDELeft1:   MACRO    ; 16 T states
140+  0000 ~                           rl  e
141+  0000 ~                           rl  d
142+  0000                             ENDM
143+  0000
144+  0000              ShiftBCLeft1:  MACRO    ; 16 T states
145+  0000 ~                           sla c
146+  0000 ~                           rl  b
147+  0000                             ENDM
148+  0000
149+  0000              ShiftLeftMem:       MACRO   reg
150+  0000 ~                                ld      hl,reg
151+  0000 ~                                sla     (hl)
152+  0000                                  ENDM
153+  0000
154+  0000
155+  0000
156+  0000              ShiftMem16Right1:   MACRO memaddr
157+  0000 ~                                ld    hl,(memaddr)
158+  0000 ~                                srl   h
159+  0000 ~                                rr    l
160+  0000 ~                                ld    (memaddr),hl
161+  0000                                  ENDM
162+  0000
163+  0000              ShiftMem8Right1:    MACRO memaddr
164+  0000 ~                                ld      a,(memaddr)
165+  0000 ~                                srl     a
166+  0000 ~                                ld      (memaddr),a
167+  0000                                  ENDM
168+  0000
169+  0000
170+  0000              ShiftMem8Left1A:    MACRO memaddr
171+  0000 ~                                ld      a,(memaddr)
172+  0000 ~                                sla     a
173+  0000 ~                                ld      (memaddr),a
174+  0000                                  ENDM
175+  0000
# file closed: ShiftMacros.asm
 69   0000                                      INCLUDE "../../Macros/NegateMacros.asm"
# file opened: NegateMacros.asm
  1+  0000
  2+  0000              macronegate16hl:	MACRO
  3+  0000 ~            					xor 	a
  4+  0000 ~            					sub 	l
  5+  0000 ~            					ld 		l,a
  6+  0000 ~            					sbc 	a,a
  7+  0000 ~            					sub 	h
  8+  0000 ~            					ld 		h,a
  9+  0000              					ENDM
 10+  0000
 11+  0000
 12+  0000              macroAbsHL:         MACRO
 13+  0000 ~                                bit     7,h
 14+  0000 ~                                jp      z,.alreadyABS
 15+  0000 ~            					xor 	a
 16+  0000 ~            					sub 	l
 17+  0000 ~            					ld 		l,a
 18+  0000 ~            					sbc 	a,a
 19+  0000 ~            					sub 	h
 20+  0000 ~            					ld 		h,a
 21+  0000 ~            .alreadyABS:
 22+  0000                                  ENDM
 23+  0000
 24+  0000              macronegate16de:	MACRO
 25+  0000 ~            					xor 	a
 26+  0000 ~                                sub 	e
 27+  0000 ~                                ld 		e,a
 28+  0000 ~                                sbc 	a,a
 29+  0000 ~                                sub 	d
 30+  0000 ~                                ld 		d,a
 31+  0000              					ENDM
 32+  0000
 33+  0000              macronegate16bc:	MACRO
 34+  0000 ~            					xor 	a
 35+  0000 ~                                sub 	c
 36+  0000 ~                                ld 		c,a
 37+  0000 ~                                sbc 	a,a
 38+  0000 ~                                sub 	b
 39+  0000 ~                                ld 		b,a
 40+  0000              					ENDM
 41+  0000
 42+  0000              macronegate16ix:	MACRO
 43+  0000 ~            					xor 	a
 44+  0000 ~                                sub 	ixl
 45+  0000 ~                                ld 		ixl,a
 46+  0000 ~                                sbc 	a,a
 47+  0000 ~                                sub 	ixh
 48+  0000 ~                                ld 		ixh,a
 49+  0000              					ENDM
 50+  0000
 51+  0000
 52+  0000              NegIY:			    MACRO
 53+  0000 ~                                xor a
 54+  0000 ~                                sub iyl
 55+  0000 ~                                ld iyl,a
 56+  0000 ~                                sbc a,a
 57+  0000 ~                                sub iyh
 58+  0000 ~                                ld iyh,a
 59+  0000                                  ENDM
 60+  0000
 61+  0000              NegHL:			    MACRO
 62+  0000 ~                                xor     a
 63+  0000 ~                                sub     l
 64+  0000 ~                                ld      l,a
 65+  0000 ~                                sbc     a,a
 66+  0000 ~                                sub     h
 67+  0000 ~                                ld      h,a
 68+  0000                                  ENDM
 69+  0000
 70+  0000              NegBHL:             MACRO
 71+  0000 ~                                ld      a,l
 72+  0000 ~                                cpl
 73+  0000 ~                                add     a,1
 74+  0000 ~                                ld      l,a
 75+  0000 ~                                ld      a,h
 76+  0000 ~                                cpl
 77+  0000 ~                                adc     a,0
 78+  0000 ~                                ld      h,a
 79+  0000 ~                                ld      a,b
 80+  0000 ~                                cpl
 81+  0000 ~                                adc     a,0
 82+  0000 ~                                ld      b,a
 83+  0000                                  ENDM
 84+  0000
 85+  0000              NegCDE:             MACRO
 86+  0000 ~                                ld      a,e
 87+  0000 ~                                cpl
 88+  0000 ~                                add     a,1
 89+  0000 ~                                ld      e,a
 90+  0000 ~                                ld      a,d
 91+  0000 ~                                cpl
 92+  0000 ~                                adc     a,0
 93+  0000 ~                                ld      d,a
 94+  0000 ~                                ld      a,c
 95+  0000 ~                                cpl
 96+  0000 ~                                adc     a,0
 97+  0000 ~                                ld      c,a
 98+  0000                                  ENDM
 99+  0000
100+  0000              NegAHL:			    MACRO
101+  0000 ~                                ld      b,a
102+  0000 ~                                ld      a,l
103+  0000 ~                                cpl
104+  0000 ~                                add     a,1
105+  0000 ~                                ld      l,a
106+  0000 ~                                ld      a,h
107+  0000 ~                                cpl
108+  0000 ~                                adc     a,0
109+  0000 ~                                ld      h,a
110+  0000 ~                                ld      a,b
111+  0000 ~                                cpl
112+  0000 ~                                adc     a,0
113+  0000                                  ENDM
114+  0000
115+  0000
116+  0000              NegDE:			    MACRO
117+  0000 ~                                xor     a
118+  0000 ~                                sub     e
119+  0000 ~                                ld      e,a
120+  0000 ~                                sbc     a,a
121+  0000 ~                                sub     d
122+  0000 ~                                ld      d,a
123+  0000                                  ENDM
124+  0000
125+  0000              NegBC:			    MACRO
126+  0000 ~                                xor     a
127+  0000 ~                                sub     c
128+  0000 ~                                ld      c,a
129+  0000 ~                                sbc     a,a
130+  0000 ~                                sub     b
131+  0000 ~                                ld      b,a
132+  0000                                  ENDM
133+  0000
134+  0000              NegH                MACRO
135+  0000 ~                                ld      a,h
136+  0000 ~                                neg
137+  0000 ~                                ld      h,a
138+  0000                                  ENDM
139+  0000
140+  0000              NegD                MACRO
141+  0000 ~                                ld      a,d
142+  0000 ~                                neg
143+  0000 ~                                ld      d,a
144+  0000                                  ENDM
145+  0000
146+  0000              NegB                MACRO
147+  0000 ~                                ld      a,b
148+  0000 ~                                neg
149+  0000 ~                                ld      b,a
150+  0000                                  ENDM
151+  0000
# file closed: NegateMacros.asm
 70   0000                                      INCLUDE "../../Macros/carryFlagMacros.asm"
# file opened: carryFlagMacros.asm
  1+  0000
  2+  0000              SetCarryFlag:           MACRO
  3+  0000 ~                                    scf
  4+  0000                                      ENDM
  5+  0000
  6+  0000              ClearCarryFlag:	        MACRO
  7+  0000 ~                                    or a
  8+  0000                                      ENDM
  9+  0000
 10+  0000              FlipCarryFlag:          MACRO
 11+  0000 ~                                    ccf
 12+  0000                                      ENDM
 13+  0000
# file closed: carryFlagMacros.asm
 71   0000              ;----------------------------------------------------------------------------------------------------------------------------------
 72   0000              ; Total screen list
 73   0000              ; Local Chart
 74   0000              ; Galactic Chart
 75   0000              ; Market Prices
 76   0000              ; Inventory
 77   0000              ; Comander status
 78   0000              ; System Data
 79   0000              ; Mission Briefing
 80   0000              ; missio completion
 81   0000              ; Docked  Menu (only place otehr than pause you can load and save)
 82   0000              ; Pause Menu (only place you can load from )
 83   0000              ; byint and selling equipment
 84   0000              ; bying and selling stock
 85   0000              TopOfStack              equ $5CCB ;$6100
 86   0000
 87   0000                                      ORG $5DCB;      $6200
 88   5DCB F3           EliteNextStartup:       di
 89   5DCC FD 00                                break
 90   5DCE FD 21 FD 5D                          ld      iy,Test1
 91   5DD2 06 06                                ld      b,6
 92   5DD4 FD E5 C5     .testloop:              push    iy,,bc
 93   5DD7 CD 5D 5E                             call    TestDiv24
 94   5DDA C1 FD E1                             pop     iy,,bc
 95   5DDD FD E5 E1                             ld      hl,iy
 96   5DE0 3E 10                                ld      a,$10
 97   5DE2 ED 31                                add     hl,a
 98   5DE4 E5 FD E1                             ld      iy,hl
 99   5DE7 10 EB                                djnz    .testloop
100   5DE9 FD 00                                break
101   5DEB
102   5DEB 00 00        ErrorCount:             DW  0
103   5DED
104   5DED 00 00 00...  MultiplyResult:         DS  16  ; reserve 6 bytes for maths result, little endian rest is padding for console display alignment
105   5DFD
106   5DFD                                       ;  Dividend.....  Divisor...... Filler....Result...........................                                                                           E H  L    B  C
107   5DFD 80 25 00 00  Test1:                  DB $80, $25, $00, $00, $04, $00, $00, $00, $60, $09, $00, $00, $00, $00, $00, $11 ; 37.5 / 4 = 9.375
107   5E01 04 00 00 00
107   5E05 60 09 00 00
107   5E09 00 00 00 11
108   5E0D 80 25 00 00  Test2:                  DB $80, $25, $00, $00, $04, $80, $00, $00, $55, $08, $00, $00, $00, $00, $00, $11 ; 37.5 / 4.5 = 8.3333
108   5E11 04 80 00 00
108   5E15 55 08 00 00
108   5E19 00 00 00 11
109   5E1D 80 7F 00 80  Test3:                  DB $80, $7F, $00, $80, $02, $00, $00, $00, $00, $33, $00, $00, $00, $00, $00, $11 ; 128.5 / 2.5 = 51
109   5E21 02 00 00 00
109   5E25 00 33 00 00
109   5E29 00 00 00 11
110   5E2D 40 7F 00 40  Test4:                  DB $40, $7F, $00, $40, $05, $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $11 ; 127.25/5.25=24.238
110   5E31 05 00 00 00
110   5E35 00 00 18 00
110   5E39 00 00 00 11
111   5E3D 80 F7 00 80  Test5:                  DB $80, $F7, $00, $80, $0A, $00, $00, $00, $00, $00, $0c, $00, $00, $00, $00, $11 ; -119.5/10.5=-11.3809
111   5E41 0A 00 00 00
111   5E45 00 00 0C 00
111   5E49 00 00 00 11
112   5E4D FF 03 00 00  Test6:                  DB $FF, $03, $00, $00, $8A, $10, $00, $00, $00, $00, $00, $00, $00, $00, $00, $11 ; 3.996 / -10 = -0.3996
112   5E51 8A 10 00 00
112   5E55 00 00 00 00
112   5E59 00 00 00 11
113   5E5D
114   5E5D
115   5E5D FD 6E 00 FD  TestDiv24:              ld      hl,(iy+0)           ; dehl = X0
115   5E61 66 01
116   5E63 FD 7E 02                             ld      a,(iy+2)
117   5E66 FD 5E 03 FD                          ld      de,(iy+3)           ; dehl = 0Y
117   5E6A 56 04
118   5E6C FD 4E 05                             ld      c,(iy+5)            ;
119   5E6F FD 00                                break
120   5E71 CD 2D 5F                             call    divs24              ; dehl' / dehl result in BCDE.HL
121   5E74 FD 75 0B FD                          ld      (iy+$0B),hl         ; .
121   5E78 74 0C
122   5E7A FD 73 0D FD                          ld      (iy+$0D),de         ; .
122   5E7E 72 0E
123   5E80 D9                                   exx
124   5E81 7D                                   ld      a,l
125   5E82 FD 77 0E                             ld      (iy+$0E),a          ; and finally l
126   5E85 FD 7E 07     .CheckResult:           ld      a,(iy+$07)
127   5E88 47                                   ld      b,a
128   5E89 FD 7E 0B                             ld      a,(iy+$0B)
129   5E8C B8                                   cp      b
130   5E8D C2 B7 5E                             jp      nz,.Fail
131   5E90
132   5E90 FD 7E 08                             ld      a,(iy+$08)
133   5E93 47                                   ld      b,a
134   5E94 FD 7E 0C                             ld      a,(iy+$0C)
135   5E97 B8                                   cp      b
136   5E98 C2 B7 5E                             jp      nz,.Fail
137   5E9B
138   5E9B FD 7E 09                             ld      a,(iy+$09)
139   5E9E 47                                   ld      b,a
140   5E9F FD 7E 0D                             ld      a,(iy+$0D)
141   5EA2 B8                                   cp      b
142   5EA3 C2 B7 5E                             jp      nz,.Fail
143   5EA6
144   5EA6 FD 7E 0A                             ld      a,(iy+$0A)
145   5EA9 47                                   ld      b,a
146   5EAA FD 7E 0E                             ld      a,(iy+$0E)
147   5EAD B8                                   cp      b
148   5EAE C2 B7 5E                             jp      nz,.Fail
149   5EB1
150   5EB1 3E FF                                ld      a,$FF
151   5EB3 FD 77 0F                             ld      (iy+$0F),a
152   5EB6 C9                                   ret
153   5EB7 3E 00        .Fail:                  ld      a,$00
154   5EB9 FD 77 0F                             ld      (iy+$0F),a
155   5EBC 21 EB 5D                             ld      hl,ErrorCount
156   5EBF 34                                   inc     (hl)
157   5EC0 C9                                   ret
158   5EC1
159   5EC1
160   5EC1 FD 6E 01 FD  TestDiv:                ld      hl,(iy+1)           ; dehl = X0
160   5EC5 66 02
161   5EC7 EB                                   ex      de,hl
162   5EC8 FD 7E 00                             ld      a,(iy+0)
163   5ECB 67                                   ld      h,a                 ; .
164   5ECC 2E 00                                ld      l,0
165   5ECE D9                                   exx                         ; de'hl' = X
166   5ECF FD 6E 03 FD                          ld      hl,(iy+3)           ; dehl = 0Y
166   5ED3 66 04
167   5ED5 FD 7E 05                             ld      a,(iy+5)            ;
168   5ED8 5F                                   ld      e,a                 ;
169   5ED9 16 00                                ld      d,0
170   5EDB D9                                   exx                         ; dehl correct way round
171   5EDC FD 00                                break
172   5EDE CD 58 5F                             call    divu32              ; dehl' / dehl result in BCDE.HL
173   5EE1 D9                                   exx                         ; so now we have l'de.h to consdier                     ; we only care about lde'.h' in the resul
174   5EE2 7C                                   ld      a,h                 ; we only care about lde'.h' in the resul
175   5EE3 FD 77 0B                             ld      (iy+$0B),a          ; .
176   5EE6 FD 73 0C FD                          ld      (iy+$0C),de         ; .
176   5EEA 72 0D
177   5EEC D9                                   exx
178   5EED 7D                                   ld      a,l
179   5EEE FD 77 0E                             ld      (iy+$0E),a          ; and finally l
180   5EF1 FD 7E 07     .CheckResult:           ld      a,(iy+$07)
181   5EF4 47                                   ld      b,a
182   5EF5 FD 7E 0B                             ld      a,(iy+$0B)
183   5EF8 B8                                   cp      b
184   5EF9 C2 23 5F                             jp      nz,.Fail
185   5EFC
186   5EFC FD 7E 08                             ld      a,(iy+$08)
187   5EFF 47                                   ld      b,a
188   5F00 FD 7E 0C                             ld      a,(iy+$0C)
189   5F03 B8                                   cp      b
190   5F04 C2 23 5F                             jp      nz,.Fail
191   5F07
192   5F07 FD 7E 09                             ld      a,(iy+$09)
193   5F0A 47                                   ld      b,a
194   5F0B FD 7E 0D                             ld      a,(iy+$0D)
195   5F0E B8                                   cp      b
196   5F0F C2 23 5F                             jp      nz,.Fail
197   5F12
198   5F12 FD 7E 0A                             ld      a,(iy+$0A)
199   5F15 47                                   ld      b,a
200   5F16 FD 7E 0E                             ld      a,(iy+$0E)
201   5F19 B8                                   cp      b
202   5F1A C2 23 5F                             jp      nz,.Fail
203   5F1D
204   5F1D 3E FF                                ld      a,$FF
205   5F1F FD 77 0F                             ld      (iy+$0F),a
206   5F22 C9                                   ret
207   5F23 3E 00        .Fail:                  ld      a,$00
208   5F25 FD 77 0F                             ld      (iy+$0F),a
209   5F28 21 EB 5D                             ld      hl,ErrorCount
210   5F2B 34                                   inc     (hl)
211   5F2C C9                                   ret
212   5F2D
213   5F2D
214   5F2D              ;--------------------------------------------------------------------------------------
215   5F2D                  INCLUDE	"../../Maths24/asm_divide24.asm"
# file opened: asm_divide24.asm
  1+  5F2D              ; unsigned division dehl = dehl / dehl' dehl' = remainder carry clear,  div  by 0 = carry set everyhthing else untouched
  2+  5F2D
  3+  5F2D              ; ahl  = EHL/DBC CARRY OVERFLOW FLAG
  4+  5F2D              ; dehl = dehl / dehjl'
  5+  5F2D
  6+  5F2D              divu32smallloop         MACRO
  7+  5F2D ~
  8+  5F2D ~                                    exx
  9+  5F2D ~                                    rl      c                 ; bcbc << 1
 10+  5F2D ~                                    rl      b
 11+  5F2D ~                                    exx
 12+  5F2D ~                                    rl      c
 13+  5F2D ~                                    rla
 14+  5F2D ~
 15+  5F2D ~                                    exx
 16+  5F2D ~                                    adc     hl,hl            ; hlhl << 1
 17+  5F2D ~                                    exx
 18+  5F2D ~                                    adc     hl,hl
 19+  5F2D ~
 20+  5F2D ~                                    exx
 21+  5F2D ~                                    sbc     hl,de            ; if hlhl > dede
 22+  5F2D ~                                    exx
 23+  5F2D ~                                    sbc     hl,de
 24+  5F2D ~                                    jr nc,  .skip_loop        ;   hlhl -= dede
 25+  5F2D ~
 26+  5F2D ~                                    exx                  ;
 27+  5F2D ~                                    add     hl,de
 28+  5F2D ~                                    exx
 29+  5F2D ~                                    adc     hl,de
 30+  5F2D ~            .skip_loop:             ccf
 31+  5F2D                                      ENDM
 32+  5F2D
 33+  5F2D
 34+  5F2D              ;INPUTS: ahl = dividend cde = divisor
 35+  5F2D              ;OUTPUTS: cde = quotient ahl = remainder
 36+  5F2D              ; AHL = AHL/CDE
 37+  5F2D                  DISPLAY "Needs ficxing for proper S15.8 result"
 38+  5F2D 47           divs24:                 ld      b,a             ; preserve dividend sign
 39+  5F2E A9                                   xor     c               ; now a holds sign bit
 40+  5F2F E6 80                                and     $80             ;
 41+  5F31 08                                   ex      af,af'          ; save sign bit
 42+  5F32 CB B8                                res     7,b             ; now force an ABS divide
 43+  5F34 CB B9                                res     7,c
 44+  5F36 C5 D5                                push    bc,,de          ; save divisor
 45+  5F38 50           .prepdivisor:           ld      d,b             ; prep DEHL'
 46+  5F39 5C                                   ld      e,h             ; which trashes divisor
 47+  5F3A 65                                   ld      h,l             ; .
 48+  5F3B 2E 00                                ld      l,0             ; .
 49+  5F3D D9                                   exx                     ; now save it over into dehl;
 50+  5F3E E1 D1                                pop     de,,hl          ; force 0cde into dehl
 51+  5F40 16 00                                ld      d,0
 52+  5F42 CD 58 5F                             call    divu32          ; bcde.hl = dehl' / dehl
 53+  5F45 08                                   ex      af,af'          ; get sign back
 54+  5F46 B2                                   or      d               ; set de.h to signed divide
 55+  5F47 C9                                   ret
 56+  5F48
 57+  5F48 D9           divs32swap:             exx                     ;
 58+  5F49              ; dehl = dehl' / dehl in our case it will be S78.0/ 0S78.0 to give us 0S78.0
 59+  5F49 7B           divs32:                 ld      a,e             ; get sign bit from divisor
 60+  5F4A D9                                   exx                     ; swap to get dividend sign bit
 61+  5F4B AA                                   xor     d               ; .
 62+  5F4C D9                                   exx                     ; then swap back for normal compute
 63+  5F4D E6 80                                and     $80             ; but we can then save sign bit to stack
 64+  5F4F F5                                   push    af              ; .
 65+  5F50 CD 58 5F                             call    divu32          ; perform divide
 66+  5F53 F1                                   pop     af              ; get sign bit
 67+  5F54 B3                                   or      e               ; as result will be in ehl that we want
 68+  5F55 5F                                   ld      e,a             ; we ignore d reg
 69+  5F56 C9                                   ret
 70+  5F57
 71+  5F57 D9           divu32swap:             exx
 72+  5F58              ; dehl = dehl' / dehl in our case it will be 78.80 / 078.8 to give us 078.8
 73+  5F58 7A           divu32:                 ld a,d
 74+  5F59 B3                                   or e
 75+  5F5A B4                                   or h
 76+  5F5B B5                                   or l
 77+  5F5C CA 20 63                             jp z, divide_by_zero
 78+  5F5F                 ; try to reduce the division
 79+  5F5F              begin:
 80+  5F5F AF                                   xor     a
 81+  5F60 E5                                   push    hl
 82+  5F61 D9                                   exx
 83+  5F62 44 4D                                ld      bc,hl
 84+  5F64 E1                                   pop     hl
 85+  5F65 D5                                   push    de
 86+  5F66 EB                                   ex      de,hl
 87+  5F67 6F                                   ld      l,a
 88+  5F68 67                                   ld      h,a
 89+  5F69 D9                                   exx
 90+  5F6A C1                                   pop     bc
 91+  5F6B 6F                                   ld      l,a
 92+  5F6C 67                                   ld      h,a
 93+  5F6D
 94+  5F6D              l1_small_divu_32_32x32: ; dede' = 32-bit divisor, bcbc' = 32-bit dividend, hlhl' = 0
 95+  5F6D 78                                   ld      a,b
 96+  5F6E             > divu32smallloop
 96+  5F6E             >
 96+  5F6E D9          >                        exx
 96+  5F6F CB 11       >                        rl      c                 ; bcbc << 1
 96+  5F71 CB 10       >                        rl      b
 96+  5F73 D9          >                        exx
 96+  5F74 CB 11       >                        rl      c
 96+  5F76 17          >                        rla
 96+  5F77             >
 96+  5F77 D9          >                        exx
 96+  5F78 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  5F7A D9          >                        exx
 96+  5F7B ED 6A       >                        adc     hl,hl
 96+  5F7D             >
 96+  5F7D D9          >                        exx
 96+  5F7E ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  5F80 D9          >                        exx
 96+  5F81 ED 52       >                        sbc     hl,de
 96+  5F83 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  5F85             >
 96+  5F85 D9          >                        exx                  ;
 96+  5F86 19          >                        add     hl,de
 96+  5F87 D9          >                        exx
 96+  5F88 ED 5A       >                        adc     hl,de
 96+  5F8A 3F          >.skip_loop:             ccf
 96+  5F8B             > divu32smallloop
 96+  5F8B             >
 96+  5F8B D9          >                        exx
 96+  5F8C CB 11       >                        rl      c                 ; bcbc << 1
 96+  5F8E CB 10       >                        rl      b
 96+  5F90 D9          >                        exx
 96+  5F91 CB 11       >                        rl      c
 96+  5F93 17          >                        rla
 96+  5F94             >
 96+  5F94 D9          >                        exx
 96+  5F95 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  5F97 D9          >                        exx
 96+  5F98 ED 6A       >                        adc     hl,hl
 96+  5F9A             >
 96+  5F9A D9          >                        exx
 96+  5F9B ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  5F9D D9          >                        exx
 96+  5F9E ED 52       >                        sbc     hl,de
 96+  5FA0 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  5FA2             >
 96+  5FA2 D9          >                        exx                  ;
 96+  5FA3 19          >                        add     hl,de
 96+  5FA4 D9          >                        exx
 96+  5FA5 ED 5A       >                        adc     hl,de
 96+  5FA7 3F          >.skip_loop:             ccf
 96+  5FA8             > divu32smallloop
 96+  5FA8             >
 96+  5FA8 D9          >                        exx
 96+  5FA9 CB 11       >                        rl      c                 ; bcbc << 1
 96+  5FAB CB 10       >                        rl      b
 96+  5FAD D9          >                        exx
 96+  5FAE CB 11       >                        rl      c
 96+  5FB0 17          >                        rla
 96+  5FB1             >
 96+  5FB1 D9          >                        exx
 96+  5FB2 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  5FB4 D9          >                        exx
 96+  5FB5 ED 6A       >                        adc     hl,hl
 96+  5FB7             >
 96+  5FB7 D9          >                        exx
 96+  5FB8 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  5FBA D9          >                        exx
 96+  5FBB ED 52       >                        sbc     hl,de
 96+  5FBD 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  5FBF             >
 96+  5FBF D9          >                        exx                  ;
 96+  5FC0 19          >                        add     hl,de
 96+  5FC1 D9          >                        exx
 96+  5FC2 ED 5A       >                        adc     hl,de
 96+  5FC4 3F          >.skip_loop:             ccf
 96+  5FC5             > divu32smallloop
 96+  5FC5             >
 96+  5FC5 D9          >                        exx
 96+  5FC6 CB 11       >                        rl      c                 ; bcbc << 1
 96+  5FC8 CB 10       >                        rl      b
 96+  5FCA D9          >                        exx
 96+  5FCB CB 11       >                        rl      c
 96+  5FCD 17          >                        rla
 96+  5FCE             >
 96+  5FCE D9          >                        exx
 96+  5FCF ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  5FD1 D9          >                        exx
 96+  5FD2 ED 6A       >                        adc     hl,hl
 96+  5FD4             >
 96+  5FD4 D9          >                        exx
 96+  5FD5 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  5FD7 D9          >                        exx
 96+  5FD8 ED 52       >                        sbc     hl,de
 96+  5FDA 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  5FDC             >
 96+  5FDC D9          >                        exx                  ;
 96+  5FDD 19          >                        add     hl,de
 96+  5FDE D9          >                        exx
 96+  5FDF ED 5A       >                        adc     hl,de
 96+  5FE1 3F          >.skip_loop:             ccf
 96+  5FE2             > divu32smallloop
 96+  5FE2             >
 96+  5FE2 D9          >                        exx
 96+  5FE3 CB 11       >                        rl      c                 ; bcbc << 1
 96+  5FE5 CB 10       >                        rl      b
 96+  5FE7 D9          >                        exx
 96+  5FE8 CB 11       >                        rl      c
 96+  5FEA 17          >                        rla
 96+  5FEB             >
 96+  5FEB D9          >                        exx
 96+  5FEC ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  5FEE D9          >                        exx
 96+  5FEF ED 6A       >                        adc     hl,hl
 96+  5FF1             >
 96+  5FF1 D9          >                        exx
 96+  5FF2 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  5FF4 D9          >                        exx
 96+  5FF5 ED 52       >                        sbc     hl,de
 96+  5FF7 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  5FF9             >
 96+  5FF9 D9          >                        exx                  ;
 96+  5FFA 19          >                        add     hl,de
 96+  5FFB D9          >                        exx
 96+  5FFC ED 5A       >                        adc     hl,de
 96+  5FFE 3F          >.skip_loop:             ccf
 96+  5FFF             > divu32smallloop
 96+  5FFF             >
 96+  5FFF D9          >                        exx
 96+  6000 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6002 CB 10       >                        rl      b
 96+  6004 D9          >                        exx
 96+  6005 CB 11       >                        rl      c
 96+  6007 17          >                        rla
 96+  6008             >
 96+  6008 D9          >                        exx
 96+  6009 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  600B D9          >                        exx
 96+  600C ED 6A       >                        adc     hl,hl
 96+  600E             >
 96+  600E D9          >                        exx
 96+  600F ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6011 D9          >                        exx
 96+  6012 ED 52       >                        sbc     hl,de
 96+  6014 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6016             >
 96+  6016 D9          >                        exx                  ;
 96+  6017 19          >                        add     hl,de
 96+  6018 D9          >                        exx
 96+  6019 ED 5A       >                        adc     hl,de
 96+  601B 3F          >.skip_loop:             ccf
 96+  601C             > divu32smallloop
 96+  601C             >
 96+  601C D9          >                        exx
 96+  601D CB 11       >                        rl      c                 ; bcbc << 1
 96+  601F CB 10       >                        rl      b
 96+  6021 D9          >                        exx
 96+  6022 CB 11       >                        rl      c
 96+  6024 17          >                        rla
 96+  6025             >
 96+  6025 D9          >                        exx
 96+  6026 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6028 D9          >                        exx
 96+  6029 ED 6A       >                        adc     hl,hl
 96+  602B             >
 96+  602B D9          >                        exx
 96+  602C ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  602E D9          >                        exx
 96+  602F ED 52       >                        sbc     hl,de
 96+  6031 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6033             >
 96+  6033 D9          >                        exx                  ;
 96+  6034 19          >                        add     hl,de
 96+  6035 D9          >                        exx
 96+  6036 ED 5A       >                        adc     hl,de
 96+  6038 3F          >.skip_loop:             ccf
 96+  6039             > divu32smallloop
 96+  6039             >
 96+  6039 D9          >                        exx
 96+  603A CB 11       >                        rl      c                 ; bcbc << 1
 96+  603C CB 10       >                        rl      b
 96+  603E D9          >                        exx
 96+  603F CB 11       >                        rl      c
 96+  6041 17          >                        rla
 96+  6042             >
 96+  6042 D9          >                        exx
 96+  6043 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6045 D9          >                        exx
 96+  6046 ED 6A       >                        adc     hl,hl
 96+  6048             >
 96+  6048 D9          >                        exx
 96+  6049 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  604B D9          >                        exx
 96+  604C ED 52       >                        sbc     hl,de
 96+  604E 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6050             >
 96+  6050 D9          >                        exx                  ;
 96+  6051 19          >                        add     hl,de
 96+  6052 D9          >                        exx
 96+  6053 ED 5A       >                        adc     hl,de
 96+  6055 3F          >.skip_loop:             ccf
 96+  6056             > divu32smallloop
 96+  6056             >
 96+  6056 D9          >                        exx
 96+  6057 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6059 CB 10       >                        rl      b
 96+  605B D9          >                        exx
 96+  605C CB 11       >                        rl      c
 96+  605E 17          >                        rla
 96+  605F             >
 96+  605F D9          >                        exx
 96+  6060 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6062 D9          >                        exx
 96+  6063 ED 6A       >                        adc     hl,hl
 96+  6065             >
 96+  6065 D9          >                        exx
 96+  6066 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6068 D9          >                        exx
 96+  6069 ED 52       >                        sbc     hl,de
 96+  606B 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  606D             >
 96+  606D D9          >                        exx                  ;
 96+  606E 19          >                        add     hl,de
 96+  606F D9          >                        exx
 96+  6070 ED 5A       >                        adc     hl,de
 96+  6072 3F          >.skip_loop:             ccf
 96+  6073             > divu32smallloop
 96+  6073             >
 96+  6073 D9          >                        exx
 96+  6074 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6076 CB 10       >                        rl      b
 96+  6078 D9          >                        exx
 96+  6079 CB 11       >                        rl      c
 96+  607B 17          >                        rla
 96+  607C             >
 96+  607C D9          >                        exx
 96+  607D ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  607F D9          >                        exx
 96+  6080 ED 6A       >                        adc     hl,hl
 96+  6082             >
 96+  6082 D9          >                        exx
 96+  6083 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6085 D9          >                        exx
 96+  6086 ED 52       >                        sbc     hl,de
 96+  6088 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  608A             >
 96+  608A D9          >                        exx                  ;
 96+  608B 19          >                        add     hl,de
 96+  608C D9          >                        exx
 96+  608D ED 5A       >                        adc     hl,de
 96+  608F 3F          >.skip_loop:             ccf
 96+  6090             > divu32smallloop
 96+  6090             >
 96+  6090 D9          >                        exx
 96+  6091 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6093 CB 10       >                        rl      b
 96+  6095 D9          >                        exx
 96+  6096 CB 11       >                        rl      c
 96+  6098 17          >                        rla
 96+  6099             >
 96+  6099 D9          >                        exx
 96+  609A ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  609C D9          >                        exx
 96+  609D ED 6A       >                        adc     hl,hl
 96+  609F             >
 96+  609F D9          >                        exx
 96+  60A0 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  60A2 D9          >                        exx
 96+  60A3 ED 52       >                        sbc     hl,de
 96+  60A5 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  60A7             >
 96+  60A7 D9          >                        exx                  ;
 96+  60A8 19          >                        add     hl,de
 96+  60A9 D9          >                        exx
 96+  60AA ED 5A       >                        adc     hl,de
 96+  60AC 3F          >.skip_loop:             ccf
 96+  60AD             > divu32smallloop
 96+  60AD             >
 96+  60AD D9          >                        exx
 96+  60AE CB 11       >                        rl      c                 ; bcbc << 1
 96+  60B0 CB 10       >                        rl      b
 96+  60B2 D9          >                        exx
 96+  60B3 CB 11       >                        rl      c
 96+  60B5 17          >                        rla
 96+  60B6             >
 96+  60B6 D9          >                        exx
 96+  60B7 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  60B9 D9          >                        exx
 96+  60BA ED 6A       >                        adc     hl,hl
 96+  60BC             >
 96+  60BC D9          >                        exx
 96+  60BD ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  60BF D9          >                        exx
 96+  60C0 ED 52       >                        sbc     hl,de
 96+  60C2 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  60C4             >
 96+  60C4 D9          >                        exx                  ;
 96+  60C5 19          >                        add     hl,de
 96+  60C6 D9          >                        exx
 96+  60C7 ED 5A       >                        adc     hl,de
 96+  60C9 3F          >.skip_loop:             ccf
 96+  60CA             > divu32smallloop
 96+  60CA             >
 96+  60CA D9          >                        exx
 96+  60CB CB 11       >                        rl      c                 ; bcbc << 1
 96+  60CD CB 10       >                        rl      b
 96+  60CF D9          >                        exx
 96+  60D0 CB 11       >                        rl      c
 96+  60D2 17          >                        rla
 96+  60D3             >
 96+  60D3 D9          >                        exx
 96+  60D4 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  60D6 D9          >                        exx
 96+  60D7 ED 6A       >                        adc     hl,hl
 96+  60D9             >
 96+  60D9 D9          >                        exx
 96+  60DA ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  60DC D9          >                        exx
 96+  60DD ED 52       >                        sbc     hl,de
 96+  60DF 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  60E1             >
 96+  60E1 D9          >                        exx                  ;
 96+  60E2 19          >                        add     hl,de
 96+  60E3 D9          >                        exx
 96+  60E4 ED 5A       >                        adc     hl,de
 96+  60E6 3F          >.skip_loop:             ccf
 96+  60E7             > divu32smallloop
 96+  60E7             >
 96+  60E7 D9          >                        exx
 96+  60E8 CB 11       >                        rl      c                 ; bcbc << 1
 96+  60EA CB 10       >                        rl      b
 96+  60EC D9          >                        exx
 96+  60ED CB 11       >                        rl      c
 96+  60EF 17          >                        rla
 96+  60F0             >
 96+  60F0 D9          >                        exx
 96+  60F1 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  60F3 D9          >                        exx
 96+  60F4 ED 6A       >                        adc     hl,hl
 96+  60F6             >
 96+  60F6 D9          >                        exx
 96+  60F7 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  60F9 D9          >                        exx
 96+  60FA ED 52       >                        sbc     hl,de
 96+  60FC 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  60FE             >
 96+  60FE D9          >                        exx                  ;
 96+  60FF 19          >                        add     hl,de
 96+  6100 D9          >                        exx
 96+  6101 ED 5A       >                        adc     hl,de
 96+  6103 3F          >.skip_loop:             ccf
 96+  6104             > divu32smallloop
 96+  6104             >
 96+  6104 D9          >                        exx
 96+  6105 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6107 CB 10       >                        rl      b
 96+  6109 D9          >                        exx
 96+  610A CB 11       >                        rl      c
 96+  610C 17          >                        rla
 96+  610D             >
 96+  610D D9          >                        exx
 96+  610E ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6110 D9          >                        exx
 96+  6111 ED 6A       >                        adc     hl,hl
 96+  6113             >
 96+  6113 D9          >                        exx
 96+  6114 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6116 D9          >                        exx
 96+  6117 ED 52       >                        sbc     hl,de
 96+  6119 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  611B             >
 96+  611B D9          >                        exx                  ;
 96+  611C 19          >                        add     hl,de
 96+  611D D9          >                        exx
 96+  611E ED 5A       >                        adc     hl,de
 96+  6120 3F          >.skip_loop:             ccf
 96+  6121             > divu32smallloop
 96+  6121             >
 96+  6121 D9          >                        exx
 96+  6122 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6124 CB 10       >                        rl      b
 96+  6126 D9          >                        exx
 96+  6127 CB 11       >                        rl      c
 96+  6129 17          >                        rla
 96+  612A             >
 96+  612A D9          >                        exx
 96+  612B ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  612D D9          >                        exx
 96+  612E ED 6A       >                        adc     hl,hl
 96+  6130             >
 96+  6130 D9          >                        exx
 96+  6131 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6133 D9          >                        exx
 96+  6134 ED 52       >                        sbc     hl,de
 96+  6136 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6138             >
 96+  6138 D9          >                        exx                  ;
 96+  6139 19          >                        add     hl,de
 96+  613A D9          >                        exx
 96+  613B ED 5A       >                        adc     hl,de
 96+  613D 3F          >.skip_loop:             ccf
 96+  613E             > divu32smallloop
 96+  613E             >
 96+  613E D9          >                        exx
 96+  613F CB 11       >                        rl      c                 ; bcbc << 1
 96+  6141 CB 10       >                        rl      b
 96+  6143 D9          >                        exx
 96+  6144 CB 11       >                        rl      c
 96+  6146 17          >                        rla
 96+  6147             >
 96+  6147 D9          >                        exx
 96+  6148 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  614A D9          >                        exx
 96+  614B ED 6A       >                        adc     hl,hl
 96+  614D             >
 96+  614D D9          >                        exx
 96+  614E ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6150 D9          >                        exx
 96+  6151 ED 52       >                        sbc     hl,de
 96+  6153 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6155             >
 96+  6155 D9          >                        exx                  ;
 96+  6156 19          >                        add     hl,de
 96+  6157 D9          >                        exx
 96+  6158 ED 5A       >                        adc     hl,de
 96+  615A 3F          >.skip_loop:             ccf
 96+  615B             > divu32smallloop
 96+  615B             >
 96+  615B D9          >                        exx
 96+  615C CB 11       >                        rl      c                 ; bcbc << 1
 96+  615E CB 10       >                        rl      b
 96+  6160 D9          >                        exx
 96+  6161 CB 11       >                        rl      c
 96+  6163 17          >                        rla
 96+  6164             >
 96+  6164 D9          >                        exx
 96+  6165 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6167 D9          >                        exx
 96+  6168 ED 6A       >                        adc     hl,hl
 96+  616A             >
 96+  616A D9          >                        exx
 96+  616B ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  616D D9          >                        exx
 96+  616E ED 52       >                        sbc     hl,de
 96+  6170 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6172             >
 96+  6172 D9          >                        exx                  ;
 96+  6173 19          >                        add     hl,de
 96+  6174 D9          >                        exx
 96+  6175 ED 5A       >                        adc     hl,de
 96+  6177 3F          >.skip_loop:             ccf
 96+  6178             > divu32smallloop
 96+  6178             >
 96+  6178 D9          >                        exx
 96+  6179 CB 11       >                        rl      c                 ; bcbc << 1
 96+  617B CB 10       >                        rl      b
 96+  617D D9          >                        exx
 96+  617E CB 11       >                        rl      c
 96+  6180 17          >                        rla
 96+  6181             >
 96+  6181 D9          >                        exx
 96+  6182 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6184 D9          >                        exx
 96+  6185 ED 6A       >                        adc     hl,hl
 96+  6187             >
 96+  6187 D9          >                        exx
 96+  6188 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  618A D9          >                        exx
 96+  618B ED 52       >                        sbc     hl,de
 96+  618D 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  618F             >
 96+  618F D9          >                        exx                  ;
 96+  6190 19          >                        add     hl,de
 96+  6191 D9          >                        exx
 96+  6192 ED 5A       >                        adc     hl,de
 96+  6194 3F          >.skip_loop:             ccf
 96+  6195             > divu32smallloop
 96+  6195             >
 96+  6195 D9          >                        exx
 96+  6196 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6198 CB 10       >                        rl      b
 96+  619A D9          >                        exx
 96+  619B CB 11       >                        rl      c
 96+  619D 17          >                        rla
 96+  619E             >
 96+  619E D9          >                        exx
 96+  619F ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  61A1 D9          >                        exx
 96+  61A2 ED 6A       >                        adc     hl,hl
 96+  61A4             >
 96+  61A4 D9          >                        exx
 96+  61A5 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  61A7 D9          >                        exx
 96+  61A8 ED 52       >                        sbc     hl,de
 96+  61AA 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  61AC             >
 96+  61AC D9          >                        exx                  ;
 96+  61AD 19          >                        add     hl,de
 96+  61AE D9          >                        exx
 96+  61AF ED 5A       >                        adc     hl,de
 96+  61B1 3F          >.skip_loop:             ccf
 96+  61B2             > divu32smallloop
 96+  61B2             >
 96+  61B2 D9          >                        exx
 96+  61B3 CB 11       >                        rl      c                 ; bcbc << 1
 96+  61B5 CB 10       >                        rl      b
 96+  61B7 D9          >                        exx
 96+  61B8 CB 11       >                        rl      c
 96+  61BA 17          >                        rla
 96+  61BB             >
 96+  61BB D9          >                        exx
 96+  61BC ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  61BE D9          >                        exx
 96+  61BF ED 6A       >                        adc     hl,hl
 96+  61C1             >
 96+  61C1 D9          >                        exx
 96+  61C2 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  61C4 D9          >                        exx
 96+  61C5 ED 52       >                        sbc     hl,de
 96+  61C7 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  61C9             >
 96+  61C9 D9          >                        exx                  ;
 96+  61CA 19          >                        add     hl,de
 96+  61CB D9          >                        exx
 96+  61CC ED 5A       >                        adc     hl,de
 96+  61CE 3F          >.skip_loop:             ccf
 96+  61CF             > divu32smallloop
 96+  61CF             >
 96+  61CF D9          >                        exx
 96+  61D0 CB 11       >                        rl      c                 ; bcbc << 1
 96+  61D2 CB 10       >                        rl      b
 96+  61D4 D9          >                        exx
 96+  61D5 CB 11       >                        rl      c
 96+  61D7 17          >                        rla
 96+  61D8             >
 96+  61D8 D9          >                        exx
 96+  61D9 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  61DB D9          >                        exx
 96+  61DC ED 6A       >                        adc     hl,hl
 96+  61DE             >
 96+  61DE D9          >                        exx
 96+  61DF ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  61E1 D9          >                        exx
 96+  61E2 ED 52       >                        sbc     hl,de
 96+  61E4 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  61E6             >
 96+  61E6 D9          >                        exx                  ;
 96+  61E7 19          >                        add     hl,de
 96+  61E8 D9          >                        exx
 96+  61E9 ED 5A       >                        adc     hl,de
 96+  61EB 3F          >.skip_loop:             ccf
 96+  61EC             > divu32smallloop
 96+  61EC             >
 96+  61EC D9          >                        exx
 96+  61ED CB 11       >                        rl      c                 ; bcbc << 1
 96+  61EF CB 10       >                        rl      b
 96+  61F1 D9          >                        exx
 96+  61F2 CB 11       >                        rl      c
 96+  61F4 17          >                        rla
 96+  61F5             >
 96+  61F5 D9          >                        exx
 96+  61F6 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  61F8 D9          >                        exx
 96+  61F9 ED 6A       >                        adc     hl,hl
 96+  61FB             >
 96+  61FB D9          >                        exx
 96+  61FC ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  61FE D9          >                        exx
 96+  61FF ED 52       >                        sbc     hl,de
 96+  6201 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6203             >
 96+  6203 D9          >                        exx                  ;
 96+  6204 19          >                        add     hl,de
 96+  6205 D9          >                        exx
 96+  6206 ED 5A       >                        adc     hl,de
 96+  6208 3F          >.skip_loop:             ccf
 96+  6209             > divu32smallloop
 96+  6209             >
 96+  6209 D9          >                        exx
 96+  620A CB 11       >                        rl      c                 ; bcbc << 1
 96+  620C CB 10       >                        rl      b
 96+  620E D9          >                        exx
 96+  620F CB 11       >                        rl      c
 96+  6211 17          >                        rla
 96+  6212             >
 96+  6212 D9          >                        exx
 96+  6213 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6215 D9          >                        exx
 96+  6216 ED 6A       >                        adc     hl,hl
 96+  6218             >
 96+  6218 D9          >                        exx
 96+  6219 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  621B D9          >                        exx
 96+  621C ED 52       >                        sbc     hl,de
 96+  621E 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6220             >
 96+  6220 D9          >                        exx                  ;
 96+  6221 19          >                        add     hl,de
 96+  6222 D9          >                        exx
 96+  6223 ED 5A       >                        adc     hl,de
 96+  6225 3F          >.skip_loop:             ccf
 96+  6226             > divu32smallloop
 96+  6226             >
 96+  6226 D9          >                        exx
 96+  6227 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6229 CB 10       >                        rl      b
 96+  622B D9          >                        exx
 96+  622C CB 11       >                        rl      c
 96+  622E 17          >                        rla
 96+  622F             >
 96+  622F D9          >                        exx
 96+  6230 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6232 D9          >                        exx
 96+  6233 ED 6A       >                        adc     hl,hl
 96+  6235             >
 96+  6235 D9          >                        exx
 96+  6236 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6238 D9          >                        exx
 96+  6239 ED 52       >                        sbc     hl,de
 96+  623B 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  623D             >
 96+  623D D9          >                        exx                  ;
 96+  623E 19          >                        add     hl,de
 96+  623F D9          >                        exx
 96+  6240 ED 5A       >                        adc     hl,de
 96+  6242 3F          >.skip_loop:             ccf
 96+  6243             > divu32smallloop
 96+  6243             >
 96+  6243 D9          >                        exx
 96+  6244 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6246 CB 10       >                        rl      b
 96+  6248 D9          >                        exx
 96+  6249 CB 11       >                        rl      c
 96+  624B 17          >                        rla
 96+  624C             >
 96+  624C D9          >                        exx
 96+  624D ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  624F D9          >                        exx
 96+  6250 ED 6A       >                        adc     hl,hl
 96+  6252             >
 96+  6252 D9          >                        exx
 96+  6253 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6255 D9          >                        exx
 96+  6256 ED 52       >                        sbc     hl,de
 96+  6258 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  625A             >
 96+  625A D9          >                        exx                  ;
 96+  625B 19          >                        add     hl,de
 96+  625C D9          >                        exx
 96+  625D ED 5A       >                        adc     hl,de
 96+  625F 3F          >.skip_loop:             ccf
 96+  6260             > divu32smallloop
 96+  6260             >
 96+  6260 D9          >                        exx
 96+  6261 CB 11       >                        rl      c                 ; bcbc << 1
 96+  6263 CB 10       >                        rl      b
 96+  6265 D9          >                        exx
 96+  6266 CB 11       >                        rl      c
 96+  6268 17          >                        rla
 96+  6269             >
 96+  6269 D9          >                        exx
 96+  626A ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  626C D9          >                        exx
 96+  626D ED 6A       >                        adc     hl,hl
 96+  626F             >
 96+  626F D9          >                        exx
 96+  6270 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6272 D9          >                        exx
 96+  6273 ED 52       >                        sbc     hl,de
 96+  6275 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6277             >
 96+  6277 D9          >                        exx                  ;
 96+  6278 19          >                        add     hl,de
 96+  6279 D9          >                        exx
 96+  627A ED 5A       >                        adc     hl,de
 96+  627C 3F          >.skip_loop:             ccf
 96+  627D             > divu32smallloop
 96+  627D             >
 96+  627D D9          >                        exx
 96+  627E CB 11       >                        rl      c                 ; bcbc << 1
 96+  6280 CB 10       >                        rl      b
 96+  6282 D9          >                        exx
 96+  6283 CB 11       >                        rl      c
 96+  6285 17          >                        rla
 96+  6286             >
 96+  6286 D9          >                        exx
 96+  6287 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  6289 D9          >                        exx
 96+  628A ED 6A       >                        adc     hl,hl
 96+  628C             >
 96+  628C D9          >                        exx
 96+  628D ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  628F D9          >                        exx
 96+  6290 ED 52       >                        sbc     hl,de
 96+  6292 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6294             >
 96+  6294 D9          >                        exx                  ;
 96+  6295 19          >                        add     hl,de
 96+  6296 D9          >                        exx
 96+  6297 ED 5A       >                        adc     hl,de
 96+  6299 3F          >.skip_loop:             ccf
 96+  629A             > divu32smallloop
 96+  629A             >
 96+  629A D9          >                        exx
 96+  629B CB 11       >                        rl      c                 ; bcbc << 1
 96+  629D CB 10       >                        rl      b
 96+  629F D9          >                        exx
 96+  62A0 CB 11       >                        rl      c
 96+  62A2 17          >                        rla
 96+  62A3             >
 96+  62A3 D9          >                        exx
 96+  62A4 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  62A6 D9          >                        exx
 96+  62A7 ED 6A       >                        adc     hl,hl
 96+  62A9             >
 96+  62A9 D9          >                        exx
 96+  62AA ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  62AC D9          >                        exx
 96+  62AD ED 52       >                        sbc     hl,de
 96+  62AF 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  62B1             >
 96+  62B1 D9          >                        exx                  ;
 96+  62B2 19          >                        add     hl,de
 96+  62B3 D9          >                        exx
 96+  62B4 ED 5A       >                        adc     hl,de
 96+  62B6 3F          >.skip_loop:             ccf
 96+  62B7             > divu32smallloop
 96+  62B7             >
 96+  62B7 D9          >                        exx
 96+  62B8 CB 11       >                        rl      c                 ; bcbc << 1
 96+  62BA CB 10       >                        rl      b
 96+  62BC D9          >                        exx
 96+  62BD CB 11       >                        rl      c
 96+  62BF 17          >                        rla
 96+  62C0             >
 96+  62C0 D9          >                        exx
 96+  62C1 ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  62C3 D9          >                        exx
 96+  62C4 ED 6A       >                        adc     hl,hl
 96+  62C6             >
 96+  62C6 D9          >                        exx
 96+  62C7 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  62C9 D9          >                        exx
 96+  62CA ED 52       >                        sbc     hl,de
 96+  62CC 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  62CE             >
 96+  62CE D9          >                        exx                  ;
 96+  62CF 19          >                        add     hl,de
 96+  62D0 D9          >                        exx
 96+  62D1 ED 5A       >                        adc     hl,de
 96+  62D3 3F          >.skip_loop:             ccf
 96+  62D4             > divu32smallloop
 96+  62D4             >
 96+  62D4 D9          >                        exx
 96+  62D5 CB 11       >                        rl      c                 ; bcbc << 1
 96+  62D7 CB 10       >                        rl      b
 96+  62D9 D9          >                        exx
 96+  62DA CB 11       >                        rl      c
 96+  62DC 17          >                        rla
 96+  62DD             >
 96+  62DD D9          >                        exx
 96+  62DE ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  62E0 D9          >                        exx
 96+  62E1 ED 6A       >                        adc     hl,hl
 96+  62E3             >
 96+  62E3 D9          >                        exx
 96+  62E4 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  62E6 D9          >                        exx
 96+  62E7 ED 52       >                        sbc     hl,de
 96+  62E9 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  62EB             >
 96+  62EB D9          >                        exx                  ;
 96+  62EC 19          >                        add     hl,de
 96+  62ED D9          >                        exx
 96+  62EE ED 5A       >                        adc     hl,de
 96+  62F0 3F          >.skip_loop:             ccf
 96+  62F1             > divu32smallloop
 96+  62F1             >
 96+  62F1 D9          >                        exx
 96+  62F2 CB 11       >                        rl      c                 ; bcbc << 1
 96+  62F4 CB 10       >                        rl      b
 96+  62F6 D9          >                        exx
 96+  62F7 CB 11       >                        rl      c
 96+  62F9 17          >                        rla
 96+  62FA             >
 96+  62FA D9          >                        exx
 96+  62FB ED 6A       >                        adc     hl,hl            ; hlhl << 1
 96+  62FD D9          >                        exx
 96+  62FE ED 6A       >                        adc     hl,hl
 96+  6300             >
 96+  6300 D9          >                        exx
 96+  6301 ED 52       >                        sbc     hl,de            ; if hlhl > dede
 96+  6303 D9          >                        exx
 96+  6304 ED 52       >                        sbc     hl,de
 96+  6306 30 05       >                        jr nc,  .skip_loop        ;   hlhl -= dede
 96+  6308             >
 96+  6308 D9          >                        exx                  ;
 96+  6309 19          >                        add     hl,de
 96+  630A D9          >                        exx
 96+  630B ED 5A       >                        adc     hl,de
 96+  630D 3F          >.skip_loop:             ccf
 97+  630E
 98+  630E D9                                   exx
 99+  630F CB 11                                rl c
100+  6311 CB 10                                rl b
101+  6313 D9                                   exx
102+  6314 CB 11                                rl c
103+  6316 17                                   rla
104+  6317
105+  6317                 ; quotient  = acbc'
106+  6317                 ; remainder = hlhl'
107+  6317
108+  6317 E5                                   push    hl
109+  6318 D9                                   exx
110+  6319 D1                                   pop     de
111+  631A C5                                   push    bc
112+  631B D9                                   exx
113+  631C E1                                   pop     hl
114+  631D 59                                   ld      e,c
115+  631E 57                                   ld      d,a
116+  631F
117+  631F C9                                   ret
118+  6320
119+  6320
120+  6320              divide_by_zero:
121+  6320
122+  6320                                  SetCarryFlag
122+  6320 37          >                        scf
123+  6321 C9                               ret
124+  6322
# file closed: asm_divide24.asm
216   6322
217   6322
218   6322
219   6322
220   6322                  SAVENEX OPEN "d24test.nex", EliteNextStartup , TopOfStack
221   6322                  SAVENEX CFG  0,0,0,1
222   6322                  SAVENEX AUTO
223   6322                  SAVENEX CLOSE
224   6322
225   6322
# file closed: d24test.asm
