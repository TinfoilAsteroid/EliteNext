# file opened: mathslogs.asm
  1   0000                                      DEVICE ZXSPECTRUMNEXT
  2   0000                                      DEFINE  DOUBLEBUFFER 1
  3   0000                                      CSPECTMAP mathslogs.map
  4   0000                                      OPT --zxnext=cspect --syntax=a --reversepop
  5   0000                                      INCLUDE "../Macros/carryFlagMacros.asm"
# file opened: ../Macros/carryFlagMacros.asm
  1+  0000
  2+  0000              SetCarryFlag:           MACRO
  3+  0000 ~                                    scf
  4+  0000                                      ENDM
  5+  0000
  6+  0000              ClearCarryFlag:	        MACRO
  7+  0000 ~                                    or a
  8+  0000                                      ENDM
  9+  0000
 10+  0000              FlipCarryFlag:          MACRO
 11+  0000 ~                                    ccf
 12+  0000                                      ENDM
 13+  0000
# file closed: ../Macros/carryFlagMacros.asm
  6   0000                                      INCLUDE "../Macros/jumpMacros.asm"
# file opened: ../Macros/jumpMacros.asm
  1+  0000              JumpIfPositive:	        MACRO target
  2+  0000 ~                                    jp		p, target
  3+  0000                                      ENDM
  4+  0000
  5+  0000              JumpIfNegative:	        MACRO target
  6+  0000 ~                                    jp		m, target
  7+  0000                                      ENDM
  8+  0000
  9+  0000
 10+  0000              JumpIfUnderflow:	    MACRO target
 11+  0000 ~                                    jp		po, target
 12+  0000                                      ENDM
 13+  0000
 14+  0000              JumpIfOverflow:	        MACRO target
 15+  0000 ~                                    jp		po, target
 16+  0000                                      ENDM
 17+  0000
 18+  0000
 19+  0000              JumpIfNotZero:	        MACRO target
 20+  0000 ~                                    jp	nz,target
 21+  0000                                      ENDM
 22+  0000
 23+  0000              JumpIfZero:	            MACRO target
 24+  0000 ~                                    jp	z,target
 25+  0000                                      ENDM
 26+  0000
 27+  0000              ;.. Bit routines
 28+  0000              JumpOnLeadSignSet:      MACRO   reg, target
 29+  0000 ~                                    ld      a,reg
 30+  0000 ~                                    and     SignOnly8Bit
 31+  0000 ~                                    jp      nz,target
 32+  0000                                      ENDM
 33+  0000
 34+  0000              JumpOnLeadSignClear:    MACRO   reg, target
 35+  0000 ~                                    ld      a,reg
 36+  0000 ~                                    and     SignOnly8Bit
 37+  0000 ~                                    jp      z,target
 38+  0000                                      ENDM
 39+  0000
 40+  0000              JumpOnLeadSignSetA:     MACRO   target
 41+  0000 ~                                    and     SignOnly8Bit
 42+  0000 ~                                    jp      nz,target
 43+  0000                                      ENDM
 44+  0000
 45+  0000              JumpOnLeadSignClearA:   MACRO   target
 46+  0000 ~                                    and     SignOnly8Bit
 47+  0000 ~                                    jp      z,target
 48+  0000                                      ENDM
 49+  0000
 50+  0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
 51+  0000 ~                                    ld      a,(mem)
 52+  0000 ~                                    bit 	bitnbr,a
 53+  0000 ~                                    jp      nz,target
 54+  0000                                      ENDM
 55+  0000
 56+  0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
 57+  0000 ~                                    ld      a,(mem)
 58+  0000 ~                                    bit 	bitnbr,a
 59+  0000 ~                                    jp      z,target
 60+  0000                                      ENDM
 61+  0000
 62+  0000
 63+  0000              JumpOnABitSet:          MACRO   bitnbr, target
 64+  0000 ~                                    bit 	bitnbr, a
 65+  0000 ~                                    jp      nz,target
 66+  0000                                      ENDM
 67+  0000
 68+  0000              JumpOnABitClear:        MACRO   bitnbr, target
 69+  0000 ~                                    bit 	bitnbr, a
 70+  0000 ~                                    jp      z,target
 71+  0000                                      ENDM
 72+  0000
 73+  0000              JumpOnABit5Set:         MACRO   target
 74+  0000 ~                                    and     Bit5Only
 75+  0000 ~                                    jp      nz,target
 76+  0000                                      ENDM
 77+  0000
 78+  0000              JumpOnABit5Clear:       MACRO   target
 79+  0000 ~                                    and     Bit5Only
 80+  0000 ~                                    jp      z,target
 81+  0000                                      ENDM
 82+  0000
 83+  0000              JumpOnBitMaskSet:       MACRO   bitmask, target
 84+  0000 ~                                    and     bitmask
 85+  0000 ~                                    jp      nz,target
 86+  0000                                      ENDM
 87+  0000
 88+  0000              JumpOnBitMaskClear:     MACRO   bitmask, target
 89+  0000 ~                                    and     bitmask
 90+  0000 ~                                    jp      z,target
 91+  0000                                      ENDM
 92+  0000
 93+  0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
 94+  0000 ~                                    ld      a,(mem)
 95+  0000 ~                                    and     bitmask
 96+  0000 ~                                    jp      nz,target
 97+  0000                                      ENDM
 98+  0000
 99+  0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
100+  0000 ~                                    ld      a,(mem)
101+  0000 ~                                    and     bitmask
102+  0000 ~                                    jp      z,target
103+  0000                                      ENDM
104+  0000
105+  0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
106+  0000 ~                                    bit 	bitnbr,reg
107+  0000 ~                                    jp      nz,target
108+  0000                                      ENDM
109+  0000
110+  0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
111+  0000 ~                                    bit 	bitnbr,reg
112+  0000 ~                                    jp      z,target
113+  0000                                      ENDM
114+  0000
115+  0000              ; Comparison Routines
116+  0000              JumpIfAGTEusng:         MACRO
117+  0000 ~                                    jp		nc,target
118+  0000                                      ENDM
119+  0000
120+  0000              JumpIfAGTENusng:        MACRO reg,target
121+  0000 ~                                    cp     reg
122+  0000 ~                                    jp		nc,target
123+  0000                                      ENDM
124+  0000
125+  0000              JumpIfAGTEMemusng:      MACRO mem,target
126+  0000 ~                                    ld      hl,mem
127+  0000 ~                                    cp      (hl)
128+  0000 ~                                    jp		nc,target
129+  0000                                      ENDM
130+  0000
131+  0000              JumpIfALTMemusng:       MACRO mem,target
132+  0000 ~                                    ld      hl,mem
133+  0000 ~                                    cp      (hl)
134+  0000 ~                                    jp		c,target
135+  0000                                      ENDM
136+  0000
137+  0000              JumpIfMemGTENusng:      MACRO mem, value, target
138+  0000 ~                                    ld     a,(mem)
139+  0000 ~                                    cp     value
140+  0000 ~                                    jp	  nc,target
141+  0000                                      ENDM
142+  0000
143+  0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
144+  0000 ~                                    ld   a,(mem)
145+  0000 ~                                    ld   hl,address
146+  0000 ~                                    cp   (hl)
147+  0000 ~                                    jp	  nc,target
148+  0000                                      ENDM
149+  0000
150+  0000              JumpIfMemEqMemusng:     MACRO mem, address, target
151+  0000 ~                                    ld   a,(mem)
152+  0000 ~                                    ld   hl,address
153+  0000 ~                                    cp   (hl)
154+  0000 ~                                    jp	  z,target
155+  0000                                      ENDM
156+  0000
157+  0000              JumpIfMemNeMemusng:     MACRO mem, address, target
158+  0000 ~                                    ld   a,(mem)
159+  0000 ~                                    ld   hl,address
160+  0000 ~                                    cp   (hl)
161+  0000 ~                                    jp	  nz,target
162+  0000                                      ENDM
163+  0000
164+  0000              JumpIfMemTrue:          MACRO mem, target
165+  0000 ~                                    ld      a,(mem)
166+  0000 ~                                    and     a
167+  0000 ~                                    jp      z, target
168+  0000                                      ENDM
169+  0000
170+  0000              JumpIfMemFalse:         MACRO mem, target
171+  0000 ~                                    ld      a,(mem)
172+  0000 ~                                    and     a
173+  0000 ~                                    jp      nz, target
174+  0000                                      ENDM
175+  0000
176+  0000              JumpIfATrue:            MACRO target
177+  0000 ~                                    and     a
178+  0000 ~                                    jp      z, target
179+  0000                                      ENDM
180+  0000
181+  0000              JumpIfAFalse:           MACRO target
182+  0000 ~                                    and     a
183+  0000 ~                                    jp      nz, target
184+  0000                                      ENDM
185+  0000
186+  0000              JumpIfALTusng:          MACRO target
187+  0000 ~                                    jp		c,target
188+  0000                                      ENDM
189+  0000
190+  0000              JumpIfALTNusng:         MACRO value, target
191+  0000 ~                                    cp      value
192+  0000 ~                                    jp		c, target
193+  0000                                      ENDM
194+  0000
195+  0000              JumpIfMemLTNusng:       MACRO mem, value, target
196+  0000 ~                                    ld      a,(mem)
197+  0000 ~                                    cp      value
198+  0000 ~                                    jp	  c,target
199+  0000                                      ENDM
200+  0000
201+  0000              JumpIfMemLTMemusng:     MACRO mem, value, target
202+  0000 ~                                    ld    a,(mem)
203+  0000 ~                                    ld    hl,value
204+  0000 ~                                    cp    (hl)
205+  0000 ~                                    jp	  c,target
206+  0000                                      ENDM
207+  0000
208+  0000              JumpIfMemEqNusng:       MACRO mem,value,target
209+  0000 ~                                    ld  a,(mem)
210+  0000 ~                                    cp  value
211+  0000 ~                                    jp  z,target
212+  0000                                      ENDM
213+  0000
214+  0000              JumpIfMemNeNusng:       MACRO mem,value,target
215+  0000 ~                                    ld  a,(mem)
216+  0000 ~                                    cp  value
217+  0000 ~                                    jp  nz,target
218+  0000                                      ENDM
219+  0000
220+  0000              JumpIfMemZero:          MACRO mem,target
221+  0000 ~                                    ld  a,(mem)
222+  0000 ~                                    and a
223+  0000 ~                                    jp  z,target
224+  0000                                      ENDM
225+  0000
226+  0000              JumpIfMemNotZero:       MACRO mem,target
227+  0000 ~                                    ld  a,(mem)
228+  0000 ~                                    and a
229+  0000 ~                                    jp  nz,target
230+  0000                                      ENDM
231+  0000
232+  0000              JumpIfALTMemHLusng:     MACRO target
233+  0000 ~                                    cp    (hl)
234+  0000 ~                                    jp	  c,target
235+  0000                                      ENDM
236+  0000
237+  0000              JumpIfANENusng:         MACRO value, target
238+  0000 ~                                    cp     value
239+  0000 ~                                    jp      nz,target
240+  0000                                      ENDM
241+  0000
242+  0000              JumpIfANEquNusng:       MACRO value, target
243+  0000 ~                                    cp     value
244+  0000 ~                                    jp     z,target
245+  0000                                      ENDM
246+  0000
247+  0000              JumpIfANEMemusng:       MACRO  value, target
248+  0000 ~                                    ld    hl,value
249+  0000 ~                                    cp    (hl)
250+  0000 ~                                    jp      nz,target
251+  0000                                      ENDM
252+  0000
253+  0000              JumpIfAEqNusng:         MACRO value, target
254+  0000 ~                                    cp     value
255+  0000 ~                                    jp      z,target
256+  0000                                      ENDM
257+  0000
258+  0000              JumpIfAIsZero:	        MACRO target
259+  0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
260+  0000 ~                                    jp	    z, target
261+  0000                                      ENDM
262+  0000
263+  0000              JumpIfRegIsNotZero:     MACRO   reg, target
264+  0000 ~                                    ld      a,reg
265+  0000 ~                                    and     a
266+  0000 ~                                    jp	    nz,target
267+  0000                                      ENDM
268+  0000
269+  0000              JumpIfAIsNotZero:       MACRO target
270+  0000 ~                                    and     a
271+  0000 ~                                    jp	    nz,target
272+  0000                                      ENDM
273+  0000
274+  0000              IfResultZeroGoto:	    MACRO target
275+  0000 ~                                    jp	z,target
276+  0000                                      ENDM
277+  0000
278+  0000              IfResultNotZeroGoto:    MACRO target
279+  0000 ~                                    jp	nz,target
280+  0000                                      ENDM
281+  0000
# file closed: ../Macros/jumpMacros.asm
  7   0000                                      INCLUDE "../Macros/ldCopyMacros.asm"
# file opened: ../Macros/ldCopyMacros.asm
  1+  0000              ZeroA:		            MACRO
  2+  0000 ~                                    xor a
  3+  0000                                      ENDM
  4+  0000
  5+  0000              SetATrue:               MACRO
  6+  0000 ~                                    xor     a
  7+  0000                                      ENDM
  8+  0000
  9+  0000              SetAFalse:              MACRO
 10+  0000 ~                                    ld      a,$FF
 11+  0000                                      ENDM
 12+  0000
 13+  0000              SetMemFalse             MACRO   mem
 14+  0000 ~                                    ld      a,$FF
 15+  0000 ~                                    ld      (mem),a
 16+  0000                                      ENDM
 17+  0000
 18+  0000              SetMemTrue              MACRO   mem
 19+  0000 ~                                    xor     a
 20+  0000 ~                                    ld      (mem),a
 21+  0000                                      ENDM
 22+  0000
 23+  0000              SetMemToN:              MACRO   mem,value
 24+  0000 ~                                    ld      a,value
 25+  0000 ~                                    ld      (mem),a
 26+  0000                                      ENDM
 27+  0000
 28+  0000              ldCopyStringLen:        MACRO   source, target, strlen
 29+  0000 ~                                    ld      hl,source
 30+  0000 ~                                    ld      de, target
 31+  0000 ~                                    ld      bc, strlen
 32+  0000 ~                                    ldir
 33+  0000                                      ENDM
 34+  0000
 35+  0000              ldCopyTextAtHLtoDE:     MACRO
 36+  0000 ~            .CopyLoop:              ld      a,(hl)
 37+  0000 ~                                    ld      (de),a
 38+  0000 ~                                    cp      0
 39+  0000 ~                                    jp      z,.DoneCopy
 40+  0000 ~                                    inc     hl
 41+  0000 ~                                    inc     de
 42+  0000 ~                                    jr      .CopyLoop
 43+  0000 ~            .DoneCopy:
 44+  0000                                      ENDM
 45+  0000
 46+  0000              ldClearTextLoop:        MACRO   TextSize
 47+  0000 ~                                    ld      b,a
 48+  0000 ~                                    ld      a,TextSize
 49+  0000 ~            .ClearLoop:             ld      (hl),a
 50+  0000 ~                                    inc     hl
 51+  0000 ~                                    djnz    .ClearLoop
 52+  0000                                      ENDM
 53+  0000
 54+  0000              ldCopyByte:             MACRO memfrom, memto
 55+  0000 ~                                    ld       a,(memfrom)
 56+  0000 ~                                    ld       (memto),a
 57+  0000                                      ENDM
 58+  0000
 59+  0000
 60+  0000              ldCopyByteABS:          MACRO memfrom, memto
 61+  0000 ~                                    ld       a,(memfrom)
 62+  0000 ~                                    and		$7F
 63+  0000 ~                                    ld       (memto),a
 64+  0000                                      ENDM
 65+  0000
 66+  0000              ldAtHLtoMem:            MACRO   memto
 67+  0000 ~                                    ld      a,(hl)
 68+  0000 ~                                    ld      (memto),a
 69+  0000                                      ENDM
 70+  0000
 71+  0000              ldCopy2Byte             MACRO  memfrom, memto
 72+  0000 ~                                    ld       hl,(memfrom)
 73+  0000 ~                                    ld       (memto),hl
 74+  0000                                      ENDM
 75+  0000
 76+  0000              ldWriteConst            MACRO  memfrom, memto
 77+  0000 ~                                    ld       a,memfrom
 78+  0000 ~                                    ld       (memto),a
 79+  0000                                      ENDM
 80+  0000
 81+  0000              ldWriteZero             MACRO  memto
 82+  0000 ~                                    xor      a
 83+  0000 ~                                    ld       (memto),a
 84+  0000                                      ENDM
 85+  0000
 86+  0000              ldIXLaFromN:	        MACRO memfrom
 87+  0000 ~                                    ld		a,(memfrom)
 88+  0000 ~                                    ld		ixl,a
 89+  0000                                      ENDM
 90+  0000
 91+  0000              ldIXHaFromN:	        MACRO memfrom
 92+  0000 ~                                    ld		a,(memfrom)
 93+  0000 ~                                    ld		ixh,a
 94+  0000                                      ENDM
 95+  0000
 96+  0000              ldIYLaFromN:	        MACRO memfrom
 97+  0000 ~                                    ld		a,(memfrom)
 98+  0000 ~                                    ld		iyl,a
 99+  0000                                      ENDM
100+  0000
101+  0000              ldIYHaFromN:	        MACRO memfrom
102+  0000 ~                                    ld		a,(memfrom)
103+  0000 ~                                    ld		iyh,a
104+  0000                                      ENDM
105+  0000
106+  0000              ldhlde:			        MACRO
107+  0000 ~                                    ld		h,d
108+  0000 ~                                    ld		l,e
109+  0000                                      ENDM
110+  0000
111+  0000              ldhlbc:			        MACRO
112+  0000 ~                                    ld		h,b
113+  0000 ~                                    ld		l,c
114+  0000                                      ENDM
115+  0000
116+  0000              ldbcde:			        MACRO
117+  0000 ~                                    ld		b,d
118+  0000 ~                                    ld		c,e
119+  0000                                      ENDM
120+  0000
121+  0000              lddebc:			        MACRO
122+  0000 ~                                    ld		d,b
123+  0000 ~                                    ld		e,c
124+  0000                                      ENDM
125+  0000
126+  0000              ldbchl:			        MACRO
127+  0000 ~                                    ld		b,h
128+  0000 ~                                    ld		c,l
129+  0000                                      ENDM
130+  0000
131+  0000              lddeiy:			        MACRO
132+  0000 ~                                    ld		d,iyh
133+  0000 ~                                    ld		e,iyl
134+  0000                                      ENDM
135+  0000
136+  0000              ldiyde:			        MACRO
137+  0000 ~                                    ld		iyh,d
138+  0000 ~                                    ld		iyl,e
139+  0000                                      ENDM
140+  0000
141+  0000
142+  0000              FourLDIInstrunctions:   MACRO
143+  0000 ~                                    ldi
144+  0000 ~                                    ldi
145+  0000 ~                                    ldi
146+  0000 ~                                    ldi
147+  0000                                      ENDM
148+  0000
149+  0000              FiveLDIInstrunctions:   MACRO
150+  0000 ~                                    ldi
151+  0000 ~                                    ldi
152+  0000 ~                                    ldi
153+  0000 ~                                    ldi
154+  0000 ~                                    ldi
155+  0000                                      ENDM
156+  0000
157+  0000              SixLDIInstrunctions:    MACRO
158+  0000 ~                                    ldi
159+  0000 ~                                    ldi
160+  0000 ~                                    ldi
161+  0000 ~                                    ldi
162+  0000 ~                                    ldi
163+  0000 ~                                    ldi
164+  0000                                      ENDM
165+  0000
166+  0000              EightLDIInstrunctions:  MACRO
167+  0000 ~            		                ldi
168+  0000 ~            		                ldi
169+  0000 ~            		                ldi
170+  0000 ~            		                ldi
171+  0000 ~            		                ldi
172+  0000 ~            		                ldi
173+  0000 ~            		                ldi
174+  0000 ~            		                ldi
175+  0000                                      ENDM
176+  0000
177+  0000              NineLDIInstrunctions:  MACRO
178+  0000 ~            		                ldi
179+  0000 ~            		                ldi
180+  0000 ~            		                ldi
181+  0000 ~            		                ldi
182+  0000 ~            		                ldi
183+  0000 ~            		                ldi
184+  0000 ~            		                ldi
185+  0000 ~            		                ldi
186+  0000 ~            		                ldi
187+  0000                                      ENDM
# file closed: ../Macros/ldCopyMacros.asm
  8   0000                                      INCLUDE "../Macros/ShiftMacros.asm"
# file opened: ../Macros/ShiftMacros.asm
  1+  0000              ShiftIYRight1: MACRO
  2+  0000 ~            			   ld 	a,iyh
  3+  0000 ~            			   srl 	a
  4+  0000 ~            			   ld	iyh,a
  5+  0000 ~            			   ld 	a,iyl
  6+  0000 ~            			   rra
  7+  0000 ~            			   ld	iyl,a
  8+  0000              			   ENDM
  9+  0000
 10+  0000              ShiftHLRight1: MACRO
 11+  0000 ~            			   srl h
 12+  0000 ~            			   rr  l
 13+  0000              			   ENDM
 14+  0000
 15+  0000              ShiftDERight1: MACRO
 16+  0000 ~            			   srl d
 17+  0000 ~            			   rr  e
 18+  0000              			   ENDM
 19+  0000
 20+  0000              ShiftBCRight1: MACRO
 21+  0000 ~            			   srl b
 22+  0000 ~            			   rr  c
 23+  0000              			   ENDM
 24+  0000
 25+  0000
 26+  0000
 27+  0000              ShiftHLDiv8:   MACRO
 28+  0000 ~            			   srl h
 29+  0000 ~            			   rr  l
 30+  0000 ~            			   srl h
 31+  0000 ~            			   rr  l
 32+  0000 ~            			   srl h
 33+  0000 ~            			   rr  l
 34+  0000              			   ENDM
 35+  0000
 36+  0000              ShiftHLLeft1:  MACRO
 37+  0000 ~            			   sla l
 38+  0000 ~            			   rl  h
 39+  0000              			   ENDM
 40+  0000
 41+  0000              ShiftDELeft1:  MACRO
 42+  0000 ~            			   sla e
 43+  0000 ~            			   rl  d
 44+  0000              			   ENDM
 45+  0000
 46+  0000
 47+  0000              RollDELeft1:   MACRO
 48+  0000 ~                           rl  e
 49+  0000 ~                           rl  d
 50+  0000                             ENDM
 51+  0000
 52+  0000              ShiftBCLeft1:  MACRO
 53+  0000 ~            			   sla c
 54+  0000 ~            			   rl  b
 55+  0000              			   ENDM
 56+  0000
 57+  0000
 58+  0000              ShiftMem16Right1:   MACRO memaddr
 59+  0000 ~                                ld    hl,(memaddr)
 60+  0000 ~                                srl   h
 61+  0000 ~                                rr    l
 62+  0000 ~                                ld    (memaddr),hl
 63+  0000                                  ENDM
 64+  0000
 65+  0000              ShiftMem8Right1:    MACRO memaddr
 66+  0000 ~                                ld      a,(memaddr)
 67+  0000 ~                                srl     a
 68+  0000 ~                                ld      (memaddr),a
 69+  0000                                  ENDM
 70+  0000
 71+  0000
 72+  0000              ShiftMem8Left1A:    MACRO memaddr
 73+  0000 ~                                ld      a,(memaddr)
 74+  0000 ~                                sla     a
 75+  0000 ~                                ld      (memaddr),a
 76+  0000                                  ENDM
 77+  0000
# file closed: ../Macros/ShiftMacros.asm
  9   0000                                      INCLUDE "../Macros/NegateMacros.asm"
# file opened: ../Macros/NegateMacros.asm
  1+  0000
  2+  0000              NegIY:			    MACRO
  3+  0000 ~                                xor a
  4+  0000 ~                                sub iyl
  5+  0000 ~                                ld iyl,a
  6+  0000 ~                                sbc a,a
  7+  0000 ~                                sub iyh
  8+  0000 ~                                ld iyh,a
  9+  0000                                  ENDM
 10+  0000
 11+  0000              NegHL:			    MACRO
 12+  0000 ~                                xor a
 13+  0000 ~                                sub l
 14+  0000 ~                                ld l,a
 15+  0000 ~                                sbc a,a
 16+  0000 ~                                sub h
 17+  0000 ~                                ld h,a
 18+  0000                                  ENDM
 19+  0000
 20+  0000              NegDE:			    MACRO
 21+  0000 ~                                xor a
 22+  0000 ~                                sub e
 23+  0000 ~                                ld e,a
 24+  0000 ~                                sbc a,a
 25+  0000 ~                                sub d
 26+  0000 ~                                ld d,a
 27+  0000                                  ENDM
 28+  0000
 29+  0000              NegBC:			    MACRO
 30+  0000 ~                                xor a
 31+  0000 ~                                sub c
 32+  0000 ~                                ld c,a
 33+  0000 ~                                sbc a,a
 34+  0000 ~                                sub  b
 35+  0000 ~                                ld b,a
 36+  0000                                  ENDM
 37+  0000
 38+  0000              NegH                MACRO
 39+  0000 ~                                ld      a,h
 40+  0000 ~                                neg
 41+  0000 ~                                ld      h,a
 42+  0000                                  ENDM
 43+  0000
 44+  0000              NegD                MACRO
 45+  0000 ~                                ld      a,d
 46+  0000 ~                                neg
 47+  0000 ~                                ld      d,a
 48+  0000                                  ENDM
 49+  0000
 50+  0000              NegB                MACRO
 51+  0000 ~                                ld      a,b
 52+  0000 ~                                neg
 53+  0000 ~                                ld      b,a
 54+  0000                                  ENDM
 55+  0000
# file closed: ../Macros/NegateMacros.asm
 10   0000
 11   0000              testStartup:            ORG         $8000
 12   8000
 13   8000 DD 21 AF 8F                          ld      ix, TestCase1
 14   8004 3A 01 90     .TestLoop:              ld      a,(testCounter)
 15   8007 21 FF 8F                             ld      hl, testTotal
 16   800A BE                                   cp      (hl)
 17   800B 28 36                                jr      z,.Done1
 18   800D DD 7E 01                             ld      a,(ix+testCase.QVal)
 19   8010 47                                   ld      b,a
 20   8011 DD 7E 00                             ld      a,(ix+testCase.AVal)
 21   8014                                      JumpIfALTNusng 197, .LTCalc
 21   8014 FE C5       >                        cp      197
 21   8016 DA 27 80    >                        jp		c, .LTCalc
 22   8019 5F           .GTCalc:                ld      e,a
 23   801A CD 6F 87                             call    AEquAmul256Div197Log
 24   801D DD 77 02                             ld      (ix+testCase.Result),a
 25   8020 AF                                   xor     a
 26   8021 DD 77 03                             ld      (ix+testCase.Expected),a
 27   8024 C3 32 80                             jp      .NextIteration
 28   8027 5F           .LTCalc:                ld      e,a
 29   8028 CD 4C 87                             call    AEquAmul256Div197LogLT
 30   802B DD 77 03                             ld      (ix+testCase.Expected),a
 31   802E AF                                   xor      a
 32   802F DD 77 02                             ld      (ix+testCase.Result),a
 33   8032 21 01 90     .NextIteration:         ld      hl,testCounter
 34   8035 34                                   inc     (hl)
 35   8036 DD E5                                push    ix
 36   8038 E1                                   pop     hl
 37   8039 3E 04                                ld      a,4
 38   803B ED 31                                add     hl,a
 39   803D E5                                   push    hl
 40   803E DD E1                                pop     ix
 41   8040 C3 04 80                             jp      .TestLoop
 42   8043 DD 21 D3 8F  .Done1:                 ld      ix, TestCase10
 43   8047 AF                                   xor     a
 44   8048 32 01 90                             ld      (testCounter),a
 45   804B 3A 01 90     .TestLoop2:             ld      a,(testCounter)
 46   804E 21 00 90                             ld      hl, testTotal2
 47   8051 BE                                   cp      (hl)
 48   8052 28 35                                jr      z,.Done
 49   8054 DD 7E 01                             ld      a,(ix+testCase.QVal)
 50   8057 47                                   ld      b,a
 51   8058 DD 7E 00                             ld      a,(ix+testCase.AVal)
 52   805B                                      JumpIfALTNusng b, .LTCalc2
 52   805B B8          >                        cp      b
 52   805C DA 6D 80    >                        jp		c, .LTCalc2
 53   805F 5F           .GTCalc2:               ld      e,a
 54   8060 CD 13 87                             call    AEquAmul256DivBLog
 55   8063 DD 77 02                             ld      (ix+testCase.Result),a
 56   8066 AF                                   xor     a
 57   8067 DD 77 03                             ld      (ix+testCase.Expected),a
 58   806A C3 78 80                             jp      .NextIteration2
 59   806D 5F           .LTCalc2:               ld      e,a
 60   806E CD E7 86                             call    AEquAmul256DivBLogLT
 61   8071 DD 77 03                             ld      (ix+testCase.Expected),a
 62   8074 AF                                   xor      a
 63   8075 DD 77 02                             ld      (ix+testCase.Result),a
 64   8078 21 01 90     .NextIteration2:        ld      hl,testCounter
 65   807B 34                                   inc     (hl)
 66   807C DD E5                                push    ix
 67   807E E1                                   pop     hl
 68   807F 3E 04                                ld      a,4
 69   8081 ED 31                                add     hl,a
 70   8083 E5                                   push    hl
 71   8084 DD E1                                pop     ix
 72   8086 C3 4B 80                             jp      .TestLoop2
 73   8089 DD 01        .Done                   break
 74   808B C3 89 80                             jp      .Done                   ; complete tight loop
 75   808E
 76   808E                                      INCLUDE "../Variables/constant_equates.asm"
# file opened: ../Variables/constant_equates.asm
  1+  808E              ;Contants
  2+  808E
  3+  808E              SignMask8Bit		equ %01111111
  4+  808E              SignMask16Bit		equ %0111111111111111
  5+  808E              SignOnly8Bit		equ $80
  6+  808E              SignOnly16Bit		equ $8000
  7+  808E
  8+  808E              Bit7Only            equ %10000000
  9+  808E              Bit6Only            equ %01000000
 10+  808E              Bit5Only            equ %00100000
 11+  808E              Bit4Only            equ %00010000
 12+  808E              Bit3Only            equ %00001000
 13+  808E              Bit2Only            equ %00000100
 14+  808E              Bit1Only            equ %00000010
 15+  808E              Bit0Only            equ %00000001
 16+  808E              Bit7Clear           equ %01111111
 17+  808E              Bit6Clear           equ %10111111
 18+  808E              Bit5Clear           equ %11011111
 19+  808E              Bit4Clear           equ %11101111
 20+  808E              Bit3Clear           equ %11110111
 21+  808E              Bit2Clear           equ %11111011
 22+  808E              Bit1Clear           equ %11111101
 23+  808E              Bit0Clear           equ %11111110
 24+  808E              ConstPi				equ $80
 25+  808E              ConstNorm           equ 197
 26+  808E
 27+  808E              ;Text Tokens
 28+  808E              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
 29+  808E              BrabenBellToken 	equ $0D
 30+  808E              AcorToken			equ $0C
 31+  808E
 32+  808E              ; Intro Screen
 33+  808E              TitleShip			equ	$8C
 34+  808E              RotationUnity		equ $60
 35+  808E              DBCheckCode			equ $DB
 36+  808E              MaxVisibility		equ $1F
 37+  808E              FarInFront			equ $C0
 38+  808E              ; Equipment Flags
 39+  808E              EquipmentItemFitted     equ $FF
 40+  808E              EquipmentItemNotFitted  equ 0
 41+  808E              ; Universe Managment
 42+  808E              ShipTotalModelCount     equ 44
 43+  808E              ShipTypeScoopable       equ 4         ; a sub set of junk
 44+  808E              ShipTypeJunk            equ 3
 45+  808E              ShipTypeStation         equ 2
 46+  808E              ShipTypeMissile         equ 1
 47+  808E              ShipTypeNormal          equ 0
 48+  808E              ShipTypeText            equ 253
 49+  808E              ShipTypeDebug           equ 254
 50+  808E              ShipTypeEmpty           equ 255
 51+  808E              ; TacticsControl
 52+  808E              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 53+  808E              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 54+  808E              ShipIsBountyHunter      equ Bit1Only   ;
 55+  808E              ShipIsHostile           equ Bit2Only   ;
 56+  808E              ShipNotHostile          equ Bit2Clear   ;
 57+  808E              ShipIsPirate            equ Bit3Only   ;
 58+  808E              ShipIsDot               equ Bit3Only
 59+  808E              ShipIsNotDot            equ Bit3Clear
 60+  808E              ShipIsDotBitNbr         equ 3
 61+  808E              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 62+  808E              ShipKilledBitNbr        equ 4
 63+  808E              ShipIsDocking           equ Bit4Only   ;
 64+  808E              ShipIsBystander         equ Bit5Only   ;
 65+  808E              ShipIsVisible           equ Bit6Only
 66+  808E              ShipIsVisibleBitNbr     equ 6
 67+  808E              ShipIsCop               equ Bit6Only   ;
 68+  808E              ShipIsScoopDockEsc      equ Bit7Only   ;
 69+  808E              ShipAIEnabled           equ Bit7Only   ;
 70+  808E              ShipAIDisabled          equ Bit7Clear
 71+  808E              ShipAIEnabledBitNbr     equ 7
 72+  808E              ShipExploding           equ Bit5Only
 73+  808E              ShipExplodingBitNbr     equ 5
 74+  808E              ; Main Loop State
 75+  808E              StatePlayerDocked    equ $FF
 76+  808E              StateCompletedLaunch equ $FD
 77+  808E              StateInTransition    equ $FE
 78+  808E              StateHJumping        equ $FC
 79+  808E              StateHEntering       equ $FB
 80+  808E              StateCompletedHJump  equ $FA
 81+  808E              StateNormal          equ 0
 82+  808E              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 83+  808E              StageMissileNoTarget equ $FF
 84+  808E              StageMissileTargeting equ $FE
 85+  808E              ; UniverseAIControl
 86+  808E              ShipCanAnger        equ %00000001
 87+  808E
 88+  808E
 89+  808E              ShipMaxDistance     equ 192
 90+  808E              HyperSpaceTimers    equ $0B0B
 91+  808E
 92+  808E
 93+  808E              MaxNumberOfStars	equ 11
 94+  808E              ConsoleRefreshInterval  equ 5
 95+  808E
 96+  808E              ShipTypeSize		equ	32 			;??????? just a guess for now
 97+  808E              ShipSST				equ 4			; its a space station
 98+  808E              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 99+  808E              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
100+  808E              ShipCountMax		equ	2			; For now just 2 ships to debug
101+  808E              LineLimitPerShip	equ 70			; Max lines per ship
102+  808E              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
103+  808E              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
104+  808E
105+  808E              ; Memory page managment	(Refers to a memory slot as a place to access data)
106+  808E              ShipDataSlot		equ	6			; this may move into rom swap out space later
107+  808E              UniverseObjectSlot	equ	7
108+  808E
109+  808E              KeyForwardsView		equ	$20
110+  808E              ; Game specific equates
111+  808E              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
112+  808E
113+  808E              ;...Game Colour Mapping
114+  808E              L2DustColour        equ L2ColourGREY_1
115+  808E              L2SunScannerBright  equ 252
116+  808E              L2SunScanner        equ 180
117+  808E              L2DebrisColour      equ L2ColourYELLOW_1
118+  808E
119+  808E
120+  808E              ; Ship Data
121+  808E              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
122+  808E              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
123+  808E              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
124+  808E              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
125+  808E              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
126+  808E              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
127+  808E              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
128+  808E              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
129+  808E              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
130+  808E              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
131+  808E              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
132+  808E              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
133+  808E              ;;;;00 00			 EQUW 0     \ type 12 is       Python
134+  808E              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
135+  808E              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
136+  808E              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
137+  808E              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
138+  808E              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
139+  808E              ;;;;00 00			 EQUW 0     \ type 18 is
140+  808E              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
141+  808E              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
142+  808E              ;;;;00 00			 EQUW 0     \ type 21 is
143+  808E              ;;;;00 00			 EQUW 0     \ type 22 is
144+  808E              ;;;;00 00			 EQUW 0     \ type 23 is
145+  808E              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
146+  808E              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
147+  808E              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
148+  808E              ;;;;00 00			 EQUW 0     \ type 27 is
149+  808E              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
150+  808E              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
151+  808E              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
152+  808E              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
153+  808E              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
154+  808E              ;;;;			\ NEWB examples
155+  808E              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
156+  808E              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
157+  808E              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
158+  808E              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
159+  808E              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
160+  808E
# file closed: ../Variables/constant_equates.asm
 77   808E                                      INCLUDE "../Hardware/L2ColourDefines.asm"
# file opened: ../Hardware/L2ColourDefines.asm
  1+  808E              L2ColourBLACK           EQU   0
  2+  808E              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
  3+  808E              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
  4+  808E              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
  5+  808E              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
  6+  808E              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
  7+  808E              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
  8+  808E              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
  9+  808E              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
 10+  808E              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
 11+  808E              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
 12+  808E              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
 13+  808E              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
 14+  808E              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
 15+  808E              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
 16+  808E              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
 17+  808E              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
 18+  808E              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
 19+  808E              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
 20+  808E              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
 21+  808E              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
 22+  808E              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
 23+  808E              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
 24+  808E              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
 25+  808E
 26+  808E
 27+  808E              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
 28+  808E              L2ColourWHITE_2         EQU 146
 29+  808E              L2ColourGREY_1		    EQU L2ColourWHITE_2
 30+  808E              L2ColourGREY_2		    EQU 109
 31+  808E              L2ColourGREY_3		    EQU  73
 32+  808E              L2ColourGREY_4		    EQU  37
 33+  808E
 34+  808E              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
 35+  808E              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
 36+  808E              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
 37+  808E              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
 38+  808E              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
 39+  808E
 40+  808E              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
 41+  808E              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
 42+  808E              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
 43+  808E              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
 44+  808E              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
 45+  808E              L2ColourORANGE_1        EQU 236                 ; RGB
 46+  808E              L2ColourORANGE_2        EQU 168                 ; RGB
 47+  808E              L2ColourORANGE_3        EQU  68                 ; RGB
 48+  808E              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
 49+  808E              L2ColourCYAN_2          EQU  18                 ; RGB
 50+  808E              L2ColourCYAN_3          EQU   9                 ; RGB
 51+  808E              L2ColourPURPLE_1        EQU 109                 ; RGB
 52+  808E              L2ColourPURPLE_2        EQU  66                 ; RGB
 53+  808E              L2ColourPURPLE_3        EQU  33                 ; RGB
 54+  808E              L2ColourPINK_1		    EQU 231                 ; RGB
 55+  808E              L2ColourPINK_2		    EQU 226                 ; RGB
 56+  808E              L2ColourPINK_3		    EQU 225                 ; RGB
 57+  808E              L2ColourPINK_4		    EQU 224                 ; RGB
 58+  808E
# file closed: ../Hardware/L2ColourDefines.asm
 78   808E
 79   808E                                      INCLUDE "../Variables/general_variables_macros.asm"
# file opened: ../Variables/general_variables_macros.asm
  1+  808E              ; limited to 255 character length
  2+  808E              CountLengthHL:          MACRO   Limiter
  3+  808E ~                                    ld      de,hl
  4+  808E ~                                    ld      bc,Limiter
  5+  808E ~                                    xor     a
  6+  808E ~                                    cpir
  7+  808E ~                                    ClearCarryFlag
  8+  808E ~                                    sbc     hl,de
  9+  808E ~                                    ld      a,l
 10+  808E ~                                    ret
 11+  808E                                      ENDM
 12+  808E
 13+  808E              HalfLengthHL:           MACRO
 14+  808E ~                                    ld      b,0
 15+  808E ~            .CountLenLoop:          ld      a,(hl)
 16+  808E ~                                    cp      0
 17+  808E ~                                    jr      z,.DoneCount
 18+  808E ~                                    inc     b
 19+  808E ~                                    inc     hl
 20+  808E ~                                    jr      .CountLenLoop
 21+  808E ~            .DoneCount:             ld      a,32
 22+  808E ~                                    sub     b
 23+  808E ~                                    sra     a
 24+  808E                                      ENDM
 25+  808E
 26+  808E              MakeInnocentMacro:		MACRO
 27+  808E ~            						xor		a
 28+  808E ~            						ld		(FugitiveInnocentStatus),a
 29+  808E              						ENDM
 30+  808E
 31+  808E              NoEscapePodMacro:		MACRO
 32+  808E ~            						xor		a
 33+  808E ~            						ld		(EscapePod),a
 34+  808E              						ENDM
 35+  808E
 36+  808E              MaxFuelLevel            EQU     70              ; 7.0 light years max
 37+  808E              MaxFuelMacro:			MACRO
 38+  808E ~            						ld		a,MaxFuelLevel
 39+  808E ~            						ld		(Fuel),a
 40+  808E              						ENDM
 41+  808E
 42+  808E              MaxThrottle:            MACRO
 43+  808E ~                                    ld      a,(SHIPMAXSPEED)
 44+  808E ~                                    ld      (DELTA),a
 45+  808E ~                                    ld      d,a
 46+  808E ~                                    ld      e,4
 47+  808E ~                                    mul
 48+  808E ~                                    ld      (DELT4Lo),de
 49+  808E                                      ENDM
 50+  808E
 51+  808E              ZeroThrottle:           MACRO
 52+  808E ~                                    xor     a
 53+  808E ~                                    ld      (DELTA),a
 54+  808E ~                                    ld      (DELT4Lo),a
 55+  808E ~                                    ld      (DELT4Lo+1),a
 56+  808E                                      ENDM
 57+  808E
 58+  808E              ZeroPitch:              MACRO
 59+  808E ~                                    xor     a
 60+  808E ~                                    ld      (BET2),a
 61+  808E ~                                    ld      (BET2FLIP),a
 62+  808E ~                                    ld      (JSTY),a
 63+  808E ~                                    ld      (BETA),a
 64+  808E                                      ENDM
 65+  808E
 66+  808E              ZeroRoll:               MACRO
 67+  808E ~                                    xor     a                              ; zero roll and climb
 68+  808E ~                                    ld      (ALP2),a
 69+  808E ~                                    ld      (ALP2FLIP),a
 70+  808E ~                                    ld      (JSTX),a
 71+  808E ~                                    ld      (ALPHA),a
 72+  808E                                      ENDM
 73+  808E
 74+  808E              CorrectPostJumpFuel:    MACRO
 75+  808E ~                                    ld      a,(Fuel)
 76+  808E ~                                    ld      hl,Distance
 77+  808E ~                                    sub     a,(hl)
 78+  808E ~                                    ld      (Fuel),a
 79+  808E                                      ENDM
 80+  808E
 81+  808E              AnyMissilesLeft:        MACRO
 82+  808E ~                                    ld      a,(NbrMissiles)
 83+  808E ~                                    and     a
 84+  808E                                      ENDM
 85+  808E
 86+  808E              SetMissileTargetA:      MACRO
 87+  808E ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 88+  808E                                      ENDM
 89+  808E
 90+  808E              ClearMissileTarget:     MACRO
 91+  808E ~                                    ld      a,StageMissileNoTarget
 92+  808E ~                                    ld      (MissileTargettingFlag),a           ; reset targetting
 93+  808E                                      ENDM
 94+  808E
 95+  808E              SetMissileLaunch:       MACRO
 96+  808E ~                                    ld      a,(MissileTargettingFlag)
 97+  808E ~                                    and     $0F
 98+  808E ~                                    ld      (MissileTargettingFlag),a
 99+  808E                                      ENDM
100+  808E
101+  808E              LockMissileToA:         MACRO
102+  808E ~                                    or      $80
103+  808E ~                                    ld      (MissileTargettingFlag),a
104+  808E                                      ENDM
105+  808E
106+  808E              ClearECM:               MACRO
107+  808E ~                                    xor     a
108+  808E ~                                    ld      (ECMLoopA),a
109+  808E ~                                    ld      (ECMLoopB),a
110+  808E                                      ENDM
111+  808E
112+  808E              ChargeEnergyAndShields: MACRO
113+  808E ~                                    ld      a,$FF
114+  808E ~                                    ld      (PlayerEnergy),a
115+  808E ~                                    ld      (ForeShield),a
116+  808E ~                                    ld      (AftShield),a
117+  808E                                      ENDM
118+  808E
119+  808E              CopyPresentSystemToTarget: MACRO
120+  808E ~                                    ld      hl,(PresentSystemX)
121+  808E ~                                    ld      (TargetSystemX),hl
122+  808E                                      ENDM
123+  808E
124+  808E              CopyTargetSystemToPresent: MACRO
125+  808E ~                                    ld      hl,(TargetSystemX)
126+  808E ~                                    ld      (PresentSystemX),hl
127+  808E                                      ENDM
128+  808E
129+  808E              HalveFugitiveStatus:    MACRO
130+  808E ~                                    ld      hl,FugitiveInnocentStatus
131+  808E ~                                    srl     (hl)
132+  808E                                      ENDM
133+  808E
134+  808E              ClearForceTransition    MACRO
135+  808E ~                                    ld      a,$FF
136+  808E ~                                    ld      (ScreenTransitionForced),a
137+  808E                                      ENDM
138+  808E
139+  808E              ForceTransition:        MACRO newScreen
140+  808E ~                                    ld      a,newScreen
141+  808E ~                                    ld      (ScreenTransitionForced), a
142+  808E                                      ENDM
143+  808E
144+  808E              IsSpaceStationPresent:  MACRO
145+  808E ~                                    ld      a,(SpaceStationSafeZone)
146+  808E ~                                    and     a
147+  808E                                      ENDM
148+  808E
149+  808E              SetSafeZone:            MACRO
150+  808E ~                                    xor     a
151+  808E ~                                    ld      (SpaceStationSafeZone),a
152+  808E                                      ENDM
153+  808E
154+  808E              ClearSafeZone:          MACRO
155+  808E ~                                    ld      a,$FF
156+  808E ~                                    ld      (SpaceStationSafeZone),a
157+  808E                                      ENDM
158+  808E
159+  808E              ClearTemperatures:      MACRO
160+  808E ~                                    xor     a
161+  808E ~                                    ld      (CabinTemperature),a
162+  808E ~                                    ld      (GunTemperature),a
163+  808E                                      ENDM
164+  808E
165+  808E              CoolCabin:              MACRO
166+  808E ~                                    ld      a,(CabinTemperature)
167+  808E ~                                    and     a
168+  808E ~                                    jr      z,.AlreadyCool
169+  808E ~                                    dec     a
170+  808E ~                                    ld      (CabinTemperature),a
171+  808E ~            .AlreadyCool:
172+  808E                                      ENDM
173+  808E
174+  808E              CoolLasers:             MACRO
175+  808E ~                                    ld      a,(GunTemperature)
176+  808E ~                                    and     a
177+  808E ~                                    jr      z,.AlreadyCool
178+  808E ~                                    dec     a
179+  808E ~                                    ld      (GunTemperature),a
180+  808E ~            .AlreadyCool:
181+  808E                                      ENDM
182+  808E
183+  808E              ; type 255 is "not fitted"
184+  808E
185+  808E
186+  808E              InitEventCounter:       MACRO
187+  808E ~                                    xor     a
188+  808E ~                                    ld      (EventCounter),a
189+  808E                                      ENDM
190+  808E
191+  808E              ClearMissJump:          MACRO
192+  808E ~                                    ld      a,$FF
193+  808E ~                                    ld      (MissJumpFlag),a
194+  808E                                      ENDM
195+  808E
196+  808E
197+  808E              DrainSystem:            MACRO   SystemMem, DrainMem
198+  808E ~                                    ld      a,(DrainMem)
199+  808E ~                                    ld      b,a
200+  808E ~                                    ld      a,(SystemMem)
201+  808E ~                                    sub     a,b
202+  808E ~                                    ld      (SystemMem),a
203+  808E ~                                    jr      c,.ZeroSystem
204+  808E ~                                    jp      .ExitPoint
205+  808E ~            .ZeroSystem:            ZeroA
206+  808E ~                                    ld      (SystemMem),a
207+  808E ~            .ExitPoint
208+  808E                                      ENDM
209+  808E
210+  808E              BoostSystem:            MACRO   SystemMem, BoostMem
211+  808E ~                                    ld      a,(BoostMem)
212+  808E ~                                    ld      b,a
213+  808E ~                                    ld      a,(SystemMem)
214+  808E ~                                    add     b
215+  808E ~                                    ld      (SystemMem),a
216+  808E ~                                    jr      c, .MaxSystem
217+  808E ~                                    jp      .ExitPoint
218+  808E ~            .MaxSystem:             ld      a,255
219+  808E ~                                    ld      (SystemMem),a
220+  808E ~            .ExitPoint
221+  808E                                      ENDM
222+  808E
# file closed: ../Variables/general_variables_macros.asm
 80   808E                                      INCLUDE "../Maths/multiply.asm"
# file opened: ../Maths/multiply.asm
  1+  808E              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
  2+  808E 2A 30 83                             ld  hl,(varRS)
  3+  8091 3A 2F 83                             ld  a,(varQ)
  4+  8094 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
  5+  8096 11 00 00                             ld  de,0        ; de = XY
  6+  8099 47                                   ld  b,a         ; b = Q
  7+  809A                                      ShiftHLRight1
  7+  809A CB 3C       >			   srl h
  7+  809C CB 1D       >			   rr  l
  8+  809E CB 20                                sla b
  9+  80A0 30 03                                jr  nc,.LL126
 10+  80A2 EB           .LL125:                 ex de,hl
 11+  80A3 19                                   add hl,de
 12+  80A4 EB                                   ex  de,hl       ; de = de + rs
 13+  80A5              .LL126:                 ShiftHLRight1
 13+  80A5 CB 3C       >			   srl h
 13+  80A7 CB 1D       >			   rr  l
 14+  80A9 CB 20                                sla b
 15+  80AB 38 F5                                jr      c,.LL125
 16+  80AD 20 F6                                jr      nz,.LL126
 17+  80AF EB                                   ex      de,hl   ; hl = result
 18+  80B0 D1 C1                                pop     bc,,de
 19+  80B2 C9                                   ret
 20+  80B3
 21+  80B3
 22+  80B3              MacroDEEquQmulASigned:  MACRO
 23+  80B3 ~                                    ld      d,a                         ; save a into d
 24+  80B3 ~                                    ld      a,(varQ)
 25+  80B3 ~                                    ld      e,a
 26+  80B3 ~                                    xor     d                           ; a = a xor var Q
 27+  80B3 ~                                    and     SignOnly8Bit
 28+  80B3 ~                                    ld      b,a                         ; b = sign of a xor q
 29+  80B3 ~                                    ld      a,d                         ; d = abs d (or a reg)
 30+  80B3 ~                                    and     SignMask8Bit
 31+  80B3 ~                                    ld      d,a
 32+  80B3 ~                                    ld      a,e                         ; e = abs e (or varQ)
 33+  80B3 ~                                    and     SignMask8Bit
 34+  80B3 ~                                    ld      e,a
 35+  80B3 ~                                    mul                                 ; de = a * Q
 36+  80B3 ~                                    ld      a,d
 37+  80B3 ~                                    or      b                           ; de = a * Q leading sign bit
 38+  80B3 ~                                    ld      d,a
 39+  80B3                                      ENDM
 40+  80B3
 41+  80B3
 42+  80B3
 43+  80B3                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
 44+  80B3              madXAequQmulAaddRS:     MacroDEEquQmulASigned
 44+  80B3 57          >                        ld      d,a                         ; save a into d
 44+  80B4 3A 2F 83    >                        ld      a,(varQ)
 44+  80B7 5F          >                        ld      e,a
 44+  80B8 AA          >                        xor     d                           ; a = a xor var Q
 44+  80B9 E6 80       >                        and     SignOnly8Bit
 44+  80BB 47          >                        ld      b,a                         ; b = sign of a xor q
 44+  80BC 7A          >                        ld      a,d                         ; d = abs d (or a reg)
 44+  80BD E6 7F       >                        and     SignMask8Bit
 44+  80BF 57          >                        ld      d,a
 44+  80C0 7B          >                        ld      a,e                         ; e = abs e (or varQ)
 44+  80C1 E6 7F       >                        and     SignMask8Bit
 44+  80C3 5F          >                        ld      e,a
 44+  80C4 ED 30       >                        mul                                 ; de = a * Q
 44+  80C6 7A          >                        ld      a,d
 44+  80C7 B0          >                        or      b                           ; de = a * Q leading sign bit
 44+  80C8 57          >                        ld      d,a
 45+  80C9 2A 30 83     madDEaddRS:             ld		hl,(varR)
 46+  80CC CD D5 80                             call	madXAAddHLDESigned
 47+  80CF EB                                   ex      de,hl                       ; de = R.S + DE
 48+  80D0                                      ClearCarryFlag
 48+  80D0 B7          >                        or a
 49+  80D1 DD 6B                                ld      ixl,e
 50+  80D3 7A                                   ld      a,d
 51+  80D4 C9                                   ret
 52+  80D5
 53+  80D5
 54+  80D5 7C           madXAAddHLDESigned:     ld      a,h
 55+  80D6 E6 80                                and     SignOnly8Bit
 56+  80D8 47                                   ld      b,a                         ;save sign bit in b
 57+  80D9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 58+  80DA                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 58+  80DA FA F2 80    >                        jp		m, .ADDHLDEOppSGN
 59+  80DD 78           .ADDHLDESameSigns:       ld      a,b
 60+  80DE B2                                   or      d
 61+  80DF                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 61+  80DF FA E4 80    >                        jp		m, .ADDHLDESameNeg
 62+  80E2 19                                   add     hl,de
 63+  80E3 C9                                   ret
 64+  80E4 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 65+  80E5 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 66+  80E7 67                                   ld      h,a
 67+  80E8 7A                                   ld      a,d
 68+  80E9 E6 7F                                and     SignMask8Bit
 69+  80EB 57                                   ld      d,a
 70+  80EC 19                                   add     hl,de
 71+  80ED 3E 80                                ld      a,SignOnly8Bit
 72+  80EF B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 73+  80F0 67                                   ld      h,a
 74+  80F1 C9                                   ret
 75+  80F2 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 76+  80F3 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 77+  80F5 67                                   ld      h,a
 78+  80F6 7A                                   ld      a,d
 79+  80F7 E6 7F                                and     SignMask8Bit
 80+  80F9 57                                   ld      d,a
 81+  80FA B7                                   or      a
 82+  80FB ED 52                                sbc     hl,de
 83+  80FD 38 04                                jr      c,.ADDHLDEOppInvert
 84+  80FF 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 85+  8100 B4                                   or      h
 86+  8101 67                                   ld      h,a                         ; set the previou sign value
 87+  8102 C9                                   ret
 88+  8103              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 88+  8103 AF          >                    xor a
 88+  8104 95          >                    sub l
 88+  8105 6F          >                    ld l,a
 88+  8106 9F          >                    sbc a,a
 88+  8107 94          >                    sub h
 88+  8108 67          >                    ld h,a
 89+  8109 78                                   ld      a,b
 90+  810A EE 80                                xor     SignOnly8Bit                ; flip sign bit
 91+  810C B4                                   or      h
 92+  810D 67                                   ld      h,a                         ; recover sign
 93+  810E C9                                   ret
 94+  810F
 95+  810F
 96+  810F                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 97+  810F                  ;
 98+  810F                  ; enter : hl = 16-bit multiplier   = x
 99+  810F                  ;          e =  8-bit multiplicand = y
100+  810F                  ;
101+  810F                  ; exit  : ahl = 24-bit product
102+  810F                  ;         carry reset
103+  810F                  ;
104+  810F                  ; uses  : af, de, hl
105+  810F 54           AHLequHLmulE:           ld d,h                      ; xh
106+  8110 63                                   ld h,e                      ; yl
107+  8111 ED 30                                mul de                      ; xh*yl
108+  8113 EB                                   ex de,hl
109+  8114 ED 30                                mul de                      ; yl*xl, hl = xh*yl
110+  8116
111+  8116 7A                                   ld  a,d                     ; sum products
112+  8117 85                                   add a,l
113+  8118 57                                   ld  d,a
114+  8119 EB                                   ex de,hl
115+  811A
116+  811A 7A                                   ld  a,d
117+  811B CE 00                                adc a,0
118+  811D C9                                   ret
119+  811E
120+  811E
121+  811E
122+  811E                 ; multiplication of two 16-bit numbers into a 32-bit product
123+  811E                 ;
124+  811E                 ; enter : de = 16-bit multiplicand = y
125+  811E                 ;         hl = 16-bit multiplicand = x
126+  811E                 ;
127+  811E                 ; exit  : dehl = 32-bit product
128+  811E                 ;         carry reset
129+  811E                 ;
130+  811E                 ; uses  : af, bc, de, hl
131+  811E
132+  811E
133+  811E
134+  811E 45           DEHLequDEmulHL:         ld b,l                      ; x0
135+  811F 4B                                   ld c,e                      ; y0
136+  8120 5D                                   ld e,l                      ; x0
137+  8121 6A                                   ld l,d
138+  8122 E5                                   push hl                     ; x1 y1
139+  8123 69                                   ld l,c                      ; y0
140+  8124              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
141+  8124 ED 30                                mul de                      ; y1*x0
142+  8126 EB                                   ex de,hl
143+  8127 ED 30                                mul de                      ; x1*y0
144+  8129
145+  8129 AF                                   xor a                       ; zero A
146+  812A 19                                   add hl,de                   ; sum cross products p2 p1
147+  812B 8F                                   adc a,a                     ; capture carry p3
148+  812C
149+  812C 59                                   ld e,c                      ; x0
150+  812D 50                                   ld d,b                      ; y0
151+  812E ED 30                                mul de                      ; y0*x0
152+  8130
153+  8130 47                                   ld b,a                      ; carry from cross products
154+  8131 4C                                   ld c,h                      ; LSB of MSW from cross products
155+  8132
156+  8132 7A                                   ld a,d
157+  8133 85                                   add a,l
158+  8134 67                                   ld h,a
159+  8135 6B                                   ld l,e                      ; LSW in HL p1 p0
160+  8136
161+  8136 D1                                   pop de
162+  8137 ED 30                                mul de                      ; x1*y1
163+  8139
164+  8139 EB                                   ex de,hl
165+  813A ED 4A                                adc hl,bc
166+  813C EB                                   ex de,hl                    ; de = final MSW
167+  813D
168+  813D C9                                   ret
169+  813E
170+  813E              ; multiplication of two 16-bit numbers into a 16-bit product
171+  813E              ; enter : de = 16-bit multiplicand
172+  813E              ;         hl = 16-bit multiplicand
173+  813E              ; exit  : hl = 16-bit product
174+  813E              ;         carry reset
175+  813E              ; maths is
176+  813E              ;        hl = y , de= x
177+  813E              ;        hl = xhi,ylo + (yhigh * xlow)
178+  813E              ;        hl = yhih & xlo + x
179+  813E              ;
180+  813E              ;
181+  813E              ; uses  : af, bc, de, hl
182+  813E C5           mulDEbyHL:              push    bc
183+  813F 7A                                   ld a,d                      ; a = xh
184+  8140 54                                   ld d,h                      ; d = yh
185+  8141 67                                   ld h,a                      ; h = xh
186+  8142 4B                                   ld c,e                      ; c = xl
187+  8143 45                                   ld b,l                      ; b = yl
188+  8144 ED 30                                mul                         ; yh * yl
189+  8146 EB                                   ex de,hl
190+  8147 ED 30                                mul                         ; xh * yl
191+  8149 19                                   add hl,de                   ; add cross products
192+  814A 59                                   ld e,c
193+  814B 50                                   ld d,b
194+  814C ED 30                                mul                         ; yl * xl
195+  814E 7D                                   ld a,l                      ; cross products lsb
196+  814F 82                                   add a,d                     ; add to msb final
197+  8150 67                                   ld h,a
198+  8151 6B                                   ld l,e                      ; hl = final
199+  8152                                      ; 83 cycles, 19 bytes
200+  8152 AF                                   xor a                       ; reset carry
201+  8153 C1                                   pop     bc
202+  8154 C9                                   ret
203+  8155
204+  8155
205+  8155              ; CHL = multiplicand D = multiplier
206+  8155              ; DCHL = CHL * D
207+  8155 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
208+  8156 AC                                   xor     h                   ; xor with h to get resultant sign
209+  8157 E6 80                                and     SignOnly8Bit        ; .
210+  8159 FD 67                                ld      iyh,a               ; iyh = copy of sign
211+  815B 79                                   ld      a,c                 ; now CHL = ABS (CHL)
212+  815C E6 7F                                and     SignMask8Bit        ; .
213+  815E 4F                                   ld      c,a                 ; .
214+  815F 7A                                   ld      a,d                 ; d = ABS D
215+  8160 E6 7F                                and     SignMask8Bit        ; .
216+  8162              ; At this point CHL = ABS (HLE), A = ABS(D)
217+  8162 57           .mul1:                  ld      d,a                 ; first do D * L
218+  8163 5D                                   ld      e,l                 ; .
219+  8164 ED 30                                mul     de                  ; DE = L * D
220+  8166 08                                   ex      af,af'              ; save multiplier
221+  8167 6B                                   ld      l,e                 ; L = p0
222+  8168 7A                                   ld      a,d                 ; carry byte
223+  8169 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
224+  816A 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
225+  816B 57                                   ld      d,a                 ; and multiplier
226+  816C ED 30                                mul     de                  ; now its D & L
227+  816E 08                                   ex      af,af'              ; get back carry byte with flags
228+  816F 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
229+  8170 67                                   ld      h,a                 ; h = P1
230+  8171 7A                                   ld      a,d                 ; a = carry byte
231+  8172 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
232+  8173 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
233+  8174 57                                   ld      d,a                 ;
234+  8175 ED 30                                mul     de                  ;
235+  8177 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
236+  8178 8B                                   adc     a,e                 ;
237+  8179 FD B4                                or      iyh                 ; recover saved resultant sign
238+  817B 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
239+  817C C9                                   ret
240+  817D
241+  817D              ;  CHL = 53456 D = 1E
242+  817D              ;  56 * 1E = A14 L = 14 carry = 0A
243+  817D              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
244+  817D              ;  5  * 1E = 096 C = 96 + 6 = 9C
245+  817D              ;  CHL = 9C2214
246+  817D              ;mult3
247+  817D              ; DELC = HLE * D, uses HL, DE, C , A , IYH
248+  817D              ; HLE = multiplicand D = multiplier
249+  817D              ; tested by mathstestsun.asm all passed
250+  817D              ; Algorithm
251+  817D              ; AC =  E * D   (save carry)         H    L    E
252+  817D              ; DE =  L * D                                  D
253+  817D              ;  L =  A + E + carry                         E*D (lo)
254+  817D              ; DE =  H * D                             L*D+ ^ (hi)
255+  817D              ;  E =  A + E + carry                H*D (lo) + carry
256+  817D              ;
257+  817D              ;
258+  817D 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
259+  817E AC                                   xor     h                   ; xor with h to get resultant sign
260+  817F E6 80                                and     SignOnly8Bit        ; .
261+  8181 FD 67                                ld      iyh,a               ; iyh = copy of sign
262+  8183 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
263+  8184 E6 7F                                and     SignMask8Bit        ; .
264+  8186 67                                   ld      h,a                 ; .
265+  8187 7A                                   ld      a,d                 ; d = ABS D
266+  8188 E6 7F                                and     SignMask8Bit        ; .
267+  818A 57                                   ld      d,a                 ; .
268+  818B B7           .testEitherSideZero:    or      a
269+  818C 28 24                                jr      z,.ResultZero
270+  818E 7C                                   ld      a,h
271+  818F B5                                   or      l
272+  8190 B3                                   or      e
273+  8191 28 1F                                jr      z,.ResultZero
274+  8193              ; At this point HLE = ABS (HLE), A = ABS(D)
275+  8193 42                                   ld      b,d                 ; save Quotient
276+  8194 ED 30        .mul1:                  mul     de                  ; C = E * D
277+  8196 4B                                   ld      c,e                 ; C = p0
278+  8197 FD 6A                                ld      iyl,d               ; save carry (p1)
279+  8199 5D           .mul2:                  ld      e,l                 ; L = L * D
280+  819A 50                                   ld      d,b                 ; .
281+  819B ED 30                                mul     de                  ; .
282+  819D FD 7D                                ld      a,iyl               ; get back p1
283+  819F 83           .carrybyte1:            add     a,e                 ; L = L + E
284+  81A0 6F                                   ld      l,a                 ; .
285+  81A1 FD 6A                                ld      iyl,d               ; save new carry byte
286+  81A3 5C           .mul3:                  ld      e,h                 ; E = H * D
287+  81A4 50                                   ld      d,b                 ; .
288+  81A5 ED 30                                mul     de                  ; .
289+  81A7 FD 7D                                ld      a,iyl
290+  81A9 8B                                   adc     a,e                 ; .
291+  81AA 5F                                   ld      e,a                 ; .
292+  81AB 7A           .ItsNotZero:            ld      a,d                 ;
293+  81AC CE 00                                adc     a,0                 ; final carry bit
294+  81AE FD B4                                or      iyh                 ; bring back sign
295+  81B0 57                                   ld      d,a                 ; s = sign
296+  81B1 C9                                   ret
297+  81B2 11 00 00     .ResultZero:            ld      de,0
298+  81B5                                      ZeroA
298+  81B5 AF          >                        xor a
299+  81B6 4F                                   ld      c,a
300+  81B7 6F                                   ld      l,a
301+  81B8 C9                                   ret
302+  81B9
303+  81B9              ;;;
304+  81B9              ;;;
305+  81B9              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
306+  81B9              ;;;                        xor     h                   ; xor with h to get resultant sign
307+  81B9              ;;;                        and     SignOnly8Bit        ; .
308+  81B9              ;;;                        ld      iyh,a               ; iyh = copy of sign
309+  81B9              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
310+  81B9              ;;;                        and     SignMask8Bit        ; .
311+  81B9              ;;;                        ld      h,a                 ; .
312+  81B9              ;;;                        ld      a,d                 ; d = ABS D
313+  81B9              ;;;                        and     SignMask8Bit        ; .
314+  81B9              ;;;                        ld      d,a                 ; .
315+  81B9              ;;;.testEitherSideZero:    or      a
316+  81B9              ;;;                        jr      z,.ResultZero
317+  81B9              ;;;                        ld      a,h
318+  81B9              ;;;                        or      l
319+  81B9              ;;;                        or      e
320+  81B9              ;;;                        jr      z,.ResultZero
321+  81B9              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
322+  81B9              ;;;.mul1:                  mul     de                  ; C = E * D
323+  81B9              ;;;                        ex      af,af'              ; save mulitplier
324+  81B9              ;;;                        ld      c,e                 ; C = p0
325+  81B9              ;;;                        ld      a,d                 ; save carry (p1)
326+  81B9              ;;;                        ex      af,af'              ; .
327+  81B9              ;;;.mul2:                  ld      e,l                 ; L = L * D
328+  81B9              ;;;                        ld      d,a                 ; .
329+  81B9              ;;;                        mul     de                  ; .
330+  81B9              ;;;                        ex      af,af'              ; .
331+  81B9              ;;;.carrybyte1:            add     a,e                 ; L = L + E
332+  81B9              ;;;                        ld      l,a                 ; .
333+  81B9              ;;;                        ld      a,d
334+  81B9              ;;;                        ex      af,af'              ; save new carry byte
335+  81B9              ;;;.mul3:                  ld      e,h                 ; E = H * D
336+  81B9              ;;;                        ld      d,a                 ; .
337+  81B9              ;;;                        mul     de                  ; .
338+  81B9              ;;;                        ex      af,af'              ; .
339+  81B9              ;;;                        adc     a,e                 ; .
340+  81B9              ;;;                        ld      e,a                 ; .
341+  81B9              ;;;.ItsNotZero:            ld      a,d                 ;
342+  81B9              ;;;                        adc     a,0                 ; final carry bit
343+  81B9              ;;;                        or      iyh                 ; bring back sign
344+  81B9              ;;;                        ld      d,a                 ; s = sign
345+  81B9              ;;;                        ret
346+  81B9              ;;;.ResultZero:            ld      de,0
347+  81B9              ;;;                        ZeroA
348+  81B9              ;;;                        ld      c,a
349+  81B9              ;;;                        ld      l,a
350+  81B9              ;;;                        ret
351+  81B9
352+  81B9              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
353+  81B9              ; enter : de = 16-bit multiplicand
354+  81B9              ;         hl = 16-bit multiplicand
355+  81B9              ; exit  : hl = 16-bit product
356+  81B9              ;         carry reset
357+  81B9              ;
358+  81B9              ; uses  : af, bc, de, hl
359+  81B9 00           mulDEbyHLSignByte       DB      0
360+  81BA AF           mulDEbyHLSgnTo2c:       xor     a
361+  81BB 32 B9 81                             ld      (mulDEbyHLSignByte),a
362+  81BE 7A           .SignDE:                ld      a,d
363+  81BF ED 27 80                             test    $80
364+  81C2 28 08                                jr      z,.SignHL
365+  81C4 E6 7F        .NegativeDE:            and     $7F
366+  81C6 57                                   ld      d,a
367+  81C7 3E 80                                ld      a,$80
368+  81C9 32 B9 81                             ld      (mulDEbyHLSignByte),a
369+  81CC 7C           .SignHL:                ld      a,h
370+  81CD ED 27 80                             test    $80
371+  81D0 28 0B                                jr      z,.AbsoluteMultiply
372+  81D2 E6 7F        .NegativeHL:            and     $7F
373+  81D4 67                                   ld      h,a
374+  81D5 3A B9 81                             ld      a,(mulDEbyHLSignByte)
375+  81D8 EE 80                                xor     $80
376+  81DA 32 B9 81                             ld      (mulDEbyHLSignByte),a
377+  81DD CD 3E 81     .AbsoluteMultiply:      call    mulDEbyHL
378+  81E0 3A B9 81     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
379+  81E3 ED 27 80                             test    $80
380+  81E6 C8                                   ret     z
381+  81E7 AF           .Negateghl: 			xor 	a
382+  81E8 95                                   sub 	l
383+  81E9 6F                                   ld 		l,a
384+  81EA 9F                                   sbc 	a,a
385+  81EB 94                                   sub 	h
386+  81EC 67                                   ld 		h,a
387+  81ED C9                                   ret
388+  81EE
389+  81EE AF           mulDESgnbyHLUnsgnTo2c:  xor     a
390+  81EF 32 B9 81                             ld      (mulDEbyHLSignByte),a
391+  81F2 7A           .SignDE:                ld      a,d
392+  81F3 ED 27 80                             test    $80
393+  81F6 28 08                                jr      z,.AbsoluteMultiply
394+  81F8 E6 7F        .NegativeDE:            and     $7F
395+  81FA 57                                   ld      d,a
396+  81FB 3E 80                                ld      a,$80
397+  81FD 32 B9 81                             ld      (mulDEbyHLSignByte),a
398+  8200 CD 3E 81     .AbsoluteMultiply:      call    mulDEbyHL
399+  8203 3A B9 81     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
400+  8206 ED 27 80                             test    $80
401+  8209 C8                                   ret     z
402+  820A AF           .Negateghl:             xor 	a
403+  820B 95                                   sub 	l
404+  820C 6F                                   ld 		l,a
405+  820D 9F                                   sbc 	a,a
406+  820E 94                                   sub 	h
407+  820F 67                                   ld 		h,a
408+  8210 C9                                   ret
409+  8211
410+  8211
# file closed: ../Maths/multiply.asm
 81   8211                                      INCLUDE "../Variables/general_variables.asm"
# file opened: ../Variables/general_variables.asm
  1+  8211
  2+  8211
  3+  8211 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  4+  8213 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  5+  8215              ; Variables to simulate 6502 registers until code fixed
  6+  8215              ; These must be here in this order as reading Y and X can then be a 16 bit read
  7+  8215 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  8+  8216 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  9+  8217 00           regA		DB	0
 10+  8218
 11+  8218
 12+  8218 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 13+  8219 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 14+  821B 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 15+  821D
 16+  821D
 17+  821D
 18+  821D              ;XX16		DS	16				; 16 byte Matrix
 19+  821D
 20+  821D              P0INWK							; page 0 & 46
 21+  821D              p0INWK31						; page 0 & 65
 22+  821D              P0INWK36						; PAGE 0 &6A
 23+  821D
 24+  821D 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 25+  821E              LastNormalVisible	equ	XX4
 26+  821E              varXX4              equ XX4
 27+  821E
 28+  821E
 29+  821E
 30+  821E 00           PATG		DB	0				; 6502 &03C9
 31+  821F 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 32+  8221
 33+  8221
 34+  8221              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
 35+  8221              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 36+  8221
 37+  8221              ; Present System Variables
 38+  8221
 39+  8221 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
 40+  8222 20           RandomSeed1				DB	32	            ; 01
 41+  8223 0C           RandomSeed2				DB	12			    ; 02
 42+  8224 42           RandomSeed3				DB	66			    ; 03
 43+  8225 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
 44+  8229 00           varT1					DB	0				; 06
 45+  822A 00           SClo					DB 0				; 07
 46+  822B 00           SChi					DB 0				; 08
 47+  822C 00           varP					DB 0 				; 10	XX16+7
 48+  822D 00           varPhi					DB 0 				; 11	XX16+8
 49+  822E 00           varPhi2					DB 0 				; 12	XX16+9
 50+  822F              varPp1                  equ varPhi
 51+  822F              varPp2                  equ varPhi2
 52+  822F 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 53+  8230 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 54+  8231              UnivPointer				equ	UnivPointerLo
 55+  8231 00           varV					DB 0				; 22                          XX0+4
 56+  8232 00           varVHi					DB 0				; 23                          XX0+5
 57+  8233 00           varXXlo                 DB 0                ; 24
 58+  8234 00           varXXHi                 DB 0                ; 25
 59+  8235              varXX					equ	varXXlo
 60+  8235 00           YYlo                    DB 0                ; 26
 61+  8236 00           YYHi                    DB 0                ; 27
 62+  8237              varYY					equ	YYlo
 63+  8237              											;	28
 64+  8237              											;	29
 65+  8237              ;PlayerShipPositionData - Must be contiguous for setup
 66+  8237 00           BETA 					DB	0               ; 2A        (pitch done)
 67+  8238 00           JSTY                    DB  0               ; Joystick analog
 68+  8239 00           BET1 					DB	0               ; 2B        lower7 magnitude
 69+  823A 00           BET2                    DB  0               ;            climb sign
 70+  823B 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 71+  823C 1F           BET1MAXC                DB  31              ; max climb
 72+  823D E1           BET1MAXD                DB  -31             ; max dive
 73+  823E 00           XC						DB	0               ; 2C
 74+  823F 00           YC						DB 	0               ; 2D
 75+  8240              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
 76+  8240 00           ECMActive				DB 	0				; 30		ECM Active flag
 77+  8241 00           ECMLoopA                DB  0
 78+  8242 00           ECMLoopB                DB  0
 79+  8243 00 00        JSTX                    DW  0               ;           Joystick analog value
 80+  8245 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 81+  8246 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
 82+  8247 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 83+  8248 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 84+  8249 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 85+  824A E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 86+  824B
 87+  824B
 88+  824B
 89+  824B              MAXMESSAGES             EQU 5
 90+  824B              MESSAGETIMELIMIT        EQU 20
 91+  824B              MESSAGESIZE             EQU 33
 92+  824B              MESSAGELINE             EQU $0001
 93+  824B
 94+  824B 00           MessageCount            DB  0                ; used for enquing messages later
 95+  824C 00           MessageCurrent          DB  0
 96+  824D 05 00        MessageIndex            DW  MAXMESSAGES
 97+  824F 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 98+  82F4 05           MessageTimeout          DB  MAXMESSAGES
 99+  82F5 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
100+  831A
101+  831A              ; MOVED TO Universe XX19					DB	0				; page 0 &67
102+  831A              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
103+  831A              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
104+  831A 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
105+  831B              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
106+  831B
107+  831B
108+  831B 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
109+  8320              											;	6D		QQ15+1
110+  8320              											;	6E		QQ15+2
111+  8320              											;	6F		QQ15+3
112+  8320              											;	70		QQ15+4
113+  8320              											;	71		QQ15+5
114+  8320 00           QQ17					DB	0				;   72
115+  8321 00           XX18xlo                 DB  0               ;	72		XX18   xlo
116+  8322 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
117+  8323 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
118+  8324 00           XX18ylo                 DB  0               ;	75		XX18   ylo
119+  8325 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
120+  8326 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
121+  8327 00           XX18zlo                 DB  0               ;	78		XX18   zlo
122+  8328 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
123+  8329 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
124+  832A
125+  832A 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
126+  832B 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
127+  832C 00           DELT4Lo					DB 	0				; 7E
128+  832D 00           DELT4Hi					DB 	0				; 7F
129+  832E              DELTA4                  equ                 DELT4Lo
130+  832E
131+  832E
132+  832E              ; Not thise must be in this order else 16 bit fetches will fail
133+  832E 00           varU                    DB  0               ;   80
134+  832F 00           varQ					DB  0 				;	81
135+  8330 00           varR					DB  0 				;	82
136+  8331 00           varS					DB  0 				;	83
137+  8332              varRS                   equ varR
138+  8332
139+  8332 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
140+  8334
141+  8334 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
142+  8335 00           YSAV                    DB  0               ; 85
143+  8336 00           XX17					DB	0				; 86
144+  8337              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
145+  8337              varXX17                 equ  XX17
146+  8337 00           ScreenChanged           DB  0
147+  8338 00           ScreenIndex             DB  0
148+  8339 00           InvertedYAxis           DB  0
149+  833A 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
150+  833B              											; Bit 7 Set  ShortRangeChart    $80
151+  833B              											; Bit 6 Set  Galactic Chart     $40
152+  833B              											; Bit 5 Set  Market Place       $20
153+  833B              											; Bit 4 Set  Status Screen      $10
154+  833B              											; Bit 3 Set  Display Inventory  $08
155+  833B                                                          ; Bit 2 Set  Planet Data        $04
156+  833B                                                          ; View bit combinations if the ones above not matched
157+  833B                                                          ; bits 1 0
158+  833B                                                          ;      1 1  Front view , i.e. $03
159+  833B                                                          ;      1 0  Aft View          $02
160+  833B                                                          ;      0 1  Left View         $01
161+  833B                                                          ;      0 0  Right view        $00
162+  833B              											; Bit 0 Set  Data On System
163+  833B              											; 0  Space View (Not a menu)
164+  833B 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
165+  833C 00           XX13                    DB  0               ;   89
166+  833D 00           TYPE					DB	0				; 8C used for ship type in drawing
167+  833E              ;Docked flag = 00 = in free space
168+  833E              ;              FF = Docked
169+  833E              ;              FE = transition
170+  833E              ;              FD = Setup open space and transition to not docked
171+  833E              ;              FC = Hyperspace manimation
172+  833E              ;              FB = Hyperspace complete
173+  833E 00           DockedFlag				DB	0				; 8E -
174+  833F 00           GamePaused              DB  0
175+  8340 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
176+  8341 00           varCNT                  DB  0               ; 93
177+  8342
178+  8342 00           varK					DB	0				; 40
179+  8343 00           varKp1					DB	0				; 41
180+  8344 00           varKp2					DB	0				; 42
181+  8345 00           varKp3					DB	0				; 43
182+  8346
183+  8346 00           varK2                   DB  0               ; 9B
184+  8347 00           varK2p1                 DB  0               ; 9C K2 plus 1
185+  8348 00           varK2p2                 DB  0               ; 9D K2 plus 2
186+  8349 00           varK2p3                 DB  0               ; 9E K2 plus 3
187+  834A
188+  834A 00           Point                   DB  0               ; 9F      POINT
189+  834B
190+  834B 00           varT					DB	0				; D1
191+  834C
192+  834C 00 00 00...  varVector9ByteWork      DS  9
193+  8355
194+  8355 00 00 00 00  varK3					DS	4				; D2
195+  8359 00           varK3p2					DB	0				; 42
196+  835A 00           varK3p3					DB	0				; 43
197+  835B              varK3p1					equ varK3+1			; D3
198+  835B 00 00 00 00  varK4					DS	4				; E0
199+  835F              varK4p1					equ varK4+1			; D3
200+  835F
201+  835F
202+  835F              ;Heap
203+  835F
204+  835F 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
205+  8361 00 00 00...  HeapData				DS	50
206+  8393              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
207+  8393              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
208+  8393              ; i.e. a list of programmed missiles in universe slot list code
209+  8393 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
210+  839A              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
211+  839A              ;  #&5 Does J reverse both joystick channels
212+  839A              ;  #&4 Does Y reverse joystick Y channel			03CB
213+  839A              ;  #&2 Does X toggle startup message display ? PATG?	03C9
214+  839A              ;  #&3 Does F toggle flashing information			03CA
215+  839A              ;  #&1 Does A toggle keyboard auto-recentering ?
216+  839A              ;  #&0 Caps-lock toggles keyboard flight damping
217+  839A 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
218+  839B 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
219+  839C 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
220+  83AC 00           AlienItemsAvaliability  DB	0				; 039D
221+  83AD 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
222+  83AE 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
223+  83B0 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
224+  83B1              											;
225+  83B1 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
226+  83B2 00           MarketPrice				DB	0				; 03AA QQ24
227+  83B3 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
228+  83B4 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
229+  83B5 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
230+  83B6 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
231+  83B8              											; this is ship lines stack pointer so may be redundant with paging
232+  83B8              											; LS = line stack so we will have one for now to remove later
233+  83B8 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
234+  83B9 00           DisplayEcononmy			DB	0				; 03B8
235+  83BA 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
236+  83BB 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
237+  83BC 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
238+  83BE 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
239+  83C0 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
240+  83C2 00 00        DisplayRadius			DW	0
241+  83C4              ; --- Used in creation of sun and planet----;
242+  83C4 00           PlanetXPos              DS  1
243+  83C5 00           PlanetYPos              DS  1
244+  83C6 00           PlanetZPos              DS  1
245+  83C7 00           PlanetType              DS  1
246+  83C8 00           SunXPos                 DS  1
247+  83C9 00           SunYPos                 DS  1
248+  83CA 00           SunZPos                 DS  1
249+  83CB              ; -- Current Missile Runbtime data
250+  83CB 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
251+  83CC 00 00        MissileXPos             DW      0
252+  83CE 00           MissileXSgn             DB      0
253+  83CF 00 00        MissileYPos             DW      0
254+  83D1 00           MissileYSgn             DB      0
255+  83D2 00 00        MissileZPos             DW      0
256+  83D4 00           MissileZSgn             DB      0
257+  83D5 00 00        CurrentTargetXpos       DS      2
258+  83D7 00 00        CurrentTargetXsgn       DS      2
259+  83D9 00 00        CurrentTargetYpos       DS      2
260+  83DB 00 00        CurrentTargetYsgn       DS      2
261+  83DD 00 00        CurrentTargetZpos       DS      2
262+  83DF 00 00        CurrentTargetZsgn       DS      2
263+  83E1 00 00        TargetVectorXpos        DS      2
264+  83E3 00 00        TargetVectorXsgn        DS      2
265+  83E5 00 00        TargetVectorYpos        DS      2
266+  83E7 00 00        TargetVectorYsgn        DS      2
267+  83E9 00 00        TargetVectorZpos        DS      2
268+  83EB 00 00        TargetVectorZsgn        DS      2
269+  83ED 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
270+  83EE 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
271+  83EF 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
272+  83F0 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
273+  83F1
274+  83F1              ; --- Main Loop Data -----------------------;
275+  83F1 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
276+  83F2 00           SelectedUniverseSlot    DB  0
277+  83F3 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
278+  83F4 00           ShipBlastCheckCounter   DB  0
279+  83F5 00           InnerHyperCount			DB 	0				; 2F QQ22+1
280+  83F6 00           OuterHyperCount			DB 	0				; 2E QQ22
281+  83F7 00           EventCounter            DB  0
282+  83F8 00           HyperCircle             DB  0
283+  83F9 00           MissJumpFlag            DB  0
284+  83FA 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
285+  83FB 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
286+  83FC 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
287+  83FD 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
288+  83FE 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
289+  83FF 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
290+  8400              UniverseSlotListSize    equ	12
291+  8400 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
292+  840C 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
293+  8418              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
294+  8418 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
295+  8419 00           ConsoleRedrawFlag       DB  0
296+  841A 00           TextInputMode           DB  0
297+  841B 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
298+  841C                                                          ; 7    6    5    4     3    2        1    0
299+  841C                                                          ; Up   Down Left Right Home Recentre
300+  841C 00           FireLaserPressed        DB  0
301+  841D              ; --- Current System Data ------------------;
302+  841D 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
303+  841E 00           ExtraVesselsCounter     DB  0
304+  841F 00           JunkCount				DB  0				; $033E
305+  8420 00           AsteroidCount           DB  0               ; Not used as yet
306+  8421 00           TransporterCount        DB  0
307+  8422 00           CopCount                DB  0
308+  8423 00           PirateCount             DB  0
309+  8424              ; --- Galaxy Data --------------------------;
310+  8424 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
311+  8425 00 00 00...  WorkingSeeds			DS	6
312+  842B 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
313+  8431 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
314+  8437 00           PresentSystemX			DB	0				; System we are currently in
315+  8438 00           PresentSystemY			DB  0				; System we are currently in
316+  8439 00           TargetSystemX			DB	0				; System we are targeting for jump
317+  843A 00           TargetSystemY			DB	0				; System we are targeting for jump
318+  843B 00           GovPresentSystem		DB	0				; 03AE Govenment
319+  843C 00           TekPresentSystem		DB	0				; 03AF Technology
320+  843D
321+  843D 00           CompassColor			DB	0				; 03C5
322+  843E 00           SoundToggle				DB	0				; 03C6
323+  843F 00           KeyboardRecenterToggle	DB	0				; 03C8
324+  8440 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
325+  8441 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
326+  8442 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
327+  8443 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
328+  8444 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
329+  8445 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
330+  8446
331+  8446              ; Working Data
332+  8446
333+  8446              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
334+  8446              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
335+  8446              ; $0925 =	EQUW page9+37* 1
336+  8446              ; $094A =	EQUW page9+37* 2
337+  8446              ; $096F =	EQUW page9+37* 3
338+  8446              ; $0994 =	EQUW page9+37* 4
339+  8446              ; $09B9 =	EQUW page9+37* 5
340+  8446              ; $09DE =	EQUW page9+37* 6
341+  8446              ; $0A03 =	EQUW page9+37* 7
342+  8446              ; $0A28 =	EQUW page9+37* 8
343+  8446              ; $0A4D =	EQUW page9+37* 9
344+  8446              ; $0A72 =	EQUW page9+37*10
345+  8446              ; $0A97 =	EQUW page9+37*11
346+  8446              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
347+  8446
348+  8446
349+  8446
350+  8446              ; 0b00 is start address of data to save
351+  8446              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
352+  8446              											; Bit mask XXXX10XX - Thargoid plan mission
353+  8446
354+  8446 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
355+  8447
356+  8447 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
357+  8449 00 00        CommanderLoadAddress	DW	0				;0C03
358+  844B 00 00        LengthOfFile			DW	0				;0C0B
359+  844D 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
360+  844F
361+  844F 00 00 00...  EdgesBuffer				DS 50
362+  8481              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
363+  8481              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
364+  8481
365+  8481 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
366+  84C7              ShipLineStackTop		equ $ - ShipLineStack
367+  84C7
368+  84C7 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
369+  8587              ; LSX vector overlaps with LSO
370+  8587 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
371+  8588 00           LSY2					DB	0           	; &0F0E	    \ LSY2
372+  8589
373+  8589              ; Star Positions are 16 bit 3d coordinates
374+  8589 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
375+  85CB 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
376+  85E1 00           varStarX                DB  0
377+  85E2 00           varStarY                DB  0
378+  85E3 00 00 00...  varDustX                DS MaxNumberOfStars *2
379+  85F9 00 00 00...  varDustY                DS MaxNumberOfStars *2
380+  860F 00 00 00...  varDustZ                DS MaxNumberOfStars *2
381+  8625              ; -- Player Runtime Data
382+  8625 00           GunTemperature          DB  0
383+  8626 00           CabinTemperature        DB  0
384+  8627 00           PlayerForwardSheild0	DB	0 ; ?????
385+  8628 00           PlayerForwardSheild1    DB	0
386+  8629 00           PlayerForwardSheild2    DB	0
387+  862A 00           ForeShield				DB	0				; These three must be contiguous
388+  862B 00           AftShield				DB	0				; .
389+  862C 00           PlayerEnergy			DB	0				; and in this order
390+  862D 00           CompassX				DB	0				; 03A8
391+  862E 00           CompassY				DB	0				; 03A9
392+  862F              ; Simplification of missile targetting
393+  862F              ; $FF no missile targettting enabled
394+  862F              ; $FE missile targetting, no target selected
395+  862F              ; bit 7 set then tagetting and lower nibble holds missile target and launching
396+  862F              ; bit 7 clear launch at selected target in lower nibble
397+  862F 00           MissileTargettingFlag   DB  0
398+  8630              ;;MissileTarget			DB  0				; 45
399+  8630              ;;MissileLaunchFlag       DB  0
400+  8630 00 00 00...  CommanderName           DS  15
401+  863F 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
402+  8640 00           BadnessStatus           DB  0
403+  8641              ;note rapidly changing views could reset these so need to consider it in an array
404+  8641              ; LaserType
405+  8641              ; LaserPulseRate                          ; how many pulses can be fired before long pause
406+  8641              ; LaserPulsePause                         ; time before next pulse - 0 = beam
407+  8641              ; LaserPulseRest                          ; time before pulse count resets to 0
408+  8641              ; LaserDamageOutput                       ; amount of damage for a laser hit
409+  8641              ; LaserEnergyDrain                        ; amount of energy drained by cycle
410+  8641              ; LaserHeat                               ; amount of heat generated
411+  8641              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
412+  8641              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
413+  8641              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
414+  8641              ; LaserTechLevel                          ; minimum tech level system to buy from
415+  8641              ; need to add copy table routines
416+  8641 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
417+  8642 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
418+  8643 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
419+  8644 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
420+  8645 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
421+  8646 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
422+  8647
423+  8647 00           CurrLaserBurstRate      DB  0
424+  8648 00           CurrLaserBurstCount     DB  0
425+  8649 00           CurrLaserDamageOutput   DB  0
426+  864A 00           CurrLaserEnergyDrain    DB  0
427+  864B 00           CurrLaserHeat           DB  0
428+  864C 00           CurrLaserDurability     DB  0
429+  864D 00           CurrLaserDurabilityAmount DB  0
430+  864E
431+  864E              ; Count down timers must be aligned like this to work
432+  864E 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
433+  864F 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
434+  8650 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
435+  8651 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
436+  8652
437+  8652              ; -- Input variables
438+  8652 00           JoystickX				DB	0				; 034C JSTX
439+  8653 00           JoystickY				DB	0				; 034D JSTY
440+  8654 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
441+  8655 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
442+  8656
443+  8656              ; -- Console drawing data
444+  8656              FShieldStart            equ $8410
445+  8656              AShieldStart            equ $8D10
446+  8656              FuelStart               equ $9410
447+  8656
448+  8656              EnergyBar4Start         equ $A5D5
449+  8656              EnergyBar3Start         equ $ADD5
450+  8656              EnergyBar2Start         equ $B5D5
451+  8656              EnergyBar1Start         equ $BDD5
452+  8656              ; 70 /2 = 35 values
453+  8656              ;                            0                             1                             2                             3
454+  8656              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
455+  8656 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
455+  865A 04 04 05 06
455+  865E 06 07 08 09
455+  8662 0A 0A 0B 0C
455+  8666 0D 0E 0E 0F
455+  866A 10 10 11 13
455+  866E 14 15 15 16
455+  8672 17 18 19 1A
455+  8676 1B 1C 1E 1F
455+  867A 1F
456+  867B              SpeedoStart             equ $84D1
457+  867B              ;                            0                             1                             2                             3                             4
458+  867B              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
459+  867B 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
459+  867F 04 04 05 06
459+  8683 06 07 08 09
459+  8687 0A 0A 0B 0C
459+  868B 0D 0E 0E 0F
459+  868F 10 10 11 12
459+  8693 13 14 14 15
459+  8697 16 17 18 18
459+  869B 19 1A 1A 1B
459+  869F 1C 1C 1D 1E
459+  86A3 1F
460+  86A4
461+  86A4              DialMiddleXPos          equ $E1
462+  86A4              RollMiddle              equ $8CE0
463+  86A4              PitchMiddle             equ $94E0
464+  86A4
465+  86A4
466+  86A4
467+  86A4
468+  86A4
# file closed: ../Variables/general_variables.asm
 82   86A4
 83   86A4                                      INCLUDE "../Maths/logmaths.asm"
# file opened: ../Maths/logmaths.asm
  1+  86A4 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
  1+  86A8 61 74 68 73
  1+  86AC 20 20 20 50
  1+  86B0 47 39 39
  2+  86B3
  3+  86B3 EB           AntiLogHL:              ex      de,hl
  4+  86B4 21 9B 8D                             ld      hl,LogReverseHighByte
  5+  86B7 01 14 02                             ld      bc,LogReverseTableLen
  6+  86BA 7A                                   ld      a,d
  7+  86BB ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
  8+  86BD 28 03                                jr      z,.FoundHighByte
  9+  86BF 23                                   inc     hl
 10+  86C0 18 F9                                jr      .SearchLoop
 11+  86C2 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
 12+  86C3 7E                                   ld      a,(hl)                          ; .
 13+  86C4 21 9B 8B                             ld      hl,LogTable                     ; .
 14+  86C7 ED 31                                add     hl,a                            ; .
 15+  86C9 ED 31                                add     hl,a                            ; .
 16+  86CB 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
 17+  86CC BE                                   cp      (hl)
 18+  86CD 20 09                                jr      nz,.SkippedPastHigh
 19+  86CF 23                                   inc     hl
 20+  86D0 7B                                   ld      a,e
 21+  86D1                                      JumpIfAGTENusng (hl), .SkippedPastLow
 21+  86D1 BE          >                        cp     (hl)
 21+  86D2 D2 D9 86    >                        jp		nc,.SkippedPastLow
 22+  86D5 C3 CB 86                             jp      .LookForLowByteLoop
 23+  86D8
 24+  86D8 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
 25+  86D9 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
 26+  86DA EB                                   ex      de,hl                           ; move address to de for subtract
 27+  86DB 21 9B 8B                             ld      hl,LogTable                     ; subtract from log table address
 28+  86DE                                      ClearCarryFlag
 28+  86DE B7          >                        or a
 29+  86DF ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
 30+  86E1                                      ShiftHLRight1                           ; now must be >= 255
 30+  86E1 CB 3C       >			   srl h
 30+  86E3 CB 1D       >			   rr  l
 31+  86E5 7D                                   ld      a,l
 32+  86E6 C9                                   ret
 33+  86E7
 34+  86E7
 35+  86E7              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 35+  86E7 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 35+  86E8 CA 10 87    >                        jp	    z, .ResultIsZero
 36+  86EB 21 9B 8B                             ld      hl,LogTable                     ; de = log a
 37+  86EE ED 31                                add     hl,a                            ; .
 38+  86F0 ED 31                                add     hl,a                            ; .
 39+  86F2 5E                                   ld      e,(hl)                          ; .
 40+  86F3 23                                   inc     hl                              ; .
 41+  86F4 56                                   ld      d,(hl)                          ; .
 42+  86F5 21 9B 8B                             ld      hl,LogTable                     ; hl = log b
 43+  86F8 78                                   ld      a,b                             ; .
 44+  86F9 ED 31                                add     hl,a                            ; .
 45+  86FB ED 31                                add     hl,a                            ; .
 46+  86FD 7E                                   ld      a,(hl)                          ; .
 47+  86FE 23                                   inc     hl                              ; .
 48+  86FF 66                                   ld      h,(hl)                          ; .
 49+  8700 6F                                   ld      l,a                             ; .
 50+  8701                                      ClearCarryFlag                          ;
 50+  8701 B7          >                        or a
 51+  8702 EB                                   ex      de,hl                           ; now hl = log a and de = log b
 52+  8703 ED 52                                sbc     hl,de                           ; hl = log a - log b
 53+  8705 7C                                   ld      a,h                             ; .
 54+  8706 21 9B 89                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 55+  8709 ED 31                                add     hl,a                            ; which is also a / b
 56+  870B ED 31                                add     hl,a                            ; .
 57+  870D 7E                                   ld      a,(hl)                          ; .
 58+  870E                                      ClearCarryFlag                          ;
 58+  870E B7          >                        or a
 59+  870F C9                                   ret
 60+  8710              .ResultIsZero:          ClearCarryFlag
 60+  8710 B7          >                        or a
 61+  8711                                      ZeroA
 61+  8711 AF          >                        xor a
 62+  8712 C9                                   ret
 63+  8713
 64+  8713              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 64+  8713 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 64+  8714 CA 4A 87    >                        jp	    z, .ResultIsZero
 65+  8717                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 65+  8717 BA          >                        cp     d
 65+  8718 D2 E7 86    >                        jp		nc,AEquAmul256DivBLogLT
 66+  871B 21 9B 8B                             ld      hl,LogTable                     ; de = log a
 67+  871E ED 31                                add     hl,a                            ; .
 68+  8720 ED 31                                add     hl,a                            ; .
 69+  8722 5E                                   ld      e,(hl)                          ; .
 70+  8723 23                                   inc     hl                              ; .
 71+  8724 56                                   ld      d,(hl)                          ; .
 72+  8725 21 9B 8B                             ld      hl,LogTable                     ; hl = log b
 73+  8728 78                                   ld      a,b                             ; .
 74+  8729 ED 31                                add     hl,a                            ; .
 75+  872B ED 31                                add     hl,a                            ; .
 76+  872D 7E                                   ld      a,(hl)                          ; .
 77+  872E 23                                   inc     hl                              ; .
 78+  872F 66                                   ld      h,(hl)                          ; .
 79+  8730 6F                                   ld      l,a                             ; .
 80+  8731                                      ClearCarryFlag                          ;
 80+  8731 B7          >                        or a
 81+  8732 EB                                   ex      de,hl                           ; now hl = log a and de = log b
 82+  8733 ED 52                                sbc     hl,de                           ; hl = log a - log b
 83+  8735 38 0B                                jr      c,.ResultIsOne                  ; .
 84+  8737 7C                                   ld      a,h                             ; .
 85+  8738 21 9B 87                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 86+  873B ED 31                                add     hl,a                            ; which is also a / b
 87+  873D ED 31                                add     hl,a                            ; .
 88+  873F 7E                                   ld      a,(hl)                          ; .
 89+  8740                                      ClearCarryFlag                          ;
 89+  8740 B7          >                        or a
 90+  8741 C9                                   ret
 91+  8742              .ResultIsOne:           ClearCarryFlag
 91+  8742 B7          >                        or a
 92+  8743 3E FF                                ld      a,$FF
 93+  8745 C9                                   ret
 94+  8746              .ResultIsInfinte:       SetCarryFlag
 94+  8746 37          >                        scf
 95+  8747 3E FF                                ld      a,$FF
 96+  8749 C9                                   ret
 97+  874A              .ResultIsZero:          ClearCarryFlag
 97+  874A B7          >                        or a
 98+  874B C9                                   ret
 99+  874C
100+  874C              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
100+  874C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
100+  874D CA 6C 87    >                        jp	    z, .ResultIsZero
101+  8750 21 9B 8B                             ld      hl,LogTable                     ; point to log a in LogTable
102+  8753 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
103+  8755 ED 31                                add     hl,a
104+  8757 5E                                   ld      e,(hl)                          ; de = log a
105+  8758 23                                   inc     hl                              ; .
106+  8759 56                                   ld      d,(hl)                          ; .
107+  875A 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
108+  875D                                      ClearCarryFlag
108+  875D B7          >                        or a
109+  875E EB                                   ex      hl,de                           ; hl = log a, de = log 197
110+  875F ED 52                                sbc     hl,de
111+  8761 7C                                   ld      a,h
112+  8762 21 9B 89                             ld      hl,AnitLogODDTable
113+  8765 ED 31                                add     hl,a
114+  8767 ED 31                                add     hl,a
115+  8769 7E                                   ld      a,(hl)
116+  876A                                      ClearCarryFlag
116+  876A B7          >                        or a
117+  876B C9                                   ret
118+  876C              .ResultIsZero:          ClearCarryFlag
118+  876C B7          >                        or a
119+  876D                                      ZeroA
119+  876D AF          >                        xor a
120+  876E C9                                   ret
121+  876F
122+  876F
123+  876F              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
123+  876F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
123+  8770 CA 99 87    >                        jp	    z, .ResultIsZero
124+  8773                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
124+  8773 BA          >                        cp     d
124+  8774 D2 4C 87    >                        jp		nc,AEquAmul256Div197LogLT
125+  8777 21 9B 8B                             ld      hl,LogTable                     ; point to log a in LogTable
126+  877A ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
127+  877C ED 31                                add     hl,a
128+  877E 5E                                   ld      e,(hl)                          ; de = log a
129+  877F 23                                   inc     hl                              ; .
130+  8780 56                                   ld      d,(hl)                          ; .
131+  8781 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
132+  8784                                      ClearCarryFlag
132+  8784 B7          >                        or a
133+  8785 EB                                   ex      hl,de                           ; hl = log a, de = log 197
134+  8786 ED 52                                sbc     hl,de
135+  8788 38 0B                                jr      c,.ResultIsOne
136+  878A 7C                                   ld      a,h
137+  878B 21 9B 87                             ld      hl,AntiLogTable
138+  878E ED 31                                add     hl,a
139+  8790 ED 31                                add     hl,a
140+  8792 7E                                   ld      a,(hl)
141+  8793                                      ClearCarryFlag
141+  8793 B7          >                        or a
142+  8794 C9                                   ret
143+  8795              .ResultIsOne:           ClearCarryFlag
143+  8795 B7          >                        or a
144+  8796 3E FF                                ld      a,$FF
145+  8798 C9                                   ret
146+  8799              .ResultIsZero:          ClearCarryFlag
146+  8799 B7          >                        or a
147+  879A C9                                   ret
# file closed: ../Maths/logmaths.asm
 84   879B                                      INCLUDE "../Tables/antilogtable.asm"
# file opened: ../Tables/antilogtable.asm
  1+  879B 01 00 01 00  AntiLogTable:           DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
  1+  879F 01 00 01 00
  1+  87A3 01 00 01 00
  1+  87A7 01 00 01 00
  1+  87AB 01 00 01 00
  1+  87AF 01 00 01 00
  1+  87B3 01 00 01 00
  1+  87B7 01 00 01 00
  2+  87BB 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
  2+  87BF 01 00 01 00
  2+  87C3 01 00 01 00
  2+  87C7 01 00 01 00
  2+  87CB 01 00 01 00
  2+  87CF 01 00 01 00
  2+  87D3 01 00 01 00
  2+  87D7 01 00 01 00
  3+  87DB 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
  3+  87DF 02 00 02 00
  3+  87E3 02 00 02 00
  3+  87E7 02 00 02 00
  3+  87EB 02 00 02 00
  3+  87EF 02 00 02 00
  3+  87F3 02 00 02 00
  3+  87F7 02 00 02 00
  4+  87FB 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
  4+  87FF 02 00 03 00
  4+  8803 03 00 03 00
  4+  8807 03 00 03 00
  4+  880B 03 00 03 00
  4+  880F 03 00 03 00
  4+  8813 03 00 03 00
  4+  8817 03 00 03 00
  5+  881B 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05
  5+  881F 04 00 04 00
  5+  8823 04 00 04 00
  5+  8827 04 00 04 00
  5+  882B 04 00 04 00
  5+  882F 04 00 05 00
  5+  8833 05 00 05 00
  5+  8837 05 00 05 00
  6+  883B 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
  6+  883F 05 00 06 00
  6+  8843 06 00 06 00
  6+  8847 06 00 06 00
  6+  884B 06 00 06 00
  6+  884F 07 00 07 00
  6+  8853 07 00 07 00
  6+  8857 07 00 07 00
  7+  885B 08 00 08 00                          DW $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0B
  7+  885F 08 00 08 00
  7+  8863 08 00 08 00
  7+  8867 09 00 09 00
  7+  886B 09 00 09 00
  7+  886F 09 00 0A 00
  7+  8873 0A 00 0A 00
  7+  8877 0A 00 0B 00
  8+  887B 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F
  8+  887F 0B 00 0C 00
  8+  8883 0C 00 0C 00
  8+  8887 0C 00 0D 00
  8+  888B 0D 00 0D 00
  8+  888F 0E 00 0E 00
  8+  8893 0E 00 0E 00
  8+  8897 0F 00 0F 00
  9+  889B 10 00 10 00                          DW $10, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14, $14, $15, $15, $16
  9+  889F 10 00 11 00
  9+  88A3 11 00 11 00
  9+  88A7 12 00 12 00
  9+  88AB 13 00 13 00
  9+  88AF 13 00 14 00
  9+  88B3 14 00 15 00
  9+  88B7 15 00 16 00
 10+  88BB 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F
 10+  88BF 17 00 18 00
 10+  88C3 18 00 19 00
 10+  88C7 19 00 1A 00
 10+  88CB 1A 00 1B 00
 10+  88CF 1C 00 1C 00
 10+  88D3 1D 00 1D 00
 10+  88D7 1E 00 1F 00
 11+  88DB 20 00 20 00                          DW $20, $20, $21, $22, $22, $23, $24, $25, $26, $26, $27, $28, $29, $2A, $2B, $2C
 11+  88DF 21 00 22 00
 11+  88E3 22 00 23 00
 11+  88E7 24 00 25 00
 11+  88EB 26 00 26 00
 11+  88EF 27 00 28 00
 11+  88F3 29 00 2A 00
 11+  88F7 2B 00 2C 00
 12+  88FB 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B, $3D, $3E
 12+  88FF 2F 00 30 00
 12+  8903 31 00 32 00
 12+  8907 33 00 34 00
 12+  890B 35 00 36 00
 12+  890F 38 00 39 00
 12+  8913 3A 00 3B 00
 12+  8917 3D 00 3E 00
 13+  891B 40 00 41 00                          DW $40, $41, $42, $44, $45, $47, $48, $4A, $4C, $4D, $4F, $51, $52, $54, $56, $58
 13+  891F 42 00 44 00
 13+  8923 45 00 47 00
 13+  8927 48 00 4A 00
 13+  892B 4C 00 4D 00
 13+  892F 4F 00 51 00
 13+  8933 52 00 54 00
 13+  8937 56 00 58 00
 14+  893B 5A 00 5C 00                          DW $5A, $5C, $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72, $75, $77, $7A, $7D
 14+  893F 5E 00 60 00
 14+  8943 62 00 64 00
 14+  8947 67 00 69 00
 14+  894B 6B 00 6D 00
 14+  894F 70 00 72 00
 14+  8953 75 00 77 00
 14+  8957 7A 00 7D 00
 15+  895B 80 00 82 00                          DW $80, $82, $85, $88, $8B, $8E, $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1
 15+  895F 85 00 88 00
 15+  8963 8B 00 8E 00
 15+  8967 91 00 94 00
 15+  896B 98 00 9B 00
 15+  896F 9E 00 A2 00
 15+  8973 A5 00 A9 00
 15+  8977 AD 00 B1 00
 16+  897B B5 00 B8 00                          DW $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB, $E0, $E5, $EA, $EF, $F5, $FA
 16+  897F BD 00 C1 00
 16+  8983 C5 00 C9 00
 16+  8987 CE 00 D2 00
 16+  898B D7 00 DB 00
 16+  898F E0 00 E5 00
 16+  8993 EA 00 EF 00
 16+  8997 F5 00 FA 00
 17+  899B
 18+  899B 01 00 01 00  AnitLogODDTable:        DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ;  0 - 15
 18+  899F 01 00 01 00
 18+  89A3 01 00 01 00
 18+  89A7 01 00 01 00
 18+  89AB 01 00 01 00
 18+  89AF 01 00 01 00
 18+  89B3 01 00 01 00
 18+  89B7 01 00 01 00
 19+  89BB 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 16 - 31
 19+  89BF 01 00 01 00
 19+  89C3 01 00 01 00
 19+  89C7 01 00 01 00
 19+  89CB 01 00 01 00
 19+  89CF 01 00 01 00
 19+  89D3 01 00 01 00
 19+  89D7 01 00 01 00
 20+  89DB 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 32 - 47
 20+  89DF 02 00 02 00
 20+  89E3 02 00 02 00
 20+  89E7 02 00 02 00
 20+  89EB 02 00 02 00
 20+  89EF 02 00 02 00
 20+  89F3 02 00 02 00
 20+  89F7 02 00 02 00
 21+  89FB 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 48 - 55
 21+  89FF 02 00 03 00
 21+  8A03 03 00 03 00
 21+  8A07 03 00 03 00
 21+  8A0B 03 00 03 00
 21+  8A0F 03 00 03 00
 21+  8A13 03 00 03 00
 21+  8A17 03 00 03 00
 22+  8A1B 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 64 - 71
 22+  8A1F 04 00 04 00
 22+  8A23 04 00 04 00
 22+  8A27 04 00 04 00
 22+  8A2B 04 00 04 00
 22+  8A2F 05 00 05 00
 22+  8A33 05 00 05 00
 22+  8A37 05 00 05 00
 23+  8A3B 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07 ; 80 - 87
 23+  8A3F 05 00 06 00
 23+  8A43 06 00 06 00
 23+  8A47 06 00 06 00
 23+  8A4B 06 00 06 00
 23+  8A4F 07 00 07 00
 23+  8A53 07 00 07 00
 23+  8A57 07 00 07 00
 24+  8A5B 08 00 08 00                          DW $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0B ; 96 -
 24+  8A5F 08 00 08 00
 24+  8A63 08 00 09 00
 24+  8A67 09 00 09 00
 24+  8A6B 09 00 09 00
 24+  8A6F 0A 00 0A 00
 24+  8A73 0A 00 0A 00
 24+  8A77 0A 00 0B 00
 25+  8A7B 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F ; 112
 25+  8A7F 0B 00 0C 00
 25+  8A83 0C 00 0C 00
 25+  8A87 0D 00 0D 00
 25+  8A8B 0D 00 0D 00
 25+  8A8F 0E 00 0E 00
 25+  8A93 0E 00 0F 00
 25+  8A97 0F 00 0F 00
 26+  8A9B 10 00 10 00                          DW $10, $10, $10, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $15, $15, $16 ; 128
 26+  8A9F 10 00 11 00
 26+  8AA3 11 00 12 00
 26+  8AA7 12 00 12 00
 26+  8AAB 13 00 13 00
 26+  8AAF 14 00 14 00
 26+  8AB3 14 00 15 00
 26+  8AB7 15 00 16 00
 27+  8ABB 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 144
 27+  8ABF 17 00 18 00
 27+  8AC3 18 00 19 00
 27+  8AC7 1A 00 1A 00
 27+  8ACB 1B 00 1B 00
 27+  8ACF 1C 00 1D 00
 27+  8AD3 1D 00 1E 00
 27+  8AD7 1E 00 1F 00
 28+  8ADB 20 00 21 00                          DW $20, $21, $21, $22, $23, $24, $24, $25, $26, $27, $28, $29, $29, $2A, $2B, $2C ; 160
 28+  8ADF 21 00 22 00
 28+  8AE3 23 00 24 00
 28+  8AE7 24 00 25 00
 28+  8AEB 26 00 27 00
 28+  8AEF 28 00 29 00
 28+  8AF3 29 00 2A 00
 28+  8AF7 2B 00 2C 00
 29+  8AFB 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C, $3D, $3F ; 176
 29+  8AFF 2F 00 30 00
 29+  8B03 31 00 32 00
 29+  8B07 34 00 35 00
 29+  8B0B 36 00 37 00
 29+  8B0F 38 00 3A 00
 29+  8B13 3B 00 3C 00
 29+  8B17 3D 00 3F 00
 30+  8B1B 40 00 42 00                          DW $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $50, $52, $53, $55, $57, $59 ; 192
 30+  8B1F 43 00 45 00
 30+  8B23 46 00 48 00
 30+  8B27 49 00 4B 00
 30+  8B2B 4C 00 4E 00
 30+  8B2F 50 00 52 00
 30+  8B33 53 00 55 00
 30+  8B37 57 00 59 00
 31+  8B3B 5B 00 5D 00                          DW $5B, $5D, $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74, $76, $79, $7B, $7E ; 208
 31+  8B3F 5F 00 61 00
 31+  8B43 63 00 65 00
 31+  8B47 68 00 6A 00
 31+  8B4B 6C 00 6F 00
 31+  8B4F 71 00 74 00
 31+  8B53 76 00 79 00
 31+  8B57 7B 00 7E 00
 32+  8B5B 81 00 84 00                          DW $81, $84, $87, $8A, $8D, $90, $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 224
 32+  8B5F 87 00 8A 00
 32+  8B63 8D 00 90 00
 32+  8B67 93 00 96 00
 32+  8B6B 99 00 9D 00
 32+  8B6F A0 00 A4 00
 32+  8B73 A7 00 AB 00
 32+  8B77 AF 00 B3 00
 33+  8B7B B6 00 BA 00                          DW $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE, $E3, $E8, $ED, $F2, $F7, $FD ; 240 - 255
 33+  8B7F BF 00 C3 00
 33+  8B83 C7 00 CB 00
 33+  8B87 D0 00 D4 00
 33+  8B8B D9 00 DE 00
 33+  8B8F E3 00 E8 00
 33+  8B93 ED 00 F2 00
 33+  8B97 F7 00 FD 00
 34+  8B9B
# file closed: ../Tables/antilogtable.asm
 85   8B9B                                      INCLUDE "../Tables/logtable.asm"
# file opened: ../Tables/logtable.asm
  1+  8B9B 00 00        LogTable:               DW $0000                                                            ; 0
  2+  8B9D 00 00 06 20                          DW $0000, $2006, $320F, $400D, $4AEC, $5216, $59C2, $6013           ; 8
  2+  8BA1 0F 32 0D 40
  2+  8BA5 EC 4A 16 52
  2+  8BA9 C2 59 13 60
  3+  8BAD 1E 65 F2 6A                          DW $651E, $6AF2, $6E9A, $721C, $7680, $79C9, $7DFB, $801A           ; 16
  3+  8BB1 9A 6E 1C 72
  3+  8BB5 80 76 C9 79
  3+  8BB9 FB 7D 1A 80
  4+  8BBD 27 82 25 85                          DW $8227, $8525, $8715, $8AF9, $8CD2, $8EA0, $9066, $9223           ; 24
  4+  8BC1 15 87 F9 8A
  4+  8BC5 D2 8C A0 8E
  4+  8BC9 66 90 23 92
  5+  8BCD D8 94 86 96                          DW $94D8, $9686, $982E, $99CF, $9B6B, $9D02, $9E93, $A020           ; 32
  5+  8BD1 2E 98 CF 99
  5+  8BD5 6B 9B 02 9D
  5+  8BD9 93 9E 20 A0
  6+  8BDD A9 A1 2E A2                          DW $A1A9, $A22E, $A4AE, $A52C, $A6A5, $A71C, $A98F, $AA00           ; 40
  6+  8BE1 AE A4 2C A5
  6+  8BE5 A5 A6 1C A7
  6+  8BE9 8F A9 00 AA
  7+  8BED 6D AB D8 AC                          DW $AB6D, $ACD8, $AD41, $AEA7, $AF0B, $B06C, $B1CC, $B229           ; 48
  7+  8BF1 41 AD A7 AE
  7+  8BF5 0B AF 6C B0
  7+  8BF9 CC B1 29 B2
  8+  8BFD 85 B3 DF B4                          DW $B385, $B4DF, $B537, $B68D, $B7E1, $B834, $B986, $B9D6           ; 56
  8+  8C01 37 B5 8D B6
  8+  8C05 E1 B7 34 B8
  8+  8C09 86 B9 D6 B9
  9+  8C0D 25 BA 72 BB                          DW $BA25, $BB72, $BCBE, $BD08, $BD52, $BE9A, $BFE1, $C027           ; 64
  9+  8C11 BE BC 08 BD
  9+  8C15 52 BD 9A BE
  9+  8C19 E1 BF 27 C0
 10+  8C1D 6C C0 B0 C1                          DW $C06C, $C1B0, $C2F2, $C234, $C375, $C4B5, $C4F4, $C532           ; 72
 10+  8C21 F2 C2 34 C2
 10+  8C25 75 C3 B5 C4
 10+  8C29 F4 C4 32 C5
 11+  8C2D 6F C6 AC C6                          DW $C66F, $C6AC, $C7E7, $C722, $C85C, $C996, $C9CE, $CA06           ; 80
 11+  8C31 E7 C7 22 C7
 11+  8C35 5C C8 96 C9
 11+  8C39 CE C9 06 CA
 12+  8C3D 3D CA 74 CB                          DW $CA3D, $CB74, $CCAA, $CCDF, $CD13, $CD47, $CE7B, $CEAD           ; 88
 12+  8C41 AA CC DF CC
 12+  8C45 13 CD 47 CD
 12+  8C49 7B CE AD CE
 13+  8C4D E0 CF 11 CF                          DW $CFE0, $CF11, $D042, $D073, $D1A3, $D1D2, $D201, $D230           ; 96
 13+  8C51 42 D0 73 D0
 13+  8C55 A3 D1 D2 D1
 13+  8C59 01 D2 30 D2
 14+  8C5D 5E D3 8B D3                          DW $D35E, $D38B, $D4B9, $D4E5, $D511, $D53D, $D568, $D693           ; 104
 14+  8C61 B9 D4 E5 D4
 14+  8C65 11 D5 3D D5
 14+  8C69 68 D5 93 D6
 15+  8C6D BE D6 E8 D7                          DW $D6BE, $D7E8, $D712, $D83B, $D864, $D98C, $D9B5, $D9DD           ; 112
 15+  8C71 12 D7 3B D8
 15+  8C75 64 D8 8C D9
 15+  8C79 B5 D9 DD D9
 16+  8C7D 04 DA 2B DA                          DW $DA04, $DA2B, $DB52, $DB78, $DB9E, $DCC4, $DCEA, $DD0F           ; 120
 16+  8C81 52 DB 78 DB
 16+  8C85 9E DB C4 DC
 16+  8C89 EA DC 0F DD
 17+  8C8D 34 DD 58 DD                          DW $DD34, $DD58, $DE7D, $DEA1, $DEC4, $DFE8, $DF0B, $E02E           ; 128
 17+  8C91 7D DE A1 DE
 17+  8C95 C4 DE E8 DF
 17+  8C99 0B DF 2E E0
 18+  8C9D 50 E0 72 E0                          DW $E050, $E072, $E194, $E1B6, $E1D8, $E2F9, $E21A, $E23B           ; 136
 18+  8CA1 94 E1 B6 E1
 18+  8CA5 D8 E1 F9 E2
 18+  8CA9 1A E2 3B E2
 19+  8CAD 5B E3 7C E3                          DW $E35B, $E37C, $E39C, $E4BC, $E4DB, $E4FB, $E51A, $E539           ; 144
 19+  8CB1 9C E3 BC E4
 19+  8CB5 DB E4 FB E4
 19+  8CB9 1A E5 39 E5
 20+  8CBD 57 E5 76 E6                          DW $E557, $E676, $E694, $E6B2, $E7D0, $E7EE, $E70C, $E729           ; 152
 20+  8CC1 94 E6 B2 E6
 20+  8CC5 D0 E7 EE E7
 20+  8CC9 0C E7 29 E7
 21+  8CCD 46 E8 63 E8                          DW $E846, $E863, $E880, $E99C, $E9B9, $E9D5, $EAF1, $EA0D           ; 160
 21+  8CD1 80 E8 9C E9
 21+  8CD5 B9 E9 D5 E9
 21+  8CD9 F1 EA 0D EA
 22+  8CDD 28 EA 44 EA                          DW $EA28, $EA44, $EB5F, $EB7A, $EB95, $ECB0, $ECCB, $ECE5           ; 168
 22+  8CE1 5F EB 7A EB
 22+  8CE5 95 EB B0 EC
 22+  8CE9 CB EC E5 EC
 23+  8CED 00 EC 1A ED                          DW $EC00, $ED1A, $ED34, $ED4E, $ED68, $EE81, $EE9B, $EEB4           ; 176
 23+  8CF1 34 ED 4E ED
 23+  8CF5 68 ED 81 EE
 23+  8CF9 9B EE B4 EE
 24+  8CFD CD EE E6 EF                          DW $EECD, $EFE6, $EFFF, $EF18, $EF30, $F049, $F061, $F079           ; 184
 24+  8D01 FF EF 18 EF
 24+  8D05 30 EF 49 F0
 24+  8D09 61 F0 79 F0
 25+  8D0D 91 F1 A9 F1                          DW $F191, $F1A9, $F1C1, $F1D9, $F1F0, $F208, $F21F, $F236           ; 192
 25+  8D11 C1 F1 D9 F1
 25+  8D15 F0 F1 08 F2
 25+  8D19 1F F2 36 F2
 26+  8D1D 4E F2 64 F3                          DW $F24E, $F364, $F37B, $F392, $F3A9, $F4BF, $F4D5, $F4EC           ; 200
 26+  8D21 7B F3 92 F3
 26+  8D25 A9 F3 BF F4
 26+  8D29 D5 F4 EC F4
 27+  8D2D 02 F4 18 F5                          DW $F402, $F518, $F52E, $F544, $F559, $F56F, $F685, $F69A           ; 208
 27+  8D31 2E F5 44 F5
 27+  8D35 59 F5 6F F5
 27+  8D39 85 F6 9A F6
 28+  8D3D AF F6 C4 F6                          DW $F6AF, $F6C4, $F7DA, $F7EF, $F703, $F718, $F72D, $F842           ; 216
 28+  8D41 DA F7 EF F7
 28+  8D45 03 F7 18 F7
 28+  8D49 2D F7 42 F8
 29+  8D4D 56 F8 6B F8                          DW $F856, $F86B, $F87F, $F993, $F9A7, $F9BB, $F9CF, $F9E3           ; 224
 29+  8D51 7F F8 93 F9
 29+  8D55 A7 F9 BB F9
 29+  8D59 CF F9 E3 F9
 30+  8D5D F7 FA 0B FA                          DW $FAF7, $FA0B, $FA1E, $FA32, $FA45, $FB58, $FB6C, $FB7F           ; 232
 30+  8D61 1E FA 32 FA
 30+  8D65 45 FA 58 FB
 30+  8D69 6C FB 7F FB
 31+  8D6D 92 FB A5 FB                          DW $FB92, $FBA5, $FCB8, $FCCB, $FCDE, $FCF0, $FC03, $FD16           ; 240
 31+  8D71 B8 FC CB FC
 31+  8D75 DE FC F0 FC
 31+  8D79 03 FC 16 FD
 32+  8D7D 28 FD 3A FD                          DW $FD28, $FD3A, $FD4D, $FD5F, $FD71, $FE83, $FE95, $FEA7           ; 248
 32+  8D81 4D FD 5F FD
 32+  8D85 71 FD 83 FE
 32+  8D89 95 FE A7 FE
 33+  8D8D B9 FE CB FE                          DW $FEB9, $FECB, $FFDD, $FFEE, $FF00, $FF11, $FF23                  ; 255
 33+  8D91 DD FF EE FF
 33+  8D95 00 FF 11 FF
 33+  8D99 23 FF
 34+  8D9B
 35+  8D9B 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
 35+  8D9F 20 00 02 00
 35+  8DA3 32 00 03 00
 35+  8DA7 40 00 04 00
 35+  8DAB 4A 00 05 00
 35+  8DAF 52 00 06 00
 36+  8DB3 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
 36+  8DB7 60 00 08 00
 36+  8DBB 65 00 09 00
 36+  8DBF 6A 00 0A 00
 36+  8DC3 6E 00 0B 00
 36+  8DC7 72 00 0C 00
 37+  8DCB 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
 37+  8DCF 79 00 0E 00
 37+  8DD3 7D 00 0F 00
 37+  8DD7 80 00 10 00
 37+  8DDB 82 00 11 00
 37+  8DDF 85 00 12 00
 38+  8DE3 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
 38+  8DE7 8A 00 14 00
 38+  8DEB 8C 00 15 00
 38+  8DEF 8E 00 16 00
 38+  8DF3 90 00 17 00
 38+  8DF7 92 00 18 00
 39+  8DFB 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
 39+  8DFF 96 00 1A 00
 39+  8E03 98 00 1B 00
 39+  8E07 99 00 1C 00
 39+  8E0B 9B 00 1D 00
 39+  8E0F 9D 00 1E 00
 40+  8E13 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
 40+  8E17 A0 00 20 00
 40+  8E1B A1 00 21 00
 40+  8E1F A2 00 22 00
 40+  8E23 A4 00 23 00
 40+  8E27 A5 00 24 00
 41+  8E2B A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
 41+  8E2F A7 00 26 00
 41+  8E33 A9 00 27 00
 41+  8E37 AA 00 28 00
 41+  8E3B AB 00 29 00
 41+  8E3F AC 00 2A 00
 42+  8E43 AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
 42+  8E47 AE 00 2C 00
 42+  8E4B AF 00 2D 00
 42+  8E4F B0 00 2E 00
 42+  8E53 B1 00 2F 00
 42+  8E57 B2 00 30 00
 43+  8E5B B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
 43+  8E5F B4 00 32 00
 43+  8E63 B5 00 33 00
 43+  8E67 B6 00 34 00
 43+  8E6B B7 00 35 00
 43+  8E6F B8 00 36 00
 44+  8E73 B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
 44+  8E77 B9 00 38 00
 44+  8E7B BA 00 39 00
 44+  8E7F BB 00 3A 00
 44+  8E83 BC 00 3B 00
 44+  8E87 BD 00 3C 00
 45+  8E8B BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
 45+  8E8F BF 00 3F 00
 45+  8E93 C0 00 40 00
 45+  8E97 C1 00 42 00
 45+  8E9B C2 00 43 00
 45+  8E9F C3 00 45 00
 46+  8EA3 C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
 46+  8EA7 C5 00 48 00
 46+  8EAB C6 00 48 00
 46+  8EAF C7 00 4A 00
 46+  8EB3 C8 00 4C 00
 46+  8EB7 C9 00 4D 00
 47+  8EBB CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
 47+  8EBF CB 00 52 00
 47+  8EC3 CC 00 53 00
 47+  8EC7 CD 00 55 00
 47+  8ECB CE 00 57 00
 47+  8ECF CF 00 58 00
 48+  8ED3 D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
 48+  8ED7 D1 00 5C 00
 48+  8EDB D2 00 5E 00
 48+  8EDF D3 00 61 00
 48+  8EE3 D4 00 64 00
 48+  8EE7 D5 00 66 00
 49+  8EEB D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
 49+  8EEF D6 00 69 00
 49+  8EF3 D7 00 6A 00
 49+  8EF7 D7 00 6B 00
 49+  8EFB D8 00 6C 00
 49+  8EFF D8 00 6D 00
 50+  8F03 D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
 50+  8F07 D9 00 6F 00
 50+  8F0B D9 00 70 00
 50+  8F0F DA 00 71 00
 50+  8F13 DB 00 72 00
 50+  8F17 DC 00 75 00
 51+  8F1B DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
 51+  8F1F DE 00 7B 00
 51+  8F23 DF 00 7E 00
 51+  8F27 E0 00 80 00
 51+  8F2B E1 00 83 00
 51+  8F2F E2 00 86 00
 52+  8F33 E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
 52+  8F37 E4 00 8C 00
 52+  8F3B E5 00 8F 00
 52+  8F3F E6 00 92 00
 52+  8F43 E7 00 95 00
 52+  8F47 E8 00 99 00
 53+  8F4B E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
 53+  8F4F EA 00 9F 00
 53+  8F53 EB 00 A3 00
 53+  8F57 EC 00 A6 00
 53+  8F5B ED 00 AA 00
 53+  8F5F EE 00 AE 00
 54+  8F63 EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
 54+  8F67 F0 00 B6 00
 54+  8F6B F1 00 B9 00
 54+  8F6F F2 00 BE 00
 54+  8F73 F3 00 C2 00
 54+  8F77 F4 00 C6 00
 55+  8F7B F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
 55+  8F7F F6 00 CF 00
 55+  8F83 F7 00 D3 00
 55+  8F87 F8 00 D8 00
 55+  8F8B F8 00 D9 00
 55+  8F8F F9 00 DC 00
 56+  8F93 FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
 56+  8F97 FB 00 E6 00
 56+  8F9B FB 00 E9 00
 56+  8F9F FC 00 EB 00
 56+  8FA3 FD 00 F0 00
 56+  8FA7 FE 00 F6 00
 57+  8FAB FF 00 FB 00                          DW $FF, 251
 58+  8FAF              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ../Tables/logtable.asm
 86   8FAF
 87   8FAF                                      STRUCT testCase
 88   8FAF ~            AVal                    BYTE 1
 89   8FAF ~            QVal                    BYTE 2
 90   8FAF ~            Result                  BYTE 3
 91   8FAF ~            Expected                BYTE 4
 92   8FAF                                      ENDS
 93   8FAF              ;                            01   02   03   04
 94   8FAF 05 C5 FF FF  TestCase1               DB  $05,  197, $FF, $FF
 95   8FB3 06 C5 FF FF  TestCase2               DB  $06,  197, $FF, $FF
 96   8FB7 A5 C5 FF FF  TestCase3               DB  $A5,  197, $FF, $FF
 97   8FBB C5 C5 FF FF  TestCase4               DB  $C5,  197, $FF, $FF
 98   8FBF 65 C5 FF FF  TestCase5               DB  $65,  197, $FF, $FF
 99   8FC3 8A C5 FF FF  TestCase6               DB  $8A,  197, $FF, $FF
100   8FC7 AC C5 FF FF  TestCase7               DB  $AC,  197, $FF, $FF
101   8FCB 85 C5 FF FF  TestCase8               DB  $85,  197, $FF, $FF
102   8FCF 09 C5 FF FF  TestCase9               DB  $09,  197, $FF, $FF
103   8FD3 01 C5 FF FF  TestCase10              DB  $01,  197, $FF, $FF
104   8FD7 05 01 FF FF  TestCase12              DB  $05,  $01, $FF, $FF
105   8FDB 05 A3 FF FF  TestCase13              DB  $05,  $A3, $FF, $FF
106   8FDF A5 83 FF FF  TestCase14              DB  $A5,  $83, $FF, $FF
107   8FE3 05 03 FF FF  TestCase15              DB  $05,  $03, $FF, $FF
108   8FE7 05 00 FF FF  TestCase16              DB  $05,  $00, $FF, $FF
109   8FEB 0A 80 FF FF  TestCase17              DB  $0A,  $80, $FF, $FF
110   8FEF 05 80 FF FF  TestCase18              DB  $05,  $80, $FF, $FF
111   8FF3 85 83 FF FF  TestCase19              DB  $85,  $83, $FF, $FF
112   8FF7 05 83 FF FF  TestCase20              DB  $05,  $83, $FF, $FF
113   8FFB 05 03 FF FF  TestCase21              DB  $05,  $03, $FF, $FF
114   8FFF 0B           testTotal               DB  ($-TestCase10)/4
115   9000 0B           testTotal2              DB  ($-TestCase10)/4
116   9001 00           testCounter             DB   0
117   9002
118   9002
119   9002
120   9002
121   9002                  SAVENEX OPEN "mathslogs.nex", $8000 , $7F00
122   9002                  SAVENEX CFG  0,0,0,1
123   9002                  SAVENEX AUTO
124   9002                  SAVENEX CLOSE
125   9002
# file closed: mathslogs.asm
