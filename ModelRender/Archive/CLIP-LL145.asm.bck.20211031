;--------------------------------------------------------------------------------------------------------------------
; and final optmistation to:
; if x1 =x2 go to simpleverticalclip	
; if y1 =y2 go to simplehorizontalclip	
; if x1 and x2 on screen (high byte of both = 0)  then go to YPointsTest
;                        else if x1 > x2 then swap point1 & point 2
;                             if x1 is negative then if x2 is negative then no draw exit
;                                                                      else go to x1outofboundsclip else x1 must be on screen
;                             if x2 byte 2 not zero go to x2outofboundsclip
;YPointsTest:
; if y1 and y2 both on screen go to ClippingDone:
; if y1 high byte set then  go to y1outofboundsclip
;                     else  go to y2outofboundsclip as y2 must be high byte now
;ClippingDone:
; clipping DONE as none required
; x1outofboundsclip:
;    y1 = y1 + ( dyx  * ABS(x1))
;    x1 = 0
;    fall into x2outofboundsclip
; x2outofboundsclip:
;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
;                            y1 = 0
;                      else if y1 > 128 then y1 = 128
;                                            x1 = x1 + (dxy * (128-y1))
;    if x2 > 255 then y2 = y2 - (dxy * (255âˆ’x2))
;                     x2 = 255
;    end if
;    goto  y2outofboundsclip
; y1outofboundsclip - to get to here x1 and x2 must be on screen
;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
;                            y1 = 0
;                      else if y1 > 128 then x1 = x1 - (dxy * (128-y1))
;                                            y1 = 128
;                            
;    fall into y2outofboundsclip
; y2outofboundsclip - to get to here x1 and x2 must be on screen and y1
;    if y2 is negative then  x2 = x2 + (dxy * ABS(y2))
;                            y2 = 0
;                      else  if y2 > 128 then x2 = x2 - (dxy * (128-y2))
;                                             y2 = 128
;     clipping DONE
; simpleverticalclip	
;    if y1 < 0 then y1 = 0
;       else if y1 > 128 then y1 = 128
;    if y2 < 0 then y2 = 0
;       else if y2 > 128 then y2 = 128
; simplehorizontalclip	
;     if x1 < 0 then x1 = 0
;        else if x1 high byte set just use low byte
;     if x2 < 0 then x2 = 0
;        else if x2 high byte set just use low byte
;     clipping DONE
; ******************************************************************
; Another optimisation to add, if the difference between DX and DY is large enougg just go horizonal or vertical
;----------------------------------------------------------------------------------------------------------------------------------
; All the code is unwrapped where ever possible as this routine will be called for every line on every frame draw
; it still needs some optimisation as its repeatedly checking bounds so assumptions can be made
;LL145	 CLIP  XX15 XX12 line BLINE etc. waiting for (X1,Y1), (X2,Y2) to draw a line. 
; Before clipping,  XX15(0,1) was x1.  XX15(2,3) was y1. XX15(4,5) was x2. XX12(0,1) was y2.
clipDx                  DW      0
clipDy                  DW      0
clipDxy                 DW      0
clipDxySign             DB      0
clipDyx                 DW      0
clipDyxSign             DB      0
CLIP:
; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
ClipXX15XX12Line:
ClipV2:                 ld      bc,(UbnkPreClipY1)
                        ld      ix,(UbnkPreClipY2+0)
                        ld      hl,(UbnkPreClipX1)
                        ld      de,(UbnkPreClipX2)
                       ; break
.OnScreenTest:          ld      a,h
                        cp      0
                        jr      z,.OnScreenYTest
                        test    $80
                        jr      z,.OnScreenX1Positive
.OnScreenX1Negative:    ld      a,d
                        cp      0
                        jr      z,.OnScreenYTest
                        test    $80
                        jp      nz, .PointsOutofBounds          ; x1 and x2 are both negative so out of bounds
                        jr      .OnScreenYTest
.OnScreenX1Positive:    ld      a,d
                        cp      0
                        jr      z,.OnScreenYTest
                        test    $80
                        jp      z,  .PointsOutofBounds          ; x1 and x2 are both high positive so out of bounds                        
; For Y1 & Y2 if both negative that is a quick fail, then if Y1 and Y2 are not zero, quick fail
.OnScreenYTest:         ld      a,b                         
                        test    $80
                        jr      nz,.OnScreenY1Negative
; as Y1 is positive, then see if its > 256
.OnScreenY1GTE0:        cp      0                               ; if y1 > 256
                        jr      z,.OnScreenY1LT256              ; if noth then do the 128 test
; here y1 > 256 so if y2 is < 128 then we can clip                        
.OnScreenY1GTE0TestY2:  ld      a,ixh
                        test    $80                             ; y1 is > 256 test as y2 may be negative
                        jr      nz,.HorizontalTest
                        cp      0                               ; y1 is > 256 y2 may be >256 but
                        jp      nz, .PointsOutofBounds          ; y1 and y2 > 256 so off screen
                        ld      a,ixl
                        test    $80
                        jp      z,  .HorizontalTest             ; if y1 > 256 and y2 < 128 then we can clip
                        jp      .PointsOutofBounds              ; here y1 >256 and y2 >= 128
; if we get here then y1 > 0 and <256
.OnScreenY1LT256:       ld      a,c
                        test    $80
                        jr      nz ,.OnScreenY1GTE0TestY2       ; if y1 > 127 and < 256 then act as if Y1 > 256
                        jp      .HorizontalTest                 ; y1 > 0 and < 128 so we can clip                       
; here y1 < 0 so we just need to know if y2 is negative or not                        
.OnScreenY1Negative:    ld      a,ixh
                        test    $80
                        jp      nz, .PointsOutofBounds          ; y1 and y2 are both negative so out of bounds
                        jr      .HorizontalTest                 ; y1 is negative and y2 positive and may be > 128 but we don't care here
.HorizontalTest:        ld      a,h
                        or      d
                        or      b
                        or      ixh
                        jr      nz,.TestHorizontalVertical
                        ld      a,c
                        or      ixl
                        test    $80
                        jr      nz,.TestHorizontalVertical
                        jp      .ClipDone
;...By this point at least one point is off screen but we have not established if there is any bounding on screen                        
.TestHorizontalVertical:ld      a,l                                 ; if x1 =x2 go to simpleverticalclip
                        cp      e
                        jr      nz,.NonVertical
                        ld      a,h
                        cp      d
                        jp      z,.ClipVertical                        
.NonVertical:           ld      a,ixl                               ; if y1 =y2 go to simplehorizontalclip	
                        cp      c
                        jr      nz,.SwapTest
                        ld      a,ixh
                        cp      b
                        jp      z,.ClipHorizonal
;...By here we have done a fast horizontal or vert clip, elimiated all on screen now elimiate off same side, thisis done in swap test...................
.SwapTest:              ld      a,h                                 ; so now x1 must be > 255 or x1 < 0 so  is x1 negative?
                        cp      0
                        jr      z,.X1InBounds                       ; X1 is on screen so is X2 < or >
                        test    $80                                 ; is x1 negative
                        jr      z,.X1HighTest                     
.X1LowX2Test:           ld      a,d                                 ; if both X1 and X2 are negative them out of bounds
                        test    $80
                        jp      nz,.PointsOutofBounds               ; if x1 and x2 are negative no line required
                        jr      .SwappedDone                        ; so x1 must be < x2
.X1HighTest:            ld      a,d                                 ; x1 is high  so if x2 has no high byte then swap
                        cp      0
                        jp      z,.SwapPoints
                        test    $80                                  
                        jp      nz,.PointsOutofBounds               ; if x2 is not negative then both off right of screen
                        jp      .SwapPoints                         ; so x2 must be less than X1
.X1InBounds:            ld      a,d                                 ; so x1 >0 < 255 now we test X2
                        test    $80
                        jr      nz,.SwapPoints                      ; so X1 +v and X2 -ve so we can swap
                        cp      0                                   ; X2 is < 255
                        jr      nz,.SwappedDone                     ; so x2 > 255 and X1 on screen therefore no swap needed
                        ld      a,l
                        JumpIfALTNusng e,.SwappedDone               ; Now X1 an dX2 are on screen, is X1 < X2 is so no swap
; we swap so x1 < x2, this means x2 - x1 is positive eliminating some branches in the code
.SwapPoints:
.SwapCanProceed:        ex      de,hl                               ; here x1 > 255 and x2 must be <=255 so we swap
                        push    ix                                  ;                                        swap Y coordinates
                        push    bc
                        pop     ix
                        pop     bc
                        jr      .SwappedDone
.X1negative:            ld      a,d                                 ; now now x1 must be < 0
                        and     $80
                        jp      z,.PointsOutofBounds                ; both negative so out of bounds
                        jr      .SwappedDone                        ; no swapping needed as x1 < 0 and to be in still not discarded x2 must be >0
;..................................................................................................................................
.SwappedDone:           push    hl,,de,,bc
.CalcDx:                ex      de,hl                               ; now calculate delta x of x2-x1
                        or      a
                        sbc     hl,de                               ; x2 - x1 which mut always be positive
                        ld      (clipDx),hl
.CalcDy:                ld      hl,ix
                        or      a
                        sbc     hl,bc
                        ld      (clipDy),hl                         ; now we have signed Dy
; If the angle is extreme then it will be clamped at +/- 127.255 - given it has to fit on the screen from 3d maths is it unlikley to hit extremes
; note as we sort then dxy must always be +ve
.DivideDxDy:            ld      hl,(clipDx)
                        ld      de,(clipDy)
.DivideDxDyLoop:        ld      a,h
                        or      d
                        jr      z,.DivideDxDyDone:
                        ShiftDERight1
                        ShiftHLRight1
                        jr      .DivideDxDyLoop
.DivideDxDyDone:        ld      (clipDx),hl
                        ld      (clipDy),de     
.CalcDxy:               ld      hl,(clipDx)
                        ld      de,(clipDy)
.PosXCalcDxy:           ld      a,d                                 ; is Dy positive or negative
                        test     $80                                ;
                        jr      z,.PosYCalcDxy                      ;
                        macronegate16de
.PosYCalcDxy:           ld      b,l                                 ; calculate divide
                        ld      c,0
                        ld      d,e
                        ld      e,0
                        call    BC_Div_DE_88
                        ld      bc,de   ; JUST FOR NOW TODO DEBUG
                        ld      a,b
                        test    $80
                        jr      z,.DxyNoClampBC
                        ld      b,$7F                               ; bc = S7.7 but sign not evaluated yet
.DxyNoClampBC:          ;ld      a,iyh
                        ;or      b; we will go with signed for now
                        ;ld      b,a
;                        macronegate16bc                             ; looks ok, need to turn remainder into a 8 bit fraction though
.DxyPositive:           ld      (clipDxy),bc
; multiply fraction later by e to get decimal poiny not remainder
.CalcDyx:               ld      hl,(clipDy)                         ; Dyx = DeltaY / DeltaX
                        ld      de,(clipDx)                         ;
                        ld      iyh,0
                        ld      a,h                                 ; is Dx positive or negative
                        test    $80                                 ;
                        jr      z,.PosXCalcDyx                      ; hl = ABS(clipDx)
.NexXCalcDyx:           ld      iyh,$80
                        macronegate16hl
.PosXCalcDyx:           ld      a,d                                 ; is Dy positive or negative
                        test     $80                                ;
                        jr      z,.PosYCalcDyx                      ;
                        ld      a,iyh                               ; de = ABS(clipDy)
                        xor     $80                                 ; flip sign if opposites on divide
                        ld      iyh,a
                        macronegate16de
.PosYCalcDyx:           ld      b,l                                 ; calculate divide
                        ld      c,0
                        ld      d,e
                        ld      e,0
                        call    BC_Div_DE_88
                        ld      bc,de   ; JUST FOR NOW TODO DEBUG
                        ld      a,b
                        test    $80
                        jr      z,.DyxNoClampBC
                        ld      b,$7F                               ; bc = S7.7 but sign not evaluated yet
.DyxNoClampBC:          ld      a,iyh
                        or      b; we will go with signed for now
                        ld      b,a
.DyxPositive:           ld      (clipDyx),bc
                        pop     hl,,de,,bc
; so now we have x pos sorted Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
.CheckX1Negative:      ; break
                        ld      a,h                                 ; if x1 is negative     go to x1outofboundsclip else x1 must be on screen
                        test    $80
                        jr      nz,.X1OutofBoundsClip
.CheckX2High:           ld      a,d                                 ; if x2 byte 2 not zero go to x2outofboundsclip
                        cp      0
                        jr      nz,.X2OutofBoundsClip
.CheckY1High:           ld      a,b                                 ; if y1 high byte set   go to y1outofboundsclip
                        cp      0
                        jp      nz,.Y1OutofBoundsClip
                        ld      a,c
                        test    $80
                        jp      nz,.Y1OutofBoundsClip
.CheckY2High:           ld      a,ixh                               ; if y2 high byte set   go to y2outofboundsclip
                        cp      0
                        jp      nz,.Y2OutofBoundsClip
                        ld      a,ixl
                        test    $80
                        jr      nz,.Y2OutofBoundsClip
.ClipDone:              ld      a,c
                        ld      (UBnkNewY1),a
                        ld      a,ixl
                        ld      (UBnkNewY2),a
                        ld      a,l
                        ld      (UBnkNewX1),a
                        ld      a,e
                        ld      (UBnkNewX2),a
                        ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
                        ret                                 ; 2nd pro different, it swops based on swop flag around here.
                        ;LL109:  
.PointsOutofBounds:     scf                                 ; carry flag set as not visible
                        ret
; we have already tested for ----        if x1 and x2 negative, no draw exit ; at thsi point x1 must be < 255 else out of                  
; x1outofboundsclip:
;    y1 = y1 + ( dyx  * ABS(x1))
;    x1 = 0
;    fall into x2outofboundsclip
; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
.X1OutofBoundsClip:     ld      a,d
                        test    $80
                        jp      nz,.PointsOutofBounds               ; x1 must be negative, so if x2 is negative we can't draw the line
                        push    de
                        macronegate16hl                             ; hl = ABS x1
                        ld      de,(clipDyx)
                        ld      h,0
                        call    mulDEbyHLSgnTo2c                    ; bc = ABS x1 & dyx
                        add     hl,bc
                        ld      bc,hl                               ; y1 = ( dyx  * ABS(x1))+y1
                        ld      hl,0                                ; x1 = 0
                        pop     de                                  ; fall into x2outofboundsclip
; x2outofboundsclip:
;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
;                            y1 = 0
;                      else if y1 > 128 then y1 = 128
;                                            x1 = x1 + (dxy * (128-y1))
;    if x2 > 255 then y2 = y2 - (dxy * (255âˆ’x2))
;                     x2 = 255
;    end if
;    goto  y2outofboundsclip
; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
.X2OutofBoundsClip:     call    .Y1OutofBoundsFix
                        ld      a,d                                 ; if x2 > 255 then x2 = 255
                        cp      0                                   ;
                        jp      z,.Y2OutofBoundsClip                ; y2 = (dyx * (255âˆ’x1))+y1                       
.X2ClipHigh:            push    hl,,de                              ; SP+2
                        ex      hl,de                               ; hl = X2
                        ld      de,255                              ;
                        or      a                                   ;
                        sbc     hl,de                               ; hl = x2-255
                        ld      de,(clipDyx)                        ;
                        ;break                                      ;
                        ld      h,0                                 ; Note HL can never be negative as x2 to clip must be > 255
                        ;ld      l,0                                 ;
                        call    mulDEbyHLSgnTo2c                    ; hl= (dyx * (x2-255)
                        ld      de,ix                               ; de = Y2
                        ex      de,hl                               ; hl = Y2, de = (dyx * (x2-255)
.X2NegativeE:           ld      e,d                                 ; as it was 16 bit and we are moving down to 8 bit
                        ld      d,0                                 ; the SBC is 16 bit - 8 bit so we need to make sure
                        ld      a,e                                 ; that the sign is handled
                        test    $80                                 ;
                        jr      z,.X2NotNegE                        ;
                        ld      d,$FF                               ;
.X2NotNegE:             or      a
                        sbc     hl,de                               ; hl = y2-(dyx * (x2-255)) 
                        push    hl                                  ; ix = (dyx * (255âˆ’x1))+y1    
                        pop     ix                                  ;
                        pop     de                                  ; Point 2 = X (de)
                        pop     hl                                  ; Point 1 = X(hl)
                        ld      de,255                              ; x2 = 255
.X2OoBX2InBounds:       jp      .Y2OutofBoundsClip  
; y1outofboundsclip - to get to here x1 and x2 must be on screen
;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
;                            y1 = 0
;                      else if y1 > 128 then x1 = x1 - (dxy * (128-y1))
;                                            y1 = 128
;                            
;    fall into y2outofboundsclip
; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
.Y1OutofBoundsClip:     call    .Y1OutofBoundsFix                   ; y1outofboundsclip - to get to here x1 and x2 must be on screen
.Y2OutofBoundsClip:     ld      a,ixh                               ; test if  y2 is negative
                        test    $80                                 ;
                        jr      z,.Y2OoBYGTE128                     ; in thsi case ixh is +ve so is it > 1287
.Y2OoBY1Neg:            push    hl,,de                              ; ixh is negative so save x1 and x2
                        macronegate16ix                             ; ix = ABS (y2)
                        ld      de,(clipDxy)                        ; de = gradient x/y
                        ld      hl,ix                               ; hl = abs (y2)
                        ;break
                        ld      h,0
                        ;ld      l,c                        
                        call    mulDEbyHLSgnTo2c                    ; HL = dxy * ABS(y2)
                        ex      de,hl                               ; de = dxy * ABS(y2)
.Y2NegativeE:           ld      e,d                                 ; as it was 16 bit and we are moving down to 8 bit
                        ld      d,0                                 ; the SBC is 16 bit - 8 bit so we need to make sure
                        ld      a,e                                 ; that the sign is handled
                        test    $80
                        jr      z,.Y2NotNegE
                        ld      d,$FF                               ;
.Y2NotNegE:             or      a
                        pop     hl                                  ; hl = x2 (pushed from de)
                        sbc     hl,de                               ; x2 - (dxy * (y2-128))
                        ex      de,hl                               ; de = x2
                        pop     hl
                        ld      ix,0                                ; y2 = 0
                        jp      .ClipDone
.Y2OoBYGTE128:          cp      0                                   ; if y2 > 128
                        jr      nz,.Y2ClipHigh                      ;
                        ld      a,ixl                               ;
                        test    $80                                 ;
                        jp      z,.ClipDone                         ;                                
; y2outofboundsclip - to get to here x1 and x2 must be on screen and y1
;    if y2 is negative then  x2 = x2 + (dxy * ABS(y2))
;                            y2 = 0
;                      else  if y2 > 128 then x2 = x2 - (dxy * (128-y2))
;                                             y2 = 128
; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)                      
.Y2ClipHigh:            push    hl,,de                              ; Save X1 and X2
                        ld      hl,ix                               ; hl = Y2
                        ld      de,128                              ; de = edge 
                        or      a                                   ;
                        sbc     hl,de                               ;(y2-128) hl can never be negative if we got here
                        ld      de,(clipDxy)                        ;
                        ld      h,0
                         call    mulDEbyHLSgnTo2c                    ; (dxy * (y2-128))
.Y2HiNegativeE:         ld      e,d                                 ; as it was 16 bit and we are moving down to 8 bit
                        ld      d,0                                 ; the SBC is 16 bit - 8 bit so we need to make sure
                        ld      a,e                                 ; that the sign is handled
                        test    $80
                        jr      z,.Y2HiNotNegE
                        ld      d,$FF                               ;
.Y2HiNotNegE:           or      a
                        pop     hl                                  ; retrieve X2 (which was pushed as de)
                        sbc     hl,de                               ; hl = x2 - (dxy * (y2-128))
                        ex      de,hl                               ; de = x2 - (dxy * (y2-128))
                        pop     hl
                        ld      ix,127
                        jp     .ClipDone
.ClipVertical:          ld      a,h                                 ; if we are doing vertical then de == hl so if h is <> 0 its off screen
                        cp      0
                        jp      z,.PointsOutofBounds
.ClipVertY1Neg:         ld      bc,0
                        jr      .ClipVertTestY2
.ClipVertY1NotNeg:      cp      0
                        jr      z,.ClipVertY1128
                        ld      bc,128
                        jp      .ClipVertTestY2
.ClipVertY1128:         ld      a,c
                        test    $80
                        jr      z,.ClipVertTestY2
                        ld      bc,128
.ClipVertTestY2:        ld      a,ixh
                        test    $80
                        jr      z,.ClipVertY2NotNeg
.ClipVertY2Neg:         ld      ix,0
                        jp     .ClipDone
.ClipVertY2NotNeg:      cp      0
                        jr      z,.ClipVertY2128
                        ld      ix,127
                        jp     .ClipDone
.ClipVertY2128:         ld      a,c
                        test    $80
                        jp      z,.ClipDone
                        ld      ix,127
                        jp     .ClipDone
.ClipHorizonal          ld      a,b                                 ; if we are doing vertical then bc == ix so if x is <> 0 its off screen
                        cp      0
                        jp      z,.PointsOutofBounds
                        ld      a,c
                        test    $80
                        jp      nz,.PointsOutofBounds               ; now elimintate > 128
                        ld      a,h
                        test    $80
                        jr      z,.ClipHorzX1NotNeg
.ClipHorzX1Neg:         ld      hl,0
                        jr      .ClipHorzTestX2
.ClipHorzX1NotNeg:      cp      0
                        jr      z,.ClipHorzX2Neg
                        ld      hl,255
.ClipHorzTestX2:        ld      a,d
                        test    $80
                        jr      z,.ClipHorzX2NotNeg
.ClipHorzX2Neg:         ld      de,0
                        jp      .ClipDone
.ClipHorzX2NotNeg:      cp      0
                        jp      z,.ClipDone
                        ld      de,255
                        jp     .ClipDone
;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
;                            y1 = 0
;                      else if y1 > 128 then y1 = 128
;                                            x1 = x1 + (dxy * (128-y1))
; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
.Y1OutofBoundsFix:      ld      a,b                                 ;  if y1 is negative then
                        test    $80                                 ;
                        jr      z,.Y1OoBYGTE128                     ;
.Y1OoBY1Neg:            macronegate16bc                             ; bc = abs y1
                        push    de,,hl                              ;
                        ld      de,(clipDxy)                        ; de = x/y gradient
                        ld      h,0
                        ld      l,c
                        call    mulDEbyHL                           ; hl = nbr of pixel we would have traversed x
                        ld      e,h
                        ld      d,0
                        pop     hl
                        add     hl,de                               ; x1 = (dxy * ABS(y1)) + x1
                        ld      a,h
                        cp      0
                        jr      z, .Y1NoClampX1                       ; in extreme angles X1 can go > 255 due to rounding
                        ld      hl,$FF
.Y1NoClampX1            pop     de
                        ld      bc,0                                ; y1 = 0
                        ret
.Y1OoBYGTE128:          cp      0                                   ; is y1 > 255
                        jr      nz,.Y1ClipHigh                      ;
                        ld      a,c
                        test    $80
                        ret     z
.Y1ClipHigh:            push    de,,hl                              ; so y1 > 128
                        ld      hl,bc; need to fix thi
                        ld      bc,128                              
                        or      a   
                        sbc     hl,bc                               ; hl = y1 - 128
                        ld      de,(clipDxy)
; hl can be negative
                        ld      l,h
                        ld      h,0                                 
                        call    mulDEbyHLSgnTo2c
                        pop     hl                                  ; get back X1
                        or      a
                        sbc     hl,de                               ; hl = x1 - ((y1-128 ) & dxy)
                        ld      bc,127
                        pop     de                                  ; recover X2
                        ret
