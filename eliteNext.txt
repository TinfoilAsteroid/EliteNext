# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               CSPECTMAP eliteNext.map
   3  0000               OPT --zxnext=cspect --syntax=a
   4  0000
   5  0000              DEBUGSEGSIZE   equ 1
   6  0000              DEBUGLOGSUMMARY equ 1
   7  0000              ;DEBUGLOGDETAIL equ 1
   8  0000
   9  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  10  0000              ; Game Defines
  11  0000              ScreenLocal     EQU 0
  12  0000              ScreenGalactic  EQU ScreenLocal + 1
  13  0000              ScreenMarket    EQU ScreenGalactic + 1
  14  0000              ScreenMarketDsp EQU ScreenMarket + 1
  15  0000              ScreenStatus    EQU ScreenMarketDsp + 1
  16  0000              ScreenInvent    EQU ScreenStatus + 1
  17  0000              ScreenPlanet    EQU ScreenInvent + 1
  18  0000              ScreenEquip     EQU ScreenPlanet + 1
  19  0000              ScreenLaunch    EQU ScreenEquip + 1
  20  0000              ScreenFront     EQU ScreenLaunch + 1
  21  0000              ScreenAft       EQU ScreenFront+1
  22  0000              ScreenLeft      EQU ScreenAft+2
  23  0000              ScreenRight     EQU ScreenLeft+3
  24  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  25  0000              ; Colour Defines
  26  0000              L2ColourBLACK           EQU   0
  27  0000              L2ColourRED             EQU 224
  28  0000              L2ColourRED_MED         EQU 128
  29  0000              L2ColourRED_DRK         EQU  32
  30  0000              L2ColourRED_1           EQU L2ColourRED_MED
  31  0000              L2ColourRED_2           EQU  96
  32  0000              L2ColourRED_3           EQU  64
  33  0000              L2ColourRED_4           EQU L2ColourRED_DRK
  34  0000              L2ColourDARK_RED        EQU L2ColourRED_DRK
  35  0000              L2ColourYELLOW          EQU 252
  36  0000              L2ColourYELLOW_MED      EQU 144
  37  0000              L2ColourYELLOW_DRK      EQU  72
  38  0000              L2ColourYELLOW_1	    EQU L2ColourYELLOW_MED
  39  0000              L2ColourYELLOW_2        EQU L2ColourYELLOW_DRK
  40  0000              L2ColourGREEN           EQU  29
  41  0000              L2ColourGREEN_MED       EQU  16
  42  0000              L2ColourGREEN_DRK       EQU   8
  43  0000              L2ColourGREEN_1		    EQU L2ColourGREEN
  44  0000              L2ColourGREEN_2		    EQU L2ColourGREEN_MED
  45  0000              L2ColourGREEN_3		    EQU L2ColourGREEN_DRK
  46  0000              L2ColourWHITE           EQU 255
  47  0000              L2ColourWHITE_MED       EQU 146
  48  0000              L2ColourWHITE_DRK       EQU  73
  49  0000              L2ColourWHITE_1         EQU L2ColourWHITE_MED
  50  0000              L2ColourWHITE_2         EQU L2ColourWHITE_DRK
  51  0000              L2ColourGREY_1		    EQU 146
  52  0000              L2ColourGREY_2		    EQU 109
  53  0000              L2ColourGREY_3		    EQU  73
  54  0000              L2ColourGREY_4		    EQU  37
  55  0000              L2ColourMAGENTA         EQU 218
  56  0000              L2ColourMAGENTA_MED     EQU 130
  57  0000              L2ColourMAGENTA_DRK     EQU  65
  58  0000              L2ColourORANGE          EQU 236
  59  0000              L2ColourORANGE_MED      EQU 168
  60  0000              L2ColourORANGE_DRK      EQU  68
  61  0000              L2ColourBLUE            EQU   3
  62  0000              L2ColourBLUE_MED        EQU   2
  63  0000              L2ColourBLUE_DRK        EQU   1
  64  0000              L2ColourBLUE_1          EQU 111
  65  0000              L2ColourBLUE_2		    EQU  39
  66  0000              L2ColourBLUE_3		    EQU L2ColourBLUE_MED
  67  0000              L2ColourBLUE_4		    EQU L2ColourBLUE_DRK
  68  0000              L2ColourCYAN            EQU  31
  69  0000              L2ColourCYAN_MED        EQU  18
  70  0000              L2ColourCYAN_DRK        EQU   9
  71  0000              L2ColourPURPLE          EQU 109
  72  0000              L2ColourPURPLE_MED      EQU  66
  73  0000              L2ColourPURPLE_DRK      EQU  33
  74  0000              L2ColourPINK_1		    EQU 231
  75  0000              L2ColourPINK_2		    EQU 226
  76  0000              L2ColourPINK_3		    EQU 225
  77  0000              L2ColourPINK_4		    EQU 224
  78  0000              L2ColourTRANSPARENT     EQU $E3
  79  0000
  80  0000
  81  0000              L1ColourInkBlack        EQU %00000000
  82  0000              L1ColourInkBlue         EQU %00000001
  83  0000              L1ColourInkRed          EQU %00000010
  84  0000              L1ColourInkMagenta      EQU %00000011
  85  0000              L1ColourInkGreen        EQU %00000100
  86  0000              L1ColourInkCyan         EQU %00000101
  87  0000              L1ColourInkYellow       EQU %00000110
  88  0000              L1ColourInkWhite        EQU %00000111
  89  0000              L1ColourPaperBlack      EQU %00000000
  90  0000              L1ColourPaperBlue       EQU %00001000
  91  0000              L1ColourPaperRed        EQU %00010000
  92  0000              L1ColourPaperMagenta    EQU %00011000
  93  0000              L1ColourPaperGreen      EQU %00100000
  94  0000              L1ColourPaperCyan       EQU %00101000
  95  0000              L1ColourPaperYellow     EQU %00110000
  96  0000              L1ColourPaperWhite      EQU %00111000
  97  0000              L1ColourFlash           EQU %10000000
  98  0000              L1ColourBright          EQU %01000000
  99  0000
 100  0000              ;----------------------------------------------------------------------------------------------------------------------------------
 101  0000              ; Screen Specific Colour Defines
 102  0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
 103  0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
 104  0000              ;----------------------------------------------------------------------------------------------------------------------------------
 105  0000              ; Total screen list
 106  0000              ; Local Chart
 107  0000              ; Galactic Chart
 108  0000              ; Market Prices
 109  0000              ; Inventory
 110  0000              ; Comander status
 111  0000              ; System Data
 112  0000              ; Mission Briefing
 113  0000              ; missio completion
 114  0000              ; Docked  Menu (only place otehr than pause you can load and save)
 115  0000              ; Pause Menu (only place you can load from )
 116  0000              ; byint and selling equipment
 117  0000              ; bying and selling stock
 118  0000
 119  0000                  INCLUDE "Hardware/register_defines.asm"
# file opened: Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: Hardware/register_defines.asm
 120  0000                  INCLUDE "layer2_defines.asm"
# file opened: Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  DEFINE  DOUBLEBUFFER 1
  16+ 0000                  IFDEF DOUBLEBUFFER
  17+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  18+ 0000                  ELSE
  19+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  20+ 0000                  ENDIF
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  22+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  23+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  24+ 0000
  25+ 0000              LAYER2_SCREEN_BANK1          equ 8
  26+ 0000              LAYER2_SCREEN_BANK2          equ 9
  27+ 0000              LAYER2_SCREEN_BANK3          equ 10
  28+ 0000              LAYER2_SHADOW_BANK1          equ 11
  29+ 0000              LAYER2_SHADOW_BANK2          equ 12
  30+ 0000              LAYER2_SHADOW_BANK3          equ 13
  31+ 0000
  32+ 0000              SCREEN_HEIGHT 				 equ 192
  33+ 0000              SCREEN_RAM_BASE				 equ $0000
  34+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  35+ 0000
  36+ 0000              SPRITES_VISIBLE_MASK         equ $01
  37+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  38+ 0000              LAYER_PRIORITIES_MASK        equ $07
  39+ 0000              LORES_MODE_MASK              equ $80
  40+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  41+ 0000
  42+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  43+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  44+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  45+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  46+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  47+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  48+ 0000
  49+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  50+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  51+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  52+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  53+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  54+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  55+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  56+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  57+ 0000              DMA_WR4_CONT_MODE            equ $AD
  58+ 0000              DMA_RESET                    equ $c3
  59+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  60+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  61+ 0000              DMA_LOAD                     equ $cf
  62+ 0000              DMA_CONTINUE                 equ $d3
  63+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  64+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  65+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  66+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  67+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  68+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  69+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  70+ 0000              DMA_FORCE_READY              equ $b3
  71+ 0000              DMA_STOP_AT_END			     equ $82
  72+ 0000              DMA_DISABLE                  equ $83
  73+ 0000              DMA_ENABLE                   equ $87
  74+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  75+ 0000              DMA_BURST                    equ $cd
  76+ 0000              DMA_CONTINUOUS               equ $ad
  77+ 0000              ZXN_DMA_PORT                 equ $6b
  78+ 0000
  79+ 0000
  80+ 0000              COLOUR_TRANSPARENT			 equ $E3
  81+ 0000
  82+ 0000
  83+ 0000
  84+ 0000
# file closed: Layer2Graphics/layer2_defines.asm
 121  0000                  INCLUDE	"memory_bank_defines.asm"
# file opened: Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              UniverseBankAddr	    equ $c000
  25+ 0000              LaunchShipAddr          equ $c000
  26+ 0000              membank7 			    equ $e000
  27+ 0000              L1membankAddr   	    equ $e000
  28+ 0000              L2membankAddr   	    equ $e000
  29+ 0000              ShipmodelbankAddr	    equ $e000
  30+ 0000              SpritemembankAddr       equ $e000
  31+ 0000              ResetUniverseAddr       equ $e000
  32+ 0000              StockTableAddr	        equ $e000
  33+ 0000              CMDRDATAAddr            equ $e000
  34+ 0000              LAYER2Addr              equ $e000
  35+ 0000              LAYER1Addr              equ $e000
  36+ 0000              SPRITEAddr              equ $e000
  37+ 0000              ConsoleImageAddr        equ $e000
  38+ 0000              GalaxyDataAddr          equ $e000
  39+ 0000
  40+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  41+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  42+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  43+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  44+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  45+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  46+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  53+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  54+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  55+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  56+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  57+ 0000              CmdrDataMMU			    equ MMU_SLOT_7_REGISTER
  58+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  60+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  61+ 0000
  62+ 0000              BankResetUniv           equ 49
  63+ 0000              BankMenuShrCht          equ 50
  64+ 0000              BankMenuGalCht          equ 51
  65+ 0000              BankMenuInvent          equ 52
  66+ 0000              BankMenuSystem          equ 53
  67+ 0000              BankMenuMarket          equ 54
  68+ 0000              BankStockTable          equ 55
  69+ 0000              BankCmdrData            equ 56
  70+ 0000              BankLAYER2              equ 57
  71+ 0000              BankLAYER1              equ 58
  72+ 0000              BankSHIPMODELS          equ 59
  73+ 0000              BankSPRITE              equ 60
  74+ 0000              BankConsole             equ 61
  75+ 0000              BankFrontView           equ 62
  76+ 0000              BankMenuStatus          equ 63
  77+ 0000              BankMenuEquipS          equ 64
  78+ 0000              BankLaunchShip          equ 65
  79+ 0000              BankDispMarket          equ 66
  80+ 0000
  81+ 0000              BankUNIVDATA0           equ 70
  82+ 0000              BankUNIVDATA1           equ 71
  83+ 0000              BankUNIVDATA2           equ 72
  84+ 0000              BankUNIVDATA3           equ 73
  85+ 0000              BankUNIVDATA4           equ 74
  86+ 0000              BankUNIVDATA5           equ 75
  87+ 0000              BankUNIVDATA6           equ 76
  88+ 0000              BankUNIVDATA7           equ 77
  89+ 0000              BankUNIVDATA8           equ 78
  90+ 0000              BankUNIVDATA9           equ 79
  91+ 0000              BankUNIVDATA10          equ 80
  92+ 0000              BankUNIVDATA11          equ 81
  93+ 0000              BankUNIVDATA12          equ 82
  94+ 0000
  95+ 0000              BankGalaxyData0         equ 91
  96+ 0000              BankGalaxyData1         equ 92
  97+ 0000              BankGalaxyData2         equ 93
  98+ 0000              BankGalaxyData3         equ 94
  99+ 0000              BankGalaxyData4         equ 95
 100+ 0000              BankGalaxyData5         equ 96
 101+ 0000              BankGalaxyData6         equ 97
 102+ 0000              BankGalaxyData7         equ 98
 103+ 0000
# file closed: Hardware/memory_bank_defines.asm
 122  0000                  INCLUDE "screen_equates.asm"
# file opened: Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: Hardware/screen_equates.asm
 123  0000
 124  0000                  INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipModels: MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankSHIPMODELS
  23+ 0000              					 ENDM
  24+ 0000
  25+ 0000              MMUSelectShipModelA: MACRO
  26+ 0000 ~            					 nextreg ShipModelMMU,	    a
  27+ 0000              					 ENDM
  28+ 0000
  29+ 0000              MMUSelectShipModelN: MACRO value
  30+ 0000 ~            					 nextreg ShipModelMMU,	    value
  31+ 0000              					 ENDM
  32+ 0000
  33+ 0000              MMUSelectCmdrData:	 MACRO
  34+ 0000 ~                                 nextreg CmdrDataMMU,       BankCmdrData
  35+ 0000              					 ENDM
  36+ 0000
  37+ 0000              MMUSelectStockTable: MACRO
  38+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  39+ 0000              					 ENDM
  40+ 0000
  41+ 0000              MMUSelectCpySrcA:    MACRO
  42+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  43+ 0000              					 ENDM
  44+ 0000
  45+ 0000              MMUSelectCpySrcN:    MACRO value
  46+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  47+ 0000              					 ENDM
  48+ 0000
  49+ 0000              MMUSelectUniverseA:  MACRO
  50+ 0000 ~                                 nextreg UniverseMMU,       a
  51+ 0000                                   ENDM
  52+ 0000
  53+ 0000              MMUSelectUniverseN:  MACRO value
  54+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  55+ 0000                                   ENDM
  56+ 0000
  57+ 0000              MMUSelectGalaxyA:    MACRO
  58+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  59+ 0000                                   ENDM
  60+ 0000
  61+ 0000              MMUSelectGalaxyN:    MACRO value
  62+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  63+ 0000                                   ENDM
  64+ 0000              MMUSelectGalaxyACopy:MACRO
  65+ 0000 ~                                 nextreg UniverseMMU,       a
  66+ 0000                                   ENDM
  67+ 0000
  68+ 0000              MMUSelectUniverseAbs:MACRO value
  69+ 0000 ~                                 nextreg UniverseMMU,       value
  70+ 0000                                   ENDM
  71+ 0000
  72+ 0000              MMUSelectMenuGalCht: MACRO
  73+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectMenuShrCht: MACRO
  77+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectMenuInvent: MACRO
  81+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
  82+ 0000              					 ENDM
  83+ 0000
  84+ 0000              MMUSelectMenuSystem: MACRO
  85+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
  86+ 0000              					 ENDM
  87+ 0000
  88+ 0000              MMUSelectMenuMarket: MACRO
  89+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
  90+ 0000              					 ENDM
  91+ 0000
  92+ 0000              MMUSelectMenuStatus: MACRO
  93+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
  94+ 0000              					 ENDM
  95+ 0000
  96+ 0000              MMUSelectViewFront:  MACRO
  97+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
  98+ 0000              					 ENDM
  99+ 0000
 100+ 0000              MMUSelectScreenA:    MACRO
 101+ 0000 ~                                 nextreg ScreenBankMMU,		a
 102+ 0000              					 ENDM
 103+ 0000
# file closed: ./Macros/MMUMacros.asm
 125  0000                  INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000              ShiftBCLeft1:  MACRO
  47+ 0000 ~            			   sla b
  48+ 0000 ~            			   rl  c
  49+ 0000              			   ENDM
  50+ 0000
  51+ 0000              ShiftMem16Right1:   MACRO memaddr
  52+ 0000 ~                                ld    hl,(memaddr)
  53+ 0000 ~                                srl   h
  54+ 0000 ~                                rr    l
  55+ 0000 ~                                ld    (memaddr),hl
  56+ 0000                                  ENDM
  57+ 0000
  58+ 0000              ShiftMem8Right1:    MACRO memaddr
  59+ 0000 ~                                ld      a,(memaddr)
  60+ 0000 ~                                srl     a
  61+ 0000 ~                                ld      (memaddr),a
  62+ 0000                                  ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ShiftMem8Left1A:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                sla     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
# file closed: ./Macros/ShiftMacros.asm
 126  0000                  INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
# file closed: ./Macros/CopyByteMacros.asm
 127  0000                  INCLUDE "./Macros/GeneralMacros.asm"
# file opened: ./Macros/GeneralMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p,target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m,target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  10+ 0000 ~                                    ld      a,(mem)
  11+ 0000 ~                                    bit 	bitnbr,a
  12+ 0000 ~                                    jp      nz,target
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  16+ 0000 ~                                    ld      a,(mem)
  17+ 0000 ~                                    bit 	bitnbr,a
  18+ 0000 ~                                    jp      z,target
  19+ 0000                                      ENDM
  20+ 0000
  21+ 0000
  22+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    jp      nz,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  28+ 0000 ~                                    bit 	bitnbr,reg
  29+ 0000 ~                                    jp      z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
  33+ 0000 ~                                    bit 	bitnbr,reg
  34+ 0000 ~                                    ret     nz
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  38+ 0000 ~                                    ld   a,(mem)
  39+ 0000 ~                                    bit 	bitnbr,a
  40+ 0000 ~                                    ret     nz
  41+ 0000                                      ENDM
  42+ 0000
  43+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  44+ 0000 ~                                    bit 	bitnbr,reg
  45+ 0000 ~                                    ret		z
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  49+ 0000 ~                                    ld     a,(mem)
  50+ 0000 ~                                    bit 	bitnbr,a
  51+ 0000 ~                                    ret		z
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              JumpIfAGTEusng:         MACRO
  55+ 0000 ~                                    jp		nc,target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfAGTENusng:        MACRO reg,target
  59+ 0000 ~                                    cp     reg
  60+ 0000 ~                                    jp		nc,target
  61+ 0000                                      ENDM
  62+ 0000
  63+ 0000
  64+ 0000              CallIfAGTENusng:        MACRO   reg,target
  65+ 0000 ~                                    cp      reg
  66+ 0000 ~                                    call	nc,target
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  70+ 0000 ~                                    ld     a,(mem)
  71+ 0000 ~                                    cp     value
  72+ 0000 ~                                    jp	  nc,target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              JumpIfMemGTEMemusng:    MACRO mem, value, target
  76+ 0000 ~                                    ld   a,(mem)
  77+ 0000 ~                                    ld   hl,value
  78+ 0000 ~                                    cp   (hl)
  79+ 0000 ~                                    jp	  nc,target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000
  83+ 0000              JumpIfALTusng:          MACRO target
  84+ 0000 ~                                    jp		c,target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              JumpIfALTNusng:         MACRO value, target
  88+ 0000 ~                                    cp      value
  89+ 0000 ~                                    jp		c,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
  93+ 0000 ~                                    ld      a,(mem)
  94+ 0000 ~                                    cp      value
  95+ 0000 ~                                    jp	  c,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
  99+ 0000 ~                                    ld    a,(mem)
 100+ 0000 ~                                    ld    hl,value
 101+ 0000 ~                                    cp    (hl)
 102+ 0000 ~                                    jp	  c,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpIfALTMemHLusng:     MACRO target
 106+ 0000 ~                                    cp    (hl)
 107+ 0000 ~                                    jp	  c,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpIfANENusng: MACRO value, target
 111+ 0000 ~                            cp     value
 112+ 0000 ~                            jp      nz,target
 113+ 0000                              ENDM
 114+ 0000
 115+ 0000              JumpIfANEMemusng: MACRO  value, target
 116+ 0000 ~                              ld    hl,value
 117+ 0000 ~                              cp    (hl)
 118+ 0000 ~                              jp      nz,target
 119+ 0000                                ENDM
 120+ 0000
 121+ 0000              JumpIfAEqNusng: MACRO value, target
 122+ 0000 ~                            cp     value
 123+ 0000 ~                            jp      z,target
 124+ 0000                              ENDM
 125+ 0000
 126+ 0000              IfAIsZeroGoto:	MACRO target
 127+ 0000 ~            				cp	0
 128+ 0000 ~            				jp	z,target
 129+ 0000              				ENDM
 130+ 0000
 131+ 0000              IfANotZeroGoto:	MACRO target
 132+ 0000 ~            				cp	0
 133+ 0000 ~            				jp	nz,target
 134+ 0000              				ENDM
 135+ 0000
 136+ 0000              IfResultZeroGoto:	MACRO target
 137+ 0000 ~            					jp	z,target
 138+ 0000              					ENDM
 139+ 0000
 140+ 0000              IfResultNotZeroGoto:MACRO target
 141+ 0000 ~            					jp	nz,target
 142+ 0000              					ENDM
 143+ 0000
 144+ 0000              ReturnIfAIsZero: MACRO
 145+ 0000 ~                             cp     0
 146+ 0000 ~                             ret    z
 147+ 0000                               ENDM
 148+ 0000
 149+ 0000              ReturnIfMemisZero: MACRO mem
 150+ 0000 ~                               ld   a,(mem)
 151+ 0000 ~                               cp     0
 152+ 0000 ~                               ret    z
 153+ 0000                                 ENDM
 154+ 0000
 155+ 0000              ReturnIfANotZero: MACRO
 156+ 0000 ~                              cp     0
 157+ 0000 ~                              ret    nz
 158+ 0000                                ENDM
 159+ 0000
 160+ 0000              ReturnIfMemNotZero: MACRO mem
 161+ 0000 ~                                ld     a,(mem)
 162+ 0000 ~                                cp     0
 163+ 0000 ~                                ret    nz
 164+ 0000                                  ENDM
 165+ 0000
 166+ 0000              ReturnIfAGTEusng: MACRO value
 167+ 0000 ~            				  cp    value
 168+ 0000 ~                              ret	 nc
 169+ 0000                                ENDM
 170+ 0000
 171+ 0000              ReturnIfALTNusng:  MACRO value
 172+ 0000 ~                               cp    value
 173+ 0000 ~                               ret	 c
 174+ 0000                                 ENDM
 175+ 0000
 176+ 0000              ReturnIfAGTENusng: MACRO value
 177+ 0000 ~                               cp    value
 178+ 0000 ~                               ret	 nc
 179+ 0000                                 ENDM
 180+ 0000
 181+ 0000              ReturnIfANENusng: MACRO value
 182+ 0000 ~                              cp      value
 183+ 0000 ~                              ret     nz
 184+ 0000                                ENDM
 185+ 0000
 186+ 0000              ReturnIfAEqNusng: MACRO value
 187+ 0000 ~                              cp      value
 188+ 0000 ~                              ret     z
 189+ 0000                                ENDM
 190+ 0000
 191+ 0000
 192+ 0000              ClearCarryFlag:	MACRO
 193+ 0000 ~            				or a
 194+ 0000              				ENDM
 195+ 0000
 196+ 0000              pushbcde:		MACRO
 197+ 0000 ~            	push	bc
 198+ 0000 ~            	push	de
 199+ 0000              	ENDM
 200+ 0000
 201+ 0000              popdebc:		MACRO
 202+ 0000 ~            	pop		de
 203+ 0000 ~            	pop		bc
 204+ 0000              	ENDM
 205+ 0000
 206+ 0000              pushhlde:		MACRO
 207+ 0000 ~            	push	hl
 208+ 0000 ~            	push	de
 209+ 0000              	ENDM
 210+ 0000
 211+ 0000              popdehl:		MACRO
 212+ 0000 ~            	pop		de
 213+ 0000 ~            	pop		hl
 214+ 0000              	ENDM
 215+ 0000
 216+ 0000              pushbcdeaf:		MACRO
 217+ 0000 ~            	push	bc
 218+ 0000 ~            	push	de
 219+ 0000 ~            	push	af
 220+ 0000              	ENDM
 221+ 0000
 222+ 0000              popafdebc:		MACRO
 223+ 0000 ~            	pop		af
 224+ 0000 ~            	pop		de
 225+ 0000 ~            	pop		bc
 226+ 0000              	ENDM
 227+ 0000
 228+ 0000              NegIY:			MACRO
 229+ 0000 ~            	xor a
 230+ 0000 ~            	sub iyl
 231+ 0000 ~            	ld iyl,a
 232+ 0000 ~            	sbc a,a
 233+ 0000 ~            	sub iyh
 234+ 0000 ~            	ld iyh,a
 235+ 0000              	ENDM
 236+ 0000
 237+ 0000              NegHL:			MACRO
 238+ 0000 ~            	xor a
 239+ 0000 ~            	sub l
 240+ 0000 ~            	ld l,a
 241+ 0000 ~            	sbc a,a
 242+ 0000 ~            	sub h
 243+ 0000 ~            	ld h,a
 244+ 0000              	ENDM
 245+ 0000
 246+ 0000              NegDE:			MACRO
 247+ 0000 ~            	xor a
 248+ 0000 ~            	sub e
 249+ 0000 ~            	ld e,a
 250+ 0000 ~            	sbc a,a
 251+ 0000 ~            	sub d
 252+ 0000 ~            	ld d,a
 253+ 0000              	ENDM
 254+ 0000
 255+ 0000
 256+ 0000              NegBC:			MACRO
 257+ 0000 ~            	xor a
 258+ 0000 ~            	sub c
 259+ 0000 ~            	ld c,a
 260+ 0000 ~            	sbc a,a
 261+ 0000 ~            	sub  b
 262+ 0000 ~            	ld b,a
 263+ 0000              	ENDM
 264+ 0000
 265+ 0000              FourLDIInstrunctions:   MACRO
 266+ 0000 ~                                    ldi
 267+ 0000 ~                                    ldi
 268+ 0000 ~                                    ldi
 269+ 0000 ~                                    ldi
 270+ 0000                                      ENDM
 271+ 0000
 272+ 0000              FiveLDIInstrunctions:   MACRO
 273+ 0000 ~                                    ldi
 274+ 0000 ~                                    ldi
 275+ 0000 ~                                    ldi
 276+ 0000 ~                                    ldi
 277+ 0000 ~                                    ldi
 278+ 0000                                      ENDM
 279+ 0000
 280+ 0000              SixLDIInstrunctions:   MACRO
 281+ 0000 ~                                    ldi
 282+ 0000 ~                                    ldi
 283+ 0000 ~                                    ldi
 284+ 0000 ~                                    ldi
 285+ 0000 ~                                    ldi
 286+ 0000 ~                                    ldi
 287+ 0000                                      ENDM
 288+ 0000
 289+ 0000              EightLDIInstrunctions:  MACRO
 290+ 0000 ~            		                ldi
 291+ 0000 ~            		                ldi
 292+ 0000 ~            		                ldi
 293+ 0000 ~            		                ldi
 294+ 0000 ~            		                ldi
 295+ 0000 ~            		                ldi
 296+ 0000 ~            		                ldi
 297+ 0000 ~            		                ldi
 298+ 0000                                      ENDM
 299+ 0000
 300+ 0000              NineLDIInstrunctions:  MACRO
 301+ 0000 ~            		                ldi
 302+ 0000 ~            		                ldi
 303+ 0000 ~            		                ldi
 304+ 0000 ~            		                ldi
 305+ 0000 ~            		                ldi
 306+ 0000 ~            		                ldi
 307+ 0000 ~            		                ldi
 308+ 0000 ~            		                ldi
 309+ 0000 ~            		                ldi
 310+ 0000                                      ENDM
 311+ 0000
# file closed: ./Macros/GeneralMacros.asm
 128  0000                  INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		   MACRO
   2+ 0000 ~            			   xor a
   3+ 0000              			   ENDM
   4+ 0000
   5+ 0000              ldCopyByte:    MACRO memfrom, memto
   6+ 0000 ~                           ld       a,(memfrom)
   7+ 0000 ~                           ld       (memto),a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000
  11+ 0000              ldCopyByteABS: MACRO
  12+ 0000 ~                           ld       a,(memfrom)
  13+ 0000 ~            			   and		$7F
  14+ 0000 ~                           ld       (memto),a
  15+ 0000              			   ENDM
  16+ 0000
  17+ 0000              ldCopy2Byte    MACRO  memfrom, memto
  18+ 0000 ~                           ld       hl,(memfrom)
  19+ 0000 ~                           ld       (memto),hl
  20+ 0000                             ENDM
  21+ 0000
  22+ 0000              ldWriteConst   MACRO  memfrom, memto
  23+ 0000 ~                           ld       a,memfrom
  24+ 0000 ~                           ld       (memto),a
  25+ 0000                             ENDM
  26+ 0000
  27+ 0000              ldWriteZero    MACRO  memto
  28+ 0000 ~                           xor      a
  29+ 0000 ~                           ld       (memto),a
  30+ 0000                             ENDM
  31+ 0000
  32+ 0000              ldIXLaFromN:	MACRO memfrom
  33+ 0000 ~                            ld		a,(memfrom)
  34+ 0000 ~                            ld		ixl,a
  35+ 0000                              ENDM
  36+ 0000
  37+ 0000              ldIXHaFromN:	MACRO memfrom
  38+ 0000 ~                            ld		a,(memfrom)
  39+ 0000 ~                            ld		ixh,a
  40+ 0000                              ENDM
  41+ 0000
  42+ 0000              ldIYLaFromN:	MACRO memfrom
  43+ 0000 ~                            ld		a,(memfrom)
  44+ 0000 ~                            ld		iyl,a
  45+ 0000                              ENDM
  46+ 0000
  47+ 0000              ldIYHaFromN:	MACRO memfrom
  48+ 0000 ~                            ld		a,(memfrom)
  49+ 0000 ~                            ld		iyh,a
  50+ 0000                              ENDM
  51+ 0000
  52+ 0000              ldhlde:			MACRO
  53+ 0000 ~                            ld		h,d
  54+ 0000 ~                            ld		l,e
  55+ 0000                              ENDM
  56+ 0000
  57+ 0000              ldhlbc:			MACRO
  58+ 0000 ~                            ld		h,b
  59+ 0000 ~                            ld		l,c
  60+ 0000                              ENDM
  61+ 0000
  62+ 0000              ldbcde:			MACRO
  63+ 0000 ~                            ld		b,d
  64+ 0000 ~                            ld		c,e
  65+ 0000                              ENDM
  66+ 0000
  67+ 0000              lddebc:			MACRO
  68+ 0000 ~                            ld		d,b
  69+ 0000 ~                            ld		e,c
  70+ 0000                              ENDM
  71+ 0000
  72+ 0000              ldbchl:			MACRO
  73+ 0000 ~                            ld		b,h
  74+ 0000 ~                            ld		c,l
  75+ 0000                              ENDM
  76+ 0000
  77+ 0000              lddeiy:			MACRO
  78+ 0000 ~                            ld		d,iyh
  79+ 0000 ~                            ld		e,iyl
  80+ 0000                              ENDM
  81+ 0000
  82+ 0000              ldiyde:			MACRO
  83+ 0000 ~                            ld		iyh,d
  84+ 0000 ~                            ld		iyl,e
  85+ 0000                              ENDM
  86+ 0000
# file closed: ./Macros/ldCopyMacros.asm
 129  0000                  INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              ldAToHLixl:			MACRO value
   2+ 0000 ~            					ld          hl,value
   3+ 0000 ~            					ex          af,af'
   4+ 0000 ~            					ld          a,ixl
   5+ 0000 ~            					add         hl,a
   6+ 0000 ~            					ex          af,af'
   7+ 0000 ~            					ld          (hl),a
   8+ 0000              					ENDM
   9+ 0000
  10+ 0000              ldAToHLiyl:			MACRO value
  11+ 0000 ~            					ld          hl,value
  12+ 0000 ~            					ex          af,af'
  13+ 0000 ~            					ld          a,iyl
  14+ 0000 ~            					add         hl,a
  15+ 0000 ~            					ex          af,af'
  16+ 0000 ~            					ld          (hl),a
  17+ 0000              					ENDM
  18+ 0000
  19+ 0000
  20+ 0000              ldHLixlToA:         MACRO value
  21+ 0000 ~                                ld          hl,value
  22+ 0000 ~                                ex          af,af'
  23+ 0000 ~                                ld          a,ixl
  24+ 0000 ~                                add         hl,a
  25+ 0000 ~                                ld          a,(hl)
  26+ 0000                                  ENDM
  27+ 0000
  28+ 0000              ldHLiylToA:         MACRO value
  29+ 0000 ~                                ld          hl,value
  30+ 0000 ~                                ex          af,af'
  31+ 0000 ~                                ld          a,iyl
  32+ 0000 ~                                add         hl,a
  33+ 0000 ~                                ld          a,(hl)
  34+ 0000                                  ENDM
  35+ 0000
  36+ 0000              ldHLIdxAToA:        MACRO value
  37+ 0000 ~                                ld          hl,value
  38+ 0000 ~                                add         hl,a
  39+ 0000 ~                                ld          a,(hl)
  40+ 0000                                  ENDM
  41+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
 130  0000              ; SNASM Elite  Next
 131  0000
 132  0000              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 133  0000              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 134  0000              ;seg     MENUSHRCHTSEG,  BankMenuShrCht: StartOfBank, MenuShrChtAddr
 135  0000              ;seg     MENUGALCHTSEG,  BankMenuGalCht: StartOfBank, MenuGalChtAddr
 136  0000              ;seg     MENUINVENTSEG,  BankMenuInvent: StartOfBank, MenuInventAddr
 137  0000              ;seg     MENUSYSTEMSEG,  BankMenuSystem: StartOfBank, MenuSystemAddr
 138  0000              ;seg     MENUMARKETSEG,  BankMenuMarket: StartOfBank, MenuMarketAddr
 139  0000              ;seg     MENUSTATUSSEG,  BankMenuStatus: StartOfBank, MenuStatusAddr
 140  0000              ;seg     STOCKTABLESEG,  BankStockTable: StartOfBank, StockTableAddr
 141  0000              ;seg     VIEWFRONTSEG,   BankFrontView:  StartOfBank, ViewFrontAddr
 142  0000              ;seg     CMDRDATASEG,    BankCmdrData:   StartOfBank, CMDRDATAAddr
 143  0000              ;seg     LAYER2SEG,      BankLAYER2:     StartOfBank, LAYER2Addr
 144  0000              ;seg     LAYER1SEG,      BankLAYER1:     StartOfBank, LAYER1Addr
 145  0000              ;seg     SHIPMODELSSEG,  BankSHIPMODELS: StartOfBank, ShipmodelbankAddr
 146  0000              ;seg     SPRITESEG,      BankSPRITE:     StartOfBank, SPRITEAddr             ; flat address
 147  0000              ;seg     CONSOLESEG,     BankConsole:    StartOfBank, ConsoleImageAddr       ; flat address
 148  0000              ;seg     UNIVDATASEG0,   BankUNIVDATA0:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 149  0000              ;seg     UNIVDATASEG1,   BankUNIVDATA1:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 150  0000              ;seg     UNIVDATASEG2,   BankUNIVDATA2:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 151  0000              ;seg     UNIVDATASEG3,   BankUNIVDATA3:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 152  0000              ;seg     UNIVDATASEG4,   BankUNIVDATA4:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 153  0000              ;seg     UNIVDATASEG5,   BankUNIVDATA5:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 154  0000              ;seg     UNIVDATASEG6,   BankUNIVDATA6:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 155  0000              ;seg     UNIVDATASEG7,   BankUNIVDATA7:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 156  0000              ;seg     UNIVDATASEG8,   BankUNIVDATA8:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 157  0000              ;seg     UNIVDATASEG9,   BankUNIVDATA9:  StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 158  0000              ;seg     UNIVDATASEG10,  BankUNIVDATA10: StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 159  0000              ;seg     UNIVDATASEG11,  BankUNIVDATA11: StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 160  0000              ;seg     UNIVDATASEG12,  BankUNIVDATA12: StartOfBank, UniverseBankAddr       ; Univese also uses bank 7
 161  0000              ;seg     GALAXYDATASEG0, BankGalaxyData0:StartOfBank, GalaxyDataAddr
 162  0000              ;seg     GALAXYDATASEG1, BankGalaxyData1:StartOfBank, GalaxyDataAddr
 163  0000              ;seg     GALAXYDATASEG2, BankGalaxyData2:StartOfBank, GalaxyDataAddr
 164  0000              ;seg     GALAXYDATASEG3, BankGalaxyData3:StartOfBank, GalaxyDataAddr
 165  0000              ;seg     GALAXYDATASEG4, BankGalaxyData4:StartOfBank, GalaxyDataAddr
 166  0000              ;seg     GALAXYDATASEG5, BankGalaxyData5:StartOfBank, GalaxyDataAddr
 167  0000              ;seg     GALAXYDATASEG6, BankGalaxyData6:StartOfBank, GalaxyDataAddr
 168  0000              ;seg     GALAXYDATASEG7, BankGalaxyData7:StartOfBank, GalaxyDataAddr
 169  0000
 170  0000              charactersetaddr		equ 15360
 171  0000              STEPDEBUG equ 1
 172  0000
 173  0000
 174  0000
 175  0000                                      ORG         $8000
 176  8000 F3                                   di
 177  8001                                      ; "STARTUP"
 178  8001                                      MMUSelectLayer1
 178  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179  8005 CD 47 E0                             call		l1_cls
 180  8008 3E 07                                ld			a,7
 181  800A CD 53 E0                             call		l1_attr_cls_to_a
 182  800D 3E FF                                ld          a,$FF
 183  800F CD 5D E0                             call        l2_set_border
 184  8012                                      MMUSelectSpriteBank
 184  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 185  8016 CD 54 E1                             call		sprite_load_sprite_data
 186  8019              Initialise:             MMUSelectLayer2
 186  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 187  801D CD D0 E0                             call 		l2_initialise
 188  8020 3E FF                                ld          a,$FF
 189  8022 32 4C 82                             ld          (ScreenTransitionForced),a
 190  8025
 191  8025 AF           TestText:               xor			a
 192  8026 32 EA 91                             ld      (JSTX),a
 193  8029                                      MMUSelectCmdrData
 193  8029 ED 91 57 38 >                     nextreg CmdrDataMMU,       BankCmdrData
 194  802D CD 1F E0                             call		defaultCommander
 195  8030
 196  8030                                      MMUSelectSpriteBank
 196  8030 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 197  8034 CD 4C E1                             call		init_sprites
 198  8037
 199  8037                                      MMUSelectStockTable
 199  8037 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 200  803B CD AA E0                             call		generate_stock_market ; Normally done on jump to system and start up, should be written on load save to stop market price cheating
 201  803E
 202  803E                                      IFDEF DOUBLEBUFFER
 203  803E                                          MMUSelectLayer2
 203  803E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 204  8042 CD C9 E0                                 call        l2_cls
 205  8045 CD DD E0                                 call  l2_flip_buffers
 206  8048                                      ENDIF
 207  8048
 208  8048                                      ;MMUSelectResetUniv
 209  8048 CD 4D 82                             call		ResetUniv
 209  804B
 210  804B CD 6C 82                             call        ResetGalaxy
 211  804E                                      MMUSelectGalaxyN 0
 211  804E ED 91 57 5B >                     nextreg GalaxyDataMMU,     BankGalaxyData0+0
 212  8052 CD 90 FC                             call        SeedGalaxy
 213  8055
 214  8055                                      MMUSelectLayer2
 214  8055 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 215  8059                                      MMUSelectUniverseN 0
 215  8059 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 216  805D CD C9 E0                             call        l2_cls
 217  8060                                      IFDEF DOUBLEBUFFER
 218  8060                                          MMUSelectLayer2
 218  8060 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219  8064 CD DD E0                                 call  l2_flip_buffers
 220  8067                                      ENDIF
 221  8067
 222  8067 3E 06        InitialiseDemoShip:     ld      a,CobraTablePointer
 223  8069                                      MMUSelectUniverseN 0                          ; load up register into universe bank
 223  8069 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 224  806D CD 23 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 225  8070                                      MMUSelectShipModels
 225  8070 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankSHIPMODELS
 226  8074 3E 06                                ld		a,CobraTablePointer
 227  8076 CD 0E E9                             call    CopyShipDataToUBnk
 228  8079 3E 03                                ld      a,3
 229  807B 32 3D 92                             ld      (MenuIdMax),a
 230  807E 3E FF                                ld      a,$FF                               ; Starts Docked
 231  8080 32 43 92                             ld      (DockedFlag),a
 232  8083              ;                        call    InitialiseFrontView
 233  8083 CD 95 82                             call    InitialiseCommander
 234  8086                                      MMUSelectUniverseN 0
 234  8086 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 235  808A CD 46 83                             call    SetInitialShipPosition
 236  808D              ;..................................................................................................................................
 237  808D CD D4 95     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 238  8090 CD 38 8F                             call    scan_keyboard
 239  8093 3E 00        ScreenTransBlock:       ld      a,$0
 240  8095 FE 01                                cp      1
 241  8097 CA ED 80                             jp      z,CheckIfViewUpdate                 ; as we are in a transition the whole update AI is skipped
 242  809A CD F9 82                             call    ViewKeyTest
 243  809D CD 50 81                             call    TestPauseMode
 244  80A0 3A 44 92                             ld      a,(GamePaused)
 245  80A3 FE 00                                cp      0
 246  80A5 20 E6                                jr      nz,MainLoop
 247  80A7 3A 43 92                             ld      a,(DockedFlag)
 248  80AA FE 00                                cp      0
 249  80AC                                      ;call    z,ThrottleTest                      ; only use throttle if flying, may expand the logic to include hyperspace, not sure yet
 250  80AC CD BA 90                             call    MovementKeyTest
 251  80AF              ;Process cursor keys for respective screen
 252  80AF 3A BE 80     HandleMovement:         ld      a,(CallCursorRoutine+2)
 253  80B2                                      IfAIsZeroGoto     UpdateUniverseSpeed
 253  80B2 FE 00       >				cp	0
 253  80B4 CA BF 80    >				jp	z,UpdateUniverseSpeed
 254  80B7 3E 00        HandleBankSelect:       ld      a,$00
 255  80B9                                      MMUSelectScreenA
 255  80B9 ED 92 56    >                     nextreg ScreenBankMMU,		a
 256  80BC CD 00 00     CallCursorRoutine:      call    $0000
 257  80BF              ; need to optimise so not looping over agint for all universe doign ingle updates
 258  80BF              UpdateUniverseSpeed:    MMUSelectUniverseN 0
 258  80BF ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 259  80C3 CD CF 88                             call    TestRollLoop
 260  80C6 3A 2D 92                             ld      a,(DELTA)
 261  80C9 16 00                                ld      d,0
 262  80CB 5F                                   ld      e,a
 263  80CC 2A 11 C0                             ld      hl,(UbnKzlo)
 264  80CF 3A 13 C0                             ld      a,(UBnKzsgn)
 265  80D2 47                                   ld      b,a
 266  80D3 0E 80                                ld      c,$80
 267  80D5 CD 3B CB                             call    ADDHLDESignBC
 268  80D8 22 11 C0                             ld      (UbnKzlo),hl
 269  80DB 32 13 C0                             ld      (UBnKzsgn),a
 270  80DE CD 53 D8                             call    ApplyMyRollAndPitch
 271  80E1              ;                        call    DEBUGSETNODES
 272  80E1 CD 64 D8                             call   ProcessNodes
 273  80E4              DrawShipTest:           MMUSelectLayer1
 273  80E4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 274  80E8 3E DF                                ld     a,$DF
 275  80EA 32 ED E8                             ld     (line_gfx_colour),a
 276  80ED 3E 00        CheckIfViewUpdate:      ld      a,$00
 277  80EF FE 00                                cp      0
 278  80F1 28 21                                jr      z, MenusLoop; This will change as more screens are added TODO
 279  80F3              SpecificCodeWhenInView: ;call   SetAllFacesVisible
 280  80F3 CD 62 D4                             call   BackFaceCull				; culling but over aggressive backface assumes all 0 up front TOFIX
 281  80F6 CD 36 D9                             call   PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 282  80F9                                      MMUSelectLayer2
 282  80F9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 283  80FD CD C9 E0                             call   l2_cls
 284  8100                                      MMUSelectUniverseN 0
 284  8100 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 285  8104 CD BD 8D                             call   DrawLines                   ; Need to plot all lines
 286  8107 CD D5 8A     DrawStars:              call   StarsForward
 287  810A                                      MMUSelectViewFront
 287  810A ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 288  810E CD 95 83                             call   UpdateConsole
 289  8111 C3 24 81                             jp LoopRepeatPoint
 290  8114 2A 22 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 291  8117 7C                                   ld      a,h
 292  8118 B5                                   or      l
 293  8119 CA 24 81                             jp      z,LoopRepeatPoint
 294  811C 3E 00        ScreenLoopBank:         ld      a,$0
 295  811E                                      MMUSelectScreenA
 295  811E ED 92 56    >                     nextreg ScreenBankMMU,		a
 296  8121 CD 00 00     ScreenLoopJP:           call    $0000
 297  8124              LoopRepeatPoint:
 298  8124 3E 00        DoubleBufferCheck:      ld      a,00
 299  8126                                      IFDEF DOUBLEBUFFER
 300  8126 FE 00                                    cp      0
 301  8128 CA 8D 80                                 jp      z,MainLoop
 302  812B                                          MMUSelectLayer2
 302  812B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 303  812F 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 304  8132 FE 00                                    cp     0
 305  8134 C4 DD E0                                 call   nz,l2_flip_buffers
 306  8137                                      ENDIF
 307  8137 3A 4C 82                             ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 308  813A FE FF                                cp      $FF
 309  813C CA 8D 80                             jp      z,MainLoop
 310  813F 57           .BruteForceChange:      ld      d,a
 311  8140 1E 10                                ld      e,ScreenMapRow
 312  8142 ED 30                                mul
 313  8144 DD 21 AC 81                          ld      ix,ScreenKeyMap
 314  8148 DD 19                                add     ix,de                               ; Force screen transition
 315  814A CD A9 82                             call    SetScreenAIX
 316  814D C3 8D 80                             jp MainLoop
 317  8150              ;..................................................................................................................................
 318  8150              	;call		keyboard_main_loop
 319  8150
 320  8150 3A 44 92     TestPauseMode:          ld      a,(GamePaused)
 321  8153 FE 00                                cp      0
 322  8155 20 12                                jr      nz,.TestForResume
 323  8157 3A 3A 92     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 324  815A                                      ReturnIfAGTENusng       ScreenFront
 324  815A FE 09       >                   cp    ScreenFront
 324  815C D0          >                   ret	 nc
 325  815D 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 326  815F CD B0 8F                             call    is_key_pressed
 327  8162 C0                                   ret     nz
 328  8163 3E FF        .PausePressed:          ld      a,$FF                               ; doesn't really matter if we were in pause already as resume is a different key
 329  8165 32 44 92                             ld      (GamePaused),a
 330  8168 C9                                   ret
 331  8169 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 332  816B CD B0 8F                             call    is_key_pressed
 333  816E C0                                   ret     nz
 334  816F AF           .ResumePressed:         xor     a
 335  8170 32 44 92                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 336  8173 C9                                   ret
 337  8174
 338  8174 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 339  8176 CD B0 8F                             call    is_key_pressed
 340  8179 C9                                   ret
 341  817A
 342  817A 21 91 81     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
 343  817D 11 0B C0                             ld      de,UBnKxlo
 344  8180 01 09 00                             ld      bc,9
 345  8183 ED B0                                ldir
 346  8185 21 9A 81                             ld      hl,DEBUGROTMATDATA
 347  8188 11 14 C0                             ld      de,UBnkrotmatSidevX
 348  818B 01 12 00                             ld      bc,6*3
 349  818E ED B0                                ldir
 350  8190 C9                                   ret
 351  8191
 352  8191              ; FAILS due to sharp angle, OK now
 353  8191              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
 354  8191              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
 355  8191              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
 356  8191              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
 357  8191              ; Passes as python and cobra
 358  8191              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
 359  8191              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
 360  8191              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
 361  8191              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
 362  8191              ; Looks OK
 363  8191              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
 364  8191              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
 365  8191              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
 366  8191              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
 367  8191              ;
 368  8191              ; Massive horizontal line
 369  8191              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
 370  8191              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
 371  8191              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
 372  8191              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
 373  8191              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
 374  8191              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
 375  8191              ; Line lost in clipping
 376  8191              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
 377  8191              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
 378  8191              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
 379  8191              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
 380  8191              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
 381  8191              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
 382  8191              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
 383  8191              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
 384  8191              ;
 385  8191              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
 386  8191              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
 387  8191              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
 388  8191              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
 389  8191              ; top left off right issue
 390  8191 39 01 00 43  DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
 390  8195 01 00 2F 03
 390  8199 00
 391  819A FD 50 47 B0  DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 391  819E 53 9A
 392  81A0 73 B7 98 C8                          db      $73,    $B7,    $98,    $C8,    $80,    $A3
 392  81A4 80 A3
 393  81A6 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 393  81AA B0 55
 394  81AC
 395  81AC
 396  81AC              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 397  81AC              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 398  81AC
 399  81AC
 400  81AC              ;TODO Optimisation
 401  81AC              ; Need this table to handle differnet events
 402  81AC              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 403  81AC              ; cursor key, joystick press
 404  81AC              ; non cursor keys presses
 405  81AC              ;
 406  81AC              ; First byte is now docked flag
 407  81AC              ;
 408  81AC              ; Padded to 8 bytes to allow a * 8 for addressing
 409  81AC              ; Byte 0 - Docked flag  : 0 = not applicable, 1 = only whilst docked, 2 = only when not docked
 410  81AC              ; Byte 1 - Screen Id
 411  81AC              ; Byte 2,3 - address of keypress table
 412  81AC              ; Byte 4   - Bank with Display code
 413  81AC              ; Byte 5,6 - Function for display
 414  81AC              ; Byte 7,8 - Main loop update routine
 415  81AC              ; Byte 9   - Draw stars Y/N
 416  81AC              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 417  81AC              ; byte 11  - Double Buffering 0 = no, 1 = yes
 418  81AC              ; byte 12,13  - cursor key input
 419  81AC              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 420  81AC 00 00 E8 8E  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $00,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 420  81B0 32 FC C3 00
 420  81B4 00 00 00 00
 420  81B8 5A C4 00 00
 421  81BC 00 01 E6 8E  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $00,$00
 421  81C0 33 43 C1 62
 421  81C4 C2 00 00 00
 421  81C8 05 C3 00 00
 422  81CC 01 02 EA 8E                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,$00,$00,$00
 422  81D0 36 43 C3 FA
 422  81D4 C3 00 00 00
 422  81D8 00 00 00 00
 423  81DC 02 03 EA 8E                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 423  81E0 36 43 C3 00
 423  81E4 00 00 00 00
 423  81E8 00 00 00 00
 424  81EC 00 04 EC 8E  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,$00,$00,$00
 424  81F0 3F 4C CF 90
 424  81F4 CF 00 00 00
 424  81F8 00 00 00 00
 425  81FC 00 05 EE 8E                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 425  8200 34 F5 C1 00
 425  8204 00 00 00 00
 425  8208 00 00 00 00
 426  820C 00 06 FC 8E                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,$00,$00,$00
 426  8210 35 F0 C2 00
 426  8214 00 00 00 00
 426  8218 00 00 00 00
 427  821C 01 07 E4 8E                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,$00,$00,$00
 427  8220 40 EA D3 86
 427  8224 D4 00 00 00
 427  8228 00 00 00 00
 428  822C 01 08 DE 8E                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,$00,$00,$00
 428  8230 41 FE C0 6C
 428  8234 C1 00 01 01
 428  8238 00 00 00 00
 429  823C 02 09 B4 8E  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 429  8240 3E 10 C0 00
 429  8244 00 01 00 01
 429  8248 4E C0 00 00
 430  824C              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 431  824C              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 432  824C              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 433  824C              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 434  824C              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 435  824C              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 436  824C FF           ScreenTransitionForced  DB $FF
 437  824D                  INCLUDE "GameEngine/resetUniverse.asm"
# file opened: GameEngine/resetUniverse.asm
   1+ 824D              ; Use bank 0 as source and bank 7 as write target
   2+ 824D              ResetUniv:
   3+ 824D                  MODULE ResetUniv
   4+ 824D              ; Move bank 70 into page 0
   5+ 824D                  MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   5+ 824D ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   6+ 8251 3E 47        	ld		a,BankUNIVDATA1 				 ; we can read bank 0 as if it was rom
   7+ 8253 06 0C        	ld		b,12
   8+ 8255              ResetCopyLoop:
   9+ 8255 C5           	push	bc
  10+ 8256              	MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
  10+ 8256 ED 92 56    >                     nextreg UniverseMMU,       a
  11+ 8259 F5           	push	af
  12+ 825A 21 00 C0     	ld		hl,UniverseBankAddr
  13+ 825D 11 00 00     	ld		de,dmaCopySrcAddr
  14+ 8260 01 F0 19     	ld		bc,UnivBankSize
  15+ 8263 CD 5F 8E     	call	memcopy_dma
  16+ 8266 F1           	pop		af
  17+ 8267 C1           	pop		bc
  18+ 8268 3C           	inc		a
  19+ 8269 10 EA        	djnz	ResetCopyLoop
  20+ 826B C9           	ret
  21+ 826C                  ENDMODULE
  22+ 826C
  23+ 826C              ; Use bank 0 as source and bank 7 as write target
  24+ 826C              ResetGalaxy:
  25+ 826C                  MODULE ResetGalaxy
  26+ 826C              ; Move bank 70 into page 0
  27+ 826C                  MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0
  27+ 826C ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  28+ 8270 3E 5C        	ld		a,BankGalaxyData1 			   	 ; we can read bank 0 as if it was rom
  29+ 8272 06 08        	ld		b,8
  30+ 8274 0E 01            ld      c,1
  31+ 8276              ResetCopyLoop:
  32+ 8276 F5           	push	af
  33+ 8277 C5           	push	bc
  34+ 8278              	MMUSelectGalaxyA    	             ; copy from bank 0 to 71 to 12
  34+ 8278 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  35+ 827B 21 00 E0     	ld		hl,GalaxyDataAddr
  36+ 827E 11 00 00     	ld		de,dmaCopySrcAddr
  37+ 8281 01 CD 1C     	ld		bc,GalaxyBankSize
  38+ 8284 CD 5F 8E     	call	memcopy_dma
  39+ 8287 C1           	pop		bc
  40+ 8288 21 0F E0         ld      hl, galaxy_pg_cnt
  41+ 828B 79               ld      a,c
  42+ 828C C6 30            add     a, $30
  43+ 828E 77               ld      (hl),a
  44+ 828F 0C               inc     c
  45+ 8290 F1               pop     af
  46+ 8291 3C           	inc		a
  47+ 8292 10 E2        	djnz	ResetCopyLoop
  48+ 8294 C9           	ret
  49+ 8295                  ENDMODULE
# file closed: GameEngine/resetUniverse.asm
 438  8295
 439  8295
 440  8295 3A ED 81     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 441  8298 DD 21 EC 81                          ld      ix,ScreenCmdr
 442  829C C3 A9 82                             jp      SetScreenAIX
 443  829F
 444  829F 3A 3D 82     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 445  82A2 DD 21 3C 82                          ld      ix,ScreenKeyFront
 446  82A6 C3 A9 82                             jp      SetScreenAIX
 447  82A9              ; false ret here as we get it free from jp
 448  82A9
 449  82A9              ;----------------------------------------------------------------------------------------------------------------------------------
 450  82A9 32 3A 92     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to ixl
 451  82AC AF                                   xor     a
 452  82AD 3D                                   dec     a                               ; set A to FF
 453  82AE 32 4C 82                             ld      (ScreenTransitionForced),a      ; In case it was called by a brute force change in an update loop
 454  82B1 32 39 92                             ld      (ScreenChanged),a               ; Set screen changed to FF
 455  82B4 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 456  82B7 32 1D 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 457  82BA 32 B8 80                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 458  82BD                                      MMUSelectScreenA
 458  82BD ED 92 56    >                     nextreg ScreenBankMMU,		a
 459  82C0 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 460  82C3 32 F7 82                             ld      (ScreenUpdateAddr+1),a
 461  82C6 DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 462  82C9 32 F8 82                             ld      (ScreenUpdateAddr+2),a
 463  82CC DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 464  82CF 32 22 81                             ld      (ScreenLoopJP+1),a
 465  82D2 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 466  82D5 32 23 81                             ld      (ScreenLoopJP+2),a
 467  82D8 DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 468  82DB 32 EE 80                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 469  82DE DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 470  82E1 32 94 80                             ld      (ScreenTransBlock+1),a          ; Set flag to block transitions as needed e.g. launch screen
 471  82E4 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 472  82E7 32 25 81                             ld      (DoubleBufferCheck+1),a
 473  82EA DD 7E 0C                             ld      a,(ix+12)
 474  82ED 32 BD 80                             ld      (CallCursorRoutine+1),a
 475  82F0 DD 7E 0D                             ld      a,(ix+13)
 476  82F3 32 BE 80                             ld      (CallCursorRoutine+2),a
 477  82F6
 478  82F6 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 479  82F9              ;----------------------------------------------------------------------------------------------------------------------------------
 480  82F9 3A 3A 92     ViewKeyTest:            ld      a,(ScreenIndex)
 481  82FC 4F                                   ld      c,a
 482  82FD 06 0A                                ld      b,ScreenMapLen                  ; For now until add screens are added
 483  82FF DD 21 AC 81                          ld      ix,ScreenKeyMap
 484  8303 DD 7E 00     ViewScanLoop:           ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 485  8306 FE 00                                cp      0
 486  8308 28 14                                jr      z,.NoDocCheck
 487  830A 57           .DocCheck:              ld      d,a
 488  830B 3A 43 92                             ld      a,(DockedFlag)
 489  830E FE 00                                cp      0
 490  8310 28 07                                jr      z,.NotDockedCheck
 491  8312 7A           .DockedCheck:           ld      a,d
 492  8313 FE 01                                cp      1
 493  8315 20 27                                jr      nz,NotReadNextKey
 494  8317 18 05                                jr      .NoDocCheck
 495  8319 7A           .NotDockedCheck:        ld      a,d
 496  831A FE 02                                cp      2
 497  831C 20 20                                jr      nz,NotReadNextKey
 498  831E DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 499  8321 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 500  8322 5F                                   ld      e,a
 501  8323 28 19                                jr      z,NotReadNextKey
 502  8325 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 503  8328 32 32 83                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 504  832B DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 505  832E 32 33 83                             ld      (ReadKeyAddr+2),a
 506  8331 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 507  8334 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 508  8335                                      IfAIsZeroGoto NotReadNextKey
 508  8335 FE 00       >				cp	0
 508  8337 CA 3E 83    >				jp	z,NotReadNextKey
 509  833A 7B           .ValidScreenChange:     ld      a,e
 510  833B C3 A9 82                             jp      SetScreenAIX
 511  833E              ;--- CODE WILL NOT FALL TO HERE ---
 512  833E 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 513  8341 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 514  8343 10 BE                                djnz    ViewScanLoop
 515  8345 C9                                   ret
 516  8346
 517  8346 21 39 01     SetInitialShipPosition: ld      hl,$0139
 518  8349 22 0B C0                             ld      (UBnKxlo),hl
 519  834C 21 43 01                             ld      hl,$0143
 520  834F 22 0E C0                             ld      (UBnKylo),hl
 521  8352 21 30 38                             ld      hl,$3830
 522  8355 22 11 C0                             ld      (UbnKzlo),hl
 523  8358 AF                                   xor     a
 524  8359 32 0D C0                             ld      (UBnKxsgn),a
 525  835C 32 10 C0                             ld      (UBnKysgn),a
 526  835F 32 13 C0                             ld      (UBnKzsgn),a
 527  8362              ;    call    Reset TODO
 528  8362 CD AE CC                             call	InitialiseOrientation            ;#00;
 529  8365 3E 08                                ld      a,8
 530  8367 32 2D 92                             ld      (DELTA),a
 531  836A 21 10 00                             ld      hl,16
 532  836D 22 2E 92                             ld      (DELTA4),hl
 533  8370 C9                                   ret
 534  8371
 535  8371 1E 10        Draw3Lines:             ld      e,16
 536  8373 C5 D5                                push    bc,,de
 537  8375                                      MMUSelectLayer2
 537  8375 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 538  8379 CD 62 E2                             call    l2_draw_horz_line
 539  837C D1 C1                                pop     bc,,de
 540  837E 05                                   dec     b
 541  837F C5 D5                                push    bc,,de
 542  8381 1E 14                                ld      e,20
 543  8383                                      MMUSelectLayer2
 543  8383 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 544  8387 CD 62 E2                             call    l2_draw_horz_line
 545  838A D1 C1                                pop     bc,,de
 546  838C 05                                   dec     b
 547  838D                                      MMUSelectLayer2
 547  838D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 548  8391 CD 62 E2                             call    l2_draw_horz_line
 549  8394 C9                                   ret
 550  8395
 551  8395 3A 2D 92     UpdateConsole:          ld      a,(DELTA)
 552  8398 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 553  839A 28 0C                                jr      z,.UpdateRoll
 554  839C 01 D1 84                             ld      bc,SpeedoStart
 555  839F 21 AA 95                             ld      hl,SpeedoMapping
 556  83A2 ED 31                                add     hl,a
 557  83A4 56                                   ld      d,(hl)
 558  83A5 CD 71 83                             call    Draw3Lines
 559  83A8 3A EC 91     .UpdateRoll:            ld      a,(ALP1)
 560  83AB FE 00                                cp      0
 561  83AD 28 30                                jr      z,.UpdatePitch
 562  83AF 21 E0 8A                             ld      hl,RollMiddle
 563  83B2 3A ED 91                             ld      a,(ALP2)
 564  83B5 FE 00                                cp      0
 565  83B7 28 18                                jr      z,.PosRoll
 566  83B9 16 00        .NegRoll:               ld      d,0
 567  83BB 3A EC 91                             ld      a,(ALP1)
 568  83BE CB 27                                sla     a
 569  83C0 5F                                   ld      e,a
 570  83C1 B7                                   or      a
 571  83C2 ED 52                                sbc     hl,de
 572  83C4 44 4D                                ld      bc,hl
 573  83C6 3E E1                                ld      a,DialMiddleXPos
 574  83C8 91                                   sub     c
 575  83C9 57                                   ld      d,a
 576  83CA 1E FF                                ld      e,$FF
 577  83CC CD 71 83                             call    Draw3Lines
 578  83CF 18 0E                                jr      .UpdatePitch
 579  83D1 01 E0 8A     .PosRoll:               ld      bc,RollMiddle
 580  83D4 3A EC 91                             ld      a,(ALP1)
 581  83D7 CB 27                                sla     a
 582  83D9 57                                   ld      d,a
 583  83DA 1E FF                                ld      e,$FF
 584  83DC CD 71 83                             call    Draw3Lines
 585  83DF 3A E0 91     .UpdatePitch:           ld      a,(BET1)
 586  83E2 FE 00                                cp      0
 587  83E4 28 30                                jr      z,.DoneConsole
 588  83E6 21 E0 92                             ld      hl,PitchMiddle
 589  83E9 3A E1 91                             ld      a,(BET2)
 590  83EC FE 00                                cp      0
 591  83EE 28 18                                jr      z,.PosPtich
 592  83F0 16 00        .NegPitch:              ld      d,0
 593  83F2 3A E0 91                             ld      a,(BET1)
 594  83F5 CB 27                                sla     a
 595  83F7 5F                                   ld      e,a
 596  83F8 B7                                   or      a
 597  83F9 ED 52                                sbc     hl,de
 598  83FB 44 4D                                ld      bc,hl
 599  83FD 3E E1                                ld      a,DialMiddleXPos
 600  83FF 91                                   sub     c
 601  8400 57                                   ld      d,a
 602  8401 1E FF                                ld      e,$FF
 603  8403 CD 71 83                             call    Draw3Lines
 604  8406 18 0E                                jr      .DoneConsole
 605  8408 01 E0 92     .PosPtich:              ld      bc,PitchMiddle
 606  840B 3A E0 91                             ld      a,(BET1)
 607  840E CB 27                                sla     a
 608  8410 57                                   ld      d,a
 609  8411 1E FF                                ld      e,$FF
 610  8413 CD 71 83                             call    Draw3Lines
 611  8416 CD 92 84     .DoneConsole:           call    UpdateRadar
 612  8419 C9                                   ret
 613  841A
 614  841A              ScannerX equ 128
 615  841A              ScannerY equ 171
 616  841A
 617  841A              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 618  841A ED 4B 12 C0  UpdateScannerShip:      ld      bc,(UBnKzhi)
 619  841E 79                                   ld      a,c
 620  841F E6 C0                                and     $C0
 621  8421 C0                                   ret     nz
 622  8422 ED 5B 0C C0                          ld      de,(UBnKxhi)
 623  8426 7B                                   ld      a,e
 624  8427 E6 C0                                and     $C0
 625  8429 C0                                   ret     nz
 626  842A 2A 0F C0                             ld      hl,(UbnKyhi)
 627  842D 7D                                   ld      a,l
 628  842E E6 C0                                and     $C0
 629  8430 C0                                   ret     nz
 630  8431 3E 80                                ld      a,ScannerX
 631  8433                                      JumpOnBitSet d,7,ScannerNegX
 631  8433 CB 7A       >                        bit 	7,d
 631  8435 C2 3C 84    >                        jp      nz,ScannerNegX
 632  8438 83                                   add     a,e
 633  8439 C3 3D 84                             jp      ScannerZCoord
 634  843C 93           ScannerNegX:            sub     e
 635  843D 5F           ScannerZCoord:          ld      e,a
 636  843E CB 39                                srl     c
 637  8440 CB 39                                srl     c
 638  8442 3E AB                                ld      a,ScannerY
 639  8444                                      JumpOnBitSet b,7,ScannerNegZ
 639  8444 CB 78       >                        bit 	7,b
 639  8446 C2 4D 84    >                        jp      nz,ScannerNegZ
 640  8449 91                                   sub     c
 641  844A C3 4E 84                             jp      ScannerYCoord
 642  844D 81           ScannerNegZ:            add     a,c
 643  844E 57           ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
 644  844F                                      JumpOnBitSet h,7,ScannerStickDown
 644  844F CB 7C       >                        bit 	7,h
 644  8451 C2 5F 84    >                        jp      nz,ScannerStickDown
 645  8454 95                                   sub     l                       ; a already holds actual Y
 646  8455                                      JumpIfAGTENusng 128,ScannerHeightDone
 646  8455 FE 80       >                        cp     128
 646  8457 D2 67 84    >                        jp		nc,ScannerHeightDone
 647  845A 3E 80                                ld      a,128
 648  845C C3 67 84                             jp      ScannerHeightDone
 649  845F 85           ScannerStickDown:       add     a,l
 650  8460                                      JumpIfAGTENusng 191,ScannerHeightDone
 650  8460 FE BF       >                        cp     191
 650  8462 D2 67 84    >                        jp		nc,ScannerHeightDone
 651  8465 3E BF                                ld      a,191
 652  8467 4B           ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
 653  8468 42                                   ld      b,d
 654  8469 57                                   ld      d,a
 655  846A B8                                   cp      b
 656  846B CA 7B 84                             jp      z,Scanner0Height
 657  846E 1E C2                                ld      e,194 ; Should be coloured based on status but this will do for now
 658  8470 C5                                   push    bc
 659  8471 D5                                   push    de
 660  8472                                      MMUSelectLayer2
 660  8472 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 661  8476 CD 0D E3                             call    l2_draw_vert_line_to
 662  8479 D1                                   pop     de
 663  847A C1                                   pop     bc
 664  847B 42           Scanner0Height:         ld      b,d
 665  847C C5                                   push    bc
 666  847D 3E FF                                ld      a,255
 667  847F                                      MMUSelectLayer2
 667  847F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 668  8483 CD FF E0                             call    l2_plot_pixel
 669  8486 C1                                   pop     bc
 670  8487 0C                                   inc     c
 671  8488 3E FF                                ld      a,255
 672  848A                                      MMUSelectLayer2
 672  848A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 673  848E CD FF E0                             call    l2_plot_pixel
 674  8491 C9                                   ret
 675  8492
 676  8492              UpdateRadar:            MMUSelectUniverseN 0                          ; load up register into universe bank
 676  8492 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 677  8496 CD 1A 84                             call    UpdateScannerShip
 678  8499 C9                                   ret
 679  849A
 680  849A AF           SeedGalaxy0:            xor     a
 681  849B                                      MMUSelectGalaxyA
 681  849B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 682  849E DD 21 16 E0                          ld      ix,galaxy_data
 683  84A2 AF                                   xor		a
 684  84A3 32 36 92                             ld		(XSAV),a
 685  84A6 CD 10 96                             call    copy_galaxy_to_system
 686  84A9 DD E5        SeedGalaxy0Loop:        push    ix
 687  84AB D1                                   pop     de
 688  84AC 21 1D 92                             ld      hl,SystemSeed
 689  84AF CD 16 96                             call    copy_seed
 690  84B2 DD E5                                push    ix
 691  84B4 E1                                   pop     hl
 692  84B5 ED 34 08 00                          add     hl,8
 693  84B9 E5                                   push    hl
 694  84BA DD E1                                pop     ix
 695  84BC CD 4B 96                             call    next_system_seed
 696  84BF 3A 36 92                             ld		a,(XSAV)
 697  84C2 3D                                   dec		a
 698  84C3 FE 00                                cp		0
 699  84C5 C8                                   ret		z
 700  84C6 32 36 92                             ld		(XSAV),a
 701  84C9 20 DE                                jr      nz,SeedGalaxy0Loop
 702  84CB C9                                   ret
 703  84CC
 704  84CC
 705  84CC
 706  84CC
 707  84CC                  include "ModelRender/testdrawing.asm"
# file opened: ModelRender/testdrawing.asm
   1+ 84CC
   2+ 84CC              ; Test of render
   3+ 84CC              ;  Generate a memory bank for a ship using univ_ship_data to create a block in bank 6
   4+ 84CC              ;  need to clear page 70
   5+ 84CC              ;  swap in to bank 7
   6+ 84CC              ;  use UBnKxlo as INWK 0 (we will add an equ so that its moved over)
   7+ 84CC              ;  x cobraMk3 data to map data
   8+ 84CC              ;  Use ShipModelTable table indexed by cobraMk3 ship number (CobraTablePointer)
   9+ 84CC              ;  Pull ship model table into bank 6
  10+ 84CC              ;  use dma transfer to copy data from bank 6 to bank 7
  11+ 84CC              ;
  12+ 84CC              ScaleRotationMatrix197:
  13+ 84CC 06 09        	ld		b,9
  14+ 84CE 21 30 C0     	ld		hl,UBnkTransmatSidev
  15+ 84D1              ScaleRotationLoop:
  16+ 84D1 7E           	ld		a,(hl)
  17+ 84D2 5F           	ld		e,a
  18+ 84D3 23           	inc		hl                  ; move to hi byte
  19+ 84D4 7E           	ld		a,(hl)
  20+ 84D5 57           	ld		d,a
  21+ 84D6 E6 80            and     SignOnly8Bit        ; strip out sign bit
  22+ 84D8 DD 6F        	ld		ixl,a				; retain for sign bit
  23+ 84DA              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2
  23+ 84DA CB 23       >			   sla e
  23+ 84DC CB 12       >			   rl  d
  24+ 84DE 7A               ld      a,d
  25+ 84DF 0E C5        	ld		c,ConstNorm
  26+ 84E1 7A           	ld		a,d					; a = D Hi* 2
  27+ 84E2 C5           	push	bc
  28+ 84E3 E5           	push	hl
  29+ 84E4 CD FE 9F     	call	DIV16Amul256dCUNDOC	; result in BC
  30+ 84E7 E1           	pop		hl
  31+ 84E8 78           	ld		a,b
  32+ 84E9 DD B5            or      ixl                 ; bring back sign bit
  33+ 84EB 77               ld      (hl),a
  34+ 84EC 2B               dec     hl
  35+ 84ED 71               ld      (hl),c
  36+ 84EE 23               inc     hl
  37+ 84EF C1           	pop		bc
  38+ 84F0 23               inc     hl                  ; no to next vertex value
  39+ 84F1 10 DE        	djnz	ScaleRotationLoop
  40+ 84F3 C9           	ret
  41+ 84F4
  42+ 84F4              ScaleXX16Matrix197:
  43+ 84F4 06 09        	ld		b,9                 ; Interate though all 9 matrix elements
  44+ 84F6 0E C5        	ld		c,ConstNorm         ; c = 197
  45+ 84F8 21 30 C0     	ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  46+ 84FB              ScaleXX16Loop:
  47+ 84FB 7E           	ld		a,(hl)              ; set DE = matrix value
  48+ 84FC 5F           	ld		e,a                 ;
  49+ 84FD 23           	inc		hl                  ;
  50+ 84FE 7E           	ld		a,(hl)              ;
  51+ 84FF 57           	ld		d,a                 ;
  52+ 8500 E6 80            and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  53+ 8502 DD 6F        	ld		ixl,a				; retain for sign bit
  54+ 8504              	ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  54+ 8504 CB 23       >			   sla e
  54+ 8506 CB 12       >			   rl  d
  55+ 8508 7A               ld      a,d                 ; a = high byte after x 2
  56+ 8509 C5           	push	bc                  ; save BC  counter and constant 197
  57+ 850A E5           	push	hl                  ; save HL
  58+ 850B CD FE 9F     	call	DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  59+ 850E E1           	pop		hl
  60+ 850F 2B               dec     hl                  ; move back to low byte
  61+ 8510 71               ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  62+ 8511 23               inc     hl                  ; move back to high byte
  63+ 8512 7E               ld      a,(hl)
  64+ 8513 E6 80            and     $80
  65+ 8515 77               ld      (hl),a              ; write back just sign bit
  66+ 8516 C1           	pop		bc                  ; retrieve both counter and constant 197
  67+ 8517 23               inc     hl                  ; no to next vertex value
  68+ 8518 10 E1        	djnz	ScaleXX16Loop
  69+ 851A C9           	ret
  70+ 851B
  71+ 851B              GetXX18Scale:
  72+ 851B 3A 10 C3         ld      a,(QAddr)
  73+ 851E DD 6F            ld      ixl,a                 ; save Scale in C
  74+ 8520 ED 4B 69 C0      ld      bc,(UBnkDrawCam0xLo)
  75+ 8524 ED 5B 6C C0      ld      de,(UBnkDrawCam0yLo)
  76+ 8528 2A 6F C0         ld      hl,(UBnkDrawCam0zLo)
  77+ 852B              ScalePos:
  78+ 852B 78               ld      a,b
  79+ 852C B2               or      d
  80+ 852D B4               or      h
  81+ 852E CA 42 85         jp      z,ScalePosDone
  82+ 8531 DD 2C            inc     ixl
  83+ 8533                  ShiftBCRight1
  83+ 8533 CB 38       >			   srl b
  83+ 8535 CB 19       >			   rr  c
  84+ 8537                  ShiftDERight1
  84+ 8537 CB 3A       >			   srl d
  84+ 8539 CB 1B       >			   rr  e
  85+ 853B                  ShiftHLRight1
  85+ 853B CB 3C       >			   srl h
  85+ 853D CB 1D       >			   rr  l
  86+ 853F C3 2B 85         jp      ScalePos
  87+ 8542              ScalePosDone:
  88+ 8542 DD 7D            ld      a,ixl
  89+ 8544 32 38 92         ld      (XX17),a
  90+ 8547 C9               ret
  91+ 8548
  92+ 8548
  93+ 8548              ScaleOrientationXX16:
  94+ 8548              ScaleRotationMatrix:
  95+ 8548                  MODULE  ScaleRotationMatrix
  96+ 8548 06 09        	ld		b,9
  97+ 854A 21 48 C0     	ld		hl,UbnkTransInvRow0x0
  98+ 854D 3A 38 92     	ld		a,(XX17)
  99+ 8550 FE 00        	cp		0
 100+ 8552 C8           	ret		z									; no mulitplier then bail out early
 101+ 8553 DD 6F        	ld		ixl,a								; master copy of 2^multiplier
 102+ 8555              ScaleRotationLoop:
 103+ 8555 5E           	ld		e,(hl)
 104+ 8556 23           	inc		hl
 105+ 8557 56           	ld		d,(hl)
 106+ 8558 7A           	ld		a,d
 107+ 8559 E6 80        	and		$80
 108+ 855B DD 67        	ld		ixh,a								; make a copy for sign purposes
 109+ 855D 7A           	ld		a,d									; we need it back now to strip sign
 110+ 855E E6 7F        	and		SignMask8Bit
 111+ 8560 57           	ld		d,a
 112+ 8561 DD 4D        	ld		c,ixl								; get master copy of multiplier
 113+ 8563              ScaleLoop:
 114+ 8563              	ShiftDELeft1
 114+ 8563 CB 23       >			   sla e
 114+ 8565 CB 12       >			   rl  d
 115+ 8567 0D           	dec		c
 116+ 8568 20 F9        	jr		nz,ScaleLoop						; loop until 0
 117+ 856A              .NoMultiply:
 118+ 856A 7A           	ld		a,d
 119+ 856B DD B4        	or		ixh									; bring sign bit back in to a and
 120+ 856D 77           	ld		(hl),a								; we don;t need to go though d reg as an optimisation
 121+ 856E 2B           	dec		hl
 122+ 856F 73           	ld		(hl),e								; written back DE now
 123+ 8570 23           	inc		hl
 124+ 8571 23           	inc		hl									; on to next byte now
 125+ 8572 10 E1        	djnz	ScaleRotationLoop
 126+ 8574 C9           	ret
 127+ 8575                  ENDMODULE
 128+ 8575
 129+ 8575              ScaleNodeTo8Bit:								; TODO make signed
 130+ 8575 ED 4B 79 C0  	ld			bc,(UBnkZScaled)
 131+ 8579 2A 75 C0     	ld			hl,(UBnkXScaled)
 132+ 857C ED 5B 77 C0  	ld			de,(UBnkYScaled)
 133+ 8580              SetABSbc:
 134+ 8580 78           	ld			a,b
 135+ 8581 DD 67        	ld			ixh,a
 136+ 8583 E6 7F        	and			SignMask8Bit
 137+ 8585 47           	ld			b,a									; bc = ABS bc
 138+ 8586              SetABShl:
 139+ 8586 7C           	ld			a,h
 140+ 8587 DD 6F        	ld			ixl,a
 141+ 8589 E6 7F        	and			SignMask8Bit
 142+ 858B 67           	ld			h,a									; hl = ABS hl
 143+ 858C              SetABSde:
 144+ 858C 7A           	ld			a,d
 145+ 858D FD 67        	ld			iyh,a
 146+ 858F E6 7F        	and			SignMask8Bit
 147+ 8591 57           	ld			d,a									; de = ABS de
 148+ 8592              ScaleNodeTo8BitLoop:
 149+ 8592 78               ld          a,b		                            ; U	\ z hi
 150+ 8593 B4           	or			h                                   ; XX15+1	\ x hi
 151+ 8594 B2           	or			d                                   ; XX15+4	\ y hi
 152+ 8595 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 153+ 8597                  ShiftHLRight1
 153+ 8597 CB 3C       >			   srl h
 153+ 8599 CB 1D       >			   rr  l
 154+ 859B                  ShiftDERight1
 154+ 859B CB 3A       >			   srl d
 154+ 859D CB 1B       >			   rr  e
 155+ 859F              	ShiftBCRight1
 155+ 859F CB 38       >			   srl b
 155+ 85A1 CB 19       >			   rr  c
 156+ 85A3 C3 92 85         jp          ScaleNodeTo8BitLoop
 157+ 85A6              ScaleNodeDone:										; now we have scaled values we have to deal with sign
 158+ 85A6 DD 7C        	ld			a,ixh								; get sign bit and or with b
 159+ 85A8 E6 80        	and			SignOnly8Bit
 160+ 85AA B0           	or			b
 161+ 85AB 47           	ld			b,a
 162+ 85AC              SignforHL:
 163+ 85AC DD 7D        	ld			a,ixl								; get sign bit and or with b
 164+ 85AE E6 80        	and			SignOnly8Bit
 165+ 85B0 B4           	or			h
 166+ 85B1 67           	ld			h,a
 167+ 85B2              SignforDE:
 168+ 85B2 FD 7C        	ld			a,iyh								; get sign bit and or with b
 169+ 85B4 E6 80        	and			SignOnly8Bit
 170+ 85B6 B2           	or			d
 171+ 85B7 57           	ld			d,a
 172+ 85B8              SignsDoneSaveResult:
 173+ 85B8 ED 43 79 C0  	ld			(UBnkZScaled),bc
 174+ 85BC 22 75 C0     	ld			(UBnkXScaled),hl
 175+ 85BF ED 53 77 C0  	ld			(UBnkYScaled),de
 176+ 85C3 78           	ld			a,b
 177+ 85C4 32 30 92     	ld			(varU),a
 178+ 85C7 79           	ld			a,c
 179+ 85C8 32 4E 92     	ld			(varT),a
 180+ 85CB C9           	ret
 181+ 85CC
 182+ 85CC 00 00        varR16			DW	0
 183+ 85CE
 184+ 85CE              TestProjectNodeToScreen:
 185+ 85CE ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
 186+ 85D2 79           	ld			a,c                                 ;  so no need for a negative check
 187+ 85D3 32 31 92     	ld			(varQ),a		                    ; VarQ = z
 188+ 85D6 3A 75 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
 189+ 85D9 CD FE 9F     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
 190+ 85DC              ;	ld			(varR16),bc							; store result in R for now TODO move to say D reg
 191+ 85DC 3A 76 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
 192+ 85DF                  JumpOnBitSet a,7,TestNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 192+ 85DF CB 7F       >                        bit 	7,a
 192+ 85E1 C2 EC 85    >                        jp      nz,TestNegativeXPoint
 193+ 85E4              TestPositiveXPoint:									; x was positive result
 194+ 85E4              ;	ld			bc,(varR16)							; calculated X positision
 195+ 85E4 2E 80            ld          l,ScreenCenterX						;
 196+ 85E6 26 00            ld          h,0
 197+ 85E8 09               add         hl,bc								; hl = Screen Centre + X
 198+ 85E9 C3 F3 85         jp          TestStoreXPoint
 199+ 85EC              TestNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
 200+ 85EC              ;	ld			bc,(varR16
 201+ 85EC 2E 80            ld          l,ScreenCenterX
 202+ 85EE 26 00            ld          h,0
 203+ 85F0              ;	ld			c,a
 204+ 85F0              ;    ld          b,0
 205+ 85F0                  ClearCarryFlag
 205+ 85F0 B7          >				or a
 206+ 85F1 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
 207+ 85F3              TestStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 208+ 85F3 EB               ex          de,hl
 209+ 85F4 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
 210+ 85F7 FD 72 01         ld          (iy+1),d                            ; Update X Point
 211+ 85FA              TestProcessYPoint:
 212+ 85FA ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
 213+ 85FE 79           	ld			a,c
 214+ 85FF 32 31 92     	ld			(varQ),a
 215+ 8602              ;    ldCopyByte  varT,varQ                          ; T =>  Q	\ zdist lo
 216+ 8602 3A 77 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
 217+ 8605 CD FE 9F     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
 218+ 8608              ;	ld			a,c
 219+ 8608              	;ld			(varR),a
 220+ 8608 3A 78 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
 221+ 860B                  JumpOnBitSet a,7,TestNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 221+ 860B CB 7F       >                        bit 	7,a
 221+ 860D C2 18 86    >                        jp      nz,TestNegativeYPoint
 222+ 8610              TestPositiveYPoint:									; Y is positive so above the centre line
 223+ 8610              ;	ld			a,(varR)							; in fact this code is already 16 bit aware
 224+ 8610 2E 60            ld          l,ScreenCenterY
 225+ 8612              ;	ld			c,a									; TODO DEBUG just added for testing to force 8 bit
 226+ 8612              ;	ld			b,0
 227+ 8612                  ClearCarryFlag
 227+ 8612 B7          >				or a
 228+ 8613 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 229+ 8615 C3 1D 86         jp          TestStoreYPoint
 230+ 8618              TestNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 231+ 8618              ;	ld			a,(varR)
 232+ 8618 2E 60            ld          l,ScreenCenterY
 233+ 861A 26 00            ld          h,0
 234+ 861C 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 235+ 861D              TestStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 236+ 861D EB               ex          de,hl
 237+ 861E FD 73 02         ld          (iy+2),e                            ; Update Y Point
 238+ 8621 FD 72 03         ld          (iy+3),d                            ; Update Y Point
 239+ 8624 C9               ret
 240+ 8625
 241+ 8625                  include "ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1++8625 21 7B C0     CopyXX12ToXX15:         ld      hl,XX12
   2++8628 11 75 C0                             ld      de,XX15
   3++862B 01 06 00                             ld      bc,6
   4++862E ED B0                                ldir
   5++8630 C9                                   ret
   6++8631
   7++8631 21 7B C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8++8634 11 81 C0                             ld      de,XX12Save
   9++8637 01 06 00                             ld      bc,6
  10++863A ED B0                                ldir
  11++863C C9                                   ret
  12++863D
  13++863D 21 81 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14++8640 11 7B C0                             ld      de,XX12
  15++8643 01 06 00                             ld      bc,6
  16++8646 ED B0                                ldir
  17++8648 C9                                   ret
  18++8649
  19++8649 21 7B C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20++864C 11 87 C0                             ld      de,XX12Save2
  21++864F 01 06 00                             ld      bc,6
  22++8652 ED B0                                ldir
  23++8654 C9                                   ret
  24++8655
  25++8655 21 87 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26++8658 11 7B C0                             ld      de,XX12
  27++865B 01 06 00                             ld      bc,6
  28++865E ED B0                                ldir
  29++8660 C9                                   ret
  30++8661
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 242+ 8661
 243+ 8661                  include "ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1++8661 21 75 C0     CopyXX15ToXX12:         ld		hl,XX15
   2++8664 11 7B C0                             ld      de,XX12
   3++8667 01 06 00                             ld      bc,6
   4++866A ED B0                                ldir
   5++866C C9                                   ret
   6++866D
   7++866D 21 75 C0     CopyXX15ToXX15Save:     ld		hl,XX15
   8++8670 11 90 C0                             ld      de,XX15Save
   9++8673 01 06 00                             ld      bc,6
  10++8676 ED B0                                ldir
  11++8678 C9                                   ret
  12++8679
  13++8679 21 90 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  14++867C 11 75 C0                             ld      de,XX15
  15++867F 01 06 00                             ld      bc,6
  16++8682 ED B0                                ldir
  17++8684 C9                                   ret
  18++8685
  19++8685 21 75 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  20++8688 11 98 C0                             ld      de,XX15Save2
  21++868B 01 06 00                             ld      bc,6
  22++868E ED B0                                ldir
  23++8690 C9                                   ret
  24++8691
  25++8691 21 98 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  26++8694 11 75 C0                             ld      de,XX15
  27++8697 01 06 00                             ld      bc,6
  28++869A ED B0                                ldir
  29++869C C9                                   ret
  30++869D
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 244+ 869D
 245+ 869D 00 00        XX12PVarQ			DW 0
 246+ 869F 00 00        XX12PVarR			DW 0
 247+ 86A1 00 00        XX12PVarS			DW 0
 248+ 86A3 00 00        XX12PVarResult1		DW 0
 249+ 86A5 00 00        XX12PVarResult2		DW 0
 250+ 86A7 00 00        XX12PVarResult3		DW 0
 251+ 86A9 00           XX12PVarSign2		DB 0
 252+ 86AA 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 253+ 86AB 00           XX12PVarSign3		DB 0
 254+ 86AC
 255+ 86AC              ; copy from wiring addhlde un iniv ship data
 256+ 86AC              XX12ProcessCalcHLPlusDESignBC:
 257+ 86AC              ; Combinations validated in ClacHLDEsignedBE.asm
 258+ 86AC              ; calcs HLB + DEC where B and C are signs
 259+ 86AC 78           		ld		a,b										; get HL sign byte
 260+ 86AD CB 7F        		bit		7,a										; is high bit set?
 261+ 86AF 20 12        		jr		nz,XX12AddHLNegative					; if it is then the HL is negative
 262+ 86B1              XX12AddHLPositive:										; At here HL is positive
 263+ 86B1 79           		ld		a,c										; so we check DE as well
 264+ 86B2 CB 7F        		bit		7,a
 265+ 86B4 20 03        		jr		nz,XX12HLPosDENeg						; here if HL is negative jump
 266+ 86B6              XX12HLPosDEPos:											; so here we have +HL + +DE
 267+ 86B6 19           		add		hl,de									; which is HL+DE
 268+ 86B7 AF           		xor		a										; and will always return a + sign
 269+ 86B8 C9           		ret
 270+ 86B9              XX12HLPosDENeg:											; here we have +HL + -DE
 271+ 86B9              		ClearCarryFlag									;
 271+ 86B9 B7          >				or a
 272+ 86BA ED 52        		sbc		hl,de									; so we do HL - DE
 273+ 86BC CB 7C        		bit		7,h
 274+ 86BE C2 D7 86     		jp		nz,XX12Pt1FixNegResult					; if the result was negative we need a correction
 275+ 86C1 AF           		xor		a										; else sign is +ve
 276+ 86C2 C9           		ret
 277+ 86C3              XX12AddHLNegative:										; here we enter with -HL
 278+ 86C3 79           		ld		a,c
 279+ 86C4 CB 7F        		bit		7,a
 280+ 86C6 20 0B        		jr		nz,XX12HLNegDENeg						; and now do we have DE as negative
 281+ 86C8              XX12HLNegDEPos:											; here we have -HL + +DE
 282+ 86C8 EB           		ex		de,hl									; so to simplify concept swap DE and HL
 283+ 86C9              		ClearCarryFlag									; to make the calc
 283+ 86C9 B7          >				or a
 284+ 86CA ED 52        		sbc		hl,de									; DE - HL
 285+ 86CC CB 7C        		bit		7,h										; was the result negative
 286+ 86CE C2 D7 86     		jp		nz,XX12Pt1FixNegResult					; if so deal with it
 287+ 86D1 AF           		xor 	a										; else it is positive
 288+ 86D2 C9           		ret
 289+ 86D3              XX12HLNegDENeg:											; now we have -HL + -DE
 290+ 86D3 19           		add		hl,de									; which we can translate to (HL + DE) * -1
 291+ 86D4 3E 80        		ld		a,$80									; this sets the sign i.e. * -1
 292+ 86D6 C9           		ret
 293+ 86D7              XX12Pt1FixNegResult:	 								; the result of HLcalcDE was negative
 294+ 86D7              		NegHL											; so we 2's compliment it back to an absolute value
 294+ 86D7 AF          >	xor a
 294+ 86D8 95          >	sub l
 294+ 86D9 6F          >	ld l,a
 294+ 86DA 9F          >	sbc a,a
 294+ 86DB 94          >	sub h
 294+ 86DC 67          >	ld h,a
 295+ 86DD 3E 80        		ld		a,$80									; and set the sign to a negative
 296+ 86DF C9           		ret
 297+ 86E0
 298+ 86E0              ; We enter here with hl pointing at XX16 and bc = XX15 value
 299+ 86E0              ; so xx12 = XX15 * XX16 row
 300+ 86E0              XX12ProcessOneRow:
 301+ 86E0              XX12CalcXCell:
 302+ 86E0 ED 4B 75 C0          ld		bc,(UBnkXScaled)
 303+ 86E4 5E           		ld		e,(hl)								    ; get orientation ZX
 304+ 86E5 23           		inc		hl
 305+ 86E6 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
 306+ 86E7 7A           		ld		a,d
 307+ 86E8 A8                   xor     b
 308+ 86E9 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
 309+ 86EB DD 67        		ld		ixh,a								    ; orientation sign to ixh
 310+ 86ED 78           		ld		a,b                                     ; now make bc abs bc
 311+ 86EE E6 7F        		and		SignMask8Bit
 312+ 86F0 47           		ld		b,a                                     ; bc = abs(bc) now
 313+ 86F1 E5           		push	hl
 314+ 86F2 16 00                ld      d,0                                     ; d = value
 315+ 86F4 60           		ld		h,b
 316+ 86F5 69           		ld		l,c
 317+ 86F6 CD 50 9F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 318+ 86F9 22 A3 86     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
 319+ 86FC DD 7C        		ld		a,ixh
 320+ 86FE 32 AA 86     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
 321+ 8701 E1           		pop		hl
 322+ 8702              XX12CalcYCell:
 323+ 8702 ED 4B 77 C0          ld		bc,(UBnkYScaled)
 324+ 8706 23           		inc		hl
 325+ 8707 5E           		ld		e,(hl)							    	; get orientation ZX
 326+ 8708 23           		inc		hl
 327+ 8709 56           		ld		d,(hl)
 328+ 870A 7A           		ld		a,d
 329+ 870B A8                   xor     b
 330+ 870C E6 80        		and		SignOnly8Bit
 331+ 870E DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
 332+ 8710 78           		ld		a,b                                     ; now make bc abs bc
 333+ 8711 E6 7F        		and		SignMask8Bit
 334+ 8713 47           		ld		b,a                                     ; bc = abs(bc) now
 335+ 8714 E5           		push	hl
 336+ 8715 16 00                ld      d,0                                     ; d = value
 337+ 8717 60           		ld		h,b
 338+ 8718 69           		ld		l,c
 339+ 8719 CD 50 9F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 340+ 871C 22 A5 86     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
 341+ 871F DD 7C        		ld		a,ixh
 342+ 8721 32 A9 86     		ld		(XX12PVarSign2),a					    ; S = sign
 343+ 8724 E1           		pop		hl
 344+ 8725              XX12CalcZCell:
 345+ 8725 ED 4B 79 C0          ld		bc,(UBnkZScaled)
 346+ 8729 23           		inc		hl
 347+ 872A 5E           		ld		e,(hl)								    ; get orientation ZX
 348+ 872B 23           		inc		hl
 349+ 872C 56           		ld		d,(hl)
 350+ 872D 7A           		ld		a,d
 351+ 872E A8                   xor     b
 352+ 872F E6 80        		and		SignOnly8Bit
 353+ 8731 DD 67        		ld		ixh,a								    ; orientation sign to ixh
 354+ 8733 78           		ld		a,b                                     ; now make bc abs bc
 355+ 8734 E6 7F        		and		SignMask8Bit
 356+ 8736 47           		ld		b,a                                     ; bc = abs(bc) now
 357+ 8737 16 00                ld      d,0                                     ; d = value
 358+ 8739 60           		ld		h,b
 359+ 873A 69           		ld		l,c
 360+ 873B CD 50 9F     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
 361+ 873E 22 A7 86     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
 362+ 8741 DD 7C        		ld		a,ixh
 363+ 8743 32 AB 86     		ld		(XX12PVarSign3),a					    ; S = sign
 364+ 8746              XX12CalcCellResult:
 365+ 8746 2A A3 86     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
 366+ 8749 ED 5B A5 86  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
 367+ 874D ED 4B A9 86  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
 368+ 8751              XX12MSBOnly:
 369+ 8751 6C           		ld		l,h									    ; now move results into lower byte so / 256
 370+ 8752 5A           		ld		e,d									    ; for both results
 371+ 8753 AF           		xor		a									    ;
 372+ 8754 67           		ld		h,a									    ;
 373+ 8755 57           		ld		d,a									    ; so set high byte to 0
 374+ 8756 CD 3B CB     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
 375+ 8759 47           		ld		b,a									    ; move sign into b ready for next calc
 376+ 875A 3A AB 86     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
 377+ 875D 4F           		ld		c,a									    ; goes into c to align with DE
 378+ 875E ED 5B A7 86  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
 379+ 8762 5A           		ld		e,d                                     ; d = result /256
 380+ 8763 16 00        		ld		d,0									    ; and only us high byte
 381+ 8765 CD 3B CB     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
 382+ 8768 C9           		ret											    ; hl = result, a = sign
 383+ 8769              								    ; hl = result, a = sign
 384+ 8769
 385+ 8769
 386+ 8769
 387+ 8769              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 388+ 8769              ;...X cell
 389+ 8769 21 48 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 390+ 876C CD E0 86             call    XX12ProcessOneRow                   ; hl = result, a = sign
 391+ 876F 47           		ld		b,a                                 ; b = sign
 392+ 8770 7C           		ld		a,h                                 ; a = high byte
 393+ 8771 B0           		or		b
 394+ 8772 32 7C C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 395+ 8775 7D           		ld		a,l                                 ; the result will be in the lower byte now
 396+ 8776 32 7B C0             ld      (UBnkXX12xLo),a						; that is result done for
 397+ 8779              ;...Y cell
 398+ 8779 21 50 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 399+ 877C CD E0 86             call    XX12ProcessOneRow
 400+ 877F 47           		ld		b,a
 401+ 8780 7C           		ld		a,h
 402+ 8781              ;		ld		a,l
 403+ 8781 B0           		or		b
 404+ 8782 32 7E C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 405+ 8785 7D           		ld		a,l                                 ; the result will be in the lower byte now
 406+ 8786 32 7D C0             ld      (UBnkXX12yLo),a						; that is result done for
 407+ 8789              ;...Z cell
 408+ 8789 21 58 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 409+ 878C CD E0 86             call    XX12ProcessOneRow
 410+ 878F 47           		ld		b,a
 411+ 8790 7C                   ld		a,h
 412+ 8791              ;		ld		a,l
 413+ 8791 B0           		or		b
 414+ 8792 32 80 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 415+ 8795 7D           		ld		a,l                                 ; the result will be in the lower byte now
 416+ 8796 32 7F C0             ld      (UBnkXX12zLo),a						; that is result done for
 417+ 8799 C9                   ret
 418+ 879A
 419+ 879A              TransposeXX12ByShipToXX15:
 420+ 879A 2A 7B C0             ld		hl,(UBnkXX12xLo)					; get X into HL
 421+ 879D 7C           		ld		a,h			                        ; get XX12 Sign
 422+ 879E E6 80        		and		$80									; check sign bit on high byte
 423+ 87A0 47           		ld		b,a									; and put it in of 12xlo in b
 424+ 87A1                      ;110921 debugld      h,0
 425+ 87A1 7C                   ld      a,h
 426+ 87A2 E6 7F                and     $7F
 427+ 87A4 67                   ld      h,a
 428+ 87A5                      ;110921 debugld      h,0
 429+ 87A5 ED 5B 0B C0  		ld		de,(UBnKxlo)						;
 430+ 87A9 3A 0D C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
 431+ 87AC E6 80        		and		$80									; make sure we only have bit 7
 432+ 87AE 4F           		ld		c,a									; and put sign of unkxsgn c
 433+ 87AF CD 3B CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
 434+ 87B2 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
 435+ 87B3 67           		ld		h,a
 436+ 87B4 22 75 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
 437+ 87B7              ; ..................................
 438+ 87B7 2A 7D C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
 439+ 87BA 7C           		ld		a,h
 440+ 87BB E6 80        		and		$80
 441+ 87BD 47           		ld		b,a
 442+ 87BE                      ;110921 debugld      h,0
 443+ 87BE 7C                   ld      a,h
 444+ 87BF E6 7F                and     $7F
 445+ 87C1 67                   ld      h,a
 446+ 87C2                      ;110921 debugld      h,0
 447+ 87C2 ED 5B 0E C0  		ld		de,(UBnKylo)
 448+ 87C6 3A 10 C0     		ld		a,(UBnKysgn)
 449+ 87C9 E6 80        		and		$80									; make sure we only have bit 7
 450+ 87CB 4F           		ld		c,a
 451+ 87CC CD 3B CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 452+ 87CF B4           		or		h									; combine sign in A with H
 453+ 87D0 67           		ld		h,a
 454+ 87D1 22 77 C0     		ld		(UBnkYScaled),hl
 455+ 87D4              ; ..................................
 456+ 87D4 2A 7F C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
 457+ 87D7 7C           		ld		a,h
 458+ 87D8 E6 80        		and		$80
 459+ 87DA 47           		ld		b,a
 460+ 87DB                      ;110921 debugld      h,0
 461+ 87DB 7C                   ld      a,h
 462+ 87DC E6 7F                and     $7F
 463+ 87DE 67                   ld      h,a
 464+ 87DF                      ;110921 debugld      h,0
 465+ 87DF ED 5B 11 C0  		ld		de,(UbnKzlo)
 466+ 87E3 3A 13 C0     		ld		a,(UBnKzsgn)
 467+ 87E6 E6 80        		and		$80									; make sure we only have bit 7
 468+ 87E8 4F           		ld		c,a
 469+ 87E9 CD 3B CB     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
 470+ 87EC B4           		or		h									; combine sign in A with H
 471+ 87ED 67           		ld		h,a
 472+ 87EE CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
 473+ 87F0 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
 474+ 87F2 E6 7F                and     $7F                                 ; a = value unsigned
 475+ 87F4 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
 476+ 87F6 7D                   ld      a,l                                 ; get low byte now
 477+ 87F7              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
 477+ 87F7 FE 04       >                        cp      4
 477+ 87F9 DA 08 88    >                        jp		c,ClampZto4
 478+ 87FC              NoClampZto4:
 479+ 87FC 22 79 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
 480+ 87FF 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
 481+ 8800 32 4E 92             ld      (varT),a
 482+ 8803 7C           		ld		a,h
 483+ 8804 32 30 92             ld      (varU),a
 484+ 8807 C9           		ret
 485+ 8808              ClampZto4:											; This is where we limit 4 to a minimum of 4
 486+ 8808 21 04 00     		ld		hl,4
 487+ 880B 22 79 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
 488+ 880E 7D           		ld		a,l
 489+ 880F 32 4E 92             ld      (varT),a                            ;                                                                           ;;;
 490+ 8812 7C           		ld		a,h
 491+ 8813 32 30 92             ld      (varU),a 						; compatibility for now
 492+ 8816 C9           		ret
 493+ 8817
 494+ 8817
 495+ 8817              RescaleXXValue:
 496+ 8817 5E           		ld		e,(hl)
 497+ 8818 23           		inc		hl
 498+ 8819 56           		ld		d,(hl)
 499+ 881A 7A           		ld		a,d
 500+ 881B E6 80        		and		$80
 501+ 881D 47           		ld		b,a
 502+ 881E 7A           		ld		a,d
 503+ 881F E6 7F        		and		$7F
 504+ 8821 4F           		ld		c,a
 505+ 8822 7B           		ld		a,e
 506+ 8823 CB 7F        		bit		7,a
 507+ 8825 CA 29 88     		jp		z,XX15XLT128
 508+ 8828              XX15XGT128:
 509+ 8828 0C           		inc		c
 510+ 8829              XX15XLT128:
 511+ 8829 59           		ld		e,c
 512+ 882A 50           		ld		d,b
 513+ 882B 72           		ld		(hl),d
 514+ 882C 2B           		dec		hl
 515+ 882D 73           		ld		(hl),e
 516+ 882E 23           		inc		hl
 517+ 882F 23           		inc		hl
 518+ 8830 C9           		ret
 519+ 8831
 520+ 8831
 521+ 8831              NegZeroBodge:
 522+ 8831 21 20 C0         ld     hl,UBnkrotmatNosevX
 523+ 8834 06 09            ld     b,9
 524+ 8836              NegBodgeLoop:
 525+ 8836 7E               ld      a,(hl)
 526+ 8837 23               inc     hl
 527+ 8838 FE 00            cp      0
 528+ 883A 20 07            jr      nz,NegBodgeSkip1
 529+ 883C 7E               ld      a,(hl)
 530+ 883D FE 80            cp      $80
 531+ 883F 20 02            jr      nz,NegBodgeSkip1
 532+ 8841 AF               xor     a
 533+ 8842 77               ld      (hl),a
 534+ 8843              NegBodgeSkip1:
 535+ 8843 23               inc     hl
 536+ 8844 10 F0            djnz    NegBodgeLoop
 537+ 8846 C9               ret
 538+ 8847
 539+ 8847 B0           RollLoop: DB $B0
 540+ 8848
 541+ 8848              TestRender:
 542+ 8848              	;include "Tests/PlotTest2.asm"
 543+ 8848              ; Initialise banks is include in main initialise subrotines now
 544+ 8848              ; Prototype for .TITLE
 545+ 8848              TestLines:
 546+ 8848              ;include "Tests/LineHLtoDETest.asm"
 547+ 8848              TestCalcs:
 548+ 8848
 549+ 8848              ;include "Tests/CalcHLDEsignedBE.asm"
 550+ 8848
 551+ 8848
 552+ 8848 3E 5A        	ld	a,90
 553+ 884A 4F           	ld	c,a
 554+ 884B 16 6C        	ld	d,108
 555+ 884D CD FD A3     	call AequAdivDmul96
 556+ 8850
 557+ 8850 3E 5A        	ld	a,90
 558+ 8852 06 6C        	ld	b,108
 559+ 8854 21 00 24     	ld	hl,$2400
 560+ 8857 22 32 92     	ld	(varR),hl
 561+ 885A CD 9E A6     	call	TidySub1
 562+ 885D
 563+ 885D              	;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
 564+ 885D
 565+ 885D              TestTIDY:
 566+ 885D 21 00 00     	ld	hl,$0000
 567+ 8860 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 568+ 8863 21 00 8D     	ld	hl,$8D00
 569+ 8866 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 570+ 8869 21 00 E0     	ld	hl,$E000
 571+ 886C 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 572+ 886F
 573+ 886F 21 00 00     	ld	hl,$0000
 574+ 8872 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 575+ 8875 21 00 B4     	ld	hl,$B400
 576+ 8878 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 577+ 887B 21 00 CF     	ld	hl,$CF00
 578+ 887E 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 579+ 8881
 580+ 8881 21 00 28     	ld	hl,$2800
 581+ 8884 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 582+ 8887 21 00 00     	ld	hl,$0000
 583+ 888A 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 584+ 888D 21 00 00     	ld	hl,$0000
 585+ 8890 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 586+ 8893 CD 8D 89     	call	TestPitchPos
 587+ 8896              ;	call	TestRollPos
 588+ 8896              ;	call	TIDY
 589+ 8896
 590+ 8896
 591+ 8896 21 00 00     	ld	hl,$0
 592+ 8899 22 20 C0     	ld	(UBnkrotmatNosevX),hl
 593+ 889C 21 CE 63     	ld	hl,$63CE
 594+ 889F 22 22 C0     	ld	(UBnkrotmatNosevY),hl
 595+ 88A2 21 C6 1D     	ld	hl,$1DC6
 596+ 88A5 22 24 C0     	ld	(UBnkrotmatNosevZ),hl
 597+ 88A8
 598+ 88A8 21 00 00     	ld	hl,$0
 599+ 88AB 22 1A C0     	ld	(UBnkrotmatRoofvX),hl
 600+ 88AE 21 7D 64     	ld	hl,$647D
 601+ 88B1 22 1C C0     	ld	(UBnkrotmatRoofvY),hl
 602+ 88B4 21 9B 23     	ld	hl,$239B
 603+ 88B7 22 1E C0     	ld	(UBnkrotmatRoofvZ),hl
 604+ 88BA
 605+ 88BA 21 00 60     	ld	hl,$6000
 606+ 88BD 22 14 C0     	ld	(UBnkrotmatSidevX),hl
 607+ 88C0 21 00 00     	ld	hl,$0
 608+ 88C3 22 16 C0     	ld	(UBnkrotmatSidevY),hl
 609+ 88C6 21 00 00     	ld	hl,$0
 610+ 88C9 22 18 C0     	ld	(UBnkrotmatSidevZ),hl
 611+ 88CC CD EE A6     	call	TIDY
 612+ 88CF
 613+ 88CF
 614+ 88CF              TestRollLoop:
 615+ 88CF 3A 47 88         ld      a,(RollLoop)
 616+ 88D2 3D               dec     a
 617+ 88D3                  JumpIfALTNusng $80 , ItsRoll
 617+ 88D3 FE 80       >                        cp      $80
 617+ 88D5 DA E1 88    >                        jp		c,ItsRoll
 618+ 88D8 32 47 88         ld      (RollLoop),a
 619+ 88DB CD 8D 89       	call	TestPitchPos
 620+ 88DE C3 F7 88         jp     SkipTidyUp
 621+ 88E1              ItsRoll;
 622+ 88E1 FE 00            cp      0
 623+ 88E3 20 0B            jr      nz,DontReset
 624+ 88E5 3E B0            ld      a,$B0
 625+ 88E7 32 47 88         ld      (RollLoop),a
 626+ 88EA CD 53 89         call    TestRollPos
 627+ 88ED C3 F7 88         jp      SkipTidyUp
 628+ 88F0              DontReset
 629+ 88F0 32 47 88         ld      (RollLoop),a
 630+ 88F3 CD 53 89         call    TestRollPos
 631+ 88F6 C9               ret
 632+ 88F7
 633+ 88F7              SkipTidyUp:
 634+ 88F7
 635+ 88F7
 636+ 88F7
 637+ 88F7 00 00        DebugPoint: DW 0
 638+ 88F9
 639+ 88F9              SubColor1:
 640+ 88F9 7C           	ld		a,h
 641+ 88FA D6 1F        	sub		$1F
 642+ 88FC 67           	ld		h,a
 643+ 88FD C9           	ret
 644+ 88FE              SubColor2:
 645+ 88FE 7C           	ld		a,h
 646+ 88FF D6 2F        	sub		$2F
 647+ 8901 67           	ld		h,a
 648+ 8902 C9           	ret
 649+ 8903
 650+ 8903                  ; V1 /512 => Part 1 = V1 - (1 /512) ; Oart 2 = V2 / 16 Answer = p1 + p2
 651+ 8903
 652+ 8903              SetupShip:
 653+ 8903 47               ld  b,a
 654+ 8904 CB 47            bit  0,a
 655+ 8906 28 0B            jr   z,ShipRoot
 656+ 8908 FE 05            cp  5
 657+ 890A 28 14            jr  z,ShipUp
 658+ 890C FE 03            cp  3
 659+ 890E 28 23            jr  z,ShipSide
 659+ 8910
 660+ 8910 18 31            jr  ShipNose
 661+ 8912 C9               ret
 662+ 8913
 663+ 8913              ShipRoot:
 664+ 8913 21 00 00         ld hl,0
 665+ 8916 22 75 C0         ld (UBnkXScaled),hl
 666+ 8919 22 77 C0         ld (UBnkYScaled),hl
 667+ 891C 22 79 C0         ld (UBnkZScaled),hl
 668+ 891F C9               ret
 669+ 8920
 670+ 8920              ShipUp:
 671+ 8920 21 00 00         ld hl,0
 672+ 8923 22 75 C0         ld (UBnkXScaled),hl
 673+ 8926 21 14 00         ld hl,20
 674+ 8929 22 77 C0         ld (UBnkYScaled),hl
 675+ 892C 21 00 00         ld hl,0
 676+ 892F 22 79 C0         ld (UBnkZScaled),hl
 677+ 8932 C9               ret
 678+ 8933
 679+ 8933              ShipSide:
 680+ 8933 21 14 00         ld hl,20
 681+ 8936 22 75 C0         ld (UBnkXScaled),hl
 682+ 8939 21 00 00         ld hl,0
 683+ 893C 22 77 C0         ld (UBnkYScaled),hl
 684+ 893F 22 79 C0         ld (UBnkZScaled),hl
 685+ 8942 C9               ret
 686+ 8943
 687+ 8943              ShipNose:
 688+ 8943 21 00 00         ld hl,0
 689+ 8946 22 75 C0         ld (UBnkXScaled),hl
 690+ 8949 22 77 C0         ld (UBnkYScaled),hl
 691+ 894C 21 14 00         ld hl,20
 692+ 894F 22 79 C0         ld (UBnkZScaled),hl
 693+ 8952 C9               ret
 694+ 8953
 695+ 8953              TestRollPos:
 696+ 8953 21 14 C0     	ld	hl,UBnkrotmatSidevX
 697+ 8956 22 58 91     	ld	(varAxis1),hl
 698+ 8959 21 16 C0     	ld	hl,UBnkrotmatSidevY
 699+ 895C 22 5A 91     	ld	(varAxis2),hl
 700+ 895F AF           	xor	a
 701+ 8960 32 48 92     	ld	(varRAT2),a
 702+ 8963 CD 00 CC     	call MVS5XRotateXAxis
 703+ 8966 21 1A C0     	ld	hl,UBnkrotmatRoofvX
 704+ 8969 22 58 91     	ld	(varAxis1),hl
 705+ 896C 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 706+ 896F 22 5A 91     	ld	(varAxis2),hl
 707+ 8972 AF           	xor	a
 708+ 8973 32 48 92     	ld	(varRAT2),a
 709+ 8976 CD 00 CC     	call MVS5XRotateXAxis
 710+ 8979 21 20 C0     	ld	hl,UBnkrotmatNosevX
 711+ 897C 22 58 91     	ld	(varAxis1),hl
 712+ 897F 21 22 C0     	ld	hl,UBnkrotmatNosevY
 713+ 8982 22 5A 91     	ld	(varAxis2),hl
 714+ 8985 AF           	xor	a
 715+ 8986 32 48 92     	ld	(varRAT2),a
 716+ 8989 CD 00 CC     	call MVS5XRotateXAxis
 717+ 898C C9           	ret
 718+ 898D
 719+ 898D              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 720+ 898D              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 721+ 898D
 722+ 898D              TestPitchPos:
 723+ 898D 21 16 C0         ld	hl,UBnkrotmatSidevY
 724+ 8990 22 58 91         ld	(varAxis1),hl
 725+ 8993 21 18 C0         ld	hl,UBnkrotmatSidevZ
 726+ 8996 22 5A 91         ld	(varAxis2),hl
 727+ 8999 AF               xor	a
 728+ 899A 32 48 92         ld	(varRAT2),a
 729+ 899D CD 00 CC         call MVS5XRotateXAxis
 730+ 89A0              ; Do Y
 731+ 89A0 21 1C C0     	ld	hl,UBnkrotmatRoofvY
 732+ 89A3 22 58 91     	ld	(varAxis1),hl
 733+ 89A6 21 1E C0     	ld	hl,UBnkrotmatRoofvZ
 734+ 89A9 22 5A 91     	ld	(varAxis2),hl
 735+ 89AC AF           	xor	a
 736+ 89AD 32 48 92     	ld	(varRAT2),a
 737+ 89B0 CD 00 CC     	call MVS5XRotateXAxis
 738+ 89B3              ; Do Z
 739+ 89B3 21 22 C0     	ld	hl,UBnkrotmatNosevY
 740+ 89B6 22 58 91     	ld	(varAxis1),hl
 741+ 89B9 21 24 C0     	ld	hl,UBnkrotmatNosevZ
 742+ 89BC 22 5A 91     	ld	(varAxis2),hl
 743+ 89BF AF           	xor	a
 744+ 89C0 32 48 92     	ld	(varRAT2),a
 745+ 89C3 CD 00 CC     	call MVS5XRotateXAxis
 746+ 89C6 C9           	ret
 747+ 89C7
 748+ 89C7
 749+ 89C7              TestReplot:
 750+ 89C7 3A 06 C3         ld      a,(VertexCtX6Addr)                  ; get Hull byte#8 = number of vertices *6                                   ;;;
 751+ 89CA 4F               ld      c,a									; XX20 also c = number of vertices * 6 (or XX20)
 752+ 89CB 16 06            ld      d,6
 753+ 89CD CD 2E A0         call    asm_div8                            ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 754+ 89D0 41               ld      b,c									; c = number of vertices
 755+ 89D1 FD 21 BF C0  	ld		iy,UBnkNodeArray
 756+ 89D5              RePointLoop:
 757+ 89D5 C5           	push	bc
 758+ 89D6 FD E5        	push	iy
 759+ 89D8 FD 7E 00     	ld		a,(iy+0)
 760+ 89DB 4F           	ld		c,a
 761+ 89DC FD 7E 02     	ld		a,(iy+2)
 762+ 89DF 47           	ld		b,a
 763+ 89E0 26 DF        	ld 		h,$DF
 764+ 89E2 FD 7E 01     	ld		a,(iy+1)
 765+ 89E5 57           	ld		d,a
 766+ 89E6 FD 7E 03     	ld		a,(iy+3)
 767+ 89E9 5F           	ld		e,a
 768+ 89EA B2           	or		d
 769+ 89EB 28 0C        	jr		z,RePlotAsIs
 770+ 89ED 7A           	ld 		a,d
 771+ 89EE FE 00        	cp		0
 772+ 89F0 C4 F9 88     	call	nz,SubColor1
 773+ 89F3 7A           	ld 		a,d
 774+ 89F4 FE 00        	cp		0
 775+ 89F6 C4 F9 88     	call	nz,SubColor1
 776+ 89F9              RePlotAsIs:
 777+ 89F9 7C           	ld		a,h
 778+ 89FA              	MMUSelectLayer2
 778+ 89FA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 779+ 89FE CD FF E0     	call    l2_plot_pixel
 780+ 8A01 E1           	pop		hl
 781+ 8A02 3E 04        	ld		a,4
 782+ 8A04 ED 31        	add		hl,a
 783+ 8A06 E5           	push	hl
 784+ 8A07 FD E1        	pop		iy								; this is very expensive need to optimise TODO
 785+ 8A09 C1           	pop		bc
 786+ 8A0A 10 C9        	djnz	RePointLoop
 787+ 8A0C C9           	ret
 788+ 8A0D
 789+ 8A0D                  ;ProcessFaceNormDebug:
 790+ 8A0D              ;    push    hl
 791+ 8A0D              ;    push    bc
 792+ 8A0D              ;    push    de
 793+ 8A0D              ;    push    ix
 794+ 8A0D              ;    push    iy
 795+ 8A0D              ;    ld      hl,UBnkHullNormals
 796+ 8A0D              ;    call    CopyFaceToXX12
 797+ 8A0D              ;    call    CopyXX15ToXX15Save
 798+ 8A0D              ;    call    CopyXX12ToXX15
 799+ 8A0D              ;    call    RotateXX15ByTransMatXX16
 800+ 8A0D              ;    call    CopyXX15ToXX12
 801+ 8A0D              ;    call    CopyXX15SaveToXX15
 802+ 8A0D              ;    call    DotproductXX12XX15
 803+ 8A0D              ;    ld      a,(varS)
 804+ 8A0D              ;    JumpOnBitClear a,7,ItsGreen
 805+ 8A0D              ;
 806+ 8A0D              ;    ld      a,193
 807+ 8A0D              ;    jp      DoPlotNorm
 808+ 8A0D              ;ItsGreen:
 809+ 8A0D              ;	ld		a,28
 810+ 8A0D              ;DoPlotNorm:
 811+ 8A0D              ;    pop     iy
 812+ 8A0D              ;    pop     ix
 813+ 8A0D              ;    pop     de
 814+ 8A0D              ;    pop     bc
 815+ 8A0D              ;    pop     hl
 816+ 8A0D              ;    ret
 817+ 8A0D              ;
 818+ 8A0D              ;ProcessNormalLine:
 819+ 8A0D              ;    push    hl
 820+ 8A0D              ;    push    bc
 821+ 8A0D              ;    push    de
 822+ 8A0D              ;    push    ix
 823+ 8A0D              ;    push    iy
 824+ 8A0D              ;;    call    CopyXX15ToXX15Save                                      ; save current XX15
 825+ 8A0D              ;    ld      hl,UBnkHullNormals
 826+ 8A0D              ;    call    CopyFaceToXX15                                          ;        Get Face data into XX12
 827+ 8A0D              ;  ;  call    CopyXX12ToXX15
 828+ 8A0D              ;  ; ld      a,(QAddr)
 829+ 8A0D              ;  ;  xor       a
 830+ 8A0D              ;  ;  ld      (XX17),a
 831+ 8A0D              ;  ;  call    ScaleNormal
 832+ 8A0D              ;	ld		a,(UBnkXScaledSign)
 833+ 8A0D              ;	call    XX12EquNodeDotOrientation
 834+ 8A0D              ;    ld      a,(UBnkXX12zSign)
 835+ 8A0D              ;    ld      (VarBackface),a
 836+ 8A0D              ;    call    CopyXX12ToXX12Save
 837+ 8A0D              ;	call    TransposeXX12ByShipToXX15
 838+ 8A0D              ;    call    ScaleNodeTo8Bit
 839+ 8A0D              ;    call    CopyXX15ToXX12
 840+ 8A0D              ;    call    CopyXX12ToXX12Save2
 841+ 8A0D              ;    call    CopyXX15SaveToXX15 ; Copy from previous
 842+ 8A0D              ;    call    CopyXX12SaveToXX12
 843+ 8A0D              ;    ld      a,1
 844+ 8A0D              ;    ld      (XX17),a
 845+ 8A0D              ;    call    ScaleNormal
 846+ 8A0D              ;   ; call    DotproductXX12XX15
 847+ 8A0D              ;    ld      a,(VarBackface)
 848+ 8A0D              ;    JumpOnBitClear a,7,PlotRed
 849+ 8A0D              ;    JumpIfALTNUsng 51,PlotRed
 850+ 8A0D              ;PlotGreen:
 851+ 8A0D              ;    ld      a,$7C
 852+ 8A0D              ;    jp      ReadyToDrawLine
 853+ 8A0D              ;PlotRed:
 854+ 8A0D              ;    ld      a,$E0
 855+ 8A0D              ;ReadyToDrawLine:
 856+ 8A0D              ;    ld      (line_gfx_colour),a
 857+ 8A0D              ;    call    CopyXX12Save2ToXX12
 858+ 8A0D              ;    call    CopyXX12ToXX15
 859+ 8A0D              ;    ld		iy,UBnkNodeArray2
 860+ 8A0D              ;    call    TestProjectNodeToScreen
 861+ 8A0D              ;    ld		a,(iy+0)
 862+ 8A0D              ;	ld		e,a
 863+ 8A0D              ;	ld		a,(iy+2)
 864+ 8A0D              ;	ld		d,a
 865+ 8A0D              ;    ld      hl,(DebugPoint)
 866+ 8A0D              ;	MMUSelectLayer2
 867+ 8A0D              ;
 868+ 8A0D              ;	call    LineHLtoDE
 869+ 8A0D              ;
 870+ 8A0D              ;Skipit:
 871+ 8A0D              ;    pop     iy
 872+ 8A0D              ;
 873+ 8A0D              ;    pop     ix
 874+ 8A0D              ;    pop     de
 875+ 8A0D              ;    pop     bc
 876+ 8A0D              ;    pop     hl
 877+ 8A0D              ;    ret
 878+ 8A0D
# file closed: ModelRender/testdrawing.asm
 708  8A0D                  include "Universe/StarRoutines.asm"
# file opened: Universe/StarRoutines.asm
   1+ 8A0D              ;note: DIV16Amul256dCUNDOC as per
   2+ 8A0D              ;                                   BC = A0
   3+ 8A0D              ;                                   DE = 0C
   4+ 8A0D              ;                                   so BC = a * 256 / C
   5+ 8A0D
   6+ 8A0D              ; We can cheat here, Speed is always 0 or positive
   7+ 8A0D              ; z postion will always be positive if we can see it
   8+ 8A0D
   9+ 8A0D EB           InitStartAtHL:          ex      de,hl
  10+ 8A0E CD D4 95                             call    doRND
  11+ 8A11 EB                                   ex      de,hl
  12+ 8A12 F6 08                                or      8
  13+ 8A14 77                                   ld      (hl),a
  14+ 8A15 E6 7F                                and     $7F
  15+ 8A17 23                                   inc     hl
  16+ 8A18 77                                   ld      (hl),a
  17+ 8A19 EB                                   ex      de,hl
  18+ 8A1A CD D4 95                             call    doRND
  19+ 8A1D EB                                   ex      de,hl
  20+ 8A1E 0F                                   rrca
  21+ 8A1F E6 80                                and     $80
  22+ 8A21 B6                                   or      (hl)
  23+ 8A22 77                                   ld      (hl),a
  24+ 8A23 23                                   inc     hl
  25+ 8A24 EB                                   ex      de,hl
  26+ 8A25 CD D4 95                             call    doRND
  27+ 8A28 EB                                   ex      de,hl
  28+ 8A29 F6 04                                or      4
  29+ 8A2B 77                                   ld      (hl),a
  30+ 8A2C 23                                   inc     hl
  31+ 8A2D E6 7F                                and     $7F
  32+ 8A2F 77                                   ld      (hl),a
  33+ 8A30 EB                                   ex      de,hl
  34+ 8A31 CD D4 95                             call    doRND
  35+ 8A34 EB                                   ex      de,hl
  36+ 8A35 0F                                   rrca
  37+ 8A36 E6 80                                and     $80
  38+ 8A38 B6                                   or      (hl)
  39+ 8A39 77                                   ld      (hl),a
  40+ 8A3A 23                                   inc     hl
  41+ 8A3B EB                                   ex      de,hl
  42+ 8A3C CD D4 95                             call    doRND
  43+ 8A3F EB                                   ex      de,hl
  44+ 8A40 F6 90                                or      144
  45+ 8A42 77                                   ld      (hl),a
  46+ 8A43 23                                   inc     hl
  47+ 8A44 F6 70                                or      %01110000
  48+ 8A46 E6 7F                                and     $7f     ; bodge
  49+ 8A48 77                                   ld      (hl),a
  50+ 8A49 23                                   inc     hl
  51+ 8A4A C9                                   ret
  52+ 8A4B
  53+ 8A4B              ; we could cheat, flip the sign of DE and just add but its not very optimised
  54+ 8A4B 7C           StarsSUBHLDESigned:     ld      a,h
  55+ 8A4C E6 80                                and     SignOnly8Bit
  56+ 8A4E 47                                   ld      b,a                         ;save sign bit in b
  57+ 8A4F AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ 8A50                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
  58+ 8A50 FA 7E 8A    >                        jp		m,.SUBHLDEOppSGN
  59+ 8A53 78           .SUBHLDESameSigns:      ld      a,b
  60+ 8A54 B2                                   or      d
  61+ 8A55                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ 8A55 FA 5F 8A    >                        jp		m,.SUBHLDESameNeg
  62+ 8A58 B7                                   or      a
  63+ 8A59 ED 52                                sbc     hl,de
  64+ 8A5B                                      JumpIfNegative .SUBHLDESameOvrFlw
  64+ 8A5B FA 72 8A    >                        jp		m,.SUBHLDESameOvrFlw
  65+ 8A5E C9                                   ret
  66+ 8A5F 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  67+ 8A60 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  68+ 8A62 67                                   ld      h,a
  69+ 8A63 7A                                   ld      a,d
  70+ 8A64 E6 7F                                and     SignMask8Bit
  71+ 8A66 57                                   ld      d,a
  72+ 8A67 B7                                   or      a
  73+ 8A68 ED 52                                sbc     hl,de
  74+ 8A6A                                      JumpIfNegative .SUBHLDESameOvrFlw
  74+ 8A6A FA 72 8A    >                        jp		m,.SUBHLDESameOvrFlw
  75+ 8A6D 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
  76+ 8A6E F6 80                                or      SignOnly8Bit
  77+ 8A70 67                                   ld      h,a
  78+ 8A71 C9                                   ret
  79+ 8A72              .SUBHLDESameOvrFlw:     NegHL
  79+ 8A72 AF          >	xor a
  79+ 8A73 95          >	sub l
  79+ 8A74 6F          >	ld l,a
  79+ 8A75 9F          >	sbc a,a
  79+ 8A76 94          >	sub h
  79+ 8A77 67          >	ld h,a
  80+ 8A78 78                                   ld      a,b
  81+ 8A79 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  82+ 8A7B B4                                   or      h
  83+ 8A7C 67                                   ld      h,a                         ; recover sign
  84+ 8A7D C9                                   ret
  85+ 8A7E B7           .SUBHLDEOppSGN:         or      a
  86+ 8A7F 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  87+ 8A80 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  88+ 8A82 67                                   ld      h,a
  89+ 8A83 7A                                   ld      a,d
  90+ 8A84 E6 7F                                and     SignMask8Bit
  91+ 8A86 57                                   ld      d,a
  92+ 8A87 19                                   add     hl,de
  93+ 8A88 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  94+ 8A89 B4                                   or      h
  95+ 8A8A 67                                   ld      h,a                         ; set the previou sign value
  96+ 8A8B C9                                   ret
  97+ 8A8C
  98+ 8A8C 7C           StarsADDHLDESigned:     ld      a,h
  99+ 8A8D E6 80                                and     SignOnly8Bit
 100+ 8A8F 47                                   ld      b,a                         ;save sign bit in b
 101+ 8A90 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 102+ 8A91                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 102+ 8A91 FA A9 8A    >                        jp		m,.ADDHLDEOppSGN
 103+ 8A94 78           .ADDHLDESameSigns:      ld      a,b
 104+ 8A95 B2                                   or      d
 105+ 8A96                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 105+ 8A96 FA 9B 8A    >                        jp		m,.ADDHLDESameNeg
 106+ 8A99 19                                   add     hl,de
 107+ 8A9A C9                                   ret
 108+ 8A9B 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 109+ 8A9C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 110+ 8A9E 67                                   ld      h,a
 111+ 8A9F 7A                                   ld      a,d
 112+ 8AA0 E6 7F                                and     SignMask8Bit
 113+ 8AA2 57                                   ld      d,a
 114+ 8AA3 19                                   add     hl,de
 115+ 8AA4 3E 80                                ld      a,SignOnly8Bit
 116+ 8AA6 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 117+ 8AA7 67                                   ld      h,a
 118+ 8AA8 C9                                   ret
 119+ 8AA9 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 120+ 8AAA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 121+ 8AAC 67                                   ld      h,a
 122+ 8AAD 7A                                   ld      a,d
 123+ 8AAE E6 7F                                and     SignMask8Bit
 124+ 8AB0 57                                   ld      d,a
 125+ 8AB1 B7                                   or      a
 126+ 8AB2 ED 52                                sbc     hl,de
 127+ 8AB4 38 04                                jr      c,.ADDHLDEOppInvert
 128+ 8AB6 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 129+ 8AB7 B4                                   or      h
 130+ 8AB8 67                                   ld      h,a                         ; set the previou sign value
 131+ 8AB9 C9                                   ret
 132+ 8ABA              .ADDHLDEOppInvert:      NegHL
 132+ 8ABA AF          >	xor a
 132+ 8ABB 95          >	sub l
 132+ 8ABC 6F          >	ld l,a
 132+ 8ABD 9F          >	sbc a,a
 132+ 8ABE 94          >	sub h
 132+ 8ABF 67          >	ld h,a
 133+ 8AC0 78                                   ld      a,b
 134+ 8AC1 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 135+ 8AC3 B4                                   or      h
 136+ 8AC4 67                                   ld      h,a                         ; recover sign
 137+ 8AC5 C9                                   ret
 138+ 8AC6              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ 8AC6 06 0B        InitialiseStars:        ld      b,$0B
 140+ 8AC8 78                                   ld      a,b
 141+ 8AC9 32 5F 93                             ld      (NubmerOfStarsNOSTM),a
 142+ 8ACC 21 AC 94                             ld      hl,varDust
 143+ 8ACF CD 0D 8A     InitStarsLoop:          call    InitStartAtHL
 144+ 8AD2 10 FB                                djnz    InitStarsLoop
 145+ 8AD4 C9                                   ret
 146+ 8AD5              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ 8AD5              StarsForward:          ; break
 148+ 8AD5 3A 5F 93                             ld      a,(NubmerOfStarsNOSTM)
 149+ 8AD8 47                                   ld      b,a                                 ; get the number of stars to process
 150+ 8AD9 FD 21 AC 94                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 151+ 8ADD C5           StarProcessLoop:        push    bc                                  ; save counter +1
 152+ 8ADE FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)
 153+ 8AE1 5F                                   ld      e,a
 154+ 8AE2 16 00                                ld      d,0                                 ; de = zhi/256
 155+ 8AE4 3A 2D 92                             ld      a,(DELTA)
 156+ 8AE7 47                                   ld      b,a
 157+ 8AE8 0E 00                                ld      c,0                                 ; bc = delta * 256
 158+ 8AEA CD 72 A0                             call    BC_Div_DE                           ; BC = BC.DE , HL = remainder
 159+ 8AED                                      ShiftHLRight1
 159+ 8AED CB 3C       >			   srl h
 159+ 8AEF CB 1D       >			   rr  l
 160+ 8AF1                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 160+ 8AF1 CB 3C       >			   srl h
 160+ 8AF3 CB 1D       >			   rr  l
 161+ 8AF5 7D                                   ld      a,l                                 ;
 162+ 8AF6 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 163+ 8AF8 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 164+ 8AFA FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 164+ 8AFE 66 05
 165+ 8B00 ED 5B 2E 92                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 166+ 8B04 CD 4B 8A                             call    StarsSUBHLDESigned
 167+ 8B07                                      JumpOnBitSet h,7,ResetStar
 167+ 8B07 CB 7C       >                        bit 	7,h
 167+ 8B09 C2 5E 8C    >                        jp      nz,ResetStar
 168+ 8B0C FD 75 04 FD                          ld      (iy+4),hl
 168+ 8B10 74 05
 169+ 8B12 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 169+ 8B16 66 01
 170+ 8B18 7C                                   ld      a,h                                 ;
 171+ 8B19 E6 7F                                and     $7F                                 ;
 172+ 8B1B 57                                   ld      d,a                                 ; d = abs(x hi)
 173+ 8B1C DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 174+ 8B1E ED 30                                mul                                         ; de =  abs(x hi) * Q
 175+ 8B20 7C                                   ld      a,h                                 ;
 176+ 8B21 E6 80                                and     $80                                 ;
 177+ 8B23 B2                                   or      d                                   ; set sign bit in d
 178+ 8B24 57                                   ld      d,a                                 ;
 179+ 8B25 CD 8C 8A                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 180+ 8B28 7C                                   ld      a,h
 181+ 8B29 E6 7F                                and     $7F
 182+ 8B2B                                      JumpIfAGTENusng $70, ResetStar
 182+ 8B2B FE 70       >                        cp     $70
 182+ 8B2D D2 5E 8C    >                        jp		nc,ResetStar
 183+ 8B30 FD 75 00 FD                          ld      (iy+0),hl                           ;
 183+ 8B34 74 01
 184+ 8B36 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 184+ 8B3A 66 03
 185+ 8B3C 7C                                   ld      a,h                                 ;
 186+ 8B3D E6 7F                                and     $7F                                 ;
 187+ 8B3F 57                                   ld      d,a                                 ; d = abs(y hi)
 188+ 8B40 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 189+ 8B42 ED 30                                mul                                         ; de =  abs(y hi) * Q
 190+ 8B44 7C                                   ld      a,h                                 ;
 191+ 8B45 E6 80                                and     $80                                 ;
 192+ 8B47 B2                                   or      d                                   ; set sign bit in d
 193+ 8B48 57                                   ld      d,a                                 ;
 194+ 8B49 CD 8C 8A                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 195+ 8B4C 7C                                   ld      a,h
 196+ 8B4D E6 7F                                and     $7F
 197+ 8B4F                                      JumpIfAGTENusng $60, ResetStar
 197+ 8B4F FE 60       >                        cp     $60
 197+ 8B51 D2 5E 8C    >                        jp		nc,ResetStar
 198+ 8B54 7C                                   ld      a,h
 199+ 8B55 E6 80                                and     $80
 200+ 8B57 20 06                                jr      nz,.NoSecondCheck
 201+ 8B59 7C                                   ld      a,h
 202+ 8B5A                                      JumpIfAGTENusng $20, ResetStar
 202+ 8B5A FE 20       >                        cp     $20
 202+ 8B5C D2 5E 8C    >                        jp		nc,ResetStar
 203+ 8B5F FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 203+ 8B63 74 03
 204+ 8B65              ; Now roll
 205+ 8B65              ;  6. x = x - alpha * y / 256
 206+ 8B65 2A EC 91     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 207+ 8B68 7D                                   ld      a,l
 208+ 8B69 FE 00                                cp      0
 209+ 8B6B 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 210+ 8B6D                                      ;break
 211+ 8B6D                                      ;ld      a,$80
 212+ 8B6D                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 213+ 8B6D E5                                   push    hl
 214+ 8B6E 7C                                   ld      a,h
 215+ 8B6F E6 80                                and     $80
 216+ 8B71 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 217+ 8B72 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 218+ 8B73 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 219+ 8B76 5F                                   ld      e,a
 220+ 8B77 E6 80                                and     $80
 221+ 8B79 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 222+ 8B7A 7B           .rxEEquABSignX:         ld      a,e
 223+ 8B7B E6 7F                                and     $7F
 224+ 8B7D 5F                                   ld      e,a                                 ; save abs x hi in e
 225+ 8B7E ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 226+ 8B80 79                                   ld      a,c
 227+ 8B81 A8                                   xor     b                                   ; handle muliple sign bits
 228+ 8B82 B2                                   or      d
 229+ 8B83 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 230+ 8B84 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 230+ 8B88 66 01
 231+ 8B8A CD 4B 8A                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 232+ 8B8D FD 75 00 FD                          ld      (iy+0),hl
 232+ 8B91 74 01
 233+ 8B93              ;  5. y = y + alpha * x / 256
 234+ 8B93              .YRoll:                 ;break
 235+ 8B93 E1                                   pop     hl                                  ; h = sign, l = magnitude
 236+ 8B94 7C                                   ld      a,h
 237+ 8B95 E6 80                                and     $80
 238+ 8B97 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 239+ 8B98 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 240+ 8B99 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 241+ 8B9C 5F                                   ld      e,a
 242+ 8B9D E6 80                                and     $80
 243+ 8B9F 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 244+ 8BA0 7B           .ryEEquABSignX:         ld      a,e
 245+ 8BA1 E6 7F                                and     $7F
 246+ 8BA3 5F                                   ld      e,a                                 ; save abs x hi in e
 247+ 8BA4 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 248+ 8BA6 79                                   ld      a,c
 249+ 8BA7 A8                                   xor     b                                   ; handle muliple sign bits
 250+ 8BA8 B2                                   or      d
 251+ 8BA9 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 252+ 8BAA FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 252+ 8BAE 66 03
 253+ 8BB0 CD 8C 8A                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 254+ 8BB3 FD 75 02 FD                          ld      (iy+2),hl
 254+ 8BB7 74 03
 255+ 8BB9 3A E0 91     .NoRoll:                ld      a,(BET1)
 256+ 8BBC FE 00                                cp      0
 257+ 8BBE 28 22                                jr      z,.NoPitch
 258+ 8BC0              ;  8. y = y - beta * 256
 259+ 8BC0 57           .YPitch:                ld      d,a                                 ; d = BET1
 260+ 8BC1 FD 7E 02                             ld      a,(iy+2)
 261+ 8BC4 5F                                   ld      e,a                                 ; e = Y HI
 262+ 8BC5 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 263+ 8BC7 5F                                   ld      e,a
 264+ 8BC8 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 265+ 8BCA                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 265+ 8BCA CB 23       >			   sla e
 265+ 8BCC CB 12       >			   rl  d
 266+ 8BCE 3A E2 91                             ld      a,(BET2FLIP)                        ; get inverted Sign
 267+ 8BD1 B2                                   or      d
 268+ 8BD2 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 269+ 8BD3 FD 6E 02 FD                          ld      hl,(iy+2)
 269+ 8BD7 66 03
 270+ 8BD9 CD 8C 8A                             call    StarsADDHLDESigned
 271+ 8BDC FD 75 02 FD                          ld      (iy+2),hl
 271+ 8BE0 74 03
 272+ 8BE2              ; now work out screen pos
 273+ 8BE2              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 274+ 8BE2              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 275+ 8BE2              ;        pop     de
 276+ 8BE2               ;       call    ProjectStarXToScreen
 277+ 8BE2                                      ;pop     de
 278+ 8BE2              .NoPitch:
 279+ 8BE2 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 280+ 8BE5 6F                                   ld      l,a
 281+ 8BE6 E6 7F                                and     $7F
 282+ 8BE8                                      JumpOnBitSet l,7,StarNegXPt
 282+ 8BE8 CB 7D       >                        bit 	7,l
 282+ 8BEA C2 F3 8B    >                        jp      nz,StarNegXPt
 283+ 8BED C6 80                                add     a,$80
 284+ 8BEF 4F                                   ld      c,a
 285+ 8BF0 C3 F8 8B                             jp      StarDoneX
 286+ 8BF3 47           StarNegXPt:             ld      b,a
 287+ 8BF4 3E 80                                ld      a,$80
 288+ 8BF6 90                                   sub     b
 289+ 8BF7 4F                                   ld      c,a
 290+ 8BF8 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 291+ 8BFB 6F                                   ld      l,a
 292+ 8BFC E6 7F                                and     $7F
 293+ 8BFE                                      JumpOnBitSet l,7,StarNegYPt
 293+ 8BFE CB 7D       >                        bit 	7,l
 293+ 8C00 C2 09 8C    >                        jp      nz,StarNegYPt
 294+ 8C03 C6 60                                add     a,$60
 295+ 8C05 47                                   ld      b,a
 296+ 8C06 C3 0E 8C                             jp      StarDoneY
 297+ 8C09 47           StarNegYPt:             ld      b,a
 298+ 8C0A 3E 60                                ld      a,$60
 299+ 8C0C 90                                   sub     b
 300+ 8C0D 47                                   ld      b,a
 301+ 8C0E 3E FC        StarDoneY:              ld      a,$FC
 302+ 8C10 C5                                   push    bc
 303+ 8C11              .DrawStar:              MMUSelectLayer2
 303+ 8C11 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ 8C15 CD FF E0                             call    l2_plot_pixel
 305+ 8C18 FD 7E 05                             ld      a,(iy+5)
 306+ 8C1B C1                                   pop    bc
 307+ 8C1C                                      JumpIfAGTENusng $60,EndofStarsLoop
 307+ 8C1C FE 60       >                        cp     $60
 307+ 8C1E D2 4E 8C    >                        jp		nc,EndofStarsLoop
 308+ 8C21 3E D8                                ld      a,$D8
 309+ 8C23 0C                                   inc     c
 310+ 8C24 C5                                   push    bc
 311+ 8C25                                      MMUSelectLayer2
 311+ 8C25 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 312+ 8C29 CD FF E0                             call    l2_plot_pixel
 313+ 8C2C FD 7E 05                             ld      a,(iy+5)
 314+ 8C2F C1                                   pop    bc
 315+ 8C30                                      JumpIfAGTENusng $37,EndofStarsLoop
 315+ 8C30 FE 37       >                        cp     $37
 315+ 8C32 D2 4E 8C    >                        jp		nc,EndofStarsLoop
 316+ 8C35 3E B4                                ld      a,$B4
 317+ 8C37 04                                   inc     b
 318+ 8C38 C5                                   push    bc
 319+ 8C39                                      MMUSelectLayer2
 319+ 8C39 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 320+ 8C3D CD FF E0                             call    l2_plot_pixel
 321+ 8C40 FD 7E 05                             ld      a,(iy+5)
 322+ 8C43 C1                                   pop    bc
 323+ 8C44 3E B4                                ld      a,$B4
 324+ 8C46 0D                                   dec     c
 325+ 8C47                                      MMUSelectLayer2
 325+ 8C47 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 326+ 8C4B CD FF E0                             call    l2_plot_pixel
 327+ 8C4E C1           EndofStarsLoop:         pop     bc                                      ;  0
 328+ 8C4F FD E5                                push    iy                                      ; +1
 329+ 8C51 E1                                   pop     hl                                      ;  0
 330+ 8C52 ED 34 06 00                          add     hl,6
 331+ 8C56 E5           NextStarLoop2:          push    hl                                      ; +1
 332+ 8C57 FD E1                                pop     iy                                      ;  0
 333+ 8C59 05                                   dec     b
 334+ 8C5A C2 DD 8A                             jp      nz,StarProcessLoop
 335+ 8C5D C9                                   ret
 336+ 8C5E              ResetStar:              ;break
 337+ 8C5E                                      ;pop     de
 338+ 8C5E C1                                   pop     bc                                      ; 0
 339+ 8C5F 3A 5F 93                             ld      a,(NubmerOfStarsNOSTM)
 340+ 8C62 90                                   sub     b
 341+ 8C63 57                                   ld      d,a
 342+ 8C64 1E 06                                ld      e,6
 343+ 8C66 ED 30                                mul
 344+ 8C68 21 AC 94                             ld      hl,varDust
 345+ 8C6B 19                                   add     hl,de
 346+ 8C6C CD 0D 8A                             call    InitStartAtHL
 347+ 8C6F C3 56 8C                             jp      NextStarLoop2
 348+ 8C72              ;----------------------------------------------------------------------------------------------------------------------------------
 349+ 8C72 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 350+ 8C75 FD 7E 01                             ld      a,(iy+1)
 351+ 8C78 6F                                   ld      l,a
 352+ 8C79 E6 7F                                and     $7F
 353+ 8C7B 47                                   ld      b,a
 354+ 8C7C CD 15 A0                             call    DIV16BCDivDEUNDOC
 355+ 8C7F 7D                                   ld      a,l
 356+ 8C80                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 356+ 8C80 CB 7F       >                        bit 	7,a
 356+ 8C82 C2 8D 8C    >                        jp      nz,StarXNegativePoint
 357+ 8C85              ;StarXPositivePoint:									; x was positive result
 358+ 8C85 2E 80                                ld          l,ScreenCenterX						;
 359+ 8C87 26 00                                ld          h,0
 360+ 8C89 09                                   add         hl,bc								; hl = Screen Centre + X
 361+ 8C8A C3 94 8C                             jp          StarStoreXPoint
 362+ 8C8D              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 363+ 8C8D 2E 80                                ld          l,ScreenCenterX
 364+ 8C8F 26 00                                ld          h,0
 365+ 8C91                                      ClearCarryFlag
 365+ 8C91 B7          >				or a
 366+ 8C92 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 367+ 8C94              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 368+ 8C94 7D                                   ld          a,l
 369+ 8C95 32 3C 95                             ld          (varStarX),a
 370+ 8C98 C9                                   ret
 371+ 8C99
 372+ 8C99 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 373+ 8C9C FD 7E 03                             ld          a,(iy+3)
 374+ 8C9F 6F                                   ld          l,a
 375+ 8CA0 E6 7F                                and         $7F
 376+ 8CA2 47                                   ld          b,a
 377+ 8CA3 CD 15 A0                             call        DIV16BCDivDEUNDOC
 378+ 8CA6 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 379+ 8CA7                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 379+ 8CA7 CB 7F       >                        bit 	7,a
 379+ 8CA9 C2 B4 8C    >                        jp      nz,StarNegativeYPoint
 380+ 8CAC                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 381+ 8CAC 2E 60                               ld          l,ScreenCenterY
 382+ 8CAE                                      ClearCarryFlag
 382+ 8CAE B7          >				or a
 383+ 8CAF ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 384+ 8CB1 C3 B9 8C                             jp          StarStoreYPoint
 385+ 8CB4              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 386+ 8CB4 2E 60                                ld          l,ScreenCenterY
 387+ 8CB6 26 00                                ld          h,0
 388+ 8CB8 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 389+ 8CB9              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 390+ 8CB9 7D                                   ld          a,l
 391+ 8CBA 32 3D 95                             ld          (varStarY),a
 392+ 8CBD C9                                   ret
 393+ 8CBE
 394+ 8CBE
# file closed: Universe/StarRoutines.asm
 709  8CBE              ;    include "Universe/move_object-MVEIT.asm"
 710  8CBE                  include "ModelRender/draw_object.asm"
# file opened: ModelRender/draw_object.asm
   1+ 8CBE              JumpIfObjectIsPlanet:   MACRO target
   2+ 8CBE ~                                    ld a,(UbnkHullCopy)
   3+ 8CBE ~                                    bit 7,a
   4+ 8CBE ~                                    jp  nz,target
   5+ 8CBE                                      ENDM
   6+ 8CBE
   7+ 8CBE              SetMaxVisibility:       MACRO
   8+ 8CBE ~                                    ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
   9+ 8CBE ~                                    ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  10+ 8CBE                                      ENDM
  11+ 8CBE
  12+ 8CBE              JumpIfObjectOutsideFov: MACRO target
  13+ 8CBE ~            LL10CheckXInFoV:
  14+ 8CBE ~                                    ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  15+ 8CBE ~                                    ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  16+ 8CBE ~                                    or		a							    ; clear carry flag for sbc                                        ;         .
  17+ 8CBE ~                                    sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  18+ 8CBE ~                                    bit     7,h
  19+ 8CBE ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  20+ 8CBE ~            LL10CheckYInFoV:
  21+ 8CBE ~                                    ld		hl, (INWKyLo)                                                                                     ;         .
  22+ 8CBE ~                                    or		a							    ; clear carry flag                                                ;         .
  23+ 8CBE ~                                    sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  24+ 8CBE ~                                    bit     7,h
  25+ 8CBE ~                                    jp      z,target                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  26+ 8CBE                                      ENDM
  27+ 8CBE
  28+ 8CBE              LL10AddGunNode:         MACRO
  29+ 8CBE ~                                    ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  30+ 8CBE ~                                    ld		c,a                                                                                               ;         if zhi = 0
  31+ 8CBE ~                                    ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  32+ 8CBE ~                                    ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  33+ 8CBE ~                                    ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  34+ 8CBE ~                                    add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  35+ 8CBE ~            MakeBothGunNodesVisible:
  36+ 8CBE ~                                    ld      (hl),a                          ; made both gun line notes visible always
  37+ 8CBE ~                                    inc     hl                              ;
  38+ 8CBE ~                                    ld      (hl),a                          ;
  39+ 8CBE                                      ENDM
  40+ 8CBE
  41+ 8CBE              JumpIfTooFarAway:       MACRO   target
  42+ 8CBE ~                                    ld		hl,(UbnKzlo)                    ; hl = z position, by this point it must be positive
  43+ 8CBE ~                                    ShiftHLDiv8                             ; z position / 8
  44+ 8CBE ~                                    ld      a,h                             ;
  45+ 8CBE ~                                    IfANotZeroGoto target                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  46+ 8CBE                                      ENDM
  47+ 8CBE
  48+ 8CBE              DisplayObject:
  49+ 8CBE              LL9:										; Draw object in current bank                                  ;;;; Display object LL9
  50+ 8CBE                 ; DEBUG JumpIfObjectIsPlanet LL25
  51+ 8CBE              ; .................................................................................................................................
  52+ 8CBE              LL9NotPlanet:
  53+ 8CBE                  SetMaxVisibility
  53+ 8CBE 3E 1F       >                        ld		a,MaxVisibility					; max visibility                                               ;;;; default max visibility
  53+ 8CC0 32 64 91    >                        ld		(LastNormalVisible),a			; XX4                                                          ;;;;
  54+ 8CC3              ;LL9TestRemoveShip:
  55+ 8CC3              ;    JumpOnMemBitSet UbnkNweb,7,EraseOldLines; if bit 7 is set goto EraseOldLines                         ;;;;    goto EraseOldLines
  56+ 8CC3              ; .................................................................................................................................
  57+ 8CC3              LL9NoEraseLines:
  58+ 8CC3                  JumpOnMemBitSet UBnkexplDsp,5,DoExplosionOrClear7 ; mask for bit 5, exploding, display explosion state|missiles  EE28 bit5 set, explosion ongoing
  58+ 8CC3 3A 2A C0    >                        ld      a,(UBnkexplDsp)
  58+ 8CC6 CB 6F       >                        bit 	5,a
  58+ 8CC8 C2 F3 8C    >                        jp      nz,DoExplosionOrClear7
  59+ 8CCB                  JumpOnBitClear a,7,DoExplosionOrClear7  ; we now have it in A so EE28 bit7 clear, else Start blowing up!                      ;;;;
  59+ 8CCB CB 7F       >                        bit 	7,a
  59+ 8CCD CA F3 8C    >                        jp      z,DoExplosionOrClear7
  60+ 8CD0 E6 3F        	and		$3F								; clear bits 7,6                                               ;;;; else
  61+ 8CD2 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31                                                      ;;;;    clear bit 7 & 6 of INKW31
  62+ 8CD5              ;...............................................................................................................................................................................
  63+ 8CD5              LL9ZeroAccelRotCtr:
  64+ 8CD5                  ldWriteZero UBnkAccel                   ; byte #28 accel (INF),Y                                       ;;;;    set UBnkAccel & UBnkrotZCounter to 0
  64+ 8CD5 AF          >               xor      a
  64+ 8CD6 32 27 C0    >               ld       (UBnkAccel),a
  65+ 8CD9 32 29 C0     	ld		(UBnkrotZCounter),a				; byte #30 rotz counter (INF),Y                                ;;;;
  66+ 8CDC CD 02 CD     	call	EraseOldLines					; EE51 \ if bit3 set erase old lines in XX19 heap              ;;;;    gosub erase old lines (EE51)
  67+ 8CDF              ;...............................................................................................................................................................................
  68+ 8CDF              LL9SetExploRad:
  69+ 8CDF              	ldWriteConst 18,UbnKEdgeHeapCounter		; Counter for explosion radius                                 ;;;;    set explosion raidus XX19[1] to 18
  69+ 8CDF 3E 12       >               ld       a,18
  69+ 8CE1 32 F6 C2    >               ld       (UbnKEdgeHeapCounter),a
  70+ 8CE4              	ldCopyByte ExplosionCtAddr,UbnkEdgeHeapBytes ; Hull byte#7 explosion of ship type e.g. &2A           ;;;;    set XX19 [2] to Explosion type for ship (i.e nbr of
  70+ 8CE4 3A 05 C3    >               ld       a,(ExplosionCtAddr)
  70+ 8CE7 32 F4 C2    >               ld       (UbnkEdgeHeapBytes),a
  71+ 8CEA CD F9 95         call    fillHeapRandom4Points                                                                          ;;;;    set first 4 bytes of XX19 Heap to random number      ::EE55
  72+ 8CED 3A 13 C0         ld      a,(UBnKzsgn)                                                                                   ;;;;    set a to z pos sign
  73+ 8CF0 C3 FB 8C     	jp      ObjectInFront                                                                                  ;;;;    goto DoExplosion
  74+ 8CF3              ;...............................................................................................................................................................................
  75+ 8CF3              DoExplosionOrClear7:	                                                                                   ;;;;
  76+ 8CF3              EE28:										; bit5 set do explosion, or bit7 clear, dont kill.             ;;;;   DoExplosion:If z ccordinate sign is +ve
  77+ 8CF3              EE49:
  78+ 8CF3              	JumpOnMemBitSet UBnKzsgn,7,TestToRemove ; if zSign is negative then its behind so see if we remove
  78+ 8CF3 3A 13 C0    >                        ld      a,(UBnKzsgn)
  78+ 8CF6 CB 7F       >                        bit 	7,a
  78+ 8CF8 C2 69 8D    >                        jp      nz,TestToRemove
  79+ 8CFB              ;...............................................................................................................................................................................
  80+ 8CFB              ObjectInFront:
  81+ 8CFB              LL10:										; LL10	 object in front of you                                   ; if object z is > FarInFront
  82+ 8CFB                  JumpIfMemGTENusng UBnKzhi,FarInFront,TestToRemove  ; LL14		\ test to remove object                               ;    else if abs(x) > z or abs(y) > z
  82+ 8CFB 3A 12 C0    >                        ld     a,(UBnKzhi)
  82+ 8CFE FE C0       >                        cp     FarInFront
  82+ 8D00 D2 69 8D    >                        jp	  nc,TestToRemove
  83+ 8D03              LL10CheckFov:
  84+ 8D03                  JumpIfObjectOutsideFov TestToRemove     ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8D03             >LL10CheckXInFoV:
  84+ 8D03 2A 0B C0    >                        ld		hl, (INWKxlo)                   ; compare inkwk to to inwk z                                      ;    else
  84+ 8D06 ED 5B 11 C0 >                        ld		de, (INWKzlo)                   ; we can compare as ABS given + or - extreems will be out of view ;         .
  84+ 8D0A B7          >                        or		a							    ; clear carry flag for sbc                                        ;         .
  84+ 8D0B ED 52       >                        sbc		hl,de                           ; FOV is 90degrees                                                ;         .
  84+ 8D0D CB 7C       >                        bit     7,h
  84+ 8D0F CA 69 8D    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  84+ 8D12             >LL10CheckYInFoV:
  84+ 8D12 2A 0E C0    >                        ld		hl, (INWKyLo)                                                                                     ;         .
  84+ 8D15 B7          >                        or		a							    ; clear carry flag                                                ;         .
  84+ 8D16 ED 52       >                        sbc		hl,de                           ; and test y axis, FOV is 90degrees                               ;         .
  84+ 8D18 CB 7C       >                        bit     7,h
  84+ 8D1A CA 69 8D    >                        jp      z,TestToRemove                        ; was the result -ve i.e. hl > de?  x > z so outside FoV                                                                          ;         .
  85+ 8D1D              LookAtGunNode:
  86+ 8D1D                  LL10AddGunNode                                                                                                ;         NodeHeap[GunVertex, GunVertex+1] = 255
  86+ 8D1D 3A 04 C3    >                        ld		a,(GunVertexAddr)	            ; Hull byte6, node gun*4 (Probably should be from bank            ;         hl = z / 8
  86+ 8D20 4F          >                        ld		c,a                                                                                               ;         if zhi = 0
  86+ 8D21 06 00       >                        ld      b,0                             ; bc now - GunNode                                                ;                                              ;             GOTO LL13
  86+ 8D23 3E FF       >                        ld		a,$FF						    ; flag on node heap at gun                                        ;          else
  86+ 8D25 21 BF C0    >                        ld      hl,UBnkNodeArray                ; flag node on node heap                                          ;
  86+ 8D28 09          >                        add     hl,bc                           ; at position UBnkNodeArray[GunNode]
  86+ 8D29             >MakeBothGunNodesVisible:
  86+ 8D29 77          >                        ld      (hl),a                          ; made both gun line notes visible always
  86+ 8D2A 23          >                        inc     hl                              ;
  86+ 8D2B 77          >                        ld      (hl),a                          ;
  87+ 8D2C              LL10TestTooFarAway:                         ; if zhi / 8 > 0 then its too far
  88+ 8D2C                  JumpIfTooFarAway SkipToAsFar            ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8D2C 2A 11 C0    >                        ld		hl,(UbnKzlo)                    ; hl = z position, by this point it must be positive
  88+ 8D2F             >                        ShiftHLDiv8                             ; z position / 8
  88+ 8D2F CB 3C       >			   srl h
  88+ 8D31 CB 1D       >			   rr  l
  88+ 8D33 CB 3C       >			   srl h
  88+ 8D35 CB 1D       >			   rr  l
  88+ 8D37 CB 3C       >			   srl h
  88+ 8D39 CB 1D       >			   rr  l
  88+ 8D3B 7C          >                        ld      a,h                             ;
  88+ 8D3C             >                        IfANotZeroGoto SkipToAsFar                       ; LL13 - hop as far , i.e. zhi not 0 after divide by 8
  88+ 8D3C FE 00       >				cp	0
  88+ 8D3E C2 54 8D    >				jp	nz,SkipToAsFar
  89+ 8D41              LL10CloseEnoughToDraw:
  90+ 8D41              ; if zhi /16
  91+ 8D41 7C               ld      a,h                             ; get zHi shifted again
  92+ 8D42 CB 1F            rr      a                               ; bring in hi bit0 from last shiftHLRight1
  93+ 8D44 CB 3F            srl     a                               ;
  94+ 8D46 CB 3F            srl     a                               ;
  95+ 8D48 CB 3F            srl     a                               ; zhi is now max 31
  96+ 8D4A 32 8D C0         ld      (UBnkVisibility),a              ; set XX4 to result, If this occurs then it’s a guaranteed call to LL17 to draw.
  97+ 8D4D              ;    Note the use of hop for jump/branch instrunction Rather than hop being calc logic
  98+ 8D4D              ;    The original did a bransh on positive but 3 shift right logicalks means bit 7 can never be set
  99+ 8D4D              ObjectDrawForwards:
 100+ 8D4D CD FC 8D         call    DrawForwards
 101+ 8D50 C9               ret
 102+ 8D51 C3 4D 8D         jp      ObjectDrawForwards              ; LL17 guaranteed hop to Draw wireframe
 103+ 8D54              ;...............................................................................................................................................................................
 104+ 8D54              SkipToAsFar:
 105+ 8D54              ; IF we are here then the ship may just be a dot, if its exploding thought that overrides dot
 106+ 8D54              LL13:                                       ; hopped to as far
 107+ 8D54              LL13DrawIfNearerThanDotDist:
 108+ 8D54              ; if dot_distance >= z_hi then we can still draw ship
 109+ 8D54                  JumpIfMemGTEMemusng DotAddr,UBnKzhi,ObjectDrawForwards
 109+ 8D54 3A 0B C3    >                        ld   a,(DotAddr)
 109+ 8D57 21 12 C0    >                        ld   hl,UBnKzhi
 109+ 8D5A BE          >                        cp   (hl)
 109+ 8D5B D2 4D 8D    >                        jp	  nc,ObjectDrawForwards
 110+ 8D5E              LL13DrawIfExplodingTest:
 111+ 8D5E              ; if exploding then draw ship
 112+ 8D5E 3A 2A C0         ld      a,(UBnkexplDsp)                 ; INWK+31	\ exploding/display state|missiles
 113+ 8D61 E6 20            and     $20                             ; mask bit 5 exploding
 114+ 8D63 C2 4D 8D         jp      nz,ObjectDrawForwards           ; LL17 hop over to Draw wireframe or exploding
 115+ 8D66              LL13TooFarPlotPoint:
 116+ 8D66 C3 7B 8D         jp      ShipPlotPoint                   ; SHPPT	\ else ship plot point, up.
 117+ 8D69              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ 8D69              ;...............................................................................................................................................................................
 119+ 8D69              ;;;LL14
 120+ 8D69              ;;;   if bit5 of INWK31 is set								  ::LL14
 121+ 8D69              ;;;      clear bit 3 of INWK31
 122+ 8D69              ;;;      goto DO Explosion (DOEXP )
 123+ 8D69              ;;;   end if
 124+ 8D69              ;;;   if bit 3 of INKWK 31 is set                             ::EE51
 125+ 8D69              ;;;      clear bt 3 of INK31
 126+ 8D69              ;;;      goto Clear Lines from X19
 127+ 8D69              ;;;   else
 128+ 8D69              ;;;      return from subroutine
 129+ 8D69              ;;;
 130+ 8D69              TestToRemove:                                                                                             ;;;;
 131+ 8D69              LL14:										; Test to remove object                                        ;;;;
 132+ 8D69              	JumpOnMemBitSet UBnkexplDsp,5,EraseOldLines  ; bit5 currently exploding?                                      ;;;;
 132+ 8D69 3A 2A C0    >                        ld      a,(UBnkexplDsp)
 132+ 8D6C CB 6F       >                        bit 	5,a
 132+ 8D6E C2 02 CD    >                        jp      nz,EraseOldLines
 133+ 8D71              ; Ship is exploding
 134+ 8D71              ; Not in documented code!!    JumpOnBitSet    a,7,EraseOldLines            ; bit7 ongoing explosion?                                      ;;;;
 135+ 8D71 E6 F7        	and		$F7								; clear bit3  - No longer being drawn
 136+ 8D73 32 2A C0     	ld		(UBnkexplDsp),a					; INWK+31
 137+ 8D76 C3 79 8D     	jp		DOEXP							; DOEXP \ Explosion                                               ;
 138+ 8D79              ;; EraseOldLines is in file EraseOldLines-EE51.asm
 139+ 8D79
 140+ 8D79              DOEXP: ; TODO
 141+ 8D79 B7           	or a
 142+ 8D7A C9           	ret
 143+ 8D7B
# file closed: ModelRender/draw_object.asm
 711  8D7B                  include "ModelRender/draw_ship_point.asm"
# file opened: ModelRender/draw_ship_point.asm
   1+ 8D7B
   2+ 8D7B
   3+ 8D7B              ShipPlotPoint:
   4+ 8D7B              SHPPT:	                                    ; ship plot as point from LL10
   5+ 8D7B CD 02 CD         call    EraseOldLines                   ; EE51	\ if bit3 set draw to erase lines in XX19 heap
   6+ 8D7E              SHPPT_ProjectToK3K4:
   7+ 8D7E CD D3 CC         call    Project                         ; PROJ	\ Project K+INWK(x,y)/z to K3,K4 for craft center
   8+ 8D81              SHPTOnScreenTest:
   9+ 8D81 2A 4F 92     	ld		hl,(varK3)						; get X Y ccords from K3 and K4
  10+ 8D84 ED 5B 51 92  	ld		de,(varK4)
  11+ 8D88 7C           	ld		a,h
  12+ 8D89 B2           	or		d								;
  13+ 8D8A 20 27        	jr		nz,SHPTFinishup					; quick test to see if K3 or K4 hi are populated , if they are its too big (or negative coord)
  14+ 8D8C 7B           	ld		a,e								; k4 or Y lo
  15+ 8D8D              	JumpIfAGTENusng ViewHeight,SHPTFinishup	; off view port?
  15+ 8D8D FE 80       >                        cp     ViewHeight
  15+ 8D8F D2 B3 8D    >                        jp		nc,SHPTFinishup
  16+ 8D92              SHPTInjectFalseLine:						; it will always be 1 line only
  17+ 8D92 3E 01        	ld		a,1
  18+ 8D94 32 F1 C2     	ld		(UbnkLineArrayLen),a
  19+ 8D97 3E 04        	ld		a,4
  20+ 8D99 32 F1 C2     	ld		(UbnkLineArrayLen),a
  21+ 8D9C 55           	ld		d,l                             ; de = Y lo X hi
  22+ 8D9D 21 FF C1     	ld		hl,UbnkLineArray				; head of array
  23+ 8DA0 72           	ld		(hl),d
  24+ 8DA1 23           	inc		hl
  25+ 8DA2 73           	ld		(hl),e
  26+ 8DA3 23           	inc		hl
  27+ 8DA4 72           	ld		(hl),d
  28+ 8DA5 23           	inc		hl
  29+ 8DA6 73           	ld		(hl),e
  30+ 8DA7 23           	inc		hl								; write out point as a line for clean up later
  31+ 8DA8              SHPTIsOnScreen:
  32+ 8DA8 43           	ld		b,e
  33+ 8DA9 4A           	ld		c,d								; bc = XY
  34+ 8DAA 3E FF        	ld		a,ShipColour
  35+ 8DAC              	MMUSelectLayer2
  35+ 8DAC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 8DB0 CD FF E0         call    l2_plot_pixel
  37+ 8DB3              SHPTFinishup:
  38+ 8DB3 3A 2A C0         ld      a,(UBnkexplDsp)
  39+ 8DB6 E6 F7            and     $F7                             ;  clear bit3
  40+ 8DB8 32 2A C0         ld      (UBnkexplDsp),a                 ; set bit3 (to erase later) and plot as Dot display|missiles explosion state
  41+ 8DBB C9               ret                                     ; now it will return to the caller of
  42+ 8DBC
  43+ 8DBC              ; ---------------------------------------------------------------------------------------------------------------------------------
  44+ 8DBC 00           DrawLinesCounter		db	0
  45+ 8DBD              ; Initial tests look OK
  46+ 8DBD              LL155:;
  47+ 8DBD              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
  48+ 8DBD                    ;break                                                                             ; ObjectInFront:
  49+ 8DBD 3E 65        DrawLines:              ld	a,$65 ; DEBUG
  50+ 8DBF FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  51+ 8DC1 3A F1 C2                             ld		a,(UbnkLineArrayLen)			; get number of lines
  52+ 8DC4                                      ReturnIfAIsZero   						; No lines then bail out.
  52+ 8DC4 FE 00       >                 cp     0
  52+ 8DC6 C8          >                 ret    z
  53+ 8DC7 FD 67                                ld		iyh,a			                ; number of lines still to draw
  54+ 8DC9 21 FF C1                             ld		hl,UbnkLineArray
  55+ 8DCC              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  56+ 8DCC 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  57+ 8DCD 23                                   inc     hl
  58+ 8DCE 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  59+ 8DCF 23                                   inc     hl
  60+ 8DD0              ;;DEBUGTEST        push bc
  61+ 8DD0              ;;DEBUGTEST        push hl
  62+ 8DD0              ;;DEBUGTEST        push de
  63+ 8DD0              ;;DEBUGTEST        ld  a,$3F
  64+ 8DD0              ;;DEBUGTEST        MMUSelectLayer2
  65+ 8DD0              ;;DEBUGTEST        call    l2_plot_pixel
  66+ 8DD0              ;;DEBUGTEST        pop de
  67+ 8DD0              ;;DEBUGTEST        pop hl
  68+ 8DD0              ;;DEBUGTEST        pop bc
  69+ 8DD0 5E                                   ld      e,(hl)                          ; c = varX1
  70+ 8DD1 23                                   inc     hl
  71+ 8DD2 56                                   ld      d,(hl)                          ; de = point2 Y,X
  72+ 8DD3              ;;DEBUGTEST       push bc
  73+ 8DD3              ;;DEBUGTEST       push hl
  74+ 8DD3              ;;DEBUGTEST       push de
  75+ 8DD3              ;;DEBUGTEST       push de
  76+ 8DD3              ;;DEBUGTEST       pop  bc
  77+ 8DD3              ;;DEBUGTEST       ld  a,$3F
  78+ 8DD3              ;;DEBUGTEST       MMUSelectLayer2
  79+ 8DD3              ;;DEBUGTEST       call    l2_plot_pixel
  80+ 8DD3              ;;DEBUGTEST       pop de
  81+ 8DD3              ;;DEBUGTEST       pop hl
  82+ 8DD3              ;;DEBUGTEST       pop bc
  83+ 8DD3 23                                   inc     hl
  84+ 8DD4 E5                                   push	hl
  85+ 8DD5 FD E5                                push    iy
  86+ 8DD7 60                                   ld      h,b
  87+ 8DD8 69                                   ld      l,c
  88+ 8DD9                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  89+ 8DD9 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  90+ 8DDB                                      MMUSelectLayer2
  90+ 8DDB ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  91+ 8DDF CD F0 E8                             call    LineHLtoDE
  92+ 8DE2 FD E1                                pop     iy
  93+ 8DE4 E1                                   pop	    hl
  94+ 8DE5 FD 25                                dec     iyh
  95+ 8DE7 20 E3                                jr		nz,DrawXX19ClippedLines
  96+ 8DE9 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  97+ 8DEA              ; ---------------------------------------------------------------------------------------------------------------------------------
  98+ 8DEA
  99+ 8DEA              ;
 100+ 8DEA              ;DrawLineBCtoDE:
 101+ 8DEA              ;LIONBCDE:
 102+ 8DEA              ;    -- Set colour etc
 103+ 8DEA              ;    call    l2_draw_diagonal:
 104+ 8DEA              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 105+ 8DEA
# file closed: ModelRender/draw_ship_point.asm
 712  8DEA                  include "ModelRender/drawforwards-LL17.asm"
# file opened: ModelRender/drawforwards-LL17.asm
   1+ 8DEA              SetLastFaceVisible: MACRO
   2+ 8DEA ~                                ld      a,$FF                       ; last normal is always visible                                                         ;;;
   3+ 8DEA ~                                ld      (UbnkFaceVisArray+15),a     ; XX2+15                                                                                ;;;
   4+ 8DEA                                  ENDM
   5+ 8DEA
   6+ 8DEA 3E FF        SetLastFaceVisCall: ld      a,$FF
   7+ 8DEC 32 B0 C0                         ld      (UbnkFaceVisArray+15),a
   8+ 8DEF C9                               ret
   9+ 8DF0
  10+ 8DF0              CheckIfExplodingCall:
  11+ 8DF0              ; DEBUG TODO turn into MACRO later
  12+ 8DF0              ; Sets Z flag to true if only some faces are visible
  13+ 8DF0              ; Clears Z flag if exploding so all faces should be rendered
  14+ 8DF0 3A 2A C0             ld      a,(explDsp)                 ; INWK+31                                                                               ;;; If bit 5 of exploding state is clear
  15+ 8DF3              ;;DEBUG
  16+ 8DF3 F6 FF                or      $FF ; force bit 5 set so exploding
  17+ 8DF5 32 2A C0             ld      (explDsp),a
  18+ 8DF8              ;;DEBUG
  19+ 8DF8 4F                   ld      c,a                         ; save explDsp into c                                                                   ;;;
  20+ 8DF9 E6 20                and     $20                         ; mask bit5 exploding                                                                   ;;;
  21+ 8DFB C9                   ret
  22+ 8DFC
  23+ 8DFC
  24+ 8DFC              DrawForwardsIXL:
  25+ 8DFC              DrawForwards:
  26+ 8DFC              LL17:                                       ; draw Wireframe (including nodes exploding)                                            ;;; LL17 draw Wireframe
  27+ 8DFC              ; Copy the three orientation vectors into XX16
  28+ 8DFC CD 3D D0     LL15:   call    CopyRotmatToTransMat        ; Copy Ship rotation to XX16                                                                                          ;;; load object position to camera matrix XX16 			::LL91 (ish)
  29+ 8DFF              ;;;;LL21:   call    NormaliseTransMat       ; Normalise XX16
  30+ 8DFF CD EC D0     LL91lc: call    LoadCraftToCamera           ; Load Ship Coords to XX18
  31+ 8E02              ; ......................................................                                                                            ;;;
  32+ 8E02              LastNormalAlwaysVisible:
  33+ 8E02 CD EA 8D             call    SetLastFaceVisCall          ; DEBUG TODO revert back to MACRO later                                                                                                          ;;; Set last Normal to visible FF regarless
  34+ 8E05              ; HEre original does LDY 12
  35+ 8E05              ; ......................................................                                                                            ;;; (Originally loaded faces count here and stored in B, but will remove to simplify code)
  36+ 8E05              CheckIfExplodingState:
  37+ 8E05 CD F0 8D             call    CheckIfExplodingCall
  38+ 8E08 28 0C                jr      z,CullBackFaces             ; EE29 no, only Some visible                                                            ;;;    Goto EE29 - Only some faces visible
  39+ 8E0A              ; ......................................................                                                                            ;;; else
  40+ 8E0A              ItIsExploding:
  41+ 8E0A              MakeAllFacesVisible:                                                                                                                        ;;;    Set all faces in XX0 visible
  42+ 8E0A CD 85 D0             call    SetAllFacesVisible          ; code point EE30                                                                      ;;;
  43+ 8E0D 06 00                ld      b,0                         ; X = 0                                                                                 ;;;
  44+ 8E0F                      ldWriteZero LastNormalVisible       ; XX4  \ visibility                                                                     ;;;    XX4 visibility = 0
  44+ 8E0F AF          >               xor      a
  44+ 8E10 32 64 91    >               ld       (LastNormalVisible),a
  45+ 8E13              LL41:                                       ; visibilities now set in XX2,X Transpose matrix.                                       ;;;
  46+ 8E13 C3 19 8E             jp      TransposeMatrix             ; LL42 \ jump to transpose matrix and onwards                                           ;;;    goto LL42
  47+ 8E16              ; ......................................................                                                                            ;;;
  48+ 8E16              CullBackFaces:
  49+ 8E16              EE29Entry:
  50+ 8E16 CD 62 D4             call    BackFaceCull
  51+ 8E19              ;-- All normals' visibilities now set in XX2,X                                                                                      ;;;
  52+ 8E19              TransposeMatrix:
  53+ 8E19              LL42:	                                    ; DO nodeX-Ycoords their comment  \  TrnspMat                                           ;;; ......................................................
  54+ 8E19 CD 05 D1             call    InverseXX16
  55+ 8E1C
  56+ 8E1C
  57+ 8E1C CD 64 D8             call    ProcessNodes                ; Loop through and determine visibility based on faces and position
  58+ 8E1F              DrawResults:
  59+ 8E1F CD 36 D9             call    PrepLines                   ; LL72, process lines and clip
  60+ 8E22 CD BD 8D             call    DrawLines                   ; Need to plot all lines
  61+ 8E25 C9                   ret
  62+ 8E26
# file closed: ModelRender/drawforwards-LL17.asm
 713  8E26
 714  8E26                  INCLUDE	"Hardware/memfill_dma.asm"
# file opened: Hardware/memfill_dma.asm
   1+ 8E26
   2+ 8E26 00           memfillvalue		DB 0
   3+ 8E27 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 8E2B 7D
   4+ 8E2C 26 8E        memfill_astrt  		DW memfillvalue
   5+ 8E2E 00 40        memfill_length 		DB $00,$40
   6+ 8E30 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 8E33 00 00        memfill_bstrt  		DB $00,$00
   8+ 8E35 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 8E39              memfill_cmd_len	  	EQU $ - memfill
  10+ 8E39
  11+ 8E39              memfill_dma:
  12+ 8E39              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 8E39              .set_fill_value:
  14+ 8E39 32 26 8E     	ld 		(memfillvalue),a
  15+ 8E3C              .set_target:
  16+ 8E3C 22 33 8E     	ld		(memfill_bstrt),hl
  17+ 8E3F              .set_length:
  18+ 8E3F ED 53 2E 8E  	ld		(memfill_length),de
  19+ 8E43              .write_dma:
  20+ 8E43 21 27 8E     	ld 		hl, memfill
  21+ 8E46 06 12        	ld 		b, memfill_cmd_len
  22+ 8E48 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 8E4A ED B3        	otir
  24+ 8E4C C9           	ret
  25+ 8E4D
# file closed: Hardware/memfill_dma.asm
 715  8E4D                  INCLUDE	"Hardware/memcopy_dma.asm"
# file opened: Hardware/memcopy_dma.asm
   1+ 8E4D
   2+ 8E4D 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 8E51 7D
   3+ 8E52 00 00        memcopy_astrt  		DB $00,$00
   4+ 8E54 00 40        memcopy_length 		DB $00,$40
   5+ 8E56 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 8E59 00 00        memcopy_bstrt  		DB $00,$00
   7+ 8E5B 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 8E5F              memcopy_cmd_len	  	equ $ - memcopy
   9+ 8E5F
  10+ 8E5F              memcopy_dma:
  11+ 8E5F              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 8E5F              .set_target:
  13+ 8E5F 22 59 8E     	ld		(memcopy_bstrt),hl
  14+ 8E62              .set_source:
  15+ 8E62 ED 53 52 8E  	ld		(memcopy_astrt),de
  16+ 8E66              .set_length:
  17+ 8E66 ED 43 54 8E  	ld		(memcopy_length),bc
  18+ 8E6A              .write_dma:
  19+ 8E6A 21 4D 8E     	ld 		hl, memcopy
  20+ 8E6D 06 12        	ld 		b, memcopy_cmd_len
  21+ 8E6F 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 8E71 ED B3        	otir
  23+ 8E73 C9           	ret
  24+ 8E74
# file closed: Hardware/memcopy_dma.asm
 716  8E74                  INCLUDE "Hardware/keyboard.asm"
# file opened: Hardware/keyboard.asm
   1+ 8E74              ;
   2+ 8E74              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 8E74              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 8E74              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 8E74              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 8E74              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 8E74              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 8E74              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 8E74              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 8E74              ;
  11+ 8E74              ; Keyboard
  12+ 8E74              ;
  13+ 8E74              ;   0      1       2       3       4       5        6       7       8       9
  14+ 8E74              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 8E74              ;   10     11      12      13      14      15       16      17      18      19
  16+ 8E74              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 8E74              ;   20     21      22      23      24      25       26      27      28      29
  18+ 8E74              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 8E74              ;   30     31      32      33      34      35       36      37      38      39
  20+ 8E74              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 8E74              ;
  22+ 8E74              ; Default map
  23+ 8E74              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 8E74              ;   0          1           2             3              4           5           6           7           8           9
  25+ 8E74              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 8E74              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 8E74              ;                                                                                                       Find System
  28+ 8E74              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 8E74              ;   10         11          12            13             14          15          16          17          18          19
  30+ 8E74              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 8E74              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 8E74              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 8E74              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 8E74              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 8E74              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 8E74              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 8E74              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 8E74              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 8E74              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 8E74              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 8E74              ;              ResumeGame
  42+ 8E74
  43+ 8E74              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 8E74
  45+ 8E74              c_Pressed_Front         equ 0  * 2
  46+ 8E74              c_Pressed_Aft           equ 1  * 2
  47+ 8E74              c_Pressed_Left          equ 2  * 2
  48+ 8E74              c_Pressed_Right         equ 3  * 2
  49+ 8E74              c_Pressed_RollLeft      equ 4  * 2
  50+ 8E74              c_Pressed_RollRight     equ 5  * 2
  51+ 8E74              c_Pressed_Dive          equ 6  * 2
  52+ 8E74              c_Pressed_Climb         equ 7  * 2
  53+ 8E74              c_Pressed_Accellerate   equ 8  * 2
  54+ 8E74              c_Pressed_Decellerate   equ 9  * 2
  55+ 8E74              c_Pressed_FireLaser     equ 10 * 2
  56+ 8E74              c_Pressed_TargetMissle  equ 11 * 2
  57+ 8E74              c_Pressed_FireMissile   equ 12 * 2
  58+ 8E74              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 8E74              c_Pressed_ECM           equ 14 * 2
  60+ 8E74              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 8E74              c_Pressed_EscapePod     equ 16 * 2
  62+ 8E74              c_Pressed_DockingComp   equ 17 * 2
  63+ 8E74              c_Pressed_Hyperspace    equ 18 * 2
  64+ 8E74              c_Pressed_Distance      equ 19 * 2
  65+ 8E74              c_Pressed_HomeCursor    equ 20 * 2
  66+ 8E74              c_Pressed_Launch        equ 21 * 2
  67+ 8E74              c_Pressed_BuyCargo      equ 22 * 2
  68+ 8E74              c_Pressed_SellCargo     equ 23 * 2
  69+ 8E74              c_Pressed_Equip         equ 24 * 2
  70+ 8E74              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 8E74              c_Pressed_LocalChart    equ 26 * 2
  72+ 8E74              c_Pressed_MarketPrices  equ 27 * 2
  73+ 8E74              c_Pressed_Status        equ 28 * 2
  74+ 8E74              c_Pressed_Inventory     equ 29 * 2
  75+ 8E74              c_Pressed_GameSkip      equ 30 * 2
  76+ 8E74              c_Pressed_Save          equ 31 * 2
  77+ 8E74              c_Pressed_Freeze        equ 32 * 2
  78+ 8E74              c_Pressed_Resume        equ 33 * 2
  79+ 8E74              c_Pressed_Recentre      equ 34 * 2
  80+ 8E74              c_Pressed_Quit          equ 35 * 2
  81+ 8E74              c_Pressed_PlanetData    equ 36 * 2
  82+ 8E74              c_Pressed_CursorUp      equ 37 * 2
  83+ 8E74              c_Pressed_CursorDown    equ 38 * 2
  84+ 8E74              c_Pressed_Find          equ 39 * 2
  85+ 8E74
  86+ 8E74              ; half row 1
  87+ 8E74              VK_CAPS  				equ 0
  88+ 8E74              VK_Z  					equ 1
  89+ 8E74              VK_X  					equ 2
  90+ 8E74              VK_C  					equ 3
  91+ 8E74              VK_V  					equ 4
  92+ 8E74              ; half row 2
  93+ 8E74              VK_A  					equ 5
  94+ 8E74              VK_S  					equ 6
  95+ 8E74              VK_D  					equ 7
  96+ 8E74              VK_F  					equ 8
  97+ 8E74              VK_G  					equ 9
  98+ 8E74              ; half row 3
  99+ 8E74              VK_Q  					equ 10
 100+ 8E74              VK_W  					equ 11
 101+ 8E74              VK_E  					equ 12
 102+ 8E74              VK_R  					equ 13
 103+ 8E74              VK_T  					equ 14
 104+ 8E74              ; half row 4
 105+ 8E74              VK_1  					equ 15
 106+ 8E74              VK_2  					equ 16
 107+ 8E74              VK_3  					equ 17
 108+ 8E74              VK_4  					equ 18
 109+ 8E74              VK_5  					equ 19
 110+ 8E74              ; half row 5
 111+ 8E74              VK_0 					equ 20
 112+ 8E74              VK_9 					equ 21
 113+ 8E74              VK_8 					equ 22
 114+ 8E74              VK_7 					equ 23
 115+ 8E74              VK_6 					equ 24
 116+ 8E74              ; half row 6
 117+ 8E74              VK_P  					equ 25
 118+ 8E74              VK_O  					equ 26
 119+ 8E74              VK_I  					equ 27
 120+ 8E74              VK_U  					equ 28
 121+ 8E74              VK_Y  					equ 29
 122+ 8E74              ; half row 7
 123+ 8E74              VK_ENTER 				equ 30
 124+ 8E74              VK_L  					equ 31
 125+ 8E74              VK_K  					equ 32
 126+ 8E74              VK_J  					equ 33
 127+ 8E74              VK_H  					equ 34
 128+ 8E74              ; half row 8
 129+ 8E74              VK_SPACE 				equ 35
 130+ 8E74              VK_SYM  				equ 36
 131+ 8E74              VK_M  					equ 37
 132+ 8E74              VK_N  					equ 38
 133+ 8E74              VK_B  					equ 39
 134+ 8E74
 135+ 8E74              ;KeyboardMapping
 136+ 8E74              KeyCode_Front        	equ VK_1
 137+ 8E74              KeyCode_Aft          	equ VK_2
 138+ 8E74              KeyCode_Left         	equ VK_3
 139+ 8E74              KeyCode_Right        	equ VK_4
 140+ 8E74              KeyCode_RollLeft     	equ VK_O
 141+ 8E74              KeyCode_RollRight    	equ VK_P
 142+ 8E74              KeyCode_Dive         	equ VK_Q
 143+ 8E74              KeyCode_Climb        	equ VK_A
 144+ 8E74              KeyCode_Accellerate  	equ VK_W
 145+ 8E74              KeyCode_Decellerate  	equ VK_S
 146+ 8E74              KeyCode_FireLaser    	equ VK_SPACE
 147+ 8E74              KeyCode_TargetMissle 	equ VK_T
 148+ 8E74              KeyCode_FireMissile  	equ VK_F
 149+ 8E74              KeyCode_Find        	equ VK_F
 150+ 8E74              KeyCode_UnarmMissile 	equ VK_R
 151+ 8E74              KeyCode_ECM          	equ VK_E
 152+ 8E74              KeyCode_EnergyBomb   	equ VK_U
 153+ 8E74              KeyCode_EscapePod    	equ VK_CAPS
 154+ 8E74              KeyCode_DockingComp  	equ VK_N
 155+ 8E74              KeyCode_Hyperspace   	equ VK_H
 156+ 8E74              KeyCode_Distance     	equ VK_J
 157+ 8E74              KeyCode_HomeCursor   	equ VK_G
 158+ 8E74              KeyCode_Launch       	equ VK_L
 159+ 8E74              KeyCode_BuyCargo     	equ VK_B
 160+ 8E74              KeyCode_SellCargo    	equ VK_V
 161+ 8E74              KeyCode_Equip        	equ VK_C
 162+ 8E74              KeyCode_GalacticChrt 	equ VK_5
 163+ 8E74              KeyCode_LocalChart   	equ VK_6
 164+ 8E74              KeyCode_MarketPrices 	equ VK_7
 165+ 8E74              KeyCode_Status       	equ VK_8
 166+ 8E74              KeyCode_Inventory    	equ VK_9
 167+ 8E74              KeyCode_GameSkip     	equ VK_Z
 168+ 8E74              KeyCode_Save         	equ VK_O
 169+ 8E74              KeyCode_Freeze       	equ VK_B
 170+ 8E74              KeyCode_Resume       	equ VK_L
 171+ 8E74              KeyCode_Recentre     	equ VK_D
 172+ 8E74              KeyCode_Quit         	equ VK_Y
 173+ 8E74              KeyCode_PlanetData   	equ VK_0
 174+ 8E74              KeyCode_CursorUp        equ VK_Q
 175+ 8E74              KeyCode_CursorDown      equ VK_A
 176+ 8E74
 177+ 8E74 00 00 00...  Keys					DS	40
 178+ 8E9C              c_KeyBoardLen 			equ $ - Keys
 179+ 8E9C 00 00 00...  RawKeys					DS	8
 180+ 8EA4 FE FE FE FD  KeyAddrTab				DW	$FEFE, $FDFE, $FBFE, $F7FE, $EFFE, $DFFE, $BFFE, $7FFE
 180+ 8EA8 FE FB FE F7
 180+ 8EAC FE EF FE DF
 180+ 8EB0 FE BF FE 7F
 181+ 8EB4              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 8EB4              ; of updating this table with the respective location to look up
 183+ 8EB4              ; key list sequence is in table above
 184+ 8EB4 83 8E 84 8E  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 8EB8 85 8E 86 8E
 184+ 8EBC 8E 8E
 185+ 8EBE 8D 8E 7E 8E                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 8EC2 79 8E 7F 8E
 185+ 8EC6 7A 8E
 186+ 8EC8 97 8E 82 8E                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 8ECC 7C 8E 81 8E
 186+ 8ED0 80 8E
 187+ 8ED2 90 8E 74 8E                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 8ED6 9A 8E 96 8E
 187+ 8EDA 95 8E
 188+ 8EDC 7D 8E 93 8E                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 8EE0 9B 8E 78 8E
 188+ 8EE4 77 8E
 189+ 8EE6 87 8E 8C 8E                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 8EEA 8B 8E 8A 8E
 189+ 8EEE 89 8E
 190+ 8EF0 75 8E 8E 8E                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 8EF4 9B 8E 93 8E
 190+ 8EF8 7B 8E
 191+ 8EFA 91 8E 88 8E                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 8EFE 7E 8E 79 8E
 191+ 8F02 7C 8E
 192+ 8F04
 193+ 8F04 23 5A 58 43  ASCII_Map:           DB "#","Z","X","C","V"
 193+ 8F08 56
 194+ 8F09 41 53 44 46                       DB "A","S","D","F","G"
 194+ 8F0D 47
 195+ 8F0E 51 57 45 52                       DB "Q","W","E","R","T"
 195+ 8F12 54
 196+ 8F13 31 32 33 34                       DB "1","2","3","4","5"
 196+ 8F17 35
 197+ 8F18 30 39 38 37                       DB "0","9","8","7","6"
 197+ 8F1C 36
 198+ 8F1D 50 4F 49 55                       DB "P","O","I","U","Y"
 198+ 8F21 59
 199+ 8F22 3E 4C 4B 4A                       DB ">","L","K","J","H"
 199+ 8F26 48
 200+ 8F27 20 5E 4D 4E                       DB " ","^","M","N","B"
 200+ 8F2B 42
 201+ 8F2C
 202+ 8F2C
 203+ 8F2C              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 204+ 8F2C              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 205+ 8F2C              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 206+ 8F2C              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 207+ 8F2C              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 208+ 8F2C              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 209+ 8F2C              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 210+ 8F2C              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 211+ 8F2C              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 212+ 8F2C              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 213+ 8F2C              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 214+ 8F2C              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 215+ 8F2C              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 216+ 8F2C              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 217+ 8F2C              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 218+ 8F2C              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 219+ 8F2C              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 220+ 8F2C              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 221+ 8F2C              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 222+ 8F2C              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 223+ 8F2C              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 224+ 8F2C              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 225+ 8F2C              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 226+ 8F2C              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 227+ 8F2C              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 228+ 8F2C              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 229+ 8F2C              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 230+ 8F2C              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 231+ 8F2C              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 232+ 8F2C              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 233+ 8F2C              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 234+ 8F2C              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 235+ 8F2C              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 236+ 8F2C              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 237+ 8F2C              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 238+ 8F2C              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 239+ 8F2C              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 240+ 8F2C              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 241+ 8F2C              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 242+ 8F2C              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 243+ 8F2C
 244+ 8F2C
 245+ 8F2C              init_keyboard:
 246+ 8F2C 21 74 8E     	ld		hl,Keys
 247+ 8F2F 11 28 00     	ld		de, c_KeyBoardLen
 248+ 8F32 3E 00        	ld		a,0
 249+ 8F34 CD 39 8E     	call	memfill_dma
 250+ 8F37 C9           	ret
 251+ 8F38
 252+ 8F38              scan_keyboard:
 253+ 8F38 21 9C 8E     	ld		hl,RawKeys
 254+ 8F3B 11 A4 8E     	ld		de,KeyAddrTab
 255+ 8F3E AF           	xor		a
 256+ 8F3F FD 2E 08     	ld		iyl,8
 257+ 8F42 DD 21 74 8E      ld      ix,Keys
 258+ 8F46              .PortReadLoop:
 259+ 8F46 1A           	ld		a,(de)							; Set up BC as port to read
 260+ 8F47 4F           	ld		c,a
 261+ 8F48 13           	inc		de
 262+ 8F49 1A               ld      a,(de)
 263+ 8F4A 47           	ld		b,a
 264+ 8F4B 13           	inc		de
 265+ 8F4C ED 78        	in		a,(c)							; read port to a
 266+ 8F4E 77           	ld		(hl),a							; set raw keys to value
 267+ 8F4F 23           	inc		hl								; and ready for next element
 268+ 8F50 06 05        	ld		b,5								; loop all bits (there are only 5 keys to a group)
 269+ 8F52              .ProcessBitsLoop:
 270+ 8F52 CB 47        	bit		0,a								; is bit set
 271+ 8F54 28 07            jr      z,.SetKeyPressed
 272+ 8F56 08               ex      af,af'
 273+ 8F57 AF               xor     a
 274+ 8F58 C3 64 8F         jp      .SetKey
 275+ 8F5B 20 0B        	jr		nz,.SkipKeySet
 276+ 8F5D              .SetKeyPressed:
 277+ 8F5D 08           	ex		af,af'
 278+ 8F5E DD 7E 00         ld      a,(ix+0)
 279+ 8F61 3C               inc     a
 280+ 8F62 E6 03            and     $3                              ; so bit 0 set is pressed, bit 1 set is repeat pressed, i.e. 0 = no, 1 = yes 2,3 = held
 281+ 8F64              .SetKey:
 282+ 8F64 DD 77 00     	ld		(ix+0),a							; Key Pressed
 283+ 8F67 08           	ex		af,af'
 284+ 8F68              .SkipKeySet:
 285+ 8F68 DD 23        	inc		ix								; move to next key
 286+ 8F6A CB 3F        	srl		a								; move next key into bit 0
 287+ 8F6C 10 E4        	djnz	.ProcessBitsLoop				; Process all key group bits
 288+ 8F6E FD 2D            dec     iyl
 289+ 8F70 20 D4            jr      nz,.PortReadLoop				; Read next input port
 290+ 8F72 C9           	ret
 291+ 8F73
 292+ 8F73              GetKeyStateAddressDE: MACRO
 293+ 8F73 ~                                  ld      hl,KeyboardMap                  ; work our address to read from
 294+ 8F73 ~                                  add     hl,a
 295+ 8F73 ~                                  ld      a,(hl)
 296+ 8F73 ~                                  ld      e,a
 297+ 8F73 ~                                  inc     hl
 298+ 8F73 ~                                  ld      a,(hl)
 299+ 8F73 ~                                  ld      d,a                             ; now de = address in keypress list
 300+ 8F73                                    ENDM
 301+ 8F73
 302+ 8F73
 303+ 8F73              ; call with a = c_Pressed key, will then read mapping
 304+ 8F73              wait_for_key_a_press:
 305+ 8F73                  GetKeyStateAddressDE
 305+ 8F73 21 B4 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 305+ 8F76 ED 31       >                      add     hl,a
 305+ 8F78 7E          >                      ld      a,(hl)
 305+ 8F79 5F          >                      ld      e,a
 305+ 8F7A 23          >                      inc     hl
 305+ 8F7B 7E          >                      ld      a,(hl)
 305+ 8F7C 57          >                      ld      d,a                             ; now de = address in keypress list
 306+ 8F7D D5               push    de
 307+ 8F7E              wait_for_key_press_loop:
 308+ 8F7E CD 38 8F         call    scan_keyboard
 309+ 8F81 E1               pop     hl                              ; get key address into hl
 310+ 8F82 E5               push    hl
 311+ 8F83 7E               ld      a,(hl)
 312+ 8F84                  JumpIfANENusng  1,wait_for_key_press_loop         ; will also loop if held down when entering this routine
 312+ 8F84 FE 01       >                cp     1
 312+ 8F86 C2 7E 8F    >                jp      nz,wait_for_key_press_loop
 313+ 8F89 E1               pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 314+ 8F8A C9               ret
 315+ 8F8B
 316+ 8F8B              wait_for_key_a_held:
 317+ 8F8B                  GetKeyStateAddressDE
 317+ 8F8B 21 B4 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 317+ 8F8E ED 31       >                      add     hl,a
 317+ 8F90 7E          >                      ld      a,(hl)
 317+ 8F91 5F          >                      ld      e,a
 317+ 8F92 23          >                      inc     hl
 317+ 8F93 7E          >                      ld      a,(hl)
 317+ 8F94 57          >                      ld      d,a                             ; now de = address in keypress list
 318+ 8F95 D5               push    de
 319+ 8F96              wait_for_key_a_held_loop:
 320+ 8F96 CD 38 8F         call    scan_keyboard
 321+ 8F99 E1               pop     hl
 322+ 8F9A E5               push    hl
 323+ 8F9B 7E               ld      a,(hl)
 324+ 8F9C                  JumpIfALTNusng  2,wait_for_key_a_held_loop
 324+ 8F9C FE 02       >                        cp      2
 324+ 8F9E DA 96 8F    >                        jp		c,wait_for_key_a_held_loop
 325+ 8FA1 E1               pop     hl
 326+ 8FA2 C9               ret
 327+ 8FA3
 328+ 8FA3              get_key_a_state:                            ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 329+ 8FA3                  GetKeyStateAddressDE
 329+ 8FA3 21 B4 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 329+ 8FA6 ED 31       >                      add     hl,a
 329+ 8FA8 7E          >                      ld      a,(hl)
 329+ 8FA9 5F          >                      ld      e,a
 329+ 8FAA 23          >                      inc     hl
 329+ 8FAB 7E          >                      ld      a,(hl)
 329+ 8FAC 57          >                      ld      d,a                             ; now de = address in keypress list
 330+ 8FAD EB               ex      de,hl
 331+ 8FAE 7E               ld      a,(hl)                          ; a = keystate
 332+ 8FAF C9               ret
 333+ 8FB0
 334+ 8FB0              is_key_pressed:                             ; returns z is set if pressed
 335+ 8FB0                  GetKeyStateAddressDE
 335+ 8FB0 21 B4 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 335+ 8FB3 ED 31       >                      add     hl,a
 335+ 8FB5 7E          >                      ld      a,(hl)
 335+ 8FB6 5F          >                      ld      e,a
 335+ 8FB7 23          >                      inc     hl
 335+ 8FB8 7E          >                      ld      a,(hl)
 335+ 8FB9 57          >                      ld      d,a                             ; now de = address in keypress list
 336+ 8FBA EB               ex      de,hl
 337+ 8FBB 7E               ld      a,(hl)                          ; a = keystate
 338+ 8FBC FE 01            cp      1
 339+ 8FBE C9               ret
 340+ 8FBF
 341+ 8FBF              is_key_held:                                ; returns z is set if held
 342+ 8FBF                  GetKeyStateAddressDE
 342+ 8FBF 21 B4 8E    >                      ld      hl,KeyboardMap                  ; work our address to read from
 342+ 8FC2 ED 31       >                      add     hl,a
 342+ 8FC4 7E          >                      ld      a,(hl)
 342+ 8FC5 5F          >                      ld      e,a
 342+ 8FC6 23          >                      inc     hl
 342+ 8FC7 7E          >                      ld      a,(hl)
 342+ 8FC8 57          >                      ld      d,a                             ; now de = address in keypress list
 343+ 8FC9 EB               ex      de,hl
 344+ 8FCA 7E               ld      a,(hl)                          ; a = keystate
 345+ 8FCB E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 346+ 8FCD FE 02            cp      2
 347+ 8FCF C9               ret
 348+ 8FD0
 349+ 8FD0              is_any_key_pressed:
 350+ 8FD0 21 74 8E         ld      hl,Keys
 351+ 8FD3 06 28            ld      b,40
 352+ 8FD5 0E 00            ld      c,0
 353+ 8FD7              .KeyReadLoop:
 354+ 8FD7 7E               ld      a,(hl)
 355+ 8FD8 FE 01            cp      1
 356+ 8FDA CA E4 8F         jp      z,.KeyPressed
 357+ 8FDD 23               inc     hl
 358+ 8FDE 0C               inc     c
 359+ 8FDF 10 F6            djnz    .KeyReadLoop
 360+ 8FE1 3E FF            ld      a,$FF
 361+ 8FE3 C9               ret
 362+ 8FE4              .KeyPressed:
 363+ 8FE4 79               ld      a,c
 364+ 8FE5 C9               ret
 365+ 8FE6
 366+ 8FE6              is_any_key_held:
 367+ 8FE6 21 74 8E         ld      hl,Keys
 368+ 8FE9 06 28            ld      b,40
 369+ 8FEB 0E 00            ld      c,0
 370+ 8FED              .KeyReadLoop:
 371+ 8FED 7E               ld      a,(hl)
 372+ 8FEE E6 02            and     2                               ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 373+ 8FF0 FE 02            cp      2
 374+ 8FF2 CA FC 8F         jp      z,.KeyPressed
 375+ 8FF5 23               inc     hl
 376+ 8FF6 0C               inc     c
 377+ 8FF7 10 F4            djnz    .KeyReadLoop
 378+ 8FF9 3E FF            ld      a,$FF
 379+ 8FFB C9               ret
 380+ 8FFC              .KeyPressed:
 381+ 8FFC 79               ld      a,c
 382+ 8FFD C9               ret
 383+ 8FFE
 384+ 8FFE
 385+ 8FFE 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 386+ 901C 00                                   DB  0               ; end of string marker as a safety
 387+ 901D 00           InputCursor             DB  0
 388+ 901E 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 389+ 901F 00           InputChanged            DB  0
 390+ 9020              InputLimit              EQU 20
 391+ 9020
 392+ 9020              keyboard_copy_input_to_de:
 393+ 9020 21 FE 8F         ld      hl,InputString
 394+ 9023 3A 1D 90         ld      a,(InputCursor)
 395+ 9026 FE 00            cp      0
 396+ 9028 28 05            jr      z,.NoString
 397+ 902A 4F               ld      c,a
 398+ 902B 06 00            ld      b,0
 399+ 902D ED B0            ldir
 400+ 902F              .NoString
 401+ 902F 3E 00            ld      a,0
 402+ 9031 12               ld      (de),a
 403+ 9032 C9               ret
 404+ 9033
 405+ 9033              initInputText:
 406+ 9033 AF               xor     a
 407+ 9034 32 1D 90         ld      (InputCursor),a
 408+ 9037 32 1E 90         ld      (EnterPressed),a
 409+ 903A 32 1F 90         ld      (InputChanged),a
 410+ 903D 21 FE 8F         ld      hl,InputString
 411+ 9040 06 1E            ld      b,30
 412+ 9042              .wipeloop:
 413+ 9042 77               ld      (hl),a
 414+ 9043 23               inc     hl
 415+ 9044 10 FC            djnz    .wipeloop
 416+ 9046 C9               ret
 417+ 9047
 418+ 9047              InputName:
 419+ 9047 AF               xor     a
 420+ 9048 32 1F 90         ld      (InputChanged),a
 421+ 904B CD D0 8F         call    is_any_key_pressed
 422+ 904E FE FF            cp      $FF
 423+ 9050 C8               ret     z
 424+ 9051              .KeyPressed:
 425+ 9051 4F               ld      c,a
 426+ 9052 3A 1D 90         ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 427+ 9055 FE 14            cp      InputLimit                      ; move to variable later and then cp (hl)
 428+ 9057 28 0B            jr      z,.DeleteOrEnterOnly            ;
 429+ 9059 21 04 8F         ld      hl,ASCII_Map
 430+ 905C 79               ld      a,c
 431+ 905D ED 31            add     hl,a
 432+ 905F 7E               ld      a,(hl)
 433+ 9060 FE 41            cp      "A"
 434+ 9062 30 15            jr      nc,.AlphaPressed
 435+ 9064              .DeleteOrEnterOnly                          ; CAPS and Symbol act as delete for now
 436+ 9064 FE 30            cp      "0"                             ; if 0 was preseed check caps shift too
 437+ 9066 28 3B            jr      z,.CheckShiftDelete             ; for now we will ignore the shift and just assume delete
 438+ 9068 FE 3E            cp      ">"         ; ENTER
 439+ 906A 28 24            jr      z,.EnterPressed
 440+ 906C FE 23            cp      "#"         ; CAPS
 441+ 906E 28 33            jr      z,.CapsPressed
 442+ 9070 FE 5E            cp      "^"         ; SYMBOLSHIFT
 443+ 9072 28 2F            jr      z,.SymbolPressed
 444+ 9074 FE 20            cp      " "         ; space
 445+ 9076 28 2B            jr      z,.SpacePressed
 446+ 9078 C9               ret
 447+ 9079              .AlphaPressed:
 448+ 9079 47               ld      b,a
 449+ 907A 3A 1D 90         ld      a,(InputCursor)
 450+ 907D 4F               ld      c,a
 451+ 907E 21 FE 8F         ld      hl,InputString
 452+ 9081 ED 31            add     hl,a
 453+ 9083 78               ld      a,b
 454+ 9084 70               ld      (hl),b
 455+ 9085 79               ld      a,c
 456+ 9086 21 1D 90         ld      hl,InputCursor
 457+ 9089 34               inc     (hl)
 458+ 908A 3E FF            ld      a,$FF
 459+ 908C 32 1F 90         ld      (InputChanged),a
 460+ 908F C9               ret
 461+ 9090              .EnterPressed:
 462+ 9090 3A 1D 90         ld      a,(InputCursor)
 463+ 9093 3C               inc     a
 464+ 9094 21 FE 8F         ld      hl,InputString
 465+ 9097 ED 31            add     hl,a
 466+ 9099 AF               xor     a
 467+ 909A 77               ld      (hl),a
 468+ 909B 3D               dec     a
 469+ 909C 32 1E 90         ld      (EnterPressed),a
 470+ 909F 32 1F 90         ld      (InputChanged),a
 471+ 90A2 C9               ret
 472+ 90A3              .CheckShiftDelete:
 473+ 90A3              .CapsPressed:                               ; act as a delete key for now
 474+ 90A3              .SymbolPressed:
 475+ 90A3              .SpacePressed:
 476+ 90A3 3A 1D 90         ld      a,(InputCursor)
 477+ 90A6 FE 00            cp      0
 478+ 90A8 C8               ret     z
 479+ 90A9 3D               dec     a
 480+ 90AA 32 1D 90         ld      (InputCursor),a
 481+ 90AD 21 FE 8F         ld      hl,InputString
 482+ 90B0 ED 31            add     hl,a
 483+ 90B2 AF               xor     a
 484+ 90B3 77               ld      (hl),a
 485+ 90B4 3E FF            ld      a,$FF
 486+ 90B6 32 1F 90         ld      (InputChanged),a
 487+ 90B9 C9               ret
 488+ 90BA
 489+ 90BA              MovementKeyTest:
 490+ 90BA              ;DBG1:jp dbg1
 491+ 90BA              ;dbx1:
 492+ 90BA AF               xor     a
 493+ 90BB 32 3B 92         ld      (CursorKeysPressed),a
 494+ 90BE 3A 3D 92         ld      a,(MenuIdMax)
 495+ 90C1 E6 FC            and     $FC
 496+ 90C3 20 28            jr      nz,CursorKeys
 497+ 90C5              ClimbDiveKeys:
 498+ 90C5 2A C2 8E         ld      hl,(addr_Pressed_Climb)
 499+ 90C8 7E               ld      a,(hl)
 500+ 90C9                  IfAIsZeroGoto ScanDiveKey
 500+ 90C9 FE 00       >				cp	0
 500+ 90CB CA D9 90    >				jp	z,ScanDiveKey
 501+ 90CE 3A 3B 92         ld      a,(CursorKeysPressed)
 502+ 90D1 F6 80            or      $80
 503+ 90D3 32 3B 92         ld      (CursorKeysPressed),a
 504+ 90D6 C3 12 91         jp      ScanLeftKey
 505+ 90D9              ScanDiveKey:
 506+ 90D9 2A C0 8E         ld      hl,(addr_Pressed_Dive)
 507+ 90DC 7E               ld      a,(hl)
 508+ 90DD                  IfAIsZeroGoto ScanLeftKey
 508+ 90DD FE 00       >				cp	0
 508+ 90DF CA 12 91    >				jp	z,ScanLeftKey
 509+ 90E2 3A 3B 92         ld      a,(CursorKeysPressed)
 510+ 90E5 F6 40            or      $40
 511+ 90E7 32 3B 92         ld      (CursorKeysPressed),a
 512+ 90EA C3 12 91         jp      ScanLeftKey
 513+ 90ED              CursorKeys:
 514+ 90ED 2A FE 8E         ld      hl,(addr_Pressed_CursorUp)
 515+ 90F0 7E               ld      a,(hl)
 516+ 90F1                  IfAIsZeroGoto ScanCursorDownKey
 516+ 90F1 FE 00       >				cp	0
 516+ 90F3 CA 01 91    >				jp	z,ScanCursorDownKey
 517+ 90F6 3A 3B 92         ld      a,(CursorKeysPressed)
 518+ 90F9 F6 80            or      $80
 519+ 90FB 32 3B 92         ld      (CursorKeysPressed),a
 520+ 90FE C3 12 91         jp      ScanLeftKey
 521+ 9101              ScanCursorDownKey
 522+ 9101 2A 00 8F         ld      hl,(addr_Pressed_CursorDown)
 523+ 9104 7E               ld      a,(hl)
 524+ 9105                  IfAIsZeroGoto ScanLeftKey
 524+ 9105 FE 00       >				cp	0
 524+ 9107 CA 12 91    >				jp	z,ScanLeftKey
 525+ 910A 3A 3B 92         ld      a,(CursorKeysPressed)
 526+ 910D F6 40            or      $40
 527+ 910F 32 3B 92         ld      (CursorKeysPressed),a
 528+ 9112              ScanLeftKey:
 529+ 9112 2A BC 8E         ld      hl,(addr_Pressed_RollLeft)
 530+ 9115 7E               ld      a,(hl)
 531+ 9116                  IfAIsZeroGoto ScanRightKey
 531+ 9116 FE 00       >				cp	0
 531+ 9118 CA 24 91    >				jp	z,ScanRightKey
 532+ 911B 3A 3B 92         ld      a,(CursorKeysPressed)
 533+ 911E F6 20            or      $20
 534+ 9120 32 3B 92         ld      (CursorKeysPressed),a
 535+ 9123 C9               ret
 536+ 9124              ScanRightKey:
 537+ 9124 2A BE 8E         ld      hl,(addr_Pressed_RollRight)
 538+ 9127 7E               ld      a,(hl)
 539+ 9128                  IfAIsZeroGoto ScanHomeKey
 539+ 9128 FE 00       >				cp	0
 539+ 912A CA 36 91    >				jp	z,ScanHomeKey
 540+ 912D 3A 3B 92         ld      a,(CursorKeysPressed)
 541+ 9130 F6 10            or      $10
 542+ 9132 32 3B 92         ld      (CursorKeysPressed),a
 543+ 9135 C9               ret
 544+ 9136              ScanHomeKey:
 545+ 9136 2A DC 8E         ld      hl,(addr_Pressed_HomeCursor)
 546+ 9139 7E               ld      a,(hl)
 547+ 913A                  IfAIsZeroGoto ScanRecentreKey
 547+ 913A FE 00       >				cp	0
 547+ 913C CA 48 91    >				jp	z,ScanRecentreKey
 548+ 913F 3A 3B 92         ld      a,(CursorKeysPressed)
 549+ 9142 F6 08            or      $08
 550+ 9144 32 3B 92         ld      (CursorKeysPressed),a
 551+ 9147 C9               ret
 552+ 9148              ScanRecentreKey:
 553+ 9148 2A F8 8E         ld      hl,(addr_Pressed_Recentre)
 554+ 914B 7E               ld      a,(hl)
 555+ 914C                  ReturnIfAIsZero
 555+ 914C FE 00       >                 cp     0
 555+ 914E C8          >                 ret    z
 556+ 914F 3A 3B 92         ld      a,(CursorKeysPressed)
 557+ 9152 F6 04            or      $04
 558+ 9154 32 3B 92         ld      (CursorKeysPressed),a
 559+ 9157 C9               ret
 560+ 9158
 561+ 9158
# file closed: Hardware/keyboard.asm
 717  9158
 718  9158                  INCLUDE "Variables/constant_equates.asm"
# file opened: Variables/constant_equates.asm
   1+ 9158              ;Contants
   2+ 9158
   3+ 9158              SignMask8Bit		equ %01111111
   4+ 9158              SignMask16Bit		equ %0111111111111111
   5+ 9158              SignOnly8Bit		equ $80
   6+ 9158              SignOnly16Bit		equ $8000
   7+ 9158
   8+ 9158              ConstPi				equ $80
   9+ 9158              ConstNorm           equ 197
  10+ 9158
  11+ 9158              ;Text Tokens
  12+ 9158              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  13+ 9158              BrabenBellToken 	equ $0D
  14+ 9158              AcorToken			equ $0C
  15+ 9158
  16+ 9158              ; Intro Screen
  17+ 9158              TitleShip			equ	$8C
  18+ 9158              RotationUnity		equ $60
  19+ 9158              DBCheckCode			equ $DB
  20+ 9158              MaxVisibility		equ $1F
  21+ 9158              FarInFront			equ $C0
  22+ 9158
  23+ 9158              ; Universe Managment
  24+ 9158              MaxNumberOfStars	equ 18
  25+ 9158              FreeListSize		equ	$12
  26+ 9158              ShipTypeSize		equ	32 			;??????? just a guess for now
  27+ 9158              ShipSST				equ 4			; its a space station
  28+ 9158              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  29+ 9158              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  30+ 9158              ShipCountMax		equ	2			; For now just 2 ships to debug
  31+ 9158              LineLimitPerShip	equ 70			; Max lines per ship
  32+ 9158              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  33+ 9158              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  34+ 9158              PlayerDocked		equ	$FF
  35+ 9158
  36+ 9158              ; Memory page managment	(Refers to a memory slot as a place to access data)
  37+ 9158              ShipDataSlot		equ	6			; this may move into rom swap out space later
  38+ 9158              UniverseObjectSlot	equ	7
  39+ 9158
  40+ 9158              KeyForwardsView		equ	$20
  41+ 9158
  42+ 9158              ; Ship Data
  43+ 9158              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  44+ 9158              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  45+ 9158              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  46+ 9158              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  47+ 9158              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
  48+ 9158              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
  49+ 9158              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
  50+ 9158              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
  51+ 9158              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
  52+ 9158              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
  53+ 9158              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
  54+ 9158              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
  55+ 9158              ;;;;00 00			 EQUW 0     \ type 12 is       Python
  56+ 9158              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
  57+ 9158              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
  58+ 9158              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
  59+ 9158              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
  60+ 9158              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
  61+ 9158              ;;;;00 00			 EQUW 0     \ type 18 is
  62+ 9158              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
  63+ 9158              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
  64+ 9158              ;;;;00 00			 EQUW 0     \ type 21 is
  65+ 9158              ;;;;00 00			 EQUW 0     \ type 22 is
  66+ 9158              ;;;;00 00			 EQUW 0     \ type 23 is
  67+ 9158              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
  68+ 9158              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
  69+ 9158              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
  70+ 9158              ;;;;00 00			 EQUW 0     \ type 27 is
  71+ 9158              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
  72+ 9158              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
  73+ 9158              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
  74+ 9158              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
  75+ 9158              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
  76+ 9158              ;;;;			\ NEWB examples
  77+ 9158              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
  78+ 9158              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
  79+ 9158              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
  80+ 9158              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
  81+ 9158              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
  82+ 9158
# file closed: Variables/constant_equates.asm
 719  9158                  INCLUDE "Variables/general_variables.asm"
# file opened: Variables/general_variables.asm
   1+ 9158              ;	PAGE 0 Map to variable anmes
   2+ 9158              ;	PAGE 0 Map to variable anmes
   3+ 9158              ;
   4+ 9158              ;
   5+ 9158              ;
   6+ 9158              ;	06		T1
   7+ 9158              ;	07
   8+ 9158              ;	08		SC1					Screen Hi
   9+ 9158              ;	09							XX16 Matrix
  10+ 9158              ;	0A							XX16+1
  11+ 9158              ;	0B							XX16+2
  12+ 9158              ;	0C							XX16+3
  13+ 9158              ;	0D                          XX16+4
  14+ 9158              ;	0E                          XX16+5
  15+ 9158              ;	0F							XX16+6
  16+ 9158              ;	10		varP				XX16+7
  17+ 9158              ;	11		varP				XX16+8
  18+ 9158              ;	12                          XX16+9
  19+ 9158              ;	13                          XX16+10
  20+ 9158              ;	14							XX16+11
  21+ 9158              ;	15                          XX16+12
  22+ 9158              ;	16                          XX16+13
  23+ 9158              ;	17                          XX16+14
  24+ 9158              ;	17                          XX16+14
  25+ 9158              ;	18                          XX16+15
  26+ 9158              ;	19
  27+ 9158              ;	1A
  28+ 9158              ;	1B
  29+ 9158              ;	1C
  30+ 9158              ;	1D
  31+ 9158              ;	1E							XX0
  32+ 9158              ;	1F                          XX0+1
  33+ 9158              ;	20		INF                 XX0+2
  34+ 9158              ;	21      INF+1               XX0+3
  35+ 9158              ;	22      varV                XX0+4
  36+ 9158              ;	23      varV +1             XX0+5
  37+ 9158              ;	24		XXlo                XX0+6
  38+ 9158              ;	25		XXHi
  39+ 9158              ;	26		YYlo
  40+ 9158              ;	27		YYHi
  41+ 9158              ;	28
  42+ 9158              ;	29
  43+ 9158              ;	2A		BETA (pitch done)
  44+ 9158              ;	2B		BET1 lower7 magnitude
  45+ 9158              ;	2C		XC
  46+ 9158              ;	2D		YC
  47+ 9158              ;	2E		QQ22				Outer Hyperspace Countdown
  48+ 9158              ;	2E		QQ22				Outer Hyperspace Countdown
  49+ 9158              ;	2F		QQ22+1				Inner Hyperspace Countdown
  50+ 9158              ;	30		ECM Active
  51+ 9158              ;	31		ALP1
  52+ 9158              ;	32		ALP2
  53+ 9158              ;	33		ALP2FLIP
  54+ 9158
  55+ 9158              ;	36		Z1					XX15+2yscaled
  56+ 9158              ;	37		                    XX15+3ysign
  57+ 9158              ;	38		                    XX15+4zscaled
  58+ 9158              ;	39							XX15+5zsign
  59+ 9158              ;	3A		XX12				xplot for star
  60+ 9158              ;	3B
  61+ 9158              ;	3C
  62+ 9158              ;	3D
  63+ 9158              ;	3E
  64+ 9158              ;	3F
  65+ 9158              ;	40		varKlo
  66+ 9158              ;	41		varKmid
  67+ 9158              ;	42		varKHi
  68+ 9158              ;	43		varKVeryHi+Sign
  69+ 9158              ;	44
  70+ 9158              ;	45		MSTG				MissileTarget
  71+ 9158              ;	46		INWK				; Inner working space of 37 bytes
  72+ 9158              ;	47		INWK
  73+ 9158              ;	48		INWK
  74+ 9158              ;	49		INWK
  75+ 9158              ;	4A		INWK
  76+ 9158              ;	4B		INWK
  77+ 9158              ;	4C		INWK
  78+ 9158              ;	4D		INWK
  79+ 9158              ;	4E		INWK
  80+ 9158              ;	4F		INWK+9
  81+ 9158              ;	50		INWK
  82+ 9158              ;	51		INWK
  83+ 9158              ;	52		INWK
  84+ 9158              ;	53		INWK
  85+ 9158              ;	54		INWK
  86+ 9158              ;	55		INWK
  87+ 9158              ;	56		INWK
  88+ 9158              ;	57		INWK
  89+ 9158              ;	58		INWK
  90+ 9158              ;	59		INWK
  91+ 9158              ;	5A		INWK
  92+ 9158              ;	5B		INWK
  93+ 9158              ;	5C		INWK
  94+ 9158              ;	5D		INWK
  95+ 9158              ;	5E		INWK
  96+ 9158              ;	5F		INWK
  97+ 9158              ;	60		INWK
  98+ 9158              ;	61		INWK
  99+ 9158              ;	62		INWK
 100+ 9158              ;	63		INWK
 101+ 9158              ;	64		INWK
 102+ 9158              ;	65		INWK31				 clear exploding/display state|missiles
 103+ 9158              ;	66		INWK
 104+ 9158              ;	67		INWK				XX19
 105+ 9158              ;	68		INWK
 106+ 9158              ;	69		INWK
 107+ 9158              ;	6A		INWK36
 108+ 9158              ;	6B
 109+ 9158              ;	6C		QQ15				Current Seed
 110+ 9158              ;	6D		QQ15+1
 111+ 9158              ;	6E		QQ15+2
 112+ 9158              ;	6F		QQ15+3
 113+ 9158              ;	70		QQ15+4
 114+ 9158              ;	71
 115+ 9158              ;	72		XX18   xlo			QQ17
 116+ 9158              ;	73		XX18+1 xhi
 117+ 9158              ;	74		XX18+2 xsgn
 118+ 9158              ;	75		XX18   ylo
 119+ 9158              ;	76		XX18+1 yhi
 120+ 9158              ;	77		XX18+2 ysgn
 121+ 9158              ;	78		XX18   zlo
 122+ 9158              ;	79		XX18+1 zhi
 123+ 9158              ;	7A		XX18+2 zsgn
 124+ 9158              ;	7B		BET2				Pitch Sign
 125+ 9158              ;	7C		BET2FLIP
 126+ 9158              ;	7D		DELTA
 127+ 9158              ;	7E		DELT4Lo
 128+ 9158              ;	7F		DELT4Hi
 129+ 9158              ;	80
 130+ 9158              ;	81		varQ
 131+ 9158              ;	82		varR
 132+ 9158              ;	83		varS
 133+ 9158              ;	84		XSAV
 134+ 9158              ;	85		YSAV
 135+ 9158              ;	86		XX17
 136+ 9158              ;	87		MenuIdMax		QQ11
 137+ 9158              ;	88		ZZDust
 138+ 9158              ;	89
 139+ 9158              ;	8A		MCNT			Move Count
 140+ 9158              ;	8B		ALPHA
 141+ 9158              ;	8C		TYPE
 142+ 9158              ;	8D
 143+ 9158              ;	8E		DockedFlag		QQ12
 144+ 9158              ;	8F
 145+ 9158              ;	96		XX4				Nbr of Normals Visible
 146+ 9158              ;
 147+ 9158              ;   9F      POINT
 148+ 9158              ;	D0
 149+ 9158              ;	D1		varT
 150+ 9158              ;array list of each face during draw flagged visible or not
 151+ 9158              ;	D2      XX2
 152+ 9158              ;	D3      XX2+1
 153+ 9158              ;	D4      XX2+2
 154+ 9158              ;	D5      XX2+3
 155+ 9158              ;	D6      XX2+4
 156+ 9158              ;	D7      XX2+5
 157+ 9158              ;	D8      XX2+6
 158+ 9158              ;	D9      XX2+7
 159+ 9158              ;	DA      XX2+8
 160+ 9158              ;	DB      XX2+9
 161+ 9158              ;	DC      XX2+10
 162+ 9158              ;	DD      XX2+11
 163+ 9158              ;	DE      XX2+12
 164+ 9158              ;	DF		XX2+13
 165+ 9158              ;	E0		XX2+14
 166+ 9158              ;	E1		XX2+15
 167+ 9158              ;	E2
 168+ 9158              ;	E3
 169+ 9158              ;	E4
 170+ 9158              ;	E5
 171+ 9158              ;	E6
 172+ 9158              ;	E7
 173+ 9158              ;	E8
 174+ 9158              ;	E9
 175+ 9158              ;	EA
 176+ 9158              ;	EB
 177+ 9158              ;	EC
 178+ 9158              ;	ED
 179+ 9158              ;	EE
 180+ 9158              ;	8F
 181+ 9158
 182+ 9158 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
 183+ 915A 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
 184+ 915C              ; Variables to simulate 6502 registers until code fixed
 185+ 915C              ; These must be here in this order as reading Y and X can then be a 16 bit read
 186+ 915C 00           regX		DB	0               ; using 16 bit read into BC this would go into C
 187+ 915D 00           regY		DB	0               ; using 16 bit read into BC this would go into B
 188+ 915E 00           regA		DB	0
 189+ 915F
 190+ 915F
 191+ 915F 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
 192+ 9160 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
 193+ 9162 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
 194+ 9164
 195+ 9164
 196+ 9164
 197+ 9164              ;XX16		DS	16				; 16 byte Matrix
 198+ 9164
 199+ 9164              P0INWK							; page 0 & 46
 200+ 9164              p0INWK31						; page 0 & 65
 201+ 9164              P0INWK36						; PAGE 0 &6A
 202+ 9164
 203+ 9164 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
 204+ 9165              LastNormalVisible	equ	XX4
 205+ 9165              varXX4              equ XX4
 206+ 9165
 207+ 9165
 208+ 9165
 209+ 9165 00           PATG		DB	0				; 6502 &03C9
 210+ 9166 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
 211+ 9168
 212+ 9168
 213+ 9168 00 00 00...  UNIV		DS FreeListSize*2	; Array of Universe Pointers
 214+ 918C 00 00 00...  HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
 215+ 91CC
 216+ 91CC              ; Present System Variables
 217+ 91CC
 218+ 91CC 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
 219+ 91CD 20           RandomSeed1				DB	32	; 01
 220+ 91CE 0C           RandomSeed2				DB	12			; 02
 221+ 91CF 42           RandomSeed3				DB	66			; 03
 222+ 91D0
 223+ 91D0 00           varT1					DB	0				; 06
 224+ 91D1 00           SClo					DB 0				; 07
 225+ 91D2 00           SChi					DB 0				; 08
 226+ 91D3 00           varP					DB 0 				; 10	XX16+7
 227+ 91D4 00           varPhi					DB 0 				; 11	XX16+8
 228+ 91D5 00           varPhi2					DB 0 				; 12	XX16+9
 229+ 91D6              varPp1                  equ varPhi
 230+ 91D6              varPp2                  equ varPhi2
 231+ 91D6 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
 232+ 91D7 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
 233+ 91D8              UnivPointer				equ	UnivPointerLo
 234+ 91D8 00           varV					DB 0				; 22                          XX0+4
 235+ 91D9 00           varVHi					DB 0				; 23                          XX0+5
 236+ 91DA 00           varXXlo                 DB 0                ; 24
 237+ 91DB 00           varXXHi                 DB 0                ; 25
 238+ 91DC              varXX					equ	varXXlo
 239+ 91DC 00           YYlo                    DB 0                ; 26
 240+ 91DD 00           YYHi                    DB 0                ; 27
 241+ 91DE              varYY					equ	YYlo
 242+ 91DE              											;	28
 243+ 91DE              											;	29
 244+ 91DE              ;PlayerShipPositionData - Must be contiguous for setup
 245+ 91DE 00           BETA 					DB	0               ; 2A        (pitch done)
 246+ 91DF 00           JSTY                    DB  0               ; Joystick analog
 247+ 91E0 00           BET1 					DB	0               ; 2B        lower7 magnitude
 248+ 91E1 00           BET2                    DB  0               ;            climb sign
 249+ 91E2 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
 250+ 91E3 1F           BET1MAXC                DB  31              ; max climb
 251+ 91E4 E1           BET1MAXD                DB  -31             ; max dive
 252+ 91E5 00           XC						DB	0               ; 2C
 253+ 91E6 00           YC						DB 	0               ; 2D
 254+ 91E7 00           OuterHyperCount			DB 	0				; 2E		TODO Replace with 16 bit counter later
 255+ 91E8 00           InnerHyperCount			DB 	0				; 2F
 256+ 91E9 00           ECMActive				DB 	0				; 30		ECM Active flag
 257+ 91EA 00 00        JSTX                    DW  0               ;           Joystick analog value
 258+ 91EC
 259+ 91EC 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude
 260+ 91ED 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 261+ 91EE 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 262+ 91EF 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 263+ 91F0 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 264+ 91F1 00           varK					DB	0				; 40
 265+ 91F2 00           varKp1					DB	0				; 41
 266+ 91F3 00           varKp2					DB	0				; 42
 267+ 91F4 00           varKp3					DB	0				; 43
 268+ 91F5
 269+ 91F5
 270+ 91F5 00 00        MissileTarget			DW	0				; 45
 271+ 91F7 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 272+ 921C
 273+ 921C              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 274+ 921C              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 275+ 921C              NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 276+ 921C 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 277+ 921D              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 278+ 921D
 279+ 921D
 280+ 921D 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 281+ 9222              											;	6D		QQ15+1
 282+ 9222              											;	6E		QQ15+2
 283+ 9222              											;	6F		QQ15+3
 284+ 9222              											;	70		QQ15+4
 285+ 9222              											;	71		QQ15+5
 286+ 9222 00           QQ17					DB	0				;   72
 287+ 9223 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 288+ 9224 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 289+ 9225 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 290+ 9226 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 291+ 9227 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 292+ 9228 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 293+ 9229 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 294+ 922A 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 295+ 922B 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 296+ 922C
 297+ 922C 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 298+ 922D 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 299+ 922E 00           DELT4Lo					DB 	0				; 7E
 300+ 922F 00           DELT4Hi					DB 	0				; 7F
 301+ 9230              DELTA4                  equ                 DELT4Lo
 302+ 9230
 303+ 9230
 304+ 9230              ; Not thise must be in this order else 16 bit fetches will fail
 305+ 9230 00           varU                    DB  0               ;   80
 306+ 9231 00           varQ					DB  0 				;	81
 307+ 9232 00           varR					DB  0 				;	82
 308+ 9233 00           varS					DB  0 				;	83
 309+ 9234
 310+ 9234 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 311+ 9236
 312+ 9236 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 313+ 9237 00           YSAV                    DB  0               ; 85
 314+ 9238 00           XX17					DB	0				; 86
 315+ 9239              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 316+ 9239              varXX17                 equ  XX17
 317+ 9239 00           ScreenChanged           DB  0
 318+ 923A 00           ScreenIndex             DB  0
 319+ 923B 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 320+ 923C                                                          ; 7    6    5    4     3    2        1    0
 321+ 923C                                                          ; Up   Down Left Right Home Recentre
 322+ 923C 00           InvertedYAxis           DB  0
 323+ 923D 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 324+ 923E              											; Bit 7 Set  ShortRangeChart    $80
 325+ 923E              											; Bit 6 Set  Galactic Chart     $40
 326+ 923E              											; Bit 5 Set  Market Place       $20
 327+ 923E              											; Bit 4 Set  Status Screen      $10
 328+ 923E              											; Bit 3 Set  Display Inventory  $08
 329+ 923E                                                          ; Bit 2 Set  Planet Data        $04
 330+ 923E                                                          ; View bit combinations if the ones above not matched
 331+ 923E                                                          ; bits 1 0
 332+ 923E                                                          ;      1 1  Front view , i.e. $03
 333+ 923E                                                          ;      1 0  Aft View          $02
 334+ 923E                                                          ;      0 1  Left View         $01
 335+ 923E                                                          ;      0 0  Right view        $00
 336+ 923E              											; Bit 0 Set  Data On System
 337+ 923E              											; 0  Space View (Not a menu)
 338+ 923E 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 339+ 923F 00           XX13                    DB  0               ;   89
 340+ 9240 00           MCNT					DB 	0				; 8A
 341+ 9241 00           TYPE					DB	0				; 8C used for ship type in drawing
 342+ 9242 00           ALPHA					DB	0				; 8D
 343+ 9243 00           DockedFlag				DB	0				; 8E
 344+ 9244 00           GamePaused              DB  0
 345+ 9245 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 346+ 9246 00           varCNT                  DB  0               ; 93
 347+ 9247 00           varRAT                  DB  0               ; 99
 348+ 9248 00           varRAT2                 DB  0               ; 9A
 349+ 9249 00           varK2                   DB  0               ; 9B
 350+ 924A 00           varK2p1                 DB  0               ; 9C K2 plus 1
 351+ 924B 00           varK2p2                 DB  0               ; 9D K2 plus 2
 352+ 924C 00           varK2p3                 DB  0               ; 9E K2 plus 3
 353+ 924D
 354+ 924D 00           Point                   DB  0               ; 9F      POINT
 355+ 924E
 356+ 924E 00           varT					DB	0				; D1
 357+ 924F
 358+ 924F 00 00        varK3					DS	2				; D2
 359+ 9251              varK3p1					equ varK3+1			; D3
 360+ 9251 00 00        varK4					DS	2				; E0
 361+ 9253              varK4p1					equ varK4+1			; D3
 362+ 9253
 363+ 9253              ;PlayerData:
 364+ 9253 00           PlayerForwardSheild0	DB	0 ; ?????
 365+ 9254 00           PlayerForwardSheild1    DB	0
 366+ 9255 00           PlayerForwardSheild2    DB	0
 367+ 9256
 368+ 9256
 369+ 9256              ;Heap
 370+ 9256
 371+ 9256 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 372+ 9258 00 00 00...  HeapData				DS	50
 373+ 928A              ; Contains 				X 16 bit, Y 16 bit
 374+ 928A              ;RuntimeData:
 375+ 928A              HeapHead				equ HeapStart
 376+ 928A
 377+ 928A 00 00 00...  FRIN					DS FreeListSize		; &0311 for 12 bytes Array of Free Index - Now array of while universe pages are occupied
 378+ 929C              FreeUniverseSlotList    EQU FRIN
 379+ 929C 00           SUN						DB	0				; &031D Actually MANY -1? As we can only have 1?
 380+ 929D 00           MANY					DB	0				; &031E array of ship types???
 381+ 929E 00           SpaceStationPresent		DB	0				; &0320	Wonder if many is counter of type in univ objects?
 382+ 929F 00           						DB	0				; &0321	Speculative?
 383+ 92A0 00           						DB	0				; &0322	Speculative?
 384+ 92A1 00           						DB	0				; &0323	Speculative?
 385+ 92A2 00           						DB	0				; &0324	Speculative?
 386+ 92A3 00           						DB	0				; &0325	Speculative?
 387+ 92A4 00           						DB	0				; &0326	Speculative?
 388+ 92A5 00           						DB	0				; &0327	Speculative?
 389+ 92A6 00           TransporterPresent		DB	0				; &0328	MANY + 10 (or #SHU + 1)
 390+ 92A7 00           						DB	0				; &0329	MANY + 11 Speculative?
 391+ 92A8 00           				        DB	0				; &032A	MANY + 12 Speculative?
 392+ 92A9 00           				        DB	0				; &032B	MANY + 13 Speculative?
 393+ 92AA 00           				        DB	0				; &032C	MANY + 14 Speculative?
 394+ 92AB 00           				        DB	0				; &032D	MANY + 15 Speculative?
 395+ 92AC 00           				        DB	0				; &032E	MANY+COPS #COP Confirmed in code
 396+ 92AD 00           				        DB	0				; &032F	MANY + 17 Speculative?
 397+ 92AE 00           				        DB	0				; &0330	MANY + 18 Speculative?
 398+ 92AF 00           				        DB	0				; &0331	MANY + 19 Speculative?
 399+ 92B0 00           						DB	0				; &0332	MANY + 20 Speculative?
 400+ 92B1 00           				        DB	0				; &0333	MANY + 21 Speculative?
 401+ 92B2 00           				        DB	0				; &0334	MANY + 22 Speculative?
 402+ 92B3 00           				        DB	0				; &0335	MANY + 23 Speculative?
 403+ 92B4 00           				        DB	0				; &0336	MANY + 24 Speculative?
 404+ 92B5 00           				        DB	0				; &0337	MANY + 25 Speculative?
 405+ 92B6 00           				        DB	0				; &0338	MANY + 26 Speculative?
 406+ 92B7 00           				        DB	0				; &0339	MANY + 27 Speculative?
 407+ 92B8 00           				        DB	0				; &033A	MANY + 28 Speculative?
 408+ 92B9 00           				        DB	0				; &033B	MANY + 29 Speculative?
 409+ 92BA 00           				        DB	0				; &033C	MANY + 30 Thargoids
 410+ 92BB 00           				        DB	0				; &033D	MANY + 31 Constrictor?
 411+ 92BC 00           JunkCount				DB  0				; $033E
 412+ 92BD 00           AutoDocking				DB	0				; $033F
 413+ 92BE 00           PlayerECM				DB	0				; $0340
 414+ 92BF 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 415+ 92C0 00           CabinTemp				DB	0				; $0342
 416+ 92C1 00           Laser2					DB	0				; 0343 laser Power? Not sure
 417+ 92C2 00           MissileArmedStatus		DB	0				; 0344 MSAR
 418+ 92C3 00           View					DB	0				; 0345 Index for laser mount and screen view, 1 = front 2 = aft = 4 left 8 = right
 419+ 92C4 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
 420+ 92C5 00           GunTemperature			DB	0				; 0347	GNTMP
 421+ 92C6 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 422+ 92C7 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 423+ 92C8 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 424+ 92C9 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 425+ 92CA 00           JoystickX				DB	0				; 034C JSTX
 426+ 92CB 00           JoystickY				DB	0				; 034D JSTY
 427+ 92CC 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 428+ 92CD 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 429+ 92CE 00 00 00...  CommanderName			DS  8				; 0350 - 3057 Commander Name
 430+ 92D6 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 431+ 92D7 00           VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 432+ 92D8              											; Bit mask XXXX10XX - Thargoid plan mission
 433+ 92D8 00           PresentSystemX			DB	0				; 0359 - 035A QQ0 X Y
 434+ 92D9 00           PresentSystemY			DB  0
 435+ 92DA 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 436+ 92E0 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
 437+ 92E4 19           Fuel					DB	25				; 0365  QQ14
 438+ 92E5 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 439+ 92E6 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 440+ 92E7 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
 441+ 92EB              ;036C to D???
 442+ 92EB 46           CargoBaySize			DB	70				; 036E
 443+ 92EC 00           CargoRunningLoad        DB  0
 444+ 92ED 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 444+ 92F1 00 00 00 00
 444+ 92F5 00 00 00 00
 444+ 92F9 00 00 00 00
 445+ 92FD              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
 446+ 92FD              SlaveCargoTonnes		equ CargoTonnes+3
 447+ 92FD              NarcoticsCargoTonnes	equ CargoTonnes+6
 448+ 92FD              FirearmsCargoTonnes		equ CargoTonnes+10
 449+ 92FD              QQ20                    equ CargoTonnes
 450+ 92FD 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
 451+ 9317              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
 452+ 9317              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
 453+ 9317              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
 454+ 9317              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
 455+ 9317              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
 456+ 9317              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
 457+ 9317 01           FuelScoopsBarrelStatus	DB	1				; 0381
 458+ 9318 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 459+ 931F              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 460+ 931F              ;  #&5 Does J reverse both joystick channels
 461+ 931F              ;  #&4 Does Y reverse joystick Y channel			03CB
 462+ 931F              ;  #&3 Does F toggle flashing information			03CA
 463+ 931F              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 464+ 931F              ;  #&1 Does A toggle keyboard auto-recentering ?
 465+ 931F              ;  #&0 Caps-lock toggles keyboard flight damping
 466+ 931F 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 467+ 9320 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 468+ 9321 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 469+ 9331 00           AlienItemsAvaliability  DB	0				; 039D
 470+ 9332 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 471+ 9333 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 472+ 9335 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 473+ 9336              											;
 474+ 9336 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 475+ 9337 00           ForeShield				DB	0				; 03A5
 476+ 9338 00           AftShield				DB	0				; 03A6
 477+ 9339 00           PlayerEnergy			DB	0				; 03A7
 478+ 933A 00           CompassX				DB	0				; 03A8
 479+ 933B 00           CompassY				DB	0				; 03A9
 480+ 933C 00           MarketPrice				DB	0				; 03AA QQ24
 481+ 933D 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 482+ 933E 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 483+ 933F 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 484+ 9340 00           GovPresentSystem		DB	0				; 03AE Govenment
 485+ 9341 00           TekPresentSystem		DB	0				; 03AF Technology
 486+ 9342 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 487+ 9344              											; this is ship lines stack pointer so may be redundant with paging
 488+ 9344              											; LS = line stack so we will have one for now to remove later
 489+ 9344 00 00 00...  WorkingSeeds			DS	6
 490+ 934A 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 491+ 9350 00           DisplayEcononmy			DB	0				; 03B8
 492+ 9351 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 493+ 9352 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 494+ 9353 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 495+ 9355 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 496+ 9357 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 497+ 9359 00 00        DisplayRadius			DW	0
 498+ 935B 00           TargetPlanetX			DB	0               ; 03C1
 499+ 935C 00           TargetPlanetY			DB	0               ; 03C2
 500+ 935D 00           SRCTargetPlanetX		DB	0               ; Used for short range chart cursor
 501+ 935E 00           SRCTargetPlanetY		DB	0               ; then divided down to target planet for compatibilit with galactic chart routines
 502+ 935F 00           NubmerOfStarsNOSTM		DB	0				; 03C3 NOSTM  \ number of stars, dust.
 503+ 9360
 504+ 9360 00           CompassColor			DB	0				; 03C5
 505+ 9361 00           SoundToggle				DB	0				; 03C6
 506+ 9362 00           KeyboardRecenterToggle	DB	0				; 03C8
 507+ 9363 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 508+ 9364 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 509+ 9365 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 510+ 9366 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 511+ 9367 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 512+ 9368 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 513+ 9369
 514+ 9369              ; Working Data
 515+ 9369
 516+ 9369              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 517+ 9369              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 518+ 9369              ; $0925 =	EQUW page9+37* 1
 519+ 9369              ; $094A =	EQUW page9+37* 2
 520+ 9369              ; $096F =	EQUW page9+37* 3
 521+ 9369              ; $0994 =	EQUW page9+37* 4
 522+ 9369              ; $09B9 =	EQUW page9+37* 5
 523+ 9369              ; $09DE =	EQUW page9+37* 6
 524+ 9369              ; $0A03 =	EQUW page9+37* 7
 525+ 9369              ; $0A28 =	EQUW page9+37* 8
 526+ 9369              ; $0A4D =	EQUW page9+37* 9
 527+ 9369              ; $0A72 =	EQUW page9+37*10
 528+ 9369              ; $0A97 =	EQUW page9+37*11
 529+ 9369              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 530+ 9369
 531+ 9369
 532+ 9369
 533+ 9369              ; 0b00 is start address of data to save
 534+ 9369 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 535+ 936A
 536+ 936A 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 537+ 936C 00 00        CommanderLoadAddress	DW	0				;0C03
 538+ 936E 00 00        LengthOfFile			DW	0				;0C0B
 539+ 9370 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 540+ 9372
 541+ 9372 00 00 00...  EdgesBuffer				DS 50
 542+ 93A4              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 543+ 93A4              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 544+ 93A4
 545+ 93A4 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 546+ 93EA              ShipLineStackTop		equ $ - ShipLineStack
 547+ 93EA
 548+ 93EA 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 549+ 94AA              ; LSX vector overlaps with LSO
 550+ 94AA 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 551+ 94AB 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 552+ 94AC
 553+ 94AC              ; Star Positions are 16 bit 3d coordinates
 554+ 94AC 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 555+ 9518 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 556+ 953C 00           varStarX                DB  0
 557+ 953D 00           varStarY                DB  0
 558+ 953E 00 00 00...  varDustX                DS MaxNumberOfStars *2
 559+ 9562 00 00 00...  varDustY                DS MaxNumberOfStars *2
 560+ 9586 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 561+ 95AA
 562+ 95AA
 563+ 95AA              SpeedoStart             equ $84D1
 564+ 95AA 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 564+ 95AE 04 04 05 06
 564+ 95B2 06 07 08 09
 564+ 95B6 0A 0A 0B 0C
 564+ 95BA 0D 0E 0E 0F
 564+ 95BE 10 10 11 12
 564+ 95C2 13 14 14 15
 564+ 95C6 16 17 18 18
 564+ 95CA 19 1A 1A 1B
 564+ 95CE 1C 1C 1D 1E
 564+ 95D2 1F
 565+ 95D3
 566+ 95D3              DialMiddleXPos          equ $E1
 567+ 95D3              RollMiddle              equ $8AE0
 568+ 95D3              PitchMiddle             equ $92E0
 569+ 95D3
 570+ 95D3              MakeInnocentMacro:		MACRO
 571+ 95D3 ~            						xor		a
 572+ 95D3 ~            						ld		(FugitiveInnocentStatus),a
 573+ 95D3              						ENDM
 574+ 95D3
 575+ 95D3              NoEscapePodMacro:		MACRO
 576+ 95D3 ~            						xor		a
 577+ 95D3 ~            						ld		(EscapePod),a
 578+ 95D3              						ENDM
 579+ 95D3
 580+ 95D3              MaxFuelLevel            EQU     $46
 581+ 95D3              MaxFuelMacro:			MACRO
 582+ 95D3 ~            						ld		a,MaxFuelLevel
 583+ 95D3 ~            						ld		(Fuel),a
 584+ 95D3              						ENDM
 585+ 95D3
 586+ 95D3              MaxThrottle:            MACRO
 587+ 95D3 ~                                    ld      a,(SHIPMAXSPEED)
 588+ 95D3 ~                                    ld      (DELTA),a
 589+ 95D3 ~                                    ld      d,a
 590+ 95D3 ~                                    ld      e,4
 591+ 95D3 ~                                    mul
 592+ 95D3 ~                                    ld      (DELT4Lo),de
 593+ 95D3                                      ENDM
 594+ 95D3
 595+ 95D3              ZeroThrottle:           MACRO
 596+ 95D3 ~                                    xor     a
 597+ 95D3 ~                                    ld      (DELTA),a
 598+ 95D3 ~                                    ld      (DELT4Lo),a
 599+ 95D3 ~                                    ld      (DELT4Lo+1),a
 600+ 95D3                                      ENDM
 601+ 95D3
# file closed: Variables/general_variables.asm
 720  95D3
 721  95D3                  INCLUDE "Variables/random_number.asm"
# file opened: Variables/random_number.asm
   1+ 95D3              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 95D3              doRND2:
   3+ 95D3 A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 95D4              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 95D4              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 95D4 3A CC 91     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 95D7 CB 17                                rl		a								; Rotate L including carry
   8+ 95D9 4F                                   ld		c,a								; c =  double lo
   9+ 95DA 21 CE 91     .AddSeed2:              ld		hl,RandomSeed2
  10+ 95DD 8E                                   adc		a,(hl)							; RAND+2
  11+ 95DE 32 CC 91     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 95E1 08           .SaveBtoSeed2:          ex		af,af'
  13+ 95E2 79                                   ld		a,c
  14+ 95E3 32 CE 91                             ld		(RandomSeed2),a
  15+ 95E6 08                                   ex		af,af'
  16+ 95E7 3A CD 91                             ld		a,(RandomSeed1)
  17+ 95EA 4F                                   ld		c,a								; C = Seed1
  18+ 95EB 21 CF 91     .AddSeed3:              ld		hl,RandomSeed3
  19+ 95EE 8E                                   adc		a,(hl)
  20+ 95EF 32 CD 91                             ld		(RandomSeed1),a
  21+ 95F2 08                                   ex		af,af'
  22+ 95F3 79                                   ld		a,c
  23+ 95F4 32 CF 91                             ld		(RandomSeed3),a
  24+ 95F7 08                                   ex		af,af'
  25+ 95F8 C9                                   ret
  26+ 95F9
  27+ 95F9              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 95F9 06 04        	ld		b,4
  29+ 95FB 21 FF C1     	ld		hl,UbnkLineArray				; line data
  30+ 95FE              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 95FE              EE55:
  32+ 95FE CD D4 95     	call	doRND							; get random
  33+ 9601 77           	ld		(hl),a							; (XX19),Y
  34+ 9602 23           	inc		hl
  35+ 9603 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9605 C9               ret
  37+ 9606
# file closed: Variables/random_number.asm
 722  9606                  INCLUDE "Variables/galaxy_seed.asm"
# file opened: Variables/galaxy_seed.asm
   1+ 9606 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 960A 58 59 53 45
   1+ 960E 45 44
   2+ 9610              copy_galaxy_to_system:
   3+ 9610 21 DA 92     		ld		hl,GalaxySeeds
   4+ 9613 11 1D 92     		ld		de,SystemSeed
   5+ 9616              copy_seed:
   6+ 9616 ED A0        		ldi
   7+ 9618 ED A0        		ldi
   8+ 961A ED A0        		ldi
   9+ 961C ED A0        		ldi
  10+ 961E ED A0        		ldi
  11+ 9620 ED A0        		ldi
  12+ 9622 C9           		ret
  13+ 9623
  14+ 9623              copy_system_to_galaxy:
  15+ 9623 21 1D 92     		ld		hl,SystemSeed
  16+ 9626 11 DA 92     		ld		de,GalaxySeeds
  17+ 9629 18 EB        		jr		copy_seed
  18+ 962B
  19+ 962B              copy_galaxy_to_working:
  20+ 962B 21 DA 92     		ld		hl,GalaxySeeds
  21+ 962E 11 44 93     		ld		de,WorkingSeeds
  22+ 9631 18 E3        		jr		copy_seed
  23+ 9633
  24+ 9633              copy_working_to_galaxy:
  25+ 9633 21 44 93     		ld		hl,WorkingSeeds
  26+ 9636 11 DA 92     		ld		de,GalaxySeeds
  27+ 9639 18 DB        		jr		copy_seed
  28+ 963B
  29+ 963B              copy_working_to_system:
  30+ 963B 21 44 93     		ld		hl,WorkingSeeds
  31+ 963E 11 1D 92     		ld		de,SystemSeed
  32+ 9641 18 D3        		jr		copy_seed
  33+ 9643
  34+ 9643              copy_system_to_working:
  35+ 9643 21 1D 92     		ld		hl,SystemSeed
  36+ 9646 11 44 93     		ld		de,WorkingSeeds
  37+ 9649 18 CB        		jr		copy_seed
  38+ 964B
  39+ 964B              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  40+ 964B CD 4E 96     		call	.NextStep					; This logic means we hard code x4
  41+ 964E              .NextStep:
  42+ 964E CD 51 96     		call	process_seed				; This logic means we hard code x2
  43+ 9651              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  44+ 9651 3A 1D 92     		ld		a,(SystemSeed)				; QQ15
  45+ 9654 B7           		or		a							; clear carry flag
  46+ 9655 21 1F 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  47+ 9658 86           		add		a,(hl)						; a= QQ15 + QQ152
  48+ 9659 47           		ld		b,a							; partial sum lo
  49+ 965A 3A 1E 92     		ld		a,(SystemSeed+1)
  50+ 965D 21 20 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  51+ 9660 8E           		adc		a,(hl)						; note add with carry
  52+ 9661 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  53+ 9662 3A 1F 92     		ld		a,(SystemSeed+2)
  54+ 9665 32 1D 92     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  55+ 9668 3A 20 92     		ld		a,(SystemSeed+3)
  56+ 966B 32 1E 92     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  57+ 966E 3A 22 92     		ld		a,(SystemSeed+5)
  58+ 9671 32 20 92     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  59+ 9674 3A 21 92     		ld		a,(SystemSeed+4)
  60+ 9677 32 1F 92     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  61+ 967A B7           		or		a
  62+ 967B 78           		ld		a,b
  63+ 967C 21 1F 92     		ld		hl,SystemSeed+2				; hl -> qq+2
  64+ 967F 86           		add	    a,(hl)
  65+ 9680 32 21 92     		ld		(SystemSeed+4),a
  66+ 9683 79           		ld		a,c
  67+ 9684 21 20 92     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  68+ 9687 8E           		adc		a,(hl)
  69+ 9688 32 22 92     		ld		(SystemSeed+5),a
  70+ 968B C9           		ret
  71+ 968C
  72+ 968C              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  73+ 968C CD 8F 96     		call	.NextStep					; This logic means we hard code x4
  74+ 968F              .NextStep:
  75+ 968F CD 92 96     		call	working_seed				; This logic means we hard code x2
  76+ 9692              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  77+ 9692              ; x = a + c
  78+ 9692 3A 44 93     		ld		a,(WorkingSeeds)			; QQ15
  79+ 9695 B7           		or		a							; clear carry flag
  80+ 9696 21 46 93     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  81+ 9699 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  82+ 969A 47           		ld		b,a							; partial sum lo [x]
  83+ 969B              ; y = b + d	+ carry
  84+ 969B 3A 45 93     		ld		a,(WorkingSeeds+1)          ; [b]
  85+ 969E 21 47 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  86+ 96A1 8E           		adc		a,(hl)						; note add with carry
  87+ 96A2 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  88+ 96A3 3A 46 93     		ld		a,(WorkingSeeds+2)
  89+ 96A6 32 44 93     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  90+ 96A9 3A 47 93     		ld		a,(WorkingSeeds+3)
  91+ 96AC 32 45 93     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  92+ 96AF 3A 49 93     		ld		a,(WorkingSeeds+5)
  93+ 96B2 32 47 93     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  94+ 96B5 3A 48 93     		ld		a,(WorkingSeeds+4)
  95+ 96B8 32 46 93     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  96+ 96BB B7           		or		a
  97+ 96BC 78           		ld		a,b
  98+ 96BD 21 46 93     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  99+ 96C0 86           		add	    a,(hl)
 100+ 96C1 32 48 93     		ld		(WorkingSeeds+4),a			; e = x + [c]
 101+ 96C4 79           		ld		a,c
 102+ 96C5 21 47 93     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
 103+ 96C8 8E           		adc		a,(hl)
 104+ 96C9 32 49 93     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
 105+ 96CC C9           		ret
 106+ 96CD
 107+ 96CD 32           working_distX	DB 50
 108+ 96CE 32           working_distY	DB 50
 109+ 96CF 00           current_distY	DB 0
 110+ 96D0
 111+ 96D0              find_present_system:
 112+ 96D0 AF           	xor		a
 113+ 96D1 32 36 92     	ld		(XSAV),a
 114+ 96D4              .CounterLoop:
 115+ 96D4 3A 1E 92     	ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 116+ 96D7 4F           	ld		c,a
 117+ 96D8              .calcLocaldy:
 118+ 96D8 3A D9 92     	ld		a,(PresentSystemY)
 119+ 96DB 47           	ld		b,a								; so b holds Y ccord
 120+ 96DC 79           	ld		a,c
 121+ 96DD 90           	sub		b
 122+ 96DE CB 7F        	bit		7,a
 123+ 96E0 28 02        	jr		z,.positivedy
 124+ 96E2              .negativedy:
 125+ 96E2 ED 44        	neg
 126+ 96E4              .positivedy:
 127+ 96E4 32 CF 96     	ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 128+ 96E7 ED 5B CD 96  	ld		de,(working_distX)
 129+ 96EB BA           	cp		d
 130+ 96EC 30 24        	jr		nc,.toofar
 131+ 96EE              .calcLocaldx:
 132+ 96EE 3A 20 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 133+ 96F1 4F           	ld		c,a
 134+ 96F2 3A D8 92     	ld		a,(PresentSystemX)
 135+ 96F5 47           	ld		b,a								; so b holds Y ccord
 136+ 96F6 79           	ld		a,c
 137+ 96F7 90           	sub		b
 138+ 96F8 CB 7F        	bit		7,a
 139+ 96FA 28 02        	jr		z,.positivedx
 140+ 96FC              .negativedx:
 141+ 96FC ED 44        	neg
 142+ 96FE              .positivedx:
 143+ 96FE 4F           	ld		c,a
 144+ 96FF BB           	cp		e
 145+ 9700 30 10        	jr		nc,.toofar
 146+ 9702              .Nearer:									; we have a closer system
 147+ 9702 3A CF 96     	ld		a,(current_distY)
 148+ 9705 47           	ld		b,a								; we have c to recall Y into b
 149+ 9706 ED 43 CD 96  	ld		(working_distX),bc
 150+ 970A C5           	push	bc
 151+ 970B CD 43 96     	call 	copy_system_to_working
 152+ 970E C1           	pop		bc
 153+ 970F 78           	ld		a,b								;
 154+ 9710 B1           	or		c								;
 155+ 9711 C8           	ret		z								; if we have distance 0 then bang on
 156+ 9712              .toofar:
 157+ 9712 CD 4B 96     	call	next_system_seed
 158+ 9715 3A 36 92     	ld		a,(XSAV)
 159+ 9718 3D           	dec		a
 160+ 9719 FE 00        	cp		0
 161+ 971B C8           	ret		z
 162+ 971C 32 36 92     	ld		(XSAV),a
 163+ 971F 18 B3        	jr		.CounterLoop
 164+ 9721
 165+ 9721
 166+ 9721              get_planet_data_working_seed:
 167+ 9721 3A 45 93     		ld		a, (WorkingSeeds+1)
 168+ 9724 E6 07        		and		7
 169+ 9726 32 50 93     		ld		(DisplayEcononmy),a
 170+ 9729 3A 46 93     		ld		a, (WorkingSeeds+2)
 171+ 972C CB 3F        		srl	a
 172+ 972E CB 3F        		srl	a
 173+ 9730 CB 3F        		srl	a
 174+ 9732 CB 3F        		srl	a								; c/8
 175+ 9734 E6 07        		and		7
 176+ 9736 32 51 93     		ld		(DisplayGovernment),a
 177+ 9739 CB 3F        		srl	a
 178+ 973B FE 00        		cp		0
 179+ 973D 20 08        		jr		nz,.CanBeRich
 180+ 973F              .Fedual:
 181+ 973F 3A 50 93     		ld		a,(DisplayEcononmy)
 182+ 9742 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 183+ 9744 32 50 93     		ld		(DisplayEcononmy),a
 184+ 9747              .CanBeRich:
 185+ 9747 3A 50 93     		ld		a,(DisplayEcononmy)
 186+ 974A EE 07        		xor		7							; flip economy so Rich is now 7
 187+ 974C 32 52 93     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 188+ 974F 47           		ld		b,a
 189+ 9750 3A 47 93     		ld		a,(WorkingSeeds+3)
 190+ 9753 E6 03        		and		3
 191+ 9755 80           		add		a,b
 192+ 9756 32 52 93     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 193+ 9759 3A 51 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 194+ 975C CB 3F        		srl		a 							; gov/2
 195+ 975E 47           		ld		b,a
 196+ 975F 3A 52 93     		ld		a,(DisplayTekLevel)
 197+ 9762 80           		add		a,b
 198+ 9763 32 52 93     		ld		(DisplayTekLevel),a			; Tek += gov /2
 199+ 9766 CB 27        		sla		a
 200+ 9768 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 201+ 976A 47           		ld		b,a
 202+ 976B 3A 50 93     		ld		a,(DisplayEcononmy)
 203+ 976E 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 204+ 976F 47           		ld		b,a
 205+ 9770 3A 51 93     		ld		a,(DisplayGovernment)
 206+ 9773 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 207+ 9774 32 53 93     		ld		(DisplayPopulation),a
 208+ 9777 3A 50 93     		ld		a,(DisplayEcononmy)
 209+ 977A EE 07        		xor		7							; Onto productivity
 210+ 977C C6 03        		add		3							;  (Flipped eco +3)
 211+ 977E 57           		ld		d,a
 212+ 977F 3A 51 93     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 213+ 9782 C6 04        		add		4
 214+ 9784 5F           		ld		e,a
 215+ 9785 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 216+ 9787 3A 53 93     		ld		a,(DisplayPopulation)		; then we use d for radius
 217+ 978A 57           		ld		d,a
 218+ 978B ED 30        		mul
 219+ 978D CB 23        		sla		e
 220+ 978F CB 1A        		rr		d
 221+ 9791 CB 23        		sla		e
 222+ 9793 CB 1A        		rr		d
 223+ 9795 CB 23        		sla		e
 224+ 9797 CB 1A        		rr		d							; de * 8
 225+ 9799 ED 53 55 93  		ld		(DisplayProductivity),de
 226+ 979D              .DoRadius:
 227+ 979D 3A 47 93     		ld		a,(WorkingSeeds+3)
 228+ 97A0 4F           		ld		c,a
 229+ 97A1 3A 49 93     		ld		a,(WorkingSeeds+5)
 230+ 97A4 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 231+ 97A6 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 232+ 97A8 47           		ld		b,a							;
 233+ 97A9 ED 43 59 93  		ld		(DisplayRadius),bc
 234+ 97AD C9           		ret
 235+ 97AE
# file closed: Variables/galaxy_seed.asm
 723  97AE                  INCLUDE "Tables/text_tables.asm"
# file opened: Tables/text_tables.asm
   1+ 97AE 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 97B2 65 00
   2+ 97B4 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 97B8 00
   3+ 97B9 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 97BD 74 61 72 79
   3+ 97C1 00
   4+ 97C2 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 97C6 6E 67 00
   5+ 97C9 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 97CD 6F 6D 00
   6+ 97D0
   7+ 97D0 AE 97 B4 97  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 97D4 B9 97 C2 97
   7+ 97D8 C9 97
   8+ 97DA              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 97DA
  10+ 97DA 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 97DE 65 64 00
  11+ 97E1 47 72 65 65  ConditionName2		DB "Green",0
  11+ 97E5 6E 00
  12+ 97E7 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 97EB 6F 77 00
  13+ 97EE 52 65 64 00  ConditionName4		DB "Red",0
  14+ 97F2
  15+ 97F2 DA 97 E1 97  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 97F6 E7 97 EE 97
  16+ 97FA              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 97FA
  18+ 97FA 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 97FE 53 45 49 54
  18+ 9802 49 4C 45 54
  18+ 9806 53 54 4F 4E
  18+ 980A 4C 4F 4E 55
  18+ 980E 54 48 4E 4F
  18+ 9812 41 4C 4C 45
  18+ 9816 58 45 47 45
  18+ 981A 5A 41 43 45
  18+ 981E 42 49 53 4F
  18+ 9822 55 53 45 53
  18+ 9826 41 52 4D 41
  18+ 982A 49 4E 44 49
  18+ 982E 52 45 41 3F
  18+ 9832 45 52 41 54
  18+ 9836 45 4E 42 45
  18+ 983A 52 41 4C 41
  18+ 983E 56 45 54 49
  18+ 9842 45 44 4F 52
  18+ 9846 51 55 41 4E
  18+ 984A 54 45 49 53
  18+ 984E 52 49 4F 4E
  18+ 9852 00
  19+ 9853
  20+ 9853 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ 9857 10 00 20 00
  20+ 985B 40 00 80 00
  20+ 985F 00 02 00 0A
  20+ 9863 00 19 00 49
  20+ 9867 FF FF
  21+ 9869
  22+ 9869 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ 986D 6C 65 73 73
  22+ 9871 00
  23+ 9872 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ 9876 6C 79 20 48
  23+ 987A 61 72 6D 6C
  23+ 987E 65 73 73 00
  24+ 9882 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ 9886 00
  25+ 9887 41 76 65 72  RankingName4		DB 	"Average",0
  25+ 988B 61 67 65 00
  26+ 988F 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ 9893 65 20 41 76
  26+ 9897 65 72 61 67
  26+ 989B 65 00
  27+ 989D 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ 98A1 65 74 65 6E
  27+ 98A5 74 00
  28+ 98A7 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ 98AB 65 72 6F 75
  28+ 98AF 73 00
  29+ 98B1 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ 98B5 6C 79 00
  30+ 98B8 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ 98BC 20 45 20 4C
  30+ 98C0 20 49 20 54
  30+ 98C4 20 45 20 2D
  30+ 98C8 2D 2D 00
  31+ 98CB 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ 98CF 6C 6F 62 73
  31+ 98D3 67 6F 64 00
  32+ 98D7 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ 98DB 65 72 00
  33+ 98DE
  34+ 98DE 69 98 72 98  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ 98E2 82 98 87 98
  34+ 98E6 8F 98 9D 98
  34+ 98EA A7 98 B1 98
  34+ 98EE B8 98 CB 98
  34+ 98F2 D7 98
  35+ 98F4              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ 98F4
  37+ 98F4
  38+ 98F4              getTableText:
  39+ 98F4              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ 98F4              ; ">Note for ranking first 2 bytes are target rank"
  41+ 98F4 D5           	push	de								; save DE as we will likley need it in caller
  42+ 98F5 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ 98F7 ED 31        	add		hl,a
  44+ 98F9 5E           	ld		e,(hl)
  45+ 98FA 23           	inc		hl
  46+ 98FB 56           	ld		d,(hl)							; de = indexed address
  47+ 98FC EB           	ex		de,hl							; flip it to hl
  48+ 98FD D1           	pop		de								; retrieve de
  49+ 98FE C9           	ret										; return with hl as start entry
  50+ 98FF
  51+ 98FF
  52+ 98FF              ;               CF      ZF      Result
  53+ 98FF              ;               -----------------------------------
  54+ 98FF              ;               0       0       HL > DE
  55+ 98FF              ;               0       1       HL == DE
  56+ 98FF              ;               1       0       HL < DE
  57+ 98FF              ;               1       1       Impossible
  58+ 98FF              getRankIndex:
  59+ 98FF              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ 98FF              ; ">Note for ranking first 2 bytes are target rank"
  61+ 98FF 7A           	ld		a,d
  62+ 9900 B3           	or		e
  63+ 9901 FE 00        	cp		0
  64+ 9903 C8           	ret		z								; quicks skip for 0 kills
  65+ 9904 AF           	xor 	a
  66+ 9905 21 53 98     	ld		hl,RankingTable
  67+ 9908              .testLoop:
  68+ 9908 4E           	ld		c,(hl)
  69+ 9909 23           	inc		hl
  70+ 990A 46           	ld		b,(hl)							; bc = ranking
  71+ 990B E5           	push	hl
  72+ 990C 60           	ld		h,b
  73+ 990D 69           	ld		l,c
  74+ 990E CD B6 A1     	call	compare16HLDE
  75+ 9911 38 06        	jr		c,.HLLTDE
  76+ 9913              .HLGTEDE									; Found the correct rank
  77+ 9913 E1           	pop		hl
  78+ 9914 23           	inc		hl								; move to next value
  79+ 9915 23           	inc		hl
  80+ 9916 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ 9917 18 EF        	jr		.testLoop
  82+ 9919              .HLLTDE:									; HL < Kills so found correct rank
  83+ 9919 E1           	pop		hl
  84+ 991A C9           	ret
  85+ 991B
# file closed: Tables/text_tables.asm
 724  991B                  INCLUDE "Tables/dictionary.asm"
# file opened: Tables/dictionary.asm
   1+ 991B 58 00        WordDummy					DB  "X",0
   2+ 991D 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ 9921 74 00
   3+ 9923 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ 9927 74 00
   4+ 9929 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ 992D 00
   5+ 992E 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ 9932 00
   6+ 9933 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ 9937 65 00
   7+ 9939 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ 993D 70 65 00
   8+ 9940 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ 9944 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ 9948 6F 00
  10+ 994A 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ 994E 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ 9952 00
  12+ 9953 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ 9957 70 73 00
  13+ 995A 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ 995E 4D 2E 00
  14+ 9961 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ 9965 65 6D 00
  15+ 9968 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ 996C 67 79 00
  16+ 996F 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ 9973 00
  17+ 9974 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ 9978 72 00
  18+ 997A 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ 997E 65 00
  19+ 9980 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ 9984 00
  20+ 9985 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ 9989 61 72 79 00
  21+ 998D 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ 9991 6E 67 00
  22+ 9994 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ 9998 6F 6D 00
  23+ 999B 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ 999F 00
  24+ 99A0 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ 99A4 6C 64 00
  25+ 99A7 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ 99AB 69 6E 67 00
  26+ 99AF 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ 99B3 75 74 65 72
  26+ 99B7 73 00
  27+ 99B9 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ 99BD 72 73 70 61
  27+ 99C1 63 65 00
  28+ 99C4 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ 99C8 63 74 69 63
  28+ 99CC 00
  29+ 99CD 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ 99D1 61 00
  30+ 99D3 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ 99D7 6E 00
  31+ 99D9 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ 99DD 6E 64 65 72
  31+ 99E1 00
  32+ 99E2 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ 99E6 74 69 76 65
  32+ 99EA 00
  33+ 99EB 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ 99EF 00
  34+ 99F0 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ 99F4 69 6C 65 73
  34+ 99F8 00
  35+ 99F9 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ 99FD 6F 61 63 74
  35+ 9A01 69 76 65 73
  35+ 9A05 00
  36+ 9A06 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ 9A0A 65 73 00
  37+ 9A0D 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ 9A11 6F 72 2F 57
  37+ 9A15 69 6E 65 73
  37+ 9A19 00
  38+ 9A1A 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ 9A1E 72 69 65 73
  38+ 9A22 00
  39+ 9A23 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ 9A27 6F 74 69 63
  39+ 9A2B 73 00
  40+ 9A2D 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ 9A31 69 6E 65 72
  40+ 9A35 79 00
  41+ 9A37 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ 9A3B 79 73 00
  42+ 9A3E 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ 9A42 61 72 6D 73
  42+ 9A46 00
  43+ 9A47 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ 9A4B 00
  44+ 9A4C 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ 9A50 72 61 6C 73
  44+ 9A54 00
  45+ 9A55 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ 9A59 00
  46+ 9A5A 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ 9A5E 69 6E 75 6D
  46+ 9A62 00
  47+ 9A63 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ 9A67 53 74 6F 6E
  47+ 9A6B 65 73 00
  48+ 9A6E 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ 9A72 6E 20 49 74
  48+ 9A76 65 6D 73 00
  49+ 9A7A 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ 9A7E 65 73 00
  50+ 9A81 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ 9A85 67 72 61 6D
  50+ 9A89 73 00
  51+ 9A8B 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ 9A8F 73 00
  52+ 9A91 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ 9A95 74 00
  53+ 9A97 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ 9A9B 65 00
  54+ 9A9D 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ 9AA1 74 00
  55+ 9AA3 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ 9AA7 00
  56+ 9AA8 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ 9AAB 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ 9AAF 61 6E 63 65
  57+ 9AB3 00
  58+ 9AB4 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ 9AB8 6F 6D 79 00
  59+ 9ABC 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ 9AC0 72 6E 6D 65
  59+ 9AC4 6E 74 00
  60+ 9AC7 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ 9ACB 4C 65 76 65
  60+ 9ACF 6C 00
  61+ 9AD1 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ 9AD5 6C 61 74 69
  61+ 9AD9 6F 6E 00
  62+ 9ADC 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ 9AE0 69 6F 6E 00
  63+ 9AE4 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ 9AE8 69 6F 6E 00
  64+ 9AEC 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ 9AF0 73 00
  65+ 9AF2 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ 9AF6 75 63 74 69
  65+ 9AFA 76 69 74 79
  65+ 9AFE 00
  66+ 9AFF 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ 9B03 61 67 65 00
  67+ 9B07 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ 9B0B 75 73 00
  68+ 9B0E 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ 9B11 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ 9B15 00
  70+ 9B16 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ 9B1A 00
  71+ 9B1B 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ 9B1F 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ 9B23 6C 79 00
  73+ 9B26 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ 9B2A 00
  74+ 9B2B 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ 9B2F 73 74 72 69
  74+ 9B33 61 6C 00
  75+ 9B36 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ 9B3A 63 75 6C 74
  75+ 9B3E 75 72 61 6C
  75+ 9B42 00
  76+ 9B43 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ 9B47 63 68 79 00
  77+ 9B4B 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ 9B4F 61 6C 00
  78+ 9B52 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ 9B56 69 2D 47 6F
  78+ 9B5A 76 65 72 6E
  78+ 9B5E 6D 65 6E 74
  78+ 9B62 00
  79+ 9B63 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ 9B67 61 74 6F 72
  79+ 9B6B 73 68 69 70
  79+ 9B6F 00
  80+ 9B70 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ 9B74 75 6E 69 73
  80+ 9B78 74 00
  81+ 9B7A 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ 9B7E 65 64 65 72
  81+ 9B82 61 63 79 00
  82+ 9B86 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ 9B8A 63 72 61 63
  82+ 9B8E 79 00
  83+ 9B90 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ 9B94 6F 72 61 74
  83+ 9B98 65 20 53 74
  83+ 9B9C 61 74 65 00
  84+ 9BA0 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ 9BA4 65 00
  85+ 9BA6 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ 9BAA 74 00
  86+ 9BAC 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ 9BB0 73 00
  87+ 9BB2 30 00        Word0						DB  "0",0				   ;86
  88+ 9BB4 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ 9BB8 65 74 00
  89+ 9BBB 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ 9BBF 65 73 00
  90+ 9BC2 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ 9BC6 75 63 74 00
  91+ 9BCA 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ 9BCE 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ 9BD2 65 00
  93+ 9BD4 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ 9BD8 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ 9BDC 00
  95+ 9BDD 74 00        Wordt						DB  "t",0                  ;94
  96+ 9BDF 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ 9BE2 67 00        Wordg						DB  "g",0                  ;96
  98+ 9BE4 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ 9BE8 69 74 69 74
  98+ 9BEC 79 00
  99+ 9BEE 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ 9BF2 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ 9BF6 6B 00
 101+ 9BF8 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ 9BFC 70 00
 102+ 9BFE 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ 9C02 00
 103+ 9C03 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ 9C07 69 6C 65 00
 104+ 9C0B 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ 9C0F 72 64 72 69
 104+ 9C13 76 65 00
 105+ 9C16 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ 9C1A 74 61 72 79
 105+ 9C1E 00
 106+ 9C1F
 107+ 9C1F 1B 99 1D 99  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ 9C23 23 99 29 99
 108+ 9C27 2E 99 33 99  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ 9C2B 39 99 40 99
 109+ 9C2F 44 99 4A 99  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ 9C33 4E 99 53 99
 110+ 9C37 5A 99 61 99  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ 9C3B 68 99 6F 99
 111+ 9C3F 74 99 7A 99  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ 9C43 80 99 85 99
 112+ 9C47 8D 99 94 99  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ 9C4B 9B 99 A0 99
 113+ 9C4F A7 99 AF 99  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ 9C53 B9 99 C4 99
 114+ 9C57 CD 99 D3 99  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ 9C5B D9 99 E2 99
 115+ 9C5F EB 99 F0 99  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ 9C63 F9 99 06 9A
 116+ 9C67 0D 9A 1A 9A  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ 9C6B 23 9A 2D 9A
 117+ 9C6F 37 9A 3E 9A  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ 9C73 47 9A 4C 9A
 118+ 9C77 55 9A 5A 9A  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ 9C7B 63 9A 6E 9A
 119+ 9C7F 7A 9A 81 9A  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ 9C83 8B 9A 91 9A
 120+ 9C87 97 9A 9D 9A  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ 9C8B A3 9A A8 9A
 121+ 9C8F AB 9A B4 9A  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ 9C93 BC 9A C7 9A
 122+ 9C97 D1 9A DC 9A  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ 9C9B E4 9A EC 9A
 123+ 9C9F F2 9A FF 9A  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ 9CA3 07 9B 0E 9B
 124+ 9CA7 11 9B        					DW  WordMCR																	;68
 125+ 9CA9 16 9B 1B 9B  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ 9CAD 1F 9B 26 9B
 126+ 9CB1 2B 9B 36 9B                      DW  WordIndustrial,     WordAgricultural									;73
 127+ 9CB5 43 9B 4B 9B  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ 9CB9 52 9B 63 9B
 128+ 9CBD 70 9B 7A 9B                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ 9CC1 86 9B 90 9B
 129+ 9CC5 A0 9B A6 9B  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ 9CC9 AC 9B B2 9B
 130+ 9CCD B4 9B BB 9B  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ 9CD1 C2 9B CA 9B
 131+ 9CD5 CE 9B D4 9B                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ 9CD9 D8 9B
 132+ 9CDB DD 9B DF 9B  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ 9CDF E2 9B
 133+ 9CE1 E4 9B EE 9B  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ 9CE5 F2 9B F8 9B
 134+ 9CE9 FE 9B 03 9C                      DW  WordShip,           WordMissile       ; 101
 135+ 9CED
 136+ 9CED              ; Phrases
 137+ 9CED 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ 9CF1 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ 9CF4 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ 9CF7 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ 9CFA 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ 9CFD 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ 9D00 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ 9D03 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ 9D06 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ 9D0A 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ 9D0E 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ 9D12 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ 9D16 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ 9D1A 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ 9D1D 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ 9D20 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ 9D23 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ 9D26 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ 9D29 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ 9D2C 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ 9D2F 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ 9D32 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ 9D35 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ 9D38 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ 9D3B 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ 9D3F 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ 9D42 64 65        TextEquipShip               DB  100,101          ;26
 164+ 9D44
 165+ 9D44 00           TextDummy					DB  0
 166+ 9D45
 167+ 9D45 ED 9C F1 9C  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ 9D49 F4 9C
 168+ 9D4B F7 9C FA 9C  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ 9D4F FD 9C
 169+ 9D51 00 9D 03 9D  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ 9D55 06 9D 0A 9D  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ 9D59 0E 9D 12 9D
 171+ 9D5D 16 9D 1A 9D  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ 9D61 1D 9D
 172+ 9D63 20 9D 23 9D  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ 9D67 29 9D 26 9D
 172+ 9D6B 32 9D 2C 9D
 172+ 9D6F 2F 9D 35 9D
 173+ 9D73 38 9D        					DW  TextLightYears		                                            ; 21 23
 174+ 9D75 3B 9D 3F 9D  					DW  Text0LightYears, TextMarketPrices
 175+ 9D79 44 9D        					DW  TextDummy;  25
 176+ 9D7B 00 00 00...  TextBuffer			DS	33
 177+ 9D9C
 178+ 9D9C              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ 9D9C              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ 9D9C
 181+ 9D9C              CapitaliseString:
 182+ 9D9C              ; ">CapitaliseString hl = address"
 183+ 9D9C              .CapLoop:
 184+ 9D9C 23           	inc		hl
 185+ 9D9D 7E           	ld		a,(hl)
 186+ 9D9E FE 00        	cp		0
 187+ 9DA0 C8           	ret		z
 188+ 9DA1 FE 5B        	cp		'Z'+1
 189+ 9DA3 30 F7        	jr		nc,.CapLoop
 190+ 9DA5 FE 41        	cp		'A'
 191+ 9DA7 38 F3        	jr		c,.CapLoop
 192+ 9DA9              .LowerCase:
 193+ 9DA9 C6 20        	add		a,'a'-'A'
 194+ 9DAB 77           	ld		(hl),a
 195+ 9DAC 18 EE        	jr		.CapLoop
 196+ 9DAE
 197+ 9DAE              WordIndexToAddress:
 198+ 9DAE 21 1F 9C     	ld		hl,WordIdx
 199+ 9DB1 ED 31        	add		hl,a
 200+ 9DB3 ED 31        	add		hl,a
 201+ 9DB5 D5           	push	de
 202+ 9DB6 5E           	ld		e,(hl)
 203+ 9DB7 23           	inc		hl
 204+ 9DB8 56           	ld		d,(hl)
 205+ 9DB9 EB           	ex		de,hl
 206+ 9DBA D1           	pop		de
 207+ 9DBB C9           	ret
 208+ 9DBC
 209+ 9DBC
 210+ 9DBC              expandTokenToString:
 211+ 9DBC              ; ">expandTokenToString a = texttoken"
 212+ 9DBC 21 45 9D     	ld		hl,TextTokens
 213+ 9DBF CD F4 98     	call	getTableText
 214+ 9DC2 11 7B 9D     	ld		de,TextBuffer
 215+ 9DC5              .ReadLoop:
 216+ 9DC5 7E           	ld		a,(hl)
 217+ 9DC6 FE 00        	cp		0
 218+ 9DC8 28 1B        	jr		z,.ReadDone
 219+ 9DCA E5           	push	hl
 220+ 9DCB D5           	push	de
 221+ 9DCC 21 1F 9C     	ld		hl,WordIdx
 222+ 9DCF CD F4 98     	call	getTableText
 223+ 9DD2 D1           	pop		de
 224+ 9DD3              .WordExpandLoop:
 225+ 9DD3 7E           	ld		a,(hl)
 226+ 9DD4 FE 00        	cp		0
 227+ 9DD6 28 05        	jr		z,.AddSpace
 228+ 9DD8              ;.GetChar:
 229+ 9DD8 12           	ld		(de),a
 230+ 9DD9 13           	inc		de
 231+ 9DDA 23           	inc		hl
 232+ 9DDB 18 F6        	jr		.WordExpandLoop
 233+ 9DDD              .AddSpace:
 234+ 9DDD 3E 20        	ld		a,' '
 235+ 9DDF 12           	ld		(de),a
 236+ 9DE0 13           	inc		de
 237+ 9DE1 E1           	pop		hl
 238+ 9DE2 23           	inc		hl
 239+ 9DE3 18 E0        	jr		.ReadLoop
 240+ 9DE5              .ReadDone:
 241+ 9DE5 1B           	dec		de
 242+ 9DE6 AF           	xor		a
 243+ 9DE7 12           	ld		(de),a
 244+ 9DE8 C9           	ret
 245+ 9DE9
# file closed: Tables/dictionary.asm
 725  9DE9                  INCLUDE "Tables/name_digrams.asm"
# file opened: Tables/name_digrams.asm
   1+ 9DE9 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 9DED 53 45 49 54
   1+ 9DF1 49 4C 45 54
   1+ 9DF5 53 54 4F 4E
   1+ 9DF9 4C 4F 4E 55
   1+ 9DFD 54 48 4E 4F
   2+ 9E01 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9E04 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9E08 45 5A 41 43
   3+ 9E0C 45 42 49 53
   3+ 9E10 4F 55 53 45
   3+ 9E14 53 41 52 4D
   3+ 9E18 41 49 4E 44
   3+ 9E1C 49 52 45 41
   4+ 9E20 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9E24 54 45 4E 42
   4+ 9E28 45 52 41 4C
   4+ 9E2C 41 56 45 54
   4+ 9E30 49 45 44 4F
   4+ 9E34 52 51 55 41
   4+ 9E38 4E 54 45 49
   4+ 9E3C 53 52 49 4F
   4+ 9E40 4E
   5+ 9E41
   6+ 9E41              ; TODO Moveinto galaxy data module
   7+ 9E41 00 00 00...  name_expanded	DS 32
   8+ 9E61 00           				DB 0
   9+ 9E62
  10+ 9E62
  11+ 9E62
  12+ 9E62              NamingLoop:
  13+ 9E62 3A 49 93     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9E65 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9E67 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9E69 28 12        	jr		z,.SkipPhrase
  17+ 9E6B C6 0C        	add		a,12
  18+ 9E6D CB 27        	sla		a					; phrase = (a+12)*2
  19+ 9E6F 21 E9 9D     	ld		hl,name_digrams
  20+ 9E72 ED 31        	add		hl,a
  21+ 9E74 ED A0        	ldi
  22+ 9E76 7E           	ld		a,(hl)
  23+ 9E77 FE 3F        	cp		'?'
  24+ 9E79 28 02        	jr		z,.SkipPhrase
  25+ 9E7B              .AddExtra:
  26+ 9E7B ED A0        	ldi
  27+ 9E7D              .SkipPhrase:
  28+ 9E7D D5           	push	de
  29+ 9E7E CD 92 96     	call	working_seed
  30+ 9E81 D1           	pop		de
  31+ 9E82 C9           	ret
  32+ 9E83
  33+ 9E83              ;GetDigramGalaxySeed:
  34+ 9E83              ;	call	copy_galaxy_to_working
  35+ 9E83              ;	jr		GetDigramWorkingSeed
  36+ 9E83              ;GetDigramSystemSeed:
  37+ 9E83              ;	call	copy_system_to_working
  38+ 9E83              ;GetDigramWorkingSeed:
  39+ 9E83              ;; ">GetDigram a = digram seed"
  40+ 9E83              ;	ld		de,name_expanded
  41+ 9E83              ;	ld		b,3
  42+ 9E83              ;	ld		a,(WorkingSeeds)
  43+ 9E83              ;	and		$40
  44+ 9E83              ;	jr		z,.SmallSizeName
  45+ 9E83              ;.LargeSizeName:
  46+ 9E83              ;	call	NamingLoop
  47+ 9E83              ;.SmallSizeName:
  48+ 9E83              ;	call	NamingLoop
  49+ 9E83              ;	call	NamingLoop
  50+ 9E83              ;	call	NamingLoop
  51+ 9E83              ;.DoneName:
  52+ 9E83              ;	ex		de,hl
  53+ 9E83              ;	ld		(hl),0
  54+ 9E83              ;	ex		de,hl
  55+ 9E83              ;	ret
  56+ 9E83
  57+ 9E83
  58+ 9E83
  59+ 9E83              ;GetDigramWorkingSeed:
  60+ 9E83              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 9E83              ;	ld		b,5					; working seed
  62+ 9E83              ;	ld		de,name_expanded
  63+ 9E83              ;.ExpansionLoop:
  64+ 9E83              ;	push	bc
  65+ 9E83              ;	ld		hl,WorkingSeeds
  66+ 9E83              ;	ld		a,b
  67+ 9E83              ;	add		hl,a
  68+ 9E83              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 9E83              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 9E83              ;	cp		0					; 0 = skip 2 chars
  71+ 9E83              ;	jr		z,.SkipPhrase
  72+ 9E83              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 9E83              ;	call	TT27
  74+ 9E83              ;.SkipPhrase:
  75+ 9E83              ;	push	de
  76+ 9E83              ;	call	next_working_seed
  77+ 9E83              ;	pop		de
  78+ 9E83              ;	pop		bc
  79+ 9E83              ;	djnz	GetDigramWorkingSeed
  80+ 9E83              ;.DoneName:
  81+ 9E83              ;	ex		de,hl
  82+ 9E83              ;	ld		(hl),0
  83+ 9E83              ;	ex		de,hl
  84+ 9E83              ;	ret
  85+ 9E83              ;
  86+ 9E83              ;ExpandToken:
  87+ 9E83              ;	DE = target
  88+ 9E83              ;	a = token
  89+ 9E83              ;
  90+ 9E83              ;PlanetDigram:
  91+ 9E83              ;	cp		&A0							; >- 160
  92+ 9E83              ;	jr		c,MorePage4
  93+ 9E83              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 9E83              ;	asl		2							; Multiply by 2
  95+ 9E83              ;	ld		hl, name_digrams2
  96+ 9E83              ;	add		hl,a
  97+ 9E83              ;	ld		a,(hl)
  98+ 9E83              ;	call	ProcessTextToken
  99+ 9E83              ;	inc		hl
 100+ 9E83              ;	ld		a,(hl)
 101+ 9E83              ;	cp		'?'
 102+ 9E83              ;	ret		z
 103+ 9E83              ;	call	ProcessTextToken
 104+ 9E83              ;	ret
 105+ 9E83              ;MorePage4:
 106+ 9E83              ;	sub		$A0
 107+ 9E83              ;ExtraTokenCheck:
 108+ 9E83              ;	push	de							; save target address
 109+ 9E83              ;	push	bc
 110+ 9E83              ;	ld		b,a
 111+ 9E83              ;	ld		hl,varV
 112+ 9E83              ;	ld		(VarV),0400
 113+ 9E83              ;	ld		(varV),a
 114+ 9E83              ;	ld
 115+ 9E83              ;
 116+ 9E83              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 9E83              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 9E83              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 9E83              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 9E83              ;0A                      ASL A		      \ *= 2
 121+ 9E83              ;A8                      TAY 		      \ digram index = 0to62
 122+ 9E83              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 9E83              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 9E83              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 9E83              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 9E83              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 9E83              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 9E83              ;
 129+ 9E83              ;	.TT47	\ more page4, subtract #160
 130+ 9E83              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 9E83              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 9E83              ;AA                      TAX 		\ copy of word index
 133+ 9E83              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 9E83              ;85 22                   STA &22		\ V
 135+ 9E83              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 9E83              ;85 23                   STA &23		\ V+1
 137+ 9E83              ;A0 00                   LDY #0
 138+ 9E83              ;8A                      TXA 		\ token = word index
 139+ 9E83              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 9E83              ;	.TT51	\ counters Y letter, X token
 141+ 9E83              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 9E83              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 9E83              ;C8                      INY 		\ letter count
 144+ 9E83              ;D0 F9                   BNE TT51	\ loop Y
 145+ 9E83              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 9E83              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 9E83              ;	.TT49	\ word ended
 148+ 9E83              ;C8                      INY
 149+ 9E83              ;D0 02                   BNE TT59    	\ next word
 150+ 9E83              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 9E83              ;	.TT59	\ next word
 152+ 9E83              ;CA                      DEX 		\ token count
 153+ 9E83              ;D0 ED                   BNE TT51	\ loop X token
 154+ 9E83              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 9E83              ;98                      TYA
 156+ 9E83              ;48                      PHA 		\ store Yindex
 157+ 9E83              ;A5 23                   LDA &23		\ V+1
 158+ 9E83              ;48                      PHA 		\ correct pointer hi
 159+ 9E83              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 9E83              ;49 23                   EOR #&23	\ decode '#'
 161+ 9E83              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 9E83              ;68                      PLA 		\ restore this depth's Vhi
 163+ 9E83              ;85 23                   STA &23		\ V+1
 164+ 9E83              ;68                      PLA
 165+ 9E83              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 9E83              ;C8                      INY 		\ next letter
 167+ 9E83              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 9E83              ;E6 23                   INC &23		\ V+1
 169+ 9E83              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 9E83              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 9E83              ;	.TT48 	\ rts
 172+ 9E83              ;60                      RTS 		\ end of flight token printing TT27
 173+ 9E83              ;
 174+ 9E83              ;
 175+ 9E83              ;
 176+ 9E83              ;
 177+ 9E83              ;
 178+ 9E83              ;
 179+ 9E83              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 9E83              ;;AA                      TAX		\ copy token to count down
 181+ 9E83              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 9E83              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 9E83              ;CA                      DEX
 184+ 9E83              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 9E83              ;CA                      DEX
 186+ 9E83              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 9E83              ;CA                      DEX
 188+ 9E83              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 9E83              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 9E83              ;CA                      DEX
 191+ 9E83              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 9E83              ;CA                      DEX
 193+ 9E83              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 9E83              ;CA                      DEX
 195+ 9E83              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 9E83              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 9E83              ;85 72                   STA &72	 	\ QQ17
 198+ 9E83              ;60                      RTS
 199+ 9E83              ;CA                      DEX 		\ skip Acc ==7
 200+ 9E83              ;CA                      DEX
 201+ 9E83              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 9E83              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 9E83              ;60                      RTS
 204+ 9E83              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 9E83              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 9E83              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 9E83              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 9E83              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 9E83              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 9E83              ;C9 20                   CMP #32		\ < 32 ?
 211+ 9E83              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 9E83              ;		\ Token  < 14 or > 31
 213+ 9E83              ;A6 72                   LDX &72	 	\ QQ17
 214+ 9E83              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 9E83              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 9E83              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 9E83              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 9E83              ;	.TT42	\ Uppercase to lowercase
 219+ 9E83              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 9E83              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 9E83              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 9E83              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 9E83              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 9E83              ;	.TT44	\ print character as is with TT26
 225+ 9E83              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 9E83              ;
 227+ 9E83              ;	.TT41	\ QQ17 bit7 set
 228+ 9E83              ;24 72                   BIT &72		\ QQ17
 229+ 9E83              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 9E83              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 9E83              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 9E83              ;48                      PHA 		\ else store token Acc
 233+ 9E83              ;8A                      TXA 		\ QQ17 copy
 234+ 9E83              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 9E83              ;85 72                   STA &72	 	\ QQ17
 236+ 9E83              ;68                      PLA 		\ restore token
 237+ 9E83              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 9E83              ;
 239+ 9E83              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 9E83              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 9E83              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 9E83              ;
 243+ 9E83              ;	.crlf	\ Acc == 9,  colon on right
 244+ 9E83              ;A9 15                   LDA #21		\ on right
 245+ 9E83              ;85 2C                   STA &2C		\ XC
 246+ 9E83              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 9E83              ;
 248+ 9E83              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 9E83              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 9E83              ;F0 63                   BEQ TT48	\ rts
 251+ 9E83              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 9E83              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 9E83              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 9E83              ;48                      PHA 		\ push token
 255+ 9E83              ;8A                      TXA 		\ QQ17 copy
 256+ 9E83              ;29 BF                   AND #&BF	\ clear bit6
 257+ 9E83              ;85 72                   STA &72	 	\ QQ17
 258+ 9E83              ;68                      PLA 		\ pull token
 259+ 9E83              ;	.TT74	\ TT26, print character.
 260+ 9E83              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 9E83              ;
 262+ 9E83              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 9E83              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 9E83              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 9E83              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 9E83              ;0A                      ASL A		      \ *= 2
 267+ 9E83              ;A8                      TAY 		      \ digram index = 0to62
 268+ 9E83              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 9E83              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 9E83              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 9E83              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 9E83              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 9E83              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 9E83              ;
 275+ 9E83              ;	.TT47	\ more page4, subtract #160
 276+ 9E83              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 9E83              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 9E83              ;AA                      TAX 		\ copy of word index
 279+ 9E83              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 9E83              ;85 22                   STA &22		\ V
 281+ 9E83              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 9E83              ;85 23                   STA &23		\ V+1
 283+ 9E83              ;A0 00                   LDY #0
 284+ 9E83              ;8A                      TXA 		\ token = word index
 285+ 9E83              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 9E83              ;	.TT51	\ counters Y letter, X token
 287+ 9E83              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 9E83              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 9E83              ;C8                      INY 		\ letter count
 290+ 9E83              ;D0 F9                   BNE TT51	\ loop Y
 291+ 9E83              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 9E83              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 9E83              ;	.TT49	\ word ended
 294+ 9E83              ;C8                      INY
 295+ 9E83              ;D0 02                   BNE TT59    	\ next word
 296+ 9E83              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 9E83              ;	.TT59	\ next word
 298+ 9E83              ;CA                      DEX 		\ token count
 299+ 9E83              ;D0 ED                   BNE TT51	\ loop X token
 300+ 9E83              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 9E83              ;98                      TYA
 302+ 9E83              ;48                      PHA 		\ store Yindex
 303+ 9E83              ;A5 23                   LDA &23		\ V+1
 304+ 9E83              ;48                      PHA 		\ correct pointer hi
 305+ 9E83              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 9E83              ;49 23                   EOR #&23	\ decode '#'
 307+ 9E83              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 9E83              ;68                      PLA 		\ restore this depth's Vhi
 309+ 9E83              ;85 23                   STA &23		\ V+1
 310+ 9E83              ;68                      PLA
 311+ 9E83              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 9E83              ;C8                      INY 		\ next letter
 313+ 9E83              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 9E83              ;E6 23                   INC &23		\ V+1
 315+ 9E83              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 9E83              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 9E83              ;	.TT48 	\ rts
 318+ 9E83              ;60                      RTS 		\ end of flight token printing TT27
 319+ 9E83              ;
 320+ 9E83              ;
 321+ 9E83              ;
# file closed: Tables/name_digrams.asm
 726  9E83              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 727  9E83
 728  9E83              ; Include all maths libraries to test assembly
 729  9E83                  INCLUDE "Maths/addhldesigned.asm"
# file opened: Maths/addhldesigned.asm
   1+ 9E83              addhldesigned:
   2+ 9E83 CB 7C                bit     7,h
   3+ 9E85 20 03                jr      nz,.noneghl
   4+ 9E87 CD BC A1             call    negate16hl
   5+ 9E8A              .noneghl:
   6+ 9E8A CB 7A                bit     7,d
   7+ 9E8C 20 03                jr      nz,.nonegde
   8+ 9E8E CD C3 A1             call    negate16de
   9+ 9E91              .nonegde:
  10+ 9E91 19                   add     hl,de                       ; do 2'd c add
  11+ 9E92 AF                   xor     a                           ; assume positive
  12+ 9E93 CB 7C                bit     7,h
  13+ 9E95 C8                   ret     z                           ; if not set then can exit early
  14+ 9E96 CD BC A1             call    negate16hl
  15+ 9E99 3E FF                ld      a,$FF
  16+ 9E9B C9                   ret
  17+ 9E9C
# file closed: Maths/addhldesigned.asm
 730  9E9C                  INCLUDE "Maths/addhlasigned.asm"
# file opened: Maths/addhlasigned.asm
   1+ 9E9C              ; Note its big endian
   2+ 9E9C 2A E0 92     addDEtoCash:            ld      hl,(Cash)
   3+ 9E9F 19                                   add     hl,de
   4+ 9EA0 22 E0 92                             ld      (Cash),hl
   5+ 9EA3 11 00 00                             ld      de,0
   6+ 9EA6 2A E2 92                             ld      hl,(Cash+2)
   7+ 9EA9 ED 5A                                adc     hl,de
   8+ 9EAB 22 E2 92                             ld      (Cash+2),hl
   9+ 9EAE C9                                   ret
  10+ 9EAF
  11+ 9EAF 2A E0 92     subDEfromCash:          ld      hl,(Cash)
  12+ 9EB2 7C                                   ld      a,h
  13+ 9EB3 B5                                   or      l
  14+ 9EB4 2A E2 92                             ld      hl,(Cash+2)
  15+ 9EB7 B4                                   or      h
  16+ 9EB8 B5                                   or      l
  17+ 9EB9 C8                                   ret     z               ; No cash return
  18+ 9EBA B7                                   or      a
  19+ 9EBB 2A E0 92                             ld      hl,(Cash)
  20+ 9EBE ED 52                                sbc     hl,de
  21+ 9EC0 22 E0 92                             ld      (Cash),hl
  22+ 9EC3 11 00 00                             ld      de,0
  23+ 9EC6 2A E2 92                             ld      hl,(Cash+2)
  24+ 9EC9 ED 52                                sbc     hl,de
  25+ 9ECB 22 E2 92                             ld      (Cash+2),hl
  26+ 9ECE                                      JumpOnBitSet h,7,.ZeroCash
  26+ 9ECE CB 7C       >                        bit 	7,h
  26+ 9ED0 C2 D4 9E    >                        jp      nz,.ZeroCash
  27+ 9ED3 C9                                   ret
  28+ 9ED4 21 00 00     .ZeroCash:              ld      hl,0
  29+ 9ED7 22 E0 92                             ld      (Cash),hl
  30+ 9EDA 22 E2 92                             ld      (Cash+2),hl
  31+ 9EDD C9                                   ret
  32+ 9EDE              ; a = value to add
  33+ 9EDE              ; b = offset (equivalent to regX)
  34+ 9EDE              ; returns INWK [x] set to new value
  35+ 9EDE              addINWKbasigned:
  36+ 9EDE 21 0B C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
  37+ 9EE1 4F           		ld      c,a                         ; preserve a
  38+ 9EE2 78           		ld		a,b
  39+ 9EE3 ED 31        		add		hl,a                        ; hl = INWK[x]
  40+ 9EE5 79                   ld      a,c                         ; get back a value
  41+ 9EE6 E6 80                and     $80                         ; get sign bit from a
  42+ 9EE8 47                   ld      b,a                         ; now b = sign bit of a
  43+ 9EE9 79                   ld      a,c                         ; a = original value
  44+ 9EEA E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
  45+ 9EEC              ; hl = unsigned version of INWK0[b]
  46+ 9EEC              ; a = value to add, also in c which will optimise later code
  47+ 9EEC              ; b = sign bit of a ( in old code was varT)
  48+ 9EEC              addhlcsigned:
  49+ 9EEC 5E                   ld      e,(hl)                      ; de = INKK value
  50+ 9EED 23                   inc     hl
  51+ 9EEE 56                   ld      d,(hl)
  52+ 9EEF 23                   inc     hl                          ; now pointing a sign
  53+ 9EF0 7E                   ld      a,(hl)                      ; a = sign bit
  54+ 9EF1 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
  55+ 9EF2 A8                   xor     b                           ; a = resultant sign
  56+ 9EF3 CB 7F                bit     7,a                         ; is it negative?
  57+ 9EF5 28 28                jr      z,.postivecalc
  58+ 9EF7              .negativecalc:
  59+ 9EF7 7C                   ld      a,h
  60+ 9EF8 E6 7F                and     SignMask8Bit
  61+ 9EFA 67                   ld      h,a                         ; strip high bit
  62+ 9EFB DD 68                ld      ixl,b                       ; save sign bit from b into d
  63+ 9EFD 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
  64+ 9EFF ED 42                sbc     hl,bc
  65+ 9F01 DD 45                ld      b,ixl                       ; get sign back
  66+ 9F03 EB                   ex      de,hl                       ; de = value hl = pointer to sign
  67+ 9F04 7E                   ld      a,(hl)                      ;
  68+ 9F05 E6 7F                and     SignMask8Bit
  69+ 9F07 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
  70+ 9F09 F6 80                or      $80                         ; set bit 0
  71+ 9F0B A8                   xor     b                           ; flip bit on sign (var T)
  72+ 9F0C 77                   ld      (hl),a
  73+ 9F0D 2B                   dec     hl
  74+ 9F0E 72                   ld      (hl),d
  75+ 9F0F 2B                   dec     hl
  76+ 9F10 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
  77+ 9F11 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
  78+ 9F12 D8                   ret     c                           ; if carry was set then we can exit now
  79+ 9F13              .nocarry:
  80+ 9F13 CD BC A1             call    negate16hl                  ; get hl back to positive, a is still inkw+2
  81+ 9F16 B0                   or      b                           ; b is still varT
  82+ 9F17 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
  83+ 9F18 73                   ld      (hl),e
  84+ 9F19 23                   inc     hl
  85+ 9F1A 72                   ld      (hl),d
  86+ 9F1B 23                   inc     hl
  87+ 9F1C 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
  88+ 9F1D EB                   ex      de,hl                       ; hl = value de = pointer to sign
  89+ 9F1E C9                   ret
  90+ 9F1F              .postivecalc:
  91+ 9F1F DD 68                ld      ixl,b
  92+ 9F21 06 00                ld      b,0
  93+ 9F23 19                   add     hl,de
  94+ 9F24 EB                   ex      de,hl
  95+ 9F25 DD B5                or      ixl                         ; we don;t need to recover b here
  96+ 9F27 77                   ld      (hl),a                      ; push sign into INWK[x]
  97+ 9F28 2B                   dec     hl
  98+ 9F29 72                   ld      (hl),d
  99+ 9F2A 2B                   dec     hl
 100+ 9F2B 73                   ld      (hl),e
 101+ 9F2C C9                   ret
 102+ 9F2D
 103+ 9F2D              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 104+ 9F2D              ;MVT1
 105+ 9F2D              ;    S = bits 6 to 0 of A
 106+ 9F2D              ;    A = sign bit => T
 107+ 9F2D              ;    xor sign bit with ink[x] Sign
 108+ 9F2D              ;    if negative thn its not an add
 109+ 9F2D              ;
 110+ 9F2D              ;        and h, 7F
 111+ 9F2D              ;        b = 0
 112+ 9F2D              ;        c = varS
 113+ 9F2D              ;        subtract INW[X]hilo, bc
 114+ 9F2D              ;        retain carry
 115+ 9F2D              ;        get INKW[x]Sign
 116+ 9F2D              ;        and 7F
 117+ 9F2D              ;        subtract carry (so will go negtive if negative)
 118+ 9F2D              ;        xor bit 7 of h with T to flip bit
 119+ 9F2D              ;        write to INKW[x]Sign
 120+ 9F2D              ;
 121+ 9F2D              ;    else
 122+ 9F2D              ;MV10.
 123+ 9F2D              ;        add INWK[x]hi,lo, varS
 124+ 9F2D              ;        or      sign bit
 125+ 9F2D
 126+ 9F2D
# file closed: Maths/addhlasigned.asm
 731  9F2D                  INCLUDE "Maths/multiply.asm"
# file opened: Maths/multiply.asm
   1+ 9F2D
   2+ 9F2D              madXAequQmulAaddRS:                     ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
   3+ 9F2D DD 67            ld      ixh,a
   4+ 9F2F E6 7F        	and		$7F
   5+ 9F31 5F           	ld      e,a
   6+ 9F32 3A 31 92         ld      a,(varQ)
   7+ 9F35 DD 6F        	ld		ixl,a
   8+ 9F37 E6 7F        	and		$7F
   9+ 9F39 57               ld      d,a
  10+ 9F3A              madDEequDmulA
  11+ 9F3A ED 30            mul                                 ;de = d * e
  12+ 9F3C DD 7C        	ld		a,ixh
  13+ 9F3E DD AD        	xor		ixl
  14+ 9F40 E6 80        	and		$80
  15+ 9F42 B2           	or		d
  16+ 9F43 57           	ld		d,a
  17+ 9F44              madDEaddRS:
  18+ 9F44 2A 32 92     	ld		hl,(varR)
  19+ 9F47                  ;ld      a,(varR)
  20+ 9F47                  ;ld      l,a
  21+ 9F47                  ;ld      a,(varS)
  22+ 9F47                  ;ld      h,a
  23+ 9F47 CD 5E CB     	call	ADDHLDESignedv3
  24+ 9F4A              ;
  25+ 9F4A              ;   add     hl,de                       ; hl = R.S + DE
  26+ 9F4A EB               ex      de,hl                       ; de = R.S + DE
  27+ 9F4B                  ClearCarryFlag
  27+ 9F4B B7          >				or a
  28+ 9F4C DD 6B            ld      ixl,e
  29+ 9F4E 7A               ld      a,d
  30+ 9F4F C9               ret
  31+ 9F50
  32+ 9F50              ; multiplication of two 16-bit numbers into a 16-bit product
  33+ 9F50              ; enter : de = 16-bit multiplicand
  34+ 9F50              ;         hl = 16-bit multiplicand
  35+ 9F50              ; exit  : hl = 16-bit product
  36+ 9F50              ;         carry reset
  37+ 9F50              ;
  38+ 9F50              ; uses  : af, bc, de, hl
  39+ 9F50 C5           mulDEbyHL:              push    bc
  40+ 9F51 7A                                   ld a,d                      ; a = xh
  41+ 9F52 54                                   ld d,h                      ; d = yh
  42+ 9F53 67                                   ld h,a                      ; h = xh
  43+ 9F54 4B                                   ld c,e                      ; c = xl
  44+ 9F55 45                                   ld b,l                      ; b = yl
  45+ 9F56 ED 30                                mul                         ; yh * yl
  46+ 9F58 EB                                   ex de,hl
  47+ 9F59 ED 30                                mul                         ; xh * yl
  48+ 9F5B 19                                   add hl,de                   ; add cross products
  49+ 9F5C 59                                   ld e,c
  50+ 9F5D 50                                   ld d,b
  51+ 9F5E ED 30                                mul                         ; yl * xl
  52+ 9F60 7D                                   ld a,l                      ; cross products lsb
  53+ 9F61 82                                   add a,d                     ; add to msb final
  54+ 9F62 67                                   ld h,a
  55+ 9F63 6B                                   ld l,e                      ; hl = final
  56+ 9F64                                      ; 83 cycles, 19 bytes
  57+ 9F64 AF                                   xor a                       ; reset carry
  58+ 9F65 C1                                   pop     bc
  59+ 9F66 C9                                   ret
  60+ 9F67              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
  61+ 9F67              ; enter : de = 16-bit multiplicand
  62+ 9F67              ;         hl = 16-bit multiplicand
  63+ 9F67              ; exit  : hl = 16-bit product
  64+ 9F67              ;         carry reset
  65+ 9F67              ;
  66+ 9F67              ; uses  : af, bc, de, hl
  67+ 9F67 00           mulDEbyHLSignByte       DB      0
  68+ 9F68 AF           mulDEbyHLSgnTo2c:       xor     a
  69+ 9F69 32 67 9F                             ld      (mulDEbyHLSignByte),a
  70+ 9F6C 7A           .SignDE:                ld      a,d
  71+ 9F6D ED 27 80                             test    $80
  72+ 9F70 28 08                                jr      z,.SignHL
  73+ 9F72 E6 7F        .NegativeDE:            and     $7F
  74+ 9F74 57                                   ld      d,a
  75+ 9F75 3E 80                                ld      a,$80
  76+ 9F77 32 67 9F                             ld      (mulDEbyHLSignByte),a
  77+ 9F7A 7C           .SignHL:                ld      a,h
  78+ 9F7B ED 27 80                             test    $80
  79+ 9F7E 28 0B                                jr      z,.AbsoluteMultiply
  80+ 9F80 E6 7F        .NegativeHL:            and     $7F
  81+ 9F82 67                                   ld      h,a
  82+ 9F83 3A 67 9F                             ld      a,(mulDEbyHLSignByte)
  83+ 9F86 EE 80                                xor     $80
  84+ 9F88 32 67 9F                             ld      (mulDEbyHLSignByte),a
  85+ 9F8B CD 50 9F     .AbsoluteMultiply:      call    mulDEbyHL
  86+ 9F8E 3A 67 9F     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
  87+ 9F91 ED 27 80                             test    $80
  88+ 9F94 C8                                   ret     z
  89+ 9F95 AF           .Negateghl: 				xor 	a
  90+ 9F96 95                                   sub 	l
  91+ 9F97 6F                                   ld 		l,a
  92+ 9F98 9F                                   sbc 	a,a
  93+ 9F99 94                                   sub 	h
  94+ 9F9A 67                                   ld 		h,a
  95+ 9F9B C9                                   ret
  96+ 9F9C
  97+ 9F9C AF           mulDESgnbyHLUnsgnTo2c:  xor     a
  98+ 9F9D 32 67 9F                             ld      (mulDEbyHLSignByte),a
  99+ 9FA0 7A           .SignDE:                ld      a,d
 100+ 9FA1 ED 27 80                             test    $80
 101+ 9FA4 28 08                                jr      z,.AbsoluteMultiply
 102+ 9FA6 E6 7F        .NegativeDE:            and     $7F
 103+ 9FA8 57                                   ld      d,a
 104+ 9FA9 3E 80                                ld      a,$80
 105+ 9FAB 32 67 9F                             ld      (mulDEbyHLSignByte),a
 106+ 9FAE CD 50 9F     .AbsoluteMultiply:      call    mulDEbyHL
 107+ 9FB1 3A 67 9F     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 108+ 9FB4 ED 27 80                             test    $80
 109+ 9FB7 C8                                   ret     z
 110+ 9FB8 AF           .Negateghl:             xor 	a
 111+ 9FB9 95                                   sub 	l
 112+ 9FBA 6F                                   ld 		l,a
 113+ 9FBB 9F                                   sbc 	a,a
 114+ 9FBC 94                                   sub 	h
 115+ 9FBD 67                                   ld 		h,a
 116+ 9FBE C9                                   ret
 117+ 9FBF
 118+ 9FBF
# file closed: Maths/multiply.asm
 732  9FBF                  INCLUDE "Maths/asm_square.asm"
# file opened: Maths/asm_square.asm
   1+ 9FBF              ; "ASM_SQUA : TESTGOOD"
   2+ 9FBF              ; "AP = A^2 A = low,P = hi"
   3+ 9FBF
   4+ 9FBF              inline_squde: MACRO
   5+ 9FBF ~            			ld	e,a
   6+ 9FBF ~            			ld  d,a
   7+ 9FBF ~            			mul
   8+ 9FBF              			ENDM
   9+ 9FBF
  10+ 9FBF              inline_squa: MACRO
  11+ 9FBF ~            			ld	e,a
  12+ 9FBF ~            			ld  d,a
  13+ 9FBF ~            			mul
  14+ 9FBF ~            			ld	a,e
  15+ 9FBF              			ENDM
  16+ 9FBF
  17+ 9FBF
  18+ 9FBF              asm_squa:
  19+ 9FBF E6 7F        	and SignMask8Bit
  20+ 9FC1              ; "ASM SQUA2 : TESTGOOD"
  21+ 9FC1              ; "AP = A^2 A = low,P = hi singed"
  22+ 9FC1              asm_squa2:
  23+ 9FC1 5F           	ld e, a
  24+ 9FC2 57           	ld d,a
  25+ 9FC3 ED 30        	mul
  26+ 9FC5 ED 53 D3 91  	ld (varP),de
  27+ 9FC9 7B           	ld a,e
  28+ 9FCA C9           	ret
# file closed: Maths/asm_square.asm
 733  9FCB                  INCLUDE "Maths/asm_sqrt.asm"
# file opened: Maths/asm_sqrt.asm
   1+ 9FCB              ; "ASM SQRT : TESTGOOD"
   2+ 9FCB              ; "16-bit integer square root"
   3+ 9FCB              ; "call with de = number to square root"
   4+ 9FCB              ; "returns   hl = square root"
   5+ 9FCB              ; "corrupts  bc, de"
   6+ 9FCB              asm_sqrt:
   7+ 9FCB 01 00 80     	ld bc,$8000
   8+ 9FCE 61           	ld h,c
   9+ 9FCF 69           	ld l,c
  10+ 9FD0              .sqrloop:
  11+ 9FD0 CB 38        	srl b
  12+ 9FD2 CB 19        	rr c
  13+ 9FD4 09           	add hl,bc
  14+ 9FD5 EB           	ex de,hl
  15+ 9FD6 ED 52        	sbc hl,de
  16+ 9FD8 38 04        	jr c,.sqrbit
  17+ 9FDA EB           	ex de,hl
  18+ 9FDB 09           	add hl,bc
  19+ 9FDC 18 05        	jr .sqrfi
  20+ 9FDE              .sqrbit:
  21+ 9FDE 19           	add hl,de
  22+ 9FDF EB           	ex de,hl
  23+ 9FE0 B7           	or a
  24+ 9FE1 ED 42        	sbc hl,bc
  25+ 9FE3              .sqrfi:
  26+ 9FE3 CB 3C        	srl h
  27+ 9FE5 CB 1D        	rr l
  28+ 9FE7 CB 38        	srl b
  29+ 9FE9 CB 19        	rr c
  30+ 9FEB 30 E3        	jr nc,.sqrloop
  31+ 9FED C9           	ret
  32+ 9FEE
  33+ 9FEE
  34+ 9FEE              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 9FEE 3A 31 92     	ld		a,(varQ)
  36+ 9FF1 5F           	ld		e,a
  37+ 9FF2 3A 32 92     	ld		a,(varR)
  38+ 9FF5 57           	ld		d,a
  39+ 9FF6 CD CB 9F     	call	asm_sqrt
  40+ 9FF9 7D               ld      a,l
  41+ 9FFA 32 31 92     	ld		(varQ),a
  42+ 9FFD C9           	ret
  43+ 9FFE
# file closed: Maths/asm_sqrt.asm
 734  9FFE                  INCLUDE "Maths/asm_divide.asm"
# file opened: Maths/asm_divide.asm
   1+ 9FFE              ; Divide 8-bit values
   2+ 9FFE              ; In: Divide E by divider C
   3+ 9FFE              ; Out: A = result, B = rest
   4+ 9FFE              ;
   5+ 9FFE              ;;;Div8:
   6+ 9FFE              ;;;    xor a
   7+ 9FFE              ;;;    ld b,8
   8+ 9FFE              ;;;Div8_Loop:
   9+ 9FFE              ;;;    rl e
  10+ 9FFE              ;;;    rla
  11+ 9FFE              ;;;    sub c
  12+ 9FFE              ;;;    jr nc,Div8_NoAdd
  13+ 9FFE              ;;;    add a,c
  14+ 9FFE              ;;;Div8_NoAdd:
  15+ 9FFE              ;;;    djnz Div8_Loop
  16+ 9FFE              ;;;    ld b,a
  17+ 9FFE              ;;;    ld a,e
  18+ 9FFE              ;;;    rla
  19+ 9FFE              ;;;    cpl
  20+ 9FFE              ;;;    ret
  21+ 9FFE
  22+ 9FFE              ;divdide by 16 using undocumented instrunctions
  23+ 9FFE              ;Input: BC = Dividend, DE = Divisor, HL = 0
  24+ 9FFE              ;Output: BC = Quotient, HL = Remainder
  25+ 9FFE              ; Our use
  26+ 9FFE              ; BC = A0
  27+ 9FFE              ; DE = 0C
  28+ 9FFE              ; so BC = a * 256 / C
  29+ 9FFE              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
  29+ 9FFE B9          >                        cp     c
  29+ 9FFF D2 2A A0    >                        jp		nc,DEV16ATooLarge
  30+ A002 47                                   ld      b,a
  31+ A003 59                                   ld      e,c
  32+ A004 0E 00                                ld      c,0
  33+ A006 16 00                                ld      d,0
  34+ A008 C3 15 A0                             jp      DIV16UNDOC
  35+ A00B 47           DIV16Amul256dQUNDOC:    ld      b,a
  36+ A00C 0E 00                                ld      c,0
  37+ A00E 21 31 92                             ld      hl,varQ
  38+ A011 7E                                   ld      a,(hl)
  39+ A012 16 00                                ld      d,0
  40+ A014 5F                                   ld      e,a
  41+ A015              DIV16BCDivDEUNDOC:
  42+ A015 21 00 00     DIV16UNDOC:             ld      hl,0
  43+ A018 78                                   ld      a,b
  44+ A019 06 10                                ld      b,16
  45+ A01B CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
  46+ A01D 17                                   rla			; ...
  47+ A01E ED 6A                                adc	hl,hl		; ...
  48+ A020 ED 52                                sbc	hl,de		; ...
  49+ A022 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
  50+ A024 19                                   add	hl,de		; ...
  51+ A025 0D                                   dec	c		; ...
  52+ A026 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
  53+ A028 47                                   ld   b,a
  54+ A029 C9                                   ret
  55+ A02A 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
  56+ A02D C9                                   ret
  57+ A02E
  58+ A02E              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
  59+ A02E 06 08        asm_div8:               ld b,8
  60+ A030 AF                                   xor a
  61+ A031 CB 21        div8_loop:	            sla c
  62+ A033 17                                   rla
  63+ A034 BA                                   cp d
  64+ A035 38 02                                jr c,div8_skip
  64+ A037
  65+ A037 0C                                   inc c
  66+ A038 92                                   sub d
  67+ A039 10 F6        div8_skip:	            djnz div8_loop
  68+ A03B C9                                   ret
  69+ A03C              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
  70+ A03C 06 10        asm_div16:              ld b,16
  71+ A03E AF                                   xor a
  72+ A03F CB 25        div16_loop:	            sla l
  73+ A041 CB 14                                rl	h
  74+ A043              ;    add hl,hl
  75+ A043 17                                   rla
  76+ A044 B9                                   cp c
  77+ A045 38 02                                jr c,div16_skip
  78+ A047 2C                                   inc l
  79+ A048 91                                   sub c
  80+ A049 10 F4        div16_skip:		        djnz div16_loop
  81+ A04B C9                                   ret
  82+ A04C              ;
  83+ A04C              ; Divide 16-bit values (with 16-bit result)
  84+ A04C              ; In: Divide BC by divider DE
  85+ A04C              ; Out: BC = result, HL = rest
  86+ A04C              ;
  87+ A04C              HLDivC_Iteration: 	MACRO
  88+ A04C ~            					add	hl,hl		; unroll 16 times
  89+ A04C ~            					rla				; ...
  90+ A04C ~            					cp	c			; ...
  91+ A04C ~            					jr	1F
  92+ A04C ~            					sub	c			; ...
  93+ A04C ~            1:
  94+ A04C ~            					inc	l			; ...
  95+ A04C              					ENDM
  96+ A04C
  97+ A04C
  98+ A04C
  99+ A04C              ; ">div1616: BC = BC / DE. HL = remainder"
 100+ A04C 21 00 00     Div1616:            ld hl,0
 101+ A04F 78                               ld a,b
 102+ A050 06 08                            ld b,8
 103+ A052 17           .Div16_Loop1:       rla
 104+ A053 ED 6A                            adc hl,hl
 105+ A055 ED 52                            sbc hl,de
 106+ A057 30 01                            jr nc,.Div16_NoAdd1
 107+ A059 19                               add hl,de
 108+ A05A 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 109+ A05C 17                               rla
 110+ A05D 2F                               cpl
 111+ A05E 47                               ld b,a
 112+ A05F 79                               ld a,c
 113+ A060 48                               ld c,b
 114+ A061 06 08                            ld b,8
 115+ A063 17           .Div16_Loop2:       rla
 116+ A064 ED 6A                            adc hl,hl
 117+ A066 ED 52                            sbc hl,de
 118+ A068 30 01                            jr nc,.Div16_NoAdd2
 119+ A06A 19                               add hl,de
 120+ A06B 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 121+ A06D 17                               rla
 122+ A06E 2F                               cpl
 123+ A06F 41                               ld b,c
 124+ A070 4F                               ld c,a
 125+ A071 C9                               ret
 126+ A072
 127+ A072
 128+ A072
 129+ A072              BCDIVDE_Iteration: MACRO
 130+ A072 ~            				   rla
 131+ A072 ~            				   adc	hl,hl
 132+ A072 ~            				   add	hl,de
 133+ A072 ~            				   jr	c,1F
 134+ A072 ~            				   sbc	hl,de
 135+ A072 ~            1:
 136+ A072              				   ENDM
 137+ A072
 138+ A072
 139+ A072              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 140+ A072              ;BC/DE ==> BC, remainder in HL
 141+ A072              ;NOTE: BC/0 returns 0 as the quotient.
 142+ A072              ;min: 738cc
 143+ A072              ;max: 898cc
 144+ A072              ;avg: 818cc
 145+ A072              ;144 bytes
 146+ A072 AF           BC_Div_DE:              xor a
 147+ A073 67                                   ld h,a
 148+ A074 6F                                   ld l,a
 149+ A075 93                                   sub e
 150+ A076 5F                                   ld e,a
 151+ A077 9F                                   sbc a,a
 152+ A078 92                                   sub d
 153+ A079 57                                   ld d,a
 154+ A07A 78                                   ld a,b
 155+ A07B                                      BCDIVDE_Iteration
 155+ A07B 17          >				   rla
 155+ A07C ED 6A       >				   adc	hl,hl
 155+ A07E 19          >				   add	hl,de
 155+ A07F 38 02       >				   jr	c,1F
 155+ A081 ED 52       >				   sbc	hl,de
 155+ A083             >1:
 156+ A083                                      BCDIVDE_Iteration
 156+ A083 17          >				   rla
 156+ A084 ED 6A       >				   adc	hl,hl
 156+ A086 19          >				   add	hl,de
 156+ A087 38 02       >				   jr	c,1F
 156+ A089 ED 52       >				   sbc	hl,de
 156+ A08B             >1:
 157+ A08B                                      BCDIVDE_Iteration
 157+ A08B 17          >				   rla
 157+ A08C ED 6A       >				   adc	hl,hl
 157+ A08E 19          >				   add	hl,de
 157+ A08F 38 02       >				   jr	c,1F
 157+ A091 ED 52       >				   sbc	hl,de
 157+ A093             >1:
 158+ A093                                      BCDIVDE_Iteration
 158+ A093 17          >				   rla
 158+ A094 ED 6A       >				   adc	hl,hl
 158+ A096 19          >				   add	hl,de
 158+ A097 38 02       >				   jr	c,1F
 158+ A099 ED 52       >				   sbc	hl,de
 158+ A09B             >1:
 159+ A09B                                      BCDIVDE_Iteration
 159+ A09B 17          >				   rla
 159+ A09C ED 6A       >				   adc	hl,hl
 159+ A09E 19          >				   add	hl,de
 159+ A09F 38 02       >				   jr	c,1F
 159+ A0A1 ED 52       >				   sbc	hl,de
 159+ A0A3             >1:
 160+ A0A3                                      BCDIVDE_Iteration
 160+ A0A3 17          >				   rla
 160+ A0A4 ED 6A       >				   adc	hl,hl
 160+ A0A6 19          >				   add	hl,de
 160+ A0A7 38 02       >				   jr	c,1F
 160+ A0A9 ED 52       >				   sbc	hl,de
 160+ A0AB             >1:
 161+ A0AB                                      BCDIVDE_Iteration
 161+ A0AB 17          >				   rla
 161+ A0AC ED 6A       >				   adc	hl,hl
 161+ A0AE 19          >				   add	hl,de
 161+ A0AF 38 02       >				   jr	c,1F
 161+ A0B1 ED 52       >				   sbc	hl,de
 161+ A0B3             >1:
 162+ A0B3                                      BCDIVDE_Iteration
 162+ A0B3 17          >				   rla
 162+ A0B4 ED 6A       >				   adc	hl,hl
 162+ A0B6 19          >				   add	hl,de
 162+ A0B7 38 02       >				   jr	c,1F
 162+ A0B9 ED 52       >				   sbc	hl,de
 162+ A0BB             >1:
 163+ A0BB 17                                   rla
 164+ A0BC 47                                   ld b,a
 165+ A0BD
 166+ A0BD 79                                   ld a,c
 167+ A0BE                                      BCDIVDE_Iteration
 167+ A0BE 17          >				   rla
 167+ A0BF ED 6A       >				   adc	hl,hl
 167+ A0C1 19          >				   add	hl,de
 167+ A0C2 38 02       >				   jr	c,1F
 167+ A0C4 ED 52       >				   sbc	hl,de
 167+ A0C6             >1:
 168+ A0C6                                      BCDIVDE_Iteration
 168+ A0C6 17          >				   rla
 168+ A0C7 ED 6A       >				   adc	hl,hl
 168+ A0C9 19          >				   add	hl,de
 168+ A0CA 38 02       >				   jr	c,1F
 168+ A0CC ED 52       >				   sbc	hl,de
 168+ A0CE             >1:
 169+ A0CE                                      BCDIVDE_Iteration
 169+ A0CE 17          >				   rla
 169+ A0CF ED 6A       >				   adc	hl,hl
 169+ A0D1 19          >				   add	hl,de
 169+ A0D2 38 02       >				   jr	c,1F
 169+ A0D4 ED 52       >				   sbc	hl,de
 169+ A0D6             >1:
 170+ A0D6                                      BCDIVDE_Iteration
 170+ A0D6 17          >				   rla
 170+ A0D7 ED 6A       >				   adc	hl,hl
 170+ A0D9 19          >				   add	hl,de
 170+ A0DA 38 02       >				   jr	c,1F
 170+ A0DC ED 52       >				   sbc	hl,de
 170+ A0DE             >1:
 171+ A0DE                                      BCDIVDE_Iteration
 171+ A0DE 17          >				   rla
 171+ A0DF ED 6A       >				   adc	hl,hl
 171+ A0E1 19          >				   add	hl,de
 171+ A0E2 38 02       >				   jr	c,1F
 171+ A0E4 ED 52       >				   sbc	hl,de
 171+ A0E6             >1:
 172+ A0E6                                      BCDIVDE_Iteration
 172+ A0E6 17          >				   rla
 172+ A0E7 ED 6A       >				   adc	hl,hl
 172+ A0E9 19          >				   add	hl,de
 172+ A0EA 38 02       >				   jr	c,1F
 172+ A0EC ED 52       >				   sbc	hl,de
 172+ A0EE             >1:
 173+ A0EE                                      BCDIVDE_Iteration
 173+ A0EE 17          >				   rla
 173+ A0EF ED 6A       >				   adc	hl,hl
 173+ A0F1 19          >				   add	hl,de
 173+ A0F2 38 02       >				   jr	c,1F
 173+ A0F4 ED 52       >				   sbc	hl,de
 173+ A0F6             >1:
 174+ A0F6                                      BCDIVDE_Iteration
 174+ A0F6 17          >				   rla
 174+ A0F7 ED 6A       >				   adc	hl,hl
 174+ A0F9 19          >				   add	hl,de
 174+ A0FA 38 02       >				   jr	c,1F
 174+ A0FC ED 52       >				   sbc	hl,de
 174+ A0FE             >1:
 175+ A0FE 17                                   rla
 176+ A0FF 4F                                   ld c,a
 177+ A100 C9                                   ret
 178+ A101
 179+ A101              ;Inputs:
 180+ A101              ;     DE,BC are 8.8 Fixed Point numbers
 181+ A101              ;Outputs:
 182+ A101              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 183+ A101              ;if DE is 0 : 122cc or 136cc if BC is negative
 184+ A101              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 185+ A101              ;Otherwise:
 186+ A101              ;min: 1107cc
 187+ A101              ;max: 1319cc
 188+ A101              ;avg: 1201cc
 189+ A101 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 190+ A102 AA                                   xor d
 191+ A103 F5                                   push af   ;sign bit is the result sign bit
 192+ A104              ; Now make sure the inputs are positive
 193+ A104 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 194+ A105 F2 0E A1                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 195+ A108 AF                                   xor a
 196+ A109 91                                   sub c
 197+ A10A 4F                                   ld c,a
 198+ A10B 9F                                   sbc a,a
 199+ A10C 90                                   sub b
 200+ A10D 47                                   ld b,a
 201+ A10E 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 202+ A10F B2                                   or d
 203+ A110 FA 19 A1                             jp m,BC_Div_DE_88_lbl2
 204+ A113 AF                                   xor a
 205+ A114 93                                   sub e
 206+ A115 5F                                   ld e,a
 207+ A116 9F                                   sbc a,a
 208+ A117 92                                   sub d
 209+ A118 57                                   ld d,a
 210+ A119 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 211+ A11A 28 1D                                jr z,div_fixed88_overflow
 212+ A11C 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 213+ A11E 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 214+ A11F 83                                   add a,e
 215+ A120 7A                                   ld a,d
 216+ A121 8C                                   adc a,h
 217+ A122 38 15                                jr c,div_fixed88_overflow
 218+ A124 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 219+ A125 79                                   ld a,c
 220+ A126 CD 41 A1                             call div_fixed88_sub
 221+ A129 4F                                   ld c,a
 222+ A12A 78                                   ld a,b      ;A is now 0
 223+ A12B CD 41 A1                             call div_fixed88_sub
 224+ A12E 51                                   ld d,c
 225+ A12F 5F                                   ld e,a
 226+ A130 F1                                   pop af
 227+ A131 F0                                   ret p
 228+ A132 AF                                   xor a
 229+ A133 93                                   sub e
 230+ A134 5F                                   ld e,a
 231+ A135 9F                                   sbc a,a
 232+ A136 92                                   sub d
 233+ A137 57                                   ld d,a
 234+ A138 C9                                   ret
 235+ A139
 236+ A139 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 237+ A13C F1                                   pop af
 238+ A13D F0                                   ret p
 239+ A13E 13                                   inc de
 240+ A13F 1C                                   inc e
 241+ A140 C9                                   ret
 242+ A141
 243+ A141              ;min: 456cc
 244+ A141              ;max: 536cc
 245+ A141              ;avg: 496cc
 246+ A141 06 08        div_fixed88_sub:        ld b,8
 247+ A143 17           BC_Div_DE_88_lbl3:      rla
 248+ A144 ED 6A                                adc hl,hl
 249+ A146 19                                   add hl,de
 250+ A147 38 02                                jr c,$+4
 251+ A149 ED 52                                sbc hl,de
 252+ A14B 10 F6                                djnz BC_Div_DE_88_lbl3
 253+ A14D 8F                                   adc a,a
 254+ A14E C9                                   ret
 255+ A14F
# file closed: Maths/asm_divide.asm
 735  A14F                  INCLUDE "Maths/asm_unitvector.asm"
# file opened: Maths/asm_unitvector.asm
   1+ A14F              asm_tis2:
   2+ A14F              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ A14F              ; ">DOES NOT DO SIGNED YET"
   4+ A14F F5           	push af
   5+ A150 E6 7F            and SignMask8Bit
   6+ A152 57           	ld d,a				;; d = A
   7+ A153 3A 31 92     	ld a,(varQ)
   8+ A156 5F           	ld e,a
   9+ A157 7A           	ld a,d
  10+ A158 BB           	cp e
  11+ A159 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ A15B 1E 60        	ld e, 96
  13+ A15D ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ A15F EB           	ex de,hl
  15+ A160 3A 31 92     	ld a,(varQ)
  16+ A163 4F           	ld c,a
  17+ A164 CD 3C A0     	call asm_div16
  18+ A167 F1           	pop af
  19+ A168 E6 80        	and $80
  20+ A16A B5           	or l
  21+ A16B C9           	ret
  22+ A16C              .tis2_set96:
  23+ A16C F1           	pop af
  24+ A16D E6 80        	and $80
  25+ A16F F6 96        	or $96
  26+ A171 C9           	ret
  27+ A172
  28+ A172
  29+ A172              asm_unit_vector:
  30+ A172              squareregfx:
  31+ A172 3A 75 C0     	ld a,(UBnkXScaled)
  32+ A175 57           	ld d,a
  33+ A176 5F           	ld e,a
  34+ A177 ED 30        	mul
  35+ A179 EB           	ex de,hl
  36+ A17A              squareregfy:
  37+ A17A 3A 77 C0     	ld a, (UBnkYScaled)
  38+ A17D 57           	ld d,a
  39+ A17E 5F           	ld e,a
  40+ A17F ED 30        	mul
  41+ A181 19           	add hl,de
  42+ A182              squareregfz:
  43+ A182 3A 79 C0     	ld a, (UBnkZScaled)
  44+ A185 57           	ld d,a
  45+ A186 5F           	ld e,a
  46+ A187 ED 30        	mul
  47+ A189 19           	add hl,de
  48+ A18A EB           	ex de,hl			; de de to number to root
  49+ A18B              hlequsquareroot:
  50+ A18B CD CB 9F     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ A18E E5           	push hl				; save it for work 3 copies
  52+ A18F E5           	push hl				; save it for work
  53+ A190 E5           	push hl				; save it for work
  54+ A191              normfx:
  55+ A191 3A 75 C0     	ld a,(UBnkXScaled)
  56+ A194 E1           	pop hl				; get copy #1
  57+ A195 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ A196 4F           	ld c,a
  59+ A197 CD 4F A1     	call asm_tis2
  60+ A19A 32 75 C0     	ld (UBnkXScaled),a
  61+ A19D              normfy:
  62+ A19D 3A 77 C0     	ld a,(UBnkYScaled)
  63+ A1A0 E1           	pop hl				; get copy #2
  64+ A1A1 7D           	ld a,l
  65+ A1A2 4F           	ld c,a
  66+ A1A3 CD 4F A1     	call asm_tis2
  67+ A1A6 32 77 C0     	ld (UBnkYScaled),a
  68+ A1A9              normfz:
  69+ A1A9 3A 79 C0     	ld a,(UBnkZScaled)
  70+ A1AC E1           	pop hl				; get copy #2
  71+ A1AD 7D           	ld a,l
  72+ A1AE 4F           	ld c,a
  73+ A1AF CD 4F A1     	call asm_tis2
  74+ A1B2 32 79 C0     	ld (UBnkZScaled),a
  75+ A1B5              asm_unit_vector_end:
  76+ A1B5 C9           	ret
  77+ A1B6
# file closed: Maths/asm_unitvector.asm
 736  A1B6                  INCLUDE "Maths/compare16.asm"
# file opened: Maths/compare16.asm
   1+ A1B6              compare16HLDE:
   2+ A1B6              ; Input:
   3+ A1B6              ;       HL = 1st value
   4+ A1B6              ;       DE = 2nd value
   5+ A1B6              ; Output:
   6+ A1B6              ;       CF, ZF = results of comparison:
   7+ A1B6              ;
   8+ A1B6              ;               CF      ZF      Result
   9+ A1B6              ;               -----------------------------------
  10+ A1B6              ;               0       0       HL > DE
  11+ A1B6              ;               0       1       HL == DE
  12+ A1B6              ;               1       0       HL < DE
  13+ A1B6              ;               1       1       Impossible
  14+ A1B6              ;
  15+ A1B6 E5           		push    hl
  16+ A1B7 A7           		and     a
  17+ A1B8 ED 52        		sbc     hl,de
  18+ A1BA E1           		pop     hl
  19+ A1BB C9           		ret
  20+ A1BC
# file closed: Maths/compare16.asm
 737  A1BC                  INCLUDE "Maths/negate16.asm"
# file opened: Maths/negate16.asm
   1+ A1BC              ;;----------------------------------------------------------------------------------------------------------------------
   2+ A1BC              ;; 16-bit negate
   3+ A1BC              negate16:
   4+ A1BC              negate16hl:
   5+ A1BC                      ; Input:
   6+ A1BC                      ;       HL = value
   7+ A1BC                      ; Output:
   8+ A1BC                      ;       HL = -value
   9+ A1BC                      ; Destroys:
  10+ A1BC                      ;       AF
  11+ A1BC                      ;
  12+ A1BC AF           	xor 	a
  13+ A1BD 95           	sub 	l
  14+ A1BE 6F           	ld 		l,a
  15+ A1BF 9F           	sbc 	a,a
  16+ A1C0 94           	sub 	h
  17+ A1C1 67           	ld 		h,a
  18+ A1C2 C9           	ret
  19+ A1C3
  20+ A1C3              negate16de:
  21+ A1C3 AF           	xor 	a
  22+ A1C4 93           	sub 	e
  23+ A1C5 5F           	ld 		e,a
  24+ A1C6 9F           	sbc 	a,a
  25+ A1C7 92           	sub 	d
  26+ A1C8 57           	ld 		d,a
  27+ A1C9 C9           	ret
  28+ A1CA
  29+ A1CA              negate16bc:
  30+ A1CA AF           	xor 	a
  31+ A1CB 91           	sub 	c
  32+ A1CC 4F           	ld 		c,a
  33+ A1CD 9F           	sbc 	a,a
  34+ A1CE 90           	sub 	b
  35+ A1CF 47           	ld 		b,a
  36+ A1D0 C9           	ret
  37+ A1D1
  38+ A1D1
  39+ A1D1              macronegate16hl:	MACRO
  40+ A1D1 ~            					xor 	a
  41+ A1D1 ~            					sub 	l
  42+ A1D1 ~            					ld 		l,a
  43+ A1D1 ~            					sbc 	a,a
  44+ A1D1 ~            					sub 	h
  45+ A1D1 ~            					ld 		h,a
  46+ A1D1              					ENDM
  47+ A1D1
  48+ A1D1              macronegate16de:	MACRO
  49+ A1D1 ~            					xor 	a
  50+ A1D1 ~                                sub 	e
  51+ A1D1 ~                                ld 		e,a
  52+ A1D1 ~                                sbc 	a,a
  53+ A1D1 ~                                sub 	d
  54+ A1D1 ~                                ld 		d,a
  55+ A1D1              					ENDM
  56+ A1D1              macronegate16bc:	MACRO
  57+ A1D1 ~            					xor 	a
  58+ A1D1 ~                                sub 	c
  59+ A1D1 ~                                ld 		c,a
  60+ A1D1 ~                                sbc 	a,a
  61+ A1D1 ~                                sub 	b
  62+ A1D1 ~                                ld 		b,a
  63+ A1D1              					ENDM
  64+ A1D1
  65+ A1D1              macronegate16ix:	MACRO
  66+ A1D1 ~            					xor 	a
  67+ A1D1 ~                                sub 	ixl
  68+ A1D1 ~                                ld 		ixl,a
  69+ A1D1 ~                                sbc 	a,a
  70+ A1D1 ~                                sub 	ixh
  71+ A1D1 ~                                ld 		ixh,a
  72+ A1D1              					ENDM
# file closed: Maths/negate16.asm
 738  A1D1                  INCLUDE "Maths/normalise96.asm"
# file opened: Maths/normalise96.asm
   1+ A1D1              AequAdivDmul96Unsg:
   2+ A1D1 DD 68        	ld			ixl,b						; Get sign bit passed in as bit 7 in b
   3+ A1D3              	JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   3+ A1D3 BA          >                        cp     d
   3+ A1D4 D2 E9 A1    >                        jp		nc,TISXAccGTEQ
   4+ A1D7 4F           	ld			c,a
   5+ A1D8 CD 2E A0     	call		asm_div8
   6+ A1DB 79           	ld			a,c							; a = result
   7+ A1DC CB 3F        	srl			a							; result / 4
   8+ A1DE 47           	ld			b,a							; t = t /4
   9+ A1DF CB 3F        	srl			a							; result / 8
  10+ A1E1 80           	add			a,b							; result /8 + result /4
  11+ A1E2 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  12+ A1E3 DD 7D        	ld			a,ixl						; copy of Acc to look at sign bit
  13+ A1E5 E6 80        	and			$80							; recover sign only
  14+ A1E7 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  15+ A1E8 C9           	ret
  16+ A1E9              TISXAccGTEQ:
  17+ A1E9              ;TI4:										;\ clean to +/- unity
  18+ A1E9 DD 7D        	ld			a,ixl     					; get saved sign from b
  19+ A1EB E6 80        	and			$80							; copy of Acc
  20+ A1ED F6 60        	or			$60							; unity
  21+ A1EF C9           	ret
  22+ A1F0
  23+ A1F0
  24+ A1F0
  25+ A1F0
  26+ A1F0              normaliseXX1596fast:			; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ A1F0 3A 75 C0     	ld		a,(XX15)		    ; XX15+0
  28+ A1F3 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ A1F5 E6 7F        	and		$7F                 ; a = unsigned version
  30+ A1F7              N96SQX:
  31+ A1F7              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ A1F7 5F          >			ld	e,a
  31+ A1F8 57          >			ld  d,a
  31+ A1F9 ED 30       >			mul
  32+ A1FB 62           	ld		h,d					; h == varR d = varO e= varA
  33+ A1FC 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ A1FD              N96SQY:
  35+ A1FD 3A 76 C0     	ld		a,(XX15+1)
  36+ A200 DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ A202 E6 7F        	and		$7F                 ; = abs
  38+ A204              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ A204 5F          >			ld	e,a
  38+ A205 57          >			ld  d,a
  38+ A206 ED 30       >			mul
  39+ A208 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ A209              N96SQZ:
  41+ A209 3A 77 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ A20C FD 67        	ld		iyh,a               ; iyh = signed
  43+ A20E E6 7F        	and		$7F                 ; unsigned
  44+ A210              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ A210 5F          >			ld	e,a
  44+ A211 57          >			ld  d,a
  44+ A212 ED 30       >			mul
  45+ A214              N96SQADD:
  46+ A214 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ A215 EB           	ex		de,hl				; hl => de ready for square root
  48+ A216              N96SQRT:
  49+ A216 CD CB 9F     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ A219              N96NORMX:
  51+ A219 3A 75 C0     	ld		a,(XX15+0)
  52+ A21C E6 7F        	and		$7F
  53+ A21E 4F           	ld		c,a
  54+ A21F 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ A220 CD FD A3     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ A223 47           	ld		b,a				;++SGN
  57+ A224 DD 7C        	ld		a,ixh			;++SGN
  58+ A226 E6 80        	and		$80				;++SGN
  59+ A228 B0           	or		b				;++SGN
  60+ A229 32 75 C0     	ld		(XX15+0),a
  61+ A22C              N96NORMY:
  62+ A22C 3A 76 C0     	ld		a,(XX15+1)
  63+ A22F E6 7F        	and		$7F
  64+ A231 4F           	ld		c,a
  65+ A232 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ A233 CD FD A3     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ A236 47           	ld		b,a				;++SGN
  68+ A237 DD 7D        	ld		a,ixl			;++SGN
  69+ A239 E6 80        	and		$80				;++SGN
  70+ A23B B0           	or		b				;++SGN
  71+ A23C 32 76 C0     	ld		(XX15+1),a
  72+ A23F              N96NORMZ:
  73+ A23F 3A 77 C0     	ld		a,(XX15+2)
  74+ A242 E6 7F        	and		$7F
  75+ A244 4F           	ld		c,a
  76+ A245 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ A246 CD FD A3     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ A249 47           	ld		b,a				;++SGN
  79+ A24A FD 7C        	ld		a,iyh			;++SGN
  80+ A24C E6 80        	and		$80				;++SGN
  81+ A24E B0           	or		b				;++SGN
  82+ A24F 32 77 C0     	ld		(XX15+2),a
  83+ A252 C9           	ret
  84+ A253
  85+ A253
  86+ A253
  87+ A253              normaliseXX1596:				; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  88+ A253 3A 75 C0     	ld		a,(XX15)		    ; XX15+0
  89+ A256              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  89+ A256 5F          >			ld	e,a
  89+ A257 57          >			ld  d,a
  89+ A258 ED 30       >			mul
  90+ A25A 7A           	ld		a,d
  91+ A25B 32 32 92     	ld		(varR),a			; R	 \ hi sum later use b
  92+ A25E 7B           	ld		a,e
  93+ A25F 32 31 92     	ld		(varQ),a			; Q	 \ lo sum later use c
  94+ A262 32 D3 91     	ld		(varP),a			; P	 \ lo sum later just drop
  95+ A265 3A 76 C0     	ld		a,(XX15+1)
  96+ A268              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ A268 5F          >			ld	e,a
  96+ A269 57          >			ld  d,a
  96+ A26A ED 30       >			mul
  97+ A26C 7A           	ld		a,d
  98+ A26D 32 4E 92     	ld		(varT),a			; T	 \ hi sum
  99+ A270 7B           	ld		a,e
 100+ A271 32 D3 91     	ld		(varP),a			; P	 \ lo sum
 101+ A274 21 31 92     	ld		hl,varQ
 102+ A277 8E           	adc		a,(hl)				; +Q
 103+ A278 32 31 92     	ld		(varQ),a			; =>Q
 104+ A27B 3A 4E 92     	ld		a,(varT)			;
 105+ A27E 21 32 92     	ld		hl,varR
 106+ A281 8E           	adc		a,(hl)				;  R
 107+ A282 32 32 92     	ld		(varR),a			; R
 108+ A285 3A 77 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 109+ A288              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 109+ A288 5F          >			ld	e,a
 109+ A289 57          >			ld  d,a
 109+ A28A ED 30       >			mul
 110+ A28C 7A           	ld		a,d
 111+ A28D 32 4E 92     	ld		(varT),a			; T	 \ hi sum
 112+ A290 7B           	ld		a,e
 113+ A291 32 D3 91     	ld		(varP),a			; P	 \ lo sum
 114+ A294 21 31 92     	ld		hl,varQ
 115+ A297 8E           	adc		a,(hl)				; +Q
 116+ A298 32 31 92     	ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 117+ A29B 3A 4E 92     	ld		a,(varT)			; T temp Hi
 118+ A29E 21 32 92     	ld		hl,varR
 119+ A2A1 8E           	adc		a,(hl)				; +R
 120+ A2A2 32 32 92     	ld		(varR),a			; R
 121+ A2A5 CD EE 9F     	call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 122+ A2A8 3A 75 C0     	ld		a,(XX15+0)
 123+ A2AB CD F7 A3     	call	AequAdivQmul96		;  TIS2 \ *96/Q
 124+ A2AE 32 75 C0     	ld		(XX15+0),a
 125+ A2B1 3A 76 C0     	ld		a,(XX15+1)
 126+ A2B4 CD F7 A3     	call	AequAdivQmul96		;  TIS2 \ *96/Q
 127+ A2B7 32 76 C0     	ld		(XX15+1),a
 128+ A2BA 3A 76 C0     	ld		a,(XX15+1)
 129+ A2BD CD F7 A3     	call	AequAdivQmul96		;  TIS2 \ *96/Q
 130+ A2C0 32 76 C0     	ld		(XX15+1),a
 131+ A2C3 C9           	ret
 132+ A2C4
 133+ A2C4
 134+ A2C4
 135+ A2C4              ; Signed version tha is now defunct
 136+ A2C4              ;
 137+ A2C4              ;normaliseXX1596fast:				; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
 138+ A2C4              ;	ld		ixh,b				; save sign bits
 139+ A2C4              ;; This version uses registers rather than memory vars
 140+ A2C4              ;	ld		a,(XX15)		    ; XX15+0
 141+ A2C4              ;N96SQX:
 142+ A2C4              ;	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 143+ A2C4              ;	ld		h,d					; h == varR d = varO e= varA
 144+ A2C4              ;	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
 145+ A2C4              ;N96SQY:
 146+ A2C4              ;	ld		a,(XX15+1)
 147+ A2C4              ;	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
 148+ A2C4              ;	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
 149+ A2C4              ;N96SQZ:
 150+ A2C4              ;	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 151+ A2C4              ;	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
 152+ A2C4              ;N96SQADD:
 153+ A2C4              ;	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
 154+ A2C4              ;	ex		de,hl				; hl => de ready for square root
 155+ A2C4              ;N96SQRT:
 156+ A2C4              ;	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
 157+ A2C4              ;N96NORMX:
 158+ A2C4              ;	ld		a,ixh
 159+ A2C4              ;	and		$80
 160+ A2C4              ;	ld		b,a
 161+ A2C4              ;	ld		a,(XX15+0)
 162+ A2C4              ;	and		$7F
 163+ A2C4              ;	ld		c,a
 164+ A2C4              ;	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
 165+ A2C4              ;	call	AequAdivDmul96	; does not use HL so we can retain it
 166+ A2C4              ;	ld		(XX15+0),a
 167+ A2C4              ;N96NORMY:
 168+ A2C4              ;	ld		a,ixh
 169+ A2C4              ;	sll		a
 170+ A2C4              ;	and		$80
 171+ A2C4              ;	ld		b,a
 172+ A2C4              ;	ld		a,(XX15+1)
 173+ A2C4              ;	and		$7F
 174+ A2C4              ;	ld		c,a
 175+ A2C4              ;	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
 176+ A2C4              ;	call	AequAdivDmul96     	; does not use HL so we can retain it
 177+ A2C4              ;N96NORMZ:
 178+ A2C4              ;	ld		(XX15+1),a
 179+ A2C4              ;	ld		a,ixh
 180+ A2C4              ;	sll		a
 181+ A2C4              ;	sll		a
 182+ A2C4              ;	and		$80
 183+ A2C4              ;	ld		b,a
 184+ A2C4              ;	ld		a,(XX15+2)
 185+ A2C4              ;	and		$7F
 186+ A2C4              ;	ld		c,a
 187+ A2C4              ;	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
 188+ A2C4              ;	call	AequAdivDmul96	; does not use HL so we can retain it
 189+ A2C4              ;	ld		(XX15+2),a
 190+ A2C4              ;	ret
 191+ A2C4              ;
# file closed: Maths/normalise96.asm
 739  A2C4                  INCLUDE "Maths/binary_to_decimal.asm"
# file opened: Maths/binary_to_decimal.asm
   1+ A2C4              ;Number in hl to decimal ASCII
   2+ A2C4              ;Thanks to z80 Bits
   3+ A2C4              ;inputs:	hl = number to ASCII
   4+ A2C4              ;example: hl=300 outputs '00300'
   5+ A2C4              ;destroys: af, bc, hl, de used
   6+ A2C4              DispHLtoDE:
   7+ A2C4              ; "DispHL, writes HL to DE address"
   8+ A2C4 01 F0 D8     	ld	bc,-10000
   9+ A2C7 CD DD A2     	call	Num1
  10+ A2CA 01 18 FC     	ld	bc,-1000
  11+ A2CD CD DD A2     	call	Num1
  12+ A2D0 01 9C FF     	ld	bc,-100
  13+ A2D3 CD DD A2     	call	Num1
  14+ A2D6 0E F6        	ld	c,-10
  15+ A2D8 CD DD A2     	call	Num1
  16+ A2DB 0E FF        	ld	c,-1
  17+ A2DD              Num1:
  18+ A2DD 3E 2F        	ld	a,'0'-1
  19+ A2DF              .Num2:
  20+ A2DF 3C           	inc	a
  21+ A2E0 09           	add	hl,bc
  22+ A2E1 38 FC        	jr	c,.Num2
  23+ A2E3 ED 42        	sbc	hl,bc
  24+ A2E5 12           	ld	(de),a
  25+ A2E6 13           	inc	de
  26+ A2E7 C9           	ret
  27+ A2E8
  28+ A2E8              DispAtoDE:
  29+ A2E8 26 00        	ld h,0
  30+ A2EA 6F           	ld l,a
  31+ A2EB C3 C4 A2     	jp DispHLtoDE
  32+ A2EE
  33+ A2EE              DispPriceAtoDE:
  34+ A2EE 26 00        	ld h,0
  35+ A2F0 6F           	ld l,a
  36+ A2F1 01 9C FF     	ld	bc,-100
  37+ A2F4 CD 04 A3     	call	.NumLeadBlank1
  38+ A2F7 0E F6        	ld	c,-10
  39+ A2F9 CD DD A2     	call	Num1
  40+ A2FC 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ A2FE 12           	ld		(de),a					; we can optimse that later TODO
  42+ A2FF 13           	inc		de						; with just an inc De
  43+ A300 0E FF        	ld	c,-1
  44+ A302 18 D9        	jr		Num1
  45+ A304              .NumLeadBlank1:
  46+ A304 3E 2F        	ld	a,'0'-1
  47+ A306              .NumLeadBlank2:
  48+ A306 3C           	inc	a
  49+ A307 09           	add	hl,bc
  50+ A308 38 FC        	jr	c,.NumLeadBlank2
  51+ A30A FE 30        	cp	'0'
  52+ A30C 20 02        	jr	nz,.DontBlank
  53+ A30E              .Blank:
  54+ A30E 3E 20        	ld	a,' '
  55+ A310              .DontBlank:
  56+ A310 ED 42        	sbc	hl,bc
  57+ A312 12           	ld	(de),a
  58+ A313 13           	inc	de
  59+ A314 C9           	ret
  60+ A315
  61+ A315              DispQtyAtoDE:
  62+ A315 FE 00        	cp	0
  63+ A317 28 23        	jr	z,.NoStock
  64+ A319 26 00        	ld h,0
  65+ A31B 6F           	ld l,a
  66+ A31C 01 9C FF     	ld	bc,-100
  67+ A31F CD 2B A3     	call	.NumLeadBlank1
  68+ A322 0E F6        	ld	c,-10
  69+ A324 CD 2B A3     	call	.NumLeadBlank1
  70+ A327 0E FF        	ld	c,-1
  71+ A329 18 B2        	jr		Num1
  72+ A32B              .NumLeadBlank1:
  73+ A32B 3E 2F        	ld	a,'0'-1
  74+ A32D              .NumLeadBlank2:
  75+ A32D 3C           	inc	a
  76+ A32E 09           	add	hl,bc
  77+ A32F 38 FC        	jr	c,.NumLeadBlank2
  78+ A331 FE 30        	cp	'0'
  79+ A333 20 02        	jr	nz,.DontBlank
  80+ A335              .Blank:
  81+ A335 3E 20        	ld	a,' '
  82+ A337              .DontBlank:
  83+ A337 ED 42        	sbc	hl,bc
  84+ A339 12           	ld	(de),a
  85+ A33A 13           	inc	de
  86+ A33B C9           	ret
  87+ A33C              .NoStock:
  88+ A33C 3E 20        	ld	a,' '
  89+ A33E 12           	ld	(de),a
  90+ A33F 13           	inc	de
  91+ A340 12           	ld	(de),a
  92+ A341 13           	inc	de
  93+ A342 3E 2D        	ld	a,'-'
  94+ A344 12           	ld	(de),a
  95+ A345 13           	inc de
  96+ A346 C9           	ret
  97+ A347
  98+ A347
  99+ A347              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ A347              ;### Input      DE,IX=32bit value, IY=destination address
 101+ A347              ;### Output     IY=last char in destination string
 102+ A347              ;### Destroyed AF,BC,DE,HL,IX
 103+ A347 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ A34B 0A 00 00 00
 103+ A34F 64 00 00 00
 103+ A353 E8 03 00 00
 103+ A357 10 27 00 00
 104+ A35B A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ A35F 40 42 0F 00
 104+ A363 80 96 98 00
 104+ A367 00 E1 F5 05
 104+ A36B 00 CA 9A 3B
 105+ A36F 00 00 00 00  clcn32z ds 4
 106+ A373
 107+ A373              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ A373 CD 82 A3     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ A376 FD 7E 00                             ld      a,(IY+0)
 110+ A379 FD 77 01                             ld      (IY+1),a
 111+ A37C 3E 2E                                ld      a,"."
 112+ A37E FD 77 00                             ld      (IY+0),a
 113+ A381 C9                                   ret
 114+ A382
 115+ A382 DD 22 6F A3  DispDEIXtoIY:           ld (clcn32z),ix
 116+ A386 ED 53 71 A3                          ld (clcn32z+2),de
 117+ A38A DD 21 6B A3                          ld ix,clcn32t+36
 118+ A38E 06 09                                ld b,9
 119+ A390 0E 00                                ld c,0
 120+ A392 3E 30        .clcn321:               ld a,'0'
 121+ A394 B7                                   or a
 122+ A395 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ A398 DD 56 01                             ld d,(ix+1)
 124+ A39B 2A 6F A3                             ld hl,(clcn32z)
 125+ A39E ED 52                                sbc hl,de
 126+ A3A0 22 6F A3                             ld (clcn32z),hl
 127+ A3A3 DD 5E 02                             ld e,(ix+2)
 128+ A3A6 DD 56 03                             ld d,(ix+3)
 129+ A3A9 2A 71 A3                             ld hl,(clcn32z+2)
 130+ A3AC ED 52                                sbc hl,de
 131+ A3AE 22 71 A3                             ld (clcn32z+2),hl
 132+ A3B1 38 04                                jr c,.clcn325
 133+ A3B3 0C                                   inc c
 134+ A3B4 3C                                   inc a
 135+ A3B5 18 DE                                jr .clcn322
 136+ A3B7 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ A3BA DD 56 01                             ld d,(ix+1)
 138+ A3BD 2A 6F A3                             ld hl,(clcn32z)
 139+ A3C0 19                                   add hl,de
 140+ A3C1 22 6F A3                             ld (clcn32z),hl
 141+ A3C4 DD 5E 02                             ld e,(ix+2)
 142+ A3C7 DD 56 03                             ld d,(ix+3)
 143+ A3CA 2A 71 A3                             ld hl,(clcn32z+2)
 144+ A3CD ED 5A                                adc hl,de
 145+ A3CF 22 71 A3                             ld (clcn32z+2),hl
 146+ A3D2 11 FC FF                             ld de,-4
 147+ A3D5 DD 19                                add ix,de
 148+ A3D7 0C                                   inc c
 149+ A3D8 0D                                   dec c
 150+ A3D9 28 05                                jr z,.clcn323
 151+ A3DB FD 77 00                             ld (iy+0),a
 152+ A3DE FD 23                                inc iy
 153+ A3E0 10 B0        .clcn323:               djnz .clcn321
 154+ A3E2 3A 6F A3                             ld a,(clcn32z)
 155+ A3E5 C6 30                                add A,'0'
 156+ A3E7 FD 77 00                             ld (iy+0),a
 157+ A3EA FD 36 01 00                          ld (iy+1),0
 158+ A3EE C9                                   ret
 159+ A3EF
# file closed: Maths/binary_to_decimal.asm
 740  A3EF              ;INCLUDE "badd_ll38.asm"
 741  A3EF              ;;INCLUDE "XX12equXX15byXX16.asm"
 742  A3EF                  INCLUDE "AequAdivQmul96-TIS2.asm"
# file opened: Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ A3EF
   2+ A3EF              ; USES 			A DE BC
   3+ A3EF              ; DOES NOT USE 	HL
   4+ A3EF              TIS2962C:		; two's compliment entry point, exits not 2's compliment
   5+ A3EF CB 7F        	bit			7,a
   6+ A3F1 28 04        	jr			z,AequAdivQmul96
   7+ A3F3 ED 44        	neg										; revers 2s'c and just set neg bit
   8+ A3F5 CB FF        	set			7,a
   9+ A3F7              ; Note negative numbers are bit 7 set not 2's compliment
  10+ A3F7              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  11+ A3F7              TIS2:
  12+ A3F7 4F           	ld			c,a							; copy of Acc
  13+ A3F8 3A 31 92     	ld			a,(varQ)
  14+ A3FB 57           	ld			d,a							; d = varQ
  15+ A3FC 79           	ld			a,c							; recover a
  16+ A3FD              AequAdivDmul96:
  17+ A3FD 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  18+ A3FE E6 7F        	and			SignMask8Bit				; ignore sign
  19+ A400              	JumpIfAGTENusng d, TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  19+ A400 BA          >                        cp     d
  19+ A401 D2 21 A4    >                        jp		nc,TIS2AccGTEQ
  20+ A404 06 FE        	ld			b,$FE						; division roll (replaced varT)
  21+ A406              TIS2RollTLoop:									; .TIL2	; roll T
  22+ A406 CB 27        	sla			a
  23+ A408              	JumpIfALTNusng d,TIS2SkipSub            ; a < d so don;t subtract
  23+ A408 BA          >                        cp      d
  23+ A409 DA 27 A4    >                        jp		c,TIS2SkipSub
  24+ A40C 9A           	sbc			a,d							; do subtraction with carry
  25+ A40D 37           	scf
  26+ A40E CB 10        	rl			b							; T rolled left to push bit out the end
  27+ A410 38 F4        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  28+ A412              TIS2SKIPCont:
  29+ A412 78           	ld			a,b							; T
  30+ A413 CB 3F        	srl			a							; result / 2
  31+ A415 CB 3F        	srl			a							; result / 4
  32+ A417 47           	ld			b,a							; t = t /4
  33+ A418 CB 3F        	srl			a							; result / 8
  34+ A41A 80           	add			a,b							; result /8 + result /4
  35+ A41B 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  36+ A41C 79           	ld			a,c							; copy of Acc to look at sign bit
  37+ A41D E6 80        	and			$80							; recover sign only
  38+ A41F B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  39+ A420 C9           	ret
  40+ A421              TIS2AccGTEQ:
  41+ A421              ;TI4:										;\ clean to +/- unity
  42+ A421 79           	ld			a,c
  43+ A422 E6 80        	and			$80							; copy of Acc
  44+ A424 F6 60        	or			$60							; unity
  45+ A426 C9           	ret
  46+ A427              TIS2SkipSub:
  47+ A427 B7           	or			a
  48+ A428 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ A42A 38 DA        	jr			c,TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ A42C C3 12 A4     	jp			TIS2SKIPCont
  51+ A42F
# file closed: Maths/Utilities/AequAdivQmul96-TIS2.asm
 743  A42F                  INCLUDE "AequAmulQdiv256-FMLTU.asm"
# file opened: Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ A42F              fmltu:
   2+ A42F              AequAmulQdiv256:
   3+ A42F              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ A42F 57           	ld	d,a
   5+ A430 3A 31 92     	ld	a,(varQ)
   6+ A433 5F           	ld	e,a
   7+ A434 ED 30        	mul
   8+ A436 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ A437 C9           	ret
  10+ A438
# file closed: Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 744  A438                  INCLUDE "PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ A438              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ A438              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ A438 21 86 95     		ld		hl,varDustZ
   4+ A43B FD 7D        		ld		a,iyl
   5+ A43D ED 31        		add		hl,a
   6+ A43F 7E           		ld		a,(hl)
   7+ A440 C3 4C A4     		jp		DV41
   8+ A443              DV42:										; travel step of dust particle front/rear
   9+ A443 21 86 95     		ld		hl,varDustZ
  10+ A446 3A 5D 91     		ld		a,(regY)
  11+ A449 ED 31        		add		hl,a
  12+ A44B 7E           		ld		a,(hl)						; a = SZ[y]
  13+ A44C              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ A44C 5F           		ld		e,a							; using E as Q var replacement
  15+ A44D 3A 2D 92     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ A450              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ A450 06 08        		ld		b,8							; counter
  18+ A452 CB 27        		sla		a							;
  19+ A454 57           		ld		d,a							; use d for - p = delta * 2
  20+ A455 AF           		xor		a
  21+ A456              DVL4:										; counter x loop (b reg)
  22+ A456 CB 17        		rl		a							; a = a * 2
  23+ A458 38 03        		jr		c,DV8						; jump on carry
  24+ A45A BB           		cp		e							; var Q
  25+ A45B 38 02        		jr		c,DV5						; skip subtraction
  26+ A45D              DV8:
  27+ A45D 9B           		sbc		a,e							; a = a - q (with carry)
  28+ A45E 37           		scf									;  carry gets set
  29+ A45F              DV5:										; skipped subtraction
  30+ A45F CB 12        		rl		d							; d (P hi)
  31+ A461 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ A463              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ A463              ; Note we are not going to call LL28+4 but inline code here:
  34+ A463 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ A465 4F           		ld		c,a							; use c as R var
  36+ A466              .RollRemainder:
  37+ A466 CB 27        		sla		a
  38+ A468 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ A46A B8           		cp		b							; a < q?
  40+ A46B 30 01        		jr		nc,.DontSBC
  41+ A46D              .DoSBC:										; a is < q
  42+ A46D 98           		sbc		a,b							; 	a -= q
  43+ A46E              .DontSBC:
  44+ A46E CB 11        		rl		c							; r << 1
  45+ A470 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ A472 79           		ld		a,c
  47+ A473 32 32 92     		ld		(varR),a					; for backwards compat
  48+ A476 7A           		ld		a,d
  49+ A477 32 D3 91     		ld		(varP),a
  50+ A47A C9           		ret									; R (c) left with remainder
  51+ A47B              .Reduce:									; a geneated a carry
  52+ A47B 98           		sbc		a,b							; a = a - (q +1)
  53+ A47C 37           		scf									; set carry flag for rl
  54+ A47D CB 11        		rl		c							; r << 1 briging in carry
  55+ A47F 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ A481 79           		ld		a,c
  57+ A482 32 32 92     		ld		(varR),a					; for backwards compat
  58+ A485 7A           		ld		a,d
  59+ A486 32 D3 91     		ld		(varP),a
  60+ A489 C9           		ret
  61+ A48A              .AnswerTooBig:
  62+ A48A 0E FF        		ld		c,$FF						; arse its too big
  63+ A48C 79           		ld		a,c
  64+ A48D 32 32 92     		ld		(varR),a					; for backwards compat
  65+ A490 7A           		ld		a,d
  66+ A491 32 D3 91     		ld		(varP),a
  67+ A494 C9           		ret
  68+ A495
# file closed: Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 745  A495                  INCLUDE "AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ A495
   2+ A495              asm_defmutl:
   3+ A495              AequDmulEdiv256usgn:
   4+ A495              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ A495 ED 30        	mul
   6+ A497 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ A498 C9           	ret
   8+ A499
   9+ A499
# file closed: Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 746  A499              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 747  A499              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 748  A499              ;INCLUDE "APequPmulX-MU11.asm"
 749  A499                  INCLUDE "APequQmulA-MULT1.asm"
# file opened: Maths/Utilities/APequQmulA-MULT1.asm
   1+ A499              APequQmulA:
   2+ A499              asm_mult1:
   3+ A499              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ A499 FE 00        	cp	0
   5+ A49B 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ A49D 5F           	ld	e,a
   7+ A49E 3A 31 92     	ld	a,(varQ)
   8+ A4A1 57           	ld	d,a
   9+ A4A2 FE 00        	cp	0				; compare a
  10+ A4A4 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ A4A6 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ A4A7 E6 80        	and $80				; get the resultant sign and save into b
  13+ A4A9 47           	ld	b,a
  14+ A4AA 7A           	ld	a,d
  15+ A4AB E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ A4AD 57           	ld	d,a
  17+ A4AE 7B           	ld	a,e
  18+ A4AF E6 7F        	and SignMask8Bit
  19+ A4B1 5F           	ld	e,a
  20+ A4B2 ED 30        	mul					; zxn de = d * e
  21+ A4B4 7B           	ld	a,e
  22+ A4B5 32 D3 91     	ld	(varP),a		; p = lo
  23+ A4B8 7A           	ld	a,d				; a = hi
  24+ A4B9 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ A4BA 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ A4BB C9           	ret
  27+ A4BC              .mul0:
  28+ A4BC AF           	xor	a
  29+ A4BD 32 D3 91     	ld	(varP),a
  30+ A4C0 57           	ld	d,a
  31+ A4C1 5F           	ld  e,a
  32+ A4C2 C9           	ret
  33+ A4C3
# file closed: Maths/Utilities/APequQmulA-MULT1.asm
 750  A4C3                  INCLUDE "badd_ll38.asm"
# file opened: Maths/Utilities/badd_ll38.asm
   1+ A4C3              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ A4C3              ; Calculate the following between sign-magnitude numbers:
   3+ A4C3              ;   (S A) = (S R) + (A Q)
   4+ A4C3              ; where the sign bytes only contain the sign bits, not magnitudes.
   5+ A4C3              ; note goes wrong at <-127 >128 so need 16 bit version
   6+ A4C3              ; so need to fix the issue with carry flag not returning a fault correctly
   7+ A4C3              LL38:
   8+ A4C3              ;	ld		d,a
   9+ A4C3              ;	ld		a,(varQ)
  10+ A4C3              ;	ld		e,a
  11+ A4C3              ;	ld		a,(varS)
  12+ A4C3              ;	ld		h,a
  13+ A4C3              ;	ld		a,(varR)
  14+ A4C3              ;	ld		l,a
  15+ A4C3              ;	call	ADDHLDESignedv3
  16+ A4C3              ;	ld		a,h
  17+ A4C3              ;	ld		(varS),a
  18+ A4C3              ;	ld		a,l
  19+ A4C3              ;	ret
  20+ A4C3
  21+ A4C3              ; Calculate sign for Q from A and varS
  22+ A4C3 21 33 92     	ld		hl,varS							;
  23+ A4C6 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  24+ A4C7 FA D2 A4     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  25+ A4CA 3A 31 92     	ld		a,(varQ)						; Q	\ else addition, S already correct
  26+ A4CD 21 32 92     	ld		hl,varR
  27+ A4D0 86           	add		a,(hl)							; a = Q + R
  28+ A4D1 C9           	ret										; Done
  29+ A4D2              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  30+ A4D2 3A 32 92     	ld		a,(varR)						;
  31+ A4D5 21 31 92     	ld		hl,varQ                         ;
  32+ A4D8              	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do t
  32+ A4D8 BE          >                        cp    (hl)
  32+ A4D9 DA F0 A4    >                        jp	  c,LL39SwapSubtraction
  33+ A4DC              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  33+ A4DC B7          >				or a
  34+ A4DD 9E           	sbc		a,(hl)							; A = R - Q
  35+ A4DE              	JumpIfNegative LL39SignCorrection				; if there was underflow we have to correct sign
  35+ A4DE FA E3 A4    >                        jp		m,LL39SignCorrection
  36+ A4E1 B7           	or		a								; Clear carry flag to say result is correct
  37+ A4E2 C9           	ret
  38+ A4E3              LL39SignCorrection:
  39+ A4E3 ED 44            neg                                     ; flip A 2'c value to positive
  40+ A4E5 08           	ex		af,af'							; save A temporarily
  41+ A4E6 3A 33 92     	ld		a,(varS)						; Flip Sign bit in varS
  42+ A4E9 EE 80        	xor		$80							    ;
  43+ A4EB 32 33 92     	ld		(varS),a                        ; flip sign bit of a
  44+ A4EE 08           	ex		af,af'                          ; get back a which is the result
  45+ A4EF C9           	ret
  46+ A4F0              LL39SwapSubtraction:
  47+ A4F0 C5           	push	bc
  48+ A4F1 47           	ld		b,a
  49+ A4F2 7E           	ld		a,(hl)
  50+ A4F3 90           	sub		b
  51+ A4F4 C1           	pop		bc
  52+ A4F5 08           	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  53+ A4F6 3A 33 92     	ld		a,(varS)
  54+ A4F9 EE 80        	xor		$80
  55+ A4FB 32 33 92     	ld		(varS),a
  56+ A4FE 08           	ex		af,af'
  57+ A4FF C9           	ret
  58+ A500
  59+ A500              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  60+ A500              ;;;;; Calculate the following between sign-magnitude numbers:
  61+ A500              ;;;;;   (S A) = (S R) + (A Q)
  62+ A500              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  63+ A500              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  64+ A500              ;;;;LL38:
  65+ A500              ;;;;; Calculate sign for Q from A and varS
  66+ A500              ;;;;	ld		hl,varS							;
  67+ A500              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  68+ A500              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  69+ A500              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  70+ A500              ;;;;	ld		hl,varR
  71+ A500              ;;;;	add		a,(hl)							; a = Q + R
  72+ A500              ;;;;	ret										; Done
  73+ A500              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  74+ A500              ;;;;	ld		hl,varQ                         ;
  75+ A500              ;;;;	ld		a,(hl)
  76+ A500              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
  77+ A500              ;;;;	ld		a,(varR)						;
  78+ A500              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  79+ A500              ;;;;	sbc		a,(hl)							; A = R - Q
  80+ A500              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
  81+ A500              ;;;;	or		a								; Clear carry flag to say result is correct
  82+ A500              ;;;;	ret
  83+ A500              ;;;;.SignCorrection:
  84+ A500              ;;;;    neg                                     ; flip A 2'c value to positive
  85+ A500              ;;;;	ex		af,af'							; save A temporarily
  86+ A500              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
  87+ A500              ;;;;	xor		$80							    ;
  88+ A500              ;;;;	ld		(varS),a                        ; flip sign bit of a
  89+ A500              ;;;;	ex		af,af'                          ; get back a which is the result
  90+ A500              ;;;;	ret
  91+ A500              ;;;;LL39Sub16Bit:
  92+ A500              ;;;;	ld		e,a
  93+ A500              ;;;;	ld		d,0
  94+ A500              ;;;;	ld		a,(varR)
  95+ A500              ;;;;	ld		l,a
  96+ A500              ;;;;	ld		h,0
  97+ A500              ;;;;	ClearCarryFlag
  98+ A500              ;;;;	sbc		hl,de
  99+ A500              ;;;;	jr		c,.SignCorrection16bit
 100+ A500              ;;;;	bit		7,h
 101+ A500              ;;;;	jr		z,.GoodToReturn
 102+ A500              ;;;;.Needtonegate:
 103+ A500              ;;;;	macronegate16hl
 104+ A500              ;;;;.GoodToReturn
 105+ A500              ;;;;	ld		a,l
 106+ A500              ;;;;	or		a
 107+ A500              ;;;;	ret
 108+ A500              ;;;;.SignCorrection16bit:
 109+ A500              ;;;;	macronegate16hl
 110+ A500              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 111+ A500              ;;;;	xor		$80							    ;
 112+ A500              ;;;;	ld		(varS),a                        ; flip sign bit of a
 113+ A500              ;;;;	ld		a,l
 114+ A500              ;;;;	ret
 115+ A500
 116+ A500
# file closed: Maths/Utilities/badd_ll38.asm
 751  A500                  INCLUDE "moveship4-MVS4.asm"
# file opened: Maths/Utilities/moveship4-MVS4.asm
   1+ A500              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ A500              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ A500              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ A500
   5+ A500
   6+ A500              moveship4Yreg:
   7+ A500 3A 5D 91     		ld		a,(regY)
   8+ A503 47           		ld		b,a
   9+ A504              moveship4breg:
  10+ A504              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ A504              MVS4PitchAlphaRollBeta:
  12+ A504              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ A504 3A 42 92     		ld		a,(ALPHA)					;  ALPHA
  14+ A507 32 31 92     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ A50A 21 0D C0     		ld		hl,UBnKxsgn
  16+ A50D 78           		ld		a,b							; from
  17+ A50E ED 31        		add		hl,a
  18+ A510 7E           		ld		a,(hl)						; INWK+2,Y
  19+ A511 32 32 92     		ld		(varR),a					; R  \ lo
  20+ A514 23           		inc		hl
  21+ A515 7E           		ld		a,(hl)						; INWK+3,Y
  22+ A516 32 33 92     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ A519 2B           		dec		hl
  24+ A51A 2B           		dec		hl
  25+ A51B 2B           		dec		hl							;
  26+ A51C 7E           		ld		a,(hl)						; INWK+0,Y
  27+ A51D 32 D3 91     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ A520 23           		inc		hl
  29+ A521 7E           		ld		a,(hl)						; INWK+1,Y
  30+ A522 EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ A524 CD 2D 9F     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ A527 23                   inc     hl
  33+ A528 23                   inc     hl
  34+ A529 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ A52A 2B                   dec     hl
  36+ A52B 3A 5C 91             ld      a,(regX)
  37+ A52E 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ A52F 32 D3 91             ld      (varP),a                    ;  P
  39+ A532 2B                   dec     hl
  40+ A533 2B                   dec     hl
  41+ A534 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ A535 32 32 92             ld      (varR),a                    ;  R	\ lo
  43+ A538 23                   inc     hl
  44+ A539 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ A53A 32 33 92             ld      (varS),a                    ; S	\ hi
  46+ A53D 23                   inc     hl
  47+ A53E 23                   inc     hl
  48+ A53F 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ A540 CD 2D 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ A543 2B                   dec     hl
  51+ A544 2B                   dec     hl
  52+ A545 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ A546 3A 5C 91             ld      a,(regX)
  54+ A549 2B                   dec     hl
  55+ A54A 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ A54B 32 D3 91             ld      (varP),a                    ; P
  57+ A54E 3A DE 91             ld      a,(BETA)                    ; BETA
  58+ A551 32 31 92             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ A554 23                   inc     hl
  60+ A555 23                   inc     hl
  61+ A556 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ A557 32 32 92             ld      (varR),a                    ; R	\ lo
  63+ A55A 23                   inc     hl
  64+ A55B 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ A55C 32 33 92             ld      (varS),a                    ; S	\ hi
  66+ A55F 23                   inc     hl
  67+ A560 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ A561 32 D3 91             ld      (varP),a                    ; P	\ lo
  69+ A564 23                   inc     hl
  70+ A565 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ A566 EE 80                xor     $80                         ; flip sign hi
  72+ A568 CD 2D 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ A56B 2B                   dec     hl
  74+ A56C 2B                   dec     hl
  75+ A56D 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ A56E 3A 5C 91             ld      a,(regX)
  77+ A571 2B                   dec     hl
  78+ A572 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ A573 32 D3 91             ld      (varP),a                    ; P
  80+ A576 23                   inc     hl
  81+ A577 23                   inc     hl
  82+ A578 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ A579 32 32 92             ld      (varR),a                    ; R	\ lo
  84+ A57C 23                   inc     hl
  85+ A57D 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ A57E 32 33 92             ld      (varS),a                    ; S	\ hi
  87+ A581 2B                   dec     hl
  88+ A582 2B                   dec     hl
  89+ A583 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ A584 CD 2D 9F             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ A587 23                   inc     hl
  92+ A588 23                   inc     hl
  93+ A589 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ A58A 3A 5C 91             ld      a,(regX)
  95+ A58D 2B                   dec     hl
  96+ A58E 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ A58F C9                   ret
  98+ A590
  99+ A590
# file closed: Maths/Utilities/moveship4-MVS4.asm
 752  A590              ;INCLUDE "MoveShip5-MVS5.asm"
 753  A590              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 754  A590              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 755  A590              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 756  A590                  INCLUDE "RequAmul256divQ-BFRDIV.asm"
# file opened: Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ A590              ;;;LL28:
   2+ A590              ;;;    ld      c,a                         ;
   3+ A590              ;;;    ld      a,(varQ)                    ;
   4+ A590              ;;;    ld      b,a                         ;
   5+ A590              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ A590              ;;;RequAmul256divB:                        ;
   7+ A590              ;;;LL28Breg:
   8+ A590              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ A590              ;;;	cp		b							; Check A >= Q
  10+ A590              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ A590              ;;;.CalcRemainder:
  12+ A590              ;;;	ld		c, 	$FE						; set R to $FE
  13+ A590              ;;;.RollRemainder:
  14+ A590              ;;;	sla		a
  15+ A590              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ A590              ;;;	cp		b							; a < q?
  17+ A590              ;;;	jr		nc,.DontSBC
  18+ A590              ;;;.DoSBC:									; a is < q
  19+ A590              ;;;	sbc		a,b							; 	a -= q
  20+ A590              ;;;.DontSBC:
  21+ A590              ;;;	rl		c							; r << 1
  22+ A590              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ A590              ;;;    ld      a,c
  24+ A590              ;;;    ld      (varR),a
  25+ A590              ;;;	ret									; R (c) left with remainder
  26+ A590              ;;;.Reduce:								; a geneated a carry
  27+ A590              ;;;	sbc		a,b							; a = a - (q +1)
  28+ A590              ;;;	scf									; set carry flag for rl
  29+ A590              ;;;	rl		c							; r << 1 briging in carry
  30+ A590              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ A590              ;;;    ld      a,c
  32+ A590              ;;;    ld      (varR),a
  33+ A590              ;;;	ret
  34+ A590              ;;;.AnswerTooBig:
  35+ A590              ;;;	ld	    c,$FF							; arse its too big
  36+ A590              ;;;    ld      a,c
  37+ A590              ;;;    ld      (varR),a
  38+ A590              ;;;	ret
  39+ A590
  40+ A590              BCequAmul256DivC:
  41+ A590 59             ld    e,c
  42+ A591 67             ld    h,a
  43+ A592 2E 00          ld    l,0
  44+ A594              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ A594 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ A595 B7             or a                                   ; from this time on the carry is cleared
  47+ A596 C8             ret z
  48+ A597 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ A59A 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ A59C              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ A59C ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ A59E 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ A59F 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ A5A1 C9             ret
  55+ A5A2
  56+ A5A2              HL_Div_C:
  57+ A5A2              ; Integer divides HL by C
  58+ A5A2              ; Result in HL, remainder in A
  59+ A5A2              ; Clobbers F, B
  60+ A5A2 06 10                ld b,16
  61+ A5A4 AF                   xor a
  62+ A5A5              HL_Div_C_Loop:
  63+ A5A5 29                   add hl,hl
  64+ A5A6 17                   rla
  65+ A5A7 B9                   cp c
  66+ A5A8 38 02                jr c,HL_DivC_Skip
  67+ A5AA 91                   sub c
  68+ A5AB 2C                   inc l
  69+ A5AC              HL_DivC_Skip:
  70+ A5AC 10 F7                djnz HL_Div_C_Loop
  71+ A5AE 7D                   ld   a,l
  72+ A5AF 32 32 92             ld  (varR),a
  73+ A5B2 C9                   ret
  74+ A5B3
  75+ A5B3              LL28:
  76+ A5B3              RequAmul256divQ:				; Entry point if varQ is populated with demoninator
  77+ A5B3              BFRDIV:
  78+ A5B3 F5           		push	af
  79+ A5B4 3A 31 92     		ld		a,(varQ)
  80+ A5B7 4F           		ld		c,a
  81+ A5B8 F1           		pop		af
  82+ A5B9 FE 00        		cp		0
  83+ A5BB CA D2 A5     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  84+ A5BE              RequAmul256divC:
  85+ A5BE 2E 00        		ld		l,0
  86+ A5C0 67           		ld		h,a
  87+ A5C1              HL_Div_Cold:						; fast entry point if C and HL are already set
  88+ A5C1 06 10        		ld b,16
  89+ A5C3 AF           		xor a
  90+ A5C4              LOOPPOINT:
  91+ A5C4 29           		add hl,hl
  92+ A5C5 17           		rla
  93+ A5C6 B9           		cp c
  94+ A5C7 38 02        		jr c,SKIPINCSUB
  95+ A5C9 2C           		inc l
  96+ A5CA 91           		sub c
  97+ A5CB              SKIPINCSUB:
  98+ A5CB 10 F7        		djnz LOOPPOINT
  99+ A5CD 7D           		ld		a,l
 100+ A5CE 32 32 92     		ld 		(varR),a
 101+ A5D1 C9           		ret
 102+ A5D2              HLDIVC_0_BY:
 103+ A5D2 32 32 92     		ld		(varR),a
 104+ A5D5 C9           		ret
 105+ A5D6              ;	push	af
 106+ A5D6              ;	ld		a,b
 107+ A5D6              ;	ld		(varQ),a
 108+ A5D6              ;	pop		af
 109+ A5D6              ;RequAmul256divQ:
 110+ A5D6              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 111+ A5D6              ;	ld		hl,varQ
 112+ A5D6              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 113+ A5D6              ;	ld		b,$FE						; b = X
 114+ A5D6              ;	ld		c,a							; c = R	div roll counter
 115+ A5D6              ;LL31:									; roll R
 116+ A5D6              ;	sla		a
 117+ A5D6              ;	jr		c,LL29						; hop to Reduce
 118+ A5D6              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 119+ A5D6              ;	sbc		a,(hl)						; a = a - Q
 120+ A5D6              ;	rl		c							; rotate R left
 121+ A5D6              ;	jr		c,LL31						; loop if R poped out a carry bit
 122+ A5D6              ;	jr		LL2Good
 123+ A5D6              ;LL29:									; Reduce
 124+ A5D6              ;	sbc		a,(hl)
 125+ A5D6              ;	scf
 126+ A5D6              ;	rl		c							; roll a carry flag into R
 127+ A5D6              ;	jr		c,LL31						;  loop R
 128+ A5D6              ;	jr		LL2Good
 129+ A5D6              ;LL2:
 130+ A5D6              ;	ld		c,$FF
 131+ A5D6              ;LL2Good:
 132+ A5D6              ;	ld		a,c
 133+ A5D6              ;	ld		(varR),a
 134+ A5D6              ;	ret
 135+ A5D6
# file closed: Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 757  A5D6                  INCLUDE "Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: Maths/Utilities/RequAdivQ-LL61.asm
   1+ A5D6              RequAdivQ:
   2+ A5D6              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ A5D6              LL61:										; Handling division R=A/Q for case further down
   4+ A5D6 4F           	ld		c,a								; c = A
   5+ A5D7 3A 31 92     	ld		a,(varQ)						; test for divide by 0
   6+ A5DA FE 00        	cp		0
   7+ A5DC 28 16        	jr		z,LL84							; divide by zero error
   8+ A5DE 57           	ld		d,a								; now we can do C/D
   9+ A5DF 06 08            ld b,8
  10+ A5E1 AF               xor a
  11+ A5E2              LL63:										; roll divide loop
  12+ A5E2 CB 21            sla c
  13+ A5E4 17               rla
  14+ A5E5 BA               cp d
  15+ A5E6 38 02            jr c,LL64
  16+ A5E8 0C               inc c
  17+ A5E9 92               sub d
  18+ A5EA              LL64:
  19+ A5EA 10 F6            djnz LL63
  20+ A5EC 32 30 92     	ld	(varU),a							; store remainder in U
  21+ A5EF 79           	ld	a,c
  22+ A5F0 32 32 92     	ld	(varR),a							; store remainder in R
  23+ A5F3 C9               ret
  24+ A5F4              LL84:										; div error  R=U=#5
  25+ A5F4 3E 32        	ld		a,50
  26+ A5F6 32 32 92     	ld		(varR),a
  27+ A5F9 32 30 92     	ld		(varU),a
  28+ A5FC C9           	ret
  29+ A5FD
# file closed: Maths/Utilities/RequAdivQ-LL61.asm
 758  A5FD                  INCLUDE "RSequABSrs-LL129.asm"
# file opened: Maths/Utilities/RSequABSrs-LL129.asm
   1+ A5FD              RSequABSrs:
   2+ A5FD              LL129:										; RS = abs(RS) and return Acc = hsb x1 EOR hi, Q = (1/)gradient
   3+ A5FD              		ldCopyByte UbnkGradient,varQ		; XX12+2	\ gradient to Q
   3+ A5FD 3A 7D C0    >               ld       a,(UbnkGradient)
   3+ A600 32 31 92    >               ld       (varQ),a
   4+ A603 3A 33 92     		ld		a,(varS)					;  S	\ hi
   5+ A606              		JumpOnBitClear a,7,LL127Positive	; hop to eor if S (Sign) is positive
   5+ A606 CB 7F       >                        bit 	7,a
   5+ A608 CA 19 A6    >                        jp      z,LL127Positive
   6+ A60B              .LL129Negative:
   7+ A60B 57           		ld		d,a							; save a copy of varS
   8+ A60C 2A 32 92     		ld		hl,(varR)
   9+ A60F              		NegHL
   9+ A60F AF          >	xor a
   9+ A610 95          >	sub l
   9+ A611 6F          >	ld l,a
   9+ A612 9F          >	sbc a,a
   9+ A613 94          >	sub h
   9+ A614 67          >	ld h,a
  10+ A615 22 32 92     		ld		(varR),hl
  11+ A618 7A           		ld		a,d							; restore a copy of varS
  12+ A619              LL127Positive:
  13+ A619              LL127:
  14+ A619 21 7E C0     		ld		hl,UBnkDeltaXHi				; XX12+3	\ Acc ^= quadrant info
  15+ A61C AE           		xor		(hl)						; a = original varS Xor Delta X Hi
  16+ A61D C9           		ret									; CLIP, bounding box is now done,
  17+ A61E
# file closed: Maths/Utilities/RSequABSrs-LL129.asm
 759  A61E                  INCLUDE "RSequQmulA-MULT12.asm"
# file opened: Maths/Utilities/RSequQmulA-MULT12.asm
   1+ A61E              asm_mult12:
   2+ A61E              RSequQmulA:
   3+ A61E              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ A61E CD 99 A4     	call APequQmulA
   5+ A621 08           	ex 	af,af'
   6+ A622 7A           	ld	a,d
   7+ A623 32 33 92     	ld	(varS),a
   8+ A626 7B           	ld	a,e
   9+ A627 32 32 92     	ld	(varR),a
  10+ A62A 08           	ex 	af,af'
  11+ A62B C9           	ret
  12+ A62C
# file closed: Maths/Utilities/RSequQmulA-MULT12.asm
 760  A62C              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 761  A62C                  INCLUDE "tidy.asm"
# file opened: Maths/Utilities/tidy.asm
   1+ A62C              ;rotmap0xLo: DB	0				; INWK +9
   2+ A62C              ;rotmap0xHi: DB	0				; INWK +10
   3+ A62C              ;rotmat0yLo: DB	0				; INWK +11
   4+ A62C              ;rotmat0yHi: DB	0				; INWK +12
   5+ A62C              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ A62C              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ A62C              ;rotmap1xLo: DB	0				; INWK +15
   8+ A62C              ;rotmap1xHi:	DB	0				; INWK +16
   9+ A62C              ;rotmat1yLo:	DB	0				; INWK +17
  10+ A62C              ;rotmat1yHi:	DB	0				; INWK +18
  11+ A62C              ;rotmat1zLo:	DB	0				; INWK +19
  12+ A62C              ;rotmat1zHi:	DB	0				; INWK +20
  13+ A62C              ;rotmat2xLo: DB	0				; INWK +21
  14+ A62C              ;rotmat2xHi:	DB	0				; INWK +22
  15+ A62C              ;rotmat2yLo:	DB	0				; INWK +23
  16+ A62C              ;rotmat2yHi:	DB	0				; INWK +24
  17+ A62C              ;rotmat2zLo:	DB	0				; INWK +25
  18+ A62C              ;rotmat2zHi:	DB	0				; INWK +26
  19+ A62C              ;
  20+ A62C              ;rotmatFx	equ	rotmat0xHi
  21+ A62C              ;rotmatFy	equ	rotmat0yHi
  22+ A62C              ;rotmatFz	equ	rotmat0zHi
  23+ A62C              ;rotmatUx	equ	rotmat1xHi
  24+ A62C              ;rotmatUy	equ	rotmat1yHi
  25+ A62C              ;rotmatUz	equ	rotmat1zHi
  26+ A62C              ;
  27+ A62C              ;inwkarray			equ		INWK+10
  28+ A62C
  29+ A62C                  include "Universe/CopyRotMattoXX15.asm"
# file opened: ./Universe/CopyRotMattoXX15.asm
   1++A62C              CopyRotMatNoseVtoXX15:
   2++A62C                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++A62C 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
   2++A62F 32 75 C0    >               ld       (XX15VecX),a
   3++A632                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++A632 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
   3++A635 32 76 C0    >               ld       (XX15VecY),a
   4++A638                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++A638 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
   4++A63B 32 77 C0    >               ld       (XX15VecZ),a
   5++A63E C9                   ret
   6++A63F
   7++A63F              CopyRotMatRoofVtoXX15:
   8++A63F                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++A63F 3A 1B C0    >               ld       a,(UBnkrotmatRoofvX+1)
   8++A642 32 75 C0    >               ld       (XX15VecX),a
   9++A645                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++A645 3A 1D C0    >               ld       a,(UBnkrotmatRoofvY+1)
   9++A648 32 76 C0    >               ld       (XX15VecY),a
  10++A64B                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++A64B 3A 1F C0    >               ld       a,(UBnkrotmatRoofvZ+1)
  10++A64E 32 77 C0    >               ld       (XX15VecZ),a
  11++A651 C9                   ret
  12++A652
  13++A652              CopyRotMatSideVtoXX15:
  14++A652                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++A652 3A 15 C0    >               ld       a,(UBnkrotmatSidevX+1)
  14++A655 32 75 C0    >               ld       (XX15VecX),a
  15++A658                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++A658 3A 17 C0    >               ld       a,(UBnkrotmatSidevY+1)
  15++A65B 32 76 C0    >               ld       (XX15VecY),a
  16++A65E                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++A65E 3A 19 C0    >               ld       a,(UBnkrotmatSidevZ+1)
  16++A661 32 77 C0    >               ld       (XX15VecZ),a
  17++A664 C9                   ret
  18++A665
# file closed: ./Universe/CopyRotMattoXX15.asm
  30+ A665
  31+ A665                  include "Universe/CopyXX15toRotMat.asm"
# file opened: ./Universe/CopyXX15toRotMat.asm
   1++A665              CopyXX15toRotMatNoseV:
   2++A665                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++A665 3A 75 C0    >               ld       a,(XX15VecX)
   2++A668 32 21 C0    >               ld       (UBnkrotmatNosevX+1),a
   3++A66B                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++A66B 3A 76 C0    >               ld       a,(XX15VecY)
   3++A66E 32 23 C0    >               ld       (UBnkrotmatNosevY+1),a
   4++A671                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++A671 3A 77 C0    >               ld       a,(XX15VecZ)
   4++A674 32 25 C0    >               ld       (UBnkrotmatNosevZ+1),a
   5++A677 C9                   ret
   6++A678
   7++A678              CopyXX15toRotMatRoofV:
   8++A678                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++A678 3A 75 C0    >               ld       a,(XX15VecX)
   8++A67B 32 1B C0    >               ld       (UBnkrotmatRoofvX+1),a
   9++A67E                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++A67E 3A 76 C0    >               ld       a,(XX15VecY)
   9++A681 32 1D C0    >               ld       (UBnkrotmatRoofvY+1),a
  10++A684                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++A684 3A 77 C0    >               ld       a,(XX15VecZ)
  10++A687 32 1F C0    >               ld       (UBnkrotmatRoofvZ+1),a
  11++A68A C9                   ret
  12++A68B
  13++A68B              CopyXX15toRotMatSideV:
  14++A68B                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++A68B 3A 75 C0    >               ld       a,(XX15VecX)
  14++A68E 32 15 C0    >               ld       (UBnkrotmatSidevX+1),a
  15++A691                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++A691 3A 76 C0    >               ld       a,(XX15VecY)
  15++A694 32 17 C0    >               ld       (UBnkrotmatSidevY+1),a
  16++A697                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++A697 3A 77 C0    >               ld       a,(XX15VecZ)
  16++A69A 32 19 C0    >               ld       (UBnkrotmatSidevZ+1),a
  17++A69D C9                   ret
  18++A69E
# file closed: ./Universe/CopyXX15toRotMat.asm
  32+ A69E
  33+ A69E              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ A69E              		; b = regX on entry
  35+ A69E              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ A69E 08           		ex		af,af'
  37+ A69F 78           		ld		a,b
  38+ A6A0 32 31 92     		ld		(varQ),a
  39+ A6A3 08           		ex		af,af'
  40+ A6A4 EE 80        		xor		$80							;	 flip sign of Acc
  41+ A6A6 CD 2D 9F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ A6A9              ; USES 				A BC E
  43+ A6A9              ; DOES NOT USE		D HL
  44+ A6A9              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ A6A9 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ A6AA E6 80        		and		$80							; ..
  47+ A6AC 5F           		ld		e,a							; ..
  48+ A6AD 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ A6AE E6 7F        		and		$7F							; ..
  50+ A6B0 06 FE        		ld		b,$FE						; slide counter T1
  51+ A6B2              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ A6B2 CB 27        		sla		a
  53+ A6B4              		JumpIfALTNusng $60, TIS1SkipSub
  53+ A6B4 FE 60       >                        cp      $60
  53+ A6B6 DA C3 A6    >                        jp		c,TIS1SkipSub
  54+ A6B9 DE 60        		sbc		a,$60							; subtract 96
  55+ A6BB 37           		scf
  56+ A6BC CB 10        		rl		b							;  T1
  57+ A6BE 38 F2        		jr		c,TIS1RollTLoop
  58+ A6C0              TIS1KIPCont:
  59+ A6C0 78           		ld		a,b							;   T1
  60+ A6C1 B3           		or		e							;   restore T sign
  61+ A6C2 C9           		ret
  62+ A6C3              TIS1SkipSub:
  63+ A6C3 B7           	or			a
  64+ A6C4 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ A6C6 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ A6C8 C3 C0 A6     	jp			TIS1KIPCont
  67+ A6CB
  68+ A6CB              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ A6CB              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ A6CB
  71+ A6CB
  72+ A6CB
  73+ A6CB
  74+ A6CB              TidyRotYSmall:
  75+ A6CB CD F7 A7     		call	CalcRoofvZ
  76+ A6CE 32 1F C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ A6D1 C3 05 A7     		jp		NormaliseRoofV
  78+ A6D4
  79+ A6D4              TidyRotXSmall:
  80+ A6D4 AF           		xor		a
  81+ A6D5 47           		ld		b,a
  82+ A6D6 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ A6D9 E6 60        		and		%01100000
  84+ A6DB CA CB A6     		jp		z,TidyRotYSmall
  85+ A6DE 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ A6E1 47           		ld		b,a							; b = regX for now
  87+ A6E2 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ A6E5 CD BD A7     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ A6E8 32 1D C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ A6EB C3 05 A7     		jp		NormaliseRoofV
  91+ A6EE              TIDY:
  92+ A6EE              ORTHOGALISE:
  93+ A6EE              ;-- NormaliseNosev
  94+ A6EE CD 2C A6     		call	CopyRotMatNoseVtoXX15
  95+ A6F1 CD F0 A1     		call	normaliseXX1596fast			; normalise z hi
  96+ A6F4 CD 65 A6     		call	CopyXX15toRotMatNoseV
  97+ A6F7              .CheckNXSmall:
  98+ A6F7 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
  99+ A6FA E6 60        		and		%01100000					; check top two magnitude bits
 100+ A6FC CA D4 A6     		jp		z,TidyRotXSmall
 101+ A6FF              .RotXIsBig:
 102+ A6FF CD 83 A7             call	CalcRoofvX
 103+ A702 32 1B C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 104+ A705              NormaliseRoofV:
 105+ A705 CD 3F A6     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 106+ A708 CD F0 A1     		call	normaliseXX1596fast			; normalise roof
 107+ A70B              ;calc sidev x
 108+ A70B CD 78 A6     		call	CopyXX15toRotMatRoofV		; get back normalised version
 109+ A70E 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)
 110+ A711 32 31 92     		ld		(varQ),a					; q = nosev_y
 111+ A714 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 112+ A717 CD 1E A6     		call	RSequQmulA
 113+ A71A 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 114+ A71D 47           		ld		b,a							; b = regX for now
 115+ A71E 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 116+ A721 CD 9E A6     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 117+ A724                      IfAIsZeroGoto NormSideXNoNeg
 117+ A724 FE 00       >				cp	0
 117+ A726 CA 2B A7    >				jp	z,NormSideXNoNeg
 118+ A729 EE 80        		xor		$80							; flip a to get -sidev_x
 119+ A72B              NormSideXNoNeg:
 120+ A72B 32 15 C0     		ld		(UBnkrotmatSidevX+1),a
 121+ A72E              ;calc sidev y
 122+ A72E 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 123+ A731 32 31 92     		ld		(varQ),a
 124+ A734 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 125+ A737 CD 1E A6     		call	RSequQmulA
 126+ A73A 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 127+ A73D 47           		ld		b,a							; b = regX for now
 128+ A73E 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 129+ A741 CD 9E A6     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 130+ A744                      IfAIsZeroGoto NormSideYNoNeg
 130+ A744 FE 00       >				cp	0
 130+ A746 CA 4B A7    >				jp	z,NormSideYNoNeg
 131+ A749 EE 80        		xor		$80							; flip a to get -sidev_y
 132+ A74B              NormSideYNoNeg:
 133+ A74B 32 23 C0     		ld		(UBnkrotmatNosevY+1),a
 134+ A74E              ;calc sidev z
 135+ A74E 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 136+ A751 32 31 92     		ld		(varQ),a
 137+ A754 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 138+ A757 CD 1E A6     		call	RSequQmulA
 139+ A75A 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 140+ A75D 47           		ld		b,a							; b = regX for now
 141+ A75E 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 142+ A761 CD 9E A6     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 143+ A764                      IfAIsZeroGoto NormSideZNoNeg
 143+ A764 FE 00       >				cp	0
 143+ A766 CA 6B A7    >				jp	z,NormSideZNoNeg
 144+ A769 EE 80        		xor		$80							; flip a to get -sidev_y
 145+ A76B              NormSideZNoNeg:
 146+ A76B 32 17 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 147+ A76E              .ClearLoBytes:
 148+ A76E 21 20 C0     		ld		hl,UBnkrotmatNosevX
 149+ A771 06 09        		ld		b,9
 150+ A773 AF                   xor     a
 151+ A774              .ClearLoLoop:
 152+ A774 77           		ld		(hl),a						; zero out lo bytes
 153+ A775 23           		inc		hl
 154+ A776 23           		inc		hl
 155+ A777 10 FB        		djnz	.ClearLoLoop
 156+ A779 CD 52 A6     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 157+ A77C CD F0 A1     		call	normaliseXX1596fast			; normalise roof
 158+ A77F              ;calc sidev x
 159+ A77F CD 8B A6     		call	CopyXX15toRotMatSideV		; get back normalised version
 160+ A782
 161+ A782 C9           		ret
 162+ A783
 163+ A783
 164+ A783
 165+ A783              ;;;;;;;;.CheckNYSmall:
 166+ A783              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 167+ A783              ;;;;;;;;		and		$7F
 168+ A783              ;;;;;;;;		cp		0
 169+ A783              ;;;;;;;;		jp		z,Tidy1RZ
 170+ A783              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 171+ A783              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 172+ A783              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 173+ A783              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 174+ A783              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 175+ A783              ;;;;;;;;.DoNZ:
 176+ A783              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 177+ A783              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 178+ A783              ;;;;;;;;NormaliseRoofv:
 179+ A783              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 180+ A783              ;;;;;;;;		push	bc
 181+ A783              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 182+ A783              ;;;;;;;;		pop		bc
 183+ A783              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 184+ A783              ;;;;;;;;ProcessSidev:
 185+ A783              ;;;;;;;;; -- SIDEV X
 186+ A783              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 187+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 188+ A783              ;;;;;;;;		push	bc
 189+ A783              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 190+ A783              ;;;;;;;;		pop		bc
 191+ A783              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 192+ A783              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 193+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 194+ A783              ;;;;;;;;		push	bc
 195+ A783              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 196+ A783              ;;;;;;;;		pop		bc
 197+ A783              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 198+ A783              ;;;;;;;;; -- SIDEV Y
 199+ A783              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 200+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 201+ A783              ;;;;;;;;		push	bc
 202+ A783              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 203+ A783              ;;;;;;;;		pop		bc
 204+ A783              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 205+ A783              ;;;;;;;;		ld		b,a
 206+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 207+ A783              ;;;;;;;;		push	bc
 208+ A783              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 209+ A783              ;;;;;;;;		pop		bc
 210+ A783              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 211+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 212+ A783              ;;;;;;;;		push	bc
 213+ A783              ;;;;;;;;; -- SIDEV Z
 214+ A783              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 215+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 216+ A783              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 217+ A783              ;;;;;;;;		pop		bc
 218+ A783              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 219+ A783              ;;;;;;;;		ld		b,a
 220+ A783              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 221+ A783              ;;;;;;;;		push	bc
 222+ A783              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 223+ A783              ;;;;;;;;		pop		bc
 224+ A783              ;;;;;;;;		ld		(sidev_z+1),a
 225+ A783              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 226+ A783              ;;;;;;;;		ld		hl,sidev_z
 227+ A783              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 228+ A783              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 229+ A783              ;;;;;;;;NormaliseSideV:
 230+ A783              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 231+ A783              ;;;;;;;;		push	bc
 232+ A783              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 233+ A783              ;;;;;;;;		pop		bc
 234+ A783              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 235+ A783              ;;;;;;;;
 236+ A783
 237+ A783
 238+ A783              CalcRoofvX:
 239+ A783              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 240+ A783              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 240+ A783 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 240+ A786 32 31 92    >               ld       (varQ),a
 241+ A789 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 242+ A78C CD 1E A6     		call	RSequQmulA						; rs = nosez hi * roofz hi
 243+ A78F              		ldCopyByte UBnkrotmatNosevY+1,varQ
 243+ A78F 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 243+ A792 32 31 92    >               ld       (varQ),a
 244+ A795 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 245+ A798 CD 2D 9F     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 246+ A79B 7A           		ld		a,d
 247+ A79C E6 80        		and 	$80
 248+ A79E FD 67        		ld		iyh,a
 249+ A7A0              ;DEBUG		ld		c,a
 250+ A7A0 3A 21 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 251+ A7A3 4F           		ld		c,a								; temp save
 252+ A7A4 E6 80        		and		$80
 253+ A7A6 FD AC        		xor		iyh								; flip from saved multiply sign result
 254+ A7A8 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 255+ A7AA 79           		ld		a,c								; recover a
 256+ A7AB E6 7F        		and		$7F								; a is unsigned nosev x
 257+ A7AD 42           		ld		b,d
 258+ A7AE 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 259+ A7AF 57           		ld		d,a								; de = nosev x hi
 260+ A7B0 1E 00        		ld		e,0
 261+ A7B2 CD 72 A0     		call	BC_Div_DE
 262+ A7B5 FD 7C        		ld		a,iyh							; get back sign from nosevx
 263+ A7B7 EE 80        		xor		$80								; flip sign
 264+ A7B9 E6 80        		and		$80								; keep sign bit only
 265+ A7BB B0           		or		b
 266+ A7BC C9           		ret
 267+ A7BD
 268+ A7BD
 269+ A7BD              CalcRoofvY:
 270+ A7BD              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 271+ A7BD              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 271+ A7BD 3A 25 C0    >               ld       a,(UBnkrotmatNosevZ+1)
 271+ A7C0 32 31 92    >               ld       (varQ),a
 272+ A7C3 3A 1F C0     		ld		a,(UBnkrotmatRoofvZ+1)
 273+ A7C6 CD 1E A6     		call	RSequQmulA
 274+ A7C9              		ldCopyByte UBnkrotmatNosevX+1,varQ
 274+ A7C9 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 274+ A7CC 32 31 92    >               ld       (varQ),a
 275+ A7CF 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 276+ A7D2 CD 2D 9F     		call	madXAequQmulAaddRS
 277+ A7D5 7A           		ld		a,d
 278+ A7D6 E6 80        		and 	$80
 279+ A7D8 FD 67        		ld		iyh,a
 280+ A7DA 3A 23 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 281+ A7DD 4F           		ld		c,a								; temp save
 282+ A7DE E6 80        		and		$80
 283+ A7E0 FD AC        		xor		iyh								; flip from saved multiply sign result
 284+ A7E2 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 285+ A7E4 79           		ld		a,c								; recover a
 286+ A7E5 E6 7F        		and		$7F								; a is unsigned nosev x
 287+ A7E7 42           		ld		b,d
 288+ A7E8 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 289+ A7E9 57           		ld		d,a								; de = nosev x hi
 290+ A7EA 1E 00        		ld		e,0
 291+ A7EC CD 72 A0     		call	BC_Div_DE
 292+ A7EF FD 7C        		ld		a,iyh
 293+ A7F1 EE 80        		xor		$80
 294+ A7F3 E6 80        		and		$80
 295+ A7F5 B0           		or		b
 296+ A7F6 C9           		ret
 297+ A7F7
 298+ A7F7              CalcRoofvZ:
 299+ A7F7              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 300+ A7F7              		ldCopyByte UBnkrotmatNosevY+1,varQ
 300+ A7F7 3A 23 C0    >               ld       a,(UBnkrotmatNosevY+1)
 300+ A7FA 32 31 92    >               ld       (varQ),a
 301+ A7FD 3A 1D C0     		ld		a,(UBnkrotmatRoofvY+1)
 302+ A800 CD 1E A6     		call	RSequQmulA						; rs = NOSEy * ROOFy
 303+ A803              		ldCopyByte UBnkrotmatNosevX+1,varQ
 303+ A803 3A 21 C0    >               ld       a,(UBnkrotmatNosevX+1)
 303+ A806 32 31 92    >               ld       (varQ),a
 304+ A809 3A 1B C0     		ld		a,(UBnkrotmatRoofvX+1)
 305+ A80C CD 2D 9F     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 306+ A80F 7A           		ld		a,d
 307+ A810 E6 80        		and 	$80
 308+ A812 FD 67        		ld		iyh,a
 309+ A814 3A 25 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 310+ A817 4F           		ld		c,a								; temp save
 311+ A818 E6 80        		and		$80
 312+ A81A FD AC        		xor		iyh								; flip from saved multiply sign result
 313+ A81C FD 67        		ld		iyh,a							; save nosesev sign to iyh
 314+ A81E 79           		ld		a,c								; recover a
 315+ A81F E6 7F        		and		$7F								; a is unsigned nosev x
 316+ A821 42           		ld		b,d
 317+ A822 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 318+ A823 57           		ld		d,a								; de = nosev x hi
 319+ A824 1E 00        		ld		e,0
 320+ A826 CD 72 A0     		call	BC_Div_DE
 321+ A829 FD 7C        		ld		a,iyh
 322+ A82B EE 80        		xor		$80
 323+ A82D E6 80        		and		$80
 324+ A82F B0           		or		b
 325+ A830 C9           		ret
 326+ A831
 327+ A831
 328+ A831
 329+ A831              ;;ProcessSidev:
 330+ A831              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 331+ A831              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 332+ A831              ;;		push	bc
 333+ A831              ;;		call	RSequQmulA					; RS = Q * A MULT12
 334+ A831              ;;		pop		bc
 335+ A831              ;;		ld		a,(UBnkrotmatNosevY+1)
 336+ A831              ;;		ld		b,a							; set x (b) to value of nosev_z
 337+ A831              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 338+ A831              ;;		push	bc
 339+ A831              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 340+ A831              ;;		pop		bc
 341+ A831              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 342+ A831              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 343+ A831              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 344+ A831              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 345+ A831              ;;		push	bc
 346+ A831              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 347+ A831              ;;		pop		bc
 348+ A831              ;;		ld		a,(UBnkrotmatNosevZ+1)
 349+ A831              ;;		ld		b,a
 350+ A831              ;;		ld		a,(UBnkrotmatNosevY+1)
 351+ A831              ;;		push	bc
 352+ A831              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 353+ A831              ;;		pop		bc
 354+ A831              ;;		xor		$80							; a *= -1
 355+ A831              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 356+ A831              ;;		ld		a,(UBnkrotmatRoofvY+1)
 357+ A831              ;;		push	bc
 358+ A831              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 359+ A831              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 360+ A831              ;;		call	RSequQmulA					; RS = Q * A MULT12
 361+ A831              ;;		pop		bc
 362+ A831              ;;		ld		a,(UBnkrotmatNosevX+1)
 363+ A831              ;;		ld		b,a
 364+ A831              ;;		ld		a,(UBnkrotmatRoofvY+1)
 365+ A831              ;;		push	bc
 366+ A831              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 367+ A831              ;;		pop		bc
 368+ A831              ;;		xor		$80
 369+ A831              ;;		ld		(UBnkrotmatSidevZ+1),a
 370+ A831              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 371+ A831              ;;		ld		hl,UBnkrotmatSidevZ
 372+ A831              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 373+ A831              ;;		ld		hl,UBnkrotmatNosevX
 374+ A831
 375+ A831
 376+ A831
 377+ A831
 378+ A831
 379+ A831
 380+ A831              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 381+ A831              ;;;;;;;;.ProcessRoofv:
 382+ A831              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 383+ A831              ;;;;;;;;		push	bc
 384+ A831              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 385+ A831              ;;;;;;;;		pop		bc
 386+ A831              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 387+ A831              ;;;;;;;;.ProcessSidev:
 388+ A831              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 389+ A831              ;;;;;;;;		push	bc
 390+ A831              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 391+ A831              ;;;;;;;;		pop		bc
 392+ A831              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 393+ A831
# file closed: Maths/Utilities/tidy.asm
 762  A831                  INCLUDE "XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ A831              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ A831              TIS1:
   3+ A831 08           		ex		af,af'
   4+ A832 3A 5C 91     		ld		a,(regX)
   5+ A835 47           		ld		b,a
   6+ A836 08           		ex		af,af'
   7+ A837              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ A837 08           		ex		af,af'
   9+ A838 78           		ld		a,b
  10+ A839 32 31 92     		ld		(varQ),a
  11+ A83C 08           		ex		af,af'
  12+ A83D EE 80        		xor		$80							;	 flip sign of Acc
  13+ A83F CD 2D 9F     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ A842              ; USES 				A BC E
  15+ A842              ; DOES NOT USE		D HL
  16+ A842              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ A842 47           		ld		b,a
  18+ A843 E6 80        		and		$80							;	hi sign
  19+ A845 5F           		ld		e,a							;   e = varT
  20+ A846 78           		ld		a,b
  21+ A847 E6 7F        		and		$7F							;	hi A7
  22+ A849 06 FE        		ld		b,$FE						;   slide counter
  23+ A84B 48           		ld		c,b							;   c == T1 ::  T1
  24+ A84C              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ A84C CB 27        		sla		a
  26+ A84E FE 60        		cp		$60							; max 96
  27+ A850 30 02        		jr		nc,.DV4
  28+ A852 DE 60        		sbc		a,$60							;  SBC #&60
  29+ A854              .DV4:										; skip subtraction
  30+ A854 CB 11        		rl		c							;  T1
  31+ A856 38 F4        		jr		c,.DVL3
  32+ A858 79           		ld		a,c							;   T1
  33+ A859 B3           		or		e							;   restore T sign
  34+ A85A C9           		ret
  35+ A85B
# file closed: Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 763  A85B              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 764  A85B              ;INCLUDE "XHiYLoequPA-gc3.asm"
 765  A85B              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 766  A85B              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 767  A85B              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 768  A85B                  INCLUDE "XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
# file opened: Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm
   1+ A85B              ; Pile of crap doesn't do S properly
   2+ A85B              XYeqyx1loSmulMdiv256:
   3+ A85B              LL120:										;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   4+ A85B              		ldCopyByte UBnKx1Lo,varR			; XX15+0	\ x1 lo to varR
   4+ A85B 3A 75 C0    >               ld       a,(UBnKx1Lo)
   4+ A85E 32 32 92    >               ld       (varR),a
   5+ A861              ; TODO note that the next call does things with delta etc not just as the title says
   6+ A861 CD FD A5     		call		RSequABSrs				;LL129	\ RS = abs(x1=RS) and return with
   7+ A864 F5           		push		af						; store Acc = hsb x1 EOR quadrant_info, Q = (1/)gradient
   8+ A865              ; Do some caching of varQ, VarR, VarS
   9+ A865 3A 31 92             ld          a,(varQ)
  10+ A868 26 00        		ld			h,0
  11+ A86A 6F                   ld          l,a                     ; use D to hold working value of Q
  12+ A86B ED 5B 32 92  		ld			de,(varR)				; load DE with varS.varR (r low s hi)
  13+ A86F              ; See if T is a steep toggle or not
  14+ A86F              		ldIXLaFromN varT					; ixl = a = T steep toggle = 0 or FF for steep/shallow down
  14+ A86F 3A 4E 92    >                ld		a,(varT)
  14+ A872 DD 6F       >                ld		ixl,a
  15+ A874              		IfANotZeroGoto DownSteepLL121	    ; LL121 down Steep
  15+ A874 FE 00       >				cp	0
  15+ A876 C2 9E A8    >				jp	nz,DownSteepLL121
  16+ A879              ShallowLL122:
  17+ A879              LL122:										; else Shallow return step, also arrive from LL123 for steep stepX
  18+ A879              ; here we calulate YX = SR * Q
  19+ A879              ; so we have already loaded DE with S.R and HL with 0.Q
  20+ A879 CD 50 9F     		call		mulDEbyHL				; hl = SR & Q
  21+ A87C F1           		pop			af						; restore quadrant info
  22+ A87D              		JumpOnBitSet	a,7,LL126NoFlipNeeded     ; flip XY sign only if needs be, this should have been written as bit set in the previous code version
  22+ A87D CB 7F       >                        bit 	7,a
  22+ A87F C2 85 A8    >                        jp      nz,LL126NoFlipNeeded
  23+ A882              LL126FlipXY:
  24+ A882 CD BC A1             call        negate16hl				; Flip HL and transfer to bc and ixl iyl
  25+ A885              LL126NoFlipNeeded:								; just transfer teh result into bc and ixl iyl
  26+ A885 E5           		push		hl
  27+ A886 C1           		pop			bc
  28+ A887 DD 69                ld          ixl,c
  29+ A889 FD 68                ld          iyl,b
  30+ A88B C9           		ret
  31+ A88C              ;--------------------------------------------
  32+ A88C              ; TODO CLEAR UP THIS AS ITS OVER COMPLEX
  33+ A88C              XYeqyRSmulMdiv256:
  34+ A88C              LL123:										; X.Y=R.S*256/M (M=grad.)	\ where 256/M is gradient
  35+ A88C CD FD A5     		call		RSequABSrs				; LL129	\ RS = abs(y1=RS) and return with
  36+ A88F F5           		push		af						; store  Acc = hsb x1 EOR hi, Q = (1/)gradient
  37+ A890 ED 4B 32 92          ld			bc,(varR)               ; load BC with varS.varR (r low s hi)
  38+ A894 3A 4E 92     		ld			a,(varT)				; T	\ steep toggle = 0 or FF for steep/shallow up
  39+ A897 DD 6F        		ld			ixl,a					; x = t
  40+ A899              		IfAIsZeroGoto ShallowLL122			; up Shallow
  40+ A899 FE 00       >				cp	0
  40+ A89B CA 79 A8    >				jp	z,ShallowLL122
  41+ A89E              DownSteepLL121:
  42+ A89E 3A 31 92     		ld          a,(varQ)
  43+ A8A1 16 00        		ld			d,0
  44+ A8A3 5F                   ld          e,a                     ; DE = Gradient Q
  45+ A8A4 CD 15 A0     		call		DIV16BCDivDEUNDOC		; bc = s.r * Q as we pulled in bc earlier
  46+ A8A7 F1                   pop         af                      ; restore quadrant info
  47+ A8A8              		JumpOnBitSet a,7,LL133oFlipNeeded	; just exit if a was negativ
  47+ A8A8 CB 7F       >                        bit 	7,a
  47+ A8AA C2 B3 A8    >                        jp      nz,LL133oFlipNeeded
  48+ A8AD              L1133:
  49+ A8AD              L1133FlipNeede:
  50+ A8AD              		NegBC
  50+ A8AD AF          >	xor a
  50+ A8AE 91          >	sub c
  50+ A8AF 4F          >	ld c,a
  50+ A8B0 9F          >	sbc a,a
  50+ A8B1 90          >	sub  b
  50+ A8B2 47          >	ld b,a
  51+ A8B3              LL133oFlipNeeded:
  52+ A8B3 DD 69                ld          ixl,c
  53+ A8B5 FD 68                ld          iyl,b                   ; get
  54+ A8B7 C9           		ret									; else done
  55+ A8B8
  56+ A8B8
# file closed: Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm
 769  A8B8
 770  A8B8
 771  A8B8                  INCLUDE "Drive/drive_access.asm"
# file opened: Drive/drive_access.asm
   1+ A8B8              M_GETSETDRV             equ $89
   2+ A8B8              F_OPEN                  equ $9a
   3+ A8B8              F_CLOSE                 equ $9b
   4+ A8B8              F_READ                  equ $9d
   5+ A8B8              F_WRITE                 equ $9e
   6+ A8B8              F_SEEK                  equ $9f
   7+ A8B8
   8+ A8B8              FA_READ                 equ $01
   9+ A8B8              FA_APPEND               equ $06
  10+ A8B8              FA_OVERWRITE            equ $0C
  11+ A8B8
  12+ A8B8 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ A8BC DD E5
  13+ A8BE AF                                   xor	    a	; set drive. 0 is default
  14+ A8BF CF                                   rst	    $08
  15+ A8C0 89                                   db	    $89
  16+ A8C1 32 CB A8                             ld	    (DefaultDrive),a
  17+ A8C4 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ A8C8 C1 F1
  18+ A8CA C9                                   ret
  19+ A8CB 00           DefaultDrive:	        db	0
  20+ A8CC
  21+ A8CC              ; *******************************************************************************************************
  22+ A8CC              ;	Function:	Open a file read for reading/writing
  23+ A8CC              ;	In:		ix = filename
  24+ A8CC              ;			b  = Open filemode
  25+ A8CC              ;	ret		a  = handle, 0 on error
  26+ A8CC              ; *******************************************************************************************************
  27+ A8CC E5 DD E5     fOpen:	                push	hl,,ix
  28+ A8CF DD E5                                push	ix
  29+ A8D1 3A CB A8                             ld	    a,(DefaultDrive)
  30+ A8D4 CF                                   rst	    $08
  31+ A8D5 9A                                   db	    F_OPEN
  32+ A8D6 DD E1 E1                             pop	    hl,,ix
  33+ A8D9 C9                                   ret
  34+ A8DA
  35+ A8DA              ; *******************************************************************************************************
  36+ A8DA              ;	Function	Read bytes from the open file
  37+ A8DA              ;	In:		ix  = address to read into
  38+ A8DA              ;			bc  = amount to read
  39+ A8DA              ;	ret:		carry set = error
  40+ A8DA              ; *******************************************************************************************************
  41+ A8DA B7           fRead:                  or   	a             ; is it zero?
  42+ A8DB C8                                   ret  	z             ; if so return
  43+ A8DC E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ A8DF E1                                   pop		hl
  45+ A8E0 CF                                   rst	    $08
  46+ A8E1 9D                                   db	    F_READ
  47+ A8E2 E1                                   pop	    hl
  48+ A8E3 C9                                   ret
  49+ A8E4
  50+ A8E4              ; *******************************************************************************************************
  51+ A8E4              ;	Function	Read bytes from the open file
  52+ A8E4              ;	In:		ix  = address to read into
  53+ A8E4              ;			bc  = amount to read
  54+ A8E4              ;	ret:		carry set = error
  55+ A8E4              ; *******************************************************************************************************
  56+ A8E4 B7           fWrite:                 or   	a             ; is it zero?
  57+ A8E5 C8                                   ret  	z             ; if so return
  58+ A8E6 E5 DD E5                             push	hl,,ix
  59+ A8E9 E1                                   pop	    hl
  60+ A8EA CF                                   rst	    $08
  61+ A8EB 9E                                   db	    F_WRITE
  62+ A8EC E1                                   pop	    hl
  63+ A8ED C9                                   ret
  64+ A8EE
  65+ A8EE              ; *******************************************************************************************************
  66+ A8EE              ;	Function:	Close open file
  67+ A8EE              ;	In:		a  = handle
  68+ A8EE              ;	ret		a  = handle, 0 on error
  69+ A8EE              ; *******************************************************************************************************
  70+ A8EE B7           fClose:		            or   	a             ; is it zero?
  71+ A8EF C8                                   ret  	z             ; if so return
  72+ A8F0 CF                                   rst	    $08
  73+ A8F1 9B                                   db	    F_CLOSE
  74+ A8F2 C9                                   ret
  75+ A8F3
  76+ A8F3              ; *******************************************************************************************************
  77+ A8F3              ;	Function	Read bytes from the open file
  78+ A8F3              ;	In:		a   = file handle
  79+ A8F3              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ A8F3              ;			BCDE = bytes to seek
  81+ A8F3              ;	ret:		BCDE = file pos from start
  82+ A8F3              ; *******************************************************************************************************
  83+ A8F3 DD E5 E5     fSeek:                  push	ix,,hl
  84+ A8F6 CF                                   rst	    $08
  85+ A8F7 9F                                   db	    F_SEEK
  86+ A8F8 E1 DD E1                             pop	    ix,,hl
  87+ A8FB C9                                   ret
  88+ A8FC
  89+ A8FC              ; *******************************************************************************************************
  90+ A8FC              ; Init the file system
  91+ A8FC              ; *******************************************************************************************************
  92+ A8FC CD B8 A8     InitFileSystem:         call    GetDefaultDrive
  93+ A8FF C9                                   ret
  94+ A900
  95+ A900              ; *******************************************************************************************************
  96+ A900              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ A900              ; In:		hl = file data pointer
  98+ A900              ;		ix = address to load to
  99+ A900              ; *******************************************************************************************************
 100+ A900 CD B8 A8     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ A903 C5 D5 F5                             push	bc,,de,,af
 102+ A906                                      ; get file size
 103+ A906 4E                                   ld	    c,(hl)
 104+ A907 2C                                   inc	    l
 105+ A908 46                                   ld	    b,(hl)
 106+ A909 2C                                   inc	    l
 107+ A90A C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ A90D E5                                   push	hl				; get name into ix
 109+ A90E DD E1                                pop	    ix
 110+ A910 06 01                                ld      b,FA_READ		; mode open for reading
 111+ A912 CD CC A8                             call    fOpen
 112+ A915 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ A917 FE 00                                cp	    0				; was file handle 0?
 114+ A919 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ A91B DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ A91E F5                                   push	af				; remember handle
 117+ A91F CD DA A8                             call	fRead			; read data from A to address IX of length BC
 118+ A922 38 0C                                jr	    c,.error_reading
 119+ A924 F1                                   pop	    af			    ; get handle back
 120+ A925 CD EE A8                             call	fClose			; close file
 121+ A928 38 07                                jr	    c,.error_closing
 122+ A92A F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ A92D C9                                   ret
 124+ A92E              ;
 125+ A92E              ; On error, display error code an lock up so we can see it
 126+ A92E              ;
 127+ A92E DD E1        .error_opening:         pop	ix
 128+ A930 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ A931
 130+ A931              .error_closing:
 131+ A931 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ A932 D1                                   pop	de
 133+ A933 C1                                   pop	bc
 134+ A934 C9                                   ret
 135+ A935
 136+ A935              ; *******************************************************************************************************
 137+ A935              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ A935              ; In:		hl = file data pointer
 139+ A935              ;		ix = address to save from
 140+ A935              ;		bc = size
 141+ A935              ; *******************************************************************************************************
 142+ A935 CD B8 A8     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ A938 C5 E5                                push	bc,,hl   			; store size& save address
 144+ A93A E5                                   push	hl		        	; get name into ix
 145+ A93B DD E1                                pop	    ix
 146+ A93D 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ A93F CD CC A8                             call    fOpen
 148+ A942 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ A944 FE 00                                cp	    0			        ; was file handle 0?
 150+ A946 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ A948 DD E1                                pop	    ix			        ; get save address back
 152+ A94A C1                                   pop	    bc			        ; get size back
 153+ A94B F5                                   push	af			        ; remember handle
 154+ A94C CD E4 A8                             call	fWrite			    ; read data from A to address IX of length BC
 155+ A94F 38 04                                jr	c,.error
 156+ A951 F1                                   pop	af			            ; get handle back
 157+ A952 CD EE A8                             call	fClose			    ; close file
 158+ A955 C9           .error:                 ret
 159+ A956              ;
 160+ A956              ; On error, display error code an lock up so we can see it
 161+ A956              ;
 162+ A956 DD E1        .error_opening:         pop	ix
 163+ A958 C1                                   pop	bc	; don't pop a, need error code
 164+ A959 C9                                   ret
 165+ A95A
# file closed: Drive/drive_access.asm
 772  A95A
 773  A95A                  INCLUDE "common_menu.asm"
# file opened: Menus/common_menu.asm
   1+ A95A 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ A95E 41 4E 44 45
   1+ A962 52 00
   2+ A964 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ A968 4E 54 4F 52
   2+ A96C 59 00
   3+ A96E 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ A972 65 6E 74 20
   3+ A976 53 79 73 74
   3+ A97A 65 6D 20 20
   3+ A97E 20 3A 00
   4+ A981 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ A985 72 73 70 61
   4+ A989 63 65 20 53
   4+ A98D 79 73 74 65
   4+ A991 6D 3A 00
   5+ A994 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ A998 69 74 69 6F
   5+ A99C 6E 20 20 20
   5+ A9A0 3A 00
   6+ A9A2 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ A9A6 20 20 20 20
   6+ A9AA 20 20 20 20
   6+ A9AE 3A 00
   7+ A9B0 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ A9B4 20 20 20 20
   7+ A9B8 20 20 20 20
   7+ A9BC 3A 00
   8+ A9BE 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ A9C2 6C 20 53 74
   8+ A9C6 61 74 75 73
   8+ A9CA 3A 00
   9+ A9CC 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ A9D0 6E 67 20 20
   9+ A9D4 20 20 20 20
   9+ A9D8 3A 00
  10+ A9DA 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ A9DE 50 4D 45 4E
  10+ A9E2 54 3A 00
  11+ A9E5
  12+ A9E5 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ A9E9 20 4C 69 67
  12+ A9ED 68 74 20 59
  12+ A9F1 65 61 72 73
  12+ A9F5 00
  13+ A9F6 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ A9FA 58 58 58 58
  13+ A9FE 58 58 00
  14+ AA01 2E           txt_cash_decimal        DB "."
  15+ AA02 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AA06 00
  16+ AA07
  17+ AA07              txt_status_colour		equ $FF
  18+ AA07
  19+ AA07              print_boiler_text_l2:
  20+ AA07              ; ">print_boilder_text hl = text structure, b = message count"
  21+ AA07              BoilerTextLoop:
  22+ AA07 C5           	push		bc			; Save Message Count loop value
  23+ AA08 4E           	ld			c,(hl)		; Get Row into b
  24+ AA09 23           	inc			hl
  25+ AA0A 46           	ld			b,(hl)		; Get Col into b
  26+ AA0B 23           	inc			hl
  27+ AA0C 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ AA0D 23           	inc			hl
  29+ AA0E 56           	ld			d,(hl)		; Get text address Hi into E
  30+ AA0F 23           	inc			hl
  31+ AA10 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ AA11 EB           	ex			de,hl		; now hl = address of text data
  33+ AA12 1E FF        	ld			e,txt_status_colour
  34+ AA14                  MMUSelectLayer2
  34+ AA14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ AA18 CD 80 E0     	call		l1_print_at
  36+ AA1B E1           	pop			hl
  37+ AA1C C1           	pop			bc
  38+ AA1D 10 E8        	djnz		BoilerTextLoop
  39+ AA1F C9           	ret
  40+ AA20
  41+ AA20
  42+ AA20              print_boiler_text:
  43+ AA20              ; ">print_boilder_text hl = text structure, b = message count"
  44+ AA20              .BoilerTextLoop:
  45+ AA20 C5           	push		bc			; Save Message Count loop value
  46+ AA21 4E           	ld			c,(hl)		; Get Row into b
  47+ AA22 23           	inc			hl
  48+ AA23 46           	ld			b,(hl)		; Get Col into b
  49+ AA24 23           	inc			hl
  50+ AA25 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ AA26 23           	inc			hl
  52+ AA27 56           	ld			d,(hl)		; Get text address Hi into E
  53+ AA28 23           	inc			hl
  54+ AA29 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ AA2A EB           	ex			de,hl		; now hl = address of text data
  56+ AA2B 1E FF        	ld			e,txt_status_colour
  57+ AA2D C5           	push		bc
  58+ AA2E D1           	pop			de
  59+ AA2F CD 80 E0     	call		l1_print_at
  60+ AA32 E1           	pop			hl
  61+ AA33 C1           	pop			bc
  62+ AA34 10 EA        	djnz		.BoilerTextLoop
  63+ AA36 C9           	ret
  64+ AA37
  65+ AA37              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++AA37
   2++AA37
   3++AA37 3A E4 92     	ld		a,(Fuel)
   4++AA3A 11 E5 A9     	ld		de,txt_fuel_level
   5++AA3D 0E 9C        	ld	c, -100
   6++AA3F CD 49 AA     	call	.Num1
   7++AA42 0E F6        	ld	c,-10
   8++AA44 CD 49 AA     	call	.Num1
   9++AA47 0E FF        	ld	c,-1
  10++AA49              .Num1:
  11++AA49 06 2F        	ld	b,'0'-1
  12++AA4B              .Num2:
  13++AA4B 04           	inc		b
  14++AA4C 81           	add		a,c
  15++AA4D 38 FC        	jr		c,.Num2
  16++AA4F 91           	sub 	c
  17++AA50 C5           	push	bc
  18++AA51 F5           	push	af
  19++AA52 79           	ld		a,c
  20++AA53 FE FF        	cp		-1
  21++AA55 CC 5E AA     	call	z,.InsertDot
  22++AA58 78           	ld		a,b
  23++AA59 12           	ld		(de),a
  24++AA5A 13           	inc		de
  25++AA5B F1           	pop		af
  26++AA5C C1           	pop		bc
  27++AA5D C9           	ret
  28++AA5E              .InsertDot:
  29++AA5E 3E 2E        	ld		a,'.'
  30++AA60 12           	ld		(de),a
  31++AA61 13           	inc		de
  32++AA62 C9           	ret
  33++AA63
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ AA63
  67+ AA63 2A E0 92     GetCash:                ld      hl,(Cash)
  68+ AA66 EB                                   ex      de,hl
  69+ AA67 DD 2A E2 92                          ld      ix,(Cash+2)
  70+ AA6B FD 21 F6 A9                          ld		iy,txt_cash_amount
  71+ AA6F CD 82 A3                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ AA72 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ AA75 32 02 AA                             ld		(txt_cash_fraction),a
  74+ AA78 21 F7 A9     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ AA7B 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ AA7C FE 00                                cp		0
  77+ AA7E C8                                   ret		z
  78+ AA7F FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ AA83 C9                                   ret
  80+ AA84
# file closed: Menus/common_menu.asm
 774  AA84              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 775  AA84              ;INCLUDE "./title_page.asm"
 776  AA84
 777  AA84              ; Blocks dependent on variables in Universe Banks
 778  AA84              ; Bank 49
 779  AA84              ;    SEG RESETUNIVSEG
 780  AA84              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 781  AA84              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 782  AA84
 783  AA84              ;	ORG ResetUniverseAddr
 784  AA84              ;INCLUDE "GameEngine/resetUniverse.asm"
 785  AA84              ; Bank 50
 786  AA84
 787  AA84
 788  AA84
 789  AA84                  SLOT    MenuShrChtAddr
 790  AA84                  PAGE    BankMenuShrCht
 791  AA84              	ORG     MenuShrChtAddr,BankMenuShrCht
 792  C000                  INCLUDE "short_range_chart_menu.asm"
# file opened: Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 7B 9D  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD 80 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B D8 92                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD CB E0                             call	sprite_local_cursor
  39+ C0EB 3A E4 92                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 5A E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 5B 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0FD ED 5B D8 92                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD D3 E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A E6 92     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 5B 93                          ld      bc,(TargetPlanetX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 55 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 81 F6                             call	GetDigramWorkingSeed
  64+ C124 21 41 9E                             ld		hl,name_expanded
  65+ C127 CD 9C 9D                             call	CapitaliseString
  66+ C12A 21 41 9E                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 5B 93                          ld		bc,(TargetPlanetX)              ; bc = selected jump
  72+ C134 ED 5B D8 92                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c
  74+ C139 93                                   sub		e
  75+ C13A F2 4B C1                             jp      p,.NoFlipX
  76+ C13D ED 44                                neg
  77+ C13F CB 27                                sla		a
  78+ C141 CB 27                                sla		a
  79+ C143 4F                                   ld      c,a
  80+ C144 3E 80                                ld      a,src_x_centre
  81+ C146 91                                   sub     c
  82+ C147 4F                                   ld      c,a
  83+ C148 C3 52 C1                             jp      .fixY
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD A6 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 62 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A E6 92     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 5B 93                          ld      bc,(TargetPlanetX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 55 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A E6 92     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B D8 92                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 5B 93                          ld      bc,(TargetPlanetX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD E8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 57 93                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 82 A3                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD B6 A1                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD B6 A1                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD B6 A1                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c,.NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c,.NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 43 96     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A E6 92                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 81 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 41 9E                             ld		hl,name_expanded
 258+ C2C2 CD 9C 9D                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 41 9E                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 41 9E                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 F7 91                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 43 96     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A E6 92     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 81 F6                             call	GetDigramWorkingSeed
 331+ C346 21 41 9E     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 9C 9D                             call	CapitaliseString
 333+ C34C 21 41 9E     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 36 92                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 39 8E                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A E6 92                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 1D 92                             ld      de,SystemSeed
 359+ C388 CD 16 96                             call    copy_seed
 360+ C38B 3A 1E 92                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A D9 92     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 20 92     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A D8 92                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 1E 92     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 D9 92                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 20 92                             ld		a,(SystemSeed+3)
 390+ C3C5 21 D8 92                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 22 92                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 14 E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 36 92                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 36 92                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C3FC
   2++C3FC                  MMUSelectLayer1
   2++C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C400 CD 47 E0     	call	l1_cls
   4++C403 3E 07        	ld		a,7
   5++C405 CD 53 E0     	call	l1_attr_cls_to_a
   6++C408                  MMUSelectLayer2
   6++C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C40C CD 08 E0     	call    asm_l2_double_buffer_off
   8++C40F CD C9 E0     	call	l2_cls	; Get some space
   9++C412              	MMUSelectSpriteBank
   9++C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C416 CD 3F E1     	call    sprite_cls_cursors
  11++C419
  12++C419
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 3D 92                             ld      (MenuIdMax),a
 420+ C41E 2A D8 92                             ld		hl,(PresentSystemX)
 421+ C421 22 5B 93                             ld		(TargetPlanetX),hl              ; bc = selected jump
 422+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 423+ C427 11 FD BE                             ld		de,$BEFD
 424+ C42A 3E C0                                ld		a,$C0
 425+ C42C                                      MMUSelectLayer2
 425+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 426+ C430 CD F6 E1                             call	l2_draw_box
 427+ C433 01 01 0A                             ld		bc,$0A01
 428+ C436 11 C0 FE                             ld		de,$FEC0
 429+ C439                                      MMUSelectLayer2
 429+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 430+ C43D CD 62 E2                             call	l2_draw_horz_line
 431+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 432+ C442 CD BC 9D                             call	expandTokenToString
 433+ C445 06 01                                ld		b,1
 434+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 435+ C44A CD C2 C0                             call	SRM_print_boiler_text
 436+ C44D CD 10 96     SRCSetUpChart:          call	copy_galaxy_to_system
 437+ C450 CD 65 C3                             call	plot_local_stars
 438+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 439+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 440+ C459 C9                                   ret
 441+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 442+ C45A 3A 3B 92     local_chart_cursors:    ld     a,(CursorKeysPressed)
 443+ C45D FE 00                                cp      0
 444+ C45F C8                                   ret     z
 445+ C460 17                                   rla
 446+ C461 DC 79 C4                             call   c,src_UpPressed
 447+ C464 17                                   rla
 448+ C465 DC 89 C4                             call   c,src_DownPressed
 449+ C468 17                                   rla
 450+ C469 DC 99 C4                             call   c,src_LeftPressed
 451+ C46C 17                                   rla
 452+ C46D DC A9 C4                             call   c,src_RightPressed
 453+ C470 17                                   rla
 454+ C471 DC B9 C4                             call   c,src_HomePressed
 455+ C474 17                                   rla
 456+ C475 DC C3 C4                             call   c,src_RecenterPressed
 457+ C478 C9                                   ret
 458+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 459+ C479 3A 5C 93     src_UpPressed:          ld     a,(TargetPlanetY)
 460+ C47C                                      JumpIfAEqNusng 1,src_BoundsLimit
 460+ C47C FE 01       >                cp     1
 460+ C47E CA D8 C4    >                jp      z,src_BoundsLimit
 461+ C481 3D                                   dec     a
 462+ C482 32 5C 93                             ld      (TargetPlanetY),a
 463+ C485 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 464+ C488 C9                                   ret
 465+ C489              ;----------------------------------------------------------------------------------------------------------------------------------
 466+ C489 3A 5C 93     src_DownPressed:        ld     a,(TargetPlanetY)
 467+ C48C                                      JumpIfAEqNusng 255,src_BoundsLimit
 467+ C48C FE FF       >                cp     255
 467+ C48E CA D8 C4    >                jp      z,src_BoundsLimit
 468+ C491 3C                                   inc    a
 469+ C492 32 5C 93                             ld      (TargetPlanetY),a
 470+ C495 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 471+ C498 C9                                   ret
 472+ C499              ;----------------------------------------------------------------------------------------------------------------------------------
 473+ C499 3A 5B 93     src_LeftPressed:        ld     a,(TargetPlanetX)
 474+ C49C                                      JumpIfAEqNusng 2,src_BoundsLimit
 474+ C49C FE 02       >                cp     2
 474+ C49E CA D8 C4    >                jp      z,src_BoundsLimit
 475+ C4A1 3D                                   dec    a
 476+ C4A2 32 5B 93                             ld      (TargetPlanetX),a
 477+ C4A5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 478+ C4A8 C9                                   ret
 479+ C4A9              ;----------------------------------------------------------------------------------------------------------------------------------
 480+ C4A9 3A 5B 93     src_RightPressed:       ld     a,(TargetPlanetX)
 481+ C4AC                                      JumpIfAEqNusng 253,src_BoundsLimit
 481+ C4AC FE FD       >                cp     253
 481+ C4AE CA D8 C4    >                jp      z,src_BoundsLimit
 482+ C4B1 3C                                   inc    a
 483+ C4B2 32 5B 93                             ld      (TargetPlanetX),a
 484+ C4B5 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 485+ C4B8 C9                                   ret
 486+ C4B9              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ C4B9 2A D8 92     src_HomePressed:        ld      hl,(PresentSystemX)
 488+ C4BC 22 5B 93                             ld      (TargetPlanetX),hl
 489+ C4BF CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 490+ C4C2 C9                                   ret
 491+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 492+ C4C3 3A E6 92     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 493+ C4C6                                      MMUSelectGalaxyA
 493+ C4C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 494+ C4C9 ED 4B 5B 93                          ld      bc,(TargetPlanetX)
 495+ C4CD CD 60 FB                             call    find_nearest_to_bc
 496+ C4D0 ED 43 5B 93                          ld      (TargetPlanetX),bc
 497+ C4D4 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 498+ C4D7 C9                                   ret
 499+ C4D8              ;----------------------------------------------------------------------------------------------------------------------------------
 500+ C4D8 AF           src_BoundsLimit:        xor     a
 501+ C4D9 C9                                   ret
 502+ C4DA
# file closed: Menus/short_range_chart_menu.asm
 793  C4DA              ; Bank 51
 794  C4DA
 795  C4DA                  SLOT    MenuGalChtAddr
 796  C4DA                  PAGE    BankMenuGalCht
 797  C4DA              	ORG     MenuGalChtAddr
 798  C000                  INCLUDE "Menus/galactic_chart_menu.asm"
# file opened: Menus/galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 7B 9D  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
   8+ C018 61 6E 63 65
   8+ C01C 3A 20
   9+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  10+ C021 2E           galactic_chart_decimal      DB "."
  11+ C022 30           galactic_chart_fraction     DB "0"
  12+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  12+ C027 68 74 20 59
  12+ C02B 65 61 72 73
  12+ C02F 00
  13+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  13+ C034 30 00
  14+ C036
  15+ C036 00 00 00...  galactic_distance           DS  6
  16+ C03C
  17+ C03C              galactic_find_position      equ $B008
  18+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  18+ C040 3A 20 00
  19+ C043              galactic_find_text          equ $B038
  20+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  20+ C047 20 20 20 20
  20+ C04B 20 20 20 20
  20+ C04F 20 20 20 20
  20+ C053 20 20 20 20
  20+ C057 00
  21+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  21+ C05C 20 53 79 73
  21+ C060 74 65 6D 20
  21+ C064 4E 6F 74 20
  21+ C068 46 6F 75 6E
  21+ C06C 64 20 2D 2D
  21+ C070 2A 2A 00
  22+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  22+ C077 2D 2D 20 53
  22+ C07B 79 73 74 65
  22+ C07F 6D 20 46 6F
  22+ C083 75 6E 64 20
  22+ C087 2D 2D 2A 2A
  22+ C08B 20 20 00
  23+ C08E
  24+ C08E              GCM_print_boiler_text:
  25+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD 80 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  26+ C0A9              GCM_draw_chart_circle_and_crosshair:
  27+ C0A9 ED 4B D8 92  	ld		bc,(PresentSystemX)				; bc = present system
  28+ C0AD              .OnGalacticChart:
  29+ C0AD CB 38        	srl		b								; but row is row / 2
  30+ C0AF C5           	push  	bc
  31+ C0B0              	MMUSelectSpriteBank
  31+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  32+ C0B4 CD 65 E0     	call	sprite_galactic_cursor
  33+ C0B7 C1           	pop		bc
  34+ C0B8 78           	ld		a,b
  35+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  36+ C0BB 47           	ld		b,a
  37+ C0BC 3A E4 92     	ld		a,(Fuel)
  38+ C0BF CB 3F        	srl		a
  39+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  40+ C0C3 57           	ld		d,a
  41+ C0C4 1E FF        	ld		e,$FF
  42+ C0C6              	MMUSelectLayer2
  42+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0CA CD 5A E7     	call	l2_draw_circle
  44+ C0CD C9           	ret
  45+ C0CE              ; TODO MOVE CURSOR CODE
  46+ C0CE
  47+ C0CE              GCM_draw_hyperspace_cross_hair:
  48+ C0CE ED 4B 5B 93  	ld		bc,(TargetPlanetX)              ; bc = selected jump
  49+ C0D2              .OnGalacticChart:
  50+ C0D2 CB 38        	srl		b								; but row is row / 2
  51+ C0D4              	MMUSelectSpriteBank
  51+ C0D4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  52+ C0D8 CD 71 E0     	call	sprite_galactic_hyper_cursor
  53+ C0DB C9           	ret
  54+ C0DC
  55+ C0DC
  56+ C0DC              plot_gc_stars:
  57+ C0DC AF           	xor		a
  58+ C0DD 32 36 92     	ld		(XSAV),a
  59+ C0E0 DD 21 16 E0      ld      ix,galaxy_data
  60+ C0E4              .CounterLoop:
  61+ C0E4 3A E6 92         ld      a,(Galaxy)
  62+ C0E7                  MMUSelectGalaxyA
  62+ C0E7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  63+ C0EA DD E5            push    ix
  64+ C0EC E1               pop     hl
  65+ C0ED 11 1D 92         ld      de,SystemSeed
  66+ C0F0 CD 16 96     	call    copy_seed
  67+ C0F3 3A 20 92     	ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  68+ C0F6 4F           	ld		c,a								; c = X Coord
  69+ C0F7 3A 1E 92     	ld		a,(SystemSeed+1)
  70+ C0FA CB 3F        	srl		a								; Ycoord /2
  71+ C0FC C6 18        	add		a,galactic_chart_y_offset		; add offset to Y coord of star
  72+ C0FE 47           	ld		b,a								; b = row
  73+ C0FF C5           	push	bc
  74+ C100 3E D8        	ld		a,galactic_star_colour
  75+ C102                  MMUSelectLayer2
  75+ C102 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  76+ C106 CD FF E0     	call	l2_plot_pixel
  77+ C109 C1           	pop		bc
  78+ C10A 3A 21 92     	ld		a,(SystemSeed+4)
  79+ C10D F6 50        	or		$50								; minimum distance away
  80+ C10F FE 90        	cp		$90
  81+ C111 30 0A        	jr		nc,.NoSecondPixel
  82+ C113              .SecondPixel:
  83+ C113 0C           	inc		c
  84+ C114 3E 6C        	ld		a,galactic_star_colour2
  85+ C116                  MMUSelectLayer2
  85+ C116 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  86+ C11A CD FF E0     	call	l2_plot_pixel
  87+ C11D              .NoSecondPixel:
  88+ C11D DD E5            push    ix
  89+ C11F E1               pop     hl
  90+ C120 ED 34 08 00      add     hl,8
  91+ C124 E5               push    hl
  92+ C125 DD E1            pop     ix
  93+ C127 3A 36 92     	ld		a,(XSAV)
  94+ C12A 3D           	dec		a
  95+ C12B FE 00        	cp		0
  96+ C12D C8           	ret		z
  97+ C12E 32 36 92     	ld		(XSAV),a
  98+ C131 18 B1        	jr		.CounterLoop
  99+ C133
 100+ C133 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C137 2A 2A 2A 2A
 100+ C13B 2B 2B 2B 2B
 100+ C13F 2B 2B 2B 2B
 101+ C143              draw_galactic_chart_menu:
 102+ C143                  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C143
   2++C143                  MMUSelectLayer1
   2++C143 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C147 CD 47 E0     	call	l1_cls
   4++C14A 3E 07        	ld		a,7
   5++C14C CD 53 E0     	call	l1_attr_cls_to_a
   6++C14F                  MMUSelectLayer2
   6++C14F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C153 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C156 CD C9 E0     	call	l2_cls	; Get some space
   9++C159              	MMUSelectSpriteBank
   9++C159 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C15D CD 3F E1     	call    sprite_cls_cursors
  11++C160
  12++C160
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 103+ C160 DD 2E DC         ld      ixl,$DC
 104+ C163 3E 40            ld      a,$40
 105+ C165 32 3D 92         ld      (MenuIdMax),a
 106+ C168 2A D8 92         ld      hl,(PresentSystemX)
 107+ C16B 22 5B 93         ld      (TargetPlanetX),hl
 108+ C16E CD 54 C4         call    gc_present_system               ; Set up the seed for present system
 109+ C171              .Drawbox:
 110+ C171 01 01 01     	ld		bc,$0101
 111+ C174 11 FD BE     	ld		de,$BEFD
 112+ C177 3E C0        	ld		a,$C0
 113+ C179              	MMUSelectLayer2
 113+ C179 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 114+ C17D CD F6 E1     	call	l2_draw_box
 115+ C180 01 01 0A     	ld		bc,$0A01
 116+ C183 11 C0 FE     	ld		de,$FEC0
 117+ C186 CD 62 E2     	call	l2_draw_horz_line
 118+ C189              .StaticText:
 119+ C189 3E 0D        	ld		a,galactic_chart_header
 120+ C18B CD BC 9D     	call	expandTokenToString
 121+ C18E 06 01        	ld		b,1
 122+ C190 21 10 C0     	ld		hl,galactic_chart_boiler_text
 123+ C193 CD 8E C0     	call	GCM_print_boiler_text
 124+ C196              .CircleandCrosshair:
 125+ C196 CD A9 C0     	call	GCM_draw_chart_circle_and_crosshair
 126+ C199 CD CE C0     	call	GCM_draw_hyperspace_cross_hair
 127+ C19C CD DC C0     	call	plot_gc_stars
 128+ C19F 3A E6 92         ld      a,(Galaxy)
 129+ C1A2                  MMUSelectGalaxyA
 129+ C1A2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 130+ C1A5 ED 4B 5B 93      ld      bc,(TargetPlanetX)
 131+ C1A9 ED 43 5B E8      ld      (GalaxyTargetSystem),bc
 132+ C1AD CD 55 FC         call    galaxy_system_under_cursor
 133+ C1B0 CD AC C3         call    gc_name_if_possible
 134+ C1B3 AF               xor     a
 135+ C1B4 32 B8 C1         ld      (gcFindInputMode),a
 136+ C1B7              ;IFDEF DOUBLEBUFFER
 137+ C1B7              ;    MMUSelectLayer2
 138+ C1B7              ;    call  l2_flip_buffers
 139+ C1B7              ;ENDIF
 140+ C1B7 C9           	ret
 141+ C1B8
 142+ C1B8              gcDelayVal        equ $0A
 143+ C1B8              gcBlinkVal        equ $10
 144+ C1B8
 145+ C1B8 00           gcFindInputMode   DB  0
 146+ C1B9 10           gcCursorBlink     DB  gcBlinkVal
 147+ C1BA 20           gcCursorChar      DB  " "
 148+ C1BB 00           gcEndOfString     DB  0
 149+ C1BC 00 00 00...  gcInputText       DS  31
 150+ C1DB 00 00 00...  gcInputDelay      DS  gcDelayVal
 151+ C1E5 00 00 00 00                    DB  0,0,0,0,0
 151+ C1E9 00
 152+ C1EA 00 00 00...  gcBlank           DS  32
 153+ C20A
 154+ C20A              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C20A              gc_display_find_text:
 156+ C20A 11 08 B0      	ld		de,galactic_find_position   ; Wipe input area on screen
 157+ C20D 21 3C C0         ld      hl,galactic_find_message
 158+ C210                  MMUSelectLayer1
 158+ C210 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 159+ C214 CD 80 E0     	call	l1_print_at
 160+ C217 C9               ret
 161+ C218              ;----------------------------------------------------------------------------------------------------------------------------------
 162+ C218              gc_display_find_string:
 163+ C218 11 BC C1         ld      de,gcInputText
 164+ C21B CD 20 90         call    keyboard_copy_input_to_de
 165+ C21E 21 BA C1         ld      hl,gcCursorChar         ; Now just copy cursor char too
 166+ C221 ED A0            ldi                             ; Copy cursor to local
 167+ C223 3A 1D 90         ld      a,(InputCursor)
 168+ C226 3C               inc     a
 169+ C227 47               ld      b,a
 170+ C228 3E 14            ld      a,20
 171+ C22A 90               sub     b
 172+ C22B 47               ld      b,a
 173+ C22C 3E 20            ld      a," "
 174+ C22E              .SpacePad
 175+ C22E 12               ld      (de),a
 176+ C22F 13               inc     de
 177+ C230 10 FC            djnz    .SpacePad
 178+ C232 AF               xor     a
 179+ C233 12               ld      (de),a
 180+ C234 11 38 B0     	ld		de,galactic_find_text    ; Display text
 181+ C237 21 BC C1         ld      hl,gcInputText
 182+ C23A                  MMUSelectLayer1
 182+ C23A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C23E CD 80 E0     	call	l1_print_at
 184+ C241 C9               ret
 185+ C242
 186+ C242              blink_cursor:
 187+ C242 3A B9 C1         ld      a,(gcCursorBlink)
 188+ C245 3D               dec     a
 189+ C246 32 B9 C1         ld      (gcCursorBlink),a
 190+ C249 C0               ret     nz
 191+ C24A              .FlashCursor:
 192+ C24A 3E 10            ld      a,gcBlinkVal
 193+ C24C 32 B9 C1         ld      (gcCursorBlink),a
 194+ C24F 3A BA C1         ld      a,(gcCursorChar)
 195+ C252 FE 20            cp      " "
 196+ C254 28 06            jr      z,.ChangeToStar
 197+ C256 3E 20            ld      a," "
 198+ C258 32 BA C1         ld      (gcCursorChar),a
 199+ C25B C9               ret
 200+ C25C              .ChangeToStar:
 201+ C25C 3E 2A            ld      a,"*"
 202+ C25E 32 BA C1         ld      (gcCursorChar),a
 203+ C261 C9               ret
 204+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 205+ C262 3A B8 C1     loop_gc_menu:           ld      a,(gcFindInputMode)
 206+ C265 FE 00                                cp      0
 207+ C267 20 1C                                jr      nz,AlreadyInInputMode
 208+ C269 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 209+ C26B CD B0 8F                             call    is_key_pressed
 210+ C26E C0                                   ret     nz
 211+ C26F CD 33 90                             call    initInputText                           ;Initialise find input
 212+ C272 3E FF                                ld      a,$FF
 213+ C274 32 B8 C1                             ld      (gcFindInputMode),a                     ; Set input mode to FF
 214+ C277 3E 10                                ld      a,gcBlinkVal
 215+ C279 32 B9 C1                             ld      (gcCursorBlink),a                       ; Set up Blink
 216+ C27C 3E 0A                                ld      a,gcDelayVal
 217+ C27E 32 DB C1                             ld     (gcInputDelay),a                         ; And keyboard rescan delay
 218+ C281 CD 0A C2     .DisplayInputbar:       call    gc_display_find_text
 219+ C284 C9                                   ret
 220+ C285              ;Already in input mode post pressing find
 221+ C285 3A DB C1     AlreadyInInputMode:     ld      a,(gcInputDelay)                    ; keyboard next press delay
 222+ C288 FE 00                                cp      0                                   ; can no read until its zero
 223+ C28A 20 17                                jr      nz,.blinkCursor                     ; so re just go to blink cursor routine if not permitted
 224+ C28C CD 47 90     .HasKeyBeenPressed:     call    InputName                           ; else we are ready to read input
 225+ C28F 3A 1F 90                             ld      a,(InputChanged)
 226+ C292 47                                   ld      b,a
 227+ C293 FE 00                                cp      0
 228+ C295 28 13                                jr      z,.blinkNoDelay                     ; when we go hear the input delay could be zero a flip over
 229+ C297 3E 0A                                ld      a,gcDelayVal
 230+ C299 32 DB C1                             ld     (gcInputDelay),a
 231+ C29C 3A 1E 90     .WasItEnter:            ld      a,(EnterPressed)
 232+ C29F FE 00                                cp      0
 233+ C2A1 20 1A                                jr      nz,.FindEnterPressed
 234+ C2A3 3A DB C1     .blinkCursor:           ld      a,(gcInputDelay)
 235+ C2A6 3D                                   dec     a
 236+ C2A7 32 DB C1                             ld     (gcInputDelay),a
 237+ C2AA CD 42 C2     .blinkNoDelay:          call    blink_cursor
 238+ C2AD 3A B9 C1                             ld      a,(gcCursorBlink)
 239+ C2B0 FE 10                                cp      gcBlinkVal
 240+ C2B2 CC 18 C2                             call    z,gc_display_find_string
 241+ C2B5 C9                                   ret
 242+ C2B6 78           .FindDone:              ld      a,b
 243+ C2B7 FE 00                                cp      0
 244+ C2B9 C4 18 C2                             call    nz,gc_display_find_string
 245+ C2BC C9                                   ret
 246+ C2BD AF           .FindEnterPressed:      xor     a
 247+ C2BE 32 1E 90                             ld      (EnterPressed),a                    ; reset enter
 248+ C2C1 32 B8 C1                             ld      (gcFindInputMode),a
 249+ C2C4 3A E6 92                             ld      a,(Galaxy)                          ; Fetch correct galaxy seed bank into memory
 250+ C2C7                                      MMUSelectGalaxyA
 250+ C2C7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C2CA 21 FE 8F                             ld      hl,InputString
 252+ C2CD 11 5D E8                             ld      de,GalaxySearchString
 253+ C2D0 CD CF F6                             call    GalaxyCopyLoop
 254+ C2D3 CD 2C FB                             call    find_system_by_name
 255+ C2D6 FE FF                                cp      $FF                                 ; 0 denotes found FF, failure
 256+ C2D8 28 1D                                jr      z,.FindNoMatch
 257+ C2DA 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 258+ C2DD 4F                                   ld      c,a
 259+ C2DE 3A F8 E8                             ld      a,(GalaxyWorkingSeed+1)
 260+ C2E1 47                                   ld      b,a
 261+ C2E2 ED 43 5B 93                          ld      (TargetPlanetX),bc
 262+ C2E6 CD 8B C3                             call    UpdateGalacticCursor
 263+ C2E9 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 264+ C2EC 21 73 C0                             ld      hl,galactic_find_match
 265+ C2EF                                      MMUSelectLayer1
 265+ C2EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 266+ C2F3 CD 80 E0                             call	l1_print_at
 267+ C2F6 C9                                   ret
 268+ C2F7              .FindNoMatch:           ; if not found display "Not found"
 269+ C2F7                                      ; move curor if found
 270+ C2F7 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 271+ C2FA 21 58 C0                             ld      hl,galactic_find_no_match
 272+ C2FD                                      MMUSelectLayer1
 272+ C2FD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 273+ C301 CD 80 E0                             call	l1_print_at
 274+ C304 C9                                   ret; DOSTUFFHERE
 275+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 276+ C305 3A B8 C1     galctic_chart_cursors:  ld      a,(gcFindInputMode)
 277+ C308 FE 00                                cp      0
 278+ C30A C0                                   ret     nz
 279+ C30B 3A 3B 92                             ld      a,(CursorKeysPressed)
 280+ C30E FE 00                                cp      0
 281+ C310 C8                                   ret     z
 282+ C311 17                                   rla
 283+ C312 DC 2A C3                             call   c,gc_UpPressed
 284+ C315 17                                   rla
 285+ C316 DC 3A C3                             call   c,gc_DownPressed
 286+ C319 17                                   rla
 287+ C31A DC 4A C3                             call   c,gc_LeftPressed
 288+ C31D 17                                   rla
 289+ C31E DC 5A C3                             call   c,gc_RightPressed
 290+ C321 17                                   rla
 291+ C322 DC 6A C3                             call   c,gc_HomePressed
 292+ C325 17                                   rla
 293+ C326 DC 74 C3                             call   c,gc_RecenterPressed
 294+ C329 C9                                   ret
 295+ C32A              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C32A 3A 5C 93     gc_UpPressed:           ld     a,(TargetPlanetX+1)
 297+ C32D                                      JumpIfAEqNusng 1,gc_BoundsLimit
 297+ C32D FE 01       >                cp     1
 297+ C32F CA 89 C3    >                jp      z,gc_BoundsLimit
 298+ C332 3D                                   dec     a
 299+ C333 32 5C 93                             ld      (TargetPlanetX+1),a
 300+ C336 CD 8B C3                             call    UpdateGalacticCursor
 301+ C339 C9                                   ret
 302+ C33A              ;----------------------------------------------------------------------------------------------------------------------------------
 303+ C33A 3A 5C 93     gc_DownPressed:         ld     a,(TargetPlanetX+1)
 304+ C33D                                      JumpIfAEqNusng 255,gc_BoundsLimit
 304+ C33D FE FF       >                cp     255
 304+ C33F CA 89 C3    >                jp      z,gc_BoundsLimit
 305+ C342 3C                                   inc    a
 306+ C343 32 5C 93                             ld      (TargetPlanetX+1),a
 307+ C346 CD 8B C3                             call    UpdateGalacticCursor
 308+ C349 C9                                   ret
 309+ C34A              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C34A 3A 5B 93     gc_LeftPressed:         ld     a,(TargetPlanetX)
 311+ C34D                                      JumpIfAEqNusng 2,gc_BoundsLimit
 311+ C34D FE 02       >                cp     2
 311+ C34F CA 89 C3    >                jp      z,gc_BoundsLimit
 312+ C352 3D                                   dec    a
 313+ C353 32 5B 93                             ld      (TargetPlanetX),a
 314+ C356 CD 8B C3                             call    UpdateGalacticCursor
 315+ C359 C9                                   ret
 316+ C35A              ;----------------------------------------------------------------------------------------------------------------------------------
 317+ C35A 3A 5B 93     gc_RightPressed:        ld     a,(TargetPlanetX)
 318+ C35D                                      JumpIfAEqNusng 253,gc_BoundsLimit
 318+ C35D FE FD       >                cp     253
 318+ C35F CA 89 C3    >                jp      z,gc_BoundsLimit
 319+ C362 3C                                   inc    a
 320+ C363 32 5B 93                             ld      (TargetPlanetX),a
 321+ C366 CD 8B C3                             call    UpdateGalacticCursor
 322+ C369 C9                                   ret
 323+ C36A              ;----------------------------------------------------------------------------------------------------------------------------------
 324+ C36A 2A D8 92     gc_HomePressed:         ld      hl,(PresentSystemX)
 325+ C36D 22 5B 93                             ld      (TargetPlanetX),hl
 326+ C370 CD 8B C3                             call    UpdateGalacticCursor
 327+ C373 C9                                   ret
 328+ C374              ;----------------------------------------------------------------------------------------------------------------------------------
 329+ C374 3A E6 92     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 330+ C377                                      MMUSelectGalaxyA
 330+ C377 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 331+ C37A ED 4B 5B 93                          ld      bc,(TargetPlanetX)
 332+ C37E CD 60 FB                             call    find_nearest_to_bc
 333+ C381 ED 43 5B 93                          ld      (TargetPlanetX),bc
 334+ C385 CD 8B C3                             call    UpdateGalacticCursor
 335+ C388 C9                                   ret
 336+ C389              ;----------------------------------------------------------------------------------------------------------------------------------
 337+ C389 AF           gc_BoundsLimit          xor     a
 338+ C38A C9                                   ret
 339+ C38B
 340+ C38B              ;----------------------------------------------------------------------------------------------------------------------------------
 341+ C38B ED 4B 5B 93  UpdateGalacticCursor:   ld		bc,(TargetPlanetX)              ; bc = selected jump
 342+ C38F CB 38        OnGalacticChart:        srl		b								; but row is row / 2
 343+ C391                                      MMUSelectSpriteBank
 343+ C391 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ C395 CD 7D E0                             call	sprite_ghc_move
 345+ C398 3A E6 92                             ld      a,(Galaxy)
 346+ C39B                                      MMUSelectGalaxyA
 346+ C39B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 347+ C39E ED 4B 5B 93                          ld      bc,(TargetPlanetX)
 348+ C3A2 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 349+ C3A6 CD 55 FC                             call    galaxy_system_under_cursor
 350+ C3A9 FE 00                                cp      0
 351+ C3AB C8                                   ret     z
 352+ C3AC              ; just fall into gc_name_if_possible
 353+ C3AC CD 81 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 354+ C3AF CD DA C3                             call    gc_clear_name_area
 355+ C3B2 21 41 9E                             ld		hl,name_expanded
 356+ C3B5 CD 9C 9D                             call	CapitaliseString
 357+ C3B8 21 41 9E                             ld		hl, name_expanded
 358+ C3BB 01 0A A0                             ld      bc,$A00A
 359+ C3BE 1E FF                                ld		e,$FF
 360+ C3C0                                      MMUSelectLayer2
 360+ C3C0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 361+ C3C4 CD CF E1                             call	l2_print_7at
 362+ C3C7 CD F4 C3                             call    gc_calc_distance
 363+ C3CA 21 14 C0                             ld      hl,galactic_chart_distance
 364+ C3CD 01 0A A8                             ld      bc,$A80A
 365+ C3D0 1E FF                                ld		e,$FF
 366+ C3D2                                      MMUSelectLayer2
 366+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 367+ C3D6 CD CF E1                             call	l2_print_7at
 368+ C3D9 C9                                   ret
 369+ C3DA              ;----------------------------------------------------------------------------------------------------------------------------------
 370+ C3DA 26 08        gc_clear_name_area:     ld      h,8
 371+ C3DC 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 372+ C3DF 01 0A A0                             ld      bc,$A00A
 373+ C3E2 E5           .ClearLoop:             push    hl
 374+ C3E3 D5                                   push    de
 375+ C3E4 C5                                   push    bc
 376+ C3E5                                      MMUSelectLayer2
 376+ C3E5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ C3E9 CD 62 E2                             call	l2_draw_horz_line
 378+ C3EC C1                                   pop     bc
 379+ C3ED D1                                   pop     de
 380+ C3EE E1                                   pop     hl
 381+ C3EF 04                                   inc     b
 382+ C3F0 25                                   dec     h
 383+ C3F1 20 EF                                jr      nz,.ClearLoop
 384+ C3F3 C9                                   ret
 385+ C3F4              ;----------------------------------------------------------------------------------------------------------------------------------
 386+ C3F4 3A E6 92     gc_calc_distance:       ld      a,(Galaxy)
 387+ C3F7                                      MMUSelectGalaxyA
 387+ C3F7 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 388+ C3FA 11 1E C0                             ld      de,galactic_chart_dist_amount
 389+ C3FD 21 30 C0                             ld      hl,galactic_default_dist
 390+ C400 ED A0                                ldi
 391+ C402 ED A0                                ldi
 392+ C404 ED A0                                ldi
 393+ C406 ED A0                                ldi
 394+ C408 ED A0                                ldi
 395+ C40A ED 4B D8 92                          ld      bc,(PresentSystemX)
 396+ C40E ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 397+ C412 ED 4B 5B 93                          ld      bc,(TargetPlanetX)
 398+ C416 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 399+ C41A CD E8 FB     fqp                        call    galaxy_find_distance            ; get distance into HL
 400+ C41D DD 2A 57 93                          ld      ix,(Distance)
 401+ C421 11 00 00                             ld      de,0
 402+ C424 FD 21 36 C0                          ld      iy,galactic_distance
 403+ C428 CD 82 A3                             call    DispDEIXtoIY
 404+ C42B FD E5                                push    iy
 405+ C42D E1                                   pop     hl
 406+ C42E 11 36 C0                             ld      de,galactic_distance
 407+ C431 7E                                   ld		a,(hl)				;Push last digit to post decimal
 408+ C432 32 22 C0                             ld		(galactic_chart_fraction),a
 409+ C435 2B                                   dec     hl
 410+ C436 CD B6 A1                             call    compare16HLDE
 411+ C439 38 18                                jr      c,.done_number
 412+ C43B 7E                                   ld      a,(hl)
 413+ C43C 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 414+ C43F 2B                                   dec     hl
 415+ C440 CD B6 A1                             call    compare16HLDE
 416+ C443 38 0E                                jr      c,.done_number
 417+ C445 7E                                   ld      a,(hl)
 418+ C446 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 419+ C449 2B                                   dec     hl
 420+ C44A CD B6 A1                             call    compare16HLDE
 421+ C44D 38 04                                jr      c,.done_number
 422+ C44F 7E                                   ld      a,(hl)
 423+ C450 32 1E C0                             ld      (galactic_chart_dist_amount),a
 424+ C453 C9           .done_number:           ret
 425+ C454              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ C454 AF           gc_present_system:      xor     a
 427+ C455 32 36 92                             ld		(XSAV),a
 428+ C458 DD 21 16 E0                          ld      ix,galaxy_data
 429+ C45C 3A E6 92     GCCounterLoop:          ld      a,(Galaxy)
 430+ C45F                                      MMUSelectGalaxyA
 430+ C45F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 431+ C462 2A D8 92                             ld      hl,(PresentSystemX)
 432+ C465 DD E5                                push    ix
 433+ C467 7D                                   ld      a,l
 434+ C468 DD BE 03                             cp      (ix+3)                          ; seed x
 435+ C46B 20 14                                jr      nz,.ItsNotThisX
 436+ C46D 7C                                   ld      a,h
 437+ C46E DD BE 01                             cp      (ix+1)                          ; seed x
 438+ C471 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 439+ C473 DD E5                                push    ix
 440+ C475 E1                                   pop     hl
 441+ C476 11 4A 93                             ld      de,PresentSystemSeeds
 442+ C479 CD 16 96                             call    copy_seed
 443+ C47C 3E FF                                ld      a,$FF
 444+ C47E DD E1                                pop     ix
 445+ C480 C9                                   ret
 446+ C481 E1           .ItsNotThisX:           pop     hl
 447+ C482 ED 34 08 00                          add     hl,8
 448+ C486 E5                                   push    hl
 449+ C487 DD E1                                pop     ix
 450+ C489 3A 36 92                             ld		a,(XSAV)
 451+ C48C 3D                                   dec		a
 452+ C48D 32 36 92                             ld      (XSAV),a
 453+ C490 FE 00                                cp		0
 454+ C492 C8                                   ret		z
 455+ C493 18 C7                                jr		GCCounterLoop
 456+ C495
# file closed: Menus/galactic_chart_menu.asm
 799  C495              ; Bank 52
 800  C495
 801  C495                  SLOT    MenuInventAddr
 802  C495                  PAGE    BankMenuInvent
 803  C495              	ORG     MenuInventAddr
 804  C000                  INCLUDE "inventory_menu.asm"
# file opened: Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD 80 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A E4 92     	ld		a,(Fuel)
   4++C136 11 E5 A9     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 ED 92                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD F4 98                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 1F 9C                             ld		hl, WordIdx
 118+ C17A CD F4 98                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD 80 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD 80 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD F4 98                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 1F 9C                             ld		hl,WordIdx
 148+ C1C1 CD F4 98                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD 80 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A E2 92     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A E0 92                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C1F5
   2++C1F5                  MMUSelectLayer1
   2++C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C1F9 CD 47 E0     	call	l1_cls
   4++C1FC 3E 07        	ld		a,7
   5++C1FE CD 53 E0     	call	l1_attr_cls_to_a
   6++C201                  MMUSelectLayer2
   6++C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C205 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C208 CD C9 E0     	call	l2_cls	; Get some space
   9++C20B              	MMUSelectSpriteBank
   9++C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C20F CD 3F E1     	call    sprite_cls_cursors
  11++C212
  12++C212
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 3D 92                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 3F E1                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 62 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 E5 A9                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: Menus/inventory_menu.asm
 805  C281
 806  C281              ; Bank 53
 807  C281
 808  C281                  SLOT    MenuSystemAddr
 809  C281                  PAGE    BankMenuSystem
 810  C281              	ORG     MenuSystemAddr
 811  C000                  INCLUDE "system_data_menu.asm"
# file opened: Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 7B 9D  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 41 9E  						DW $0280,name_expanded
   5+ C018 08 0B AB 9A  						DW $0B08,WordDistance
   6+ C01C 08 13 B4 9A  						DW $1308,WordEconomy
   7+ C020 08 1B BC 9A  						DW $1B08,WordGovernment
   8+ C024 08 23 C7 9A  						DW $2308,WordTechLevel
   9+ C028 08 2B D1 9A  						DW $2B08,WordPopulation
  10+ C02C 08 3B EC 9A  						DW $3B08,WordGross
  11+ C030 38 3B F2 9A  						DW $3B38,WordProductivity
  12+ C034 08 43 FF 9A  						DW $4308,WordAverage
  13+ C038 48 43 07 9B  						DW $4348,WordRadius
  14+ C03C 60 0B 7B 9D  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 7B 9D  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 09 E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7E E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 63 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 84 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A E6 92     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B D8 92                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD E8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD 80 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C2F0
   2++C2F0                  MMUSelectLayer1
   2++C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C2F4 CD 47 E0     	call	l1_cls
   4++C2F7 3E 07        	ld		a,7
   5++C2F9 CD 53 E0     	call	l1_attr_cls_to_a
   6++C2FC                  MMUSelectLayer2
   6++C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C300 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C303 CD C9 E0     	call	l2_cls	; Get some space
   9++C306              	MMUSelectSpriteBank
   9++C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C30A CD 3F E1     	call    sprite_cls_cursors
  11++C30D
  12++C30D
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 130+ C30D AF                                   xor     a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 3D 92                             ld		(MenuIdMax),a
 134+ C316 3A E6 92     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 5B 93  .CheckCursorOrHome:     ld      bc,(TargetPlanetX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 55 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B D8 92  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 55 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 5B 93  .FoundASystem:          ld      bc,(TargetPlanetX)
 147+ C342 2A D8 92                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 44 93     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD FE F9                             call    galaxy_copy_seed
 159+ C35B CD C1 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 62 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD BC 9D                             call	expandTokenToString
 170+ C37B 3A E6 92     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F7 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD FE F9                             call    galaxy_copy_seed
 178+ C38E CD 69 F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 41 9E                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 41 9E                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 57 93  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 73 A3                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD 80 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD BC 9D                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD BC 9D                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD AE 9D                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD 80 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD 80 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 73 A3                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD 80 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A E6 92     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD D8 F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD 80 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 82 A3                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD 80 E0                             call	l1_print_at
 272+ C48F 3A E6 92     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 0F E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 82 A3                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD 80 E0                             call	l1_print_at
 289+ C4BC 3A E6 92     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F7 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD FE F9                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6B F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD CD E0                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: Menus/system_data_menu.asm
 812  C4F7
 813  C4F7              ; Bank 54
 814  C4F7
 815  C4F7                  SLOT    MenuMarketAddr
 816  C4F7                  PAGE    BankMenuMarket
 817  C4F7                  ORG     MenuMarketAddr
 818  C000                  INCLUDE "market_prices_menu.asm"
# file opened: Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 7B 9D  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 41 9E  						DW $0220,name_expanded
   4+ C018 80 0B 9B 99  						DW $0B80,WordUnit
   5+ C01C B0 0B E4 9B  						DW $0BB0,WordQuantity
   6+ C020 08 13 C2 9B  						DW $1308,WordProduct
   7+ C024 60 13 CA 9B  						DW $1360,WordUoM
   8+ C028 80 13 CE 9B  						DW $1380,WordPrice
   9+ C02C B0 13 F2 9B  						DW $13B0,WordStock
  10+ C030 E0 13 EE 9B  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD 80 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A E2 92     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A E0 92                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A EC 92                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD 80 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD 80 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position
 249+ C28F 57                                   ld      d,a
 250+ C290 1E 08                                ld      e,8
 251+ C292 ED 30                                mul
 252+ C294 53                                   ld      d,e
 253+ C295 1E 00                                ld      e,0
 254+ C297 19                                   add     hl,de
 255+ C298 22 41 C0                             ld      (market_cursor),hl
 256+ C29B EB                                   ex      hl,de
 257+ C29C 21 43 C0                             ld      hl,market_blank_line
 258+ C29F                                      MMUSelectLayer1
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD 80 E0                             call	l1_print_at
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 ED 92                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 1F 9C                             ld		hl,WordIdx
 273+ C2C5 CD F4 98                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD 80 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 1F 9C                             ld		hl,WordIdx
 281+ C2DF CD F4 98                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD 80 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD 80 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD 80 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD 80 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C343
   2++C343                  MMUSelectLayer1
   2++C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C347 CD 47 E0     	call	l1_cls
   4++C34A 3E 07        	ld		a,7
   5++C34C CD 53 E0     	call	l1_attr_cls_to_a
   6++C34F                  MMUSelectLayer2
   6++C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C353 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C356 CD C9 E0     	call	l2_cls	; Get some space
   9++C359              	MMUSelectSpriteBank
   9++C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C35D CD 3F E1     	call    sprite_cls_cursors
  11++C360
  12++C360
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 3D 92                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 62 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 62 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 62 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 62 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 62 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 62 E2                             call	l2_draw_horz_line
 340+ C3AA 3A E6 92     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD BC 9D                             call	expandTokenToString
 344+ C3B5 CD 79 F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 349+ C3C2 21 08 20                             ld		hl,market_position
 350+ C3C5 22 41 C0                             ld		(market_cursor),hl
 351+ C3C8 F5           MarketLoop:	            push	af
 352+ C3C9 CD 8B C2                             call	PrintMarketItem
 353+ C3CC F1                                   pop		af
 354+ C3CD 3C                                   inc		a
 355+ C3CE FE 11                                cp		17
 356+ C3D0 20 F6                                jr		nz,MarketLoop
 357+ C3D2 AF           .InitialHighlight:      xor     a
 358+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 359+ C3D6 CD B3 C0                             call    mkt_highlight_row
 360+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 361+ C3DC 11 10 A8                             ld      de,$A810
 362+ C3DF                                      MMUSelectLayer1
 362+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 363+ C3E3 CD 80 E0                             call	l1_print_at
 364+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 365+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 366+ C3EC 11 10 B0                             ld      de,$B010
 367+ C3EF                                      MMUSelectLayer1
 367+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 368+ C3F3 CD 80 E0                             call	l1_print_at
 369+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 370+ C3F9 C9                                   ret
 371+ C3FA
 372+ C3FA
 373+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 374+ C3FA              ; Handles all the input whilst in the market menu
 375+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 376+ C3FC CD B0 8F                             call    is_key_pressed
 377+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 378+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 379+ C404 CD B0 8F                             call    is_key_pressed
 380+ C407 CC 2C C4                             call    z,mkt_DownPressed
 381+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 382+ C40C CD B0 8F                             call    is_key_pressed
 383+ C40F CC 3D C4                             call    z,mkt_LeftPressed
 384+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 385+ C414 CD B0 8F                             call    is_key_pressed
 386+ C417 CC 80 C4                             call    z,mkt_RightPressed
 387+ C41A C9                                   ret
 388+ C41B
 389+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 390+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 391+ C41E FE 00                                cp      0
 392+ C420 C8                                   ret     z
 393+ C421 CD C3 C0                             call    mkt_lowlight_row
 394+ C424 21 74 C0                             ld      hl,mkt_selected_row
 395+ C427 35                                   dec     (hl)
 396+ C428 CD B3 C0                             call    mkt_highlight_row
 397+ C42B C9                                   ret
 398+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 399+ C42C 3A 74 C0     mkt_DownPressed:        ld      a,(mkt_selected_row)
 400+ C42F FE 10                                cp      16
 401+ C431 C8                                   ret     z
 402+ C432 CD C3 C0                             call    mkt_lowlight_row
 403+ C435 21 74 C0                             ld      hl,mkt_selected_row
 404+ C438 34                                   inc     (hl)
 405+ C439 CD B3 C0                             call    mkt_highlight_row
 406+ C43C C9                                   ret
 407+ C43D              ;----------------------------------------------------------------------------------------------------------------------------------
 408+ C43D 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 409+ C440 21 ED 92                             ld      hl,CargoTonnes
 410+ C443 ED 31                                add     hl,a
 411+ C445 7E                                   ld      a,(hl)
 412+ C446 FE 00                                cp      0
 413+ C448 C8                                   ret     z
 414+ C449 35                                   dec     (hl)
 415+ C44A DD 21 00 E0                          ld      ix,StockFood
 416+ C44E 3A 74 C0                             ld      a,(mkt_selected_row)
 417+ C451 16 08                                ld      d,8
 418+ C453 5F                                   ld      e,a
 419+ C454 ED 30                                mul
 420+ C456 DD 19                                add     ix,de
 421+ C458                                      MMUSelectStockTable
 421+ C458 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 422+ C45C DD 34 01                             inc     (ix+1)
 423+ C45F DD 7E 07                             ld      a,(ix+7)
 424+ C462 FE 30                                cp      48
 425+ C464 20 04                                jr      nz,.UnderATonne
 426+ C466 21 EC 92                             ld      hl,CargoRunningLoad
 427+ C469 35                                   dec     (hl)            ; We need to cosider UoM
 428+ C46A DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 429+ C46D 16 00                                ld      d,0
 430+ C46F 5F                                   ld      e,a
 431+ C470 CD 9C 9E                             call    addDEtoCash
 432+ C473                                      ; DO ADD CASH
 433+ C473 3A 74 C0                             ld      a,(mkt_selected_row)
 434+ C476 CD 8B C2                             call    PrintMarketItem
 435+ C479 CD 69 C2                             call    MKT_DisplayCargo
 436+ C47C CD 7A C2                             call    MKT_DisplayCash
 437+ C47F C9                                   ret
 438+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 439+ C480              mkt_RightPressed:       MMUSelectStockTable
 439+ C480 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 440+ C484 DD 21 00 E0                          ld      ix,StockFood
 441+ C488 3A 74 C0                             ld      a,(mkt_selected_row)
 442+ C48B 16 08                                ld      d,8
 443+ C48D 5F                                   ld      e,a
 444+ C48E ED 30                                mul
 445+ C490 DD 19                                add     ix,de
 446+ C492 4F                                   ld      c,a
 447+ C493 DD 7E 01                             ld      a,(ix+1)
 448+ C496 FE 00                                cp      0
 449+ C498 C8                                   ret     z
 450+ C499 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 451+ C49C FE 30                                cp      48
 452+ C49E 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 453+ C4A0 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 454+ C4A3 21 ED 92                             ld      hl,CargoTonnes
 455+ C4A6 ED 31                                add     hl,a
 456+ C4A8 7E                                   ld      a,(hl)
 457+ C4A9 FE C8                                cp      200
 458+ C4AB C8                                   ret     z                                   ; else its a 200 UoM limit
 459+ C4AC C3 B5 C4                             jp      .CheckCash
 460+ C4AF 2A EB 92     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 461+ C4B2 7C                                   ld      a,h
 462+ C4B3 BD                                   cp      l
 463+ C4B4 C8                                   ret     z                                   ; return if we have already maxed out
 464+ C4B5 2A E2 92     .CheckCash:             ld      hl,(Cash+2)
 465+ C4B8 7C                                   ld      a,h
 466+ C4B9 B5                                   or      l
 467+ C4BA 20 0F                                jr      nz,.MoreThanRequired
 468+ C4BC 2A E0 92                             ld      hl,(Cash)
 469+ C4BF 7C                                   ld      a,h
 470+ C4C0 FE 00                                cp      0
 471+ C4C2 20 07                                jr      nz,.MoreThanRequired
 472+ C4C4 DD 7E 02                             ld      a,(ix+2)
 473+ C4C7 BD                                   cp      l
 474+ C4C8 30 01                                jr      nc,.MoreThanRequired
 475+ C4CA C9                                   ret                         ; Insufficient Funds
 476+ C4CB 19           .MoreThanRequired:      add     hl,de
 477+ C4CC 7C                                   ld      a,h
 478+ C4CD B3                                   or      e
 479+ C4CE                                      ; check cash can we buy, and cargo capacity
 480+ C4CE DD 35 01                             dec     (ix+1)
 481+ C4D1 3A 74 C0                             ld      a,(mkt_selected_row)
 482+ C4D4 21 ED 92                             ld      hl,CargoTonnes
 483+ C4D7 ED 31                                add     hl,a
 484+ C4D9 34                                   inc     (hl)
 485+ C4DA DD 7E 07                             ld      a,(ix+7)
 486+ C4DD 47                                   ld      b,a
 487+ C4DE FE 30                                cp      48
 488+ C4E0 20 05                                jr      nz,.UnderOneTonne
 489+ C4E2 78                                   ld      a,b
 490+ C4E3 21 EC 92                             ld      hl,CargoRunningLoad
 491+ C4E6 34                                   inc     (hl)
 492+ C4E7 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 493+ C4EA 16 00                                ld      d,0
 494+ C4EC 5F                                   ld      e,a
 495+ C4ED CD AF 9E                             call    subDEfromCash
 496+ C4F0 3A 74 C0                             ld      a,(mkt_selected_row)
 497+ C4F3 CD 8B C2                             call    PrintMarketItem
 498+ C4F6 CD 69 C2                             call    MKT_DisplayCargo
 499+ C4F9 CD 7A C2                             call    MKT_DisplayCash
 500+ C4FC C9                                   ret
# file closed: Menus/market_prices_menu.asm
 819  C4FD
 820  C4FD              ; Bank 66
 821  C4FD
 822  C4FD                  SLOT    DispMarketAddr
 823  C4FD                  PAGE    BankDispMarket
 824  C4FD                  ORG     DispMarketAddr
 825  C000                  INCLUDE "market_prices_disp.asm"
# file opened: Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 7B 9D  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 41 9E  						DW $0220,name_expanded
   4+ C018 80 0B 9B 99  						DW $0B80,WordUnit
   5+ C01C B0 0B E4 9B  						DW $0BB0,WordQuantity
   6+ C020 08 13 C2 9B  						DW $1308,WordProduct
   7+ C024 60 13 CA 9B  						DW $1360,WordUoM
   8+ C028 80 13 CE 9B  						DW $1380,WordPrice
   9+ C02C B0 13 F2 9B  						DW $13B0,WordStock
  10+ C030 E0 13 EE 9B  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD 80 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A E2 92     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A E0 92                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	    ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A EC 92                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:       call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD 80 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD 80 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:        push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD 80 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 ED 92                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 1F 9C                             ld		hl,WordIdx
 256+ C2A5 CD F4 98                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD 80 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 1F 9C                             ld		hl,WordIdx
 264+ C2BF CD F4 98                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD 80 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD 80 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD 80 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD 80 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++C323
   2++C323                  MMUSelectLayer1
   2++C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++C327 CD 47 E0     	call	l1_cls
   4++C32A 3E 07        	ld		a,7
   5++C32C CD 53 E0     	call	l1_attr_cls_to_a
   6++C32F                  MMUSelectLayer2
   6++C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++C333 CD 08 E0     	call    asm_l2_double_buffer_off
   8++C336 CD C9 E0     	call	l2_cls	; Get some space
   9++C339              	MMUSelectSpriteBank
   9++C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++C33D CD 3F E1     	call    sprite_cls_cursors
  11++C340
  12++C340
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 3D 92                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 62 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 62 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 62 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 62 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 62 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 62 E2                             call	l2_draw_horz_line
 323+ C38A 3A E6 92     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD BC 9D                             call	expandTokenToString
 327+ C395 CD 79 F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD 80 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD 80 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: Menus/market_prices_disp.asm
 826  C3D3
 827  C3D3              ; Bank 55
 828  C3D3
 829  C3D3                  SLOT    StockTableAddr
 830  C3D3                  PAGE    BankStockTable
 831  C3D3                  ORG     StockTableAddr
 832  E000                  INCLUDE "Tables/stock_table.asm"
# file opened: Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 10 96                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A 32 93                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A 50 93                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A 32 93                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A 50 93                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: Tables/stock_table.asm
 833  E113
 834  E113              ; Bank 57
 835  E113
 836  E113                  SLOT    LAYER2Addr
 837  E113                  PAGE    BankLAYER2
 838  E113                  ORG     LAYER2Addr
 839  E000
 840  E000                  INCLUDE "layer2_bank_select.asm"
# file opened: Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: Layer2Graphics/layer2_bank_select.asm
 841  E072                  INCLUDE "layer2_cls.asm"
# file opened: Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: Layer2Graphics/layer2_cls.asm
 842  E0D0                  INCLUDE "layer2_initialise.asm"
# file opened: Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0              l2_initialise:
   3+ E0D0              ; ">l2_initialise"
   4+ E0D0 ED 91 12 08  	nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   5+ E0D4 ED 91 13 0B  	nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   6+ E0D8 ED 91 14 E3  	nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   7+ E0DC               ;   nextreg     LAYER_2_ACCESS_PORT,                l2_buffer_state
   8+ E0DC C9           	ret
   9+ E0DD
  10+ E0DD
  11+ E0DD              l2_flip_buffers:
  12+ E0DD                  GetNextReg LAYER2_RAM_PAGE_REGISTER
  12+ E0DD C5          >            push bc
  12+ E0DE 01 3B 24    >                ld bc,$243B
  12+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
  12+ E0E3 ED 79       >                    out (c),a
  12+ E0E5 04          >                    inc b
  12+ E0E6 ED 78       >                in a,(c)
  12+ E0E8 C1          >            pop bc
  13+ E0E9 57               ld      d,a
  14+ E0EA                  GetNextReg LAYER2_RAM_SHADOW_REGISTER
  14+ E0EA C5          >            push bc
  14+ E0EB 01 3B 24    >                ld bc,$243B
  14+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
  14+ E0F0 ED 79       >                    out (c),a
  14+ E0F2 04          >                    inc b
  14+ E0F3 ED 78       >                in a,(c)
  14+ E0F5 C1          >            pop bc
  15+ E0F6 5F               ld      e,a
  16+ E0F7 ED 92 12         nextreg LAYER2_RAM_PAGE_REGISTER, a
  17+ E0FA 7A               ld      a,d
  18+ E0FB ED 92 13         nextreg LAYER2_RAM_SHADOW_REGISTER, a
  19+ E0FE C9           	ret
  20+ E0FF
# file closed: Layer2Graphics/layer2_initialise.asm
 843  E0FF                  INCLUDE "layer2_plot_pixel.asm"
# file opened: Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: Layer2Graphics/layer2_plot_pixel.asm
 844  E124                  INCLUDE "layer2_print_character.asm"
# file opened: Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: Layer2Graphics/layer2_print_character.asm
 845  E1E6                  INCLUDE "layer2_draw_box.asm"
# file opened: Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 62 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 62 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 62 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B3 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B3 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: Layer2Graphics/layer2_draw_box.asm
 846  E229                  INCLUDE "asm_l2_plot_horizontal.asm"
# file opened: Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a
  19+ E23E 7A                                   ld		a,d
  20+ E23F 32 31 E2                             ld 		(l2_horz_lenlo),a
  21+ E242 AF                                   xor 	a
  22+ E243 32 32 E2                             ld 		(l2_horz_lenhi),a
  23+ E246 60                                   ld		h,b
  24+ E247 69                                   ld		l,c
  25+ E248 22 36 E2                             ld		(l2_horz_target),hl
  26+ E24B 21 2A E2     .write_dma:             ld 		hl, l2_horz_line
  27+ E24E 06 10                                ld 		b, l2_horz_cmd_len
  28+ E250 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT
  29+ E252 ED B3                                otir
  30+ E254 C9                                   ret
  31+ E255
  32+ E255              ; "bc = left side row,col, d = length, e = color"
  33+ E255 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E256 C5                                   push 	bc							; save row col
  35+ E257 78                                   ld   	a,b
  36+ E258 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E25B C1                                   pop  	bc
  38+ E25C 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25D D1                                   pop  	de							; get length back
  40+ E25E CD 3A E2                             call    l2_draw_horz_dma
  41+ E261 C9                                   ret
  42+ E262
  43+ E262              ; "l2_draw_horz_line"
  44+ E262              ; "bc = left side row,col, d = length, e = color"
  45+ E262              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E262 7A           l2_draw_horz_line:      ld		a,d
  47+ E263 FE 00                                cp 		0							; if its zero length then just return
  48+ E265 C8           .zerolengthexit:        ret		z
  49+ E266 FE 01        .isitlen1:              cp 		1
  50+ E268 CA 8A E2                             jp 		z,.l2_draw_horz_line_1
  51+ E26B FE 0A        .longenoughtfordma:     cp  10
  52+ E26D C3 55 E2                             jp  l2_draw_horz_dma_bank
  53+ E270 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E272 78                                   ld   	a,b
  55+ E273 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E276 C1                                   pop  	bc
  57+ E277 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E278 69                                   ld   	l,c
  59+ E279 D1                                   pop  	de							; get length back
  60+ E27A 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E27B 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27C 82                                   add  	a,d
  63+ E27D 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27F 3E FF        .clipat255:             ld   	a,$FF
  65+ E281 91                                   sub  	c							; a holds clipped length
  66+ E282 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E283 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E285 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E286 23                                   inc hl
  70+ E287 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E289 C9                                   ret
  72+ E28A 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E28B C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28E
  75+ E28E              ; "l2_draw_horz_line_to"
  76+ E28E              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28E 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28F B9                                   cp 		c
  79+ E290 30 04                                jr		nc, .noswap
  80+ E292 28 07                                jr      z, .singlepixel
  81+ E294 51           .swap:                  ld		d,c
  82+ E295 4F                                   ld		c,a
  83+ E296 7A           .noswap:                ld		a,d
  84+ E297 91                                   sub		c
  85+ E298              ;                        dec		a							; so now its length not offset
  86+ E298 57                                   ld		d,a
  87+ E299 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E29B 7B           .singlepixel:           ld		a,e
  89+ E29C C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29F
# file closed: Layer2Graphics/asm_l2_plot_horizontal.asm
 847  E29F                  INCLUDE "asm_l2_plot_vertical.asm"
# file opened: Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29F              ; ">l2_draw_vert_segment"
   2+ E29F              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29F              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29F 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2A0 FE 00        .emptylinecheck:	    cp 		0
   6+ E2A2 C8                                   ret		z
   7+ E2A3 FE 01        .justonepixel	        cp		1
   8+ E2A5 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A7 73                                   ld		(hl),e
  10+ E2A8 C9                                   ret
  11+ E2A9              .multiplepixelsLoop:
  12+ E2A9 7C           .endofbankcheck:        ld   	a,h
  13+ E2AA FE 40                                cp   	64
  14+ E2AC D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AD 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AE 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AF 15                                   dec		d
  18+ E2B0 C8                                   ret		z
  19+ E2B1 18 F6                                jr		.multiplepixelsLoop
  20+ E2B3
  21+ E2B3              ; ">l2_draw_vert_line"
  22+ E2B3              ; ">bc = row col d = length, e = color"
  23+ E2B3 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B4 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B6 D0                                   ret 	nc							; can't start off the screen
  26+ E2B7 7A           .emptylinecheck:        ld		a,d
  27+ E2B8 FE 00                                cp		0
  28+ E2BA C8                                   ret		z
  29+ E2BB FE 01                                cp		1
  30+ E2BD 20 04                                jr		nz,.multiplepixels
  31+ E2BF CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C2 C9                                   ret
  33+ E2C3              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C3 7A           .clipto192:             ld		a,d							; get length
  35+ E2C4 80                                   add		a,b							; a= row + length
  36+ E2C5 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C7 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C9 38 08                                jr		c, .noclipneeded
  39+ E2CB 78           .needtoclip             ld		a,b
  40+ E2CC 82                                   add		a,d
  41+ E2CD D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CF 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2D0 7A                                   ld		a,d
  44+ E2D1 94                                   sub		h
  45+ E2D2 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D3              ; so now BC = row col, d = length clipped, e = color
  47+ E2D3 78           .noclipneeded:          ld		a,b
  48+ E2D4 C5 D5                                push	bc,,de
  49+ E2D6 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D9               	 	; we now have poke address and a variable holding current bank number
  50+ E2D9 D1 C1                                pop		bc,,de
  51+ E2DB 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DC 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DD CD 9F E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2E0 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2E1 FE 00                                cp		0
  56+ E2E3 28 27                                jr		z, .doneplotting
  57+ E2E5 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E8 3C                                   inc		a
  59+ E2E9 06 00                                ld		b,0
  60+ E2EB C5 D5                                push	bc,,de
  61+ E2ED CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2F0 D1 C1                                pop     bc,,de
  63+ E2F2 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F3 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F4 CD 9F E2                             call	l2_draw_vert_segment
  66+ E2F7 7A                                   ld		a,d
  67+ E2F8 FE 00                                cp		0
  68+ E2FA 28 10                                jr		z,.doneplotting
  69+ E2FC 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FF 3C                                   inc		a
  71+ E300 06 00                                ld		b,0
  72+ E302 C5 D5                                push	bc,,de
  73+ E304 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E307 D1                                   pop		de
  75+ E308 E1                                   pop		hl							; hl = bc
  76+ E309 CD 9F E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30C C9           .doneplotting:	        ret
  78+ E30D
  79+ E30D              ; ">l2_draw_vert_line_to"
  80+ E30D              ; ">bc = row col d = to position, e = color"
  81+ E30D 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30E BA                                   cp		d
  83+ E30F 38 02                                jr		c, .noyswap
  84+ E311 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E312 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E313 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E314 90                                   sub		b
  88+ E315 3C                                   inc		a			; so now its length not offset
  89+ E316 57                                   ld		d,a
  90+ E317 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E319                                      ; no return needed
  92+ E319
# file closed: Layer2Graphics/asm_l2_plot_vertical.asm
 848  E319                  INCLUDE "layer2_plot_diagonal.asm"
# file opened: Layer2Graphics/layer2_plot_diagonal.asm
   1+ E319
   2+ E319              l2_draw_box_to:
   3+ E319              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E319              ; ">NOT IMPLEMENTED YET"
   5+ E319 C9           	ret
   6+ E31A
   7+ E31A              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E31A              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E31A              l2decbstep	EQU $05
  10+ E31A              l2incbstep	EQU	$04
  11+ E31A              l2deccstep	EQU $0D
  12+ E31A              l2inccstep	EQU	$0C
  13+ E31A              		; l2 deltas are signed
  14+ E31A 00 00        l2deltaY	DW	0
  15+ E31C 00 00        l2deltaX	DW	0
  16+ E31E 00           l2deltaYsq	db	0
  17+ E31F 00           l2deltaXsq	db	0
  18+ E320 00           l2deltaYn	db	0
  19+ E321 00           l2deltaXn	db	0
  20+ E322 00           l2deltaYsqn	db	0
  21+ E323 00           l2deltaXsqn	db	0
  22+ E324 00           l2linecolor	db	0
  23+ E325 00 00        l2fraction	dw	0
  24+ E327 00 00        l2e2		dw	0
  25+ E329 00           l2way		db	0
  26+ E32A 00 00        l2targetPtr	dw	0
  27+ E32C              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32C 00 00 00...  l2targetArray1 ds	256
  29+ E42C 00 00 00...  l2targetArray2 ds	256
  30+ E52C              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52C              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52C              ;;    dx =  abs(x1-x0);
  33+ E52C              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52C              ;;    dy = -abs(y1-y0);
  35+ E52C              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52C              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52C              ;;    while (true)   /* loop */
  38+ E52C              ;;        plot(x0, y0);
  39+ E52C              ;;        if (x0==x1 && y0==y1) break;
  40+ E52C              ;;        e2 = 2*err;
  41+ E52C              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52C              ;;            err += dy;
  43+ E52C              ;;            x0 += sx;
  44+ E52C              ;;        end if
  45+ E52C              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52C              ;;            err += dx;
  47+ E52C              ;;            y0 += sy;
  48+ E52C              ;;        end if
  49+ E52C              ;;    end while
  50+ E52C              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52C              ; ">hl will be either l2targetArray1 or 2"
  52+ E52C              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52C FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52E 28 06                                jr		z,l2S_ItsArray1
  55+ E530 21 2C E4                             ld		hl,l2targetArray2
  56+ E533 C3 39 E5                             jp		l2S_setTarget
  57+ E536 21 2C E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E539 22 2A E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53C 32 24 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53F 21 00 00                             ld		hl,0                            ;
  62+ E542 22 1C E3                             ld		(l2deltaX),hl                   ;
  63+ E545 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E548 78           l2S_preSort:            ld		a,b								;
  65+ E549                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E549 BA          >                        cp      d
  65+ E54A DA 52 E5    >                        jp		c,l2S_noYSort
  66+ E54D              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54D 60          >                ld		h,b
  66+ E54E 69          >                ld		l,c
  67+ E54F EB                                   ex		de,hl                           ;
  68+ E550                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E550 44          >                ld		b,h
  68+ E551 4D          >                ld		c,l
  69+ E552 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E554 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E556 79           l2S_setXLen:            ld		a,c                             ;
  72+ E557                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E557 BB          >                        cp      e
  72+ E558 DA 64 E5    >                        jp		c,l2S_PosXLen
  73+ E55B 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55C 93                                   sub     e                               ;
  75+ E55D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E560 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E562 18 07                                jr		l2S_XINCDEC
  78+ E564 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E565 91                                   sub		c                               ;
  80+ E566 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E569 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E56B              l2S_XINCDEC:
  83+ E56B 32 D7 E5     	ld		(l2S_adjustCol),a				;
  84+ E56E 32 08 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E571              l2S_setYLen
  86+ E571 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E572 90           	sub		b
  88+ E573 32 1A E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E576              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E576              ldS_FracDYltDX:								;
  91+ E576 2A 1A E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E579 ED 5B 1C E3  	ld		de,(l2deltaX)
  93+ E57D              	ClearCarryFlag
  93+ E57D B7          >				or a
  94+ E57E ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E580 EB           	ex		de,hl
  96+ E581 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E583 FD 6B        	ld		iyl,e
  98+ E585 F2 AA E5     	jp		p,l2S_fracIsPositive
  99+ E588              l2S_fracIsNegative:
 100+ E588              	NegIY
 100+ E588 AF          >	xor a
 100+ E589 FD 95       >	sub iyl
 100+ E58B FD 6F       >	ld iyl,a
 100+ E58D 9F          >	sbc a,a
 100+ E58E FD 94       >	sub iyh
 100+ E590 FD 67       >	ld iyh,a
 101+ E592              	ShiftIYRight1
 101+ E592 FD 7C       >			   ld 	a,iyh
 101+ E594 CB 3F       >			   srl 	a
 101+ E596 FD 67       >			   ld	iyh,a
 101+ E598 FD 7D       >			   ld 	a,iyl
 101+ E59A 1F          >			   rra
 101+ E59B FD 6F       >			   ld	iyl,a
 102+ E59D              	NegIY
 102+ E59D AF          >	xor a
 102+ E59E FD 95       >	sub iyl
 102+ E5A0 FD 6F       >	ld iyl,a
 102+ E5A2 9F          >	sbc a,a
 102+ E5A3 FD 94       >	sub iyh
 102+ E5A5 FD 67       >	ld iyh,a
 103+ E5A7 C3 B5 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5AA              l2S_fracIsPositive:
 105+ E5AA              	ShiftIYRight1
 105+ E5AA FD 7C       >			   ld 	a,iyh
 105+ E5AC CB 3F       >			   srl 	a
 105+ E5AE FD 67       >			   ld	iyh,a
 105+ E5B0 FD 7D       >			   ld 	a,iyl
 105+ E5B2 1F          >			   rra
 105+ E5B3 FD 6F       >			   ld	iyl,a
 106+ E5B5              l2S_SkipCalcInc:
 107+ E5B5              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B5 2A 2A E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B8 78           	ld		a,b
 110+ E5B9 ED 31        	add		hl,a
 111+ E5BB 71           	ld		(hl),c
 112+ E5BC              l2S_CheckIfEnd:
 113+ E5BC DD 7C        	ld		a,ixh
 114+ E5BE              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BE B8          >                        cp     b
 114+ E5BF D2 C5 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C2 C3 C9 E5     	jp		l2S_Continue
 116+ E5C5              l2S_CheckXPos:
 117+ E5C5 79           	ld		a,c
 118+ E5C6              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C6 DD BD       >                   cp    ixl
 118+ E5C8 D0          >                   ret	 nc
 119+ E5C9              l2S_Continue:
 120+ E5C9              l2S_HNegative:
 121+ E5C9 FD 7C        	ld		a,iyh
 122+ E5CB CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CD 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CF              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CF 3A 1A E3     	ld		a,(l2deltaY)
 126+ E5D2 16 00        	ld		d,0
 127+ E5D4 5F           	ld		e,a
 128+ E5D5 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D7              l2S_adjustCol:
 130+ E5D7 00           	nop										; this is our inc/dec of X
 131+ E5D8 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5DA              l2S_ErrNotNegative:
 133+ E5DA FD 7C        	ld		a,iyh
 134+ E5DC FD B5        	or		iyl
 135+ E5DE              	IfAIsZeroGoto l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DE FE 00       >				cp	0
 135+ E5E0 CA F9 E5    >				jp	z,l2S_ErrZero
 136+ E5E3              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E3              	lddeiy
 137+ E5E3 FD 54       >                ld		d,iyh
 137+ E5E5 FD 5D       >                ld		e,iyl
 138+ E5E7 EB           	ex		de,hl
 139+ E5E8 16 00        	ld		d,0
 140+ E5EA 3A 1C E3     	ld		a,(l2deltaX)
 141+ E5ED 5F           	ld		e,a
 142+ E5EE              	ClearCarryFlag
 142+ E5EE B7          >				or a
 143+ E5EF ED 52        	sbc		hl,de
 144+ E5F1 EB           	ex		de,hl
 145+ E5F2              	ldiyde
 145+ E5F2 FD 62       >                ld		iyh,d
 145+ E5F4 FD 6B       >                ld		iyl,e
 146+ E5F6              l2S_adjustRow:									; move Y down by one
 147+ E5F6 04           	inc		b
 148+ E5F7 18 BC        	jr		l2S_Loop
 149+ E5F9              l2S_ErrZero:
 150+ E5F9 2A 1C E3     	ld		hl,(l2deltaX)
 151+ E5FC EB           	ex		de,hl
 152+ E5FD 2A 1A E3     	ld		hl,(l2deltaY)
 153+ E600              	ClearCarryFlag
 153+ E600 B7          >				or a
 154+ E601 ED 52        	sbc		hl,de
 155+ E603 EB           	ex		de,hl
 156+ E604              	ldiyde
 156+ E604 FD 62       >                ld		iyh,d
 156+ E606 FD 6B       >                ld		iyl,e
 157+ E608              l2S_adjustCol2:
 158+ E608 00           	nop										; update X and Y
 159+ E609 04           	inc		b
 160+ E60A 18 A9        	jr		l2S_Loop
 161+ E60C
 162+ E60C              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E60C 32 24 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60F 21 00 00                             ld		hl,0                            ;
 165+ E612 22 1C E3                             ld		(l2deltaX),hl                   ;
 166+ E615 22 1A E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E618 78           l2D_preSort:            ld		a,b								;
 168+ E619                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 168+ E619 BA          >                        cp      d
 168+ E61A DA 22 E6    >                        jp		c,l2D_noYSort
 169+ E61D              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61D 60          >                ld		h,b
 169+ E61E 69          >                ld		l,c
 170+ E61F EB                                   ex		de,hl                           ;
 171+ E620                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E620 44          >                ld		b,h
 171+ E621 4D          >                ld		c,l
 172+ E622 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E624 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E626 79           l2D_setXLen:            ld		a,c                             ;
 175+ E627                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E627 BB          >                        cp      e
 175+ E628 DA 34 E6    >                        jp		c,l2D_PosXLen
 176+ E62B 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E62C 93                                   sub     e                               ;
 178+ E62D 32 1C E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E630 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E632 18 07                                jr		l2D_XINCDEC
 181+ E634 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E635 91                                   sub		c                               ;
 183+ E636 32 1C E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E639 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E63B 32 AA E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63E 32 DB E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E641 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E642 90                                   sub		b
 189+ E643 32 1A E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E646              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E646 2A 1A E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E649 ED 5B 1C E3                          ld		de,(l2deltaX)
 193+ E64D                                      ClearCarryFlag
 193+ E64D B7          >				or a
 194+ E64E ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E650 EB                                   ex		de,hl
 196+ E651 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E653 FD 6B                                ld		iyl,e
 198+ E655 F2 7A E6                             jp		p,l2D_fracIsPositive
 199+ E658              l2D_fracIsNegative:     NegIY
 199+ E658 AF          >	xor a
 199+ E659 FD 95       >	sub iyl
 199+ E65B FD 6F       >	ld iyl,a
 199+ E65D 9F          >	sbc a,a
 199+ E65E FD 94       >	sub iyh
 199+ E660 FD 67       >	ld iyh,a
 200+ E662                                      ShiftIYRight1
 200+ E662 FD 7C       >			   ld 	a,iyh
 200+ E664 CB 3F       >			   srl 	a
 200+ E666 FD 67       >			   ld	iyh,a
 200+ E668 FD 7D       >			   ld 	a,iyl
 200+ E66A 1F          >			   rra
 200+ E66B FD 6F       >			   ld	iyl,a
 201+ E66D                                      NegIY
 201+ E66D AF          >	xor a
 201+ E66E FD 95       >	sub iyl
 201+ E670 FD 6F       >	ld iyl,a
 201+ E672 9F          >	sbc a,a
 201+ E673 FD 94       >	sub iyh
 201+ E675 FD 67       >	ld iyh,a
 202+ E677 C3 85 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E67A              l2D_fracIsPositive:     ShiftIYRight1
 203+ E67A FD 7C       >			   ld 	a,iyh
 203+ E67C CB 3F       >			   srl 	a
 203+ E67E FD 67       >			   ld	iyh,a
 203+ E680 FD 7D       >			   ld 	a,iyl
 203+ E682 1F          >			   rra
 203+ E683 FD 6F       >			   ld	iyl,a
 204+ E685              l2D_SkipCalcInc:
 205+ E685 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E687 3A 24 E3                             ld		a,(l2linecolor)     			;
 207+ E68A CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68D D1 C1                                pop     bc,,de
 209+ E68F DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E691                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E691 B8          >                        cp     b
 210+ E692 D2 98 E6    >                        jp		nc,l2D_CheckXPos
 211+ E695 C3 9C E6                             jp		l2D_Continue
 212+ E698 79           l2D_CheckXPos:          ld		a,c
 213+ E699                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E699 DD BD       >                  cp      ixl
 213+ E69B C8          >                  ret     z
 214+ E69C              l2D_Continue:
 215+ E69C FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69E CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6A0 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6A2 3A 1A E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A5 16 00                                ld		d,0
 220+ E6A7 5F                                   ld		e,a
 221+ E6A8 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6AA 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6AB 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AD FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AF FD B5                                or		iyl
 226+ E6B1                                      IfAIsZeroGoto l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6B1 FE 00       >				cp	0
 226+ E6B3 CA CC E6    >				jp	z,l2D_ErrZero
 227+ E6B6              l2D_ErrPositive:		lddeiy
 227+ E6B6 FD 54       >                ld		d,iyh
 227+ E6B8 FD 5D       >                ld		e,iyl
 228+ E6BA EB                                   ex		de,hl
 229+ E6BB 16 00                                ld		d,0
 230+ E6BD 3A 1C E3                             ld		a,(l2deltaX)
 231+ E6C0 5F                                   ld		e,a
 232+ E6C1                                      ClearCarryFlag
 232+ E6C1 B7          >				or a
 233+ E6C2 ED 52                                sbc		hl,de
 234+ E6C4 EB                                   ex		de,hl
 235+ E6C5                                      ldiyde
 235+ E6C5 FD 62       >                ld		iyh,d
 235+ E6C7 FD 6B       >                ld		iyl,e
 236+ E6C9 04           l2D_adjustRow:			inc		b
 237+ E6CA 18 B9                                jr		l2D_Loop
 238+ E6CC 2A 1C E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CF EB                                   ex		de,hl
 240+ E6D0 2A 1A E3                             ld		hl,(l2deltaY)
 241+ E6D3                                      ClearCarryFlag
 241+ E6D3 B7          >				or a
 242+ E6D4 ED 52                                sbc		hl,de
 243+ E6D6 EB                                   ex		de,hl
 244+ E6D7                                      ldiyde
 244+ E6D7 FD 62       >                ld		iyh,d
 244+ E6D9 FD 6B       >                ld		iyl,e
 245+ E6DB 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6DC 04                                   inc		b
 247+ E6DD 18 A6                                jr		l2D_Loop
 248+ E6DF              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DF
 250+ E6DF
 251+ E6DF
 252+ E6DF
 253+ E6DF              ;Loin:				; BBC version of line draw
 254+ E6DF              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DF              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DF              ;	ld		ixh,0							; ixh = s
 257+ E6DF              ;	ld		iyh,0							; iyh = swap
 258+ E6DF              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DF              ;LoinCalcDeltaX:
 260+ E6DF              ;	ld		a,e
 261+ E6DF              ;	sub		c								; a = deltaX
 262+ E6DF              ;	JumpIfPositive LoinPosDx
 263+ E6DF              ;LoinNegDx:
 264+ E6DF              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DF              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DF              ;LoinPosDx:
 267+ E6DF              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DF              ;LoinCalcDeltaY:
 269+ E6DF              ;	ld		a,d
 270+ E6DF              ;	sub		b								; a= deltaY
 271+ E6DF              ;	JumpIfPositive LoinPosDy
 272+ E6DF              ;LoinNegDy:
 273+ E6DF              ;	neg
 274+ E6DF              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DF              ;LoinPosDy:
 276+ E6DF              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DF              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DF              ;LoinSTPx:									; step along X
 279+ E6DF              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DF              ;LoinSTPxSwapCoords:
 281+ E6DF              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DF              ;	ld		a,l								; save l flags
 283+ E6DF              ;	ex		de,hl							; save de to hl
 284+ E6DF              ;	lddebc									; Point2 = point1
 285+ E6DF              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DF              ;	ld		l,a								; get back l flags
 287+ E6DF              ;LoinSTPxCorrectOrder:
 288+ E6DF              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DF              ;	ld		a,iyl							; get delta Y back
 290+ E6DF              ;	ld		iy1,$FE							; roll counter
 291+ E6DF              ;LionSTPxRollQ:
 292+ E6DF              ;	sla		a								; highest bit of delta-Y
 293+ E6DF              ;	jp		c,LoinSTPxSteep
 294+ E6DF              ;	cp		ixl								; compare with DeltaX
 295+ E6DF              ;	jp		cs,LoinSTPxShallow
 296+ E6DF              ;LoinSTPxSteep:								;; LI4
 297+ E6DF              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DF              ;	scf										; force carry flag set
 299+ E6DF              ;LoinSTPxShallow:							;; LI5
 300+ E6DF              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DF              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DF              ;	inc		ihl								; DeltaX += 1
 303+ E6DF              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DF              ;	ld		a,d
 305+ E6DF              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DF              ;	ld		a,iyh							; swap flag
 307+ E6DF              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DF              ;LoinSTPxX1Dec:
 309+ E6DF              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DF              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DF              ;	sub		b
 312+ E6DF              ;	if
 313+ E6DF              ;
 314+ E6DF              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DF              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DF              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DF              ;86 81                   STX &81		\ Q
 318+ E6DF              ;.LIL1	\ roll Q
 319+ E6DF              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DF              ;B0 04                   BCS LI4		\ steep
 321+ E6DF              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DF              ;90 03                   BCC LI5		\ shallow
 323+ E6DF              ;.LI4	\ steep
 324+ E6DF              ;E5 1B                   SBC &1B		\ P
 325+ E6DF              ;38                      SEC
 326+ E6DF              ;.LI5	\ shallow
 327+ E6DF              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DF              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DF              ;A6 1B                   LDX &1B		\ P
 330+ E6DF              ;E8                      INX 		\ Xreg is width
 331+ E6DF              ;A5 37                   LDA &37		\ Y2
 332+ E6DF              ;E5 35                   SBC &35		\ Y1
 333+ E6DF              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DF              ;A5 90                   LDA &90		\ SWAP
 335+ E6DF              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DF              ;CA                      DEX
 337+ E6DF              ;.LIL2	\ counter X width
 338+ E6DF              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DF              ;.LI6	\ Xreg correct
 342+ E6DF              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DF              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DF              ;66 82                   ROR &82		\ R
 345+ E6DF              ;A5 07                   LDA &07		\ SC
 346+ E6DF              ;69 08                   ADC #8		\ next column
 347+ E6DF              ;85 07                   STA &07		\ SC
 348+ E6DF              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DF              ;A5 83                   LDA &83		\ S
 350+ E6DF              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DF              ;85 83                   STA &83		\ S
 352+ E6DF              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DF              ;88                      DEY
 354+ E6DF              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DF              ;C6 08                   DEC &08		\ SC+1
 356+ E6DF              ;A0 07                   LDY #7
 357+ E6DF              ;.LIC2	\ skip Y adjustment
 358+ E6DF              ;CA                      DEX
 359+ E6DF              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DF              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DF              ;60                      RTS
 362+ E6DF              ;
 363+ E6DF              ;.DOWN	\ Line is going to the right and down
 364+ E6DF              ;A5 90                   LDA &90		\ SWAP
 365+ E6DF              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DF              ;CA                      DEX
 367+ E6DF              ;.LIL3	\ counter X width
 368+ E6DF              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DF              ;.LI9	\ no swap
 372+ E6DF              ;46 82                   LSR &82		\ R
 373+ E6DF              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DF              ;66 82                   ROR &82		\ R
 375+ E6DF              ;A5 07                   LDA &07		\ SC
 376+ E6DF              ;69 08                   ADC #8		\ next column
 377+ E6DF              ;85 07                   STA &07		\ SC
 378+ E6DF              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DF              ;A5 83                   LDA &83		\ S
 380+ E6DF              ;65 81                   ADC &81		\ Q
 381+ E6DF              ;85 83                   STA &83		\ S
 382+ E6DF              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DF              ;C8                      INY
 384+ E6DF              ;C0 08                   CPY #8
 385+ E6DF              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DF              ;E6 08                   INC &08		\ SC+1
 387+ E6DF              ;A0 00                   LDY #0
 388+ E6DF              ;.LIC3	\ skipped Y adjustment
 389+ E6DF              ;CA                      DEX
 390+ E6DF              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DF              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DF              ;60                      RTS
 393+ E6DF              ;
 394+ E6DF              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DF              ;A4 35                   LDY &35		\ Y1
 396+ E6DF              ;98                      TYA
 397+ E6DF              ;A6 34                   LDX &34		\ X1
 398+ E6DF              ;C4 37                   CPY &37		\ Y2
 399+ E6DF              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DF              ;C6 90                   DEC &90		\ SWAP
 401+ E6DF              ;A5 36                   LDA &36		\ X2
 402+ E6DF              ;85 34                   STA &34		\ X1
 403+ E6DF              ;86 36                   STX &36		\ X2
 404+ E6DF              ;AA                      TAX
 405+ E6DF              ;A5 37                   LDA &37		\ Y2
 406+ E6DF              ;85 35                   STA &35		\ Y1
 407+ E6DF              ;84 37                   STY &37		\ Y2
 408+ E6DF              ;A8                      TAY
 409+ E6DF              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DF              ;4A                      LSR A
 411+ E6DF              ;4A                      LSR A
 412+ E6DF              ;4A                      LSR A
 413+ E6DF              ;09 60                   ORA #&60
 414+ E6DF              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DF              ;8A                      TXA 		\ X1
 416+ E6DF              ;29 F8                   AND #&F8
 417+ E6DF              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DF              ;8A                      TXA
 419+ E6DF              ;29 07                   AND #7		\ mask index
 420+ E6DF              ;AA                      TAX
 421+ E6DF              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DF              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DF              ;A5 35                   LDA &35		\ Y1
 424+ E6DF              ;29 07                   AND #7
 425+ E6DF              ;A8                      TAY
 426+ E6DF              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DF              ;A2 01                   LDX #1		\ roll counter
 428+ E6DF              ;86 1B                   STX &1B	    	\ P
 429+ E6DF              ;.LIL4	\ roll P
 430+ E6DF              ;0A                      ASL A
 431+ E6DF              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DF              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DF              ;90 03                   BCC LI14	\ less than Q
 434+ E6DF              ;.LI13	\ do subtraction
 435+ E6DF              ;E5 81                   SBC &81		\ Q
 436+ E6DF              ;38                      SEC
 437+ E6DF              ;.LI14	\ less than Q
 438+ E6DF              ;26 1B                   ROL &1B		\ P
 439+ E6DF              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DF              ;A6 81                   LDX &81		\ Q
 441+ E6DF              ;E8                      INX 		\ adjust height
 442+ E6DF              ;A5 36                   LDA &36		\ X2
 443+ E6DF              ;E5 34                   SBC &34		\ X1
 444+ E6DF              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DF              ;18                      CLC
 446+ E6DF              ;A5 90                   LDA &90		\ SWAP
 447+ E6DF              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DF              ;CA                      DEX
 449+ E6DF              ;.LIL5	\ skipped first point, counter X
 450+ E6DF              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DF              ;.LI17	\ skipped first point
 454+ E6DF              ;88                      DEY
 455+ E6DF              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DF              ;C6 08                   DEC &08		\ SC+1
 457+ E6DF              ;A0 07                   LDY #7		\ new char
 458+ E6DF              ;	.LI16	\ skipped hi adjust
 459+ E6DF              ;A5 83                   LDA &83		\ S
 460+ E6DF              ;65 1B                   ADC &1B		\ P
 461+ E6DF              ;85 83                   STA &83		\ S
 462+ E6DF              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DF              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DF              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DF              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DF              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DF              ;69 08                   ADC #8		\ next char below
 468+ E6DF              ;85 07                   STA &07		\ SC
 469+ E6DF              ;.LIC5	\ same column
 470+ E6DF              ;CA                      DEX
 471+ E6DF              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DF              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DF              ;60                      RTS
 474+ E6DF              ;
 475+ E6DF              ;.LFT	\ going left
 476+ E6DF              ;A5 90                   LDA &90		\ SWAP
 477+ E6DF              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DF              ;CA                      DEX 		\ reduce height
 479+ E6DF              ;.LIL6	\ counter X height
 480+ E6DF              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DF              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DF              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DF              ;.LI18
 484+ E6DF              ;88                      DEY
 485+ E6DF              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DF              ;C6 08                   DEC &08		\ SC+1
 487+ E6DF              ;A0 07                   LDY #7		\ rest char row
 488+ E6DF              ;.LI19	\ skipped hi adjust
 489+ E6DF              ;A5 83                   LDA &83		\ S
 490+ E6DF              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DF              ;85 83                   STA &83		\ S
 492+ E6DF              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DF              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DF              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DF              ;26 82                   ROL &82		\ R
 496+ E6DF              ;A5 07                   LDA &07		\ SC
 497+ E6DF              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DF              ;85 07                   STA &07		\ SC
 499+ E6DF              ;18                      CLC
 500+ E6DF              ;.LIC6	\ no overflow
 501+ E6DF              ;CA                      DEX 		\ height
 502+ E6DF              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DF              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DF              ;.HL6
 505+ E6DF              ;60                      RTS 		\ end Line drawing
 506+ E6DF
 507+ E6DF
 508+ E6DF              ;;l2_draw_diagonalopt:
 509+ E6DF              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DF              ;;	push	af
 511+ E6DF              ;;	ld		a,b
 512+ E6DF              ;;	cp		d
 513+ E6DF              ;;	jr		z,.RegularDiagnonal
 514+ E6DF              ;;.CheckHorz:
 515+ E6DF              ;;	ld		a,c
 516+ E6DF              ;;	cp		e
 517+ E6DF              ;;	jr		z,.horizontalLine
 518+ E6DF              ;;.RegularDiagnonal:
 519+ E6DF              ;;	pop		af
 520+ E6DF              ;;	call diag
 521+ E6DF
 522+ E6DF
 523+ E6DF              ;;l2_signed_mul2a:
 524+ E6DF              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DF              ;;	TEST	$80
 526+ E6DF              ;;	jr		nz, .negativecalc
 527+ E6DF              ;;.positivecalc:
 528+ E6DF              ;;	ccf
 529+ E6DF              ;;	rla
 530+ E6DF              ;;	ret
 531+ E6DF              ;;.negativecalc:
 532+ E6DF              ;;	neg
 533+ E6DF              ;;	ccf
 534+ E6DF              ;;	rla
 535+ E6DF              ;;	neg
 536+ E6DF              ;;	ret
 537+ E6DF              ;;
 538+ E6DF              ;;l2_signed_mul2atohl:
 539+ E6DF              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DF              ;;	TEST	$80
 541+ E6DF              ;;	jr		nz, .negativecalc
 542+ E6DF              ;;.positivecalc:
 543+ E6DF              ;;	ld		hl,0
 544+ E6DF              ;;	ld		l,a
 545+ E6DF              ;;	add		hl,a
 546+ E6DF              ;;	ret
 547+ E6DF              ;;.negativecalc:
 548+ E6DF              ;;	neg
 549+ E6DF              ;;	ld		hl,0
 550+ E6DF              ;;	ld		l,a
 551+ E6DF              ;;	neghl
 552+ E6DF              ;;	ret
 553+ E6DF              ;;
 554+ E6DF              ;;l2_e2fractionby2:
 555+ E6DF              ;;	ld 		hl,(l2fraction)
 556+ E6DF              ;;	push	de
 557+ E6DF              ;;	ld		d,h
 558+ E6DF              ;;	ld		e,l
 559+ E6DF              ;;	add		hl,de
 560+ E6DF              ;;	pop		de
 561+ E6DF              ;;	ld		(l2e2),hl
 562+ E6DF              ;;	ret
 563+ E6DF
 564+ E6DF
 565+ E6DF
 566+ E6DF
 567+ E6DF
 568+ E6DF              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DF              ;;//.catchLoop:
 570+ E6DF              ;;//	jp .catchLoop
 571+ E6DF              ;;//.continue:
 572+ E6DF              ;;//    ld      A,D
 573+ E6DF              ;;//    sub     H
 574+ E6DF              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DF              ;;//.DXNegative:
 576+ E6DF              ;;//    neg
 577+ E6DF              ;;//.DXPositive:
 578+ E6DF              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DF              ;;//    ld      A,E
 580+ E6DF              ;;//    sub     L
 581+ E6DF              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DF              ;;//.DYNegative:
 583+ E6DF              ;;//    neg
 584+ E6DF              ;;//.DYPositive:
 585+ E6DF              ;;//    sub     B               ;|delta_y|
 586+ E6DF              ;;//	push	af
 587+ E6DF              ;;//	jr		c,.DeltaX
 588+ E6DF              ;;//.DeltaY
 589+ E6DF              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DF              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DF              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DF              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DF              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DF              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DF              ;;//.DeltaX:
 596+ E6DF              ;;//	ld		a,d
 597+ E6DF              ;;//	sub		h
 598+ E6DF              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DF              ;;//.TestDX:
 600+ E6DF              ;;//	ex		de,hl
 601+ E6DF              ;;//.TestDY:
 602+ E6DF              ;;//	ld		a,e
 603+ E6DF              ;;//	sub		l
 604+ E6DF              ;;//    ld      A,$01
 605+ E6DF              ;;//    jr      NC,.StoreA
 606+ E6DF              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DF              ;;//.StoreA:
 608+ E6DF              ;;//        ld      (l2way),A
 609+ E6DF              ;;//.InitLine:
 610+ E6DF              ;;//        ld      B,H
 611+ E6DF              ;;//        ld      C,L
 612+ E6DF              ;;//        ld      A,E
 613+ E6DF              ;;//        sub     L
 614+ E6DF              ;;//        jr      NC,.EndInit
 615+ E6DF              ;;//        ld      A,L
 616+ E6DF              ;;//        ld      L,E
 617+ E6DF              ;;//        ld      E,A
 618+ E6DF              ;;//.EndInit:
 619+ E6DF              ;;//        ld      A,E
 620+ E6DF              ;;//        sub     L
 621+ E6DF              ;;//        rla
 622+ E6DF              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DF              ;;//        add     A,H
 624+ E6DF              ;;//        sub     D
 625+ E6DF              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DF              ;;//        add     A,H
 627+ E6DF              ;;//        sub     D
 628+ E6DF              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DF              ;;//.Loop:
 630+ E6DF              ;;//        ld      A,B
 631+ E6DF              ;;//        sub     D
 632+ E6DF              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DF              ;;//        pop     AF
 634+ E6DF              ;;//        bit     7,A
 635+ E6DF              ;;//        push    AF
 636+ E6DF              ;;//        push    AF
 637+ E6DF              ;;//        push    BC
 638+ E6DF              ;;//        jr      Z,.DrawPoint
 639+ E6DF              ;;//        ld      A,B
 640+ E6DF              ;;//        ld      B,C
 641+ E6DF              ;;//        ld      C,A
 642+ E6DF              ;;//.DrawPoint:
 643+ E6DF              ;;//		push	hl
 644+ E6DF              ;;//		pushbcdeaf
 645+ E6DF              ;;//		ld		b,e
 646+ E6DF              ;;//		ld		c,d
 647+ E6DF              ;;//	ld 		a,(l2linecolor)
 648+ E6DF              ;;//	call	l2_plot_pixel
 649+ E6DF              ;;//		popafdebc
 650+ E6DF              ;;//		pop		hl
 651+ E6DF              ;;//        pop     BC
 652+ E6DF              ;;//        pop     AF
 653+ E6DF              ;;//.TestD:
 654+ E6DF              ;;//        bit     7,E
 655+ E6DF              ;;//        jr      NZ,.Case1
 656+ E6DF              ;;//.Case2:                          ;d >= 0
 657+ E6DF              ;;//        ld      A,E
 658+ E6DF              ;;//        add     A,H
 659+ E6DF              ;;//        ld      E,A
 660+ E6DF              ;;//        ld      A,(l2way)
 661+ E6DF              ;;//        add     A,C
 662+ E6DF              ;;//        ld      C,A
 663+ E6DF              ;;//        jr      .EndLoop
 664+ E6DF              ;;//.Case1:                          ;d < 0
 665+ E6DF              ;;//        ld      A,E
 666+ E6DF              ;;//        add     A,L
 667+ E6DF              ;;//        ld      E,A
 668+ E6DF              ;;//.EndLoop:
 669+ E6DF              ;;//        inc     B
 670+ E6DF              ;;//        jr      .Loop
 671+ E6DF              ;;//.EndLine:
 672+ E6DF              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DF              ;;//        pop     HL              ;can be removed
 674+ E6DF              ;;//        pop     DE              ;can be removed
 675+ E6DF              ;;//        ret
 676+ E6DF
 677+ E6DF              ;;	ld		(.l2yadjust),a
 678+ E6DF              ;;	call	calcdeltax:
 679+ E6DF              ;;	ld		(.l2xadjust),a
 680+ E6DF              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DF              ;;	push	hl
 682+ E6DF              ;;	push	de
 683+ E6DF              ;;	ld		hl,(l2deltaX)
 684+ E6DF              ;;	ld		de,(l2deltaY)
 685+ E6DF              ;;	add		hl,de
 686+ E6DF              ;;	ld		(l2fraction),hl
 687+ E6DF              ;;	pop		de
 688+ E6DF              ;;	pop		hl
 689+ E6DF              ;;.mainloop:
 690+ E6DF              ;;	push	bc
 691+ E6DF              ;;	push	de
 692+ E6DF              ;;	ld 		a,(l2linecolor)
 693+ E6DF              ;;	call	l2_plot_pixel
 694+ E6DF              ;;	pop		de
 695+ E6DF              ;;	pop		bc
 696+ E6DF              ;;.arewefinishedtest
 697+ E6DF              ;;	ld		a,b
 698+ E6DF              ;;	cp		d
 699+ E6DF              ;;	jr		nz,.notthereyet
 700+ E6DF              ;;	ld		a,c
 701+ E6DF              ;;	cp		e
 702+ E6DF              ;;	ret		z
 703+ E6DF              ;;.notthereyet:
 704+ E6DF              ;;	push	de
 705+ E6DF              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DF              ;;	pop		de
 707+ E6DF              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DF              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DF              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DF              ;;	or		a							;
 711+ E6DF              ;;	sbc		hl,de						;
 712+ E6DF              ;;	pop		de
 713+ E6DF              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DF              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DF              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DF              ;;.dodycalc:
 717+ E6DF              ;;	ld		hl,(l2fraction)
 718+ E6DF              ;;	push	de
 719+ E6DF              ;;	ld		de,(l2deltaY)
 720+ E6DF              ;;	add		hl,de
 721+ E6DF              ;;	ld		(l2fraction),de
 722+ E6DF              ;;	pop		de
 723+ E6DF              ;;.l2yadjust:
 724+ E6DF              ;;	nop
 725+ E6DF              ;;.skipdycalc:
 726+ E6DF              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DF              ;;	ld		hl,(l2e2)
 728+ E6DF              ;;	push	de							;
 729+ E6DF              ;;	ld		de,(l2deltaX)				;
 730+ E6DF              ;;	or		a							; clear carry flag
 731+ E6DF              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DF              ;;	pop		de
 733+ E6DF              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DF              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DF              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DF              ;;.dodxcalc:
 737+ E6DF              ;;	ld		hl,(l2fraction)
 738+ E6DF              ;;	push	de
 739+ E6DF              ;;	ld		de,(l2deltaX)
 740+ E6DF              ;;	add		hl,de
 741+ E6DF              ;;	ld		(l2fraction),de
 742+ E6DF              ;;	pop		de
 743+ E6DF              ;;.l2xadjust:
 744+ E6DF              ;;	nop
 745+ E6DF              ;;.skipdxcalc:
 746+ E6DF              ;;	jr 		.mainloop
 747+ E6DF
 748+ E6DF
 749+ E6DF              ;;/l2_draw_diagonalold:
 750+ E6DF              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DF              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DF              ;;/.sortycoords:
 753+ E6DF              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DF              ;;/	cp		d
 755+ E6DF              ;;/	jr		nc, .nocoordswap
 756+ E6DF              ;;/.swapcoords:
 757+ E6DF              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DF              ;;/	lddebc
 759+ E6DF              ;;/	ldbchl
 760+ E6DF              ;;/.nocoordswap:
 761+ E6DF              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DF              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DF              ;;/	ld		(l2deltaY),a
 764+ E6DF              ;;/	neg									; DEBUG
 765+ E6DF              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DF              ;;/	neg									; DEBUG
 767+ E6DF              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DF              ;;/    ld		a,c
 769+ E6DF              ;;/	cp		e
 770+ E6DF              ;;/	jr		c, .x1GTx0
 771+ E6DF              ;;/.x1LTx0
 772+ E6DF              ;;/	ld		a,c
 773+ E6DF              ;;/	sub		e
 774+ E6DF              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DF              ;;/	neg									; DEBUG
 776+ E6DF              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DF              ;;/	neg									; DEBUG
 778+ E6DF              ;;/	ld		a,l2incbstep
 779+ E6DF              ;;/	jr		.setlayershift0
 780+ E6DF              ;;/.x1GTx0:
 781+ E6DF              ;;/	ld		a,e
 782+ E6DF              ;;/	sub		c
 783+ E6DF              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DF              ;;/	neg									; DEBUG
 785+ E6DF              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DF              ;;/	neg									; DEBUG
 787+ E6DF              ;;/	ld		a,l2decbstep
 788+ E6DF              ;;/.setlayershift0:
 789+ E6DF              ;;/	ld		a,0
 790+ E6DF              ;;/	pushbcde
 791+ E6DF              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DF              ;;/	popdebc
 793+ E6DF              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DF              ;;/.dymuliplyby2:
 795+ E6DF              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DF              ;;/	call	l2_signed_mul2a
 797+ E6DF              ;;/	ld		(l2deltaYsq),a
 798+ E6DF              ;;/	neg									; DEBUG
 799+ E6DF              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DF              ;;/	neg									; DEBUG
 801+ E6DF              ;;/.dxmuliplyby2:
 802+ E6DF              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DF              ;;/	call	l2_signed_mul2a
 804+ E6DF              ;;/	ld		(l2deltaXsq),a
 805+ E6DF              ;;/	neg									; DEBUG
 806+ E6DF              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DF              ;;/	neg									; DEBUG
 808+ E6DF              ;;/.plotfirstpixel:
 809+ E6DF              ;;/	pushbcde
 810+ E6DF              ;;/	ld a,(l2linecolor)
 811+ E6DF              ;;/	call	l2_plot_pixel
 812+ E6DF              ;;/	popdebc
 813+ E6DF              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DF              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DF              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DF              ;;/	cp		(hl)
 817+ E6DF              ;;/	jp		m,	.signset
 818+ E6DF              ;;/.signclear:
 819+ E6DF              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DF              ;;/	jr		.dxGTdybranch
 821+ E6DF              ;;/.signset:
 822+ E6DF              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DF              ;;/.dxGTdybranch:
 824+ E6DF              ;;/	ld		a,(l2deltaYsq)
 825+ E6DF              ;;/	ld		hl,l2deltaX
 826+ E6DF              ;;/	sub		(hl)
 827+ E6DF              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DF              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DF              ;;/	ld		a,c
 830+ E6DF              ;;/	cp		e
 831+ E6DF              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DF              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DF              ;;/	ld		a,(l2fraction)
 834+ E6DF              ;;/	TEST	$80
 835+ E6DF              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DF              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DF              ;;/	ld		hl,l2deltaXsq
 838+ E6DF              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DF              ;;/	ld		(l2fraction),a
 840+ E6DF              ;;/.BranchAskipYstep:
 841+ E6DF              ;;/.l2stepx1:
 842+ E6DF              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DF              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DF              ;;/	ld		hl,l2deltaYsq
 845+ E6DF              ;;/	add		a,(hl)
 846+ E6DF              ;;/	ld		(l2fraction),a
 847+ E6DF              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DF              ;;/	pushbcde
 849+ E6DF              ;;/	ld a,(l2linecolor)
 850+ E6DF              ;;/	call	l2_plot_pixel
 851+ E6DF              ;;/	popdebc
 852+ E6DF              ;;/.BranchAloop:
 853+ E6DF              ;;/	jr		.BranchAwhile
 854+ E6DF              ;;/.dxLTEdybranch:
 855+ E6DF              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DF              ;;/	ld		hl, l2deltaY
 857+ E6DF              ;;/	sub		(hl)
 858+ E6DF              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DF              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DF              ;;/	ld		a,b
 861+ E6DF              ;;/	cp		d
 862+ E6DF              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DF              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DF              ;;/	ld		a,(l2fraction)
 865+ E6DF              ;;/	TEST	$80
 866+ E6DF              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DF              ;;/.l2stepx2
 868+ E6DF              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DF              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DF              ;;/	ld		hl,l2deltaYsq
 871+ E6DF              ;;/	sub		(hl)
 872+ E6DF              ;;/	ld		(l2fraction),a
 873+ E6DF              ;;/.BranchBskipYstep:
 874+ E6DF              ;;/	ld		hl, l2deltaYsq
 875+ E6DF              ;;/	add		a,(hl)
 876+ E6DF              ;;/	ld		(l2fraction),a
 877+ E6DF              ;;/	inc		b							; ++l2_vy0;
 878+ E6DF              ;;/.BranchBplotBCColA:
 879+ E6DF              ;;/	pushbcde
 880+ E6DF              ;;/	ld a,(l2linecolor)
 881+ E6DF              ;;/	call	l2_plot_pixel
 882+ E6DF              ;;/	popdebc
 883+ E6DF              ;;/.BranchBloop:
 884+ E6DF              ;;/	jr		.BranchBwhile
 885+ E6DF
# file closed: Layer2Graphics/layer2_plot_diagonal.asm
 849  E6DF                  INCLUDE "asm_l2_plot_triangle.asm"
# file opened: Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DF
   2+ E6DF
   3+ E6DF
   4+ E6DF 00 00        l2trianglebc	        DW 0
   5+ E6E1 00 00        l2trianglede	        DW 0
   6+ E6E3 00 00        l2trianglehl	        DW 0
   7+ E6E5
   8+ E6E5              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E5 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E9 CD 0C E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6EC F1                                   pop		af
  12+ E6ED D1                                   pop		de						; swap DE and HL
  13+ E6EE E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6EF C1                                   pop		bc
  15+ E6F0 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6F2 F5                                   push	af
  17+ E6F3 CD 0C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F6 F1                                   pop		af
  19+ E6F7 C1                                   pop		bc						; Now bc = original de
  20+ E6F8 D1                                   pop		de						; de = original hl
  21+ E6F9 CD 0C E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6FC C9                                   ret
  23+ E6FD
  24+ E6FD
  25+ E6FD
  26+ E6FD
  27+ E6FD
# file closed: Layer2Graphics/asm_l2_plot_triangle.asm
 850  E6FD                  INCLUDE "asm_l2_fill_triangle.asm"
# file opened: Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6FD              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6FD              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6FD              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6FD DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FF 7D                                   ld		a,l
   6+ E700 32 24 E3                             ld		(l2linecolor),a
   7+ E703 79                                   ld		a,c
   8+ E704 BB                                   cp		e
   9+ E705 30 08                                jr		nc, .x2gtex1
  10+ E707 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E70A DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E70D 18 06                                jr		.storepoints
  13+ E70F DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E712 DD 2E 01                             ld		ixl,1
  15+ E715 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E718 DD 7C                                ld		a,ixh
  17+ E71A 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E71B 54                                   ld		d,h
  19+ E71C CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71F E1 D1 C1                             pop		bc,,de,,hl
  21+ E722 C5 E5                                push	bc,,hl
  22+ E724 54                                   ld		d,h                             ; now its bc -> he
  23+ E725 DD 7D                                ld		a,ixl
  24+ E727 CD 2C E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E72A E1 C1                                pop		bc,,hl
  26+ E72C 50           .SaveForLoop:           ld		d,b
  27+ E72D 5C                                   ld		e,h								; save loop counters
  28+ E72E D5                                   push	de								; de = y0ycommon
  29+ E72F 21 2C E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E732 78                                   ld		a,b
  31+ E733 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E735 7E                                   ld		a,(hl)							;
  33+ E736 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E737 21 2C E4                             ld      hl,l2targetArray2
  35+ E73A 78                                   ld      a,b
  36+ E73B ED 31                                add     hl,a
  37+ E73D              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E73D 7E                                   ld		a,(hl)
  39+ E73E 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73F 3A 24 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E742 5F                                   ld		e,a								; de = to colour
  42+ E743 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E744 25                                   dec		h
  44+ E745 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E746 CD 8E E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E749 E1                                   pop		hl
  47+ E74A C1                                   pop		bc
  48+ E74B 04                                   inc		b								; down a rowc
  49+ E74C D1                                   pop		de								; de = from to (and b also = current)
  50+ E74D 14                                   inc		d
  51+ E74E 7B                                   ld		a,e								; while e >= d
  52+ E74F BA                                   cp		d
  53+ E750 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E752 C9                                   ret
  55+ E753
# file closed: Layer2Graphics/asm_l2_fill_triangle.asm
 851  E753                  INCLUDE "layer2_plot_circle.asm"
# file opened: Layer2Graphics/layer2_plot_circle.asm
   1+ E753
   2+ E753 00 00        l2_circle_pos		DW 0
   3+ E755 00           l2_circle_colour	DB 0
   4+ E756 00           l2_circle_radius	DB 0
   5+ E757 00           l2_circle_x			DB 0
   6+ E758 00           l2_circle_y			DB 0
   7+ E759 00           l2_circle_d			DB 0
   8+ E75A
   9+ E75A              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E75A 7B           l2_draw_circle:     ld		a,e
  11+ E75B 32 01 E8                         ld		(.PlotPixel+1),a
  12+ E75E 7A                               ld		a,d								; get radius
  13+ E75F A7                               and		a
  14+ E760 C8                               ret		z
  15+ E761 FE 01                            cp		1
  16+ E763 CA 0D E8                         jp		z,CircleSinglepixel
  17+ E766 ED 43 90 E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E76A DD 67                            ld		ixh,a							; ixh = raidus
  19+ E76C DD 2E 00                         ld		ixl,0
  20+ E76F 26 00        .calcd:	            ld		h,0
  21+ E771 6F                               ld		l,a
  22+ E772 29                               add		hl,hl							; hl = r * 2
  23+ E773 EB                               ex		de,hl							; de = r * 2
  24+ E774 21 03 00                         ld		hl,3
  25+ E777 A7                               and		a
  26+ E778 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E77A 44                               ld		b,h
  28+ E77B 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E77C 21 01 00     .calcdelta:         ld		hl,1
  30+ E77F 16 00                            ld		d,0
  31+ E781 DD 5D                            ld		e,ixl
  32+ E783 A7                               and		a
  33+ E784 ED 52                            sbc		hl,de
  34+ E786 11 01 00     .Setde1:            ld		de,1
  35+ E789 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E78B DD BD                            cp		ixl
  37+ E78D D8                               ret		c
  38+ E78E D9           .ProcessLoop:	    exx
  39+ E78F 11 00 00     .Plot1:             ld		de,0
  40+ E792 7B                               ld		a,e
  41+ E793 DD 85                            add		a,ixl
  42+ E795 4F                               ld		c,a
  43+ E796 7A                               ld		a,d
  44+ E797 DD 84                            add		a,ixh
  45+ E799 47                               ld		b,a
  46+ E79A CD 00 E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E79D 7B           .Plot2:             ld 		a,e
  48+ E79E DD 95                            sub 	ixl
  49+ E7A0 4F                               ld 		c,a
  50+ E7A1 7A                               ld 		a,d
  51+ E7A2 DD 84                            add 	a,ixh
  52+ E7A4 47                               ld		b,a
  53+ E7A5 CD 00 E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A8 7B           .Plot3:             ld 		a,e
  55+ E7A9 DD 85                            add		a,ixl
  56+ E7AB 4F                               ld 		c,a
  57+ E7AC 7A                               ld 		a,d
  58+ E7AD DD 94                            sub 	ixh
  59+ E7AF 47                               ld 		b,a
  60+ E7B0 CD 00 E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7B3 7B           .Plot4:             ld 		a,e
  62+ E7B4 DD 95                            sub 	ixl
  63+ E7B6 4F                               ld 		c,a
  64+ E7B7 7A                               ld 		a,d
  65+ E7B8 DD 94                            sub 	ixh
  66+ E7BA 47                               ld 		b,a
  67+ E7BB CD 00 E8                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BE 7A           .Plot5:	            ld 		a,d
  69+ E7BF DD 85                            add 	a,ixl
  70+ E7C1 47                               ld 		b,a
  71+ E7C2 7B                               ld 		a,e
  72+ E7C3 DD 84                            add 	a,ixh
  73+ E7C5 4F                               ld 		c,a
  74+ E7C6 CD 00 E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C9 7A           .Plot6:	            ld 		a,d
  76+ E7CA DD 95                            sub 	ixl
  77+ E7CC 47                               ld 		b,a
  78+ E7CD 7B                               ld 		a,e
  79+ E7CE DD 84                            add 	a,ixh
  80+ E7D0 4F                               ld 		c,a
  81+ E7D1 CD 00 E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D4 7A           .Plot7:	            ld 		a,d
  83+ E7D5 DD 85                            add 	a,ixl
  84+ E7D7 47                               ld 		b,a
  85+ E7D8 7B                               ld 		a,e
  86+ E7D9 DD 94                            sub 	ixh
  87+ E7DB 4F                               ld 		c,a
  88+ E7DC CD 00 E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DF 7A           .Plot8:	            ld 		a,d
  90+ E7E0 DD 95                            sub 	ixl
  91+ E7E2 47                               ld		b,a
  92+ E7E3 7B                               ld 		a,e
  93+ E7E4 DD 94                            sub 	ixh
  94+ E7E6 4F                               ld 		c,a
  95+ E7E7 CD 00 E8                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7EA D9                               exx
  97+ E7EB CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7ED 28 03                            jr z,   .draw_circle_1
  99+ E7EF 19                               add hl,de			; Delta=Delta+D1
 100+ E7F0 18 05                            jr      .draw_circle_2		;
 101+ E7F2 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7F3 03                               inc     bc
 103+ E7F4 03                               inc     bc				; D2=D2+2
 104+ E7F5 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F7 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F8 03                               inc bc
 107+ E7F9 13                               inc de				; D1=D1+2
 108+ E7FA 13                               inc de
 109+ E7FB DD 2C                            inc ixl				; X=X+1
 110+ E7FD C3 89 E7                         jp      .CircleLoop
 111+ E800 3A 55 E7     .PlotPixel:         ld		a,(l2_circle_colour)
 112+ E803 D5 C5 E5                         push	de,,bc,,hl
 113+ E806 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E809 E1 C1 D1                         pop		de,,bc,,hl
 115+ E80C C9                               ret
 116+ E80D 7B           CircleSinglepixel:  ld		a,e
 117+ E80E CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E811 C9                               ret
 119+ E812
# file closed: Layer2Graphics/layer2_plot_circle.asm
 852  E812                  INCLUDE "layer2_plot_circle_fill.asm"
# file opened: Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E812
   2+ E812 00           l2_circle_dblx		DB 0
   3+ E813 00           l2_circle_dbly		DB 0
   4+ E814
   5+ E814              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E814 7B           l2_draw_circle_fill:    ld		a,e
   7+ E815 32 AB E8                             ld		(.LineColour+1),a
   8+ E818 7A                                   ld		a,d								; get radius
   9+ E819 A7                                   and		a
  10+ E81A C8                                   ret		z
  11+ E81B FE 01                                cp		1
  12+ E81D CA 0D E8                             jp		z,CircleSinglepixel
  13+ E820 ED 43 4A E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  14+ E824 DD 67                                ld		ixh,a							; ixh = raidus (x)
  15+ E826 DD 2E 00                             ld		ixl,0							; ihy = y
  16+ E829 26 00        .calcd:	                ld		h,0
  17+ E82B 6F                                   ld		l,a
  18+ E82C 29                                   add		hl,hl							; hl = r * 2
  19+ E82D EB                                   ex		de,hl							; de = r * 2
  20+ E82E 21 03 00                             ld		hl,3
  21+ E831 A7                                   and		a
  22+ E832 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  23+ E834 44                                   ld		b,h
  24+ E835 4D                                   ld		c,l								; bc = 3 - (r * 2)
  25+ E836 21 01 00     .calcdelta              ld		hl,1
  26+ E839 16 00                                ld		d,0
  27+ E83B DD 5D                                ld		e,ixl
  28+ E83D A7                                   and		a
  29+ E83E ED 52                                sbc		hl,de
  30+ E840 11 01 00     .Setde1	                ld		de,1
  31+ E843 DD 7C        .CircleLoop:            ld		a,ixh
  32+ E845 DD BD                                cp		ixl
  33+ E847 D8                                   ret		c
  34+ E848 D9           .ProcessLoop:	        exx
  35+ E849 11 00 00     .Line1:                 ld		de,0
  36+ E84C 7B                                   ld 		a,e
  37+ E84D DD 95                                sub 	ixl
  38+ E84F 4F                                   ld 		c,a
  39+ E850 7A                                   ld 		a,d
  40+ E851 DD 84                                add 	a,ixh
  41+ E853 47                                   ld		b,a
  42+ E854                                      ;; TODO ADD DOUBLE X CALC
  43+ E854 D5                                   push	de
  44+ E855 DD 55                                ld		d,ixl
  45+ E857 CB 22                                sla		d
  46+ E859 CD A6 E8                             call	.PlotLine			;CX-X,CY+Y
  47+ E85C D1                                   pop		de
  48+ E85D 7B           .Line2:                 ld 		a,e
  49+ E85E DD 95                                sub		ixl
  50+ E860 4F                                   ld 		c,a
  51+ E861 7A                                   ld 		a,d
  52+ E862 DD 94                                sub 	ixh
  53+ E864 47                                   ld 		b,a
  54+ E865                                      ;; TODO ADD DOUBLE X CALC
  55+ E865 D5                                   push	de
  56+ E866 DD 55                                ld		d,ixl
  57+ E868 CB 22                                sla		d
  58+ E86A CD A6 E8                             call	.PlotLine			;CX-X,CY-Y
  59+ E86D D1                                   pop		de
  60+ E86E 7B           .Line3:	                ld 		a,e
  61+ E86F DD 94                                sub		ixh
  62+ E871 4F                                   ld 		c,a
  63+ E872 7A                                   ld 		a,d
  64+ E873 DD 85                                add 	a,ixl
  65+ E875 47                                   ld 		b,a
  66+ E876                                      ;; TODO ADD DOUBLE Y CALC
  67+ E876 D5                                   push	de
  68+ E877 DD 54                                ld		d,ixh
  69+ E879 CB 22                                sla		d
  70+ E87B CD A6 E8                             call	.PlotLine			;CX-Y,CY+x
  71+ E87E D1                                   pop		de
  72+ E87F 7B           .Line4:	                ld 		a,e
  73+ E880 DD 94                                sub		ixh
  74+ E882 4F                                   ld 		c,a
  75+ E883 7A                                   ld 		a,d
  76+ E884 DD 95                                sub 	ixl
  77+ E886 47                                   ld 		b,a
  78+ E887                                      ;; TODO ADD DOUBLE Y CALC
  79+ E887 D5                                   push	de
  80+ E888 DD 54                                ld		d,ixh
  81+ E88A CB 22                                sla		d
  82+ E88C CD A6 E8                             call	.PlotLine			;CX-Y,CY+x
  83+ E88F D1                                   pop		de
  84+ E890 D9                                   exx
  85+ E891 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  86+ E893 28 03                                jr z,.draw_circle_1
  87+ E895 19                                   add hl,de			; Delta=Delta+D1
  88+ E896 18 05                                jr .draw_circle_2		;
  89+ E898 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  90+ E899 03                                   inc bc
  91+ E89A 03                                   inc bc				; D2=D2+2
  92+ E89B DD 25                                dec ixh				; Y=Y-1
  93+ E89D 03           .draw_circle_2:		    inc bc				; D2=D2+2
  94+ E89E 03                                   inc bc
  95+ E89F 13                                   inc de				; D1=D1+2
  96+ E8A0 13                                   inc de
  97+ E8A1 DD 2C                                inc ixl				; X=X+1
  98+ E8A3 C3 43 E8                             jp .CircleLoop
  99+ E8A6 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 100+ E8AA 3A 55 E7     .LineColour:	        ld		a,(l2_circle_colour)
 101+ E8AD 5F                                   ld      e,a
 102+ E8AE CD 62 E2                             call 	l2_draw_horz_line
 103+ E8B1 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 104+ E8B5 C9                                   ret
 105+ E8B6
# file closed: Layer2Graphics/layer2_plot_circle_fill.asm
 853  E8B6                  INCLUDE "l2_draw_any_line.asm"
# file opened: Layer2Graphics/l2_draw_any_line.asm
   1+ E8B6              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B6 08           l2_draw_any_line:       ex		af,af'
   3+ E8B7 79                                   ld		a,c
   4+ E8B8 BB                                   cp		e
   5+ E8B9 28 08                                jr		z,.HorizontalLine
   6+ E8BB 78                                   ld		a,b
   7+ E8BC BA                                   cp		d
   8+ E8BD 28 0A                                jr		z,.VerticalLine
   9+ E8BF              ; use jp and get a free ret instruction optimisation
  10+ E8BF 08           .DiagonalLine:		    ex		af,af'			; get colour back into a
  11+ E8C0 C3 0C E6                             jp		l2_draw_diagonal
  12+ E8C3
  13+ E8C3 08           .HorizontalLine:        ex		af,af'
  14+ E8C4 53                                   ld		d,e				; set d as target right pixel
  15+ E8C5 5F                                   ld		e,a				; e holds colour on this call
  16+ E8C6 C3 8E E2                             jp		l2_draw_horz_line_to
  17+ E8C9 08           .VerticalLine:          ex		af,af'
  18+ E8CA 5F                                   ld		e,a				; e holds colour on this call
  19+ E8CB C3 0D E3                             jp		l2_draw_vert_line_to
  20+ E8CE
  21+ E8CE
# file closed: Layer2Graphics/l2_draw_any_line.asm
 854  E8CE                  INCLUDE "clearLines-LL155.asm"
# file opened: Layer2Graphics/clearLines-LL155.asm
   1+ E8CE              ; ClearLines (LL155)
   2+ E8CE              ;   y = 0
   3+ E8CE              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8CE              ;   exit if XX20 < 4
   5+ E8CE              ;   ++y
   6+ E8CE              ;   do
   7+ E8CE              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8CE              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8CE              ;		++y
  10+ E8CE              ;	until Y > XX20
  11+ E8CE
  12+ E8CE              clearLines:
  13+ E8CE              layer2_clearLines:
  14+ E8CE 3A F1 C2     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8D1 47                                   ld		b,a
  16+ E8D2 21 FF C1                             ld		hl,UbnkLineArray
  17+ E8D5 C5           clearLinesLoop:         push	bc
  18+ E8D6 7E                                   ld		a,(hl)
  19+ E8D7 23                                   inc		hl
  20+ E8D8 4F                                   ld		c,a
  21+ E8D9 7E                                   ld		a,(hl)
  22+ E8DA 23                                   inc		hl
  23+ E8DB 47                                   ld		b,a
  24+ E8DC 7E                                   ld		a,(hl)
  25+ E8DD 23                                   inc		hl
  26+ E8DE 5F                                   ld		e,a
  27+ E8DF 7E                                   ld		a,(hl)
  28+ E8E0 23                                   inc		hl
  29+ E8E1 57                                   ld		d,a
  30+ E8E2 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E4 E5                                   push	hl
  32+ E8E5 CD B6 E8                             call    l2_draw_any_line
  33+ E8E8 E1                                   pop		hl
  34+ E8E9 C1                                   pop		bc
  35+ E8EA 10 E9                                djnz	clearLinesLoop
  36+ E8EC C9                                   ret
  37+ E8ED
# file closed: Layer2Graphics/clearLines-LL155.asm
 855  E8ED                  INCLUDE "l2_draw_line_v2.asm"
# file opened: Layer2Graphics/l2_draw_line_v2.asm
   1+ E8ED              ; ******************************************************************************
   2+ E8ED              ;
   3+ E8ED              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8ED              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8ED              ;
   6+ E8ED              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8ED              ;
   8+ E8ED              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8ED              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8ED              ;	before using line drawing.
  11+ E8ED              ;
  12+ E8ED              ;	The routine checks the range of specified coordinates which is the
  13+ E8ED              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8ED              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8ED              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8ED              ;	visible part will be drawn.
  17+ E8ED              ;
  18+ E8ED              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8ED              ;
  20+ E8ED              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8ED              ;
  22+ E8ED              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8ED              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8ED              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8ED              ;
  26+ E8ED              ;	OUT:	None.
  27+ E8ED              ;
  28+ E8ED              ;	Registers	used	by routine:
  29+ E8ED              ;		   N	:	B, loop counter
  30+ E8ED              ;		   i	:	line	balance variable
  31+ E8ED              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8ED              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8ED              ;	  (x0,y0)	:	(h,l)
  34+ E8ED              ;	  direc_x	:	d, horisontal step increment
  35+ E8ED              ;	  direc_y	:	e, vertical step increment
  36+ E8ED              ;		 ddx	:	b, horisontal step increment
  37+ E8ED              ;		 ddy	:	c, vertical step increment
  38+ E8ED              ;
  39+ E8ED              ;		DE, A work registers.
  40+ E8ED              ;
  41+ E8ED              ; The algorithm in pseudo-code:
  42+ E8ED              ;
  43+ E8ED              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8ED              ;	x = ABS x: y =	ABS y
  45+ E8ED              ;
  46+ E8ED              ;	if x	>= y
  47+ E8ED              ;		if x+y=0 then return
  48+ E8ED              ;		H = x
  49+ E8ED              ;		L = y
  50+ E8ED              ;		ddx = direc_x
  51+ E8ED              ;		ddy = 0
  52+ E8ED              ;	else
  53+ E8ED              ;		H = y
  54+ E8ED              ;		L = x
  55+ E8ED              ;		ddx = 0
  56+ E8ED              ;		ddy = direc_y
  57+ E8ED              ;	endif
  58+ E8ED              ;
  59+ E8ED              ;	B = H
  60+ E8ED              ;	i = INT(B/2)
  61+ E8ED              ;	FOR N=B TO 1 STEP -1
  62+ E8ED              ;		i = i + L
  63+ E8ED              ;		if i	< H
  64+ E8ED              ;			ix =	ddx
  65+ E8ED              ;			iy =	ddy
  66+ E8ED              ;		else
  67+ E8ED              ;			i = i - H
  68+ E8ED              ;			ix =	direc_x
  69+ E8ED              ;			iy =	direc_y
  70+ E8ED              ;		endif
  71+ E8ED              ;		x0 =	x0 +	ix
  72+ E8ED              ;		y0 =	y0 +	iy
  73+ E8ED              ;		plot	(x0,y0)
  74+ E8ED              ;	NEXT	N
  75+ E8ED              ;
  76+ E8ED              ;
  77+ E8ED              ;	Registers	changed after return:
  78+ E8ED              ;		..BCDEHL/IXIY/af......	same
  79+ E8ED              ;		AF....../..../..bcdehl	different
  80+ E8ED              ;
  81+ E8ED DF           line_gfx_colour db $DF
  82+ E8EE 00 00        line_gfx_coords	dw 0
  83+ E8F0              LineHLtoDE:
  84+ E8F0 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8F1 FE C0                                cp	192
  86+ E8F3 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F5 7A                                   ld	a,d
  88+ E8F6 FE C0                                cp	192
  89+ E8F8 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8FA 22 EE E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FD E5                                   push	hl
  92+ E8FE D5                                   push	de
  93+ E8FF 6C                                   ld	l,h				; L = x0
  94+ E900 62                                   ld	h,d				; H = x1
  95+ E901 7C           distanceX:		        ld	a,h
  96+ E902 95                                   sub	l
  97+ E903 6F                                   ld	l,a
  98+ E904 26 00                                ld	h,0
  99+ E906 30 02                                jr	nc, distanceXDone
 100+ E908 26 FF                                ld	h,-1
 101+ E90A D1           distanceXDone:          pop	de
 102+ E90B E3                                   ex	(sp),hl			; L = y0
 103+ E90C 63                                   ld	h,e				; H = y1
 104+ E90D 7C           distanceY:		        ld	a,h
 105+ E90E 95                                   sub	l
 106+ E90F 6F                                   ld	l,a
 107+ E910 26 00                                ld	h,0
 108+ E912 30 02                                jr	nc, distanceYDone
 109+ E914 26 FF                                ld	h,-1
 110+ E916 D1           distanceYDone:          pop	de
 111+ E917 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E918 CD 1C E9                             call	DrawLineRelative			; draw line...
 113+ E91B C9           exit_line:              ret
 114+ E91C
 115+ E91C              ; ***************************************************************************
 116+ E91C              ;
 117+ E91C              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91C              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91C              ;
 120+ E91C              ; OUT: h - l distance in	HL
 121+ E91C              ;
 122+ E91C
 123+ E91C D5           DrawLineRelative:       push	de
 124+ E91D E5                                   push	hl
 125+ E91E D9                                   exx
 126+ E91F E1                                   pop	hl					; get relative	horisontal movement
 127+ E920 CD 8B E9                             call	sgn
 128+ E923 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E924 CD 98 E9                             call	absValue
 130+ E927 45                                   ld	b,l					; x = ABS(x)
 131+ E928 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E929 CD 8B E9                             call	sgn
 133+ E92C 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92D CD 98 E9                             call	absValue
 135+ E930 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E931              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E931 C5                                   push	bc
 138+ E932 D9                                   exx
 139+ E933 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E934 7C                                   ld	a,h
 141+ E935 BD                                   cp	l
 142+ E936 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E938 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E939 28 4F                                jr	z, exit_draw		;		return
 145+ E93B D9           y_lessorequal_x:        exx						;	else
 146+ E93C 42                                   ld	b,d					;		ddx = direc_x
 147+ E93D 0E 00                                ld	c,0					;		ddy = 0
 148+ E93F D9                                   exx
 149+ E940 18 08                                jr	init_drawloop		; else
 150+ E942 7C           x_smaller_y:	        ld	a,h
 151+ E943 65                                   ld	h,l					;	H = y
 152+ E944 6F                                   ld	l,a					;	L = x
 153+ E945 D9                                   exx
 154+ E946 06 00                                ld	b,0					;	ddx = 0
 155+ E948 4B                                   ld	c,e					;	ddy = direc_y
 156+ E949 D9                                   exx
 157+ E94A 44           init_drawloop:	        ld	b,h
 158+ E94B 4C                                   ld	c,h					; B = H
 159+ E94C CB 39                                srl	c					; i = INT(B/2)
 160+ E94E              										; FOR N=B	TO 1	STEP	-1
 161+ E94E 79           drawloop:		        ld	a,c
 162+ E94F 85                                   add	a,l
 163+ E950 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E952 BC                                   cp	h
 165+ E953 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E955 4F                                   ld	c,a					;		i = i + L
 167+ E956 D9                                   exx
 168+ E957 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E958 D9                                   exx
 170+ E959 18 05                                jr	check_plot			;	else
 171+ E95B 94           i_greater:		        sub	h					;		i = i - H
 172+ E95C 4F                                   ld	c,a
 173+ E95D D9                                   exx
 174+ E95E D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E95F D9                                   exx						;	endif
 176+ E960 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E961 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E962 2A EE E8                             ld	hl,(line_gfx_coords)
 179+ E965 7D                                   ld	a,l
 180+ E966 83                                   add	a,e					;
 181+ E967 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E968 7A                                   ld	a,d
 183+ E969 3C                                   inc	a
 184+ E96A 84                                   add	a,h
 185+ E96B 38 04                                jr	c, check_range		;	check out	of range
 186+ E96D 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E96F 18 02                                jr	plot_point
 188+ E971 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E973
 190+ E973 3D           plot_point:             dec	a
 191+ E974 C5                                   push	bc
 192+ E975 F5                                   push	af
 193+ E976 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E977 4D                                   ld		c,l
 195+ E978 3A ED E8                             ld		a,(line_gfx_colour)
 196+ E97B ED 43 EE E8                          ld      (line_gfx_coords),bc
 197+ E97F CD FF E0                             call	l2_plot_pixel
 197+ E982
 198+ E982 F1                                   pop		af
 199+ E983 C1                                   pop		bc
 200+ E984 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E985 10 C7                                djnz	drawloop		; NEXT N
 202+ E987 18 01                                jr	exit_draw
 203+ E989
 204+ E989 E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E98A C9           exit_draw:		        ret
 206+ E98B
 207+ E98B
 208+ E98B              ; ******************************************************************************
 209+ E98B              ;
 210+ E98B              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E98B              ;
 212+ E98B              ;	IN:		HL =	integer
 213+ E98B              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E98B              ;
 215+ E98B              ;	Registers	changed after return:
 216+ E98B              ;	..BCDEHL/IXIY	same
 217+ E98B              ;	AF....../....	different
 218+ E98B              ;
 219+ E98B 7C           sgn:				    ld	a,h
 220+ E98C B5                                   or	l
 221+ E98D C8                                   ret	z				; integer	is zero, return 0...
 222+ E98E CB 7C                                bit	7,h
 223+ E990 20 03                                jr	nz, negative_int
 224+ E992 3E 01                                ld	a,1
 225+ E994 C9                                   ret
 226+ E995 3E FF        negative_int:		    ld	a,-1
 227+ E997 C9                                   ret
 228+ E998
 229+ E998
 230+ E998              ; ******************************************************************************
 231+ E998              ;
 232+ E998              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E998              ;
 234+ E998              ;	IN:		HL =	integer
 235+ E998              ;	OUT:		HL =	converted	integer
 236+ E998              ;
 237+ E998              ;	Registers	changed after return:
 238+ E998              ;	A.BCDE../IXIY	same
 239+ E998              ;	.F....HL/....	different
 240+ E998              ;
 241+ E998 CB 7C        absValue:			    bit	7,h
 242+ E99A C8                                   ret	z				; integer	is positive...
 243+ E99B D5                                   push	de
 244+ E99C EB                                   ex	de,hl
 245+ E99D 21 00 00                             ld	hl,0
 246+ E9A0 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E9A1 ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A3 D1                                   pop	de
 249+ E9A4 C9                                   ret
 250+ E9A5
# file closed: Layer2Graphics/l2_draw_line_v2.asm
 856  E9A5              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 857  E9A5                  SLOT    CMDRDATAAddr
 858  E9A5                  PAGE    BankCmdrData
 859  E9A5                  ORG     CMDRDATAAddr, BankCmdrData
 860  E000                  INCLUDE "CommanderData.asm"
# file opened: Commander/CommanderData.asm
   1+ E000
   2+ E000 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E004 53 4F 4E 00
   3+ E008 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E00C 03 1C 0E 00
   3+ E010 00 0A 00 11
   3+ E014 3A 07 09 08
   3+ E018 00
   4+ E019 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E01D 53 B7
   5+ E01F              defaultHomeX	        equ $14
   6+ E01F              defaultHomeY	        equ $AD
   7+ E01F
   8+ E01F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E01F 11 CE 92     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E022 21 00 E0                             ld		hl,defaultName
  11+ E025 01 08 00                             ld		bc,8
  12+ E028 ED B0                                ldir
  13+ E02A 11 DA 92                             ld		de,GalaxySeeds
  14+ E02D 21 19 E0                             ld		hl,defaultSeeds
  15+ E030 01 08 00                             ld		bc,8
  16+ E033 ED B0                                ldir
  17+ E035 3E 14                                ld		a,defaultHomeX
  18+ E037 32 D8 92                             ld		(PresentSystemX),a
  19+ E03A 32 5B 93                             ld		(TargetPlanetX),a
  20+ E03D 3E AD                                ld		a,defaultHomeY
  21+ E03F 32 D9 92                             ld		(PresentSystemY),a
  22+ E042 32 5C 93                             ld		(TargetPlanetY),a
  23+ E045              	; testing
  24+ E045 21 F7 91                             ld		hl,IndexedWork
  25+ E048 CD 10 96                             call	copy_galaxy_to_system
  26+ E04B CD D0 96                             call	find_present_system
  27+ E04E CD 33 96                             call	copy_working_to_galaxy
  28+ E051 01 60 EA                             ld      bc,60000
  29+ E054 ED 43 E0 92                          ld      (Cash),bc
  30+ E058 01 00 00                             ld		bc,0
  31+ E05B ED 43 E2 92                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E05F 3E 46                                ld		a,MaxFuelLevel
  33+ E061 32 E4 92                             ld		(Fuel),a
  34+ E064 3E 5B                                ld      a,BankGalaxyData0
  35+ E066 32 E6 92                             ld		(Galaxy),a
  36+ E069 AF                                   xor		a
  37+ E06A 21 FD 92                             ld      hl,EquipmentFitted
  38+ E06D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E06F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E070 23                                   inc     hl
  41+ E071 10 FC                                djnz    .ClearFittedLooop
  42+ E073 21 07 93                             ld      hl,EquipmentFitted+EQ_FRONT_PULSE
  43+ E076 3E FF                                ld      a,$FF
  44+ E078 77                                   ld      (hl),a
  45+ E079 32 D7 92                             ld		(VarTP),a						;The Plan/Mission
  46+ E07C AF                                   xor     a
  47+ E07D 32 E8 92                             ld		(LaserList+1),a
  48+ E080 32 E9 92                             ld		(LaserList+2),a
  49+ E083 32 EA 92                             ld		(LaserList+3),a
  50+ E086 3E 0A                                ld      a,EQ_FRONT_PULSE
  51+ E088 32 E7 92                             ld		(LaserList),a
  52+ E08B AF                                   xor     a
  53+ E08C 32 00 93                             ld		(ECMPresent),a
  54+ E08F 32 17 93                             ld		(FuelScoopsBarrelStatus),a
  55+ E092 32 03 93                             ld		(EnergyBomb),a
  56+ E095 32 04 93                             ld		(ExtraEnergyUnit),a
  57+ E098 32 05 93                             ld		(DockingComputer),a
  58+ E09B 32 06 93                             ld		(GalacticHyperDrive),a
  59+ E09E 32 02 93                             ld		(EscapePod),a
  60+ E0A1 32 20 93                             ld      (FugitiveInnocentStatus),a
  61+ E0A4 32 33 93                             ld		(KillTally),a
  62+ E0A7 3D                                   dec		a								; now a = 255
  63+ E0A8 32 37 93                             ld		(ForeShield),a
  64+ E0AB 32 38 93                             ld		(AftShield),a
  65+ E0AE 32 39 93                             ld		(PlayerEnergy),a
  66+ E0B1 3E 14                                ld		a,20
  67+ E0B3 32 EB 92                             ld		(CargoBaySize),a
  68+ E0B6 CD BA E0                             call	ZeroCargo						; Clear out cargo
  69+ E0B9                                      ; more to DO
  70+ E0B9 C9                                   ret
  71+ E0BA
# file closed: Commander/CommanderData.asm
 861  E0BA                  INCLUDE "zero_player_cargo.asm"
# file opened: Commander/zero_player_cargo.asm
   1+ E0BA              ZeroCargo:
   2+ E0BA AF           		xor		a							;zero-out cargo, including gems.
   3+ E0BB 06 10        		ld		b,16						;all the way up to alien items
   4+ E0BD 21 ED 92     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0C0              .ZeroLoop:
   6+ E0C0 77                   ld      (hl),a
   7+ E0C1 23           		inc		hl
   8+ E0C2 10 FC        		djnz	.ZeroLoop
   9+ E0C4 C9           		ret
  10+ E0C5
# file closed: Commander/zero_player_cargo.asm
 862  E0C5              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 863  E0C5                  SLOT    LAYER1Addr
 864  E0C5                  PAGE    BankLAYER1
 865  E0C5                  ORG     LAYER1Addr, BankLAYER1
 866  E000
 867  E000                  INCLUDE "layer1_attr_utils.asm"
# file opened: Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 39 8E                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: Layer1Graphics/layer1_attr_utils.asm
 868  E047                  INCLUDE "layer1_cls.asm"
# file opened: Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls:                 xor		a
   2+ E048 21 00 40     l1_cls_to_a:            ld		hl,	$4000
   3+ E04B 11 00 18                             ld		de, $1800
   4+ E04E CD 39 8E                             call	memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_attr_cls:            xor		a
   8+ E053 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
   9+ E056 11 00 03                             ld		de, $0300
  10+ E059 CD 39 8E                             call	memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D 01 FE FE     l2_set_border:          ld	    bc, 0xFEFE
  14+ E060 ED 79                                out		(c),a
  15+ E062 C9                                   ret
# file closed: Layer1Graphics/layer1_cls.asm
 869  E063                  INCLUDE "layer1_print_at.asm"
# file opened: Layer1Graphics/layer1_print_at.asm
   1+ E063              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E063 D5 E5        l1_print_char:          push	de,,hl
   3+ E065 ED 94                                pixelad								; hl = address of de
   4+ E067 E5                                   push	hl							; save hl for loop
   5+ E068 26 00                                ld		h,0
   6+ E06A 6F                                   ld		l,a
   7+ E06B 29                                   add		hl,hl						; * 2
   8+ E06C 29                                   add		hl,hl						; * 4
   9+ E06D 29                                   add		hl,hl						; * 8 to get byte address
  10+ E06E ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E072 EB                                   ex		de,hl						; save address into de
  12+ E073 E1                                   pop		hl							; get back hl for loop
  13+ E074 06 08                                ld		b,8							; do 8 rows
  14+ E076 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E077 13                                   inc		de							; next byte
  16+ E078 77                                   ld		(hl),a						; poke to screen
  17+ E079 ED 93                                pixeldn								; Down 1 row
  18+ E07B 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E07D E1 D1                                pop		de,,hl					    ; restore hl
  20+ E07F C9                                   ret
  21+ E080
  22+ E080              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E080              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E080              l1_print_at:
  25+ E080 7E           .PrintLoop:             ld		a,(hl)
  26+ E081 FE 00                                cp		0
  27+ E083 C8                                   ret		z
  28+ E084                                      CallIfAGTENusng " ", l1_print_char
  28+ E084 FE 20       >                        cp      " "
  28+ E086 D4 63 E0    >                        call	nc,l1_print_char
  29+ E089 23                                   inc		hl							; move 1 message character right
  30+ E08A 7B                                   ld		a,e
  31+ E08B C6 08                                add		a,8
  32+ E08D 5F                                   ld		e,a							; move 1 screen character right
  33+ E08E 18 F0                                jr		.PrintLoop
  34+ E090              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E090 C9                                   ret
  36+ E091
  37+ E091              ;l1_print_at_wrap:
  38+ E091              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E091              ;	ld      iyh,e
  40+ E091              ;.PrintLoop:
  41+ E091              ;	ld		a,(hl)
  42+ E091              ;	cp		0
  43+ E091              ;	ret		z
  44+ E091              ;.CountWordCharLen
  45+ E091              ;; Need to change to word wrap, so it will loop through string as before
  46+ E091              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E091              ;; if that is > 238 then force a premature line wrap
  48+ E091              ;
  49+ E091              ;
  50+ E091              ;    push    iy
  51+ E091              ;    call	l1_print_char
  52+ E091              ;    pop     iy
  53+ E091              ;	inc		hl							; move 1 message character right
  54+ E091              ;	ld		a,e
  55+ E091              ;    cp      238
  56+ E091              ;    jr      nc,.NextLine
  57+ E091              ;	add		a,8
  58+ E091              ;	ld		e,a							; move 1 screen character right
  59+ E091              ;	jr		.PrintLoop
  60+ E091              ;.Clearstackandfinish:
  61+ E091              ;	pop		de
  62+ E091              ;	ret
  63+ E091              ;.NextLine:
  64+ E091              ;    ld      a,(hl)
  65+ E091              ;    cp      " "
  66+ E091              ;    ld      e,iyh
  67+ E091              ;    ld      a,d
  68+ E091              ;    add     a,8
  69+ E091              ;    ld      d,a
  70+ E091              ;    jr		.PrintLoop
  71+ E091
  72+ E091              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E091 E5           L1LenWordAtHL:          push    hl
  74+ E092 D5                                   push    de
  75+ E093 7E           .CountLoop:             ld      a,(hl)
  76+ E094 FE 00                                cp      0
  77+ E096 28 0F                                jr      z,.CountDone
  78+ E098 FE 20                                cp      32
  79+ E09A 28 0B                                jr      z,.CountDone
  80+ E09C 7B                                   ld      a,e
  81+ E09D C6 08                                add     a,8
  82+ E09F 5F                                   ld      e,a
  83+ E0A0 FE EE                                cp      238
  84+ E0A2 30 07                                jr      nc,.TooLong
  85+ E0A4 23                                   inc     hl
  86+ E0A5 18 EC                                jr      .CountLoop
  87+ E0A7 D1           .CountDone:             pop     de
  88+ E0A8 E1                                   pop     hl
  89+ E0A9 AF                                   xor     a
  90+ E0AA C9                                   ret
  91+ E0AB D1           .TooLong                pop     de
  92+ E0AC E1                                   pop     hl
  93+ E0AD 3E FF                                ld      a,$FF
  94+ E0AF C9                                   ret
  95+ E0B0
  96+ E0B0 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0B1 FE 00                                cp      0
  98+ E0B3 C8                                   ret     z
  99+ E0B4 FE 20                                cp      32
 100+ E0B6 28 0F                                jr      z,.ItsASpace
 101+ E0B8 FD E5                                push    iy
 102+ E0BA CD 63 E0                             call	l1_print_char
 103+ E0BD FD E1                                pop     iy
 104+ E0BF 7B                                   ld      a,e
 105+ E0C0 C6 08                                add     a,8
 106+ E0C2 5F                                   ld      e,a
 107+ E0C3 23                                   inc     hl
 108+ E0C4 C3 B0 E0                             jp      L1PrintWordAtHL
 109+ E0C7 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E0C8 7B                                   ld      a,e
 111+ E0C9 C6 08                                add     a,8
 112+ E0CB 5F                                   ld      e,a
 113+ E0CC C9                                   ret
 114+ E0CD
 115+ E0CD
 116+ E0CD              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E0CD              ; Now has full word level wrapping
 118+ E0CD FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E0CF 7E           .PrintLoop:             ld		a,(hl)
 120+ E0D0 FE 00                                cp		0
 121+ E0D2 C8                                   ret		z
 122+ E0D3 CD 91 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E0D6 FE FF                                cp      $FF
 124+ E0D8 28 06                                jr      z,.WrapNextLine
 125+ E0DA CD B0 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E0DD              ; Need to change to word wrap, so it will loop through string as before
 127+ E0DD              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E0DD              ; if that is > 238 then force a premature line wrap
 129+ E0DD 18 F0                                jr		.PrintLoop
 130+ E0DF              .Clearstackandfinish:   ;op		de
 131+ E0DF C9                                   ret
 132+ E0E0              .WrapNextLine:
 133+ E0E0 FD 5C        .NextLine:              ld      e,iyh
 134+ E0E2 7A                                   ld      a,d
 135+ E0E3 C6 08                                add     a,8
 136+ E0E5 57                                   ld      d,a
 137+ E0E6 18 E7                                jr		.PrintLoop
 138+ E0E8
 139+ E0E8
# file closed: Layer1Graphics/layer1_print_at.asm
 870  E0E8              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 871  E0E8                  SLOT    ShipmodelbankAddr
 872  E0E8                  PAGE    BankSHIPMODELS
 873  E0E8              	ORG     ShipmodelbankAddr, BankSHIPMODELS
 874  E000
 875  E000                  INCLUDE "ShipModels.asm"
# file opened: Data/ShipModels.asm
   1+ E000
   2+ E000
   3+ E000
   4+ E000
   5+ E000              ScoopDebrisOffset	    equ	0
   6+ E000              MissileLockLoOffset	    equ 1
   7+ E000              MissileLockHiOffset	    equ 2
   8+ E000              EdgeAddyOffset		    equ 3
   9+ E000              ;
  10+ E000              LineX4Offset		    equ 5
  11+ E000              GunVertexOffset		    equ 6
  12+ E000              ExplosionCtOffset	    equ 7
  13+ E000              VertexCtX6Offset	    equ 8
  14+ E000              EdgeCountOffset		    equ 9
  15+ E000              BountyLoOffset		    equ 10
  16+ E000              BountyHiOffset		    equ 11
  17+ E000              FaceCtX4Offset		    equ 12
  18+ E000              DotOffset			    equ 13
  19+ E000              EnergyOffset		    equ 14
  20+ E000              SpeedOffset			    equ 15
  21+ E000              ;EdgeHiOffset		    equ	16
  22+ E000              FaceAddyOffset		    equ 16
  23+ E000              ;
  24+ E000              QOffset				    equ 18
  25+ E000              LaserOffset			    equ 19
  26+ E000              VerticiesAddyOffset     equ 20
  27+ E000              ;
  28+ E000
  29+ E000              ; TODO Later reorg these offsets for better 16 bit read - Done
  30+ E000              ; TODO Add in roll max rates and data to allow ship replacement, reference to custom console
  31+ E000
  32+ E000
  33+ E000              ; -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
  34+ E000              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
  35+ E000              ; Scoop: 0 = no scoop 1= scoop , anything more?
  36+ E000              ; hull byte#1-2 area for missile lock, lo, hi
  37+ E000              ; hull byte#3   edges data info offset lo
  38+ E000              ; hull byte#4   faces data info offset lo
  39+ E000              ; hull byte#5   4*maxlines+1 for ship lines stack
  40+ E000              ; hull byte#6   gun vertex*4
  41+ E000              ; hull byte#7   explosion count e.g. &2A = 4*n+6
  42+ E000              ; hull byte#8   vertices*6
  43+ E000              ; hull byte#9	edge Count
  44+ E000              ; hull bytes#10-11 bounty lo hi
  45+ E000              ; hull byte#12  faces*4
  46+ E000              ; hull byte#13  dot beyond distance
  47+ E000              ; hull byte#14  energy
  48+ E000              ; hull byte#15  speed (end of 4th row)
  49+ E000              ; hull byte#16  edges offset hi (goes -ve to use other's edge net).
  50+ E000              ; hull byte#17  faces offset hi
  51+ E000              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
  52+ E000              ; hull byte#19  laser|missile(=lower 3 bits)
  53+ E000              ; hull byte#20  Added Vertices for 20,21
  54+ E000
  55+ E000              ; Optimised version to be applied to add data brought in to here:
  56+ E000              ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
  57+ E000              ; hull byte#1-2 area for missile lock, lo, hi
  58+ E000              ; hull byte#3   edges data info offset lo
  59+ E000              ; hull byte#4   edges offset hi (goes -ve to use other's edge net). (was 16)
  60+ E000              ; hull byte#5   4*maxlines+1 for ship lines stack
  61+ E000              ; hull byte#6   gun vertex*4
  62+ E000              ; hull byte#7   explosion count e.g. &2A = 4*n+6
  63+ E000              ; hull byte#8   vertices*6
  64+ E000              ; hull byte#9	edge Count
  65+ E000              ; hull bytes#10-11 bounty lo hi
  66+ E000              ; hull byte#12  faces*4
  67+ E000              ; hull byte#13  dot beyond distance
  68+ E000              ; hull byte#14  energy
  69+ E000              ; hull byte#15  speed (end of 4th row)
  70+ E000              ; hull byte#16  faces data info offset lo (was 4)
  71+ E000              ; hull byte#17  faces offset hi
  72+ E000              ; hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
  73+ E000              ; hull bute#19  laser|missile(=lower 3 bits)
  74+ E000              ; hull byte#20  Added Vertices for 20,21
  75+ E000              ;
  76+ E000              ; Vertex Data Structure
  77+ E000              ; Byte 0 X1Lo
  78+ E000              ; Byte 1 X1Hi
  79+ E000              ; Byte 2 Y1Lo
  80+ E000              ; Byte 3 Y1Hi
  81+ E000              ; Byte 4 High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  82+ E000              ; Byte 5 High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  83+ E000              ;
  84+ E000              ;
  85+ E000              ; Edge Data Structure
  86+ E000              ; Byte 0
  87+ E000              ; Byte 1 - Face 1 Index (uppernibble), Face 2 Index (lowernibble)
  88+ E000              ; Byte 2 - Index to Vertex 1
  89+ E000              ; Byte 3 - Index to Vertex 2
  90+ E000              ;
  91+ E000              ; Normal/Faces Data Structure
  92+ E000              ;
  93+ E000              ;
  94+ E000              ;
  95+ E000              ; Original Data:
  96+ E000              ;	\ -> &565D	\ Start Hull Data. For each hull, first 20 bytes give header info.
  97+ E000              ;		\ hull byte#0 high nibble is scoop info, lower nibble is debris spin info
  98+ E000              ;		\ hull byte#1-2 area for missile lock, lo, hi
  99+ E000              ;		\ hull byte#3   edges data info offset lo
 100+ E000              ;		\ hull byte#4   faces data info offset lo
 101+ E000              ;		\ hull byte#5   4*maxlines+1 for ship lines stack
 102+ E000              ;		\ hull byte#6   gun vertex*4
 103+ E000              ;		\ hull byte#7   explosion count e.g. &2A = 4*n+6
 104+ E000              ;		\ hull byte#8   vertices*6
 105+ E000              ;		\ hull bytes#10-11 bounty lo hi
 106+ E000              ;		\ hull byte#12  faces*4
 107+ E000              ;		\ hull byte#13  dot beyond distance
 108+ E000              ;		\ hull byte#14  energy
 109+ E000              ;		\ hull byte#15  speed (end of 4th row)
 110+ E000              ;		\ hull byte#16  edges offset hi (goes -ve to use other's edge net).
 111+ E000              ;		\ hull byte#17  faces offset hi
 112+ E000              ;		\ hull byte#18  Q% scaling of normals to make large objects' normals flare out further away
 113+ E000              ;		\ hull bute#19  laser|missile(=lower 3 bits)
 114+ E000              ; Corrected pointers
 115+ E000              ; &565D \ Cargo cannister = Type 5
 116+ E000              ;                      0    1    2    3               4               5             6   7     8            9             10  11  12  13  14  15   16                17                 18  19     20                 21
 117+ E000              ;					   Scp  Missile   Edg             Edg             Lin           Gun Exp   Vtx          Edg           Bounty  Face             Edg               Face                          Vertices
 118+ E000              ;                      Deb  Lock      Lo              Hi              x4            Vtx Cnt   x6           X1            lo  hi  x4  Dot Erg Spd  hi                Hi                 Q   Laser  Lo                 hi
 119+ E000              ; Mapping Orginal to new
 120+ E000              ; 0    => 0
 121+ E000              ; 1-2  => 1-2
 122+ E000              ; 3    => EQU Edges
 123+ E000              ; 4    => EQU Normals
 124+ E000              ; 5    => EQU EdgesCnt
 125+ E000              ; 6    => 6
 126+ E000              ; 7    => 7
 127+ E000              ; 8    => EQU VertSize
 128+ E000              ; 9    => EQU EdgesCnt
 129+ E000              ; 10-11=> 10-11
 130+ E000              ; 12   => EQU  NormalsSize
 131+ E000              ; 13   => 13
 132+ E000              ; 14   => 14
 133+ E000              ; 15   => 15
 134+ E000              ; 16   => EQU Edges
 135+ E000              ; 17   => EQU Normals
 136+ E000              ; 18   => 18
 137+ E000              ; 19   => 19
 138+ E000
 139+ E000
 140+ E000 00 90 01     CargoType5              DB $00, $90, $01
 141+ E003 52 E0                                DW CargoEdges
 142+ E005 3C                                   DB CargoEdgesSize
 143+ E006 00 12 3C 0F                          DB $00,$12,CargoVertSize,CargoEdgesCnt
 144+ E00A 00 00 1C 0C                          DB $00,$00,$1C,$0C,$11,$0F
 144+ E00E 11 0F
 145+ E010 8E E0                                DW CargoNormals
 146+ E012 02 00                                DB $02,$00
 147+ E014 16 E0                                DW CargoVertices
 148+ E016              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
 149+ E016 18 10 00 1F  CargoVertices		    DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
 149+ E01A 10 55
 150+ E01C 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
 150+ E020 10 22
 151+ E022 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
 151+ E026 20 33
 152+ E028 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
 152+ E02C 30 44
 153+ E02E 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
 153+ E032 40 55
 154+ E034 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
 154+ E038 51 66
 155+ E03A 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
 155+ E03E 21 66
 156+ E040 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
 156+ E044 32 66
 157+ E046 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
 157+ E04A 43 66
 158+ E04C 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
 158+ E050 54 66
 159+ E052              CargoVertSize           equ $  - CargoVertices
 160+ E052 1F 10 00 04  CargoEdges			    DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
 160+ E056 1F 20 04 08
 161+ E05A 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
 161+ E05E 1F 40 0C 10
 162+ E062 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
 162+ E066 1F 51 00 14
 163+ E06A 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
 163+ E06E 1F 32 08 1C
 164+ E072 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
 164+ E076 1F 54 10 24
 165+ E07A 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
 165+ E07E 1F 62 18 1C
 166+ E082 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
 166+ E086 1F 64 20 24
 167+ E08A 1F 65 24 14                          DB $1F,$65,$24,$14
 168+ E08E              CargoEdgesSize          equ $  - CargoEdges
 169+ E08E              CargoEdgesCnt           equ CargoEdgesSize / 4
 170+ E08E 1F 60 00 00  CargoNormals    	    DB $1F,$60,$00,$00
 171+ E092 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
 171+ E096 5F 00 12 30
 172+ E09A 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
 172+ E09E 7F 00 12 30
 173+ E0A2 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
 173+ E0A6 9F 60 00 00
 174+ E0AA              CargoNormalsSize        equ $  - CargoNormals
 175+ E0AA              ;;;				 Example of cargo
 176+ E0AA              ;;;
 177+ E0AA              ;;;		Points (nodes, vetices)		6 bytes per vertex
 178+ E0AA              ;;;     Byte 0 = X magnitide with origin at middle of ship
 179+ E0AA              ;;;		Byte 1 = Y magnitide with origin at middle of ship
 180+ E0AA              ;;;		Byte 2 = Z magnitide with origin at middle of ship
 181+ E0AA              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
 182+ E0AA              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 183+ E0AA              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
 184+ E0AA              ;;;
 185+ E0AA              ;;;		Q scaling is equivalent of Dist
 186+ E0AA              ;;;     0:  X=024 Y=16 Z=00 $1F>SX=+ SY=+ SZ=+ F1=5 F2=5
 187+ E0AA              ;;;		1:  X=024 Y=05 Z=15 $1F>SX=+ SY=+ SZ=+ F1=2 F2=2
 188+ E0AA              ;;;     2:  X=024 Y=13 Z=09 $5F>SX=+ SY=- SZ=+ F1=3 F2=3
 189+ E0AA              ;;;     3:  X=024 Y=13 Z=09 $7F>SX=+ SY=- SZ=- F1=4 F2=4
 190+ E0AA              ;;;     4:  X=024 Y=05 Z=15 $3F>SX=+ SY=+ SZ=- F1=5 F2=5
 191+ E0AA              ;;;     5:  X=024 Y=10 Z=00 $9F>SX=- SY=+ SZ=+ F1=6 F2=6
 192+ E0AA              ;;;     6:  X=024 Y=05 Z=15 $9F>SX=- SY=+ SZ=+ F1=6 F2=6
 193+ E0AA              ;;;     7:  X=024 Y=13 Z=09 $DF>SX=- SY=- SZ=+ F1=6 F2=6
 194+ E0AA              ;;;     8:  X=024 Y=13 Z=09 $FF>SX=- SY=- SZ=- F1=6 F2=6
 195+ E0AA              ;;;     9:  X=024 Y=05 Z=15 $BF>SX=- SY=+ SZ=- F1=6 F2=6
 196+ E0AA              ;;;
 197+ E0AA              ;;;		Edges
 198+ E0AA              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
 199+ E0AA              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
 200+ E0AA              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
 201+ E0AA              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
 202+ E0AA              ;;;		Is Q scaling equivalent of Dist?
 203+ E0AA              ;;;     0: Vis=31  F1=1  F2=0 P1=00(0) P2=04 (1)     $1F,$10,$00,$04
 204+ E0AA              ;;;		1: Vis=31  F1=2  F2=0 P1=04(1) P2=04 (1)     $1F,$20,$04,$08
 205+ E0AA              ;;;     2: Vis=31  F1=3  F2=0 P1=08(2) P2=12 (3)     $1F,$30,$08,$0C
 206+ E0AA              ;;;     3: Vis=31  F1=4  F2=0 P1=12(3) P2=16 (4)     $1F,$40,$0C,$10
 207+ E0AA              ;;;     4: Vis=31  F1=5  F2=0 P1=00(0) P2=16 (4)     $1F,$50,$00,$10
 208+ E0AA              ;;;     5: Vis=31  F1=5  F2=0 P1=00(0) P2=20 (5)     $1F,$51,$00,$14
 209+ E0AA              ;;;     6: Vis=31  F1=2  F2=0 P1=04(1) P2=24 (6)     $1F,$21,$04,$18
 210+ E0AA              ;;;     7: Vis=31  F1=3  F2=0 P1=08(2) P2=28 (7)     $1F,$32,$08,$1C  Doesn';t make sense there are only 10 edges
 211+ E0AA              ;;;		$1F,$43,$0C,$20
 212+ E0AA              ;;;		$1F,$54,$10,$24
 213+ E0AA              ;;;		$1F,$61,$14,$18
 214+ E0AA              ;;;		$1F,$62,$18,$1C
 215+ E0AA              ;;;		$1F,$63,$1C,$20
 216+ E0AA              ;;;		$1F,$64,$20,$24
 217+ E0AA              ;;;		$1F,$65,$24,$14
 218+ E0AA
 219+ E0AA
 220+ E0AA              ;;;	  	Normals (Faces)
 221+ E0AA              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 222+ E0AA              ;;;		Byte 1 = X Lo
 223+ E0AA              ;;;		Byte 2 = Y Lo
 224+ E0AA              ;;;		Byte 3 = Z Lo
 225+ E0AA              ;;;		Is Q scaling equivalent of Dist?
 226+ E0AA              ;;;		0: $1F>SX=+ SY=+ SZ=+ X=96 Y=00 Z=00	$1F,$60,$00,$00
 227+ E0AA              ;;;		1: $1F>SX=+ SY=+ SZ=+ X=00 Y=41 Z=30	$1F,$00,$29,$1E
 228+ E0AA              ;;;		2: $5F>SX=+ SY=- SZ=+ X=00 Y=18 Z=48	$5F,$00,$12,$30
 229+ E0AA              ;;;		3: $5F>SX=+ SY=- SZ=+ X=00 Y=51 Z=00	$5F,$00,$33,$00
 230+ E0AA              ;;;		4: $7F>SX=+ SY=- SZ=- X=00 Y=18 Z=00	$7F,$00,$12,$30
 231+ E0AA              ;;;		5: $3F>SX=+ SY=+ SZ=- X=00 Y=41 Z=30 	$3F,$00,$29,$1E
 232+ E0AA              ;;;     6: $9F>SX=- SY=+ SZ=+ X=96 Y=00 Z=00	$9F,$60,$00,$00
 233+ E0AA
 234+ E0AA 03 41 23     TestVector:             DB $03, $41, $23
 235+ E0AD EA E0                                DW TestVectorEdges
 236+ E0AF 10                                   DB TestVectorEdgesSize
 237+ E0B0 54 2A                                DB $54,$2A
 238+ E0B2 2A                                   DB TestVectorVertSize
 239+ E0B3 04                                   DB TestVectorEdgesCnt
 240+ E0B4 00 00                                DB $00,$00
 241+ E0B6 10                                   DB TestVectorNormalsSize
 242+ E0B7 32 96 1C                             DB $32,$96,$1C
 243+ E0BA FA E0                                DW TestVectorNormals
 244+ E0BC 04 01                                DB $04,$01
 245+ E0BE C0 E0                                DW TestVectorVertices
 246+ E0C0 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
 246+ E0C4 00 00
 247+ E0C6 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
 247+ E0CA 00 00
 248+ E0CC 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
 248+ E0D0 01 01
 249+ E0D2 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
 249+ E0D6 01 01
 250+ E0D8 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
 250+ E0DC 02 02
 251+ E0DE 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
 251+ E0E2 02 02
 252+ E0E4 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
 252+ E0E8 03 03
 253+ E0EA              TestVectorVertSize      equ $  - TestVectorVertices
 254+ E0EA 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
 255+ E0EE 1F 00 08 0C                          DB $1F,$00,$08,$0C
 256+ E0F2 1F 00 10 14                          DB $1F,$00,$10,$14
 257+ E0F6 1F 00 18 18                          DB $1F,$00,$18,$18
 258+ E0FA              TestVectorEdgesSize     equ $  - TestVectorEdges
 259+ E0FA              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
 260+ E0FA              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
 261+ E0FA 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
 262+ E0FE 1F 10 00 00                          DB $1F,$10,$00,$00
 263+ E102 1F 00 00 10                          DB $1F,$00,$00,$10
 264+ E106 1F 00 00 10                          DB $1F,$00,$00,$10
 265+ E10A              TestVectorNormalsSize   equ $  - TestVectorNormals
 266+ E10A              TestVectorLen           equ $  - TestVector
 267+ E10A              ; -> &5705  \ Shuttle = Type 9 	\ Shuttle hull data header info \ 19 vertices  6*19  = &72
 268+ E10A              ;                      0    1  2     3    4    5   6   7   8   9   10  11  12  13  14  15  16  17  18  19
 269+ E10A              ;					   Scp  Missile  Edg  Face Lin Gun Exp Vtx Edg Bounty  Face            Edg Face
 270+ E10A              ;                      Deb  Lock     Lo   Lo   x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd hi  Hi  Q   Laser
 271+ E10A              CargoType5Len           equ $  - CargoType5
 272+ E10A
 273+ E10A              ; Corrected pointers
 274+ E10A              ;                      0    1    2    3                 4                 5   6   7   8   9   10  11  12  13  14  15   16                  17                 18  19    20                    21
 275+ E10A              ;					   Scp  Missile   Edg               Edg               Lin Gun Exp Vtx Edg Bounty  Face             Edg                 Face                         Vertices
 276+ E10A              ;                      Deb  Lock      Lo                Hi                x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                  Hi                 Q   Laser Lo                    hi
 277+ E10A 0F C4 09 92  ShuttleType9            DB $0F, $C4, $09, low ShuttleEdges, high ShuttleEdges, $6D,$00,$26,$72,$1E,$00,$00,$34,$16,$20,$08, low ShuttleNormals, high ShuttleNormals,$02,$00,  low ShuttleVertices, high ShuttleVertices
 277+ E10E E1 6D 00 26
 277+ E112 72 1E 00 00
 277+ E116 34 16 20 08
 277+ E11A 0A E2 02 00
 277+ E11E 20 E1
 278+ E120              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
 279+ E120 00 23 2F 5F  ShuttleVertices 	    DB $00,$23,$2F,$5F,$FF,$FF
 279+ E124 FF FF
 280+ E126 23 00 2F 9F                          DB $23,$00,$2F,$9F,$FF,$FF
 280+ E12A FF FF
 281+ E12C 00 23 2F 1F                          DB $00,$23,$2F,$1F,$FF,$FF
 281+ E130 FF FF
 282+ E132 23 00 2F 1F                          DB $23,$00,$2F,$1F,$FF,$FF
 282+ E136 FF FF
 283+ E138 28 28 35 FF                          DB $28,$28,$35,$FF,$12,$39
 283+ E13C 12 39
 284+ E13E 28 28 35 BF                          DB $28,$28,$35,$BF,$34,$59
 284+ E142 34 59
 285+ E144 28 28 35 3F                          DB $28,$28,$35,$3F,$56,$79
 285+ E148 56 79
 286+ E14A 28 28 35 7F                          DB $28,$28,$35,$7F,$17,$89
 286+ E14E 17 89
 287+ E150 0A 00 35 30                          DB $0A,$00,$35,$30,$99,$99
 287+ E154 99 99
 288+ E156 00 05 35 70                          DB $00,$05,$35,$70,$99,$99
 288+ E15A 99 99
 289+ E15C 0A 00 35 A8                          DB $0A,$00,$35,$A8,$99,$99
 289+ E160 99 99
 290+ E162 00 05 35 28                          DB $00,$05,$35,$28,$99,$99
 290+ E166 99 99
 291+ E168 00 11 47 50                          DB $00,$11,$47,$50,$0A,$BC
 291+ E16C 0A BC
 292+ E16E 05 02 3D 46                          DB $05,$02,$3D,$46,$FF,$02
 292+ E172 FF 02
 293+ E174 07 17 31 07                          DB $07,$17,$31,$07,$01,$F4
 293+ E178 01 F4
 294+ E17A 15 09 31 07                          DB $15,$09,$31,$07,$A1,$3F
 294+ E17E A1 3F
 295+ E180 05 02 3D C6                          DB $05,$02,$3D,$C6,$6B,$23
 295+ E184 6B 23
 296+ E186 07 17 31 87                          DB $07,$17,$31,$87,$F8,$C0
 296+ E18A F8 C0
 297+ E18C 15 09 31 87                          DB $15,$09,$31,$87,$4F,$18
 297+ E190 4F 18
 298+ E192 1F 02 00 04  ShuttleEdges    	    DB $1F,$02,$00,$04,$1F,$4A,$04,$08
 298+ E196 1F 4A 04 08
 299+ E19A 1F 6B 08 0C                          DB $1F,$6B,$08,$0C,$1F,$8C,$00,$0C
 299+ E19E 1F 8C 00 0C
 300+ E1A2 1F 18 00 1C                          DB $1F,$18,$00,$1C,$18,$12,$00,$10
 300+ E1A6 18 12 00 10
 301+ E1AA 1F 23 04 10                          DB $1F,$23,$04,$10,$18,$34,$04,$14
 301+ E1AE 18 34 04 14
 302+ E1B2 1F 45 08 14                          DB $1F,$45,$08,$14,$0C,$56,$08,$18
 302+ E1B6 0C 56 08 18
 303+ E1BA 1F 67 0C 18                          DB $1F,$67,$0C,$18,$18,$78,$0C,$1C
 303+ E1BE 18 78 0C 1C
 304+ E1C2 1F 39 10 14                          DB $1F,$39,$10,$14,$1F,$59,$14,$18
 304+ E1C6 1F 59 14 18
 305+ E1CA 1F 79 18 1C                          DB $1F,$79,$18,$1C,$1F,$19,$10,$1C
 305+ E1CE 1F 19 10 1C
 306+ E1D2 10 0C 00 30                          DB $10,$0C,$00,$30,$10,$0A,$04,$30
 306+ E1D6 10 0A 04 30
 307+ E1DA 10 AB 08 30                          DB $10,$AB,$08,$30,$10,$BC,$0C,$30
 307+ E1DE 10 BC 0C 30
 308+ E1E2 10 99 20 24                          DB $10,$99,$20,$24,$06,$99,$24,$28
 308+ E1E6 06 99 24 28
 309+ E1EA 08 99 28 2C                          DB $08,$99,$28,$2C,$06,$99,$20,$2C
 309+ E1EE 06 99 20 2C
 310+ E1F2 04 BB 34 38                          DB $04,$BB,$34,$38,$07,$BB,$38,$3C
 310+ E1F6 07 BB 38 3C
 311+ E1FA 06 BB 34 3C                          DB $06,$BB,$34,$3C,$04,$AA,$40,$44
 311+ E1FE 04 AA 40 44
 312+ E202 07 AA 44 48                          DB $07,$AA,$44,$48,$06,$AA,$40,$48
 312+ E206 06 AA 40 48
 313+ E20A DF 6E 6E 50  ShuttleNormals		    DB $DF,$6E,$6E,$50,$5F,$00,$95,$07
 313+ E20E 5F 00 95 07
 314+ E212 DF 66 66 2E                          DB $DF,$66,$66,$2E,$9F,$95,$00,$07
 314+ E216 9F 95 00 07
 315+ E21A 9F 66 66 2E                          DB $9F,$66,$66,$2E,$1F,$00,$95,$07
 315+ E21E 1F 00 95 07
 316+ E222 1F 66 66 2E                          DB $1F,$66,$66,$2E,$1F,$95,$00,$07
 316+ E226 1F 95 00 07
 317+ E22A 5F 66 66 2E                          DB $5F,$66,$66,$2E,$3F,$00,$00,$D5
 317+ E22E 3F 00 00 D5
 318+ E232 9F 51 51 B1                          DB $9F,$51,$51,$B1,$1F,$51,$51,$B1
 318+ E236 1F 51 51 B1
 319+ E23A 5F 6E 6E 50                          DB $5F,$6E,$6E,$50 			; End of shuttle
 320+ E23E              ShuttleType9Len         equ $  - ShuttleType9
 321+ E23E
 322+ E23E              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
 323+ E23E              ; Corrected pointers
 324+ E23E              ;                      0    1    2    3                   4                   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
 325+ E23E              ;					   Scp  Missile   Edg                 Edg                 Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
 326+ E23E              ;                      Deb  Lock      Lo                  Hi                  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
 327+ E23E 00 C4 09 32  TransportType10		    DB $00, $C4, $09, low TransportEdges, high TransportEdges ,$91,$30,$1A,$DE,$2E,$00,$00,$38,$10,$20,$0A, low TransportNormals, high TransportNormals,$01,$00,  low TransportVertices, high TransportVertices
 327+ E242 E3 91 30 1A
 327+ E246 DE 2E 00 00
 327+ E24A 38 10 20 0A
 327+ E24E EA E3 01 00
 327+ E252 54 E2
 328+ E254 00 13 33 3F  TransportVertices 	    DB $00,$13,$33,$3F,$06,$77
 328+ E258 06 77
 329+ E25A 33 07 33 BF                          DB $33,$07,$33,$BF,$01,$77
 329+ E25E 01 77
 330+ E260 39 07 33 FF                          DB $39,$07,$33,$FF,$01,$22
 330+ E264 01 22
 331+ E266 33 11 33 FF                          DB $33,$11,$33,$FF,$02,$33
 331+ E26A 02 33
 332+ E26C 33 11 33 7F                          DB $33,$11,$33,$7F,$03,$44
 332+ E270 03 44
 333+ E272 39 07 33 7F                          DB $39,$07,$33,$7F,$04,$55
 333+ E276 04 55
 334+ E278 33 07 33 3F                          DB $33,$07,$33,$3F,$05,$66
 334+ E27C 05 66
 335+ E27E 00 0C 18 12                          DB $00,$0C,$18,$12,$FF,$FF
 335+ E282 FF FF
 336+ E284 3C 02 18 DF                          DB $3C,$02,$18,$DF,$17,$89
 336+ E288 17 89
 337+ E28A 42 11 18 DF                          DB $42,$11,$18,$DF,$12,$39
 337+ E28E 12 39
 338+ E290 42 11 18 5F                          DB $42,$11,$18,$5F,$34,$5A
 338+ E294 34 5A
 339+ E296 3C 02 18 5F                          DB $3C,$02,$18,$5F,$56,$AB
 339+ E29A 56 AB
 340+ E29C 16 05 3D DF                          DB $16,$05,$3D,$DF,$89,$CD
 340+ E2A0 89 CD
 341+ E2A2 1B 11 3D DF                          DB $1B,$11,$3D,$DF,$39,$DD
 341+ E2A6 39 DD
 342+ E2A8 1B 11 3D 5F                          DB $1B,$11,$3D,$5F,$3A,$DD
 342+ E2AC 3A DD
 343+ E2AE 16 05 3D 5F                          DB $16,$05,$3D,$5F,$AB,$CD
 343+ E2B2 AB CD
 344+ E2B4 0A 0B 05 86                          DB $0A,$0B,$05,$86,$77,$77
 344+ E2B8 77 77
 345+ E2BA 24 05 05 86                          DB $24,$05,$05,$86,$77,$77
 345+ E2BE 77 77
 346+ E2C0 0A 0D 0E A6                          DB $0A,$0D,$0E,$A6,$77,$77
 346+ E2C4 77 77
 347+ E2C6 24 07 0E A6                          DB $24,$07,$0E,$A6,$77,$77
 347+ E2CA 77 77
 348+ E2CC 17 0C 1D A6                          DB $17,$0C,$1D,$A6,$77,$77
 348+ E2D0 77 77
 349+ E2D2 17 0A 0E A6                          DB $17,$0A,$0E,$A6,$77,$77
 349+ E2D6 77 77
 350+ E2D8 0A 0F 1D 26                          DB $0A,$0F,$1D,$26,$66,$66
 350+ E2DC 66 66
 351+ E2DE 24 09 1D 26                          DB $24,$09,$1D,$26,$66,$66
 351+ E2E2 66 66
 352+ E2E4 17 0A 0E 26                          DB $17,$0A,$0E,$26,$66,$66
 352+ E2E8 66 66
 353+ E2EA 0A 0C 06 26                          DB $0A,$0C,$06,$26,$66,$66
 353+ E2EE 66 66
 354+ E2F0 24 06 06 26                          DB $24,$06,$06,$26,$66,$66
 354+ E2F4 66 66
 355+ E2F6 17 07 10 06                          DB $17,$07,$10,$06,$66,$66
 355+ E2FA 66 66
 356+ E2FC 17 09 06 26                          DB $17,$09,$06,$26,$66,$66
 356+ E300 66 66
 357+ E302 21 11 1A E5                          DB $21,$11,$1A,$E5,$33,$33
 357+ E306 33 33
 358+ E308 21 11 21 C5                          DB $21,$11,$21,$C5,$33,$33
 358+ E30C 33 33
 359+ E30E 21 11 1A 65                          DB $21,$11,$1A,$65,$33,$33
 359+ E312 33 33
 360+ E314 21 11 21 45                          DB $21,$11,$21,$45,$33,$33
 360+ E318 33 33
 361+ E31A 19 06 33 E7                          DB $19,$06,$33,$E7,$00,$00
 361+ E31E 00 00
 362+ E320 1A 06 33 67                          DB $1A,$06,$33,$67,$00,$00
 362+ E324 00 00
 363+ E326 11 06 33 24                          DB $11,$06,$33,$24,$00,$00
 363+ E32A 00 00
 364+ E32C 11 06 33 A4                          DB $11,$06,$33,$A4,$00,$00
 364+ E330 00 00
 365+ E332 1F 07 00 04  TransportEdges		    DB $1F,$07,$00,$04,$1F,$01,$04,$08 ;
 365+ E336 1F 01 04 08
 366+ E33A 1F 02 08 0C                          DB $1F,$02,$08,$0C,$1F,$03,$0C,$10 ;
 366+ E33E 1F 03 0C 10
 367+ E342 1F 04 10 14                          DB $1F,$04,$10,$14,$1F,$05,$14,$18 ;
 367+ E346 1F 05 14 18
 368+ E34A 1F 06 00 18                          DB $1F,$06,$00,$18,$0F,$67,$00,$1C ;
 368+ E34E 0F 67 00 1C
 369+ E352 1F 17 04 20                          DB $1F,$17,$04,$20,$0A,$12,$08,$24 ;
 369+ E356 0A 12 08 24
 370+ E35A 1F 23 0C 24                          DB $1F,$23,$0C,$24,$1F,$34,$10,$28 ;
 370+ E35E 1F 34 10 28
 371+ E362 0A 45 14 28                          DB $0A,$45,$14,$28,$1F,$56,$18,$2C ;
 371+ E366 1F 56 18 2C
 372+ E36A 10 78 1C 20                          DB $10,$78,$1C,$20,$10,$19,$20,$24 ;
 372+ E36E 10 19 20 24
 373+ E372 10 5A 28 2C                          DB $10,$5A,$28,$2C,$10,$6B,$1C,$2C ;
 373+ E376 10 6B 1C 2C
 374+ E37A 12 BC 1C 3C                          DB $12,$BC,$1C,$3C,$12,$8C,$1C,$30 ;
 374+ E37E 12 8C 1C 30
 375+ E382 10 89 20 30                          DB $10,$89,$20,$30,$1F,$39,$24,$34 ;
 375+ E386 1F 39 24 34
 376+ E38A 1F 3A 28 38                          DB $1F,$3A,$28,$38,$10,$AB,$2C,$3C ;
 376+ E38E 10 AB 2C 3C
 377+ E392 1F 9D 30 34                          DB $1F,$9D,$30,$34,$1F,$3D,$34,$38 ;
 377+ E396 1F 3D 34 38
 378+ E39A 1F AD 38 3C                          DB $1F,$AD,$38,$3C,$1F,$CD,$30,$3C ;
 378+ E39E 1F CD 30 3C
 379+ E3A2 06 77 40 44                          DB $06,$77,$40,$44,$06,$77,$48,$4C ; I.B. on roof
 379+ E3A6 06 77 48 4C
 380+ E3AA 06 77 4C 50                          DB $06,$77,$4C,$50,$06,$77,$48,$50 ;
 380+ E3AE 06 77 48 50
 381+ E3B2 06 77 50 54                          DB $06,$77,$50,$54,$06,$66,$58,$5C ;
 381+ E3B6 06 66 58 5C
 382+ E3BA 06 66 5C 60                          DB $06,$66,$5C,$60,$06,$66,$60,$58 ; D.B. on roof
 382+ E3BE 06 66 60 58
 383+ E3C2 06 66 64 68                          DB $06,$66,$64,$68,$06,$66,$68,$6C ;
 383+ E3C6 06 66 68 6C
 384+ E3CA 06 66 64 6C                          DB $06,$66,$64,$6C,$06,$66,$6C,$70 ;
 384+ E3CE 06 66 6C 70
 385+ E3D2 05 33 74 78                          DB $05,$33,$74,$78,$05,$33,$7C,$80 ; skids
 385+ E3D6 05 33 7C 80
 386+ E3DA 07 00 84 88                          DB $07,$00,$84,$88,$04,$00,$88,$8C ; thruster
 386+ E3DE 04 00 88 8C
 387+ E3E2 04 00 8C 90                          DB $04,$00,$8C,$90,$04,$00,$90,$84 ; end of transporter edges
 387+ E3E6 04 00 90 84
 388+ E3EA 3F 00 00 67  TransportNormals	    DB $3F,$00,$00,$67,$BF,$6F,$30,$07 ;
 388+ E3EE BF 6F 30 07
 389+ E3F2 FF 69 3F 15                          DB $FF,$69,$3F,$15,$5F,$00,$22,$00 ;
 389+ E3F6 5F 00 22 00
 390+ E3FA 7F 69 3F 15                          DB $7F,$69,$3F,$15,$3F,$6F,$30,$07 ;
 390+ E3FE 3F 6F 30 07
 391+ E402 1F 08 20 03                          DB $1F,$08,$20,$03,$9F,$08,$20,$03 ;
 391+ E406 9F 08 20 03
 392+ E40A 92 08 22 0B                          DB $92,$08,$22,$0B,$9F,$4B,$20,$4F ;
 392+ E40E 9F 4B 20 4F
 393+ E412 1F 4B 20 4F                          DB $1F,$4B,$20,$4F,$12,$08,$22,$0B ;
 393+ E416 12 08 22 0B
 394+ E41A 1F 00 26 11                          DB $1F,$00,$26,$11,$1F,$00,$00,$79 ; end of Transporter
 394+ E41E 1F 00 00 79
 395+ E422              TransportType10Len      equ $  - TransportType10
 396+ E422
 397+ E422
 398+ E422              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
 399+ E422              ; Corrected pointers
 400+ E422              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
 401+ E422              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
 402+ E422              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
 403+ E422 03 41 23     CobraMk3    		    DB $03, $41, $23
 404+ E425 E0 E4                                DW CobraMk3Edges
 405+ E427 98                                   DB CobraMkEdgesSize
 406+ E428 54 2A                                DB $54,$2A
 407+ E42A A8                                   DB CobraMkVertSize
 408+ E42B 26                                   DB CobraMkEdgesCnt
 409+ E42C 00 00                                DB $00,$00
 410+ E42E 34                                   DB CobraMk3NormalsSize
 411+ E42F 32 96 1C                             DB $32,$96,$1C
 412+ E432 78 E5                                DW CobraMk3Normals
 413+ E434 01 13                                DB $01,$13
 414+ E436 38 E4                                DW CobraMk3Vertices
 415+ E438                                  ; missiles = 3
 416+ E438 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
 416+ E43C FF FF
 417+ E43E 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
 417+ E442 FF FF
 418+ E444 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
 418+ E448 FF FF
 419+ E44A 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
 419+ E44E 73 AA
 420+ E450 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
 420+ E454 84 CC
 421+ E456 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
 421+ E45A FF FF
 422+ E45C 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
 422+ E460 FF FF
 423+ E462 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
 423+ E466 98 CC
 424+ E468 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
 424+ E46C 97 AA
 425+ E46E 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
 425+ E472 65 99
 426+ E474 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
 426+ E478 A9 BB
 427+ E47A 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
 427+ E47E B9 CC
 428+ E480 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
 428+ E484 99 99
 429+ E486 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
 429+ E48A 99 99
 430+ E48C 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
 430+ E490 99 99
 431+ E492 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
 431+ E496 99 99
 432+ E498 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
 432+ E49C 99 99
 433+ E49E 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
 433+ E4A2 99 99
 434+ E4A4 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
 434+ E4A8 99 99
 435+ E4AA 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
 435+ E4AE 99 99
 436+ E4B0 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
 436+ E4B4 B0 BB
 437+ E4B6 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
 437+ E4BA B0 BB
 438+ E4BC 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
 438+ E4C0 99 99
 439+ E4C2 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
 439+ E4C6 99 99
 440+ E4C8 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
 440+ E4CC 99 99
 441+ E4CE 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
 441+ E4D2 99 99
 442+ E4D4 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
 442+ E4D8 99 99
 443+ E4DA 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
 443+ E4DE 99 99
 444+ E4E0              CobraMkVertSize         equ $  - CobraMk3Vertices
 445+ E4E0 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
 445+ E4E4 1F C4 00 10
 446+ E4E8 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
 446+ E4EC 1F A7 0C 20
 447+ E4F0 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
 447+ E4F4 1F 98 18 1C
 448+ E4F8 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
 448+ E4FC 1F 95 14 24
 449+ E500 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
 449+ E504 1F 51 08 14
 450+ E508 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
 450+ E50C 1F 73 0C 14
 451+ E510 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
 451+ E514 1F 10 04 08
 452+ E518 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
 452+ E51C 1F A9 20 28
 453+ E520 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
 453+ E524 1F C9 1C 2C
 454+ E528 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
 454+ E52C 1F CB 00 2C
 455+ E530 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
 455+ E534 1D 42 00 18
 456+ E538 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
 456+ E53C 14 99 30 34
 457+ E540 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
 457+ E544 14 99 38 3C
 458+ E548 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
 458+ E54C 13 99 3C 40
 459+ E550 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
 459+ E554 13 99 34 48
 460+ E558 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
 460+ E55C 1E 65 08 24
 461+ E560 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
 461+ E564 06 99 5C 60
 462+ E568 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
 462+ E56C 06 99 64 68
 463+ E570 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
 463+ E574 08 99 64 6C
 464+ E578              CobraMkEdgesSize        equ $  - CobraMk3Edges
 465+ E578              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
 466+ E578              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
 467+ E578 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
 468+ E57C 9F 12 37 10                          DB $9F,$12,$37,$10
 469+ E580 1F 12 37 10                          DB $1F,$12,$37,$10
 470+ E584 9F 10 34 0E                          DB $9F,$10,$34,$0E
 471+ E588 1F 10 34 0E                          DB $1F,$10,$34,$0E
 472+ E58C 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
 473+ E590 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
 474+ E594 9F 3D 66 00                          DB $9F,$3D,$66,$00
 475+ E598 1F 3D 66 00                          DB $1F,$3D,$66,$00
 476+ E59C 3F 00 00 50                          DB $3F,$00,$00,$50
 477+ E5A0 DF 07 2A 09                          DB $DF,$07,$2A,$09
 478+ E5A4 5F 00 1E 06                          DB $5F,$00,$1E,$06
 479+ E5A8 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
 480+ E5AC              CobraMk3NormalsSize     equ $  - CobraMk3Normals
 481+ E5AC              CobraMk3Len             equ $  - CobraMk3
 482+ E5AC              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
 483+ E5AC              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
 484+ E5AC              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
 485+ E5AC F3 49 26     Constrictor:    	    DB $F3, $49, $26
 486+ E5AF 28 E6                                DW ConstrictorEdges
 487+ E5B1 60                                   DB ConstrictorEdgesSize
 488+ E5B2 00 2E                                DB $00,$2E
 489+ E5B4 66                                   DB ConstrictorVertSize
 490+ E5B5 18                                   DB ConstrictorEdgesCnt
 491+ E5B6 18 00                                DB $18,$00
 492+ E5B8 28                                   DB ConstrictorNormalsSize
 493+ E5B9 2D C8 37                             DB $2D,$C8,$37
 494+ E5BC 88 E6                                DW ConstrictorNormals
 495+ E5BE 02 2F                                DB $02,$2F
 496+ E5C0 C2 E5                                DW ConstrictorVertices
 497+ E5C2                                  ; missiles = 3
 498+ E5C2 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
 498+ E5C6 02 99
 499+ E5C8 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
 499+ E5CC 01 99
 500+ E5CE 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
 500+ E5D2 14 99
 501+ E5D4 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
 501+ E5D8 45 89
 502+ E5DA 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
 502+ E5DE 56 88
 503+ E5E0 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
 503+ E5E4 67 88
 504+ E5E6 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
 504+ E5EA 37 89
 505+ E5EC 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
 505+ E5F0 23 99
 506+ E5F2 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
 506+ E5F6 FF FF
 507+ E5F8 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
 507+ E5FC FF FF
 508+ E5FE 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
 508+ E602 99 99
 509+ E604 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
 509+ E608 99 99
 510+ E60A 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
 510+ E60E 99 99
 511+ E610 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
 511+ E614 99 99
 512+ E616 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
 512+ E61A 99 99
 513+ E61C 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
 513+ E620 99 99
 514+ E622 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
 514+ E626 9F 01
 515+ E628              ConstrictorVertSize     equ $  - ConstrictorVertices
 516+ E628 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
 516+ E62C 1F 19 04 08
 517+ E630 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
 517+ E634 1F 02 00 20
 518+ E638 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
 518+ E63C 1F 23 1C 20
 519+ E640 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
 519+ E644 1F 49 08 0C
 520+ E648 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
 520+ E64C 1F 37 18 20
 521+ E650 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
 521+ E654 1F 56 10 24
 522+ E658 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
 522+ E65C 1F 58 0C 10
 523+ E660 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
 523+ E664 1F 78 14 18
 524+ E668 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
 524+ E66C 1F 06 20 24
 525+ E670 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
 525+ E674 05 99 30 38
 526+ E678 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
 526+ E67C 0A 99 2C 3C
 527+ E680 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
 527+ E684 12 99 2C 34
 528+ E688              ConstrictorEdgesSize    equ $  - ConstrictorEdges
 529+ E688              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
 530+ E688 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
 530+ E68C 9F 18 4B 14
 531+ E690 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
 531+ E694 1F 2C 4B 00
 532+ E698 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
 532+ E69C 9F 2C 4B 00
 533+ E6A0 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
 533+ E6A4 1F 2C 4B 00
 534+ E6A8 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
 534+ E6AC 5F 00 1B 00
 535+ E6B0              ConstrictorNormalsSize  equ $  - ConstrictorNormals
 536+ E6B0              ConstrictorLen          equ $  - Constrictor
 537+ E6B0
 538+ E6B0              ;\ -> &5BA1 \ Python = Type 12
 539+ E6B0 05 00 19     Python:                 DB $05, $00, $19
 540+ E6B3 08 E7                                DW PythonEdges
 541+ E6B5 68                                   DB PythonEdgesSize
 542+ E6B6 00 2A                                DB $00,$2A
 543+ E6B8 42                                   DB PythonVertSize
 544+ E6B9 1A                                   DB PythonEdgesCnt
 545+ E6BA 00 00                                DB $00,$00
 546+ E6BC 34                                   DB PythonNormalsSize
 547+ E6BD 28 FA 14                             DB $28,$FA,$14
 548+ E6C0 70 E7                                DW PythonNormals
 549+ E6C2 00 1B                                DB $00, $1B
 550+ E6C4 C6 E6                                DW PythonVertices
 551+ E6C6 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
 551+ E6CA 10 32
 552+ E6CC 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
 552+ E6D0 10 54
 553+ E6D2 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
 553+ E6D6 FF FF
 554+ E6D8 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
 554+ E6DC FF FF
 555+ E6DE 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
 555+ E6E2 54 98
 556+ E6E4 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
 556+ E6E8 89 CC
 557+ E6EA 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
 557+ E6EE B8 CC
 558+ E6F0 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
 558+ E6F4 A9 CC
 559+ E6F6 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
 559+ E6FA 32 76
 560+ E6FC 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
 560+ E700 76 BA
 561+ E702 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
 561+ E706 BA CC
 562+ E708              PythonVertSize          equ $  - PythonVertices
 563+ E708 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
 563+ E70C 1F 20 00 0C
 564+ E710 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
 564+ E714 1E 10 00 04
 565+ E718 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
 565+ E71C 1D 51 04 08
 566+ E720 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
 566+ E724 1D 40 04 0C
 567+ E728 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
 567+ E72C 1D A7 08 24
 568+ E730 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
 568+ E734 1D B6 0C 24
 569+ E738 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
 569+ E73C 05 BB 0C 28
 570+ E740 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
 570+ E744 05 AA 08 28
 571+ E748 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
 571+ E74C 1F B8 0C 18
 572+ E750 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
 572+ E754 1F C9 14 1C
 573+ E758 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
 573+ E75C 1D CB 18 28
 574+ E760 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
 574+ E764 1D BA 24 28
 575+ E768 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
 575+ E76C 1D 76 20 24
 576+ E770              PythonEdgesSize         equ $  - PythonEdges
 577+ E770              PythonEdgesCnt          equ PythonEdgesSize/4
 578+ E770 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
 578+ E774 1E 1B 28 0B
 579+ E778 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
 579+ E77C 5E 1B 28 0B
 580+ E780 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
 580+ E784 1E 13 26 00
 581+ E788 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
 581+ E78C 5E 13 26 00
 582+ E790 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
 582+ E794 3E 19 25 0B
 583+ E798 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
 583+ E79C FE 19 25 0B
 584+ E7A0 3E 00 00 70                          DB $3E, $00, $00, $70
 585+ E7A4              PythonNormalsSize       equ $  - PythonNormals
 586+ E7A4              PythonLen               equ $  - Python
 587+ E7A4
 588+ E7A4              ; Mapping Orginal to new
 589+ E7A4              ; 0    => 0
 590+ E7A4              ; 1-2  => 1-2
 591+ E7A4              ; 3    => EQU Edges
 592+ E7A4              ; 4    => EQU Normals
 593+ E7A4              ; 5    => EQU EdgesCnt
 594+ E7A4              ; 6    => 6
 595+ E7A4              ; 7    => 7
 596+ E7A4              ; 8    => EQU VertSize
 597+ E7A4              ; 9    => EQU EdgesCnt
 598+ E7A4              ; 10-11=> 10-11
 599+ E7A4              ; 12   => EQU  NormalsSize
 600+ E7A4              ; 13   => 13
 601+ E7A4              ; 14   => 14
 602+ E7A4              ; 15   => 15
 603+ E7A4              ; 16   => EQU Edges
 604+ E7A4              ; 17   => EQU Normals
 605+ E7A4              ; 18   => 18
 606+ E7A4              ; 19   => 19
 607+ E7A4              ;\ -> &5C93  \ Viper = Type 16
 608+ E7A4 00 F9 15     Viper:                  DB $00, $F9, $15
 609+ E7A7 08 E7                                DW PythonEdges
 610+ E7A9 68                                   DB PythonEdgesSize
 611+ E7AA 00 2A                                DB $00,$2A
 612+ E7AC 42                                   DB PythonVertSize
 613+ E7AD 1A                                   DB PythonEdgesCnt
 614+ E7AE 00 00                                DB $00,$00
 615+ E7B0 34                                   DB PythonNormalsSize
 616+ E7B1 17 64 20                             DB $17, $64, $20
 617+ E7B4 70 E7                                DW PythonNormals
 618+ E7B6 01 11                                DB $01, $11
 619+ E7B8 C6 E6                                DW PythonVertices
 620+ E7BA 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
 620+ E7BE 21 43
 621+ E7C0 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
 621+ E7C4 10 22
 622+ E7C6 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
 622+ E7CA 43 55
 623+ E7CC 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
 623+ E7D0 42 66
 624+ E7D2 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
 624+ E7D6 31 66
 625+ E7D8 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
 625+ E7DC 54 66
 626+ E7DE 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
 626+ E7E2 35 66
 627+ E7E4 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
 627+ E7E8 20 66
 628+ E7EA 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
 628+ E7EE 10 66
 629+ E7F0 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
 629+ E7F4 66 66
 630+ E7F6 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
 630+ E7FA 66 66
 631+ E7FC 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
 631+ E800 66 66
 632+ E802 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
 632+ E806 66 66
 633+ E808 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
 633+ E80C 66 66
 634+ E80E 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
 634+ E812 66 66
 635+ E814              ViperVertSize           equ $  - ViperVertices
 636+ E814 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
 636+ E818 1E 21 00 04
 637+ E81C 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
 637+ E820 1F 31 00 10
 638+ E824 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
 638+ E828 1E 10 04 20
 639+ E82C 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
 639+ E830 1E 53 08 18
 640+ E834 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
 640+ E838 1E 65 14 18
 641+ E83C 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
 641+ E840 1E 63 10 18
 642+ E844 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
 642+ E848 1E 46 0C 14
 643+ E84C 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
 643+ E850 12 66 24 34
 644+ E854 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
 644+ E858 12 66 28 38
 645+ E85C 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
 645+ E860 10 66 30 34
 646+ E864              ViperEdgesSize          equ $  - ViperEdges
 647+ E864              ViperEdgesCnt           equ ViperEdgesSize/4
 648+ E864 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
 648+ E868 9F 16 21 0B
 649+ E86C 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
 649+ E870 DF 16 21 0B
 650+ E874 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
 650+ E878 5F 00 20 00
 651+ E87C 3F 00 00 30                          DB $3F, $00, $00, $30
 652+ E880              ViperNormalsSize        equ $  - ViperNormals
 653+ E880              ViperLen                equ $  - Viper
 654+ E880
 655+ E880
 656+ E880              ;\ -> &5D6D \ Krait = Type 19
 657+ E880              ;
 658+ E880              ;01 10 0E 7A  	\ Krait hull data header info
 659+ E880              ;CE 55 00 12
 660+ E880              ;66 15 64 00  	\ 17 vertices  6*17  = &66
 661+ E880              ;18 14 50 1E
 662+ E880              ;00 00 02 10  	\ Q% different, normals different to Elite-A
 663+ E880              ;	\ Krait vertices data
 664+ E880              ;00 00 60 1F 01 23
 665+ E880              ;00 12 30 3F 03 45
 666+ E880              ;00 12 30 7F 12 45
 667+ E880              ;5A 00 03 3F 01 44
 668+ E880              ;5A 00 03 BF 23 55
 669+ E880              ;5A 00 57 1C 01 11
 670+ E880              ;5A 00 57 9C 23 33
 671+ E880              ;00 05 35 09 00 33
 672+ E880              ;00 07 26 06 00 33
 673+ E880              ;12 07 13 89 33 33
 674+ E880              ;12 07 13 09 00 00
 675+ E880              ;12 0B 27 28 44 44
 676+ E880              ;12 0B 27 68 44 44
 677+ E880              ;24 00 1E 28 44 44
 678+ E880              ;12 0B 27 A8 55 55
 679+ E880              ;12 0B 27 E8 55 55
 680+ E880              ;24 00 1E A8 55 55
 681+ E880              ;	\ Krait edges and face data
 682+ E880              ;1F 03 00 04 1F 12 00 08
 683+ E880              ;1F 01 00 0C 1F 23 00 10
 684+ E880              ;1F 35 04 10 1F 25 10 08
 685+ E880              ;1F 14 08 0C 1F 04 0C 04
 686+ E880              ;1C 01 0C 14 1C 23 10 18
 687+ E880              ;05 45 04 08 09 00 1C 28
 688+ E880              ;06 00 20 28 09 33 1C 24
 689+ E880              ;06 33 20 24 08 44 2C 34
 690+ E880              ;08 44 34 30 07 44 30 2C
 691+ E880              ;07 55 38 3C 08 55 3C 40
 692+ E880              ;08 55 40 38 1F 07 30 06
 693+ E880              ;5F 07 30 06 DF 07 30 06
 694+ E880              ;9F 07 30 06 3F 4D 00 9A
 695+ E880              ;BF 4D 00 9A 		\ end of Krait
 696+ E880              ;
 697+ E880              ;\ -> &5E53 \ Constrictor = Type 31
 698+ E880              ;
 699+ E880              ;F3 49 26 7A  	\  Constrictor hull data header info
 700+ E880              ;DA 4D 00 2E
 701+ E880              ;66 18 00 00	\ 17 vertices  6*17  = &66
 702+ E880              ;28 2D C8 37
 703+ E880              ;00 00 02 2F
 704+ E880              ;	\ Constrictor vertices data
 705+ E880              ;14 07 50 5F 02 99
 706+ E880              ;14 07 50 DF 01 99
 707+ E880              ;36 07 28 DF 14 99
 708+ E880              ;36 07 28 FF 45 89
 709+ E880              ;14 0D 28 BF 56 88
 710+ E880              ;14 0D 28 3F 67 88
 711+ E880              ;36 07 28 7F 37 89
 712+ E880              ;36 07 28 5F 23 99
 713+ E880              ;14 0D 05 1F FF FF
 714+ E880              ;14 0D 05 9F FF FF
 715+ E880              ;14 07 3E 52 99 99
 716+ E880              ;14 07 3E D2 99 99
 717+ E880              ;19 07 19 72 99 99
 718+ E880              ;19 07 19 F2 99 99
 719+ E880              ;0F 07 0F 6A 99 99
 720+ E880              ;0F 07 0F EA 99 99
 721+ E880              ;00 07 00 40 9F 01
 722+ E880              ;	\ Constrictor edges and face data
 723+ E880              ;1F 09 00 04 1F 19 04 08
 724+ E880              ;1F 01 04 24 1F 02 00 20
 725+ E880              ;1F 29 00 1C 1F 23 1C 20
 726+ E880              ;1F 14 08 24 1F 49 08 0C
 727+ E880              ;1F 39 18 1C 1F 37 18 20
 728+ E880              ;1F 67 14 20 1F 56 10 24
 729+ E880              ;1F 45 0C 24 1F 58 0C 10
 730+ E880              ;1F 68 10 14 1F 78 14 18
 731+ E880              ;1F 89 0C 18 1F 06 20 24
 732+ E880              ;12 99 28 30 05 99 30 38
 733+ E880              ;0A 99 38 28 0A 99 2C 3C
 734+ E880              ;05 99 34 3C 12 99 2C 34
 735+ E880              ;1F 00 37 0F 9F 18 4B 14
 736+ E880              ;1F 18 4B 14 1F 2C 4B 00
 737+ E880              ;9F 2C 4B 00 9F 2C 4B 00
 738+ E880              ;1F 00 35 00 1F 2C 4B 00
 739+ E880              ;3F 00 00 A0 5F 00 1B 00   \ end of Constrictor  &5F55
 740+ E880
 741+ E880
 742+ E880              CobraTablePointer   equ 6
 743+ E880
 744+ E880 00 E0 0A E1  ShipModelTable		DW	CargoType5,    ShuttleType9,    TransportType10,   CobraMk3 , TestVector , Constrictor, Python, Viper
 744+ E884 3E E2 22 E4
 744+ E888 AA E0 AC E5
 744+ E88C B0 E6 A4 E7
 745+ E890 16 E0 20 E1  ShipVertexTable		DW 	CargoVertices, ShuttleVertices, TransportVertices, CobraMk3Vertices , TestVectorVertices, ConstrictorVertices, PythonVertices, ViperVertices
 745+ E894 54 E2 38 E4
 745+ E898 C0 E0 C2 E5
 745+ E89C C6 E6 BA E7
 746+ E8A0 52 E0 92 E1  ShipEdgeTable		DW  CargoEdges,    ShuttleEdges,    TransportEdges,    CobraMk3Edges  , TestVectorEdges , ConstrictorEdges, PythonEdges, ViperEdges
 746+ E8A4 32 E3 E0 E4
 746+ E8A8 EA E0 28 E6
 746+ E8AC 08 E7 14 E8
 747+ E8B0 8E E0 0A E2  ShipNormalTable	    DW  CargoNormals,  ShuttleNormals,  TransportNormals,  CobraMk3Normals , TestVectorNormals, ConstrictorNormals, PythonNormals, ViperNormals
 747+ E8B4 EA E3 78 E5
 747+ E8B8 FA E0 88 E6
 747+ E8BC 70 E7 64 E8
 748+ E8C0
 749+ E8C0 0A 01 34 01  ShipModelSizeTable  DW  CargoType5Len, ShuttleType9Len, TransportType10Len,CobraMk3Len, TestVectorLen, ConstrictorLen, PythonLen, ViperLen
 749+ E8C4 E4 01 8A 01
 749+ E8C8 60 00 04 01
 749+ E8CC F4 00 DC 00
 750+ E8D0
 751+ E8D0
 752+ E8D0              GetInfo:                                    ; gets pointer to ship data for ship type in a
 753+ E8D0              GINF:
 754+ E8D0 21 80 E8         ld          hl,ShipModelTable
 755+ E8D3 ED 31            add         hl,a
 756+ E8D5 ED 31            add         hl,a
 757+ E8D7 5E               ld          e,(hl)
 758+ E8D8 23               inc         hl
 759+ E8D9 56               ld          d,(hl)
 760+ E8DA C9               ret
 761+ E8DB
 762+ E8DB
 763+ E8DB              ; memcopy_dma, hl = target address de = source address to copy, bc = length"
 764+ E8DB              CopyVerticesDataToUBnk:
 765+ E8DB 2A 12 C3         ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 766+ E8DE 11 14 C3         ld          de,UBnkHullVerticies
 767+ E8E1 06 00            ld          b,0
 768+ E8E3 3A 06 C3     	ld			a,(VertexCtX6Addr)
 769+ E8E6 4F               ld          c,a
 770+ E8E7 EB               ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 771+ E8E8 CD 5F 8E         call        memcopy_dma
 772+ E8EB C9               ret
 773+ E8EC
 774+ E8EC              CopyEdgeDataToUBnk:
 775+ E8EC 2A 01 C3         ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 776+ E8EF 11 40 C4         ld          de,UBnkHullEdges
 777+ E8F2 06 00            ld          b,0
 778+ E8F4 3A 03 C3     	ld			a,(LineX4Addr)
 779+ E8F7 4F               ld          c,a
 780+ E8F8 EB               ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 781+ E8F9 CD 5F 8E         call        memcopy_dma
 782+ E8FC C9               ret
 783+ E8FD
 784+ E8FD              CopyNormalDataToUBnk:
 785+ E8FD 2A 0E C3         ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 786+ E900 11 F0 C8         ld          de,UBnkHullNormals
 787+ E903 06 00            ld          b,0
 788+ E905 3A 0A C3         ld          a,(FaceCtX4Addr)
 789+ E908 4F               ld          c,a
 790+ E909 EB               ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 791+ E90A CD 5F 8E         call        memcopy_dma
 792+ E90D C9               ret
 793+ E90E
 794+ E90E              CopyShipDataToUBnk:							; a = model number to copy
 795+ E90E 32 FD C2     	ld			(UbnkShipType),a			; mark ship type in bank
 796+ E911              .GetHullDataLength:
 797+ E911 21 C0 E8         ld          hl,ShipModelSizeTable
 798+ E914 ED 31            add         hl,a
 799+ E916 ED 31            add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 800+ E918 4E               ld          c,(hl)
 801+ E919 23               inc         hl
 802+ E91A 46               ld          b,(hl)                      ; bc now equals length of data set
 803+ E91B              .GetHullDataAddress:
 804+ E91B CD D0 E8         call        GetInfo                     ; de = address of Ship Data
 805+ E91E EB               ex          de,hl                       ; hl = address of Ship Data
 806+ E91F 11 FE C2         ld          de,UBnkHullCopy             ; Universe bank
 807+ E922 01 16 00         ld          bc,22                       ; its now 22 bytes
 808+ E925 ED B0            ldir                                    ; Copy over 22 bytes
 809+ E927 CD DB E8         call        CopyVerticesDataToUBnk
 810+ E92A CD EC E8         call        CopyEdgeDataToUBnk
 811+ E92D CD FD E8         call        CopyNormalDataToUBnk
 812+ E930 C9               ret
 813+ E931
# file closed: Data/ShipModels.asm
 876  E931              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 877  E931                  SLOT    SpritemembankAddr
 878  E931                  PAGE    BankSPRITE
 879  E931              	ORG     SpritemembankAddr, BankSPRITE
 880  E000                  INCLUDE "sprite_routines.asm"
# file opened: Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite2+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              glactic_pattern_1					equ 0
  19+ E000              glactic_hyper_pattern_1             equ 2
  20+ E000              local_pattern_1                     equ 4
  21+ E000              local_hyper_pattern_1               equ 6
  22+ E000
  23+ E000              spritecursoroffset					equ 17
  24+ E000
  25+ E000
  26+ E000
  27+ E000
  28+ E000              sprite_big:
  29+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  30+ E000              .SetAnchor:
  31+ E000 7A           	ld		a,d                                 ; a = sprite nbr, bug fix?
  32+ E001 F5           	push	af									; save id for next few
  33+ E002 D5           	push	de
  34+ E003 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  35+ E006              ; write out X position bits 1 to 8
  36+ E006 79           	ld		a,c
  37+ E007 21 11 00         ld      hl,spritecursoroffset
  38+ E00A ED 31        	add		hl,a                                ; hl = full x position
  39+ E00C 7D           	ld		a,l
  40+ E00D ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  41+ E010              ; write out Y position bits 1 to 8
  42+ E010 EB           	ex		de,hl								; de = full x position
  43+ E011 78           	ld		a,b
  44+ E012 21 11 00         ld      hl,spritecursoroffset
  45+ E015 ED 31        	add		hl,a
  46+ E017 7D           	ld		a,l                                 ; hl = full y position
  47+ E018 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  48+ E01B              ; write out MSB of X as its an anchor
  49+ E01B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
  50+ E01C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  51+ E01F              ; write out sprite pattern
  52+ E01F D1           	pop		de                                  ; de = pattern and sprite nbr
  53+ E020 7B           	ld		a,e
  54+ E021 F6 C0        	or		%11000000							;
  55+ E023 ED 92 38     	nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  56+ E026              ; write out msb of y in h must be bit 0 only
  57+ E026 3E 00        	ld		a,%00000000							; big unified composite
  58+ E028 B4           	or		h									; MSB Y
  59+ E029 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  60+ E02C              .BigSprite1:
  61+ E02C F1           	pop		af
  62+ E02D 3C           	inc		a
  63+ E02E F5           	push	af
  64+ E02F ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  65+ E032 3E 10        	ld		a,16
  66+ E034 ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  67+ E037 AF           	xor 	a
  68+ E038 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  69+ E03B ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  70+ E03E 3E C1        	ld		a,%11000001							; relative and 4 bytes of data, pattern 1
  71+ E040 ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  72+ E043 3E 41        	ld		a,%01000001							; big unified composite
  73+ E045 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  74+ E048              .BigSprite2:
  75+ E048 F1           	pop		af
  76+ E049 3C           	inc		a
  77+ E04A ED 92 34     	nextreg		SPRITE_PORT_INDEX_REGISTER,a
  78+ E04D AF           	xor		a
  79+ E04E ED 92 35     	nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
  80+ E051 3E 10        	ld		a,16
  81+ E053 ED 92 36     	nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
  82+ E056 AF           	xor		a
  83+ E057 ED 92 37     	nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
  84+ E05A 3E C2        	ld		a,%11000010							; relative and 4 bytes of data, pattern 2
  85+ E05C ED 92 38     	nextreg		SPRITE_PORT_ATTR3_REGISTER,a
  86+ E05F 3E 41        	ld		a,%01000001							; big unified composite
  87+ E061 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  88+ E064 C9           	ret
  89+ E065
  90+ E065              sprite_galactic_cursor:
  91+ E065              ; ">sprite_galactic_cursor BC = rowcol"
  92+ E065 16 00        	ld		d,galactic_cursor_sprite
  93+ E067 1E 00        	ld		e,0
  94+ E069 78           	ld		a,b
  95+ E06A C6 18        	add		a,galactic_chart_y_offset
  96+ E06C 47           	ld		b,a
  97+ E06D CD 00 E0     	call	sprite_big
  97+ E070
  98+ E070 C9           	ret
  99+ E071
 100+ E071              sprite_galactic_hyper_cursor:
 101+ E071              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 102+ E071 78           	ld		a,b
 103+ E072 C6 18        	add		a,galactic_chart_y_offset
 104+ E074 47           	ld		b,a
 105+ E075 16 04        	ld		d,galactic_hyper_sprite
 106+ E077 1E 03        	ld		e,3
 107+ E079 CD 00 E0     	call	sprite_big
 107+ E07C
 108+ E07C C9           	ret
 109+ E07D
 110+ E07D              sprite_ghc_move:
 111+ E07D 3E 04        	ld		a,galactic_hyper_sprite
 112+ E07F ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 113+ E082              ; write out X position bits 1 to 8
 114+ E082 79           	ld		a,c
 115+ E083 21 11 00         ld      hl,spritecursoroffset
 116+ E086 ED 31        	add		hl,a                                ; hl = full x position
 117+ E088 7D           	ld		a,l
 118+ E089 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 119+ E08C              ; write out Y position bits 1 to 8
 120+ E08C EB           	ex		de,hl								; de = full x position
 121+ E08D 78               ld      a,b
 122+ E08E C6 18        	add		a,galactic_chart_y_offset
 123+ E090 47           	ld		b,a
 124+ E091 78           	ld		a,b
 125+ E092 21 11 00         ld      hl,spritecursoroffset
 126+ E095 ED 31        	add		hl,a
 127+ E097 7D           	ld		a,l                                 ; hl = full y position
 128+ E098 ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 129+ E09B              ; write out MSB of X as its an anchor
 130+ E09B 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 131+ E09C ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 132+ E09F              ; write out msb of y in h must be bit 0 only
 133+ E09F 3E 00        	ld		a,%00000000							; big unified composite
 134+ E0A1 B2           	or		d									; MSB Y
 135+ E0A2 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 136+ E0A5 C9               ret
 137+ E0A6
 138+ E0A6
 139+ E0A6              sprite_lhc_move:
 140+ E0A6              ;DBG:jp DBG
 141+ E0A6              ;DBX:
 142+ E0A6 3E 0A        	ld		a,local_hyper_sprite
 143+ E0A8 ED 92 34     	nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 144+ E0AB              ; write out X position bits 1 to 8
 145+ E0AB 79           	ld		a,c
 146+ E0AC 21 11 00         ld      hl,spritecursoroffset
 147+ E0AF ED 31        	add		hl,a                                ; hl = full x position
 148+ E0B1 7D           	ld		a,l
 149+ E0B2 ED 92 35     	nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 150+ E0B5              ; write out Y position bits 1 to 8
 151+ E0B5 EB           	ex		de,hl								; de = full x position
 152+ E0B6 78           	ld		a,b
 153+ E0B7 21 11 00         ld      hl,spritecursoroffset
 154+ E0BA ED 31        	add		hl,a
 155+ E0BC 7D           	ld		a,l                                 ; hl = full y position
 156+ E0BD ED 92 36     	nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 157+ E0C0              ; write out MSB of X as its an anchor
 158+ E0C0 7A           	ld		a,d									; de = MSB of X (hl bit 0)
 159+ E0C1 ED 92 37     	nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 160+ E0C4              ; write out msb of y in h must be bit 0 only
 161+ E0C4 3E 00        	ld		a,%00000000							; big unified composite
 162+ E0C6 B2           	or		d									; MSB Y
 163+ E0C7 ED 92 39     	nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 164+ E0CA C9               ret
 165+ E0CB
 166+ E0CB              sprite_local_cursor:
 167+ E0CB              ; "sprite_local_cursor BC = rowcol"
 168+ E0CB 16 07        	ld		d,local_cursor_sprite
 169+ E0CD 1E 06        	ld		e,6
 170+ E0CF CD 00 E0     	call	sprite_big
 171+ E0D2 C9           	ret
 172+ E0D3
 173+ E0D3              sprite_local_hyper_cursor:
 174+ E0D3              ; "sprite_local_hyper_cursor BC = rowcol"
 175+ E0D3 16 0A        	ld		d,local_hyper_sprite
 176+ E0D5 1E 09        	ld		e,9
 177+ E0D7 CD 00 E0     	call	sprite_big
 178+ E0DA C9           	ret
 179+ E0DB
 180+ E0DB
 181+ E0DB              sprite_galactic_hide:
 182+ E0DB ED 91 34 00  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 183+ E0DF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 184+ E0E3 ED 91 34 01  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 185+ E0E7 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 186+ E0EB ED 91 34 03  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 187+ E0EF ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 188+ E0F3 C9           	ret
 189+ E0F4
 190+ E0F4              sprite_galactic_hyper_hide:
 191+ E0F4 ED 91 34 04  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 192+ E0F8 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 193+ E0FC ED 91 34 05  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 194+ E100 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 195+ E104 ED 91 34 06  	nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 196+ E108 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 197+ E10C C9           	ret
 198+ E10D
 199+ E10D              sprite_local_hide:
 200+ E10D ED 91 34 07  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 201+ E111 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 202+ E115 ED 91 34 08  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 203+ E119 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 204+ E11D ED 91 34 09  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 205+ E121 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 206+ E125 C9           	ret
 207+ E126
 208+ E126              sprite_local_hyper_hide:
 209+ E126 ED 91 34 0A  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 210+ E12A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 211+ E12E ED 91 34 0B  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 212+ E132 ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 213+ E136 ED 91 34 0D  	nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 214+ E13A ED 91 38 00  	nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 215+ E13E C9           	ret
 216+ E13F
 217+ E13F              sprite_cls_cursors:
 218+ E13F CD DB E0     	call	sprite_galactic_hide
 219+ E142 CD F4 E0     	call	sprite_galactic_hyper_hide
 220+ E145 CD 0D E1     	call	sprite_local_hide
 221+ E148 CD 26 E1     	call	sprite_local_hyper_hide
 222+ E14B C9           	ret
 223+ E14C
 224+ E14C              init_sprites:
 225+ E14C CD 3F E1     	call		sprite_cls_cursors
 226+ E14F ED 91 15 63  	nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,$63
 227+ E153 C9           	ret
 228+ E154
# file closed: Layer3Sprites/sprite_routines.asm
 881  E154                  INCLUDE "sprite_load.asm"
# file opened: Layer3Sprites/sprite_load.asm
   1+ E154              sprite_load_sprite_data:
   2+ E154 01 3B 30     	ld			bc, $303B; SPRITE_SLOT_PORT
   3+ E157 AF           	xor			a
   4+ E158 ED 79        	out			(c),a							; Prime slot upload
   5+ E15A 11 00 0C     	ld			de,12	* 256						; nbr of sprites to upload
   6+ E15D 21 6B E1     	ld			hl,Sprite1						; sprites are stored contiguous
   7+ E160              SpriteLoadLoop:
   8+ E160 01 5B 00     	ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   9+ E163 ED 90        	outinb											; do final 256th sprite
  10+ E165 1B           	dec			de
  11+ E166 7A           	ld			a,d
  12+ E167 B3           	or			e
  13+ E168 20 F6        	jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  14+ E16A C9           	ret
  15+ E16B
# file closed: Layer3Sprites/sprite_load.asm
 882  E16B                  INCLUDE "SpriteSheet.asm"
# file opened: Layer3Sprites/SpriteSheet.asm
   1+ E16B              Sprite1:
   2+ E16B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E16F E3 E3 E3 E3
   2+ E173 E3 E3 E3 E3
   2+ E177 E3 E3 E3 E3
   3+ E17B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E17F E3 E3 E3 E3
   3+ E183 E3 E3 E3 E3
   3+ E187 E3 E3 E3 E3
   4+ E18B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E18F E3 E3 E3 E3
   4+ E193 E3 E3 E3 E3
   4+ E197 E3 E3 E3 E3
   5+ E19B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E19F E3 E3 E3 E3
   5+ E1A3 E3 E3 E3 E3
   5+ E1A7 E3 E3 E3 E3
   6+ E1AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E1AF E3 E3 E3 E3
   6+ E1B3 E3 E3 E3 E3
   6+ E1B7 E3 E3 E3 E3
   7+ E1BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E1BF E3 E3 E3 E3
   7+ E1C3 E3 E3 E3 E3
   7+ E1C7 E3 E3 E3 E3
   8+ E1CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E1CF E3 E3 E3 E3
   8+ E1D3 E3 E3 E3 E3
   8+ E1D7 E3 E3 E3 E3
   9+ E1DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E1DF E3 E3 E3 E3
   9+ E1E3 E3 E3 E3 E3
   9+ E1E7 E3 E3 E3 E3
  10+ E1EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E1EF E3 E3 E3 E3
  10+ E1F3 E3 E3 E3 E3
  10+ E1F7 E3 E3 E3 90
  11+ E1FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E1FF E3 E3 E3 E3
  11+ E203 E3 E3 E3 E3
  11+ E207 E3 E3 E3 B4
  12+ E20B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E20F E3 E3 E3 E3
  12+ E213 E3 E3 E3 E3
  12+ E217 E3 E3 E3 B4
  13+ E21B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E21F E3 E3 E3 E3
  13+ E223 E3 E3 E3 E3
  13+ E227 E3 E3 E3 D8
  14+ E22B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E22F E3 E3 E3 E3
  14+ E233 E3 E3 E3 E3
  14+ E237 E3 E3 E3 D8
  15+ E23B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E23F E3 E3 E3 E3
  15+ E243 E3 E3 E3 E3
  15+ E247 E3 E3 E3 FC
  16+ E24B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E24F E3 E3 E3 E3
  16+ E253 E3 E3 E3 E3
  16+ E257 E3 E3 E3 FC
  17+ E25B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E25F E3 E3 E3 E3
  17+ E263 90 B4 B4 D8
  17+ E267 D8 FC FC E3
  18+ E26B
  19+ E26B
  20+ E26B
  21+ E26B              Sprite2:
  22+ E26B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E26F E3 E3 E3 E3
  22+ E273 E3 E3 E3 E3
  22+ E277 E3 E3 E3 E3
  23+ E27B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E27F E3 E3 E3 E3
  23+ E283 E3 E3 E3 E3
  23+ E287 E3 E3 E3 E3
  24+ E28B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E28F E3 E3 E3 E3
  24+ E293 E3 E3 E3 E3
  24+ E297 E3 E3 E3 E3
  25+ E29B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E29F E3 E3 E3 E3
  25+ E2A3 E3 E3 E3 E3
  25+ E2A7 E3 E3 E3 E3
  26+ E2AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E2AF E3 E3 E3 E3
  26+ E2B3 E3 E3 E3 E3
  26+ E2B7 E3 E3 E3 E3
  27+ E2BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E2BF E3 E3 E3 E3
  27+ E2C3 E3 E3 E3 E3
  27+ E2C7 E3 E3 E3 E3
  28+ E2CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E2CF E3 E3 E3 E3
  28+ E2D3 E3 E3 E3 E3
  28+ E2D7 E3 E3 E3 E3
  29+ E2DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E2DF E3 E3 E3 E3
  29+ E2E3 E3 E3 E3 E3
  29+ E2E7 E3 E3 E3 E3
  30+ E2EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E2EF E3 E3 E3 E3
  30+ E2F3 E3 E3 E3 E3
  30+ E2F7 E3 E3 E3 E3
  31+ E2FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E2FF E3 E3 E3 E3
  31+ E303 E3 E3 E3 E3
  31+ E307 E3 E3 E3 E3
  32+ E30B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E30F E3 E3 E3 E3
  32+ E313 E3 E3 E3 E3
  32+ E317 E3 E3 E3 E3
  33+ E31B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E31F E3 E3 E3 E3
  33+ E323 E3 E3 E3 E3
  33+ E327 E3 E3 E3 E3
  34+ E32B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E32F E3 E3 E3 E3
  34+ E333 E3 E3 E3 E3
  34+ E337 E3 E3 E3 E3
  35+ E33B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E33F E3 E3 E3 E3
  35+ E343 E3 E3 E3 E3
  35+ E347 E3 E3 E3 E3
  36+ E34B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E34F E3 E3 E3 E3
  36+ E353 E3 E3 E3 E3
  36+ E357 E3 E3 E3 E3
  37+ E35B FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E35F B4 B4 90 E3
  37+ E363 E3 E3 E3 E3
  37+ E367 E3 E3 E3 E3
  38+ E36B
  39+ E36B
  40+ E36B
  41+ E36B              Sprite3:
  42+ E36B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E36F E3 E3 E3 E3
  42+ E373 E3 E3 E3 E3
  42+ E377 E3 E3 E3 FC
  43+ E37B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E37F E3 E3 E3 E3
  43+ E383 E3 E3 E3 E3
  43+ E387 E3 E3 E3 FC
  44+ E38B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E38F E3 E3 E3 E3
  44+ E393 E3 E3 E3 E3
  44+ E397 E3 E3 E3 D8
  45+ E39B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E39F E3 E3 E3 E3
  45+ E3A3 E3 E3 E3 E3
  45+ E3A7 E3 E3 E3 D8
  46+ E3AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E3AF E3 E3 E3 E3
  46+ E3B3 E3 E3 E3 E3
  46+ E3B7 E3 E3 E3 B4
  47+ E3BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E3BF E3 E3 E3 E3
  47+ E3C3 E3 E3 E3 E3
  47+ E3C7 E3 E3 E3 B4
  48+ E3CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E3CF E3 E3 E3 E3
  48+ E3D3 E3 E3 E3 E3
  48+ E3D7 E3 E3 E3 90
  49+ E3DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E3DF E3 E3 E3 E3
  49+ E3E3 E3 E3 E3 E3
  49+ E3E7 E3 E3 E3 E3
  50+ E3EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E3EF E3 E3 E3 E3
  50+ E3F3 E3 E3 E3 E3
  50+ E3F7 E3 E3 E3 E3
  51+ E3FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E3FF E3 E3 E3 E3
  51+ E403 E3 E3 E3 E3
  51+ E407 E3 E3 E3 E3
  52+ E40B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E40F E3 E3 E3 E3
  52+ E413 E3 E3 E3 E3
  52+ E417 E3 E3 E3 E3
  53+ E41B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E41F E3 E3 E3 E3
  53+ E423 E3 E3 E3 E3
  53+ E427 E3 E3 E3 E3
  54+ E42B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E42F E3 E3 E3 E3
  54+ E433 E3 E3 E3 E3
  54+ E437 E3 E3 E3 E3
  55+ E43B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E43F E3 E3 E3 E3
  55+ E443 E3 E3 E3 E3
  55+ E447 E3 E3 E3 E3
  56+ E44B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E44F E3 E3 E3 E3
  56+ E453 E3 E3 E3 E3
  56+ E457 E3 E3 E3 E3
  57+ E45B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E45F E3 E3 E3 E3
  57+ E463 E3 E3 E3 E3
  57+ E467 E3 E3 E3 E3
  58+ E46B
  59+ E46B
  60+ E46B
  61+ E46B              Sprite4:
  62+ E46B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E46F E3 E3 E3 E3
  62+ E473 E3 E3 E3 E3
  62+ E477 E3 E3 E3 E3
  63+ E47B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E47F E3 E3 E3 E3
  63+ E483 E3 E3 E3 E3
  63+ E487 E3 E3 E3 E3
  64+ E48B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E48F E3 E3 E3 E3
  64+ E493 E3 E3 E3 E3
  64+ E497 E3 E3 E3 E3
  65+ E49B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E49F E3 E3 E3 E3
  65+ E4A3 E3 E3 E3 E3
  65+ E4A7 E3 E3 E3 E3
  66+ E4AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E4AF E3 E3 E3 E3
  66+ E4B3 E3 E3 E3 E3
  66+ E4B7 E3 E3 E3 E3
  67+ E4BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E4BF E3 E3 E3 E3
  67+ E4C3 E3 E3 E3 E3
  67+ E4C7 E3 E3 E3 E3
  68+ E4CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E4CF E3 E3 E3 E3
  68+ E4D3 E3 E3 E3 E3
  68+ E4D7 E3 E3 E3 E3
  69+ E4DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E4DF E3 E3 E3 E3
  69+ E4E3 E3 E3 E3 E3
  69+ E4E7 E3 E3 E3 E3
  70+ E4EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E4EF E3 E3 E3 E3
  70+ E4F3 E3 E3 E3 E3
  70+ E4F7 E3 E3 E3 E3
  71+ E4FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E4FF E3 E3 E3 E3
  71+ E503 E3 E3 E3 E3
  71+ E507 E3 E3 E3 E3
  72+ E50B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E50F E3 E3 E3 E3
  72+ E513 E3 E3 E3 E3
  72+ E517 E3 E3 E3 E3
  73+ E51B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
  73+ E51F E3 E3 E3 E3
  73+ E523 E3 E3 E3 E3
  73+ E527 E3 E3 E3 12
  74+ E52B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
  74+ E52F E3 E3 E3 E3
  74+ E533 E3 E3 E3 E3
  74+ E537 E3 E3 E3 16
  75+ E53B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
  75+ E53F E3 E3 E3 E3
  75+ E543 E3 E3 E3 E3
  75+ E547 E3 E3 E3 1A
  76+ E54B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
  76+ E54F E3 E3 E3 E3
  76+ E553 E3 E3 E3 E3
  76+ E557 E3 E3 E3 1F
  77+ E55B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12, $16, $1A, $1F, $E3;
  77+ E55F E3 E3 E3 E3
  77+ E563 E3 E3 E3 12
  77+ E567 16 1A 1F E3
  78+ E56B
  79+ E56B
  80+ E56B
  81+ E56B              Sprite5:
  82+ E56B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E56F E3 E3 E3 E3
  82+ E573 E3 E3 E3 E3
  82+ E577 E3 E3 E3 E3
  83+ E57B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  83+ E57F E3 E3 E3 E3
  83+ E583 E3 E3 E3 E3
  83+ E587 E3 E3 E3 E3
  84+ E58B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  84+ E58F E3 E3 E3 E3
  84+ E593 E3 E3 E3 E3
  84+ E597 E3 E3 E3 E3
  85+ E59B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  85+ E59F E3 E3 E3 E3
  85+ E5A3 E3 E3 E3 E3
  85+ E5A7 E3 E3 E3 E3
  86+ E5AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  86+ E5AF E3 E3 E3 E3
  86+ E5B3 E3 E3 E3 E3
  86+ E5B7 E3 E3 E3 E3
  87+ E5BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  87+ E5BF E3 E3 E3 E3
  87+ E5C3 E3 E3 E3 E3
  87+ E5C7 E3 E3 E3 E3
  88+ E5CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  88+ E5CF E3 E3 E3 E3
  88+ E5D3 E3 E3 E3 E3
  88+ E5D7 E3 E3 E3 E3
  89+ E5DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  89+ E5DF E3 E3 E3 E3
  89+ E5E3 E3 E3 E3 E3
  89+ E5E7 E3 E3 E3 E3
  90+ E5EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  90+ E5EF E3 E3 E3 E3
  90+ E5F3 E3 E3 E3 E3
  90+ E5F7 E3 E3 E3 E3
  91+ E5FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  91+ E5FF E3 E3 E3 E3
  91+ E603 E3 E3 E3 E3
  91+ E607 E3 E3 E3 E3
  92+ E60B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  92+ E60F E3 E3 E3 E3
  92+ E613 E3 E3 E3 E3
  92+ E617 E3 E3 E3 E3
  93+ E61B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  93+ E61F E3 E3 E3 E3
  93+ E623 E3 E3 E3 E3
  93+ E627 E3 E3 E3 E3
  94+ E62B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  94+ E62F E3 E3 E3 E3
  94+ E633 E3 E3 E3 E3
  94+ E637 E3 E3 E3 E3
  95+ E63B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  95+ E63F E3 E3 E3 E3
  95+ E643 E3 E3 E3 E3
  95+ E647 E3 E3 E3 E3
  96+ E64B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  96+ E64F E3 E3 E3 E3
  96+ E653 E3 E3 E3 E3
  96+ E657 E3 E3 E3 E3
  97+ E65B 1F 1A 16 12  	db  $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  97+ E65F E3 E3 E3 E3
  97+ E663 E3 E3 E3 E3
  97+ E667 E3 E3 E3 E3
  98+ E66B
  99+ E66B
 100+ E66B
 101+ E66B              Sprite6:
 102+ E66B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1F;
 102+ E66F E3 E3 E3 E3
 102+ E673 E3 E3 E3 E3
 102+ E677 E3 E3 E3 1F
 103+ E67B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1A;
 103+ E67F E3 E3 E3 E3
 103+ E683 E3 E3 E3 E3
 103+ E687 E3 E3 E3 1A
 104+ E68B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $16;
 104+ E68F E3 E3 E3 E3
 104+ E693 E3 E3 E3 E3
 104+ E697 E3 E3 E3 16
 105+ E69B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $12;
 105+ E69F E3 E3 E3 E3
 105+ E6A3 E3 E3 E3 E3
 105+ E6A7 E3 E3 E3 12
 106+ E6AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E6AF E3 E3 E3 E3
 106+ E6B3 E3 E3 E3 E3
 106+ E6B7 E3 E3 E3 E3
 107+ E6BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E6BF E3 E3 E3 E3
 107+ E6C3 E3 E3 E3 E3
 107+ E6C7 E3 E3 E3 E3
 108+ E6CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E6CF E3 E3 E3 E3
 108+ E6D3 E3 E3 E3 E3
 108+ E6D7 E3 E3 E3 E3
 109+ E6DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E6DF E3 E3 E3 E3
 109+ E6E3 E3 E3 E3 E3
 109+ E6E7 E3 E3 E3 E3
 110+ E6EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E6EF E3 E3 E3 E3
 110+ E6F3 E3 E3 E3 E3
 110+ E6F7 E3 E3 E3 E3
 111+ E6FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E6FF E3 E3 E3 E3
 111+ E703 E3 E3 E3 E3
 111+ E707 E3 E3 E3 E3
 112+ E70B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ E70F E3 E3 E3 E3
 112+ E713 E3 E3 E3 E3
 112+ E717 E3 E3 E3 E3
 113+ E71B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ E71F E3 E3 E3 E3
 113+ E723 E3 E3 E3 E3
 113+ E727 E3 E3 E3 E3
 114+ E72B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ E72F E3 E3 E3 E3
 114+ E733 E3 E3 E3 E3
 114+ E737 E3 E3 E3 E3
 115+ E73B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ E73F E3 E3 E3 E3
 115+ E743 E3 E3 E3 E3
 115+ E747 E3 E3 E3 E3
 116+ E74B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ E74F E3 E3 E3 E3
 116+ E753 E3 E3 E3 E3
 116+ E757 E3 E3 E3 E3
 117+ E75B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 117+ E75F E3 E3 E3 E3
 117+ E763 E3 E3 E3 E3
 117+ E767 E3 E3 E3 E3
 118+ E76B
 119+ E76B
 120+ E76B
 121+ E76B              Sprite7:
 122+ E76B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 122+ E76F E3 E3 E3 E3
 122+ E773 E3 E3 E3 E3
 122+ E777 E3 E3 E3 E3
 123+ E77B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 123+ E77F E3 E3 E3 E3
 123+ E783 E3 E3 E3 E3
 123+ E787 E3 E3 E3 09
 124+ E78B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 124+ E78F E3 E3 E3 E3
 124+ E793 E3 E3 E3 E3
 124+ E797 E3 E3 E3 09
 125+ E79B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 125+ E79F E3 E3 E3 E3
 125+ E7A3 E3 E3 E3 E3
 125+ E7A7 E3 E3 E3 2C
 126+ E7AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 126+ E7AF E3 E3 E3 E3
 126+ E7B3 E3 E3 E3 E3
 126+ E7B7 E3 E3 E3 2C
 127+ E7BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 127+ E7BF E3 E3 E3 E3
 127+ E7C3 E3 E3 E3 E3
 127+ E7C7 E3 E3 E3 50
 128+ E7CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 128+ E7CF E3 E3 E3 E3
 128+ E7D3 E3 E3 E3 E3
 128+ E7D7 E3 E3 E3 50
 129+ E7DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ E7DF E3 E3 E3 E3
 129+ E7E3 E3 E3 E3 E3
 129+ E7E7 E3 E3 E3 50
 130+ E7EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 130+ E7EF E3 E3 E3 E3
 130+ E7F3 E3 E3 E3 E3
 130+ E7F7 E3 E3 E3 15
 131+ E7FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 131+ E7FF E3 E3 E3 E3
 131+ E803 E3 E3 E3 E3
 131+ E807 E3 E3 E3 15
 132+ E80B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 132+ E80F E3 E3 E3 E3
 132+ E813 E3 E3 E3 E3
 132+ E817 E3 E3 E3 15
 133+ E81B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 133+ E81F E3 E3 E3 E3
 133+ E823 E3 E3 E3 E3
 133+ E827 E3 E3 E3 7C
 134+ E82B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 134+ E82F E3 E3 E3 E3
 134+ E833 E3 E3 E3 E3
 134+ E837 E3 E3 E3 7C
 135+ E83B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 135+ E83F E3 E3 E3 E3
 135+ E843 E3 E3 E3 E3
 135+ E847 E3 E3 E3 7C
 136+ E84B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 136+ E84F E3 E3 E3 E3
 136+ E853 E3 E3 E3 E3
 136+ E857 E3 E3 E3 7C
 137+ E85B E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
 137+ E85F 2C 50 50 50
 137+ E863 15 15 15 7C
 137+ E867 7C 7C 7C E3
 138+ E86B
 139+ E86B
 140+ E86B
 141+ E86B              Sprite8:
 142+ E86B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ E86F E3 E3 E3 E3
 142+ E873 E3 E3 E3 E3
 142+ E877 E3 E3 E3 E3
 143+ E87B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 143+ E87F E3 E3 E3 E3
 143+ E883 E3 E3 E3 E3
 143+ E887 E3 E3 E3 E3
 144+ E88B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 144+ E88F E3 E3 E3 E3
 144+ E893 E3 E3 E3 E3
 144+ E897 E3 E3 E3 E3
 145+ E89B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 145+ E89F E3 E3 E3 E3
 145+ E8A3 E3 E3 E3 E3
 145+ E8A7 E3 E3 E3 E3
 146+ E8AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 146+ E8AF E3 E3 E3 E3
 146+ E8B3 E3 E3 E3 E3
 146+ E8B7 E3 E3 E3 E3
 147+ E8BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 147+ E8BF E3 E3 E3 E3
 147+ E8C3 E3 E3 E3 E3
 147+ E8C7 E3 E3 E3 E3
 148+ E8CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 148+ E8CF E3 E3 E3 E3
 148+ E8D3 E3 E3 E3 E3
 148+ E8D7 E3 E3 E3 E3
 149+ E8DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 149+ E8DF E3 E3 E3 E3
 149+ E8E3 E3 E3 E3 E3
 149+ E8E7 E3 E3 E3 E3
 150+ E8EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 150+ E8EF E3 E3 E3 E3
 150+ E8F3 E3 E3 E3 E3
 150+ E8F7 E3 E3 E3 E3
 151+ E8FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 151+ E8FF E3 E3 E3 E3
 151+ E903 E3 E3 E3 E3
 151+ E907 E3 E3 E3 E3
 152+ E90B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 152+ E90F E3 E3 E3 E3
 152+ E913 E3 E3 E3 E3
 152+ E917 E3 E3 E3 E3
 153+ E91B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 153+ E91F E3 E3 E3 E3
 153+ E923 E3 E3 E3 E3
 153+ E927 E3 E3 E3 E3
 154+ E92B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 154+ E92F E3 E3 E3 E3
 154+ E933 E3 E3 E3 E3
 154+ E937 E3 E3 E3 E3
 155+ E93B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 155+ E93F E3 E3 E3 E3
 155+ E943 E3 E3 E3 E3
 155+ E947 E3 E3 E3 E3
 156+ E94B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 156+ E94F E3 E3 E3 E3
 156+ E953 E3 E3 E3 E3
 156+ E957 E3 E3 E3 E3
 157+ E95B 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 157+ E95F 15 15 15 50
 157+ E963 50 50 2C 2C
 157+ E967 09 09 E3 E3
 158+ E96B
 159+ E96B
 160+ E96B
 161+ E96B              Sprite9:
 162+ E96B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 162+ E96F E3 E3 E3 E3
 162+ E973 E3 E3 E3 E3
 162+ E977 E3 E3 E3 7C
 163+ E97B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 163+ E97F E3 E3 E3 E3
 163+ E983 E3 E3 E3 E3
 163+ E987 E3 E3 E3 7C
 164+ E98B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 164+ E98F E3 E3 E3 E3
 164+ E993 E3 E3 E3 E3
 164+ E997 E3 E3 E3 7C
 165+ E99B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 165+ E99F E3 E3 E3 E3
 165+ E9A3 E3 E3 E3 E3
 165+ E9A7 E3 E3 E3 7C
 166+ E9AB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 166+ E9AF E3 E3 E3 E3
 166+ E9B3 E3 E3 E3 E3
 166+ E9B7 E3 E3 E3 15
 167+ E9BB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 167+ E9BF E3 E3 E3 E3
 167+ E9C3 E3 E3 E3 E3
 167+ E9C7 E3 E3 E3 15
 168+ E9CB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 168+ E9CF E3 E3 E3 E3
 168+ E9D3 E3 E3 E3 E3
 168+ E9D7 E3 E3 E3 15
 169+ E9DB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 169+ E9DF E3 E3 E3 E3
 169+ E9E3 E3 E3 E3 E3
 169+ E9E7 E3 E3 E3 50
 170+ E9EB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 170+ E9EF E3 E3 E3 E3
 170+ E9F3 E3 E3 E3 E3
 170+ E9F7 E3 E3 E3 50
 171+ E9FB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 171+ E9FF E3 E3 E3 E3
 171+ EA03 E3 E3 E3 E3
 171+ EA07 E3 E3 E3 50
 172+ EA0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 172+ EA0F E3 E3 E3 E3
 172+ EA13 E3 E3 E3 E3
 172+ EA17 E3 E3 E3 2C
 173+ EA1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 173+ EA1F E3 E3 E3 E3
 173+ EA23 E3 E3 E3 E3
 173+ EA27 E3 E3 E3 2C
 174+ EA2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 174+ EA2F E3 E3 E3 E3
 174+ EA33 E3 E3 E3 E3
 174+ EA37 E3 E3 E3 09
 175+ EA3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 175+ EA3F E3 E3 E3 E3
 175+ EA43 E3 E3 E3 E3
 175+ EA47 E3 E3 E3 09
 176+ EA4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EA4F E3 E3 E3 E3
 176+ EA53 E3 E3 E3 E3
 176+ EA57 E3 E3 E3 E3
 177+ EA5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 177+ EA5F E3 E3 E3 E3
 177+ EA63 E3 E3 E3 E3
 177+ EA67 E3 E3 E3 E3
 178+ EA6B
 179+ EA6B
 180+ EA6B
 181+ EA6B              Sprite10:
 182+ EA6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 182+ EA6F E3 E3 E3 E3
 182+ EA73 E3 E3 E3 E3
 182+ EA77 E3 E3 E3 E3
 183+ EA7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 183+ EA7F E3 E3 E3 E3
 183+ EA83 E3 E3 E3 E3
 183+ EA87 E3 E3 E3 44
 184+ EA8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 184+ EA8F E3 E3 E3 E3
 184+ EA93 E3 E3 E3 E3
 184+ EA97 E3 E3 E3 64
 185+ EA9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 185+ EA9F E3 E3 E3 E3
 185+ EAA3 E3 E3 E3 E3
 185+ EAA7 E3 E3 E3 64
 186+ EAAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 186+ EAAF E3 E3 E3 E3
 186+ EAB3 E3 E3 E3 E3
 186+ EAB7 E3 E3 E3 64
 187+ EABB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 187+ EABF E3 E3 E3 E3
 187+ EAC3 E3 E3 E3 E3
 187+ EAC7 E3 E3 E3 A8
 188+ EACB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 188+ EACF E3 E3 E3 E3
 188+ EAD3 E3 E3 E3 E3
 188+ EAD7 E3 E3 E3 A8
 189+ EADB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EADF E3 E3 E3 E3
 189+ EAE3 E3 E3 E3 E3
 189+ EAE7 E3 E3 E3 A8
 190+ EAEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 190+ EAEF E3 E3 E3 E3
 190+ EAF3 E3 E3 E3 E3
 190+ EAF7 E3 E3 E3 CC
 191+ EAFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 191+ EAFF E3 E3 E3 E3
 191+ EB03 E3 E3 E3 E3
 191+ EB07 E3 E3 E3 CC
 192+ EB0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 192+ EB0F E3 E3 E3 E3
 192+ EB13 E3 E3 E3 E3
 192+ EB17 E3 E3 E3 CC
 193+ EB1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 193+ EB1F E3 E3 E3 E3
 193+ EB23 E3 E3 E3 E3
 193+ EB27 E3 E3 E3 EC
 194+ EB2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 194+ EB2F E3 E3 E3 E3
 194+ EB33 E3 E3 E3 E3
 194+ EB37 E3 E3 E3 EC
 195+ EB3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 195+ EB3F E3 E3 E3 E3
 195+ EB43 E3 E3 E3 E3
 195+ EB47 E3 E3 E3 EC
 196+ EB4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 196+ EB4F E3 E3 E3 E3
 196+ EB53 E3 E3 E3 E3
 196+ EB57 E3 E3 E3 EC
 197+ EB5B E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 197+ EB5F 64 A8 A8 A8
 197+ EB63 CC CC CC EC
 197+ EB67 EC EC EC E3
 198+ EB6B
 199+ EB6B
 200+ EB6B
 201+ EB6B              Sprite11:
 202+ EB6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EB6F E3 E3 E3 E3
 202+ EB73 E3 E3 E3 E3
 202+ EB77 E3 E3 E3 E3
 203+ EB7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EB7F E3 E3 E3 E3
 203+ EB83 E3 E3 E3 E3
 203+ EB87 E3 E3 E3 E3
 204+ EB8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EB8F E3 E3 E3 E3
 204+ EB93 E3 E3 E3 E3
 204+ EB97 E3 E3 E3 E3
 205+ EB9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EB9F E3 E3 E3 E3
 205+ EBA3 E3 E3 E3 E3
 205+ EBA7 E3 E3 E3 E3
 206+ EBAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EBAF E3 E3 E3 E3
 206+ EBB3 E3 E3 E3 E3
 206+ EBB7 E3 E3 E3 E3
 207+ EBBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EBBF E3 E3 E3 E3
 207+ EBC3 E3 E3 E3 E3
 207+ EBC7 E3 E3 E3 E3
 208+ EBCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EBCF E3 E3 E3 E3
 208+ EBD3 E3 E3 E3 E3
 208+ EBD7 E3 E3 E3 E3
 209+ EBDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EBDF E3 E3 E3 E3
 209+ EBE3 E3 E3 E3 E3
 209+ EBE7 E3 E3 E3 E3
 210+ EBEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EBEF E3 E3 E3 E3
 210+ EBF3 E3 E3 E3 E3
 210+ EBF7 E3 E3 E3 E3
 211+ EBFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EBFF E3 E3 E3 E3
 211+ EC03 E3 E3 E3 E3
 211+ EC07 E3 E3 E3 E3
 212+ EC0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EC0F E3 E3 E3 E3
 212+ EC13 E3 E3 E3 E3
 212+ EC17 E3 E3 E3 E3
 213+ EC1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EC1F E3 E3 E3 E3
 213+ EC23 E3 E3 E3 E3
 213+ EC27 E3 E3 E3 E3
 214+ EC2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EC2F E3 E3 E3 E3
 214+ EC33 E3 E3 E3 E3
 214+ EC37 E3 E3 E3 E3
 215+ EC3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EC3F E3 E3 E3 E3
 215+ EC43 E3 E3 E3 E3
 215+ EC47 E3 E3 E3 E3
 216+ EC4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EC4F E3 E3 E3 E3
 216+ EC53 E3 E3 E3 E3
 216+ EC57 E3 E3 E3 E3
 217+ EC5B EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 217+ EC5F CC CC CC A8
 217+ EC63 A8 A8 64 64
 217+ EC67 64 44 E3 E3
 218+ EC6B
 219+ EC6B
 220+ EC6B
 221+ EC6B              Sprite12:
 222+ EC6B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 222+ EC6F E3 E3 E3 E3
 222+ EC73 E3 E3 E3 E3
 222+ EC77 E3 E3 E3 EC
 223+ EC7B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 223+ EC7F E3 E3 E3 E3
 223+ EC83 E3 E3 E3 E3
 223+ EC87 E3 E3 E3 EC
 224+ EC8B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 224+ EC8F E3 E3 E3 E3
 224+ EC93 E3 E3 E3 E3
 224+ EC97 E3 E3 E3 EC
 225+ EC9B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 225+ EC9F E3 E3 E3 E3
 225+ ECA3 E3 E3 E3 E3
 225+ ECA7 E3 E3 E3 EC
 226+ ECAB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 226+ ECAF E3 E3 E3 E3
 226+ ECB3 E3 E3 E3 E3
 226+ ECB7 E3 E3 E3 CC
 227+ ECBB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 227+ ECBF E3 E3 E3 E3
 227+ ECC3 E3 E3 E3 E3
 227+ ECC7 E3 E3 E3 CC
 228+ ECCB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 228+ ECCF E3 E3 E3 E3
 228+ ECD3 E3 E3 E3 E3
 228+ ECD7 E3 E3 E3 CC
 229+ ECDB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 229+ ECDF E3 E3 E3 E3
 229+ ECE3 E3 E3 E3 E3
 229+ ECE7 E3 E3 E3 A8
 230+ ECEB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 230+ ECEF E3 E3 E3 E3
 230+ ECF3 E3 E3 E3 E3
 230+ ECF7 E3 E3 E3 A8
 231+ ECFB E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 231+ ECFF E3 E3 E3 E3
 231+ ED03 E3 E3 E3 E3
 231+ ED07 E3 E3 E3 A8
 232+ ED0B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 232+ ED0F E3 E3 E3 E3
 232+ ED13 E3 E3 E3 E3
 232+ ED17 E3 E3 E3 64
 233+ ED1B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 233+ ED1F E3 E3 E3 E3
 233+ ED23 E3 E3 E3 E3
 233+ ED27 E3 E3 E3 64
 234+ ED2B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 234+ ED2F E3 E3 E3 E3
 234+ ED33 E3 E3 E3 E3
 234+ ED37 E3 E3 E3 64
 235+ ED3B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 235+ ED3F E3 E3 E3 E3
 235+ ED43 E3 E3 E3 E3
 235+ ED47 E3 E3 E3 44
 236+ ED4B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ ED4F E3 E3 E3 E3
 236+ ED53 E3 E3 E3 E3
 236+ ED57 E3 E3 E3 E3
 237+ ED5B E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ ED5F E3 E3 E3 E3
 237+ ED63 E3 E3 E3 E3
 237+ ED67 E3 E3 E3 E3
 238+ ED6B
# file closed: Layer3Sprites/SpriteSheet.asm
 883  ED6B              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 884  ED6B                  SLOT    ConsoleImageAddr
 885  ED6B                  PAGE    BankConsole
 886  ED6B              	ORG     ConsoleImageAddr, BankConsole
 887  E000
 888  E000                  INCLUDE "ConsoleImageData.asm"
# file opened: Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 00 00
  67+ E808 00 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 00 00
  68+ E828 00 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 00 00
  69+ E848 00 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
# file closed: Images/ConsoleImageData.asm
 889  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 890  E900                  SLOT    ViewFrontAddr
 891  E900                  PAGE    BankFrontView
 892  E900                  ORG     ViewFrontAddr
 893  C000                  INCLUDE "Views/Front_View.asm"
# file opened: Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010
   4+ C010              draw_front_view:        MMUSelectLayer1
   4+ C010 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   5+ C014 CD 47 E0                             call    l1_cls
   6+ C017 CD 52 E0                             call    l1_attr_cls
   7+ C01A                                      MMUSelectLayer2
   7+ C01A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   8+ C01E CD 02 E0                             call     asm_l2_double_buffer_on
   9+ C021                                      MMUSelectSpriteBank
   9+ C021 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10+ C025 CD 3F E1                             call    sprite_cls_cursors
  11+ C028                                      MMUSelectConsoleBank
  11+ C028 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  12+ C02C 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  13+ C02F 11 00 E0                             ld          de,ConsoleImageData
  14+ C032 01 00 08                             ld          bc, ScreenL1BottomLen
  15+ C035 CD 5F 8E                             call        memcopy_dma
  16+ C038 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  17+ C03B 11 00 E8                             ld          de,ConsoleAttributes
  18+ C03E 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  19+ C041 CD 5F 8E                             call        memcopy_dma
  20+ C044 CD C6 8A                             call        InitialiseStars
  21+ C047 AF                                   xor         a
  22+ C048 32 43 92                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  23+ C04B C9                                   ret
  24+ C04C
  25+ C04C              dampenRate:             equ     $04
  26+ C04C 04           dampenRcounter:         DB      dampenRate
  27+ C04D 04           dampenPcounter:         DB      dampenRate
  28+ C04E AF           input_front_view:       xor         a
  29+ C04F 2A C4 8E                             ld      hl,(addr_Pressed_Accellerate)
  30+ C052 7E                                   ld      a,(hl)
  31+ C053                                      IfAIsZeroGoto     TestDecellerate
  31+ C053 FE 00       >				cp	0
  31+ C055 CA 71 C0    >				jp	z,TestDecellerate
  32+ C058 3A 2C 92                             ld      a,(SHIPMAXSPEED)
  33+ C05B 57                                   ld      d,a
  34+ C05C 3A 2D 92                             ld      a,(DELTA)
  35+ C05F                                      JumpIfAGTENusng d,TestDecellerate
  35+ C05F BA          >                        cp     d
  35+ C060 D2 71 C0    >                        jp		nc,TestDecellerate
  36+ C063 3C                                   inc     a
  37+ C064 32 2D 92                             ld      (DELTA),a
  38+ C067 2A 2E 92                             ld      hl,(DELT4Lo)
  39+ C06A ED 34 04 00                          add     hl,4
  40+ C06E 22 2E 92                             ld      (DELT4Lo),hl
  41+ C071 2A C6 8E     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
  42+ C074 7E                                   ld      a,(hl)
  43+ C075                                      IfAIsZeroGoto   TestLeftPressed
  43+ C075 FE 00       >				cp	0
  43+ C077 CA 90 C0    >				jp	z,TestLeftPressed
  44+ C07A 3A 2D 92                             ld      a,(DELTA)
  45+ C07D                                      IfAIsZeroGoto   TestLeftPressed
  45+ C07D FE 00       >				cp	0
  45+ C07F CA 90 C0    >				jp	z,TestLeftPressed
  46+ C082 3D                                   dec     a
  47+ C083 32 2D 92                             ld      (DELTA),a
  48+ C086 2A 2E 92                             ld      hl,(DELT4Lo)
  49+ C089 2B                                   dec     hl
  50+ C08A 2B                                   dec     hl
  51+ C08B 2B                                   dec     hl
  52+ C08C 2B                                   dec     hl
  53+ C08D 22 2E 92                             ld      (DELT4Lo),hl
  54+ C090 2A BC 8E     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
  55+ C093 7E                                   ld      a,(hl)
  56+ C094                                      IfAIsZeroGoto   TestRightPressed
  56+ C094 FE 00       >				cp	0
  56+ C096 CA C8 C0    >				jp	z,TestRightPressed
  57+ C099 3A EA 91                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  58+ C09C 21 F0 91                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
  59+ C09F BE                                   cp      (hl)
  60+ C0A0 28 26                                jr      z,TestRightPressed
  61+ C0A2                                      ;break
  62+ C0A2 3D                                   dec     a                                   ; increase joystick roll
  63+ C0A3 32 EA 91                             ld      (JSTX),a
  64+ C0A6 47                                   ld      b,a                                 ; b = current roll
  65+ C0A7 E6 80                                and     $80                                 ; a= sign of current rol
  66+ C0A9 32 ED 91                             ld      (ALP2),a                            ; set sign
  67+ C0AC EE 80                                xor     $80
  68+ C0AE 32 EE 91                             ld      (ALP2FLIP),a                        ; and oppsite sign
  69+ C0B1 3A EA 91                             ld      a,(JSTX)
  70+ C0B4                                      JumpOnBitClear a,7,.PositiveRoll
  70+ C0B4 CB 7F       >                        bit 	7,a
  70+ C0B6 CA BB C0    >                        jp      z,.PositiveRoll
  71+ C0B9 ED 44        .NegativeRoll:          neg
  72+ C0BB CB 3F        .PositiveRoll           srl     a
  73+ C0BD CB 3F                                srl     a
  74+ C0BF FE 08                                cp      8
  75+ C0C1 38 02                                jr      c,.NotIncreasedDamp
  76+ C0C3 CB 3F        .IncreasedDamp          srl     a
  77+ C0C5 32 EC 91     .NotIncreasedDamp:      ld      (ALP1),a
  78+ C0C8 2A BE 8E     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
  79+ C0CB 7E                                   ld      a,(hl)
  80+ C0CC                                      IfAIsZeroGoto   .DampenRoll
  80+ C0CC FE 00       >				cp	0
  80+ C0CE CA 02 C1    >				jp	z,.DampenRoll
  81+ C0D1 3A EA 91                             ld      a,(JSTX)                            ; have we maxed out Joystick?
  82+ C0D4 21 EF 91                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
  83+ C0D7 BE                                   cp      (hl)
  84+ C0D8 28 42                                jr      z,TestDivePressed                   ; if its held then we don't dampen
  85+ C0DA                                      ;break
  86+ C0DA 3C                                   inc     a                                   ; increase joystick roll
  87+ C0DB 32 EA 91     .UpdateAlphRoll:        ld      (JSTX),a
  88+ C0DE 47                                   ld      b,a                                 ; b = current roll
  89+ C0DF E6 80                                and     $80                                 ; a= sign of current rol
  90+ C0E1 32 ED 91                             ld      (ALP2),a                            ; set sign
  91+ C0E4 EE 80                                xor     $80
  92+ C0E6 32 EE 91                             ld      (ALP2FLIP),a                        ; and oppsite sign
  93+ C0E9 3A EA 91                             ld      a,(JSTX)
  94+ C0EC ED 27 80                             test    $80
  95+ C0EF 28 02                                jr      z,  .PositiveRoll
  96+ C0F1 ED 44        .NegativeRoll:          neg
  97+ C0F3 CB 3F        .PositiveRoll           srl     a
  98+ C0F5 CB 3F                                srl     a
  99+ C0F7 FE 08                                cp      8
 100+ C0F9 38 02                                jr      c,.NotIncreasedDamp
 101+ C0FB CB 3F        .IncreasedDamp          srl     a
 102+ C0FD 32 EC 91     .NotIncreasedDamp:      ld      (ALP1),a
 103+ C100 18 1A                                jr      TestDivePressed
 104+ C102 21 4C C0     .DampenRoll:            ld      hl,dampenRcounter
 105+ C105 35                                   dec     (hl)
 106+ C106 20 14                                jr      nz,TestDivePressed
 107+ C108 3E 04                                ld      a,dampenRate
 108+ C10A 77                                   ld      (hl),a
 109+ C10B 3A EA 91                             ld      a,(JSTX)
 110+ C10E FE 00                                cp      0
 111+ C110 28 0A                                jr      z, TestDivePressed
 112+ C112 CB 7F                                bit     7,a
 113+ C114 28 03                                jr      z,.PosRollDampen
 114+ C116 3C           .NegRollDampen:         inc     a
 115+ C117 18 01                                jr      .ApplyRollDampen
 116+ C119 3D           .PosRollDampen:         dec     a
 117+ C11A 18 BF        .ApplyRollDampen:       jr      .UpdateAlphRoll
 118+ C11C              ; Dive and Climb input
 119+ C11C 2A C0 8E     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 120+ C11F 7E                                   ld      a,(hl)
 121+ C120                                      IfAIsZeroGoto   TestClimbPressed
 121+ C120 FE 00       >				cp	0
 121+ C122 CA 54 C1    >				jp	z,TestClimbPressed
 122+ C125 3A DF 91                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 123+ C128 21 E4 91                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 124+ C12B BE                                   cp      (hl)
 125+ C12C 28 26                                jr      z,TestClimbPressed
 126+ C12E                                      ;break
 127+ C12E 3D                                   dec     a                                   ; increase joystick roll
 128+ C12F 32 DF 91                            ld      (JSTY),a
 129+ C132 47                                   ld      b,a                                 ; b = current roll
 130+ C133 E6 80                                and     $80                                 ; a= sign of current rol
 131+ C135 32 E1 91                             ld      (BET2),a                            ; set sign
 132+ C138 EE 80                                xor     $80
 133+ C13A 32 E2 91                             ld      (BET2FLIP),a                        ; and oppsite sign
 134+ C13D 3A DF 91                             ld      a,(JSTY)
 135+ C140                                      JumpOnBitClear a,7,.PositiveClimb
 135+ C140 CB 7F       >                        bit 	7,a
 135+ C142 CA 47 C1    >                        jp      z,.PositiveClimb
 136+ C145 ED 44        .NegativeClimb:         neg
 137+ C147 CB 3F        .PositiveClimb          srl     a
 138+ C149 CB 3F                                srl     a
 139+ C14B FE 08                                cp      8
 140+ C14D 38 02                                jr      c,.NotIncreasedDamp
 141+ C14F CB 3F        .IncreasedDamp          srl     a
 142+ C151 32 E0 91     .NotIncreasedDamp:      ld      (BET1),a
 143+ C154 2A C2 8E     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 144+ C157 7E                                   ld      a,(hl)
 145+ C158                                      IfAIsZeroGoto   .DampenPitch
 145+ C158 FE 00       >				cp	0
 145+ C15A CA 8E C1    >				jp	z,.DampenPitch
 146+ C15D 3A DF 91                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 147+ C160 21 E3 91                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 148+ C163 BE                                   cp      (hl)
 149+ C164 28 42                                jr      z,ForwardViewDoneKeys
 150+ C166                                      ;break
 151+ C166 3C                                   inc     a                                   ; increase joystick roll
 152+ C167 32 DF 91     .UpdateAlphPitch:       ld      (JSTY),a
 153+ C16A 47                                   ld      b,a                                 ; b = current roll
 154+ C16B E6 80                                and     $80                                 ; a= sign of current rol
 155+ C16D 32 E1 91                             ld      (BET2),a                            ; set sign
 156+ C170 EE 80                                xor     $80
 157+ C172 32 E2 91                             ld      (BET2FLIP),a                        ; and oppsite sign
 158+ C175 3A DF 91                             ld      a,(JSTY)
 159+ C178                                      JumpOnBitClear a,7,.PositiveClimb
 159+ C178 CB 7F       >                        bit 	7,a
 159+ C17A CA 7F C1    >                        jp      z,.PositiveClimb
 160+ C17D ED 44        .NegativeClimb:         neg
 161+ C17F CB 3F        .PositiveClimb          srl     a
 162+ C181 CB 3F                                srl     a
 163+ C183 FE 08                                cp      8
 164+ C185 38 02                                jr      c,.NotIncreasedDamp
 165+ C187 CB 3F        .IncreasedDamp          srl     a
 166+ C189 32 E0 91     .NotIncreasedDamp:      ld      (BET1),a
 167+ C18C 18 1A                                jr      ForwardViewDoneKeys
 168+ C18E 21 4D C0     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 169+ C191 35                                   dec     (hl)
 170+ C192 20 14                                jr      nz,ForwardViewDoneKeys
 171+ C194 3E 04                                ld      a,dampenRate
 172+ C196 77                                   ld      (hl),a
 173+ C197 3A DF 91                             ld      a,(JSTY)
 174+ C19A FE 00                                cp      0
 175+ C19C 28 0A                                jr      z,ForwardViewDoneKeys
 176+ C19E CB 7F                                bit     7,a
 177+ C1A0 28 03                                jr      z,.PosPitchDampen
 178+ C1A2 3C           .NegPitchDampen:        inc     a
 179+ C1A3 18 01                                jr      .ApplyPitchDampen
 180+ C1A5 3D           .PosPitchDampen:        dec     a
 181+ C1A6 18 BF        .ApplyPitchDampen:      jr      .UpdateAlphPitch
 182+ C1A8 C9           ForwardViewDoneKeys:    ret
 183+ C1A9
 184+ C1A9
 185+ C1A9
 186+ C1A9
 187+ C1A9
 188+ C1A9
 189+ C1A9
# file closed: Views/Front_View.asm
 894  C1A9              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 895  C1A9                  SLOT    MenuStatusAddr
 896  C1A9                  PAGE    BankMenuStatus
 897  C1A9                  ORG     MenuStatusAddr
 898  C000                  INCLUDE "status_menu.asm"
# file opened: Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 5A A9  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 CE 92  						DW $0290,CommanderName
   5+ C018 08 0B 6E A9  						DW $0B08,txt_present_system
   6+ C01C 08 13 81 A9  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 94 A9  						DW $1B08,txt_condition
   8+ C024 08 23 A2 A9  						DW $2308,txt_fuel
   9+ C028 08 2B B0 A9  						DW $2B08,txt_cash
  10+ C02C 08 33 BE A9  						DW $3308,txt_legal_status
  11+ C030 08 3B CC A9  						DW $3B08,txt_rating
  12+ C034 08 4B DA A9  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89              stat_copy_to_name:
  44+ CC89 21 7E E8         ld      hl,GalaxyExpandedName
  45+ CC8C 01 1E 00         ld      bc,30
  46+ CC8F ED B0            ldir
  47+ CC91 C9               ret
  48+ CC92
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/L2print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/L2print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D                  MMUSelectLayer2
  15++CC9D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16++CCA1 1E FF            ld      e,txt_status_colour
  17++CCA3 CD 6F E1         call    l2_print_at
  18++CCA6 E1           	pop			hl
  19++CCA7 C1           	pop			bc
  20++CCA8 10 E8        	djnz		.BoilerTextLoop
  21++CCAA C9           	ret
  22++CCAB
# file closed: ./Menus/L2print_boiler_text_inlineInclude.asm
  50+ CCAB
  51+ CCAB              ;----------------------------------------------------------------------------------------------------------------------------------
  52+ CCAB DD 22 4F CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  53+ CCAF ED 53 51 CD                          ld (.STATclcn32zIX),de
  54+ CCB3 DD 21 4B CD                          ld ix,.STATclcn32t+36
  55+ CCB7 06 09                                ld b,9
  56+ CCB9 0E 00                                ld c,0
  57+ CCBB 3E 30        .STATclcn321:           ld a,'0'
  58+ CCBD B7                                   or a
  59+ CCBE DD 5E 00     .STATclcn322:           ld e,(ix+0)
  60+ CCC1 DD 56 01                             ld d,(ix+1)
  61+ CCC4 2A 4F CD                             ld hl,(.STATclcn32z)
  62+ CCC7 ED 52                                sbc hl,de
  63+ CCC9 22 4F CD                             ld (.STATclcn32z),hl
  64+ CCCC DD 5E 02                             ld e,(ix+2)
  65+ CCCF DD 56 03                             ld d,(ix+3)
  66+ CCD2 2A 51 CD                             ld hl,(.STATclcn32zIX)
  67+ CCD5 ED 52                                sbc hl,de
  68+ CCD7 22 51 CD                             ld (.STATclcn32zIX),hl
  69+ CCDA 38 04                                jr c,.STATclcn325
  70+ CCDC 0C                                   inc c
  71+ CCDD 3C                                   inc a
  72+ CCDE 18 DE                                jr .STATclcn322
  73+ CCE0 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  74+ CCE3 DD 56 01                             ld d,(ix+1)
  75+ CCE6 2A 4F CD                             ld hl,(.STATclcn32z)
  76+ CCE9 19                                   add hl,de
  77+ CCEA 22 4F CD                             ld (.STATclcn32z),hl
  78+ CCED DD 5E 02                             ld e,(ix+2)
  79+ CCF0 DD 56 03                             ld d,(ix+3)
  80+ CCF3 2A 51 CD                             ld hl,(.STATclcn32zIX)
  81+ CCF6 ED 5A                                adc hl,de
  82+ CCF8 22 51 CD                             ld (.STATclcn32zIX),hl
  83+ CCFB 11 FC FF                             ld de,-4
  84+ CCFE DD 19                                add ix,de
  85+ CD00 0C                                   inc c
  86+ CD01 0D                                   dec c
  87+ CD02 28 05                                jr z,.STATclcn323
  88+ CD04 FD 77 00                             ld (iy+0),a
  89+ CD07 FD 23                                inc iy
  90+ CD09 10 B0        .STATclcn323:           djnz .STATclcn321
  91+ CD0B 3A 4F CD                             ld a,(.STATclcn32z)
  92+ CD0E C6 30                                add A,'0'
  93+ CD10 FD 77 00                             ld (iy+0),a
  94+ CD13 FD 36 02 00                          ld (iy+2),0
  95+ CD17 FD 7E 00                             ld      a,(IY+0)
  96+ CD1A FD 77 01                             ld      (IY+1),a
  97+ CD1D 3E 2E                                ld      a,"."
  98+ CD1F FD 77 00                             ld      (IY+0),a
  99+ CD22 FD 23                                inc     IY
 100+ CD24 FD 23                                inc     IY
 101+ CD26 C9                                   ret
 102+ CD27 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 102+ CD2B 0A 00 00 00
 102+ CD2F 64 00 00 00
 102+ CD33 E8 03 00 00
 102+ CD37 10 27 00 00
 103+ CD3B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 103+ CD3F 40 42 0F 00
 103+ CD43 80 96 98 00
 103+ CD47 00 E1 F5 05
 103+ CD4B 00 CA 9A 3B
 104+ CD4F 00 00        .STATclcn32z            ds 2
 105+ CD51 00 00        .STATclcn32zIX          ds 2
 106+ CD53              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ CD53 2A E2 92     STAT_GetCash:           ld		hl,(Cash+2)
 108+ CD56 EB                                   ex      de,hl
 109+ CD57 DD 2A E0 92                          ld      ix,(Cash)
 110+ CD5B FD 21 3D CC                          ld		iy,STAT_cash_amount
 111+ CD5F CD AB CC                             call 	STAT_DispDEIXtoIY
 112+ CD62 FD E5                                push    iy
 113+ CD64 D1                                   pop     de
 114+ CD65 21 47 CC                             ld      hl,STAT_cash_UoM
 115+ CD68 01 04 00                             ld      bc,4
 116+ CD6B ED B0                                ldir
 117+ CD6D C9                                   ret
 118+ CD6E              ;----------------------------------------------------------------------------------------------------------------------------------
 119+ CD6E 7E           STAT_expand_word:       ld      a,(hl)
 120+ CD6F FE 00                                cp      0
 121+ CD71 C8                                   ret     z
 122+ CD72 12                                   ld      (de),a
 123+ CD73 23                                   inc     hl
 124+ CD74 13                                   inc     de
 125+ CD75 18 F7                                jr      STAT_expand_word
 126+ CD77
 127+ CD77              ; hl = list of words
 128+ CD77              ; de = adress to expand to
 129+ CD77 7E           STAT_expand_name:       ld      a,(hl)
 130+ CD78 47                                   ld      b,a
 131+ CD79 23                                   inc     hl
 132+ CD7A 7E                                   ld      a,(hl)              ; its a 16 bit
 133+ CD7B 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 134+ CD7C B0                                   or      b
 135+ CD7D 20 01                                jr      nz,.MoreToDo
 136+ CD7F              ;                        ld      (de),a we dont want the null marker now
 137+ CD7F C9                                   ret
 138+ CD80 E5 D5        .MoreToDo:              push    hl,,de
 139+ CD82 7E                                   ld      a,(hl)              ; bodge for now no optimise
 140+ CD83 5F                                   ld      e,a
 141+ CD84 23                                   inc     hl
 142+ CD85 7E                                   ld      a,(hl)
 143+ CD86 57                                   ld      d,a
 144+ CD87 EB                                   ex      hl,de               ; hl is now Word... address
 145+ CD88 D1                                   pop     de                  ; de back to pointer to buffer
 146+ CD89 CD 6E CD     .ProcessWord:           call    STAT_expand_word
 147+ CD8C 3E 20                                ld      a," "               ; speculative space
 148+ CD8E 12                                   ld      (de),a
 149+ CD8F 13                                   inc     de
 150+ CD90 E1                                   pop     hl                  ; get string pointer back
 151+ CD91 23                                   inc     hl
 152+ CD92 23                                   inc     hl                  ; on to next word
 153+ CD93 18 E2                                jr      STAT_expand_name
 154+ CD95
 155+ CD95              STAT_First_Item         EQU     2
 156+ CD95 3A E6 92     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 157+ CD98                                      MMUSelectGalaxyA
 157+ CD98 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 158+ CD9B 21 3D C0                             ld      hl,STAT_display_buffer                    ; hl - target buffer
 159+ CD9E 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 160+ CDA0 11 00 0C                             ld      de, STAT_display_buff_len
 161+ CDA3 CD 39 8E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 162+ CDA6 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 163+ CDA9 11 18 00                             ld      de,STAT_buffer_row_len
 164+ CDAC 06 1A                                ld      b,EQ_ITEM_COUNT
 165+ CDAE AF                                   xor     a
 166+ CDAF 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 167+ CDB0 19                                   add     hl,de
 168+ CDB1 10 FC                                djnz    .EoLLoop
 169+ CDB3 06 1A                                ld      b,EQ_ITEM_COUNT                             ; CurrentGameMaxEquipment
 170+ CDB5 DD 21 FF 92                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 171+ CDB9 FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 172+ CDBD 0E 00                                ld      c,0                                         ; Current Row
 173+ CDBF 1E 02                                ld      e,STAT_First_Item
 174+ CDC1 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 175+ CDC4 FE 00                                cp      0
 176+ CDC6 28 21                                jr      z,.DoneFittedCheck
 177+ CDC8 D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 177+ CDCC E5 C5
 178+ CDCE 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 179+ CDD1 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 180+ CDD3 ED 30                                mul
 181+ CDD5 19                                   add     hl,de                                       ; hl = dword list of work pointers
 182+ CDD6 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 183+ CDDA CD 77 CD                             call    STAT_expand_name                           ; expand name
 184+ CDDD C1 DD E1 FD                          pop     iy,,ix,,bc
 184+ CDE1 E1
 185+ CDE2 11 18 00                             ld      de,STAT_buffer_row_len
 186+ CDE5 FD 19                                add     iy,de                                       ; now iy = start of next column
 187+ CDE7 D1                                   pop     de
 188+ CDE8 0C                                   inc     c
 189+ CDE9 DD 23        .DoneFittedCheck:       inc     ix
 190+ CDEB 1C                                   inc     e
 191+ CDEC 10 D3                                djnz    .ProcessRow
 192+ CDEE 79           .DoneProcess:           ld      a,c
 193+ CDEF 32 3C C0                             ld      (STAT_current_end),a
 194+ CDF2 C9                                   ret
 195+ CDF3              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ CDF3 06 0A        draw_STAT_maintext:    	ld		b,10
 197+ CDF5 21 10 C0                             ld		hl,status_boiler_text
 198+ CDF8 CD 92 CC                             call	STAT_print_boiler_text
 199+ CDFB 3A E6 92     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 200+ CDFE                                      MMUSelectGalaxyA
 200+ CDFE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 201+ CE01 ED 4B D8 92                          ld      bc, (PresentSystemX)
 202+ CE05 CD B7 FA                             call    galaxy_name_at_bc
 203+ CE08 11 4B CC                             ld      de,stat_present_name
 204+ CE0B CD 89 CC                             call    stat_copy_to_name
 204+ CE0E
 205+ CE0E 01 98 0B                             ld      bc,present_position
 206+ CE11 21 4B CC                             ld      hl,stat_present_name
 207+ CE14                                      MMUSelectLayer2
 207+ CE14 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 208+ CE18 1E FF                                ld      e,txt_status_colour
 209+ CE1A CD 6F E1                             call    l2_print_at
 210+ CE1D 3A E6 92     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 211+ CE20                                      MMUSelectGalaxyA
 211+ CE20 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 212+ CE23 ED 4B 5B 93                          ld      bc, (TargetPlanetX)
 213+ CE27 CD B7 FA                             call    galaxy_name_at_bc
 214+ CE2A 11 6A CC                             ld      de,stat_target_name
 215+ CE2D CD 89 CC                             call    stat_copy_to_name
 215+ CE30
 216+ CE30 01 98 13                             ld      bc,hyperspace_position
 217+ CE33 21 6A CC                             ld      hl,stat_target_name
 218+ CE36                                      MMUSelectLayer2
 218+ CE36 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219+ CE3A 1E FF                                ld      e,txt_status_colour
 220+ CE3C CD 6F E1                             call    l2_print_at
 221+ CE3F CD F8 CE     .StatusText:	        call	get_cmdr_condition
 222+ CE42 21 F2 97                             ld		hl, ConditionNameIdx
 223+ CE45 CD F4 98                             call	getTableText
 224+ CE48 01 70 1B                             ld		bc,condition_position
 225+ CE4B                                      MMUSelectLayer2
 225+ CE4B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ CE4F 1E FF                                ld      e,txt_status_colour
 227+ CE51 CD 6F E1                             call    l2_print_at
 228+ CE54 CD 37 AA     .DisplayFuel:           call	GetFuelLevel
 229+ CE57 21 E5 A9                             ld		hl, txt_fuel_level
 230+ CE5A 7E                                   ld		a,(hl)
 231+ CE5B FE 30                                cp		'0'
 232+ CE5D 20 01                                jr		nz,.PrintFuel
 233+ CE5F 23           .SkipLeadingZero:	    inc		hl
 234+ CE60 01 70 23     .PrintFuel:             ld		bc,fuel_position
 235+ CE63                                      MMUSelectLayer2
 235+ CE63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 236+ CE67 1E FF                                ld      e,txt_status_colour
 237+ CE69 CD 6F E1                             call    l2_print_at
 238+ CE6C CD 53 CD     .DisplayCash:           call	STAT_GetCash
 239+ CE6F 01 70 2B                             ld		bc,cash_position
 240+ CE72 21 3D CC                             ld		hl,STAT_cash_amount
 241+ CE75                                      MMUSelectLayer2
 241+ CE75 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 242+ CE79 1E FF                                ld      e,txt_status_colour
 243+ CE7B CD 6F E1                             call    l2_print_at
 244+ CE7E 3A 20 93     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 245+ CE81 FE 00                                cp		0
 246+ CE83 20 05                                jr		nz,.Naughty
 247+ CE85 21 D3 99                             ld		hl,WordClean
 248+ CE88 18 0C                                jr		.DisplayLegalStatus
 249+ CE8A FE 32        .Naughty:               cp		50
 250+ CE8C 38 05                                jr		c,.JustOffender
 251+ CE8E 21 E2 99     .VeryNaughty:           ld		hl,WordFugitive
 252+ CE91 18 03                                jr		.DisplayLegalStatus
 253+ CE93 21 D9 99     .JustOffender:          ld		hl,WordOffender
 254+ CE96 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 255+ CE99                                      MMUSelectLayer2
 255+ CE99 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ CE9D 1E FF                                ld      e,txt_status_colour
 257+ CE9F CD 6F E1                             call    l2_print_at
 258+ CEA2 ED 5B 33 93  .DisplayRating:         ld		de,(KillTally)
 259+ CEA6 CD FF 98                             call	getRankIndex
 260+ CEA9 21 DE 98                             ld		hl, RankingNameIdx
 261+ CEAC CD F4 98                             call	getTableText
 262+ CEAF 01 70 3B                             ld		bc,rank_position
 263+ CEB2                                      MMUSelectLayer2
 263+ CEB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ CEB6 1E FF                                ld      e,txt_status_colour
 265+ CEB8 CD 6F E1                             call    l2_print_at
 266+ CEBB C9                                   ret
 267+ CEBC
 268+ CEBC
 269+ CEBC              draw_STAT_items:        MMUSelectLayer1
 269+ CEBC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 270+ CEC0 CD 47 E0                             call    l1_cls
 271+ CEC3                                      ; add in all the status stuff later
 272+ CEC3 3A 3B C0                             ld      a,(STAT_current_topItem)
 273+ CEC6 16 18                                ld      d,STAT_buffer_row_len
 274+ CEC8 5F                                   ld      e,a
 275+ CEC9 ED 30                                mul
 276+ CECB 21 3D C0                             ld      hl,STAT_display_buffer
 277+ CECE 19                                   add     hl,de
 278+ CECF 3A 3B C0                             ld      a,(STAT_current_topItem)
 279+ CED2 47                                   ld      b,a
 280+ CED3 3A 3C C0                             ld      a,(STAT_current_end)
 281+ CED6 90                                   sub     b
 282+ CED7                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 282+ CED7 FE 0A       >                        cp      STAT_eqip_window_len
 282+ CED9 DA E0 CE    >                        jp		c,.FillScreen
 283+ CEDC 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 284+ CEDE 18 01                                jr      .ReadyToPrint
 285+ CEE0 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 286+ CEE1 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 287+ CEE4 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 288+ CEE7 CD 80 E0                             call    l1_print_at
 288+ CEEA
 289+ CEEA C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 290+ CEEC 11 18 00                             ld      de,STAT_buffer_row_len
 291+ CEEF 19                                   add     hl,de
 292+ CEF0 D1                                   pop     de                          ; get output row back
 293+ CEF1 3E 08                                ld      a,8
 294+ CEF3 82                                   add     a,d
 295+ CEF4 57                                   ld      d,a
 296+ CEF5 10 ED                                djnz    .DrawARow
 297+ CEF7 C9                                   ret
 298+ CEF8
 299+ CEF8              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ CEF8
 301+ CEF8 3A 43 92     get_cmdr_condition:     ld			a,(DockedFlag)
 302+ CEFB FE FF                                cp			PlayerDocked
 303+ CEFD 28 1D                                jr			z,.PlayerIsDocked
 304+ CEFF 21 9F 92     .PlayerNotDocked:	    ld			hl, SpaceStationPresent+1				; address of first Non station
 305+ CF02 3E 01                                ld			a,1										; condition green
 306+ CF04 06 1E                                ld			b,JunkCount- (SpaceStationPresent+1) +1	; so should be 30
 307+ CF06 86           .countShipsLoop:	    add			a,(hl)
 308+ CF07 23                                   inc			hl
 309+ CF08 10 FC                                djnz		.countShipsLoop
 310+ CF0A FE 00                                cp			0
 311+ CF0C 0E 01                                ld          c,1
 312+ CF0E 28 0A                                jr			z,.PlayerColour
 313+ CF10 3A 39 93     .NoShipsAround:         ld			a,(PlayerEnergy)
 314+ CF13 FE 80                                cp			$80
 315+ CF15 3E 01                                ld          a,1
 316+ CF17 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 317+ CF19 C9                                   ret
 318+ CF1A 79           .PlayerColour:          ld          a,c
 319+ CF1B C9                                   ret
 320+ CF1C AF           .PlayerIsDocked:        xor			a
 321+ CF1D C9                                   ret
 322+ CF1E
 323+ CF1E 7E           PrintEquipment:         ld		a,(hl)
 324+ CF1F FE 00                                cp		0
 325+ CF21 C8                                   ret		z
 326+ CF22 78                                   ld		a,b
 327+ CF23 CD BC 9D     PrintEquipmentDirect:	call	expandTokenToString
 328+ CF26 21 7B 9D                             ld		hl,TextBuffer
 329+ CF29 ED 5B 38 C0                          ld		de,(equipment_cursor)
 330+ CF2D CD 80 E0                             call	l1_print_at
 331+ CF30 ED 4B 38 C0                          ld		bc,(equipment_cursor)
 332+ CF34 78                                   ld		a,b
 333+ CF35 C6 08                                add		a,8
 334+ CF37 47                                   ld		b,a
 335+ CF38 ED 43 38 C0                          ld		(equipment_cursor),bc
 336+ CF3C FE FF                                cp		equipmax_row
 337+ CF3E 38 07                                jr		c,.SkipColUpdate
 338+ CF40 21 78 53     .ColUpdate:             ld		hl,equipment_position2
 339+ CF43 22 38 C0                             ld		(equipment_cursor),hl
 340+ CF46 C9                                   ret
 341+ CF47 78           .SkipColUpdate:	        ld		a,b
 342+ CF48 32 39 C0                             ld		(equipment_cursor+1), a
 343+ CF4B C9                                   ret
 344+ CF4C
 345+ CF4C              draw_status_menu:       INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++CF4C
   2++CF4C                  MMUSelectLayer1
   2++CF4C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++CF50 CD 47 E0     	call	l1_cls
   4++CF53 3E 07        	ld		a,7
   5++CF55 CD 53 E0     	call	l1_attr_cls_to_a
   6++CF58                  MMUSelectLayer2
   6++CF58 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++CF5C CD 08 E0     	call    asm_l2_double_buffer_off
   8++CF5F CD C9 E0     	call	l2_cls	; Get some space
   9++CF62              	MMUSelectSpriteBank
   9++CF62 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++CF66 CD 3F E1     	call    sprite_cls_cursors
  11++CF69
  12++CF69
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 346+ CF69 3E 08                                ld		a,8
 347+ CF6B 32 3D 92                             ld		(MenuIdMax),a
 348+ CF6E 01 01 01     .Drawbox:               ld		bc,$0101
 349+ CF71 11 FD BE                             ld		de,$BEFD
 350+ CF74 3E C0                                ld		a,$C0
 351+ CF76                                      MMUSelectLayer2
 351+ CF76 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 352+ CF7A CD F6 E1                             call	l2_draw_box
 353+ CF7D 01 01 0A                             ld		bc,$0A01
 354+ CF80 11 C0 FE                             ld		de,$FEC0
 355+ CF83 CD 62 E2                             call	l2_draw_horz_line
 356+ CF86 CD 95 CD     .equipment              call    STAT_buffer_list
 357+ CF89 CD BC CE                             call    draw_STAT_items
 358+ CF8C CD F3 CD                             call    draw_STAT_maintext
 359+ CF8F C9                                   ret
 360+ CF90
 361+ CF90              ;----------------------------------------------------------------------------------------------------------------------------------
 362+ CF90              ; Handles all the input whilst in the market menu
 363+ CF90 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 364+ CF92 CD B0 8F                             call    is_key_pressed
 365+ CF95 CC A1 CF                             call    z,STAT_UpPressed
 366+ CF98 3E 4C                                ld      a,c_Pressed_CursorDown
 367+ CF9A CD B0 8F                             call    is_key_pressed
 368+ CF9D CC B3 CF                             call    z,STAT_DownPressed
 369+ CFA0 C9                                   ret
 370+ CFA1
 371+ CFA1              ;----------------------------------------------------------------------------------------------------------------------------------
 372+ CFA1 AF           STAT_UpPressed:         xor     a
 373+ CFA2 32 3A C0                             ld      (STAT_selected_row),a
 374+ CFA5 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 375+ CFA8 FE 00                                cp      0
 376+ CFAA C8                                   ret     z
 377+ CFAB 3D                                   dec     a           ; chjange later to buffering step back 1
 378+ CFAC 32 3B C0                             ld      (STAT_current_topItem),a
 379+ CFAF CD BC CE                             call    draw_STAT_items
 380+ CFB2 C9                                   ret
 381+ CFB3              ;----------------------------------------------------------------------------------------------------------------------------------
 382+ CFB3 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 383+ CFB5 32 3A C0                             ld      (STAT_selected_row),a
 384+ CFB8 3A 3C C0                             ld      a,(STAT_current_end)
 385+ CFBB 47                                   ld      b,a                             ; This check is if the current list is < one screen
 386+ CFBC 05                                   dec     b
 387+ CFBD 3A 3A C0                             ld      a,(STAT_selected_row)
 388+ CFC0 B8                                   cp      b
 389+ CFC1 C8                                   ret     z
 390+ CFC2 FE 09                                cp      STAT_eqip_window_len-1
 391+ CFC4 28 05                                jr      z, .check_scroll_down
 392+ CFC6 21 3A C0                             ld      hl,STAT_selected_row
 393+ CFC9 34                                   inc     (hl)
 394+ CFCA C9                                   ret
 395+ CFCB 47           .check_scroll_down:     ld      b,a
 396+ CFCC 3A 3B C0                             ld      a,(STAT_current_topItem)
 397+ CFCF 80                                   add     b
 398+ CFD0 3C                                   inc     a
 399+ CFD1 21 3C C0                             ld      hl,STAT_current_end
 400+ CFD4                                      ReturnIfAGTEusng      (hl)
 400+ CFD4 BE          >				  cp    (hl)
 400+ CFD5 D0          >                  ret	 nc
 401+ CFD6 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 402+ CFD9 34                                   inc     (hl)
 403+ CFDA CD BC CE                             call    draw_STAT_items
 404+ CFDD C9                                   ret
 405+ CFDE
# file closed: Menus/status_menu.asm
 899  CFDE
 900  CFDE              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 901  CFDE
 902  CFDE                  SLOT    MenuEquipSAddr
 903  CFDE                  PAGE    BankMenuEquipS
 904  CFDE                  ORG     MenuEquipSAddr
 905  C000                  INCLUDE "Menus/equip_ship_menu.asm"
# file opened: Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 41 9E  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD 80 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A E2 92     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A E0 92                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD 80 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 39 8E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D5 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 05 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 47 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c,.FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD 80 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        INCLUDE "Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1++D3EA
   2++D3EA                  MMUSelectLayer1
   2++D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
   3++D3EE CD 47 E0     	call	l1_cls
   4++D3F1 3E 07        	ld		a,7
   5++D3F3 CD 53 E0     	call	l1_attr_cls_to_a
   6++D3F6                  MMUSelectLayer2
   6++D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   7++D3FA CD 08 E0     	call    asm_l2_double_buffer_off
   8++D3FD CD C9 E0     	call	l2_cls	; Get some space
   9++D400              	MMUSelectSpriteBank
   9++D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  10++D404 CD 3F E1     	call    sprite_cls_cursors
  11++D407
  12++D407
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 3D 92                             ld      (MenuIdMax),a
 380+ D40C 3A E6 92     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 69 F9                             call    galaxy_planet_data
 383+ D415 CD F1 F8                             call    galaxy_equip_market
 384+ D418 ED 4B D8 92                          ld      bc,(PresentSystemX)
 385+ D41C CD B7 FA                             call    galaxy_name_at_bc
 386+ D41F CD 69 F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 62 E2                             call	l2_draw_horz_line
 398+ D441 3A E6 92     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD BC 9D                             call	expandTokenToString
 402+ D44C CD 79 F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD B0 8F                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD B0 8F                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD B0 8F                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD B0 8F                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >				  cp    (hl)
 481+ D4EA D0          >                  ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A E6 92     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D5 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 9C 9E                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 FD 92                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 E7 92     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 9C 9E                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A E6 92     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D5 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 1F 93     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A E2 92     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A E0 92                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 FD 92     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 E4 92    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 1F 93     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 E7 92                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D5 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 9C 9E                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 FD 92                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 FD 92     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 E7 92                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD AF 9E                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: Menus/equip_ship_menu.asm
 906  D651
 907  D651
 908  D651                  SLOT    LaunchShipAddr
 909  D651                  PAGE    BankLaunchShip
 910  D651                  ORG     LaunchShipAddr
 911  C000                  INCLUDE "Transitions/launch_ship.asm"
# file opened: Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087              init_countdown          EQU $FF
  33+ C087 00           launch_countdown        DB  $0000
  34+ C088 0E C0        launch_table_idx        DW launchdraw_table
  35+ C08A 00           current_offsetX         db 0
  36+ C08B 00           current_offsetY         db 0
  37+ C08C
  38+ C08C
  39+ C08C              LaunchTubeEdges         MMUSelectLayer2
  39+ C08C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ C090 01 00 00                             ld      bc,$0000
  41+ C093 11 92 01                             ld      de,$0192
  42+ C096 78           .drawLoop1              ld      a,b
  43+ C097 FE 80                                cp      128
  44+ C099 28 25                                jr      z,.DoneEdge
  45+ C09B F5                                   push    af
  46+ C09C C5 D5 C5 D5                          push    bc,,de,,bc,,de
  47+ C0A0 CD 55 E2                             call    l2_draw_horz_dma_bank
  48+ C0A3 D1 C1                                pop     bc,,de
  49+ C0A5 3E FF                                ld      a,$FF
  50+ C0A7 92                                   sub     d
  51+ C0A8 4F                                   ld      c,a
  52+ C0A9 0C                                   inc     c
  53+ C0AA CD 55 E2                             call    l2_draw_horz_dma_bank
  54+ C0AD D1 C1                                pop     bc,,de
  55+ C0AF 78                                   ld      a,b
  56+ C0B0 FE 40                                cp      64
  57+ C0B2 30 06                                jr      nc,.ReduceLoop
  58+ C0B4 14                                   inc     d
  59+ C0B5 14                                   inc     d
  60+ C0B6 F1                                   pop     af
  61+ C0B7 04                                   inc     b
  62+ C0B8 18 DC                                jr      .drawLoop1
  63+ C0BA 15           .ReduceLoop:            dec     d
  64+ C0BB 15                                   dec     d
  65+ C0BC F1                                   pop     af
  66+ C0BD 04                                   inc     b
  67+ C0BE 18 D6                                jr      .drawLoop1
  68+ C0C0 3E 80        .DoneEdge:              ld      a,$80
  69+ C0C2 01 00 00                             ld      bc,$0000                        ; Top Left
  70+ C0C5 11 FF 80                             ld      de,$80FF                        ; Bottom Right
  71+ C0C8 CD 0C E6                             call    l2_draw_diagonal
  72+ C0CB 3E 80                                ld      a,$80
  73+ C0CD 01 00 80                             ld      bc,$8000                        ; Botom Left
  74+ C0D0 11 FF 00                             ld      de,$00FF                        ; Top Right
  75+ C0D3 CD 0C E6                             call    l2_draw_diagonal
  76+ C0D6
  77+ C0D6 01 00 00                             ld      bc,$0000
  78+ C0D9 11 80 00                             ld      DE,$0080
  79+ C0DC 26 60                                ld      h,$60
  80+ C0DE 2E 55                                ld      l,$55
  81+ C0E0 C9                                   ret
  82+ C0E1
  83+ C0E1              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
  83+ C0E1 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  84+ C0E5 21 00 50                             ld      hl,ScreenL1Bottom
  85+ C0E8 11 00 E0                             ld      de,ConsoleImageData
  86+ C0EB 01 00 08                             ld      bc, ScreenL1BottomLen
  87+ C0EE CD 5F 8E                             call    memcopy_dma
  88+ C0F1 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  89+ C0F4 11 00 E8                             ld      de,ConsoleAttributes
  90+ C0F7 01 00 01                             ld      bc, ScreenL1AttrBtmLen
  91+ C0FA CD 5F 8E                             call    memcopy_dma
  92+ C0FD C9                                   ret
  93+ C0FE
  94+ C0FE              draw_launch_ship:       MMUSelectLayer1
  94+ C0FE ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  95+ C102 CD 47 E0                             call    l1_cls
  96+ C105 CD 52 E0                             call    l1_attr_cls
  97+ C108                                      MMUSelectSpriteBank
  97+ C108 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  98+ C10C CD 3F E1                             call    sprite_cls_cursors
  99+ C10F                                      MMUSelectLayer2
  99+ C10F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 100+ C113 CD 02 E0                             call    asm_l2_double_buffer_on
 101+ C116 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 102+ C118 32 72 E0                             ld      (l2_cls_byte),a
 103+ C11B CD 92 E0                             call    l2_set_color_upper2
 104+ C11E 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 105+ C120 32 72 E0                             ld      (l2_cls_byte),a
 106+ C123 CD BE E0                             call    l2_cls_lower_third
 107+ C126 CD 8C C0                             call    LaunchTubeEdges
 108+ C129 CD E1 C0                             call    LaunchConsole
 109+ C12C              .NextBuffer:            MMUSelectLayer2
 109+ C12C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C130 CD DD E0                             call    l2_flip_buffers
 111+ C133 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 112+ C135 32 72 E0                             ld      (l2_cls_byte),a
 113+ C138 CD 92 E0                             call    l2_set_color_upper2
 114+ C13B 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 115+ C13D 32 72 E0                             ld      (l2_cls_byte),a
 116+ C140 CD BE E0                             call    l2_cls_lower_third
 117+ C143 CD 8C C0                             call    LaunchTubeEdges
 118+ C146 CD E1 C0                             call    LaunchConsole
 119+ C149 3E FF        .SetUpTimers:           ld      a,init_countdown
 120+ C14B 32 87 C0                             ld      (launch_countdown),a
 121+ C14E 21 0E C0                             ld      hl,launchdraw_table
 122+ C151 22 88 C0                             ld      (launch_table_idx),hl
 123+ C154 AF                                   xor     a
 124+ C155 32 8A C0                             ld      (current_offsetX),a
 125+ C158 32 8B C0                             ld      (current_offsetY),a
 126+ C15B AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 127+ C15C
 128+ C15C                                      MaxThrottle
 128+ C15C 3A 2C 92    >                        ld      a,(SHIPMAXSPEED)
 128+ C15F 32 2D 92    >                        ld      (DELTA),a
 128+ C162 57          >                        ld      d,a
 128+ C163 1E 04       >                        ld      e,4
 128+ C165 ED 30       >                        mul
 128+ C167 ED 53 2E 92 >                        ld      (DELT4Lo),de
 129+ C16B C9                                   ret
 130+ C16C
 131+ C16C CD 8C C0     loop_launch_ship:       call    LaunchTubeEdges
 132+ C16F 3E FF                                ld      a,init_countdown
 133+ C171 32 87 C0                             ld      (launch_countdown),a
 134+ C174 2A 88 C0                             ld      hl,(launch_table_idx)
 135+ C177 4E                                   ld      c,(hl)
 136+ C178 79                                   ld      a,c
 137+ C179 FE FF                                cp      $FF
 138+ C17B 28 1E                                jr      z,.FinishedLaunch
 139+ C17D 23                                   inc     hl
 140+ C17E 46                                   ld      b,(hl)                 ; bc = top left
 141+ C17F 23                                   inc     hl
 142+ C180 5E                                   ld      e,(hl)
 143+ C181 23                                   inc     hl
 144+ C182 56                                   ld      d,(hl)                 ;de = width and height
 145+ C183 23                                   inc     hl
 146+ C184 7E                                   ld      a,(hl)
 147+ C185 23                                   inc     hl
 148+ C186 22 88 C0                             ld      (launch_table_idx),hl
 149+ C189 67                                   ld      h,a
 150+ C18A C5 D5                                push    bc,,de
 151+ C18C                                      MMUSelectLayer2
 151+ C18C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 152+ C190 CD E6 E1                             call    l2_draw_fill_box
 153+ C193 D1 C1                                pop     bc,,de
 154+ C195 3E 80                                ld      a,$80
 155+ C197 CD F6 E1                             call    l2_draw_box
 156+ C19A C9                                   ret
 157+ C19B 3E 09        .FinishedLaunch:        ld      a,ScreenFront
 158+ C19D 32 4C 82                             ld      (ScreenTransitionForced),a
 159+ C1A0 C9                                   ret
 160+ C1A1
 161+ C1A1
 162+ C1A1
# file closed: Transitions/launch_ship.asm
 912  C1A1
 913  C1A1              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 914  C1A1                  SLOT    UniverseBankAddr
 915  C1A1                  PAGE    BankUNIVDATA0
 916  C1A1              	ORG	    UniverseBankAddr,BankUNIVDATA0
 917  C000                  INCLUDE "univ_ship_data.asm"
# file opened: Universe/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   8+ C000              ; This means each gets its own line list, inwork etc
   9+ C000
  10+ C000              ; "Runtime Ship Data paged into in Bank 7"
  11+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  11+ C004 65 72 73 65
  11+ C008 20 50 47
  12+ C00B              ; NOTE we can cheat and pre allocate segs just using a DS for now
  13+ C00B
  14+ C00B              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  15+ C00B              ; Universe map substibute for INWK
  16+ C00B              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  17+ C00B 00           UBnKxlo                     DB  0                       ; INWK+0
  18+ C00C 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  19+ C00D 00           UBnKxsgn                    DB  0                       ; INWK+2
  20+ C00E 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
  21+ C00F 00           UbnKyhi                     DB  0                       ; INWK+4 \ yHi
  22+ C010 00           UBnKysgn                    DB  0                       ; INWK +5
  23+ C011 00           UbnKzlo                     DB  0                       ; INWK +6
  24+ C012 00           UBnKzhi                     DB  0                       ; INWK +7
  25+ C013 00           UBnKzsgn                    DB  0                       ; INWK +8
  26+ C014              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  27+ C014              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  28+ C014 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  29+ C016              UBnkrotmatSidev             equ UBnkrotmatSidevX
  30+ C016 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  31+ C018 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  32+ C01A 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  33+ C01C              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  34+ C01C 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  35+ C01E 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  36+ C020 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  37+ C022              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  38+ C022 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  39+ C024 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  40+ C026
  41+ C026
  42+ C026 00           UBnkspeed                   DB  0                       ; INWK +27
  43+ C027 00           UBnkAccel                   DB  0                       ; INWK +28
  44+ C028 00           UBnkrotXCounter             DB  0                       ; INWK +29
  45+ C029 00           UBnkrotZCounter             DB  0                       ; INWK +30
  46+ C02A 00           UBnkexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  47+ C02B              ; Flags work as follows:
  48+ C02B              ; 7 - Flag ship to be killed with debris
  49+ C02B              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  50+ C02B              ; 5 - Ship is exploding if set
  51+ C02B              ; 4 -
  52+ C02B              ; 3 - Display state - Plot as a Dot
  53+ C02B              ; 2 - Nbr of Missiles bit 2
  54+ C02B              ; 1 - Nbr of Missiles bit 1
  55+ C02B              ; 0 - Nbr of Missiles bit 0
  56+ C02B 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  57+ C02C 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  58+ C02D 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  59+ C02E 00           UbnKEnergy                  DB  0                       ; INWK +35
  60+ C02F 00           UbnKNewb                    DB  0                       ; INWK +36 INWK+36
  61+ C030              ; Flags work as follows:
  62+ C030              ; 7 - set then remove ship, if set then to code removes without debris
  63+ C030              ; 6 - Police ship (used to determine fuguitive status)
  64+ C030              ; 4 - Docking
  65+ C030              ; 3 - Pirate
  66+ C030              ; 2 - Angry status (e.g. space station or bounty hunter)
  67+ C030              ; 0 - Trader ship
  68+ C030              INWKxlo                     equ UBnKxlo
  69+ C030              INWKxhi                     equ UBnKxhi                 ; there are hi medium low as some times these are 24 bit
  70+ C030              INWKxsgn                    equ UBnKzsgn                ; INWK+2
  71+ C030              INWKyLo                     equ UBnKylo                 ; INWK+3 \ ylo
  72+ C030              INWKyhi                     equ UbnKyhi                 ; Y Hi???
  73+ C030              INWKysgn                    equ UBnKysgn                ; INWK +5
  74+ C030              INWKzlo                     equ UbnKzlo                 ; INWK +6
  75+ C030              INWKzhi                     equ UBnKzhi                 ; INWK +7
  76+ C030              INWKzsgn                    equ UBnKzsgn                ; INWK +8
  77+ C030              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  78+ C030              ;                    [roofv x y z ] roof vector (up)
  79+ C030              ;                    [sidev x y z ] side vector (right)
  80+ C030              INWKspeed                   equ UBnkspeed               ; INWK +27UBnkTransmat2zLo  DB  0               ; XX16+16
  81+ C030              INWKAccel                   equ UBnkAccel               ; INWK +28          UBnkTransmat2zHi    DB  0               ; XX16+17
  82+ C030              rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  83+ C030              rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  84+ C030              explDsp                     equ UBnkexplDsp             ; INWK +31 clear exploding/display state|missiles UBnkDrawCam0xHi   DB  0               ; XX18+1
  85+ C030              aiatkecm                    equ UBnkaiatkecm            ; INWK +32 ai_attack_univ_ecm i.e. AI typeUBnkDrawCam0xSgn      DB  0               ; XX18+2
  86+ C030              INWKDrawCam0yLo             equ UBnkDrawCam0yLo         ; INWK +33UBnkDrawCam0yLo   DB  0               ; XX18+3
  87+ C030              INWKDrawCam0yHi             equ UBnkDrawCam0yHi         ; INWK +34UBnkDrawCam0yHi   DB  0               ; XX18+4
  88+ C030              INWKEnergy                  equ UbnKEnergy              ; INWK +35UBnkDrawCam0ySgn      DB  0               ; XX18+5
  89+ C030              ;UBnkDrawCam0ySgn    equ UbnKEnergy              ; Reycles but not a good idea TODO
  90+ C030              INWKNewb                    equ UbnKNewb                ; INWK +36 INWK+36 \ NEWB bit 7 remove ship?UBnkDrawCam0zLo     DB  0               ; XX18+6
  91+ C030              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
  92+ C030 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
  93+ C032              UBnkTransmatSidev           EQU UBnkTransmatSidevX
  94+ C032 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
  95+ C034 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
  96+ C036 00 00        UBnkTransmatRoofvX          DW 0
  97+ C038              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
  98+ C038 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
  99+ C03A 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
 100+ C03C 00 00        UBnkTransmatNosevX          DW 0
 101+ C03E              UBnkTransmatNosev           EQU UBnkTransmatNosevX
 102+ C03E 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
 103+ C040 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
 104+ C042 00 00        UbnkTransmatTransX          DW 0
 105+ C044 00 00        UbnkTransmatTransY          DW 0
 106+ C046 00 00        UbnkTransmatTransZ          DW 0
 107+ C048              XX16                        equ UBnkTransmatSidev
 108+ C048              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 109+ C048 00 00        UbnkTransInvRow0x0          DW 0
 110+ C04A 00 00        UbnkTransInvRow0x1          DW 0
 111+ C04C 00 00        UbnkTransInvRow0x2          DW 0
 112+ C04E 00 00        UbnkTransInvRow0x3          DW 0
 113+ C050 00 00        UbnkTransInvRow1y0          DW 0
 114+ C052 00 00        UbnkTransInvRow1y1          DW 0
 115+ C054 00 00        UbnkTransInvRow1y2          DW 0
 116+ C056 00 00        UbnkTransInvRow1y3          DW 0
 117+ C058 00 00        UbnkTransInvRow2z0          DW 0
 118+ C05A 00 00        UbnkTransInvRow2z1          DW 0
 119+ C05C 00 00        UbnkTransInvRow2z2          DW 0
 120+ C05E 00 00        UbnkTransInvRow2z3          DW 0
 121+ C060
 122+ C060              XX16Inv             equ UbnkTransInvRow0x0
 123+ C060              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 124+ C060 00           UbnkProjxLo                 DB  0
 125+ C061 00           UbnkProjxHi                 DB  0
 126+ C062 00           UbnkProjxSgn                DB  0
 127+ C063              UbnkProjx                   EQU UbnkProjxLo
 128+ C063 00           UbnkProjyLo                 DB  0
 129+ C064 00           UbnkProjyHi                 DB  0
 130+ C065 00           UbnkProjySgn                DB  0
 131+ C066              UbnkProjy                   EQU UbnkProjyLo
 132+ C066 00           UbnkProjzLo                 DB  0
 133+ C067 00           UbnkProjzHi                 DB  0
 134+ C068 00           UbnkProjzSgn                DB  0
 135+ C069              UbnkProjz                   EQU UbnkProjzLo
 136+ C069              XX25                        EQU UbnkProjxLo
 137+ C069              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 138+ C069 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
 139+ C06A 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
 140+ C06B 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
 141+ C06C              UBnkDrawCam0x               equ UBnkDrawCam0xLo
 142+ C06C 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
 143+ C06D 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
 144+ C06E 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
 145+ C06F              UBnkDrawCam0y               equ UBnkDrawCam0yLo
 146+ C06F 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
 147+ C070 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
 148+ C071 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
 149+ C072              UBnkDrawCam0z               equ UBnkDrawCam0zLo
 150+ C072              XX18                        equ UBnkDrawCam0xLo
 151+ C072              ; Used to make 16 bit reads a little cleaner in source code
 152+ C072 00 00 00     UbnkZPoint                  DS  3
 153+ C075              UbnkZPointLo                equ UbnkZPoint
 154+ C075              UbnkZPointHi                equ UbnkZPoint+1
 155+ C075              UbnkZPointSign              equ UbnkZPoint+2
 156+ C075              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
 157+ C075 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
 158+ C076 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
 159+ C077 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
 160+ C078 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
 161+ C079 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
 162+ C07A 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
 163+ C07B
 164+ C07B              XX15                        equ UBnkXScaled
 165+ C07B              XX15VecX                    equ XX15
 166+ C07B              XX15VecY                    equ XX15+1
 167+ C07B              XX15VecZ                    equ XX15+2
 168+ C07B              UbnkXPoint                  equ XX15
 169+ C07B              UbnkXPointLo                equ XX15+0
 170+ C07B              UbnkXPointHi                equ XX15+1
 171+ C07B              UbnkXPointSign              equ XX15+2
 172+ C07B              UbnkYPoint                  equ XX15+3
 173+ C07B              UbnkYPointLo                equ XX15+3
 174+ C07B              UbnkYPointHi                equ XX15+4
 175+ C07B              UbnkYPointSign              equ XX15+5
 176+ C07B              ; Repurposed XX15 pre clip plines
 177+ C07B              UbnkPreClipX1               equ XX15+0
 178+ C07B              UbnkPreClipY1               equ XX15+2
 179+ C07B              UbnkPreClipX2               equ XX15+4
 180+ C07B              UbnkPreClipY2               equ XX15+6
 181+ C07B              ; Repurposed XX15 post clip lines
 182+ C07B              UBnkNewX1                   equ XX15+0
 183+ C07B              UBnkNewY1                   equ XX15+1
 184+ C07B              UBnkNewX2                   equ XX15+2
 185+ C07B              UBnkNewY2                   equ XX15+3
 186+ C07B              ; Repurposed XX15
 187+ C07B              regXX15fx                   equ UBnkXScaled
 188+ C07B              regXX15fxSgn                equ UBnkXScaledSign
 189+ C07B              regXX15fy                   equ UBnkYScaled
 190+ C07B              regXX15fySgn                equ UBnkYScaledSign
 191+ C07B              regXX15fz                   equ UBnkZScaled
 192+ C07B              regXX15fzSgn                equ UBnkZScaledSign
 193+ C07B              ; Repurposed XX15
 194+ C07B              varX1                       equ UBnkXScaled       ; Reused, verify correct position
 195+ C07B              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
 196+ C07B              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
 197+ C07B              ; After clipping the coords are two 8 bit pairs
 198+ C07B              UBnkPoint1Clipped           equ UBnkXScaled
 199+ C07B              UBnkPoint2Clipped           equ UBnkYScaled
 200+ C07B              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 201+ C07B              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 202+ C07B 00           UBnkXX12xLo                 DB  0               ; XX12+0
 203+ C07C 00           UBnkXX12xSign               DB  0               ; XX12+1
 204+ C07D 00           UBnkXX12yLo                 DB  0               ; XX12+2
 205+ C07E 00           UBnkXX12ySign               DB  0               ; XX12+3
 206+ C07F 00           UBnkXX12zLo                 DB  0               ; XX12+4
 207+ C080 00           UBnkXX12zSign               DB  0               ; XX12+5
 208+ C081 00 00 00...  XX12Save                    DS  6
 209+ C087 00 00 00...  XX12Save2                   DS  6
 210+ C08D              XX12                        equ UBnkXX12xLo
 211+ C08D              varXX12                     equ UBnkXX12xLo
 212+ C08D              ; Post clipping the results are now 8 bit
 213+ C08D 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
 214+ C08E
 215+ C08E 00           UBnkProjectedY              DB  0
 216+ C08F 00           UBnkProjectedX              DB  0
 217+ C090              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
 218+ C090 00 00 00...  XX15Save                    DS  8
 219+ C098 00 00 00...  XX15Save2                   DS  8
 220+ C0A0 00           VarBackface                 DB 0
 221+ C0A1              ; Heap (or array) information for lines and normals
 222+ C0A1              ; Coords are stored XY,XY,XY,XY
 223+ C0A1              ; Normals
 224+ C0A1              ; This needs re-oprganising now.
 225+ C0A1              ; Runtime Calculation Store
 226+ C0A1
 227+ C0A1              FaceArraySize               equ 30
 228+ C0A1              EdgeHeapSize                equ 40
 229+ C0A1              NodeArraySize               equ 40
 230+ C0A1              LineArraySize               equ 50
 231+ C0A1              ; Storage arrays for data
 232+ C0A1              ; Structure of arrays
 233+ C0A1              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
 234+ C0A1              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
 235+ C0A1              ; NodeArray         -  4 bytes per element      0           1            2          3
 236+ C0A1              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
 237+ C0A1              ; Line Array        -  4 bytes per eleement     0           1            2          3
 238+ C0A1              ;                                               X1          Y1           X2         Y2
 239+ C0A1 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
 240+ C0BF 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
 241+ C15F 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
 242+ C1FF 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
 243+ C2C7              UBnkLinesHeapMax            EQU $ - UbnkLineArray
 244+ C2C7 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
 245+ C2EF              ; Array current Lengths
 246+ C2EF 00           UbnkFaceVisArrayLen         DS 1
 247+ C2F0 00           UBnkNodeArrayLen            DS 1
 248+ C2F1 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
 249+ C2F2 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
 250+ C2F3              XX20                        equ UbnkLineArrayLen
 251+ C2F3              varXX20                     equ UbnkLineArrayLen
 252+ C2F3
 253+ C2F3
 254+ C2F3 00           UbnkEdgeHeapSize            DS 1
 255+ C2F4 00           UbnkEdgeHeapBytes           DS 1
 256+ C2F5 00           UBnkLinesHeapLen            DS 1
 257+ C2F6 00           UbnKEdgeHeapCounter         DS 1
 258+ C2F7 00           UbnKEdgeRadius              DS 1
 259+ C2F8 00           UbnKEdgeShipType            DS 1
 260+ C2F9 00           UbnKEdgeExplosionType       DS 1
 261+ C2FA
 262+ C2FA              ; Node heap is used to write out transformed Vertexs
 263+ C2FA
 264+ C2FA              ; Lines
 265+ C2FA 00 00 00     UBnkXX19                    DS  3
 266+ C2FD
 267+ C2FD
 268+ C2FD              ; Used to make 16 bit reads a little cleaner in source code
 269+ C2FD
 270+ C2FD
 271+ C2FD
 272+ C2FD              ; Repurposed XX15 when plotting lines
 273+ C2FD              ; Repurposed XX15 before calling clip routine
 274+ C2FD              UBnkX1                      equ XX15
 275+ C2FD              UBnKx1Lo                    equ XX15
 276+ C2FD              UBnKx1Hi                    equ XX15+1
 277+ C2FD              UBnkY1                      equ XX15+2
 278+ C2FD              UbnKy1Lo                    equ XX15+2
 279+ C2FD              UBnkY1Hi                    equ XX15+3
 280+ C2FD              UBnkX2                      equ XX15+4
 281+ C2FD              UBnkX2Lo                    equ XX15+4
 282+ C2FD              UBnkX2Hi                    equ XX15+5
 283+ C2FD              ; Repurposed XX12 when plotting lines
 284+ C2FD              UBnkY2                      equ XX12+0
 285+ C2FD              UbnKy2Lo                    equ XX12+0
 286+ C2FD              UBnkY2Hi                    equ XX12+1
 287+ C2FD              UBnkDeltaXLo                equ XX12+2
 288+ C2FD              UBnkDeltaXHi                equ XX12+3
 289+ C2FD              UBnkDeltaYLo                equ XX12+4
 290+ C2FD              UBnkDeltaYHi                equ XX12+5
 291+ C2FD              UbnkGradient                equ XX12+2
 292+ C2FD              UBnkTemp1                   equ XX12+2
 293+ C2FD              UBnkTemp1Lo                 equ XX12+2
 294+ C2FD              UBnkTemp1Hi                 equ XX12+3
 295+ C2FD              UBnkTemp2                   equ XX12+3
 296+ C2FD              UBnkTemp2Lo                 equ XX12+3
 297+ C2FD              UBnkTemp2Hi                 equ XX12+4
 298+ C2FD
 299+ C2FD              ;rotmatFx            equ rotmat0xHi
 300+ C2FD              ;rotmatFy            equ rotmat0yHi
 301+ C2FD              ;rotmatFz            equ rotmat0zHi
 302+ C2FD              ;rotmatUx            equ rotmat1xHi
 303+ C2FD              ;rotmatUy            equ rotmat1yHi
 304+ C2FD              ;rotmatUz            equ rotmat1zHi
 305+ C2FD
 306+ C2FD 00           UbnkShipType                DB  0
 307+ C2FE
 308+ C2FE 00 00 00...  UBnkHullCopy                DS  22
 309+ C314              ScoopDebrisAddr             equ UBnkHullCopy + 0
 310+ C314              MissileLockLoAddr           equ UBnkHullCopy + 1
 311+ C314              MissileLockHiAddr           equ UBnkHullCopy + 2
 312+ C314              EdgeAddyAddr                equ UBnkHullCopy + 3
 313+ C314              LineX4Addr                  equ UBnkHullCopy + 5
 314+ C314              GunVertexAddr               equ UBnkHullCopy + 6
 315+ C314              ExplosionCtAddr             equ UBnkHullCopy + 7
 316+ C314              VertexCtX6Addr              equ UBnkHullCopy + 8
 317+ C314              EdgeCountAddr               equ UBnkHullCopy + 9
 318+ C314              BountyLoAddr                equ UBnkHullCopy + 10
 319+ C314              BountyHiAddr                equ UBnkHullCopy + 11
 320+ C314              FaceCtX4Addr                equ UBnkHullCopy + 12
 321+ C314              DotAddr                     equ UBnkHullCopy + 13
 322+ C314              EnergyAddr                  equ UBnkHullCopy + 14
 323+ C314              SpeedAddr                   equ UBnkHullCopy + 15
 324+ C314              FaceAddyAddr                equ UBnkHullCopy + 16
 325+ C314              QAddr                       equ UBnkHullCopy + 18
 326+ C314              LaserAddr                   equ UBnkHullCopy + 19
 327+ C314              VerticesAddyAddr            equ UBnkHullCopy + 20
 328+ C314
 329+ C314              ; Static Ship Data. This is copied in when creating the universe object
 330+ C314              XX0                         equ UBnkHullCopy        ; general hull index pointer
 331+ C314 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 332+ C440 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 333+ C8F0 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 334+ CA1C 0C           OrthagCountdown             DB  12
 335+ CA1D
 336+ CA1D              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 337+ CA1D              UBnk_Data_len               EQU $ - StartOfUniv
 338+ CA1D
 339+ CA1D
 340+ CA1D 47           RequAby256DivQOLD:      ld      b,a ;.LL28  BFRDIV R=A*256/Q   byte from remainder of division
 341+ CA1E 3A 31 92                             ld      a,(varQ)
 342+ CA21 4F                                   ld      c,a
 343+ CA22 78                                   ld      a,b
 344+ CA23
 345+ CA23
 346+ CA23 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 347+ CA26 11 1D 0A                             ld      de,UBnk_Data_len
 348+ CA29 AF                                   xor     a
 349+ CA2A CD 39 8E                             call    memfill_dma
 350+ CA2D C9                                   ret
 351+ CA2E
 352+ CA2E              ;divdide by 16 using undocumented instrunctions
 353+ CA2E              ;Input: BC = Dividend, DE = Divisor, HL = 0
 354+ CA2E              ;Output: BC = Quotient, HL = Remainder
 355+ CA2E 47           PROJ256mulAdivQ:        ld      b,a
 356+ CA2F 0E 00                                ld      c,0
 357+ CA31 16 00                                ld      d,0
 358+ CA33 3A 31 92                             ld      a,(varQ)
 359+ CA36 5F                                   ld      e,a
 360+ CA37 21 00 00     PROJDIV16UNDOC:         ld      hl,0
 361+ CA3A 78                                   ld      a,b
 362+ CA3B 06 10                                ld      b,16
 363+ CA3D CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
 364+ CA3F 17                                   rla             ; ...
 365+ CA40 ED 6A                                adc     hl,hl       ; ...
 366+ CA42 ED 52                                sbc     hl,de       ; ...
 367+ CA44 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
 368+ CA46 19                                   add     hl,de       ; ...
 369+ CA47 0D                                   dec     c       ; ...
 370+ CA48 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
 371+ CA4A 79                                   ld      a,c
 372+ CA4B 32 32 92                             ld      (varR),a
 373+ CA4E C9                                   ret
 374+ CA4F              ;
 375+ CA4F                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 376+ CA4F              ;Output: BC = Quotient, HL = Remainder
 377+ CA4F
 378+ CA4F              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 379+ CA4F              ;OUTPUTS:   cahl = quotient cde = divisor
 380+ CA4F 32 D5 91     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 381+ CA52                                      ldCopy2Byte UbnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 381+ CA52 2A 11 C0    >               ld       hl,(UbnKzlo)
 381+ CA55 22 31 92    >               ld       (varQ),hl
 382+ CA58 3A 13 C0                             ld      a,(UBnKzsgn)                    ;
 383+ CA5B 32 33 92                             ld      (varS),a                        ; S = inkw z sign
 384+ CA5E ED 5B D3 91  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 385+ CA62 7B                                   ld      a,e                             ; num lo
 386+ CA63 F6 01                                or      1                               ; must be at least 1
 387+ CA65 32 D3 91                             ld      (varP),a                        ; store
 388+ CA68 5F                                   ld      e,a                             ; update DE too
 389+ CA69 3A D5 91                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 390+ CA6C 21 33 92                             ld      hl,varS                         ; hl = address of VarS
 391+ CA6F AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 392+ CA70 E6 80                                and     $80                             ;
 393+ CA72 32 4E 92                             ld      (varT),a                        ; T = Sign bit of A
 394+ CA75 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 395+ CA78 3A D5 91                             ld      a,(varPhi2)                     ;
 396+ CA7B E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 397+ CA7D              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 397+ CA7D FE 40       >                        cp     $40
 397+ CA7F D2 8D CA    >                        jp		nc,DV14
 398+ CA82                                      ShiftDELeft1                            ; de (or P,P1) > 1
 398+ CA82 CB 23       >			   sla e
 398+ CA84 CB 12       >			   rl  d
 399+ CA86 CB 17                                rl      a                               ; and accumulator as 3rd byte
 400+ CA88 FD 2C                                inc     iyl
 401+ CA8A C2 7D CA                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 402+ CA8D 32 D5 91     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 403+ CA90 ED 53 D3 91                          ld      (varP),de                       ; store off the value so far
 404+ CA94 3A 33 92                             ld      a,(varS)                        ; zsign
 405+ CA97 E6 7F                                and     $7F                             ; denom sg7
 406+ CA99                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 407+ CA99 2A 31 92                             ld      hl,(varQ)                       ; demon lo
 408+ CA9C FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 409+ CA9E                                      ShiftHLLeft1
 409+ CA9E CB 25       >			   sla l
 409+ CAA0 CB 14       >			   rl  h
 410+ CAA2 CB 17                                rl      a                               ; mulitply QRS by 2
 411+ CAA4 F2 9C CA                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 412+ CAA7 22 31 92     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 413+ CAAA 32 31 92                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 414+ CAAD 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 415+ CAAF 32 32 92                             ld      (varR),a                        ;  R
 416+ CAB2 3A D5 91                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 417+ CAB5 CD 2E CA                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 418+ CAB8 3E 00                                ld      a,0
 419+ CABA 32 F2 91                             ld      (varKp1),a
 420+ CABD 32 F3 91                             ld      (varKp2),a
 421+ CAC0 32 F4 91                             ld      (varKp3),a                      ; clear out K+1 to K+3
 422+ CAC3 FD 7D                                ld      a,iyl                           ; Y counter for scale
 423+ CAC5                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 423+ CAC5 CB 7F       >                        bit 	7,a
 423+ CAC7 CA F2 CA    >                        jp      z,DV12
 424+ CACA 3A 32 92                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 425+ CACD ED 5B F1 91                          ld      de,(varK)                       ; d= k1
 426+ CAD1 2A 49 92                             ld      hl,(varK2)                      ; h = k3, l = k2
 427+ CAD4 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 428+ CAD5 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 429+ CAD7 CB 12                                rl      d                               ; k1
 430+ CAD9 CB 15                                rl      l                               ; k2
 431+ CADB CB 14                                rl      h                               ; k3
 432+ CADD FD 2C                                inc     iyl
 433+ CADF 20 F4                                jr      nz,DVL8                         ;
 434+ CAE1 ED 53 F1 91  DVL8Save:               ld      (varK),de
 435+ CAE5 22 49 92                             ld      (varK2),hl                      ; save back K0 to k3
 436+ CAE8 3A 4E 92                             ld      a,(varT)
 437+ CAEB 4F                                   ld      c,a                             ; get varT into c reg
 438+ CAEC 7C                                   ld      a,h                             ; a= k3 (sign)
 439+ CAED B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 440+ CAEE 32 4F 92                             ld      (varK3),a                       ; load sign bit back into K3
 441+ CAF1 C9                                   ret
 442+ CAF2              DV12:                   IfAIsZeroGoto   DV13                    ; Y Count zerp, go to DV13
 442+ CAF2 FE 00       >				cp	0
 442+ CAF4 CA 0B CB    >				jp	z,DV13
 443+ CAF7 3A 32 92                             ld      a,(varR)                        ; Reduce Remainder
 444+ CAFA CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 445+ CAFC FD 2D                                dec     iyl
 446+ CAFE C2 FA CA                             jp      nz,DVL10                        ; loop y reduce until y is zero
 447+ CB01 32 F1 91                             ld      (varK),a                        ; k Lo
 448+ CB04                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 448+ CB04 3A 4E 92    >               ld       a,(varT)
 448+ CB07 32 F4 91    >               ld       (varKp3),a
 449+ CB0A C9                                   ret
 450+ CB0B              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 450+ CB0B 3A 32 92    >               ld       a,(varR)
 450+ CB0E 32 F1 91    >               ld       (varK),a
 451+ CB11                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 451+ CB11 3A 4E 92    >               ld       a,(varT)
 451+ CB14 32 F4 91    >               ld       (varKp3),a
 452+ CB17 C9                                   ret
 453+ CB18
 454+ CB18
 455+ CB18 CD 4F CA     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 456+ CB1B 3A F4 91                             ld      a,(varKp3)
 457+ CB1E E6 7F                                and     $7F
 458+ CB20 21 F3 91                             ld      hl,varKp2
 459+ CB23 B6                                   or      (hl)
 460+ CB24 C2 39 CB                             jp      nz,PL44TooBig
 461+ CB27 3A F2 91                             ld      a,(varKp1)
 462+ CB2A FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 463+ CB2C 30 0B                                jr      nc,PL44TooBig
 464+ CB2E                                      ClearCarryFlag                          ; we have a good result regardless
 464+ CB2E B7          >				or a
 465+ CB2F 2A F1 91                             ld      hl,(varK)                       ; get K (0 1)
 466+ CB32 3A F4 91                             ld      a,(varKp3)                      ; if sign bit high?
 467+ CB35 CB 7F                                bit     7,a
 468+ CB37 C8                                   ret     z                               ; no so we can just return
 469+ CB38 C9           PL44:                   ret
 470+ CB39 37           PL44TooBig:             scf
 471+ CB3A C9                                   ret
 472+ CB3B
 473+ CB3B              ;; calcs HLB + DEC where B and C are signs
 474+ CB3B              ;; result HL with A as sign
 475+ CB3B              ;; special handling if result is zero forcign sign bit to be zero
 476+ CB3B 78           ADDHLDESignBC:          ld      a,b
 477+ CB3C E6 80                                and     SignOnly8Bit
 478+ CB3E A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
 479+ CB3F                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
 479+ CB3F FA 4D CB    >                        jp		m,ADDHLDEsBCOppSGN
 480+ CB42 78           ADDHLDEsBCSameSigns:    ld      a,b
 481+ CB43 B1                                   or      c
 482+ CB44                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
 482+ CB44 FA 49 CB    >                        jp		m,ADDHLDEsBCSameNeg
 483+ CB47 19                                   add     hl,de                       ; both positive so a will already be zero
 484+ CB48 C9                                   ret
 485+ CB49 19           ADDHLDEsBCSameNeg:      add     hl,de
 486+ CB4A 78                                   ld      a,b
 487+ CB4B B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
 488+ CB4C C9                                   ret
 489+ CB4D B7           ADDHLDEsBCOppSGN:       or      a
 490+ CB4E ED 52                                sbc     hl,de
 491+ CB50 38 02                                jr      c,ADDHLDEsBCOppInvert
 492+ CB52 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
 493+ CB53 C9                                   ret
 494+ CB54              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
 494+ CB54 AF          >	xor a
 494+ CB55 95          >	sub l
 494+ CB56 6F          >	ld l,a
 494+ CB57 9F          >	sbc a,a
 494+ CB58 94          >	sub h
 494+ CB59 67          >	ld h,a
 495+ CB5A 78                                   ld      a,b
 496+ CB5B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 497+ CB5D C9                                   ret
 498+ CB5E
 499+ CB5E 7C           ADDHLDESignedv3:        ld      a,h
 500+ CB5F E6 80                                and     SignOnly8Bit
 501+ CB61 47                                   ld      b,a                         ;save sign bit in b
 502+ CB62 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 503+ CB63                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 503+ CB63 FA 7B CB    >                        jp		m,ADDHLDEOppSGN
 504+ CB66 78           ADDHLDESameSigns:       ld      a,b
 505+ CB67 B2                                   or      d
 506+ CB68                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 506+ CB68 FA 6D CB    >                        jp		m,ADDHLDESameNeg
 507+ CB6B 19                                   add     hl,de
 508+ CB6C C9                                   ret
 509+ CB6D 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 510+ CB6E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 511+ CB70 67                                   ld      h,a
 512+ CB71 7A                                   ld      a,d
 513+ CB72 E6 7F                                and     SignMask8Bit
 514+ CB74 57                                   ld      d,a
 515+ CB75 19                                   add     hl,de
 516+ CB76 3E 80                                ld      a,SignOnly8Bit
 517+ CB78 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 518+ CB79 67                                   ld      h,a
 519+ CB7A C9                                   ret
 520+ CB7B 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 521+ CB7C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 522+ CB7E 67                                   ld      h,a
 523+ CB7F 7A                                   ld      a,d
 524+ CB80 E6 7F                                and     SignMask8Bit
 525+ CB82 57                                   ld      d,a
 526+ CB83 B7                                   or      a
 527+ CB84 ED 52                                sbc     hl,de
 528+ CB86 38 04                                jr      c,ADDHLDEOppInvert
 529+ CB88 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 530+ CB89 B4                                   or      h
 531+ CB8A 67                                   ld      h,a                         ; set the previou sign value
 532+ CB8B C9                                   ret
 533+ CB8C              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 533+ CB8C AF          >	xor a
 533+ CB8D 95          >	sub l
 533+ CB8E 6F          >	ld l,a
 533+ CB8F 9F          >	sbc a,a
 533+ CB90 94          >	sub h
 533+ CB91 67          >	ld h,a
 534+ CB92 78                                   ld      a,b
 535+ CB93 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 536+ CB95 B4                                   or      h
 537+ CB96 67                                   ld      h,a                         ; recover sign
 538+ CB97 C9                                   ret
 539+ CB98
 540+ CB98              ; we could cheat, flip the sign of DE and just add but its not very optimised
 541+ CB98 7C           SUBHLDESignedv3:        ld      a,h
 542+ CB99 E6 80                                and     SignOnly8Bit
 543+ CB9B 47                                   ld      b,a                         ;save sign bit in b
 544+ CB9C AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 545+ CB9D                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 545+ CB9D FA CB CB    >                        jp		m,SUBHLDEOppSGN
 546+ CBA0 78           SUBHLDESameSigns:       ld      a,b
 547+ CBA1 B2                                   or      d
 548+ CBA2                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 548+ CBA2 FA AC CB    >                        jp		m,SUBHLDESameNeg
 549+ CBA5 B7                                   or      a
 550+ CBA6 ED 52                                sbc     hl,de
 551+ CBA8                                      JumpIfNegative SUBHLDESameOvrFlw
 551+ CBA8 FA BF CB    >                        jp		m,SUBHLDESameOvrFlw
 552+ CBAB C9                                   ret
 553+ CBAC 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 554+ CBAD E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 555+ CBAF 67                                   ld      h,a
 556+ CBB0 7A                                   ld      a,d
 557+ CBB1 E6 7F                                and     SignMask8Bit
 558+ CBB3 57                                   ld      d,a
 559+ CBB4 B7                                   or      a
 560+ CBB5 ED 52                                sbc     hl,de
 561+ CBB7                                      JumpIfNegative SUBHLDESameOvrFlw
 561+ CBB7 FA BF CB    >                        jp		m,SUBHLDESameOvrFlw
 562+ CBBA 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 563+ CBBB F6 80                                or      SignOnly8Bit
 564+ CBBD 67                                   ld      h,a
 565+ CBBE C9                                   ret
 566+ CBBF              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 566+ CBBF AF          >	xor a
 566+ CBC0 95          >	sub l
 566+ CBC1 6F          >	ld l,a
 566+ CBC2 9F          >	sbc a,a
 566+ CBC3 94          >	sub h
 566+ CBC4 67          >	ld h,a
 567+ CBC5 78                                   ld      a,b
 568+ CBC6 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 569+ CBC8 B4                                   or      h
 570+ CBC9 67                                   ld      h,a                         ; recover sign
 571+ CBCA C9                                   ret
 572+ CBCB B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 573+ CBCC 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 574+ CBCD E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 575+ CBCF 67                                   ld      h,a
 576+ CBD0 7A                                   ld      a,d
 577+ CBD1 E6 7F                                and     SignMask8Bit
 578+ CBD3 57                                   ld      d,a
 579+ CBD4 19                                   add     hl,de
 580+ CBD5 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 581+ CBD6 B4                                   or      h
 582+ CBD7 67                                   ld      h,a                         ; set the previou sign value
 583+ CBD8 C9                                   ret
 584+ CBD9
 585+ CBD9
 586+ CBD9              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 586+ CBD9 CB 7C       >                        bit 	7,h
 586+ CBDB C2 EC CB    >                        jp      nz,SBCHLDEhlNeg
 587+ CBDE              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 587+ CBDE CB 7C       >                        bit 	7,h
 587+ CBE0 C2 EC CB    >                        jp      nz,SBCHLDEhlNeg
 588+ CBE3 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 589+ CBE5 C9                                   ret
 590+ CBE6 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 591+ CBE8 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 592+ CBE9 CB FA                                set     7,d
 593+ CBEB C9                                   ret
 594+ CBEC CB BC        SBCHLDEhlNeg:           res     7,h
 595+ CBEE                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 595+ CBEE CB 7A       >                        bit 	7,d
 595+ CBF0 C2 F8 CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 596+ CBF3 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 597+ CBF5 CB FC                                set     7,h
 598+ CBF7 C9                                   ret
 599+ CBF8 CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 600+ CBFA 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 601+ CBFB CB FA                                set     7,d
 602+ CBFD CB FC                                set     7,h
 603+ CBFF C9                                   ret
 604+ CC00
 605+ CC00              ; Roate around axis
 606+ CC00              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 607+ CC00              ; so the axis x1 points to roofv  x , y or z
 608+ CC00              ;             x2           nosev or sidev  x, y or z
 609+ CC00              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 610+ CC00              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 611+ CC00              ; var RAT2 gives direction
 612+ CC00              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 613+ CC00              ;-Set up S R -----------------------------------------
 614+ CC00              ; optimised we don't deal with sign here just the value of roof axis / 512
 615+ CC00 2A 58 91     MVS5XRotateXAxis:       ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 616+ CC03 5E                                   ld      e,(hl)
 617+ CC04 23                                   inc     hl
 618+ CC05 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 619+ CC06 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 620+ CC07 7C                                   ld      a,h
 621+ CC08 E6 80                                and     SignOnly8Bit
 622+ CC0A FD 67                                ld      iyh,a           ; iyh = sign Axis1
 623+ CC0C 7C                                   ld      a,h
 624+ CC0D E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 625+ CC0F CB 3F                                srl     a               ; a = Axis1/2
 626+ CC11 5F                                   ld      e,a             ;
 627+ CC12 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 628+ CC14 57                                   ld      d,a             ; de = signed Axis1 / 512
 629+ CC15 B7                                   or      a               ; clear carry
 630+ CC16 CD 98 CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 631+ CC19              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 632+ CC19 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 633+ CC1A 7D                                   ld      a,l
 634+ CC1B 32 32 92                             ld      (varR),a
 635+ CC1E 7C                                   ld      a,h
 636+ CC1F 32 33 92                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 637+ CC22              ;-calculate roofv latter half of calc
 638+ CC22 2A 5A 91                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 639+ CC25 5E                                   ld      e,(hl)
 640+ CC26 23                                   inc     hl
 641+ CC27 56                                   ld      d,(hl)          ; de = value of roof axis
 642+ CC28 7A                                   ld      a,d
 643+ CC29 E6 80                                and     SignOnly8Bit
 644+ CC2B FD 67                                ld      iyh,a           ; save sign
 645+ CC2D 7A                                   ld      a,d
 646+ CC2E E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 647+ CC30 57                                   ld      d,a             ; de = abs (nosev)
 648+ CC31                                      ShiftDERight1
 648+ CC31 CB 3A       >			   srl d
 648+ CC33 CB 1B       >			   rr  e
 649+ CC35                                      ShiftDERight1
 649+ CC35 CB 3A       >			   srl d
 649+ CC37 CB 1B       >			   rr  e
 650+ CC39                                      ShiftDERight1
 650+ CC39 CB 3A       >			   srl d
 650+ CC3B CB 1B       >			   rr  e
 651+ CC3D                                      ShiftDERight1           ; de = nosev /16 unsigned
 651+ CC3D CB 3A       >			   srl d
 651+ CC3F CB 1B       >			   rr  e
 652+ CC41 3A 48 92                             ld      a,(varRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 653+ CC44 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 654+ CC46 E6 80                                and     SignOnly8Bit
 655+ CC48 B2                                   or      d
 656+ CC49 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 657+ CC4A              ;;; ld      a,e
 658+ CC4A              ;;;     or      iyh
 659+ CC4A              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 660+ CC4A              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 661+ CC4A E1                                   pop     hl              ; get back RS POP ID 1
 662+ CC4B                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 663+ CC4B              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 664+ CC4B CD 5E CB                             call    ADDHLDESignedv3 ; do add using hl and de
 665+ CC4E E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 666+ CC4F              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 667+ CC4F              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 668+ CC4F 2A 5A 91                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 669+ CC52 5E                               ld      e,(hl)
 670+ CC53 23                               inc     hl
 671+ CC54 56                               ld      d,(hl)
 672+ CC55 EB                               ex      de,hl
 673+ CC56 7C                               ld      a,h
 674+ CC57 E6 80                            and     $80
 675+ CC59 FD 67                            ld      iyh,a
 676+ CC5B 7C                               ld      a,h
 677+ CC5C E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 678+ CC5E CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 679+ CC60 5F                               ld      e,a
 680+ CC61 FD 7C                            ld      a,iyh
 681+ CC63 57                               ld      d,a
 682+ CC64 B7                               or      a               ; clear carry
 683+ CC65 CD 98 CB                         call    SUBHLDESignedv3
 684+ CC68              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 685+ CC68 E5                               push    hl              ; save hl on stack  PUSH ID 3
 686+ CC69 7D                               ld      a,l
 687+ CC6A 32 D3 91                         ld      (varP),a        ; p = low of resuilt
 688+ CC6D 7C                               ld      a,h
 689+ CC6E E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 690+ CC70 32 4E 92                         ld      (varT),a        ; t = high of result
 691+ CC73              ;-- Set up TQ
 692+ CC73 2A 58 91                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 693+ CC76              ;   ld      hl,(varAxis2)   ; work on nosev again
 694+ CC76 5E                               ld      e,(hl)
 695+ CC77 23                               inc     hl
 696+ CC78 56                               ld      d,(hl)
 697+ CC79 7A                               ld      a,d
 698+ CC7A E6 80                            and     $80
 699+ CC7C FD 67                            ld      iyh,a           ; save sign
 700+ CC7E 7A                               ld      a,d
 701+ CC7F E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 702+ CC81 57                               ld      d,a             ; de = abs (nosev)
 703+ CC82                                  ShiftDERight1
 703+ CC82 CB 3A       >			   srl d
 703+ CC84 CB 1B       >			   rr  e
 704+ CC86                                  ShiftDERight1
 704+ CC86 CB 3A       >			   srl d
 704+ CC88 CB 1B       >			   rr  e
 705+ CC8A                                  ShiftDERight1
 705+ CC8A CB 3A       >			   srl d
 705+ CC8C CB 1B       >			   rr  e
 706+ CC8E                                  ShiftDERight1           ; de = nosev /16 unsigned
 706+ CC8E CB 3A       >			   srl d
 706+ CC90 CB 1B       >			   rr  e
 707+ CC92 3A 48 92                         ld      a,(varRAT2)
 708+ CC95 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 709+ CC97 E6 80                            and     $80
 710+ CC99 B2                               or      d
 711+ CC9A 57                               ld      d,a
 712+ CC9B              ;;; ld      a,e
 713+ CC9B              ;;;     or      iyh
 714+ CC9B              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 715+ CC9B E1                               pop     hl              ; get back RS   POP ID 3
 716+ CC9C              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 717+ CC9C CD 98 CB                         call    SUBHLDESignedv3 ; do add using hl and de
 718+ CC9F              ;-- Update nosev ---------------------------------------
 719+ CC9F EB                               ex      de,hl           ; save hl to de
 720+ CCA0 2A 5A 91                         ld      hl,(varAxis2)
 721+ CCA3 73                               ld      (hl),e
 722+ CCA4 23                               inc     hl
 723+ CCA5 72                               ld      (hl),d          ; copy result into nosev
 724+ CCA6              ;-- Update roofv ---------------------------------------
 725+ CCA6 D1                               pop     de              ; get calc saved on stack POP ID 2
 726+ CCA7 2A 58 91                         ld      hl,(varAxis1)
 727+ CCAA 73                               ld      (hl),e
 728+ CCAB 23                               inc     hl
 729+ CCAC 72                               ld      (hl),d          ; copy result into nosev
 730+ CCAD C9                               ret
 731+ CCAE
 732+ CCAE                                  include "Universe/InitialiseOrientation.asm"
# file opened: ./Universe/InitialiseOrientation.asm
   1++CCAE              InitialiseOrientation:
   2++CCAE              ZI1:
   3++CCAE              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CCAE              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CCAE              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   6++CCAE 21 00 00         ld      hl, 0
   7++CCB1 22 16 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CCB4 22 18 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CCB7 22 1A C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CCBA 22 1E C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CCBD 22 20 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CCC0 22 22 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CCC3 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CCC6                  ;ld      hl,1
  15++CCC6 22 14 C0         ld      (UBnkrotmatSidevX),hl
  16++CCC9 22 1C C0         ld      (UBnkrotmatRoofvY),hl
  17++CCCC 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCCF 22 24 C0         ld      (UBnkrotmatNosevZ),hl
  19++CCD2 C9               ret
  20++CCD3
# file closed: ./Universe/InitialiseOrientation.asm
 733+ CCD3              ;----------------------------------------------------------------------------------------------------------------------------------
 734+ CCD3              OrientateVertex:
 735+ CCD3
 736+ CCD3              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 737+ CCD3              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 738+ CCD3              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 739+ CCD3              ;
 740+ CCD3
 741+ CCD3              ;----------------------------------------------------------------------------------------------------------------------------------
 742+ CCD3              TransposeVertex:
 743+ CCD3              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 744+ CCD3              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 745+ CCD3              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 746+ CCD3              VectorToVertex:
 747+ CCD3              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 748+ CCD3              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 749+ CCD3              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 750+ CCD3
 751+ CCD3              Project:
 752+ CCD3 2A 0B C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 753+ CCD6 22 D3 91                             ld      (varP),hl
 754+ CCD9 3A 0D C0                             ld      a,(UBnKxsgn)
 755+ CCDC CD 18 CB                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 756+ CCDF D8                                   ret     c                               ; carry means don't print
 757+ CCE0 2A F1 91                             ld      hl,(varK)                       ; hl = k (0 1)
 758+ CCE3                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 759+ CCE3 3E 80                                ld      a,ViewCenterX
 760+ CCE5 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 761+ CCE7 22 4F 92                             ld      (varK3),hl                      ; K3 = X position on screen
 762+ CCEA 2A 0E C0     ProjectY:               ld      hl,(UBnKylo)
 763+ CCED 22 D3 91                             ld      (varP),hl
 764+ CCF0 3A 10 C0                             ld      a,(UBnKysgn)
 765+ CCF3 CD 18 CB                             call    PLS6
 766+ CCF6 D8                                   ret     c
 767+ CCF7 2A F1 91                             ld      hl,(varK)                       ; hl = k (0 1)
 768+ CCFA 3E 40                                ld      a,ViewCenterY
 769+ CCFC ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 770+ CCFE 22 51 92                             ld      (varK4),hl                      ; K3 = X position on screen
 771+ CD01 C9                                   ret
 772+ CD02              ;--------------------------------------------------------------------------------------------------------
 773+ CD02                                      include "ModelRender/EraseOldLines-EE51.asm"
# file opened: ./ModelRender/EraseOldLines-EE51.asm
   1++CD02              ;
   2++CD02              ; EraseOldLines:
   3++CD02              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CD02              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CD02              ;	 	loop + 4
   6++CD02              ; Return
   7++CD02
   8++CD02              EraseOldLines:
   9++CD02              EE51:										; if bit3 set draw lines in XX19 heap
  10++CD02              	ReturnOnMemBitClear UBnkexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CD02 3A 2A C0    >                        ld     a,(UBnkexplDsp)
  10++CD05 CB 5F       >                        bit 	3,a
  10++CD07 C8          >                        ret		z
  11++CD08 CB DF        	set		3,a
  12++CD0A 32 2A C0     	ld		(UBnkexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CD0D C3 CE E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD10              ; We use the ret from the clearLines so not needed here
  15++CD10
# file closed: ./ModelRender/EraseOldLines-EE51.asm
 774+ CD10                                      include "ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ./ModelRender/TrimToScreenGrad-LL118.asm
   1++CD10              ;TrimToScreenGrad:
   2++CD10              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD10              ;ret
   4++CD10              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD10              ;TODO        bit     7,a
   6++CD10              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD10              ;TODO        ld      a,h
   8++CD10              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD10              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD10              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD10
  12++CD10              ;18                      CLC
  13++CD10              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD10              ;85 36                   STA &36			 \ XX15+2
  15++CD10              ;98                      TYA 			 \ step Y1 hi
  16++CD10              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD10              ;85 37                   STA &37			 \ XX15+3
  18++CD10              ;A9 00                   LDA #0			 \ xleft min
  19++CD10              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD10              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD10              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD10              ;	.LL119	\ x1 hi +ve from LL118
  23++CD10              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD10              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD10              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD10              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD10              ;8A                      TXA 			 \ step Y1 lo
  28++CD10              ;18                      CLC
  29++CD10              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD10              ;85 36                   STA &36			 \ XX15+2
  31++CD10              ;98                      TYA 			 \ step Y1 hi
  32++CD10              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD10              ;85 37                   STA &37			 \ XX15+3
  34++CD10              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD10              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD10              ;E8                      INX 			 \ X = 0
  37++CD10              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD10              ;	.LL134	\ Ytrim
  39++CD10              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD10              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD10              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD10              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD10              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD10              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD10              ;8A                      TXA 			 \ step X1 lo
  46++CD10              ;18                      CLC
  47++CD10              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD10              ;85 34                   STA &34			 \ XX15+0
  49++CD10              ;98                      TYA 			 \ step X1 hi
  50++CD10              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD10              ;85 35                   STA &35			 \ XX15+1
  52++CD10              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD10              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD10              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD10              ;	.LL135	\ y1 hi +ve from LL134
  56++CD10              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD10              ;38                      SEC
  58++CD10              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD10              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD10              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD10              ;E9 00                   SBC #0			 \ any hi
  62++CD10              ;85 83                   STA &83			 \ S
  63++CD10              ;90 16                   BCC LL136		 \ failed, rts
  64++CD10              ;	.LL139
  65++CD10              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD10              ;8A                      TXA 			 \ step X1 lo
  67++CD10              ;18                      CLC
  68++CD10              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD10              ;85 34                   STA &34			 \ XX15+0
  70++CD10              ;98                      TYA 			 \ step X1 hi
  71++CD10              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD10              ;85 35                   STA &35			 \ XX15+1
  73++CD10              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD10              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD10              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD10              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD10              ;	.LL136	\ rts
  78++CD10              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD10              ;
  80++CD10
# file closed: ./ModelRender/TrimToScreenGrad-LL118.asm
 775+ CD10                                      include "ModelRender/CLIP-LL145.asm"
# file opened: ./ModelRender/CLIP-LL145.asm
   1++CD10              ;--------------------------------------------------------------------------------------------------------------------
   2++CD10              ; and final optmistation to:
   3++CD10              ; if x1 =x2 go to simpleverticalclip
   4++CD10              ; if y1 =y2 go to simplehorizontalclip
   5++CD10              ; if x1 and x2 on screen (high byte of both = 0)  then go to YPointsTest
   6++CD10              ;                        else if x1 > x2 then swap point1 & point 2
   7++CD10              ;                             if x1 is negative then if x2 is negative then no draw exit
   8++CD10              ;                                                                      else go to x1outofboundsclip else x1 must be on screen
   9++CD10              ;                             if x2 byte 2 not zero go to x2outofboundsclip
  10++CD10              ;YPointsTest:
  11++CD10              ; if y1 and y2 both on screen go to ClippingDone:
  12++CD10              ; if y1 high byte set then  go to y1outofboundsclip
  13++CD10              ;                     else  go to y2outofboundsclip as y2 must be high byte now
  14++CD10              ;ClippingDone:
  15++CD10              ; clipping DONE as none required
  16++CD10              ; x1outofboundsclip:
  17++CD10              ;    y1 = y1 + ( dyx  * ABS(x1))
  18++CD10              ;    x1 = 0
  19++CD10              ;    fall into x2outofboundsclip
  20++CD10              ; x2outofboundsclip:
  21++CD10              ;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
  22++CD10              ;                            y1 = 0
  23++CD10              ;                      else if y1 > 128 then y1 = 128
  24++CD10              ;                                            x1 = x1 + (dxy * (128-y1))
  25++CD10              ;    if x2 > 255 then y2 = y2 - (dxy * (255−x2))
  26++CD10              ;                     x2 = 255
  27++CD10              ;    end if
  28++CD10              ;    goto  y2outofboundsclip
  29++CD10              ; y1outofboundsclip - to get to here x1 and x2 must be on screen
  30++CD10              ;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
  31++CD10              ;                            y1 = 0
  32++CD10              ;                      else if y1 > 128 then x1 = x1 - (dxy * (128-y1))
  33++CD10              ;                                            y1 = 128
  34++CD10              ;
  35++CD10              ;    fall into y2outofboundsclip
  36++CD10              ; y2outofboundsclip - to get to here x1 and x2 must be on screen and y1
  37++CD10              ;    if y2 is negative then  x2 = x2 + (dxy * ABS(y2))
  38++CD10              ;                            y2 = 0
  39++CD10              ;                      else  if y2 > 128 then x2 = x2 - (dxy * (128-y2))
  40++CD10              ;                                             y2 = 128
  41++CD10              ;     clipping DONE
  42++CD10              ; simpleverticalclip
  43++CD10              ;    if y1 < 0 then y1 = 0
  44++CD10              ;       else if y1 > 128 then y1 = 128
  45++CD10              ;    if y2 < 0 then y2 = 0
  46++CD10              ;       else if y2 > 128 then y2 = 128
  47++CD10              ; simplehorizontalclip
  48++CD10              ;     if x1 < 0 then x1 = 0
  49++CD10              ;        else if x1 high byte set just use low byte
  50++CD10              ;     if x2 < 0 then x2 = 0
  51++CD10              ;        else if x2 high byte set just use low byte
  52++CD10              ;     clipping DONE
  53++CD10              ;----------------------------------------------------------------------------------------------------------------------------------
  54++CD10              ; All the code is unwrapped where ever possible as this routine will be called for every line on every frame draw
  55++CD10              ; it still needs some optimisation as its repeatedly checking bounds so assumptions can be made
  56++CD10              ;LL145	 CLIP  XX15 XX12 line BLINE etc. waiting for (X1,Y1), (X2,Y2) to draw a line.
  57++CD10              ; Before clipping,  XX15(0,1) was x1.  XX15(2,3) was y1. XX15(4,5) was x2. XX12(0,1) was y2.
  58++CD10 00 00        clipDx                  DW      0
  59++CD12 00 00        clipDy                  DW      0
  60++CD14 00 00        clipDxy                 DW      0
  61++CD16 00           clipDxySign             DB      0
  62++CD17 00 00        clipDyx                 DW      0
  63++CD19 00           clipDyxSign             DB      0
  64++CD1A              CLIP:
  65++CD1A              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  66++CD1A              ClipXX15XX12Line:
  67++CD1A ED 4B 77 C0  ClipV2:                 ld      bc,(UbnkPreClipY1)
  68++CD1E DD 2A 7B C0                          ld      ix,(UbnkPreClipY2+0)
  69++CD22 2A 75 C0                             ld      hl,(UbnkPreClipX1)
  70++CD25 ED 5B 79 C0                          ld      de,(UbnkPreClipX2)
  71++CD29                                     ; break
  72++CD29 7C           .OnScreenTest:          ld      a,h
  73++CD2A FE 00                                cp      0
  74++CD2C 28 1D                                jr      z,.OnScreenYTest
  75++CD2E ED 27 80                             test    $80
  76++CD31 28 0D                                jr      z,.OnScreenX1Positive
  77++CD33 7A           .OnScreenX1Negative:    ld      a,d
  78++CD34 FE 00                                cp      0
  79++CD36 28 13                                jr      z,.OnScreenYTest
  80++CD38 ED 27 80                             test    $80
  81++CD3B C2 A6 CE                             jp      nz, .PointsOutofBounds          ; x1 and x2 are both negative so out of bounds
  82++CD3E 18 0B                                jr      .OnScreenYTest
  83++CD40 7A           .OnScreenX1Positive:    ld      a,d
  84++CD41 FE 00                                cp      0
  85++CD43 28 06                                jr      z,.OnScreenYTest
  86++CD45 ED 27 80                             test    $80
  87++CD48 CA A6 CE                             jp      z,  .PointsOutofBounds          ; x1 and x2 are both high positive so out of bounds
  88++CD4B              ; For Y1 & Y2 if both negative that is a quick fail, then if Y1 and Y2 are not zero, quick fail
  89++CD4B 78           .OnScreenYTest:         ld      a,b
  90++CD4C ED 27 80                             test    $80
  91++CD4F 20 24                                jr      nz,.OnScreenY1Negative
  92++CD51              ; as Y1 is positive, then see if its > 256
  93++CD51 FE 00        .OnScreenY1GTE0:        cp      0                               ; if y1 > 256
  94++CD53 28 17                                jr      z,.OnScreenY1LT256              ; if noth then do the 128 test
  95++CD55              ; here y1 > 256 so if y2 is < 128 then we can clip
  96++CD55 DD 7C        .OnScreenY1GTE0TestY2:  ld      a,ixh
  97++CD57 ED 27 80                             test    $80                             ; y1 is > 256 test as y2 may be negative
  98++CD5A 20 23                                jr      nz,.HorizontalTest
  99++CD5C FE 00                                cp      0                               ; y1 is > 256 y2 may be >256 but
 100++CD5E C2 A6 CE                             jp      nz, .PointsOutofBounds          ; y1 and y2 > 256 so off screen
 101++CD61 DD 7D                                ld      a,ixl
 102++CD63 ED 27 80                             test    $80
 103++CD66 CA 7F CD                             jp      z,  .HorizontalTest             ; if y1 > 256 and y2 < 128 then we can clip
 104++CD69 C3 A6 CE                             jp      .PointsOutofBounds              ; here y1 >256 and y2 >= 128
 105++CD6C              ; if we get here then y1 > 0 and <256
 106++CD6C 79           .OnScreenY1LT256:       ld      a,c
 107++CD6D ED 27 80                             test    $80
 108++CD70 20 E3                                jr      nz ,.OnScreenY1GTE0TestY2       ; if y1 > 127 and < 256 then act as if Y1 > 256
 109++CD72 C3 7F CD                             jp      .HorizontalTest                 ; y1 > 0 and < 128 so we can clip
 110++CD75              ; here y1 < 0 so we just need to know if y2 is negative or not
 111++CD75 DD 7C        .OnScreenY1Negative:    ld      a,ixh
 112++CD77 ED 27 80                             test    $80
 113++CD7A C2 A6 CE                             jp      nz, .PointsOutofBounds          ; y1 and y2 are both negative so out of bounds
 114++CD7D 18 00                                jr      .HorizontalTest                 ; y1 is negative and y2 positive and may be > 128 but we don't care here
 115++CD7F 7C           .HorizontalTest:        ld      a,h
 116++CD80 B2                                   or      d
 117++CD81 B0                                   or      b
 118++CD82 DD B4                                or      ixh
 119++CD84 20 0B                                jr      nz,.TestHorizontalVertical
 120++CD86 79                                   ld      a,c
 121++CD87 DD B5                                or      ixl
 122++CD89 ED 27 80                             test    $80
 123++CD8C 20 03                                jr      nz,.TestHorizontalVertical
 124++CD8E C3 93 CE                             jp      .ClipDone
 125++CD91              ;...By this point at least one point is off screen but we have not established if there is any bounding on screen
 126++CD91 7D           .TestHorizontalVertical:ld      a,l                                 ; if x1 =x2 go to simpleverticalclip
 127++CD92 BB                                   cp      e
 128++CD93 20 05                                jr      nz,.NonVertical
 129++CD95 7C                                   ld      a,h
 130++CD96 BA                                   cp      d
 131++CD97 CA 72 CF                             jp      z,.ClipVertical
 132++CD9A DD 7D        .NonVertical:           ld      a,ixl                               ; if y1 =y2 go to simplehorizontalclip
 133++CD9C B9                                   cp      c
 134++CD9D 20 06                                jr      nz,.SwapTest
 135++CD9F DD 7C                                ld      a,ixh
 136++CDA1 B8                                   cp      b
 137++CDA2 CA B7 CF                             jp      z,.ClipHorizonal
 138++CDA5              ;...By here we have done a fast horizontal or vert clip, elimiated all on screen now elimiate off same side, thisis done in swap test...................
 139++CDA5 7C           .SwapTest:              ld      a,h                                 ; so now x1 must be > 255 or x1 < 0 so  is x1 negative?
 140++CDA6 FE 00                                cp      0
 141++CDA8 28 1D                                jr      z,.X1InBounds                       ; X1 is on screen so is X2 < or >
 142++CDAA ED 27 80                             test    $80                                 ; is x1 negative
 143++CDAD 28 09                                jr      z,.X1HighTest
 144++CDAF 7A           .X1LowX2Test:           ld      a,d                                 ; if both X1 and X2 are negative them out of bounds
 145++CDB0 ED 27 80                             test    $80
 146++CDB3 C2 A6 CE                             jp      nz,.PointsOutofBounds               ; if x1 and x2 are negative no line required
 147++CDB6 18 2F                                jr      .SwappedDone                        ; so x1 must be < x2
 148++CDB8 7A           .X1HighTest:            ld      a,d                                 ; x1 is high  so if x2 has no high byte then swap
 149++CDB9 FE 00                                cp      0
 150++CDBB CA D6 CD                             jp      z,.SwapPoints
 151++CDBE ED 27 80                             test    $80
 152++CDC1 C2 A6 CE                             jp      nz,.PointsOutofBounds               ; if x2 is not negative then both off right of screen
 153++CDC4 C3 D6 CD                             jp      .SwapPoints                         ; so x2 must be less than X1
 154++CDC7 7A           .X1InBounds:            ld      a,d                                 ; so x1 >0 < 255 now we test X2
 155++CDC8 ED 27 80                             test    $80
 156++CDCB 20 09                                jr      nz,.SwapPoints                      ; so X1 +v and X2 -ve so we can swap
 157++CDCD FE 00                                cp      0                                   ; X2 is < 255
 158++CDCF 20 16                                jr      nz,.SwappedDone                     ; so x2 > 255 and X1 on screen therefore no swap needed
 159++CDD1 7D                                   ld      a,l
 160++CDD2                                      JumpIfALTNusng e,.SwappedDone               ; Now X1 an dX2 are on screen, is X1 < X2 is so no swap
 160++CDD2 BB          >                        cp      e
 160++CDD3 DA E7 CD    >                        jp		c,.SwappedDone
 161++CDD6              ; we swap so x1 < x2, this means x2 - x1 is positive eliminating some branches in the code
 162++CDD6              .SwapPoints:
 163++CDD6 EB           .SwapCanProceed:        ex      de,hl                               ; here x1 > 255 and x2 must be <=255 so we swap
 164++CDD7 DD E5                                push    ix                                  ;                                        swap Y coordinates
 165++CDD9 C5                                   push    bc
 166++CDDA DD E1                                pop     ix
 167++CDDC C1                                   pop     bc
 168++CDDD 18 08                                jr      .SwappedDone
 169++CDDF 7A           .X1negative:            ld      a,d                                 ; now now x1 must be < 0
 170++CDE0 E6 80                                and     $80
 171++CDE2 CA A6 CE                             jp      z,.PointsOutofBounds                ; both negative so out of bounds
 172++CDE5 18 00                                jr      .SwappedDone                        ; no swapping needed as x1 < 0 and to be in still not discarded x2 must be >0
 173++CDE7              ;..................................................................................................................................
 174++CDE7 E5 D5 C5     .SwappedDone:           push    hl,,de,,bc
 175++CDEA EB           .CalcDx:                ex      de,hl                               ; now calculate delta x of x2-x1
 176++CDEB B7                                   or      a
 177++CDEC ED 52                                sbc     hl,de                               ; x2 - x1 which mut always be positive
 178++CDEE 22 10 CD                             ld      (clipDx),hl
 179++CDF1 DD E5 E1     .CalcDy:                ld      hl,ix
 180++CDF4 B7                                   or      a
 181++CDF5 ED 42                                sbc     hl,bc
 182++CDF7 22 12 CD                             ld      (clipDy),hl                         ; now we have signed Dy
 183++CDFA              ; If the angle is extreme then it will be clamped at +/- 127.255 - given it has to fit on the screen from 3d maths is it unlikley to hit extremes
 184++CDFA              ; note as we sort then dxy must always be +ve
 185++CDFA 2A 10 CD     .CalcDxy:               ld      hl,(clipDx)
 186++CDFD ED 5B 12 CD                          ld      de,(clipDy)
 187++CE01 7A           .PosXCalcDxy:           ld      a,d                                 ; is Dy positive or negative
 188++CE02 ED 27 80                             test     $80                                ;
 189++CE05 28 06                                jr      z,.PosYCalcDxy                      ;
 190++CE07                                      macronegate16de
 190++CE07 AF          >					xor 	a
 190++CE08 93          >                    sub 	e
 190++CE09 5F          >                    ld 		e,a
 190++CE0A 9F          >                    sbc 	a,a
 190++CE0B 92          >                    sub 	d
 190++CE0C 57          >                    ld 		d,a
 191++CE0D 45           .PosYCalcDxy:           ld      b,l                                 ; calculate divide
 192++CE0E 0E 00                                ld      c,0
 193++CE10 53                                   ld      d,e
 194++CE11 1E 00                                ld      e,0
 195++CE13 CD 01 A1                             call    BC_Div_DE_88
 196++CE16 42 4B                                ld      bc,de   ; JUST FOR NOW TODO DEBUG
 197++CE18 78                                   ld      a,b
 198++CE19 ED 27 80                             test    $80
 199++CE1C 28 02                                jr      z,.DxyNoClampBC
 200++CE1E 06 7F                                ld      b,$7F                               ; bc = S7.7 but sign not evaluated yet
 201++CE20              .DxyNoClampBC:          ;ld      a,iyh
 202++CE20                                      ;or      b; we will go with signed for now
 203++CE20                                      ;ld      b,a
 204++CE20              ;                        macronegate16bc                             ; looks ok, need to turn remainder into a 8 bit fraction though
 205++CE20 ED 43 14 CD  .DxyPositive:           ld      (clipDxy),bc
 206++CE24              ; multiply fraction later by e to get decimal poiny not remainder
 207++CE24 2A 12 CD     .CalcDyx:               ld      hl,(clipDy)                         ; Dyx = DeltaY / DeltaX
 208++CE27 ED 5B 10 CD                          ld      de,(clipDx)                         ;
 209++CE2B FD 26 00                             ld      iyh,0
 210++CE2E 7C                                   ld      a,h                                 ; is Dx positive or negative
 211++CE2F ED 27 80                             test    $80                                 ;
 212++CE32 28 09                                jr      z,.PosXCalcDyx                      ; hl = ABS(clipDx)
 213++CE34 FD 26 80     .NexXCalcDyx:           ld      iyh,$80
 214++CE37                                      macronegate16hl
 214++CE37 AF          >					xor 	a
 214++CE38 95          >					sub 	l
 214++CE39 6F          >					ld 		l,a
 214++CE3A 9F          >					sbc 	a,a
 214++CE3B 94          >					sub 	h
 214++CE3C 67          >					ld 		h,a
 215++CE3D 7A           .PosXCalcDyx:           ld      a,d                                 ; is Dy positive or negative
 216++CE3E ED 27 80                             test     $80                                ;
 217++CE41 28 0C                                jr      z,.PosYCalcDyx                      ;
 218++CE43 FD 7C                                ld      a,iyh                               ; de = ABS(clipDy)
 219++CE45 EE 80                                xor     $80                                 ; flip sign if opposites on divide
 220++CE47 FD 67                                ld      iyh,a
 221++CE49                                      macronegate16de
 221++CE49 AF          >					xor 	a
 221++CE4A 93          >                    sub 	e
 221++CE4B 5F          >                    ld 		e,a
 221++CE4C 9F          >                    sbc 	a,a
 221++CE4D 92          >                    sub 	d
 221++CE4E 57          >                    ld 		d,a
 222++CE4F 45           .PosYCalcDyx:           ld      b,l                                 ; calculate divide
 223++CE50 0E 00                                ld      c,0
 224++CE52 53                                   ld      d,e
 225++CE53 1E 00                                ld      e,0
 226++CE55 CD 01 A1                             call    BC_Div_DE_88
 227++CE58 42 4B                                ld      bc,de   ; JUST FOR NOW TODO DEBUG
 228++CE5A 78                                   ld      a,b
 229++CE5B ED 27 80                             test    $80
 230++CE5E 28 02                                jr      z,.DyxNoClampBC
 231++CE60 06 7F                                ld      b,$7F                               ; bc = S7.7 but sign not evaluated yet
 232++CE62 FD 7C        .DyxNoClampBC:          ld      a,iyh
 233++CE64 B0                                   or      b; we will go with signed for now
 234++CE65 47                                   ld      b,a
 235++CE66 ED 43 17 CD  .DyxPositive:           ld      (clipDyx),bc
 236++CE6A C1 D1 E1                             pop     hl,,de,,bc
 237++CE6D              ; so now we have x pos sorted Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
 238++CE6D              .CheckX1Negative:      ; break
 239++CE6D 7C                                   ld      a,h                                 ; if x1 is negative     go to x1outofboundsclip else x1 must be on screen
 240++CE6E ED 27 80                             test    $80
 241++CE71 20 35                                jr      nz,.X1OutofBoundsClip
 242++CE73 7A           .CheckX2High:           ld      a,d                                 ; if x2 byte 2 not zero go to x2outofboundsclip
 243++CE74 FE 00                                cp      0
 244++CE76 20 4E                                jr      nz,.X2OutofBoundsClip
 245++CE78 78           .CheckY1High:           ld      a,b                                 ; if y1 high byte set   go to y1outofboundsclip
 246++CE79 FE 00                                cp      0
 247++CE7B C2 FF CE                             jp      nz,.Y1OutofBoundsClip
 248++CE7E 79                                   ld      a,c
 249++CE7F ED 27 80                             test    $80
 250++CE82 C2 FF CE                             jp      nz,.Y1OutofBoundsClip
 251++CE85 DD 7C        .CheckY2High:           ld      a,ixh                               ; if y2 high byte set   go to y2outofboundsclip
 252++CE87 FE 00                                cp      0
 253++CE89 C2 02 CF                             jp      nz,.Y2OutofBoundsClip
 254++CE8C DD 7D                                ld      a,ixl
 255++CE8E ED 27 80                             test    $80
 256++CE91 20 6F                                jr      nz,.Y2OutofBoundsClip
 257++CE93 79           .ClipDone:              ld      a,c
 258++CE94 32 76 C0                             ld      (UBnkNewY1),a
 259++CE97 DD 7D                                ld      a,ixl
 260++CE99 32 78 C0                             ld      (UBnkNewY2),a
 261++CE9C 7D                                   ld      a,l
 262++CE9D 32 75 C0                             ld      (UBnkNewX1),a
 263++CEA0 7B                                   ld      a,e
 264++CEA1 32 77 C0                             ld      (UBnkNewX2),a
 265++CEA4                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
 265++CEA4 B7          >				or a
 266++CEA5 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
 267++CEA6                                      ;LL109:
 268++CEA6 37           .PointsOutofBounds:     scf                                 ; carry flag set as not visible
 269++CEA7 C9                                   ret
 270++CEA8              ; we have already tested for ----        if x1 and x2 negative, no draw exit ; at thsi point x1 must be < 255 else out of
 271++CEA8              ; x1outofboundsclip:
 272++CEA8              ;    y1 = y1 + ( dyx  * ABS(x1))
 273++CEA8              ;    x1 = 0
 274++CEA8              ;    fall into x2outofboundsclip
 275++CEA8              ; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
 276++CEA8 7A           .X1OutofBoundsClip:     ld      a,d
 277++CEA9 ED 27 80                             test    $80
 278++CEAC C2 A6 CE                             jp      nz,.PointsOutofBounds               ; x1 must be negative, so if x2 is negative we can't draw the line
 279++CEAF D5                                   push    de
 280++CEB0                                      macronegate16hl                             ; hl = ABS x1
 280++CEB0 AF          >					xor 	a
 280++CEB1 95          >					sub 	l
 280++CEB2 6F          >					ld 		l,a
 280++CEB3 9F          >					sbc 	a,a
 280++CEB4 94          >					sub 	h
 280++CEB5 67          >					ld 		h,a
 281++CEB6 ED 5B 17 CD                          ld      de,(clipDyx)
 282++CEBA 26 00                                ld      h,0
 283++CEBC CD 68 9F                             call    mulDEbyHLSgnTo2c                    ; bc = ABS x1 & dyx
 284++CEBF 09                                   add     hl,bc
 285++CEC0 44 4D                                ld      bc,hl                               ; y1 = ( dyx  * ABS(x1))+y1
 286++CEC2 21 00 00                             ld      hl,0                                ; x1 = 0
 287++CEC5 D1                                   pop     de                                  ; fall into x2outofboundsclip
 288++CEC6              ; x2outofboundsclip:
 289++CEC6              ;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
 290++CEC6              ;                            y1 = 0
 291++CEC6              ;                      else if y1 > 128 then y1 = 128
 292++CEC6              ;                                            x1 = x1 + (dxy * (128-y1))
 293++CEC6              ;    if x2 > 255 then y2 = y2 - (dxy * (255−x2))
 294++CEC6              ;                     x2 = 255
 295++CEC6              ;    end if
 296++CEC6              ;    goto  y2outofboundsclip
 297++CEC6              ; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
 298++CEC6 CD ED CF     .X2OutofBoundsClip:     call    .Y1OutofBoundsFix
 299++CEC9 7A                                   ld      a,d                                 ; if x2 > 255 then x2 = 255
 300++CECA FE 00                                cp      0                                   ;
 301++CECC CA 02 CF                             jp      z,.Y2OutofBoundsClip                ; y2 = (dyx * (255−x1))+y1
 302++CECF E5 D5        .X2ClipHigh:            push    hl,,de                              ; SP+2
 303++CED1 EB                                   ex      hl,de                               ; hl = X2
 304++CED2 11 FF 00                             ld      de,255                              ;
 305++CED5 B7                                   or      a                                   ;
 306++CED6 ED 52                                sbc     hl,de                               ; hl = x2-255
 307++CED8 ED 5B 17 CD                          ld      de,(clipDyx)                        ;
 308++CEDC                                      ;break                                      ;
 309++CEDC 26 00                                ld      h,0                                 ; Note HL can never be negative as x2 to clip must be > 255
 310++CEDE                                      ;ld      l,0                                 ;
 311++CEDE CD 68 9F                             call    mulDEbyHLSgnTo2c                    ; hl= (dyx * (x2-255)
 312++CEE1 DD 54 DD 5D                          ld      de,ix                               ; de = Y2
 313++CEE5 EB                                   ex      de,hl                               ; hl = Y2, de = (dyx * (x2-255)
 314++CEE6 5A           .X2NegativeE:           ld      e,d                                 ; as it was 16 bit and we are moving down to 8 bit
 315++CEE7 16 00                                ld      d,0                                 ; the SBC is 16 bit - 8 bit so we need to make sure
 316++CEE9 7B                                   ld      a,e                                 ; that the sign is handled
 317++CEEA ED 27 80                             test    $80                                 ;
 318++CEED 28 02                                jr      z,.X2NotNegE                        ;
 319++CEEF 16 FF                                ld      d,$FF                               ;
 320++CEF1 B7           .X2NotNegE:             or      a
 321++CEF2 ED 52                                sbc     hl,de                               ; hl = y2-(dyx * (x2-255))
 322++CEF4 E5                                   push    hl                                  ; ix = (dyx * (255−x1))+y1
 323++CEF5 DD E1                                pop     ix                                  ;
 324++CEF7 D1                                   pop     de                                  ; Point 2 = X (de)
 325++CEF8 E1                                   pop     hl                                  ; Point 1 = X(hl)
 326++CEF9 11 FF 00                             ld      de,255                              ; x2 = 255
 327++CEFC C3 02 CF     .X2OoBX2InBounds:       jp      .Y2OutofBoundsClip
 328++CEFF              ; y1outofboundsclip - to get to here x1 and x2 must be on screen
 329++CEFF              ;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
 330++CEFF              ;                            y1 = 0
 331++CEFF              ;                      else if y1 > 128 then x1 = x1 - (dxy * (128-y1))
 332++CEFF              ;                                            y1 = 128
 333++CEFF              ;
 334++CEFF              ;    fall into y2outofboundsclip
 335++CEFF              ; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
 336++CEFF CD ED CF     .Y1OutofBoundsClip:     call    .Y1OutofBoundsFix                   ; y1outofboundsclip - to get to here x1 and x2 must be on screen
 337++CF02 DD 7C        .Y2OutofBoundsClip:     ld      a,ixh                               ; test if  y2 is negative
 338++CF04 ED 27 80                             test    $80                                 ;
 339++CF07 28 31                                jr      z,.Y2OoBYGTE128                     ; in thsi case ixh is +ve so is it > 1287
 340++CF09 E5 D5        .Y2OoBY1Neg:            push    hl,,de                              ; ixh is negative so save x1 and x2
 341++CF0B                                      macronegate16ix                             ; ix = ABS (y2)
 341++CF0B AF          >					xor 	a
 341++CF0C DD 95       >                    sub 	ixl
 341++CF0E DD 6F       >                    ld 		ixl,a
 341++CF10 9F          >                    sbc 	a,a
 341++CF11 DD 94       >                    sub 	ixh
 341++CF13 DD 67       >                    ld 		ixh,a
 342++CF15 ED 5B 14 CD                          ld      de,(clipDxy)                        ; de = gradient x/y
 343++CF19 DD E5 E1                             ld      hl,ix                               ; hl = abs (y2)
 344++CF1C                                      ;break
 345++CF1C 26 00                                ld      h,0
 346++CF1E                                      ;ld      l,c
 347++CF1E CD 68 9F                             call    mulDEbyHLSgnTo2c                    ; HL = dxy * ABS(y2)
 348++CF21 EB                                   ex      de,hl                               ; de = dxy * ABS(y2)
 349++CF22 5A           .Y2NegativeE:           ld      e,d                                 ; as it was 16 bit and we are moving down to 8 bit
 350++CF23 16 00                                ld      d,0                                 ; the SBC is 16 bit - 8 bit so we need to make sure
 351++CF25 7B                                   ld      a,e                                 ; that the sign is handled
 352++CF26 ED 27 80                             test    $80
 353++CF29 28 02                                jr      z,.Y2NotNegE
 354++CF2B 16 FF                                ld      d,$FF                               ;
 355++CF2D B7           .Y2NotNegE:             or      a
 356++CF2E E1                                   pop     hl                                  ; hl = x2 (pushed from de)
 357++CF2F ED 52                                sbc     hl,de                               ; x2 - (dxy * (y2-128))
 358++CF31 EB                                   ex      de,hl                               ; de = x2
 359++CF32 E1                                   pop     hl
 360++CF33 DD 21 00 00                          ld      ix,0                                ; y2 = 0
 361++CF37 C3 93 CE                             jp      .ClipDone
 362++CF3A FE 00        .Y2OoBYGTE128:          cp      0                                   ; if y2 > 128
 363++CF3C 20 08                                jr      nz,.Y2ClipHigh                      ;
 364++CF3E DD 7D                                ld      a,ixl                               ;
 365++CF40 ED 27 80                             test    $80                                 ;
 366++CF43 CA 93 CE                             jp      z,.ClipDone                         ;
 367++CF46              ; y2outofboundsclip - to get to here x1 and x2 must be on screen and y1
 368++CF46              ;    if y2 is negative then  x2 = x2 + (dxy * ABS(y2))
 369++CF46              ;                            y2 = 0
 370++CF46              ;                      else  if y2 > 128 then x2 = x2 - (dxy * (128-y2))
 371++CF46              ;                                             y2 = 128
 372++CF46              ; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
 373++CF46 E5 D5        .Y2ClipHigh:            push    hl,,de                              ; Save X1 and X2
 374++CF48 DD E5 E1                             ld      hl,ix                               ; hl = Y2
 375++CF4B 11 80 00                             ld      de,128                              ; de = edge
 376++CF4E B7                                   or      a                                   ;
 377++CF4F ED 52                                sbc     hl,de                               ;(y2-128) hl can never be negative if we got here
 378++CF51 ED 5B 14 CD                          ld      de,(clipDxy)                        ;
 379++CF55 26 00                                ld      h,0
 380++CF57 CD 68 9F                              call    mulDEbyHLSgnTo2c                    ; (dxy * (y2-128))
 381++CF5A 5A           .Y2HiNegativeE:         ld      e,d                                 ; as it was 16 bit and we are moving down to 8 bit
 382++CF5B 16 00                                ld      d,0                                 ; the SBC is 16 bit - 8 bit so we need to make sure
 383++CF5D 7B                                   ld      a,e                                 ; that the sign is handled
 384++CF5E ED 27 80                             test    $80
 385++CF61 28 02                                jr      z,.Y2HiNotNegE
 386++CF63 16 FF                                ld      d,$FF                               ;
 387++CF65 B7           .Y2HiNotNegE:           or      a
 388++CF66 E1                                   pop     hl                                  ; retrieve X2 (which was pushed as de)
 389++CF67 ED 52                                sbc     hl,de                               ; hl = x2 - (dxy * (y2-128))
 390++CF69 EB                                   ex      de,hl                               ; de = x2 - (dxy * (y2-128))
 391++CF6A E1                                   pop     hl
 392++CF6B DD 21 7F 00                          ld      ix,127
 393++CF6F C3 93 CE                             jp     .ClipDone
 394++CF72 7C           .ClipVertical:          ld      a,h                                 ; if we are doing vertical then de == hl so if h is <> 0 its off screen
 395++CF73 FE 00                                cp      0
 396++CF75 CA A6 CE                             jp      z,.PointsOutofBounds
 397++CF78 01 00 00     .ClipVertY1Neg:         ld      bc,0
 398++CF7B 18 13                                jr      .ClipVertTestY2
 399++CF7D FE 00        .ClipVertY1NotNeg:      cp      0
 400++CF7F 28 06                                jr      z,.ClipVertY1128
 401++CF81 01 80 00                             ld      bc,128
 402++CF84 C3 90 CF                             jp      .ClipVertTestY2
 403++CF87 79           .ClipVertY1128:         ld      a,c
 404++CF88 ED 27 80                             test    $80
 405++CF8B 28 03                                jr      z,.ClipVertTestY2
 406++CF8D 01 80 00                             ld      bc,128
 407++CF90 DD 7C        .ClipVertTestY2:        ld      a,ixh
 408++CF92 ED 27 80                             test    $80
 409++CF95 28 07                                jr      z,.ClipVertY2NotNeg
 410++CF97 DD 21 00 00  .ClipVertY2Neg:         ld      ix,0
 411++CF9B C3 93 CE                             jp     .ClipDone
 412++CF9E FE 00        .ClipVertY2NotNeg:      cp      0
 413++CFA0 28 07                                jr      z,.ClipVertY2128
 414++CFA2 DD 21 7F 00                          ld      ix,127
 415++CFA6 C3 93 CE                             jp     .ClipDone
 416++CFA9 79           .ClipVertY2128:         ld      a,c
 417++CFAA ED 27 80                             test    $80
 418++CFAD CA 93 CE                             jp      z,.ClipDone
 419++CFB0 DD 21 7F 00                          ld      ix,127
 420++CFB4 C3 93 CE                             jp     .ClipDone
 421++CFB7 78           .ClipHorizonal          ld      a,b                                 ; if we are doing vertical then bc == ix so if x is <> 0 its off screen
 422++CFB8 FE 00                                cp      0
 423++CFBA CA A6 CE                             jp      z,.PointsOutofBounds
 424++CFBD 79                                   ld      a,c
 425++CFBE ED 27 80                             test    $80
 426++CFC1 C2 A6 CE                             jp      nz,.PointsOutofBounds               ; now elimintate > 128
 427++CFC4 7C                                   ld      a,h
 428++CFC5 ED 27 80                             test    $80
 429++CFC8 28 05                                jr      z,.ClipHorzX1NotNeg
 430++CFCA 21 00 00     .ClipHorzX1Neg:         ld      hl,0
 431++CFCD 18 07                                jr      .ClipHorzTestX2
 432++CFCF FE 00        .ClipHorzX1NotNeg:      cp      0
 433++CFD1 28 09                                jr      z,.ClipHorzX2Neg
 434++CFD3 21 FF 00                             ld      hl,255
 435++CFD6 7A           .ClipHorzTestX2:        ld      a,d
 436++CFD7 ED 27 80                             test    $80
 437++CFDA 28 06                                jr      z,.ClipHorzX2NotNeg
 438++CFDC 11 00 00     .ClipHorzX2Neg:         ld      de,0
 439++CFDF C3 93 CE                             jp      .ClipDone
 440++CFE2 FE 00        .ClipHorzX2NotNeg:      cp      0
 441++CFE4 CA 93 CE                             jp      z,.ClipDone
 442++CFE7 11 FF 00                             ld      de,255
 443++CFEA C3 93 CE                             jp     .ClipDone
 444++CFED              ;    if y1 is negative then  x1 = x1 + (dxy * ABS(y1))
 445++CFED              ;                            y1 = 0
 446++CFED              ;                      else if y1 > 128 then y1 = 128
 447++CFED              ;                                            x1 = x1 + (dxy * (128-y1))
 448++CFED              ; reminder Point 1 = X(hl) Y (bc), Point 2 = X (de) Y (ix)
 449++CFED 78           .Y1OutofBoundsFix:      ld      a,b                                 ;  if y1 is negative then
 450++CFEE ED 27 80                             test    $80                                 ;
 451++CFF1 28 24                                jr      z,.Y1OoBYGTE128                     ;
 452++CFF3              .Y1OoBY1Neg:            macronegate16bc                             ; bc = abs y1
 452++CFF3 AF          >					xor 	a
 452++CFF4 91          >                    sub 	c
 452++CFF5 4F          >                    ld 		c,a
 452++CFF6 9F          >                    sbc 	a,a
 452++CFF7 90          >                    sub 	b
 452++CFF8 47          >                    ld 		b,a
 453++CFF9 D5 E5                                push    de,,hl                              ;
 454++CFFB ED 5B 14 CD                          ld      de,(clipDxy)                        ; de = x/y gradient
 455++CFFF 26 00                                ld      h,0
 456++D001 69                                   ld      l,c
 457++D002 CD 50 9F                             call    mulDEbyHL                           ; hl = nbr of pixel we would have traversed x
 458++D005 5C                                   ld      e,h
 459++D006 16 00                                ld      d,0
 460++D008 E1                                   pop     hl
 461++D009 19                                   add     hl,de                               ; x1 = (dxy * ABS(y1)) + x1
 462++D00A 7C                                   ld      a,h
 463++D00B FE 00                                cp      0
 464++D00D 28 03                                jr      z, .Y1NoClampX1                       ; in extreme angles X1 can go > 255 due to rounding
 465++D00F 21 FF 00                             ld      hl,$FF
 466++D012 D1           .Y1NoClampX1            pop     de
 467++D013 01 00 00                             ld      bc,0                                ; y1 = 0
 468++D016 C9                                   ret
 469++D017 FE 00        .Y1OoBYGTE128:          cp      0                                   ; is y1 > 255
 470++D019 20 05                                jr      nz,.Y1ClipHigh                      ;
 471++D01B 79                                   ld      a,c
 472++D01C ED 27 80                             test    $80
 473++D01F C8                                   ret     z
 474++D020 D5 E5        .Y1ClipHigh:            push    de,,hl                              ; so y1 > 128
 475++D022 60 69                                ld      hl,bc; need to fix thi
 476++D024 01 80 00                             ld      bc,128
 477++D027 B7                                   or      a
 478++D028 ED 42                                sbc     hl,bc                               ; hl = y1 - 128
 479++D02A ED 5B 14 CD                          ld      de,(clipDxy)
 480++D02E              ; hl can be negative
 481++D02E 6C                                   ld      l,h
 482++D02F 26 00                                ld      h,0
 483++D031 CD 68 9F                             call    mulDEbyHLSgnTo2c
 484++D034 E1                                   pop     hl                                  ; get back X1
 485++D035 B7                                   or      a
 486++D036 ED 52                                sbc     hl,de                               ; hl = x1 - ((y1-128 ) & dxy)
 487++D038 01 7F 00                             ld      bc,127
 488++D03B D1                                   pop     de                                  ; recover X2
 489++D03C C9                                   ret
 490++D03D
# file closed: ./ModelRender/CLIP-LL145.asm
 776+ D03D              ;--------------------------------------------------------------------------------------------------------
 777+ D03D                                      include "Universe/CopyRotmatToTransMat.asm"
# file opened: ./Universe/CopyRotmatToTransMat.asm
   1++D03D              ; Set TransMatTo
   2++D03D              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++D03D              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++D03D              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++D03D              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++D03D              CopyRotmatToTransMat:                       ; Tested
   7++D03D              LL15_CopyRotMat:                            ; unrolled loop
   8++D03D 21 14 C0             ld      hl,UBnkrotmatSidevX
   9++D040 11 30 C0             ld      de,UBnkTransmatSidevX
  10++D043                      SixLDIInstrunctions
  10++D043 ED A0       >                        ldi
  10++D045 ED A0       >                        ldi
  10++D047 ED A0       >                        ldi
  10++D049 ED A0       >                        ldi
  10++D04B ED A0       >                        ldi
  10++D04D ED A0       >                        ldi
  11++D04F 21 1A C0             ld      hl,UBnkrotmatRoofvX
  12++D052 11 36 C0             ld      de, UBnkTransmatRoofvX
  13++D055                      SixLDIInstrunctions
  13++D055 ED A0       >                        ldi
  13++D057 ED A0       >                        ldi
  13++D059 ED A0       >                        ldi
  13++D05B ED A0       >                        ldi
  13++D05D ED A0       >                        ldi
  13++D05F ED A0       >                        ldi
  14++D061 21 20 C0             ld      hl,UBnkrotmatNosevX
  15++D064 11 3C C0             ld      de, UBnkTransmatNosevX
  16++D067                      SixLDIInstrunctions
  16++D067 ED A0       >                        ldi
  16++D069 ED A0       >                        ldi
  16++D06B ED A0       >                        ldi
  16++D06D ED A0       >                        ldi
  16++D06F ED A0       >                        ldi
  16++D071 ED A0       >                        ldi
  17++D073 C9                   ret
  18++D074
# file closed: ./Universe/CopyRotmatToTransMat.asm
 778+ D074              ;--------------------------------------------------------------------------------------------------------
 779+ D074 21 A1 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 780+ D077 ED 31                                add     hl,a
 781+ D079 3E FF                                ld      a,$FF
 782+ D07B 77                                   ld      (hl),a
 783+ D07C C9                                   ret
 784+ D07D              ;--------------------------------------------------------------------------------------------------------
 785+ D07D 21 A1 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 786+ D080 ED 31                                add     hl,a
 787+ D082 AF                                   xor     a
 788+ D083 77                                   ld      (hl),a
 789+ D084 C9                                   ret
 790+ D085              ;--------------------------------------------------------------------------------------------------------
 791+ D085 3A 0A C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 792+ D088 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 793+ D08A CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 794+ D08C 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 795+ D08D 21 A1 C0                             ld      hl,UbnkFaceVisArray
 796+ D090 3E FF                                ld      a,$FF
 797+ D092              SetAllFacesVisibleLoop:
 798+ D092 77           EE30:                   ld      (hl),a
 799+ D093 23                                   inc     hl
 800+ D094 10 FC                                djnz    SetAllFacesVisibleLoop
 801+ D096 C9                                   ret
 802+ D097              ;--------------------------------------------------------------------------------------------------------
 803+ D097 3A 0A C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 804+ D09A CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 805+ D09C CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 806+ D09E 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 807+ D09F 06 10                                ld      b,16
 808+ D0A1 21 A1 C0                             ld      hl,UbnkFaceVisArray
 809+ D0A4 3E 00                                ld      a,$00
 810+ D0A6 77           SetAllFacesHiddenLoop:  ld      (hl),a
 811+ D0A7 23                                   inc     hl
 812+ D0A8 10 FC                                djnz    SetAllFacesHiddenLoop
 813+ D0AA C9                                   ret
 814+ D0AB
 815+ D0AB              ;;;;X = normal scale
 816+ D0AB              ;;;;ZtempHi = zhi
 817+ D0AB              ;;;;......................................................
 818+ D0AB              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 819+ D0AB              ;;;;  Loop                                              ::LL90
 820+ D0AB              ;;;;     inc X
 821+ D0AB              ;;;;     divide X, Y & ZtempHiLo by 2
 822+ D0AB              ;;;;  Until ZtempHi = 0
 823+ D0AB              ;;;;......................................................
 824+ D0AB              ;-LL21---------------------------------------------------------------------------------------------------
 825+ D0AB                                      include "Universe/NormaliseTransMat.asm"
# file opened: ./Universe/NormaliseTransMat.asm
   1++D0AB              ;divdide by 16 using undocumented instrunctions
   2++D0AB              Norm256mulAdivQ:
   3++D0AB 47               ld      b,a
   4++D0AC 0E 00            ld      c,0
   5++D0AE 16 00            ld      d,0
   6++D0B0 3A 31 92         ld      a,(varQ)
   7++D0B3 5F               ld      e,a
   8++D0B4              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D0B4              ;Output: BC = Quotient, HL = Remainder
  10++D0B4              NormDIV16UNDOC:
  11++D0B4 21 00 00         ld      hl,0
  12++D0B7 78               ld      a,b
  13++D0B8 06 10            ld      b,16
  14++D0BA              NormDIV16UNDOCLOOP:
  15++D0BA CB 31        	sll	    c		; unroll 16 times
  16++D0BC 17           	rla	    		; ...
  17++D0BD ED 6A        	adc	    hl,hl		; ...
  18++D0BF ED 52        	sbc	    hl,de		; ...
  19++D0C1 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D0C3 19           	add	    hl,de		; ...
  21++D0C4 0D           	dec	    c		; ...
  22++D0C5              NormDIV16UNDOCSKIP:
  23++D0C5 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D0C7 79               ld      a,c
  25++D0C8 32 32 92         ld      (varR),a
  26++D0CB C9               ret
  27++D0CC
  28++D0CC              ; Tested OK
  29++D0CC              NormaliseTransMat:
  30++D0CC              ;LL21
  31++D0CC 21 41 C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D0CF 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D0D1 79                   ld      a,c
  34++D0D2 32 31 92             ld      (varQ),a                    ; set up varQ
  35++D0D5 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D0D7              LL21Loop:
  37++D0D7 56                   ld      d,(hl)
  38++D0D8 2B                   dec     hl
  39++D0D9 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D0DA                      ShiftDELeft1                        ; De = DE * 2
  40++D0DA CB 23       >			   sla e
  40++D0DC CB 12       >			   rl  d
  41++D0DE 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D0DF E5           		push	hl
  43++D0E0 C5           		push	bc
  44++D0E1 CD AB D0             call    Norm256mulAdivQ
  45++D0E4              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D0E4 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D0E5 C1           		pop		bc
  48++D0E6 E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D0E7 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D0E8 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D0E9 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D0EB C9                   ret
  53++D0EC
# file closed: ./Universe/NormaliseTransMat.asm
 826+ D0EC              ;-LL91---------------------------------------------------------------------------------------------------
 827+ D0EC 21 0B C0     LoadCraftToCamera:      ld      hl,UBnKxlo
 828+ D0EF 11 69 C0                             ld      de,UBnkDrawCam0xLo
 829+ D0F2                                      NineLDIInstrunctions                ; transfer 9 bytes
 829+ D0F2 ED A0       >		                ldi
 829+ D0F4 ED A0       >		                ldi
 829+ D0F6 ED A0       >		                ldi
 829+ D0F8 ED A0       >		                ldi
 829+ D0FA ED A0       >		                ldi
 829+ D0FC ED A0       >		                ldi
 829+ D0FE ED A0       >		                ldi
 829+ D100 ED A0       >		                ldi
 829+ D102 ED A0       >		                ldi
 830+ D104 C9                                   ret
 831+ D105              ; Now we have
 832+ D105              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 833+ D105              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 834+ D105              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 835+ D105              ;
 836+ D105              ;--------------------------------------------------------------------------------------------------------
 837+ D105                                      include "Universe/InverseXX16.asm"
# file opened: ./Universe/InverseXX16.asm
   1++D105              ; TESTEDOK
   2++D105
   3++D105              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D105              ;        ld      a,(XX17)
   5++D105              ;        ld      ixl,a
   6++D105              ;        ld      ixh,9
   7++D105              ;        ld      hl,UBnkTransInv0x
   8++D105              ;        ld      a,(hl)
   9++D105              ;ScaleNode:
  10++D105              ;        ld      b,ixl
  11++D105              ;ScaleNodeLoop:
  12++D105              ;        sla      a
  13++D105              ;        djnz    ScaleNodeLoop
  14++D105              ;        ld      (hl),a
  15++D105              ;        inc     hl
  16++D105              ;        inc     hl
  17++D105              ;        dec     ixh
  18++D105              ;        jr      nz,ScaleNode
  19++D105              ;        ret
  20++D105
  21++D105
  22++D105              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D105              ; we coudl combine this with move to transmat later as an optimisation
  24++D105              ; INPUT - All Scaled
  25++D105              ;  They transmat has already been put into side, roof nose order
  26++D105              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D105              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D105              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D105              ; OUTPUT
  30++D105              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D105              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D105              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D105              ; First all side values become compoment 0 of each vector
  34++D105 2A 30 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D108 ED 5B 36 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D10C ED 4B 3C C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D110 22 48 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D113 ED 53 4A C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D117 ED 43 4C C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D11B 2A 32 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D11E ED 5B 38 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D122 ED 4B 3E C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D126 22 50 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D129 ED 53 52 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D12D ED 43 54 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D131 2A 34 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D134 ED 5B 3A C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D138 ED 4B 40 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D13C 22 58 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D13F ED 53 5A C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D143 ED 43 5C C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D147 C9                   ret
  53++D148
  54++D148
# file closed: ./Universe/InverseXX16.asm
 838+ D148              ;--------------------------------------------------------------------------------------------------------
 839+ D148              ;--------------------------------------------------------------------------------------------------------
 840+ D148              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 841+ D148              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 842+ D148              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 843+ D148              ; Returns
 844+ D148              ;
 845+ D148              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 846+ D148              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 847+ D148              ;
 848+ D148              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 849+ D148              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 850+ D148              ;
 851+ D148              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 852+ D148              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 853+ D148              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 854+ D148 ~                                    ld      c,0
 855+ D148 ~                                    ld      a,param3                      ;
 856+ D148 ~                                    bit     7,a
 857+ D148 ~                                    jr      z,.val2Pos
 858+ D148 ~            ;HandleSignebits
 859+ D148 ~                                    neg
 860+ D148 ~                                    ld      c,$80
 861+ D148 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 862+ D148 ~                                    ld      a,param2                        ; A = XX16 element
 863+ D148 ~                                    bit     7,a
 864+ D148 ~                                    jr      z,.val1Pos
 865+ D148 ~            ;HandleSignebits
 866+ D148 ~                                    neg
 867+ D148 ~                                    ld      b,a
 868+ D148 ~                                    ld      a,c
 869+ D148 ~                                    xor     $80
 870+ D148 ~                                    ld      c,a
 871+ D148 ~                                    ld      a,b
 872+ D148 ~            .val1Pos:               ld      d,a
 873+ D148 ~            ;AequAmulQdiv256:
 874+ D148 ~                                    mul
 875+ D148 ~                                    ld      a,c
 876+ D148 ~                                    bit     7,a
 877+ D148 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 878+ D148 ~                                    jr      z,.resultPos
 879+ D148 ~                                    neg
 880+ D148 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 881+ D148                                      ENDM
 882+ D148
 883+ D148              AequN1xorN2:            MACRO  param1,param2
 884+ D148 ~                                    ld      a,(param1)
 885+ D148 ~                                    xor     param2
 886+ D148                                      ENDM
 887+ D148
 888+ D148              N0equN1byN2div256:      MACRO param1,param2,param3
 889+ D148 ~                                    ld      a,param3                        ;
 890+ D148 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 891+ D148 ~                                    ld      a,param2                        ; A = XX16 element
 892+ D148 ~                                    ld      d,a
 893+ D148 ~                                    mul
 894+ D148 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 895+ D148 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 896+ D148                                      ENDM
 897+ D148
 898+ D148               ; TESTEDOK
 899+ D148              XX12DotOneRow:
 900+ D148              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 900+ D148 3A 75 C0    >                        ld      a,(UBnkXScaled)                        ;
 900+ D14B 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 900+ D14C 7E          >                        ld      a,(hl)                        ; A = XX16 element
 900+ D14D 57          >                        ld      d,a
 900+ D14E ED 30       >                        mul
 900+ D150 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 900+ D151 32 4E 92    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 901+ D154 23                                   inc     hl                                  ; move to sign byte
 902+ D155              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 902+ D155 3A 76 C0    >                        ld      a,(UBnkXScaledSign)
 902+ D158 AE          >                        xor     (hl)
 903+ D159 32 33 92                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 904+ D15C 23                                   inc     hl
 905+ D15D              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 905+ D15D 3A 77 C0    >                        ld      a,(UBnkYScaled)                        ;
 905+ D160 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 905+ D161 7E          >                        ld      a,(hl)                        ; A = XX16 element
 905+ D162 57          >                        ld      d,a
 905+ D163 ED 30       >                        mul
 905+ D165 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 905+ D166 32 31 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 906+ D169                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 906+ D169 3A 4E 92    >               ld       a,(varT)
 906+ D16C 32 32 92    >               ld       (varR),a
 907+ D16F 23                                   inc     hl
 908+ D170                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 908+ D170 3A 78 C0    >                        ld      a,(UBnkYScaledSign)
 908+ D173 AE          >                        xor     (hl)
 909+ D174              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 910+ D174 E5           STequSRplusAQ           push    hl
 911+ D175 CD C3 A4                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 912+ D178 E1                                   pop     hl
 913+ D179 32 4E 92                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 914+ D17C 23                                   inc     hl
 915+ D17D              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 915+ D17D 3A 79 C0    >                        ld      a,(UBnkZScaled)                        ;
 915+ D180 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 915+ D181 7E          >                        ld      a,(hl)                        ; A = XX16 element
 915+ D182 57          >                        ld      d,a
 915+ D183 ED 30       >                        mul
 915+ D185 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 915+ D186 32 31 92    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 916+ D189                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 916+ D189 3A 4E 92    >               ld       a,(varT)
 916+ D18C 32 32 92    >               ld       (varR),a
 917+ D18F 23                                   inc     hl
 918+ D190                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 918+ D190 3A 7A C0    >                        ld      a,(UBnkZScaledSign)
 918+ D193 AE          >                        xor     (hl)
 919+ D194              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 920+ D194 CD C3 A4                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 921+ D197              ; Now we exit with A = result S = Sign
 922+ D197 C9                                   ret
 923+ D198
 924+ D198              ; added where sign is separate byte
 925+ D198              ;;;XX12DotOneRowV2:
 926+ D198              ;;;XX12CalcXV2:
 927+ D198              ;;;        ld      a,(hl)
 928+ D198              ;;;        ld      de,(UBnkXScaled)
 929+ D198              ;;;        ld      b,d
 930+ D198              ;;;        ld      d,a
 931+ D198              ;;;        mul
 932+ D198              ;;;        ld      a,e
 933+ D198              ;;;        ld      (varT),a
 934+ D198              ;;;XX12CalcXSignV2:
 935+ D198              ;;;        inc     hl
 936+ D198              ;;;        ld      a,(hl)
 937+ D198              ;;;        xor     b
 938+ D198              ;;;        ld      (varS),a
 939+ D198              ;;;XX12CalcYV2:
 940+ D198              ;;;        inc     hl
 941+ D198              ;;;        ld      de,(UBnkYScaled)
 942+ D198              ;;;        ld      b,d
 943+ D198              ;;;        ld      d,a
 944+ D198              ;;;        mul
 945+ D198              ;;;        ld      a,e
 946+ D198              ;;;        ld      (varQ),a
 947+ D198              ;;;        ld      a,(varT)
 948+ D198              ;;;        ld      (varR),a
 949+ D198              ;;;XX12CalcYSignV2:
 950+ D198              ;;;        inc     hl
 951+ D198              ;;;        ld      a,(hl)
 952+ D198              ;;;        xor     b
 953+ D198              ;;;        ld      (varS),a
 954+ D198              ;;;XX12CalcXPlusYV2:
 955+ D198              ;;;        push    hl
 956+ D198              ;;;        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 957+ D198              ;;;        pop     hl
 958+ D198              ;;;        ld      (varT),a                            ; var S already holds sign
 959+ D198              ;;;       ret
 960+ D198
 961+ D198
 962+ D198              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 963+ D198              ;TESTED OK
 964+ D198              XX12EquXX15DotProductXX16:
 965+ D198              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 966+ D198 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 967+ D19B 21 30 C0                             ld      hl,UBnkTransmatSidevX
 968+ D19E CD 48 D1                             call    XX12DotOneRow
 969+ D1A1 32 7B C0                             ld      (UBnkXX12xLo),a
 970+ D1A4 3A 33 92                             ld      a,(varS)
 971+ D1A7 32 7C C0                             ld      (UBnkXX12xSign),a
 972+ D1AA 21 36 C0                             ld      hl,UBnkTransmatRoofvX
 973+ D1AD CD 48 D1                             call    XX12DotOneRow
 974+ D1B0 32 7D C0                             ld      (UBnkXX12yLo),a
 975+ D1B3 3A 33 92                             ld      a,(varS)
 976+ D1B6 32 7E C0                             ld      (UBnkXX12ySign),a
 977+ D1B9 21 3C C0                             ld      hl,UBnkTransmatNosevX
 978+ D1BC CD 48 D1                             call    XX12DotOneRow
 979+ D1BF 32 7F C0                             ld      (UBnkXX12zLo),a
 980+ D1C2 3A 33 92                             ld      a,(varS)
 981+ D1C5 32 80 C0                             ld      (UBnkXX12zSign),a
 982+ D1C8 C9                                   ret
 983+ D1C9              ;--------------------------------------------------------------------------------------------------------
 984+ D1C9                                      include "Universe/CopyXX12ScaledToXX18.asm"
# file opened: ./Universe/CopyXX12ScaledToXX18.asm
   1++D1C9              CopyXX12ScaledToXX18:
   2++D1C9              CopyResultToDrawCam:
   3++D1C9                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D1C9 3A 7B C0    >               ld       a,(XX12)
   3++D1CC 32 69 C0    >               ld       (XX18),a
   4++D1CF                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D1CF 3A 7C C0    >               ld       a,(XX12+1)
   4++D1D2 32 6B C0    >               ld       (XX18+2),a
   5++D1D5                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D1D5 3A 7D C0    >               ld       a,(XX12+2)
   5++D1D8 32 6C C0    >               ld       (XX18+3),a
   6++D1DB                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D1DB 3A 7E C0    >               ld       a,(XX12+3)
   6++D1DE 32 6E C0    >               ld       (XX18+5),a
   7++D1E1                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D1E1 3A 7F C0    >               ld       a,(XX12+4)
   7++D1E4 32 6F C0    >               ld       (XX18+6),a
   8++D1E7                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D1E7 3A 80 C0    >               ld       a,(XX12+5)
   8++D1EA 32 71 C0    >               ld       (XX18+8),a
   9++D1ED C9                   ret
  10++D1EE
# file closed: ./Universe/CopyXX12ScaledToXX18.asm
 985+ D1EE              ;--------------------------------------------------------------------------------------------------------
 986+ D1EE                                      include "Universe/CopyXX18toXX15.asm"
# file opened: ./Universe/CopyXX18toXX15.asm
   1++D1EE              CopyXX18toXX15:
   2++D1EE              CopyDrawCamToScaled:
   3++D1EE                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D1EE 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
   3++D1F1 32 75 C0    >               ld       (UBnkXScaled),a
   4++D1F4                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D1F4 3A 6B C0    >               ld       a,(UBnkDrawCam0xSgn)
   4++D1F7 32 76 C0    >               ld       (UBnkXScaledSign),a
   5++D1FA                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D1FA 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
   5++D1FD 32 77 C0    >               ld       (UBnkYScaled),a
   6++D200                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D200 3A 6E C0    >               ld       a,(UBnkDrawCam0ySgn)
   6++D203 32 78 C0    >               ld       (UBnkYScaledSign),a
   7++D206                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D206 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
   7++D209 32 79 C0    >               ld       (UBnkZScaled),a
   8++D20C                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D20C 3A 71 C0    >               ld       a,(UBnkDrawCam0zSgn)
   8++D20F 32 7A C0    >               ld       (UBnkZScaledSign),a
   9++D212 C9                   ret
  10++D213
# file closed: ./Universe/CopyXX18toXX15.asm
 987+ D213              ;--------------------------------------------------------------------------------------------------------
 988+ D213                                      include "Universe/CopyXX18ScaledToXX15.asm"
# file opened: ./Universe/CopyXX18ScaledToXX15.asm
   1++D213              CopyXX18ScaledToXX15:
   2++D213              CopyDrawCamToScaledMatrix:
   3++D213                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
   3++D213 3A 71 C0    >               ld       a,(UBnkDrawCam0zSgn)
   3++D216 32 7A C0    >               ld       (UBnkZScaledSign),a
   4++D219                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
   4++D219 3A 69 C0    >               ld       a,(UBnkDrawCam0xLo)
   4++D21C 32 75 C0    >               ld       (UBnkXScaled),a
   5++D21F                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
   5++D21F 3A 6B C0    >               ld       a,(UBnkDrawCam0xSgn)
   5++D222 32 76 C0    >               ld       (UBnkXScaledSign),a
   6++D225                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
   6++D225 3A 6C C0    >               ld       a,(UBnkDrawCam0yLo)
   6++D228 32 77 C0    >               ld       (UBnkYScaled),a
   7++D22B                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
   7++D22B 3A 6E C0    >               ld       a,(UBnkDrawCam0ySgn)
   7++D22E 32 78 C0    >               ld       (UBnkYScaledSign),a
   8++D231                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
   8++D231 3A 6F C0    >               ld       a,(UBnkDrawCam0zLo)
   8++D234 32 79 C0    >               ld       (UBnkZScaled),a
   9++D237 C9                   ret
  10++D238
  11++D238              CopyXX15ToXX18Scaled:
  12++D238              CopyScaledMatrixToDrawCam:
  13++D238                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  13++D238 3A 7A C0    >               ld       a,(UBnkZScaledSign)
  13++D23B 32 71 C0    >               ld       (UBnkDrawCam0zSgn),a
  14++D23E                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  14++D23E 3A 75 C0    >               ld       a,(UBnkXScaled)
  14++D241 32 69 C0    >               ld       (UBnkDrawCam0xLo),a
  15++D244                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  15++D244 3A 76 C0    >               ld       a,(UBnkXScaledSign)
  15++D247 32 6B C0    >               ld       (UBnkDrawCam0xSgn),a
  16++D24A                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  16++D24A 3A 77 C0    >               ld       a,(UBnkYScaled)
  16++D24D 32 6C C0    >               ld       (UBnkDrawCam0yLo),a
  17++D250                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  17++D250 3A 78 C0    >               ld       a,(UBnkYScaledSign)
  17++D253 32 6E C0    >               ld       (UBnkDrawCam0ySgn),a
  18++D256                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  18++D256 3A 79 C0    >               ld       a,(UBnkZScaled)
  18++D259 32 6F C0    >               ld       (UBnkDrawCam0zLo),a
  19++D25C C9                   ret
  20++D25D
  21++D25D
  22++D25D              XX15EquXX15AddXX18:
  23++D25D              LL94Z:
  24++D25D 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  25++D25F 16 00                ld      d,0                                                     ;
  26++D261 3A 79 C0             ld      a,(UBnkZScaled)                                         ;
  27++D264 6F                   ld      l,a                                                     ;
  28++D265 3A 7A C0             ld      a,(UBnkZScaledSign)                                     ;
  29++D268 47                   ld      b,a                                                     ;
  30++D269 3A 6F C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  31++D26C 5F                   ld      e,a                                                     ;
  32++D26D 3A 71 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  33++D270 4F                   ld      c,a                                                     ;
  34++D271 CD 3B CB             call    ADDHLDESignBC                                           ;
  35++D274 47                   ld      b,a                                                     ;
  36++D275 7C                   ld      a,h                                                     ;
  37++D276 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  38++D277 32 7A C0             ld      (UBnkZScaledSign),a                                     ;
  39++D27A 7D                   ld      a,l                                                     ;
  40++D27B 32 79 C0             ld      (UBnkZScaled),a                                         ;           endif
  41++D27E              LL94X:
  42++D27E 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  43++D280 16 00                ld      d,0                                                     ;
  44++D282 3A 75 C0             ld      a,(UBnkXScaled)                                         ;
  45++D285 6F                   ld      l,a                                                     ;
  46++D286 3A 76 C0             ld      a,(UBnkXScaledSign)                                     ;
  47++D289 47                   ld      b,a                                                     ;
  48++D28A 3A 69 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  49++D28D 5F                   ld      e,a                                                     ;
  50++D28E 3A 6B C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  51++D291 4F                   ld      c,a                                                     ;
  52++D292 CD 3B CB             call    ADDHLDESignBC                                           ;
  53++D295 47                   ld      b,a                                                     ;
  54++D296 7C                   ld      a,h                                                     ;
  55++D297 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  56++D298 32 76 C0             ld      (UBnkXScaledSign),a                                     ;
  57++D29B 7D                   ld      a,l                                                     ;
  58++D29C 32 75 C0             ld      (UBnkXScaled),a                                         ;           endif
  59++D29F              LL94Y:
  60++D29F 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  61++D2A1 16 00                ld      d,0                                                     ;
  62++D2A3 3A 77 C0             ld      a,(UBnkYScaled)                                         ;
  63++D2A6 6F                   ld      l,a                                                     ;
  64++D2A7 3A 78 C0             ld      a,(UBnkYScaledSign)                                     ;
  65++D2AA 47                   ld      b,a                                                     ;
  66++D2AB 3A 6C C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  67++D2AE 5F                   ld      e,a                                                     ;
  68++D2AF 3A 6E C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  69++D2B2 4F                   ld      c,a                                                     ;
  70++D2B3 CD 3B CB             call    ADDHLDESignBC                                           ;
  71++D2B6 47                   ld      b,a                                                     ;
  72++D2B7 7C                   ld      a,h                                                     ;
  73++D2B8 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  74++D2B9 32 78 C0             ld      (UBnkYScaledSign),a                                     ;
  75++D2BC 7D                   ld      a,l                                                     ;
  76++D2BD 32 77 C0             ld      (UBnkYScaled),a                                         ;
  77++D2C0 C9                   ret
  78++D2C1
# file closed: ./Universe/CopyXX18ScaledToXX15.asm
 989+ D2C1              ;--------------------------------------------------------------------------------------------------------
 990+ D2C1                                      include "Universe/CopyXX12ToScaled.asm"
# file opened: ./Universe/CopyXX12ToScaled.asm
   1++D2C1              CopyXX12ToScaled:
   2++D2C1              CopyResultToScaled:
   3++D2C1                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D2C1 3A 7B C0    >               ld       a,(XX12+0)
   3++D2C4 32 75 C0    >               ld       (UBnkXScaled),a
   4++D2C7                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D2C7 3A 7D C0    >               ld       a,(XX12+2)
   4++D2CA 32 77 C0    >               ld       (UBnkYScaled),a
   5++D2CD                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D2CD 3A 7F C0    >               ld       a,(XX12+4)
   5++D2D0 32 79 C0    >               ld       (UBnkZScaled),a
   6++D2D3 C9                   ret
   7++D2D4
# file closed: ./Universe/CopyXX12ToScaled.asm
 991+ D2D4              ;--------------------------------------------------------------------------------------------------------
 992+ D2D4                                      include "Universe/DotProductXX12XX15.asm"
# file opened: ./Universe/DotProductXX12XX15.asm
   1++D2D4              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D2D4              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D2D4              ;;; S = XX12 XSign Xor XX15 XSign
   4++D2D4              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D2D4              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D2D4              ;;; R = T
   7++D2D4              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D2D4              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D2D4              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D2D4              ;;; Q = A * Q /256 usigned (zdot)
  11++D2D4              ;;; R = T
  12++D2D4              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D2D4
  14++D2D4
  15++D2D4
  16++D2D4
  17++D2D4
  18++D2D4              MacroAequDxEdiv256usgn:	MACRO
  19++D2D4 ~            						mul
  20++D2D4 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D2D4              						ENDM
  22++D2D4              DotProductXX12XX15:
  23++D2D4 3A 7B C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D2D7                      IfAIsZeroGoto dotxskipzero
  24++D2D7 FE 00       >				cp	0
  24++D2D9 CA F7 D2    >				jp	z,dotxskipzero
  25++D2DC 5F                   ld          e,a
  26++D2DD 3A 75 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D2E0 57                   ld          d,a                     ; de = xx12 x signed
  28++D2E1                      IfAIsZeroGoto dotxskipzero
  28++D2E1 FE 00       >				cp	0
  28++D2E3 CA F7 D2    >				jp	z,dotxskipzero
  29++D2E6 ED 30        		mul
  30++D2E8 42                   ld          b,d                     ; b = result
  31++D2E9 3A 7C C0             ld          a,(UBnkXX12xSign)
  32++D2EC 21 76 C0             ld          hl,UBnkXScaledSign
  33++D2EF AE                   xor         (hl)
  34++D2F0 E6 80                and         $80                     ; so sign bit only
  35++D2F2 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D2F4 C3 FB D2             jp          dotmuly
  37++D2F7              dotxskipzero:
  38++D2F7 AF                   xor         a
  39++D2F8 47                   ld          b,a
  40++D2F9 FD 67                ld          iyh,a
  41++D2FB              dotmuly:
  42++D2FB              ; now we have b = XX12 x &d  norm x signed
  43++D2FB 3A 7D C0             ld          a,(UBnkXX12yLo)
  44++D2FE                      IfAIsZeroGoto dotyskipzero
  44++D2FE FE 00       >				cp	0
  44++D300 CA 20 D3    >				jp	z,dotyskipzero
  45++D303 5F                   ld          e,a
  46++D304 3A 77 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D307                      IfAIsZeroGoto dotyskipzero
  47++D307 FE 00       >				cp	0
  47++D309 CA 20 D3    >				jp	z,dotyskipzero
  48++D30C 57                   ld          d,a                     ; de = xx12 x signed
  49++D30D ED 30                mul
  50++D30F 4A                   ld          c,d                     ; c = result
  51++D310 DD 69                ld          ixl,c
  52++D312 3A 7E C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D315 21 78 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D318 AE                   xor         (hl)                    ; XX15+3
  55++D319 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D31B DD 67                ld          ixh,a
  57++D31D C3 24 D3             jp          dotaddxy
  58++D320              dotyskipzero:
  59++D320 AF                   xor         a
  60++D321 4F                   ld          c,a
  61++D322 DD 67                ld          ixh,a
  62++D324              dotaddxy:
  63++D324              ; Optimise later as this is 16 bit
  64++D324 26 00                ld          h,0                     ;
  65++D326 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D327 16 00                ld          d,0                     ;
  67++D329 59                   ld          e,c                     ; de = ylo + yscaled
  68++D32A FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D32C 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D32D CD 3B CB             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D330 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D331 3A 7F C0             ld          a,(UBnkXX12zLo)         ;
  73++D334                      IfAIsZeroGoto dotzskipzero
  73++D334 FE 00       >				cp	0
  73++D336 CA 5C D3    >				jp	z,dotzskipzero
  74++D339 5F                   ld          e,a                     ;
  75++D33A 3A 79 C0             ld          a,(UBnkZScaled)         ;
  76++D33D                      IfAIsZeroGoto dotzskipzero
  76++D33D FE 00       >				cp	0
  76++D33F CA 5C D3    >				jp	z,dotzskipzero
  77++D342 57                   ld          d,a
  78++D343 ED 30                mul
  79++D345 E5                   push        hl                      ; save prev result
  80++D346 3A 7A C0             ld          a,(UBnkZScaledSign)
  81++D349 21 80 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D34C AE                   xor         (hl)                    ; hi sign
  83++D34D E6 80                and         $80                     ; a = sign of multiply
  84++D34F 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D350 E1                   pop         hl
  86++D351 5A                   ld          e,d
  87++D352 16 00                ld          d,0
  88++D354 CD 3B CB             call ADDHLDESignBC
  89++D357 32 33 92             ld          (varS),a
  90++D35A 7D                   ld          a,l
  91++D35B C9                   ret                                 ; returns with A = value, varS = sign
  92++D35C              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D35C 78                   ld          a,b
  94++D35D 32 33 92             ld          (varS),a
  95++D360 7D                   ld          a,l
  96++D361 C9                   ret
  97++D362              ;;;;       DotProductXX12XX15:
  98++D362              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D362              ;;;;       ld          e,a
 100++D362              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D362              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D362              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D362              ;;;;		mul
 104++D362              ;;;;       ld          b,d                     ; b as var T
 105++D362              ;;;;       ld          a,(UBnkXX12xSign)
 106++D362              ;;;;       ld          hl,UBnkXScaledSign
 107++D362              ;;;;       xor         (hl)
 108++D362              ;;;;       and         $80                     ; so sign bit only
 109++D362              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D362              ;;;; now we have b = XX12 x & norm x signed
 111++D362              ;;;; by here B = xlo & xscaled C = result sign
 112++D362              ;;;;       ld          a,(UBnkXX12yLo)
 113++D362              ;;;;       ld          e,a
 114++D362              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D362              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D362              ;;;;       mul
 117++D362              ;;;;       ld          a,d
 118++D362              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D362              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D362              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D362              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D362              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D362              ;;;;       xor         (hl)                    ; XX15+3
 124++D362              ;;;;       and         $80
 125++D362              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D362              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D362              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D362              ;;;;       ld          e,a                     ; use e as var Q
 129++D362              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D362              ;;;;       ld          d,a
 131++D362              ;;;;       mul
 132++D362              ;;;;       ld          a,d
 133++D362              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D362              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D362              ;;;;       ld          a,(UBnkZScaledSign)
 136++D362              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D362              ;;;;       xor         (hl)                    ; hi sign
 138++D362              ;;;;       and         $80
 139++D362              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D362              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D362
# file closed: ./Universe/DotProductXX12XX15.asm
 993+ D362              ;--------------------------------------------------------------------------------------------------------
 994+ D362              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 995+ D362                                      include "Universe/ScaleNormal.asm"
# file opened: ./Universe/ScaleNormal.asm
   1++D362              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D362              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D362              ScaleNormal:
   4++D362              LL93:
   5++D362 3A 38 92             ld      a,(XX17)                    ; scale--
   6++D365 DD 6F        		ld		ixl,a
   7++D367 3A 79 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D36A DD 2D        		dec		ixl
   9++D36C F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D36D              ScaleLoop:
  11++D36D              LL933:
  12++D36D 21 75 C0             ld      hl,XX15
  13++D370 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D372 23                   inc     hl							; looking at XX15 x sign now
  15++D373 23                   inc     hl							; looking at XX15 y Lo now
  16++D374 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D376 23           		inc		hl							; looking at XX15 y sign now
  18++D377 23           		inc		hl							; looking at XX15 z Lo now
  19++D378 CB 3E        		srl		(hl)
  20++D37A 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D37B DD 2D                dec     ixl                         ; reduce scale
  22++D37D F2 6D D3             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D380 C9                   ret
  24++D381
# file closed: ./Universe/ScaleNormal.asm
 996+ D381              ;--------------------------------------------------------------------------------------------------------
 997+ D381                                      include "Universe/ScaleObjectDistance.asm"
# file opened: ./Universe/ScaleObjectDistance.asm
   1++D381              ScaleObjectDistance:
   2++D381              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D381 3A 10 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D384 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D385              LL90:                                       ; scaling object distance
   6++D385 3A 70 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D388 47                   ld      b,a                         ; z_hi (yReg)
   8++D389                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D389 FE 00       >                 cp     0
   8++D38B C8          >                 ret    z
   9++D38C              LL90Loop:
  10++D38C              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D38C 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D38D                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D38D 2A 6C C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D390 CB 3C       >                    srl   h
  12++D392 CB 1D       >                    rr    l
  12++D394 22 6C C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D397                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D397 2A 69 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D39A CB 3C       >                    srl   h
  13++D39C CB 1D       >                    rr    l
  13++D39E 22 69 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D3A1                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D3A1 2A 6F C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D3A4 CB 3C       >                    srl   h
  14++D3A6 CB 1D       >                    rr    l
  14++D3A8 22 6F C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D3AB 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D3AC                      IfANotZeroGoto LL90Loop             ; loop until z hi = 0 this gives scalinging in c
  16++D3AC FE 00       >				cp	0
  16++D3AE C2 8C D3    >				jp	nz,LL90Loop
  17++D3B1 C9                   ret
  18++D3B2
# file closed: ./Universe/ScaleObjectDistance.asm
 998+ D3B2              ;--------------------------------------------------------------------------------------------------------
 999+ D3B2              ; Copy ship pos to camera work vector
1000+ D3B2 21 0B C0     ShipPosToXX18:          ld  hl,UBnKxlo
1001+ D3B5 11 69 C0                             ld  de,UBnkDrawCam0xLo
1002+ D3B8 01 09 00                             ld  bc,9
1003+ D3BB ED B0                                ldir
1004+ D3BD C9                                   ret
1005+ D3BE              ; Backface cull
1006+ D3BE              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
1007+ D3BE              ; normal vector = cross product of ship ccordinates
1008+ D3BE              ;
1009+ D3BE 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
1010+ D3BF 47                                   ld      b,a                                                    ;;;
1011+ D3C0 E6 80                                and     $80
1012+ D3C2 32 76 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
1013+ D3C5 78                                   ld      a,b
1014+ D3C6 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1015+ D3C8 47                                   ld      b,a
1016+ D3C9 E6 80                                and     $80
1017+ D3CB 32 78 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
1018+ D3CE 78                                   ld      a,b
1019+ D3CF CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1020+ D3D1 E6 80                                and     $80
1021+ D3D3 32 7A C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
1022+ D3D6 23                                   inc     hl                          ; move to X ccord
1023+ D3D7 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
1024+ D3D8 32 75 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
1025+ D3DB 23                                   inc     hl                                                                                                                 ;;;
1026+ D3DC 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1027+ D3DD 32 77 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
1028+ D3E0 23                                   inc     hl                                                                                                                 ;;;
1029+ D3E1 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1030+ D3E2 32 79 C0                             ld      (UBnkZScaled),a
1031+ D3E5 C9                                   ret
1032+ D3E6
1033+ D3E6 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
1034+ D3E7 47                                   ld      b,a                         ; save sign bits to b
1035+ D3E8 E6 80                                and     $80
1036+ D3EA 32 7C C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
1037+ D3ED 78                                   ld      a,b
1038+ D3EE CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1039+ D3F0 47                                   ld      b,a
1040+ D3F1 E6 80                                and     $80
1041+ D3F3 32 7E C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
1042+ D3F6 78                                   ld      a,b
1043+ D3F7 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
1044+ D3F9 E6 80                                and     $80
1045+ D3FB 32 80 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
1046+ D3FE 23                                   inc     hl                          ; move to X ccord
1047+ D3FF 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
1048+ D400 32 7B C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
1049+ D403 23                                   inc     hl                                                                                                                 ;;;
1050+ D404 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1051+ D405 32 7D C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
1052+ D408 23                                   inc     hl                                                                                                                 ;;;
1053+ D409 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
1054+ D40A 32 7F C0                             ld      (UBnkXX12zLo),a
1055+ D40D C9                                   ret
1056+ D40E
1057+ D40E              ;--------------------------------------------------------------
1058+ D40E              ; Original loginc in EE29 (LL9 4 of 12)
1059+ D40E              ; Enters with XX4 = z distnace scaled to 1 .. 31
1060+ D40E              ; get number of faces * 4      FaceCntX4
1061+ D40E              ; return if no faces
1062+ D40E              ; get Face Normal scale factor FaceScale (XX17)
1063+ D40E              ; get ship pos z hi     (XX18)
1064+ D40E              ; While Z hi <> 0
1065+ D40E              ;    FaceScale = FaceScale + 1           (XX17)
1066+ D40E              ;    Ship pos y = ship pos y / 2         (XX18)
1067+ D40E              ;    ship pos x = ship pos x / 2         (XX18)
1068+ D40E              ;    ship pos z = ship pos z / 2         (XX18)
1069+ D40E              ; Loop
1070+ D40E              ; Copy Ship Pos (XX18) to Scaled         (XX15)
1071+ D40E              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
1072+ D40E              ; Copy XX12 into XX18
1073+ D40E              ; For each face
1074+ D40E              ;     Get Face sign and visibility distance byte
1075+ D40E              ;     if normal visibility range  < XX4
1076+ D40E              ;        Get Face data into XX12
1077+ D40E              ;        if FaceScale (XX17) >= 4
1078+ D40E              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
1079+ D40E              ;        else
1080+ D40E              ;           Copy FaceScale scaled to X  (XX17)
1081+ D40E              ;LabelOverflowLoop:
1082+ D40E              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
1083+ D40E              ;           While X >= 0
1084+ D40E              ;              X--                                                                                                  ::LL93
1085+ D40E              ;              if  x >= 0
1086+ D40E              ;                  XX15x = XX15x / 2
1087+ D40E              ;                  XX15y = XX15y / 2
1088+ D40E              ;                  XX15y = XX15y / 2
1089+ D40E              ;           loop
1090+ D40E              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
1091+ D40E              ;           if A > 256 (i.e. was overflow)
1092+ D40E              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1093+ D40E              ;               X = 1
1094+ D40E              ;               Goto LabelOverflowLoop
1095+ D40E              ;           else
1096+ D40E              ;              Scaled (XX15) Z = AddZ
1097+ D40E              ;           endif
1098+ D40E              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
1099+ D40E              ;           if A > 256 (i.e. was overflow)
1100+ D40E              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1101+ D40E              ;               X = 1
1102+ D40E              ;               Goto LabelOverflowLoop
1103+ D40E              ;           else
1104+ D40E              ;              Scaled (XX15) X = AddX
1105+ D40E              ;           endif
1106+ D40E              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
1107+ D40E              ;           if A > 256 (i.e. was overflow)
1108+ D40E              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1109+ D40E              ;               X = 1
1110+ D40E              ;               Goto LabelOverflowLoop
1111+ D40E              ;           else
1112+ D40E              ;              Scaled (XX15) Y = AddY
1113+ D40E              ;           endif
1114+ D40E              ;        endif
1115+ D40E              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
1116+ D40E              ;        if dot product < 0
1117+ D40E              ;           set face visible
1118+ D40E              ;        else
1119+ D40E              ;           set face invisible
1120+ D40E              ;        end if
1121+ D40E              ;     else
1122+ D40E              ;       Set FaceVisibility to true
1123+ D40E              ;     end if
1124+ D40E              ; Next Face
1125+ D40E
1126+ D40E DD 25        ScaleDownXX15byIXH:     dec     ixh
1127+ D410 F8                                   ret     m
1128+ D411 21 75 C0                             ld      hl,UBnkXScaled
1129+ D414 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
1130+ D416 23                                   inc     hl                          ; looking at XX15 x sign now
1131+ D417 23                                   inc     hl                          ; looking at XX15 y Lo now
1132+ D418 CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
1133+ D41A 23                                   inc     hl                          ; looking at XX15 y sign now
1134+ D41B 23                                   inc     hl                          ; looking at XX15 z Lo now
1135+ D41C CB 3E                                srl     (hl)
1136+ D41E C3 0E D4                             jp      ScaleDownXX15byIXH
1137+ D421 C9                                   ret
1138+ D422
1139+ D422 21 69 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
1140+ D425 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
1141+ D427 23                                   inc     hl                          ; looking at XX18 x sign now
1142+ D428 23                                   inc     hl                          ; looking at XX18 y Lo now
1143+ D429 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
1144+ D42B 23                                   inc     hl                          ; looking at XX18 y sign now
1145+ D42C 23                                   inc     hl                          ; looking at XX18 z Lo now
1146+ D42D CB 3E                                srl     (hl)
1147+ D42F C9                                   ret
1148+ D430
1149+ D430              ;line of sight vector = [x y z] + face normal vector
1150+ D430
1151+ D430              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
1152+ D430              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
1153+ D430              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
1154+ D430              ;
1155+ D430              ;--------------------------------------------------------------
1156+ D430              ; line of sight (eye outwards dot face normal vector < 0
1157+ D430              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
1158+ D430              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1159+ D430              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1160+ D430
1161+ D430              RotateXX15ByTransMatXX16:
1162+ D430 21 30 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
1163+ D433 CD E0 86                             call    XX12ProcessOneRow
1164+ D436 47                                   ld      b,a                                 ; get
1165+ D437 7D                                   ld      a,l
1166+ D438 B0                                   or      b
1167+ D439 32 7C C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
1168+ D43C 7D                                   ld      a,l
1169+ D43D 32 7B C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
1170+ D440
1171+ D440 21 36 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
1172+ D443 CD E0 86                             call    XX12ProcessOneRow
1173+ D446 47                                   ld      b,a                                 ; get
1174+ D447 7D                                   ld      a,l
1175+ D448 B0                                   or      b
1176+ D449 32 7E C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
1177+ D44C 7D                                   ld      a,l
1178+ D44D 32 7D C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
1179+ D450
1180+ D450 21 3C C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
1181+ D453 CD E0 86                             call    XX12ProcessOneRow
1182+ D456 47                                   ld      b,a                                 ; get
1183+ D457 7D                                   ld      a,l
1184+ D458 B0                                   or      b
1185+ D459 32 80 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
1186+ D45C 7D                                   ld      a,l
1187+ D45D 32 7F C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
1188+ D460 C9                                   ret
1189+ D461
1190+ D461
1191+ D461 00           CurrentNormIdx  DB 0
1192+ D462              BackFaceCull:
1193+ D462              SomeFacesVisible:
1194+ D462              ;debug:jp debug
1195+ D462              EE29:
1196+ D462              ; DEBUG  force for now
1197+ D462              ;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
1198+ D462              ;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
1199+ D462              ;
1200+ D462              ; DEBUG
1201+ D462 CD B2 D3             call    ShipPosToXX18;
1202+ D465                      ReturnIfMemisZero FaceCtX4Addr                                  ; get number of faces * 4      FaceCntX4 &  return if no faces
1202+ D465 3A 0A C3    >                   ld   a,(FaceCtX4Addr)
1202+ D468 FE 00       >                   cp     0
1202+ D46A C8          >                   ret    z
1203+ D46B 32 F1 C2             ld      (varXX20),a
1204+ D46E                      ;DEBUGcall    ScaleObjectDistance                                     ; get Face Normal scale factor FaceScale into XX17
1205+ D46E 79                   ld      a,c                                                     ; return and setup XX17 with the adjusted Q
1206+ D46F 32 38 92             ld      (varXX17),a
1207+ D472                    ;  call    CopyXX18ScaledToXX15                                    ; Copy Ship Pos (XX18) to Scaled         (XX15)
1208+ D472 CD 3D D0             call    CopyRotmatToTransMat                                    ; Get rotation matrix into tranlation matrix
1209+ D475 CD F4 84             call    ScaleXX16Matrix197  ; JSUT A TODO DEBUG TEST            ; scaling just tidies it up as per point calcs
1210+ D478
1211+ D478
1212+ D478 21 F0 C8             ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
1213+ D47B 22 D8 91             ld      (varV),hl
1214+ D47E 3A 0A C3             ld      a,(FaceCtX4Addr)                                        ; For each face
1215+ D481 CB 3F                srl     a                                                       ;
1216+ D483 CB 3F                srl     a                                                       ;
1217+ D485 47                   ld      b,a                                                     ;
1218+ D486 AF                   xor     a
1219+ D487 32 61 D4             ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
1220+ D48A              ProcessNormalsLoop:                                                     ;
1221+ D48A E5                   push    hl
1222+ D48B C5                   push    bc
1223+ D48C 7E                   ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
1224+ D48D E6 1F                and     $1F                                                     ;     if normal visibility range  < XX4
1225+ D48F                      ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
1226+ D48F
1227+ D48F CD BE D3             call    CopyFaceToXX15                                          ;        Get Face data into XX12
1228+ D492 3A 76 C0             ld      a,(UBnkXScaledSign)
1229+ D495 CD 69 87             call    XX12EquNodeDotOrientation
1230+ D498 3A 80 C0             ld      a,(UBnkXX12zSign)
1231+ D49B ED 27 80             test    $80
1232+ D49E C2 AA D4             jp      nz, FaceVisible                                         ;        if dot product < 0 set face visible
1233+ D4A1              ;        jp      FaceNotVisible
1234+ D4A1                                               ;        if dot product < 0 set face visible
1235+ D4A1              FaceNotVisible:                                                         ;        else
1236+ D4A1 3A 61 D4             ld          a,(CurrentNormIdx)
1237+ D4A4 CD 7D D0             call        SetFaceAHidden                                      ;           set face invisible
1238+ D4A7 C3 B0 D4             jp          ProcessNormalLoopEnd                                ;        end if
1239+ D4AA              FaceVisible:
1240+ D4AA 3A 61 D4             ld          a,(CurrentNormIdx)
1241+ D4AD CD 74 D0             call        SetFaceAVisible
1242+ D4B0              ProcessNormalLoopEnd:
1243+ D4B0 21 61 D4             ld          hl, CurrentNormIdx
1244+ D4B3 34                   inc         (hl)                    ; move index pointer up by one
1245+ D4B4 C1                   pop         bc
1246+ D4B5 E1                   pop         hl                      ; get normal data pointer back
1247+ D4B6 3E 04                ld          a,4
1248+ D4B8 ED 31                add         hl,a                    ; move to next normal entry
1249+ D4BA 22 D8 91             ld          (varV),hl               ; save as we need it again
1250+ D4BD 05                   dec         b
1251+ D4BE C2 8A D4             jp          nz,ProcessNormalsLoop
1252+ D4C1 C9                   ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
1253+ D4C2              ;--------------------------------------------------------------------------------------------------------
1254+ D4C2              ; Process edges
1255+ D4C2              ; .....................................................
1256+ D4C2              TransposeNodeVal:   MACRO arg0?
1257+ D4C2 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
1258+ D4C2 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
1259+ D4C2 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1260+ D4C2 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1261+ D4C2 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1262+ D4C2 ~            NodeXPositive\1
1262+ D4C2 ~
1263+ D4C2 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1264+ D4C2 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1265+ D4C2 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
1266+ D4C2 ~                    ld          h,0                                 ; but we don;t want the sign
1267+ D4C2 ~                    add         hl,bc                               ; its a 16 bit add
1268+ D4C2 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
1269+ D4C2 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
1270+ D4C2 ~                    ld          (UbnkXPointSign),a
1271+ D4C2 ~                    jp          FinishedThisNode\1
1272+ D4C2 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
1273+ D4C2 ~            NodeNegative\1
1273+ D4C2 ~
1274+ D4C2 ~            LL52\1
1274+ D4C2 ~                                                              ;
1275+ D4C2 ~                    ld          hl,(UBnK\0lo)                       ; Coord
1276+ D4C2 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
1277+ D4C2 ~                    ld          b,0                                 ; XX12 lo byte only
1278+ D4C2 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1279+ D4C2 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
1280+ D4C2 ~            NodeXNegSignChange\1
1280+ D4C2 ~
1281+ D4C2 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
1282+ D4C2 ~                    call        negate16hl                          ; Convert back to positive and flip sign
1283+ D4C2 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
1284+ D4C2 ~                    xor         $80                                 ; Flip bit 7
1285+ D4C2 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
1286+ D4C2 ~            SetAndMop\1
1286+ D4C2 ~
1287+ D4C2 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
1288+ D4C2 ~            FinishedThisNode\1
1289+ D4C2                                  ENDM
1290+ D4C2
1291+ D4C2              ;------------------------------------------------------------------------------------------------------------------------------
1292+ D4C2              CopyByteAtNextHL:   MACRO targetaddr
1293+ D4C2 ~                                inc         hl                                  ; vertex byte#1
1294+ D4C2 ~                                ld          a,(hl)                              ;
1295+ D4C2 ~                                ld          (targetaddr),a                     ; XX15+2 = (V),Y
1296+ D4C2                                  ENDM
1297+ D4C2              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1298+ D4C2
1299+ D4C2              TransposeXX12NodeToXX15:
1300+ D4C2                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1300+ D4C2 3A 0D C0    >               ld       a,(UBnKxsgn)
1300+ D4C5 32 77 C0    >               ld       (UbnkXPointSign),a
1301+ D4C8 ED 4B 7B C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1302+ D4CC A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1303+ D4CD FA E3 D4             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1304+ D4D0              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1305+ D4D0              NodeXPositiveX:
1306+ D4D0 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1307+ D4D1 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1308+ D4D3 2A 0B C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1309+ D4D6 26 00                ld          h,0                                 ; but we don;t want the sign
1310+ D4D8 09                   add         hl,bc                               ; its a 16 bit add
1311+ D4D9 22 75 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1312+ D4DC AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1313+ D4DD 32 77 C0             ld          (UbnkXPointSign),a
1314+ D4E0 C3 FF D4             jp          FinishedThisNodeX
1315+ D4E3              ; If we get here then _sign and vertv_ have different signs so do subtract
1316+ D4E3              NodeNegativeX:
1317+ D4E3              LL52X:                                                 ;
1318+ D4E3 2A 0B C0             ld          hl,(UBnKxlo)                       ; Coord
1319+ D4E6 ED 4B 7B C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1320+ D4EA 06 00                ld          b,0                                 ; XX12 lo byte only
1321+ D4EC ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1322+ D4EE F2 FC D4             jp          p,SetAndMopX                       ; if result is positive skip to write back
1323+ D4F1              NodeXNegSignChangeX:
1324+ D4F1              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1325+ D4F1 CD BC A1             call        negate16hl                          ; Convert back to positive and flip sign
1326+ D4F4 3A 77 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1327+ D4F7 EE 80                xor         $80                                 ; Flip bit 7
1328+ D4F9 32 77 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1329+ D4FC              SetAndMopX:
1330+ D4FC 22 0B C0             ld          (UBnKxlo),hl                       ; XX15+0
1331+ D4FF              FinishedThisNodeX:
1332+ D4FF
1333+ D4FF              LL53:
1334+ D4FF
1335+ D4FF                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1335+ D4FF 3A 10 C0    >               ld       a,(UBnKysgn)
1335+ D502 32 7A C0    >               ld       (UbnkYPointSign),a
1336+ D505 ED 4B 7D C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1337+ D509 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1338+ D50A FA 20 D5             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1339+ D50D              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1340+ D50D              NodeXPositiveY:
1341+ D50D 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1342+ D50E 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1343+ D510 2A 0E C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1344+ D513 26 00                ld          h,0                                 ; but we don;t want the sign
1345+ D515 09                   add         hl,bc                               ; its a 16 bit add
1346+ D516 22 78 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1347+ D519 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1348+ D51A 32 77 C0             ld          (UbnkXPointSign),a
1349+ D51D C3 3C D5             jp          FinishedThisNodeY
1350+ D520              ; If we get here then _sign and vertv_ have different signs so do subtract
1351+ D520              NodeNegativeY:
1352+ D520              LL52Y:                                                 ;
1353+ D520 2A 0E C0             ld          hl,(UBnKylo)                       ; Coord
1354+ D523 ED 4B 7D C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1355+ D527 06 00                ld          b,0                                 ; XX12 lo byte only
1356+ D529 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1357+ D52B F2 39 D5             jp          p,SetAndMopY                       ; if result is positive skip to write back
1358+ D52E              NodeXNegSignChangeY:
1359+ D52E              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1360+ D52E CD BC A1             call        negate16hl                          ; Convert back to positive and flip sign
1361+ D531 3A 7A C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1362+ D534 EE 80                xor         $80                                 ; Flip bit 7
1363+ D536 32 7A C0             ld          (UbnkYPointSign),a                 ; XX15+2
1364+ D539              SetAndMopY:
1365+ D539 22 0E C0             ld          (UBnKylo),hl                       ; XX15+0
1366+ D53C              FinishedThisNodeY:
1367+ D53C
1368+ D53C
1369+ D53C              TransposeZ:
1370+ D53C              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1371+ D53C 3A 80 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1372+ D53F                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1372+ D53F CB 7F       >                        bit 	7,a
1372+ D541 C2 55 D5    >                        jp      nz,NegativeNodeZ
1373+ D544 3A 7F C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1374+ D547 2A 11 C0             ld          hl,(UbnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1375+ D54A ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1376+ D54C 7D                   ld          a,l
1377+ D54D 32 4E 92             ld          (varT),a                            ;                                                                           ;;;
1378+ D550 7C                   ld          a,h
1379+ D551 32 30 92             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1380+ D554 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1381+ D555              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1382+ D555              NegativeNodeZ:
1383+ D555              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1384+ D555 2A 11 C0             ld          hl,(UbnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1385+ D558 ED 4B 7F C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1386+ D55C 06 00                ld          b,0                                 ; upper byte will be garbage
1387+ D55E                      ClearCarryFlag
1387+ D55E B7          >				or a
1388+ D55F ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1389+ D561 7D                   ld          a,l
1390+ D562 32 4E 92             ld          (varT),a                            ; t = result low
1391+ D565 7C                   ld          a,h
1392+ D566 32 30 92             ld          (varU),a                            ; u = result high
1393+ D569 E2 76 D5             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1394+ D56C              LL56Overflow:
1395+ D56C FE 00                cp          0                                   ; is varU 0?
1396+ D56E 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1397+ D570 3A 4E 92             ld          a,(varT)                            ; T \ restore z lo
1398+ D573                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1398+ D573 FE 04       >                   cp    4
1398+ D575 D0          >                   ret	 nc
1399+ D576              MakeNodeClose:
1400+ D576              LL140:                                                  ; else make node close
1401+ D576 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1402+ D577 32 30 92             ld          (varU),a                            ; U
1403+ D57A 3E 04                ld          a,4                                 ; lo
1404+ D57C 32 4E 92             ld          (varT),a                            ; T
1405+ D57F C9                   ret
1406+ D580              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1407+ D580              ProcessVisibleNode:
1408+ D580              RotateNode:                                                                                                                         ;;;
1409+ D580 CD 98 D1             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1410+ D583              LL52LL53LL54LL55
1411+ D583              TransposeNode:
1412+ D583 CD C2 D4             call        TransposeXX12NodeToXX15
1413+ D586
1414+ D586              ; ......................................................                                                         ;;;
1415+ D586              NodeAdditionsDone:
1416+ D586              Scale16BitTo8Bit:
1417+ D586              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1418+ D586 3A 30 92             ld          a,(varU)                            ; U \ z hi
1419+ D589 21 76 C0             ld          hl,UbnkXPointHi
1420+ D58C B6                   or          (hl)                                ; XX15+1    \ x hi
1421+ D58D 21 79 C0             ld          hl,UbnkYPointHi
1422+ D590 B6                   or          (hl)                                ; XX15+4    \ y hi
1423+ D591              AreXYZHiAllZero:
1424+ D591 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1425+ D593              DivideXYZBy2:
1426+ D593                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1426+ D593 2A 75 C0    >                    ld    hl,(UbnkXPoint)
1426+ D596 CB 3C       >                    srl   h
1426+ D598 CB 1D       >                    rr    l
1426+ D59A 22 75 C0    >                    ld    (UbnkXPoint),hl
1427+ D59D                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1427+ D59D 2A 78 C0    >                    ld    hl,(UbnkYPoint)
1427+ D5A0 CB 3C       >                    srl   h
1427+ D5A2 CB 1D       >                    rr    l
1427+ D5A4 22 78 C0    >                    ld    (UbnkYPoint),hl
1428+ D5A7 3A 30 92             ld          a,(varU)                            ; U \ z hi
1429+ D5AA 67                   ld          h,a
1430+ D5AB 3A 4E 92             ld          a,(varT)                            ; T \ z lo
1431+ D5AE 6F                   ld          l,a
1432+ D5AF                      ShiftHLRight1
1432+ D5AF CB 3C       >			   srl h
1432+ D5B1 CB 1D       >			   rr  l
1433+ D5B3 7C                   ld          a,h
1434+ D5B4 32 30 92             ld          (varU),a
1435+ D5B7 7D                   ld          a,l
1436+ D5B8 32 4E 92             ld          (varT),a                            ; T \ z lo
1437+ D5BB C3 86 D5             jp          Scale16BitTo8Bit                    ; loop U
1438+ D5BE              NodeScalingDone:
1439+ D5BE              LL60:                                                   ; hi U rolled to 0, exited loop above.
1440+ D5BE              ProjectNodeToScreen:
1441+ D5BE                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1441+ D5BE 3A 4E 92    >               ld       a,(varT)
1441+ D5C1 32 31 92    >               ld       (varQ),a
1442+ D5C4 3A 75 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1443+ D5C7 21 31 92             ld          hl,varQ
1444+ D5CA BE                   cp          (hl)                                ; Q
1445+ D5CB                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1445+ D5CB DA D4 D5    >                        jp		c,DoSmallAngle
1446+ D5CE CD D6 A5             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1447+ D5D1 C3 DC D5             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1448+ D5D4              DoSmallAngle:                                           ; small x angle
1449+ D5D4              LL69:
1450+ D5D4              ; TODO check if we need to retain BC as this trashes it
1451+ D5D4              ;Input: BC = Dividend, DE = Divisor, HL = 0
1452+ D5D4              ;Output: BC = Quotient, HL = Remainder
1453+ D5D4 47                   ld      b,a
1454+ D5D5 CD 15 A0             call    DIV16UNDOC
1455+ D5D8 79                   ld      a,c
1456+ D5D9 32 32 92             ld      (varR),a
1457+ D5DC               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1458+ D5DC              SkipSmallAngle:
1459+ D5DC              ScaleX:
1460+ D5DC              LL65:                                                   ; both continue for scaling based on z
1461+ D5DC 3A 77 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1462+ D5DF                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1462+ D5DF CB 7F       >                        bit 	7,a
1462+ D5E1 C2 F4 D5    >                        jp      nz,NegativeXPoint
1463+ D5E4              ; ......................................................
1464+ D5E4              PositiveXPoint:
1465+ D5E4 3A 32 92             ld          a,(varR)
1466+ D5E7 6F                   ld          l,a
1467+ D5E8 3A 30 92             ld          a,(varU)
1468+ D5EB 67                   ld          h,a
1469+ D5EC 3E 80                ld          a,ScreenCenterX
1470+ D5EE ED 31                add         hl,a
1471+ D5F0 EB                   ex          de,hl
1472+ D5F1 C3 04 D6             jp          StoreXPoint
1473+ D5F4              NegativeXPoint:
1474+ D5F4              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1475+ D5F4 3A 32 92             ld          a,(varR)
1476+ D5F7 6F                   ld          l,a
1477+ D5F8 3A 30 92             ld          a,(varU)
1478+ D5FB 67                   ld          h,a
1479+ D5FC 0E 80                ld          c,ScreenCenterX
1480+ D5FE 06 00                ld          b,0
1481+ D600                      ClearCarryFlag
1481+ D600 B7          >				or a
1482+ D601 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1483+ D603 EB                   ex          de,hl
1484+ D604              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1485+ D604 FD 73 00             ld          (iy+0),e                            ; Update X Point
1486+ D607 FD 72 01             ld          (iy+1),d                            ; Update X Point
1487+ D60A FD 23                inc         iy
1488+ D60C FD 23                inc         iy
1489+ D60E              ; ......................................................
1490+ D60E              LL66:
1491+ D60E              ProcessYPoint:
1492+ D60E AF                   xor         a                                   ; y hi = 0
1493+ D60F 32 30 92             ld          (varU),a                            ; U
1494+ D612                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1494+ D612 3A 4E 92    >               ld       a,(varT)
1494+ D615 32 31 92    >               ld       (varQ),a
1495+ D618 3A 78 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1496+ D61B 21 31 92             ld          hl,varQ
1497+ D61E BE                   cp          (hl)                                ; Q
1498+ D61F                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1498+ D61F DA 28 D6    >                        jp		c,SmallYHop
1499+ D622              SmallYPoint:
1500+ D622 CD D6 A5             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1501+ D625 C3 2B D6             jp          SkipYScale                          ; LL68 hop over small y yangle
1502+ D628              SmallYHop:
1503+ D628              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1504+ D628 CD B3 A5             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1505+ D62B              SkipYScale:
1506+ D62B              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1507+ D62B 3A 7A C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1508+ D62E CB 7F                bit         7,a
1509+ D630 C2 43 D6             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1510+ D633              PositiveYPoint:
1511+ D633 3A 32 92             ld          a,(varR)
1512+ D636 6F                   ld          l,a
1513+ D637 3A 30 92             ld          a,(varU)
1514+ D63A 67                   ld          h,a
1515+ D63B 3E 60                ld          a,ScreenHeightHalf
1516+ D63D ED 31                add         hl,a
1517+ D63F EB                   ex          de,hl
1518+ D640 C3 53 D6             jp          LL50
1519+ D643              NegativeYPoint:
1520+ D643              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1521+ D643 3A 32 92             ld          a,(varR)
1522+ D646 6F                   ld          l,a
1523+ D647 3A 30 92             ld          a,(varU)
1524+ D64A 67                   ld          h,a
1525+ D64B 0E 60                ld          c,ScreenHeightHalf
1526+ D64D 06 00                ld          b,0
1527+ D64F                      ClearCarryFlag
1527+ D64F B7          >				or a
1528+ D650 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1529+ D652 EB                   ex          de,hl
1530+ D653              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1531+ D653 FD 73 00             ld          (iy+0),e                            ; Update X Point
1532+ D656 FD 72 01             ld          (iy+1),d                            ; Update X Point
1533+ D659 FD 23                inc         iy
1534+ D65B FD 23                inc         iy
1535+ D65D C9                   ret
1536+ D65E              ;--------------------------------------------------------------------------------------------------------
1537+ D65E              ;;;     Byte 0 = X magnitide with origin at middle of ship
1538+ D65E              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1539+ D65E              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1540+ D65E              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1541+ D65E              CopyNodeToXX15:
1542+ D65E                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1542+ D65E 7E          >               ld       a,(hl)
1542+ D65F 32 75 C0    >               ld       (UBnkXScaled),a
1543+ D662 23                   inc         hl
1544+ D663                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1544+ D663 7E          >               ld       a,(hl)
1544+ D664 32 77 C0    >               ld       (UBnkYScaled),a
1545+ D667 23                   inc         hl
1546+ D668                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1546+ D668 7E          >               ld       a,(hl)
1546+ D669 32 79 C0    >               ld       (UBnkZScaled),a
1547+ D66C 23                   inc         hl
1548+ D66D              PopulateXX15SignBits:
1549+ D66D              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1550+ D66D 7E                   ld          a,(hl)
1551+ D66E 4F                   ld          c,a                                 ; copy sign and visibility to c
1552+ D66F 47                   ld          b,a
1553+ D670 E6 80                and         $80                                 ; keep high 3 bits
1554+ D672 32 76 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1555+ D675 78                   ld          a,b
1556+ D676 E6 40                and         $40
1557+ D678 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1558+ D67A 32 78 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1559+ D67D 78                   ld          a,b
1560+ D67E E6 20                and         $20
1561+ D680 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1562+ D682 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1563+ D684 32 7A C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1564+ D687 79                   ld          a,c                                 ; returns a with visibility sign byte
1565+ D688 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1566+ D68A 32 4E 92             ld          (varT),a                            ; and store in varT as its needed later
1567+ D68D C9                   ret
1568+ D68E
1569+ D68E              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1570+ D68E              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1571+ D68E              ;..............................................................................................................................
1572+ D68E              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1573+ D68E              LL48GetScale:
1574+ D68E 3A 64 91             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1575+ D691 5F                   ld          e,a
1576+ D692 CD 5E D6             call        CopyNodeToXX15
1577+ D695              LL48GetVertices:
1578+ D695              LL48GetVertSignAndVisDist:
1579+ D695                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1579+ D695 BB          >                        cp      e
1579+ D696 DA D7 D6    >                        jp		c,NodeIsNotVisible
1580+ D699              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1581+ D699                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1581+ D699 23          >                    inc         hl                                  ; vertex byte#1
1581+ D69A 7E          >                    ld          a,(hl)                              ;
1581+ D69B 32 D3 91    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1582+ D69E 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1583+ D69F E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1584+ D6A1 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1585+ D6A2                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1585+ D6A2 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
1585+ D6A5 ED 31       >                    add         hl,a
1585+ D6A7 7E          >                    ld          a,(hl)
1586+ D6A8 E1                   pop         hl                                  ;                                                                           ;;;
1587+ D6A9                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1587+ D6A9 FE 00       >				cp	0
1587+ D6AB C2 DD D6    >				jp	nz,NodeIsVisible
1588+ D6AE              CheckFace2:                                                                                                                         ;;;
1589+ D6AE 7A                   ld          a,d                                                                                                             ;;;
1590+ D6AF ED 23                swapnib                                                                                                                     ;;;
1591+ D6B1 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1592+ D6B3                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1592+ D6B3 FE 00       >				cp	0
1592+ D6B5 C2 DD D6    >				jp	nz,NodeIsVisible
1593+ D6B8              CheckFace3:                                                                                                                         ;;;
1594+ D6B8                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1594+ D6B8 23          >                    inc         hl                                  ; vertex byte#1
1594+ D6B9 7E          >                    ld          a,(hl)                              ;
1594+ D6BA 32 D3 91    >                    ld          (varP),a                     ; XX15+2 = (V),Y
1595+ D6BD 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1596+ D6BE E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1597+ D6C0 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1598+ D6C1                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1598+ D6C1 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
1598+ D6C4 ED 31       >                    add         hl,a
1598+ D6C6 7E          >                    ld          a,(hl)
1599+ D6C7 E1                   pop         hl                                  ;                                                                           ;;;
1600+ D6C8                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1600+ D6C8 FE 00       >				cp	0
1600+ D6CA C2 DD D6    >				jp	nz,NodeIsVisible
1601+ D6CD              CheckFace4:                                                                                                                         ;;;
1602+ D6CD 7A                   ld          a,d                                                                                                             ;;;
1603+ D6CE ED 23                swapnib                                                                                                                     ;;;
1604+ D6D0 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1605+ D6D2                      IfANotZeroGoto NodeIsVisible                    ; is face 1 visible                                                         ;;;
1605+ D6D2 FE 00       >				cp	0
1605+ D6D4 C2 DD D6    >				jp	nz,NodeIsVisible
1606+ D6D7              NodeIsNotVisible:                                                                                                                   ;;;
1607+ D6D7 01 04 00             ld          bc,4
1608+ D6DA FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1609+ D6DC                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1610+ D6DC C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1611+ D6DD              NodeIsVisible:
1612+ D6DD              LL49:
1613+ D6DD CD 80 D5             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1614+ D6E0 C9                   ret
1615+ D6E1
1616+ D6E1
1617+ D6E1              ProjectNodeToEye:
1618+ D6E1 ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1619+ D6E5 79           	ld			a,c                                 ;  so no need for a negative check
1620+ D6E6 32 31 92     	ld			(varQ),a		                    ; VarQ = z
1621+ D6E9 3A 75 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1622+ D6EC CD FE 9F     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1623+ D6EF 3A 76 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1624+ D6F2                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1624+ D6F2 CB 7F       >                        bit 	7,a
1624+ D6F4 C2 FF D6    >                        jp      nz,EyeNegativeXPoint
1625+ D6F7              EyePositiveXPoint:									; x was positive result
1626+ D6F7 2E 80            ld          l,ScreenCenterX						;
1627+ D6F9 26 00            ld          h,0
1628+ D6FB 09               add         hl,bc								; hl = Screen Centre + X
1629+ D6FC C3 06 D7         jp          EyeStoreXPoint
1630+ D6FF              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1631+ D6FF 2E 80            ld          l,ScreenCenterX
1632+ D701 26 00            ld          h,0
1633+ D703                  ClearCarryFlag
1633+ D703 B7          >				or a
1634+ D704 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1635+ D706              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1636+ D706 EB               ex          de,hl
1637+ D707 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1638+ D70A FD 72 01         ld          (iy+1),d                            ; Update X Point
1639+ D70D              EyeProcessYPoint:
1640+ D70D ED 4B 79 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1641+ D711 79           	ld			a,c
1642+ D712 32 31 92     	ld			(varQ),a
1643+ D715 3A 77 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1644+ D718 CD FE 9F     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1645+ D71B 3A 78 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1646+ D71E                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1646+ D71E CB 7F       >                        bit 	7,a
1646+ D720 C2 2B D7    >                        jp      nz,EyeNegativeYPoint
1647+ D723              EyePositiveYPoint:									; Y is positive so above the centre line
1648+ D723 2E 60            ld          l,ScreenCenterY
1649+ D725                  ClearCarryFlag
1649+ D725 B7          >				or a
1650+ D726 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1651+ D728 C3 30 D7         jp          EyeStoreYPoint
1652+ D72B              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1653+ D72B 2E 60            ld          l,ScreenCenterY
1654+ D72D 26 00            ld          h,0
1655+ D72F 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1656+ D730              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1657+ D730 EB               ex          de,hl
1658+ D731 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1659+ D734 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1660+ D737 C9               ret
1661+ D738
1662+ D738
1663+ D738
1664+ D738              ; Pitch and roll are 2 phases
1665+ D738              ; 1 - we apply our pitch and roll to the ship position
1666+ D738              ;       x -> x + alpha * (y - alpha * x)
1667+ D738              ;       y -> y - alpha * x - beta * z
1668+ D738              ;       z -> z + beta * (y - alpha * x - beta * z)
1669+ D738              ; which can be simplified as:
1670+ D738              ;       1. K2 = y - alpha * x
1671+ D738              ;       2. z = z + beta * K2
1672+ D738              ;       3. y = K2 - beta * z
1673+ D738              ;       4. x = x + alpha * y
1674+ D738              ; 2 - we apply our patch and roll to the ship orientation
1675+ D738              ;      Roll calculations:
1676+ D738              ;
1677+ D738              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1678+ D738              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1679+ D738              ;      Pitch calculations:
1680+ D738              ;
1681+ D738              ;        nosev_y = nosev_y - beta * nosev_z_hi
1682+ D738              ;        nosev_z = nosev_z + beta * nosev_y_hi
1683+ D738
1684+ D738
1685+ D738
1686+ D738              APPequAPPFlippedMulQ:
1687+ D738
1688+ D738 3A EC 91     ApplyMyRollToNosevY:    ld  a,(ALP1)                ;
1689+ D73B 32 31 92                             ld  (varQ),a                ; Set Q = alpha (the roll angle to rotate through)
1690+ D73E 2A 22 C0                             ld  hl,(UBnkrotmatNosevY)
1691+ D741 22 32 92                             ld  (varR),hl               ; RS =  nosev_y
1692+ D744 3A 21 C0                             ld  a,(UBnkrotmatNosevX+1)  ; Set A = -nosev_x_hi
1693+ D747 EE 80                                xor $80
1694+ D749 CD 2D 9F                             call  madXAequQmulAaddRS   ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1695+ D74C 2A 32 92                             ld  hl,(varR)
1696+ D74F 22 22 C0                             ld  (UBnkrotmatNosevY),hl   ; nosevY = RS  nosev_y = nosev_y - alpha * nosev_x_hi
1697+ D752 2A 20 C0                             ld hl,(UBnkrotmatNosevX)    ; Set (S R) = nosev_x
1698+ D755 22 32 92                             ld  (varR),hl
1699+ D758 3A 23 C0                             ld  a,(UBnkrotmatNosevY+1)  ;  Set A = nosev_y_hi
1700+ D75B CD 2D 9F                             call madXAequQmulAaddRS     ; Set (A X) = Q * A + (S R)
1701+ D75E 2A 32 92                             ld  hl,(varR)               ; = alpha * nosev_y_hi + nosev_x and store (A X) in nosev_x, so this does:
1702+ D761 22 20 C0                             ld  (UBnkrotmatNosevX),hl   ; nosev_x = nosev_x + alpha * nosev_y_hi
1703+ D764 C9                                   ret
1704+ D765
1705+ D765 3A EC 91     ApplyMyRollToSidevY:    ld  a,(ALP1)
1706+ D768 32 31 92                             ld  (varQ),a                ; Set Q = alpha (the roll angle to rotate through)
1707+ D76B 2A 16 C0                             ld  hl,(UBnkrotmatSidevY)
1708+ D76E 22 32 92                             ld  (varR),hl               ; RS =  nosev_y
1709+ D771 3A 15 C0                             ld  a,(UBnkrotmatSidevX+1)  ; Set A = -nosev_x_hi
1710+ D774 EE 80                                xor $80
1711+ D776 CD 2D 9F                             call  madXAequQmulAaddRS    ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1712+ D779 2A 32 92                             ld  hl,(varR)
1713+ D77C 22 16 C0                             ld  (UBnkrotmatSidevY),hl   ; nosevY = RS  nosev_y = nosev_y - alpha * nosev_x_hi
1714+ D77F 2A 14 C0                             ld hl,(UBnkrotmatSidevX)    ; Set (S R) = nosev_x
1715+ D782 22 32 92                             ld  (varR),hl
1716+ D785 3A 17 C0                             ld  a,(UBnkrotmatSidevY+1)  ;  Set A = nosev_y_hi
1717+ D788 CD 2D 9F                             call madXAequQmulAaddRS     ; Set (A X) = Q * A + (S R)
1718+ D78B 2A 32 92                             ld  hl,(varR)               ; = alpha * nosev_y_hi + nosev_x and store (A X) in nosev_x, so this does:
1719+ D78E 22 14 C0                             ld  (UBnkrotmatSidevX),hl   ; nosev_x = nosev_x + alpha * nosev_y_hi
1720+ D791 C9                                   ret
1721+ D792
1722+ D792 3A EC 91     ApplyMyRollToRoofvY:    ld  a,(ALP1)
1723+ D795 32 31 92                             ld  (varQ),a                ; Set Q = alpha (the roll angle to rotate through)
1724+ D798 2A 1C C0                             ld  hl,(UBnkrotmatRoofvY)
1725+ D79B 22 32 92                             ld  (varR),hl               ; RS =  nosev_y
1726+ D79E 3A 1B C0                             ld  a,(UBnkrotmatRoofvX+1)  ; Set A = -nosev_x_hi
1727+ D7A1 EE 80                                xor $80
1728+ D7A3 CD 2D 9F                             call  madXAequQmulAaddRS    ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
1729+ D7A6 2A 32 92                             ld  hl,(varR)
1730+ D7A9 22 1C C0                             ld  (UBnkrotmatRoofvY),hl   ; nosevY = RS  nosev_y = nosev_y - alpha * nosev_x_hi
1731+ D7AC 2A 1A C0                             ld hl,(UBnkrotmatRoofvX)    ; Set (S R) = nosev_x
1732+ D7AF 22 32 92                             ld  (varR),hl
1733+ D7B2 3A 1D C0                             ld  a,(UBnkrotmatRoofvY+1)  ;  Set A = nosev_y_hi
1734+ D7B5 CD 2D 9F                             call madXAequQmulAaddRS     ; Set (A X) = Q * A + (S R)
1735+ D7B8 2A 32 92                             ld  hl,(varR)               ; = alpha * nosev_y_hi + nosev_x and store (A X) in nosev_x, so this does:
1736+ D7BB 22 1A C0                             ld  (UBnkrotmatRoofvX),hl   ; nosev_x = nosev_x + alpha * nosev_y_hi
1737+ D7BE C9                                   ret
1738+ D7BF
1739+ D7BF
1740+ D7BF
1741+ D7BF
1742+ D7BF              ; (-a)-(-b)=  if ABS(a)> ABS(B), (ABS(a)-abs(b))*-1 Else (ABS(b)-abs(a))
1743+ D7BF              ; (+a)-(+b)=  if ABS(a) > ABS(B), ABS(a)- abs (B)   else (ABS(B) - abs(A) * -1
1744+ D7BF              ; (-a)-(+b)=  (ABS(a) + ABS(b)) * -1
1745+ D7BF              ; (+a)-(-b)=  ABS(a) + ABS(b)
1746+ D7BF 47           AHLequUbnkYminusAHL:    ld      b,a
1747+ D7C0 EB                                   ex      de,hl
1748+ D7C1 2A 0E C0                             ld      hl,(UBnKylo)        ; hl = unsigned Y
1749+ D7C4 3A 10 C0                             ld      a,(UBnKysgn)        ; ahl = signed Y corrodinate
1750+ D7C7 A8                                   xor     b                   ; now we need to see if signs were different or same
1751+ D7C8                                      JumpIfNegative .SignsDifferent
1751+ D7C8 FA DE D7    >                        jp		m,.SignsDifferent
1752+ D7CB CD B6 A1     .SignsTheSame:          call    compare16HLDE
1753+ D7CE 38 06                                jr      c,.HLLessThanDE
1754+ D7D0 B7 ED 52     .HLGreaterDE:           sub     hl,de               ; sub hl from de and leave sign the same
1755+ D7D3 78                                   ld      a,b
1756+ D7D4 18 13                                jr      .WasResultZero
1757+ D7D6 EB           .HLLessThanDE:          ex      de,hl
1758+ D7D7 B7 ED 52                             sub     hl,de
1759+ D7DA EE 80                                xor     $80                  ; flip sign bit
1760+ D7DC 18 0B                                jr      .WasResultZero
1761+ D7DE 19           .SignsDifferent:        add     hl,de
1762+ D7DF                                      JumpOnBitClear  b,7,.UbnkNegative
1762+ D7DF CB 78       >                        bit 	7,b
1762+ D7E1 CA E7 D7    >                        jp      z,.UbnkNegative
1763+ D7E4 AF                                   xor     a
1764+ D7E5 18 02                                jr      .WasResultZero
1765+ D7E7 3E 80        .UbnkNegative:          ld      a,$80
1766+ D7E9 47           .WasResultZero:         ld      b,a                 ; but zero can result in -0
1767+ D7EA 7C                                   ld      a,h
1768+ D7EB B5                                   or      l
1769+ D7EC 3E 80                                ld      a,$80
1770+ D7EE C0                                   ret     nz
1771+ D7EF AF           .ResultWasZero:         xor     a
1772+ D7F0 C9                                   ret
1773+ D7F1
1774+ D7F1              ; 1. K2 = y - alpha * x
1775+ D7F1              ; 2. z = z + beta * K2
1776+ D7F1              ; 3. y = K2 - beta * z
1777+ D7F1              ; 4. x = x + alpha * y
1778+ D7F1
1779+ D7F1
1780+ D7F1              ; Test roll only so beta will be 0 therefore:
1781+ D7F1              ; 1. K2 = y - alpha * x
1782+ D7F1              ; 2. z = z + 0 * K2     so z in untouched
1783+ D7F1              ; 3. y = K2 * z
1784+ D7F1              ; 4. x = x + alpha * y
1785+ D7F1
1786+ D7F1 3A EC 91     ApplyMyRollToPosition:  ld      a,(ALP1)
1787+ D7F4 16 00                                ld      d,0
1788+ D7F6 5F                                   ld      e,a                 ; de = unsigned roll magnitude
1789+ D7F7 2A 0B C0                             ld      hl,(UBnKxlo)        ; hl = position X unsigned
1790+ D7FA 6C                                   ld      l,h
1791+ D7FB 26 00                                ld      h,0
1792+ D7FD CD 50 9F                             call    mulDEbyHL          ; hl = de * hl
1793+ D800 3A ED 91                             ld      a,(ALP2)
1794+ D803 47                                   ld      b,a                 ; b = sign
1795+ D804 3A 0D C0                             ld      a,(UBnKxsgn)        ; a = position sign
1796+ D807 A8                                   xor     b                   ; xor so if opposite then
1797+ D808 E6 80                                and     $80                 ; so -*- = +, +*+ = + opposite signes = negative
1798+ D80A CD BF D7                             call    AHLequUbnkYminusAHL
1799+ D80D 22 F2 91                             ld      (varKp1),hl
1800+ D810 32 F4 91                             ld      (varKp3),a          ; Kp = y - alph * x as 16 bit + sign bit
1801+ D813 00           .ZEquZPlusBetaMulK2:    nop                         ; for now as beta is not conisdered
1802+ D814 2A F2 91     .YEquK2MinusBetaMulZ:   ld      hl,(varKp1)
1803+ D817 22 0E C0                             ld      (UBnKylo),hl
1804+ D81A 3A F4 91                             ld      a,(varKp3)
1805+ D81D 32 10 C0                             ld      (UBnKysgn),a        ; for now as beta = 0
1806+ D820 3A EC 91     .XequXPlusAlphaMulY:    ld      a,(ALP1)
1807+ D823 16 00                                ld      d,0
1808+ D825 5F                                   ld      e,a                 ; de = unsigned roll magnitude
1809+ D826 2A 0E C0                             ld      hl,(UBnKylo)        ; hl = position X unsigned
1810+ D829 6C                                   ld      l,h
1811+ D82A 26 00                                ld      h,0
1812+ D82C CD 50 9F                             call    mulDEbyHL          ; hl = de * hl
1813+ D82F 3A ED 91                             ld      a,(ALP2)
1814+ D832 47                                   ld      b,a                 ; b = sign
1815+ D833 3A 10 C0                             ld      a,(UBnKysgn)        ; a = position sign
1816+ D836 A8                                   xor     b                   ; xor so if opposite then
1817+ D837 E6 80                                and     $80                 ; so -*- = +, +*+ = + opposite signes = negative
1818+ D839 4F                                   ld      c,a
1819+ D83A EB                                   ex      de,hl
1820+ D83B 2A 0B C0                             ld      hl,(UBnKxlo)
1821+ D83E 3A 0D C0                             ld      a,(UBnKxsgn)
1822+ D841 B4                                   or      h
1823+ D842 67                                   ld      h,a
1824+ D843 78                                   ld      a,b
1825+ D844 B2                                   or      d
1826+ D845 57                                   ld      d,a
1827+ D846 CD 5E CB                             call    ADDHLDESignedv3
1828+ D849 22 0B C0                             ld      (UBnKxlo), hl
1829+ D84C 7C                                   ld      a,h
1830+ D84D E6 80                                and     $80
1831+ D84F 32 0D C0                             ld      (UBnKxsgn), a
1832+ D852 C9                                   ret
1833+ D853              ;----------------------------------------------------------------------------------------------------------------------------------
1834+ D853 3A EC 91     ApplyMyRollAndPitch:    ld      a,(ALP1)
1835+ D856 FE 00                                cp      0
1836+ D858 28 03                                jr      z,.NoRotation
1837+ D85A CD F1 D7                             call    ApplyMyRollToPosition
1838+ D85D                      ;                call    ApplyMyRollToNosevY
1839+ D85D                      ;                call    ApplyMyRollToSidevY
1840+ D85D                      ;                call    ApplyMyRollToRoofvY
1841+ D85D C9           .NoRotation:            ret
1842+ D85E              ; .....................................................
1843+ D85E              ; Process Nodes does the following:
1844+ D85E              ; for each node:
1845+ D85E              ;     see if node >
1846+ D85E 00           PNXX20DIV6          DB      0
1847+ D85F 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1848+ D861 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1849+ D863 00           PNLASTNORM          DB      0
1850+ D864              ProcessNodes:
1851+ D864 AF               xor     a
1852+ D865 32 F1 C2         ld      (UbnkLineArrayLen),a
1853+ D868 CD 3D D0         call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1854+ D86B CD F4 84         call    ScaleXX16Matrix197               ;#02; Normalise XX16
1855+ D86E CD EC D0         call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1856+ D871 CD 05 D1         call    InverseXX16                      ;#11; Invert rotation matrix
1857+ D874 21 14 C3         ld      hl,UBnkHullVerticies
1858+ D877 3A 06 C3         ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1859+ D87A              GetActualVertexCount:
1860+ D87A 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1861+ D87B 4F               ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1862+ D87C 16 06            ld      d,6
1863+ D87E CD 2E A0         call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1864+ D881 41               ld      b,c                              ; c = number of vertices
1865+ D882 FD 21 BF C0      ld      iy,UBnkNodeArray
1866+ D886              LL48:
1867+ D886              PointLoop:
1868+ D886 C5           	push	bc                                  ; save counters
1869+ D887 E5           	push	hl                                  ; save verticies list pointer
1870+ D888 FD E5        	push	iy                                  ; save Screen plot array pointer
1871+ D88A 78               ld      a,b
1872+ D88B                  ;break
1873+ D88B CD 5E D6         call    CopyNodeToXX15                      ; copy verices at hl to xx15
1874+ D88E 3A 76 C0     	ld		a,(UBnkXScaledSign)
1875+ D891 CD 69 87     	call    XX12EquNodeDotOrientation
1876+ D894 CD 9A 87     	call    TransposeXX12ByShipToXX15
1877+ D897 CD 75 85     	call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1878+ D89A FD E1        	pop		iy                                  ; get back screen plot array pointer
1879+ D89C CD E1 D6     	call    ProjectNodeToEye                     ; set up screen plot list entry
1880+ D89F                 ; ld      hl,UbnkLineArrayLen
1881+ D89F                ;  inc     (hl)                                ; another node done
1882+ D89F              ReadyForNextPoint:
1883+ D89F FD E5        	push	iy                                  ; copy screen plot pointer to hl
1884+ D8A1 E1           	pop		hl
1885+ D8A2 3E 04        	ld		a,4
1886+ D8A4 ED 31        	add		hl,a
1887+ D8A6 E5           	push	hl                                  ; write it back at iy + 4
1888+ D8A7 FD E1        	pop		iy								    ; and put it in iy again
1889+ D8A9 E1           	pop		hl                                  ; get hl back as vertex list
1890+ D8AA 3E 06        	ld		a,6
1891+ D8AC ED 31        	add 	hl,a                                ; and move to next vertex
1892+ D8AE C1           	pop		bc                                  ; get counter back
1893+ D8AF 10 D5        	djnz	PointLoop
1894+ D8B1              ; ......................................................
1895+ D8B1 C9               ret
1896+ D8B2              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1897+ D8B2              ;  Entering Here we have the following:
1898+ D8B2              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1899+ D8B2              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1900+ D8B2              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1901+ D8B2              ;
1902+ D8B2              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1903+ D8B2              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1904+ D8B2              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1905+ D8B2              ;--------------------------------------------------------------------------------------------------------
1906+ D8B2              AddLaserBeamLine:
1907+ D8B2              ; this code is a bag of shit and needs re-writing
1908+ D8B2              GetGunVertexNode:
1909+ D8B2 3A 04 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1910+ D8B5 21 BF C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1911+ D8B8 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1912+ D8BA FD 2E 00             ld          iyl,0
1913+ D8BD              MoveX1PointToXX15:
1914+ D8BD 4E                   ld          c,(hl)                              ;
1915+ D8BE 23                   inc         hl
1916+ D8BF 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1917+ D8C0 23                   inc         hl
1918+ D8C1 ED 43 75 C0          ld          (UBnkX1),bc
1919+ D8C5 0C                   inc         c
1920+ D8C6 C8                   ret         z                                   ; was c 255?
1921+ D8C7 04                   inc         b
1922+ D8C8 C8                   ret         z                                   ; was c 255?
1923+ D8C9              MoveY1PointToXX15:
1924+ D8C9 4E                   ld          c,(hl)                              ;
1925+ D8CA 23                   inc         hl
1926+ D8CB 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1927+ D8CC 23                   inc         hl
1928+ D8CD ED 43 77 C0          ld          (UBnkY1),bc
1929+ D8D1              SetX2PointToXX15:
1930+ D8D1 01 00 00             ld          bc,0                                ; set X2 to 0
1931+ D8D4 ED 43 79 C0          ld          (UBnkX2),bc
1932+ D8D8 3A 11 C0             ld          a,(UbnKzlo)
1933+ D8DB 4F                   ld          c,a
1934+ D8DC              SetY2PointToXX15:
1935+ D8DC ED 43 7B C0          ld          (UBnkY2),bc                         ; set Y2to 0
1936+ D8E0 3A 0D C0             ld          a,(UBnKxsgn)
1937+ D8E3                      JumpOnBitClear a,7,LL74SkipDec
1937+ D8E3 CB 7F       >                        bit 	7,a
1937+ D8E5 CA ED D8    >                        jp      z,LL74SkipDec
1938+ D8E8              LL74DecX2:
1939+ D8E8 3E FF                ld          a,$FF
1940+ D8EA 32 79 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1941+ D8ED              LL74SkipDec:
1942+ D8ED CD 1A CD             call        ClipXX15XX12Line                    ; LL145 \ clip test on XX15 XX12 vector, returns carry
1943+ D8F0 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1944+ D8F2              ; Here we are usign hl to replace VarU as index
1945+ D8F2 2A 34 92             ld          hl,(varU16)
1946+ D8F5 3A 75 C0             ld          a,(UBnKx1Lo)
1947+ D8F8 77                   ld          (hl),a
1948+ D8F9 23                   inc         hl
1949+ D8FA 3A 77 C0             ld          a,(UbnKy1Lo)
1950+ D8FD 77                   ld          (hl),a
1951+ D8FE 23                   inc         hl
1952+ D8FF 3A 79 C0             ld          a,(UBnkX2Lo)
1953+ D902 77                   ld          (hl),a
1954+ D903 23                   inc         hl
1955+ D904 3A 7B C0             ld          a,(UbnKy2Lo)
1956+ D907 77                   ld          (hl),a
1957+ D908 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1958+ D90A 23                   inc         hl
1959+ D90B FD 2C                inc         iyl                                 ; ready for next byte
1960+ D90D 22 34 92             ld          (varU16),hl
1961+ D910 C9                   ret
1962+ D911              ;--------------------------------------------------------------------------------------------------------
1963+ D911              getVertexNodeAtAToX1Y1:                                 ; a = byteoffset to node array as its pre computed to x4 bytes
1964+ D911 21 BF C0             ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
1965+ D914 ED 31                add         hl,a                                ; hl = address of Node
1966+ D916 7E                   ld          a,(hl)                              ; get edge list nbr 1 edge
1967+ D917              ;SI THIS NEEDED ?       inc         hl                                  ; prep to read next edge
1968+ D917 11 75 C0             ld          de,UBnkX1
1969+ D91A ED A0                ldi                                             ; x1 lo
1970+ D91C ED A0                ldi                                             ; x1 hi
1971+ D91E ED A0                ldi                                             ; y1 lo
1972+ D920 ED A0                ldi                                             ; y1 hi
1973+ D922 C9                   ret
1974+ D923              ;--------------------------------------------------------------------------------------------------------
1975+ D923              getVertexNodeAtAToX2Y2:                                 ; a = byteoffset to node array as its pre computed to x4 bytes
1976+ D923 21 BF C0             ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
1977+ D926 ED 31                add         hl,a                                ; hl = address of Node
1978+ D928 7E                   ld          a,(hl)                              ; get edge list nbr 1 edge
1979+ D929              ;SI THIS NEEDED ?       inc         hl                                  ; prep to read next edge
1980+ D929 11 79 C0             ld          de,UBnkX2
1981+ D92C ED A0                ldi                                             ; x1 lo
1982+ D92E ED A0                ldi                                             ; x1 hi
1983+ D930 ED A0                ldi                                             ; y1 lo
1984+ D932 ED A0                ldi                                             ; y1 hi
1985+ D934 C9                   ret
1986+ D935              ;--------------------------------------------------------------------------------------------------------
1987+ D935              GetFaceAtA:         MACRO
1988+ D935 ~                                ld          hl,UbnkFaceVisArray
1989+ D935 ~                                add         hl,a
1990+ D935 ~                                ld          a,(hl)                              ; get face visibility
1991+ D935                                  ENDM
1992+ D935              ; Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
1993+ D935
1994+ D935 00           PLEDGECTR           DB          0
1995+ D936
1996+ D936              PrepLines:
1997+ D936              EdgeTotal:
1998+ D936              ProcessLines:
1999+ D936              LL72:
2000+ D936              ; FOR NOW BRUTE FORCE IF OFF SCREEN
2001+ D936
2002+ D936              ; TODO add in onced DOEXP is finished
2003+ D936              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
2004+ D936              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
2005+ D936              ;        or          8
2006+ D936              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
2007+ D936              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
2008+ D936              ;EE31:                                                   ; no explosion
2009+ D936              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
2010+ D936              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
2011+ D936              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
2012+ D936              ;
2013+ D936              ;--------------------------------------------------------------------------------------------------------
2014+ D936              InitialiseLineRead:
2015+ D936                      ;break
2016+ D936                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
2016+ D936 AF          >               xor      a
2016+ D937 32 F1 C2    >               ld       (UbnkLineArrayLen),a
2017+ D93A                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
2017+ D93A AF          >               xor      a
2017+ D93B 32 F2 C2    >               ld       (UbnkLineArrayBytes),a
2018+ D93E                      ldWriteZero PLEDGECTR
2018+ D93E AF          >               xor      a
2018+ D93F 32 35 D9    >               ld       (PLEDGECTR),a
2019+ D942 3A 07 C3             ld          a,(EdgeCountAddr)
2020+ D945 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
2021+ D947 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
2022+ D94A 21 FF C1             ld          hl,UbnkLineArray                    ; head of array
2023+ D94D 22 34 92             ld          (varU16),hl                         ; store current line array pointer un varU16
2024+ D950                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
2024+ D950 3A 07 C3    >               ld       a,(EdgeCountAddr)
2024+ D953 32 38 92    >               ld       (XX17),a
2025+ D956 3A 2A C0             ld          a,(UBnkexplDsp)                     ; get explosion status
2026+ D959                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
2026+ D959 CB 77       >                        bit 	6,a
2026+ D95B CA 63 D9    >                        jp      z,CalculateNewLines
2027+ D95E E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
2028+ D960 32 2A C0             ld          (UBnkexplDsp),a                     ; INWK+31
2029+ D963              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
2030+ D963              ; NOw we can calculate hull after including laser line
2031+ D963              CalculateNewLines:
2032+ D963              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
2033+ D963              CheckEdgesForVisibility:
2034+ D963 21 40 C4             ld          hl,UBnkHullEdges
2035+ D966                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
2036+ D966 22 D8 91             ld          (varV),hl                           ; V \ is pointer to where edges data start
2037+ D969 3A 03 C3             ld          a,(LineX4Addr)
2038+ D96C 47                   ld          b,a                                 ; nbr of bytes of edge data
2039+ D96D              LL75Loop:                                               ; count Visible edges
2040+ D96D              IsEdgeInVisibilityRange:
2041+ D96D 2A D8 91             ld          hl,(varV)
2042+ D970 E5                   push        hl
2043+ D971 FD E1                pop         iy
2044+ D973                      IFDEF NOBACKFACECULL
2045+ D973 ~                        jp          VisibileEdge; DEBUGTODO
2046+ D973                      ENDIF
2047+ D973 3A 64 91             ld          a,(LastNormalVisible)               ; XX4 is visibility range
2048+ D976 57                   ld          d,a                                 ; d holds copy of XX4
2049+ D977              ; Get Edge Byte 0
2050+ D977 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
2051+ D97A                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
2051+ D97A BA          >                        cp      d
2051+ D97B DA CF D9    >                        jp		c,LL78EdgeNotVisible
2052+ D97E              EdgeMayBeVisibile:
2053+ D97E              ; Get Edge Byte 1
2054+ D97E              IsFace1Visibile:                                        ; edges have 2 faces to test
2055+ D97E FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
2056+ D981 4F                   ld          c,a                                 ;  c = a copy of byte 1
2057+ D982 E6 0F                and         $0F                                 ;
2058+ D984                      GetFaceAtA
2058+ D984 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
2058+ D987 ED 31       >                    add         hl,a
2058+ D989 7E          >                    ld          a,(hl)                              ; get face visibility
2059+ D98A              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
2060+ D98A                      IfANotZeroGoto VisibileEdge                     ; LL70 visible edge
2060+ D98A FE 00       >				cp	0
2060+ D98C C2 A1 D9    >				jp	nz,VisibileEdge
2061+ D98F              IsFace2Visibile:
2062+ D98F 79                   ld          a,c                                 ; restore byte 1 from c register
2063+ D990 ED 23                swapnib                                         ;
2064+ D992 E6 0F                and         $0F                                 ; swap high byte into low byte
2065+ D994 E5                   push        hl
2066+ D995                      GetFaceAtA
2066+ D995 21 A1 C0    >                    ld          hl,UbnkFaceVisArray
2066+ D998 ED 31       >                    add         hl,a
2066+ D99A 7E          >                    ld          a,(hl)                              ; get face visibility
2067+ D99B E1                   pop         hl
2068+ D99C                      IfAIsZeroGoto LL78EdgeNotVisible                ; edge not visible
2068+ D99C FE 00       >				cp	0
2068+ D99E CA CF D9    >				jp	z,LL78EdgeNotVisible
2069+ D9A1              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
2070+ D9A1              ;LL79--Visible edge--------------------------------------
2071+ D9A1              ; Get Edge Byte 2
2072+ D9A1 FD 7E 02             ld          a,(IY+2)                            ; get Node id
2073+ D9A4 CD 11 D9             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
2074+ D9A7 FD 7E 03             ld          a,(IY+3)
2075+ D9AA CD 23 D9             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
2076+ D9AD CD 1A CD             call        CLIP
2077+ D9B0 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
2078+ D9B2              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
2079+ D9B2 ED 5B 34 92          ld          de,(varU16)                         ; clipped edges heap address
2080+ D9B6 21 75 C0             ld          hl,UBnkNewX1
2081+ D9B9                      FourLDIInstrunctions
2081+ D9B9 ED A0       >                        ldi
2081+ D9BB ED A0       >                        ldi
2081+ D9BD ED A0       >                        ldi
2081+ D9BF ED A0       >                        ldi
2082+ D9C1 ED 53 34 92          ld          (varU16),de                         ; update U16 with current address
2083+ D9C5 21 F1 C2             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
2084+ D9C8 34                   inc         (hl)
2085+ D9C9 7E                   ld          a,(hl)
2086+ D9CA                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
2086+ D9CA FE 32       >                        cp     LineArraySize
2086+ D9CC D2 E5 D9    >                        jp		nc,CompletedLineGeneration
2087+ D9CF              ; If we hit here we skip the write of line arryay u16
2088+ D9CF              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
2089+ D9CF              LL78:
2090+ D9CF 2A D8 91             ld          hl,(varV)                           ; varV is current edge address
2091+ D9D2 3E 04                ld          a,4
2092+ D9D4 ED 31                add         hl,a
2093+ D9D6 22 D8 91             ld          (varV),hl
2094+ D9D9 21 35 D9             ld          hl,PLEDGECTR                        ;
2095+ D9DC 34                   inc         (hl)                                ;
2096+ D9DD 7E                   ld          a,(hl)                              ; current edge index ++
2097+ D9DE                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
2097+ D9DE 21 38 92    >                  ld    hl,XX17
2097+ D9E1 BE          >                  cp    (hl)
2097+ D9E2 C2 6D D9    >                  jp      nz,LL75Loop
2098+ D9E5              CompletedLineGeneration:
2099+ D9E5              LL81:
2100+ D9E5              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
2101+ D9E5 3A F1 C2             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
2102+ D9E8 CB 27                sla         a
2103+ D9EA CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
2104+ D9EC 32 F2 C2             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
2105+ D9EF              ExitEdgeDataLoop:
2106+ D9EF C9                   ret
2107+ D9F0
2108+ D9F0              UnivBankSize  EQU $ - StartOfUniv
2109+ D9F0
# file closed: Universe/univ_ship_data.asm
 918  D9F0
 919  D9F0                  SLOT    UniverseBankAddr
 920  D9F0                  PAGE    BankUNIVDATA1
 921  D9F0              	ORG	UniverseBankAddr,BankUNIVDATA1
 922  C000 FF           UNIVDATABlock1      DB $FF
 923  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 924  E000
 925  E000                  SLOT    UniverseBankAddr
 926  E000                  PAGE    BankUNIVDATA2
 927  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
 928  C000 FF           UNIVDATABlock2      DB $FF
 929  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 930  E000
 931  E000                  SLOT    UniverseBankAddr
 932  E000                  PAGE    BankUNIVDATA3
 933  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
 934  C000 FF           UNIVDATABlock3      DB $FF
 935  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 936  E000
 937  E000                  SLOT    UniverseBankAddr
 938  E000                  PAGE    BankUNIVDATA4
 939  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
 940  C000 FF           UNIVDATABlock4      DB $FF
 941  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 942  E000
 943  E000                  SLOT    UniverseBankAddr
 944  E000                  PAGE    BankUNIVDATA5
 945  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
 946  C000 FF           UNIVDATABlock5      DB $FF
 947  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 948  E000
 949  E000                  SLOT    UniverseBankAddr
 950  E000                  PAGE    BankUNIVDATA6
 951  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
 952  C000 FF           UNIVDATABlock6      DB $FF
 953  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 954  E000
 955  E000                  SLOT    UniverseBankAddr
 956  E000                  PAGE    BankUNIVDATA7
 957  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
 958  C000 FF           UNIVDATABlock7      DB $FF
 959  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 960  E000
 961  E000                  SLOT    UniverseBankAddr
 962  E000                  PAGE    BankUNIVDATA8
 963  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
 964  C000 FF           UNIVDATABlock8      DB $FF
 965  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 966  E000
 967  E000                  SLOT    UniverseBankAddr
 968  E000                  PAGE    BankUNIVDATA8
 969  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
 970  C000 FF           UNIVDATABlock9      DB $FF
 971  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 972  E000
 973  E000                  SLOT    UniverseBankAddr
 974  E000                  PAGE    BankUNIVDATA10
 975  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
 976  C000 FF           UNIVDATABlock10     DB $FF
 977  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 978  E000
 979  E000                  SLOT    UniverseBankAddr
 980  E000                  PAGE    BankUNIVDATA11
 981  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
 982  C000 FF           UNIVDATABlock11     DB $FF
 983  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 984  E000
 985  E000                  SLOT    UniverseBankAddr
 986  E000                  PAGE    BankUNIVDATA12
 987  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
 988  C000 FF           UNIVDATABlock12     DB $FF
 989  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 990  E000
 991  E000                  SLOT    GalaxyDataAddr
 992  E000                  PAGE    BankGalaxyData0
 993  E000              	ORG GalaxyDataAddr, BankGalaxyData0
 994  E000                  INCLUDE "galaxy_data.asm"
# file opened: Universe/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00 00 00...  GalaxySearchString:      DS 32
  11+ E87D 00                                    DB 0
  12+ E87E 00 00 00...  GalaxyExpandedName:      DS 32
  13+ E89E 00                                    DB 0
  14+ E89F 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  14+ E8A3 53 45 49 54
  14+ E8A7 49 4C 45 54
  14+ E8AB 53 54 4F 4E
  14+ E8AF 4C 4F 4E 55
  14+ E8B3 54 48 4E 4F
  14+ E8B7 41 4C 4C 45
  14+ E8BB 58 45 47 45
  14+ E8BF 5A 41 43 45
  14+ E8C3 42 49 53 4F
  14+ E8C7 55 53 45 53
  14+ E8CB 41 52 4D 41
  14+ E8CF 49 4E 44 49
  14+ E8D3 52 45 41 3F
  14+ E8D7 45 52 41 54
  14+ E8DB 45 4E 42 45
  14+ E8DF 52 41 4C 41
  14+ E8E3 56 45 54 49
  14+ E8E7 45 44 4F 52
  14+ E8EB 51 55 41 4E
  14+ E8EF 54 45 49 53
  14+ E8F3 52 49 4F 4E
  15+ E8F7 00 00 00...  GalaxyWorkingSeed        DS 6
  16+ E8FD 00 00 00...  GalaxyNamingSeed         DS 6
  17+ E903 00 00 00...  GalaxySavedRandomSeed    DS 6
  18+ E909
  19+ E909 00           GalaxyDisplayGovernment         DB 0
  20+ E90A 00           GalaxyDisplayEconomy            DB 0
  21+ E90B 00           GalaxyDisplayTekLevel           DB 0
  22+ E90C 00           GalaxyDisplayPopulation         DB 0
  23+ E90D 00 00        GalaxyDisplayProductivity       DW 0
  24+ E90F 00 00        GalaxyDisplayRadius             DW 0
  25+ E911
  26+ E911 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  26+ E915 65 64 00
  27+ E918 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  27+ E91C 62 6C 65 00
  28+ E920 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  28+ E924 20 6B 6E 6F
  28+ E928 77 6E 00
  29+ E92B 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  29+ E92F 75 73 00
  30+ E932 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  30+ E936 64 00
  31+ E938 76 65 72 79  GalaxyDescList02A       DB "very",0
  31+ E93C 00
  32+ E93D 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  32+ E941 6C 79 00
  33+ E944 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  33+ E948 00
  34+ E949 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  34+ E94D 6F 6E 61 62
  34+ E951 6C 79 00
  35+ E954 00           GalaxyDescList02E       DB 0
  36+ E955 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  36+ E959 65 6E 74 00
  37+ E95D 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  37+ E961 00
  38+ E962 67 72 65 61  GalaxyDescList03C       DB "great",0
  38+ E966 74 00
  39+ E968 76 61 73 74  GalaxyDescList03D       DB "vast",0
  39+ E96C 00
  40+ E96D 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  40+ E971 00
  41+ E972 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  41+ E976 20 3C 32 38
  41+ E97A 3E 20 70 6C
  41+ E97E 61 6E 74 61
  41+ E982 74 69 6F 6E
  41+ E986 73 00
  42+ E988 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  42+ E98C 74 61 69 6E
  42+ E990 73 00
  43+ E992 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  43+ E996 00
  44+ E997 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  44+ E99B 20 66 6F 72
  44+ E99F 65 73 74 73
  44+ E9A3 00
  45+ E9A4 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  45+ E9A8 6E 73 00
  46+ E9AB 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  46+ E9AF 65 73 73 00
  47+ E9B3 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  47+ E9B7 69 6E 65 73
  47+ E9BB 73 00
  48+ E9BD 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  48+ E9C1 6E 67 20 74
  48+ E9C5 72 61 64 69
  48+ E9C9 74 69 6F 6E
  48+ E9CD 73 00
  49+ E9CF 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  49+ E9D3 68 69 6E 67
  49+ E9D7 20 6F 66 20
  49+ E9DB 3C 35 3E 00
  50+ E9DF 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  50+ E9E3 20 66 6F 72
  50+ E9E7 20 3C 35 3E
  50+ E9EB 00
  51+ E9EC 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  51+ E9F0 20 62 6C 65
  51+ E9F4 6E 64 65 72
  51+ E9F8 73 00
  52+ E9FA 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  52+ E9FE 69 73 74 73
  52+ EA02 00
  53+ EA03 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  53+ EA07 72 79 00
  54+ EA0A 64 69 73 63  GalaxyDescList06D       DB "discos",0
  54+ EA0E 6F 73 00
  55+ EA11 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  55+ EA15 00
  56+ EA16 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  56+ EA1A 69 6E 67 20
  56+ EA1E 74 72 65 65
  56+ EA22 00
  57+ EA23 63 72 61 62  GalaxyDescList07B       DB "crab",0
  57+ EA27 00
  58+ EA28 62 61 74 00  GalaxyDescList07C       DB "bat",0
  59+ EA2C 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  59+ EA30 74 00
  60+ EA32 25 52 00     GalaxyDescList07E       DB "%R",0
  61+ EA35 62 65 73 65  GalaxyDescList08A       DB "beset",0
  61+ EA39 74 00
  62+ EA3B 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  62+ EA3F 75 65 64 00
  63+ EA43 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  63+ EA47 67 65 64 00
  64+ EA4B 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  64+ EA4F 65 64 00
  65+ EA52 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  65+ EA56 72 67 65 64
  65+ EA5A 00
  66+ EA5B 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  66+ EA5F 20 63 69 76
  66+ EA63 69 6C 20 77
  66+ EA67 61 72 00
  67+ EA6A 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  67+ EA6E 20 3C 32 33
  67+ EA72 3E 20 3C 32
  67+ EA76 34 3E 73 00
  68+ EA7A 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  68+ EA7E 36 3E 20 64
  68+ EA82 69 73 65 61
  68+ EA86 73 65 00
  69+ EA89 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  69+ EA8D 20 65 61 72
  69+ EA91 74 68 71 75
  69+ EA95 61 6B 65 73
  69+ EA99 00
  70+ EA9A 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  70+ EA9E 20 73 6F 6C
  70+ EAA2 61 72 20 61
  70+ EAA6 63 74 69 76
  70+ EAAA 69 74 79 00
  71+ EAAE 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  71+ EAB2 3C 32 3E 20
  71+ EAB6 3C 33 3E 00
  72+ EABA 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  72+ EABE 25 49 20 3C
  72+ EAC2 32 33 3E 20
  72+ EAC6 3C 32 34 3E
  72+ EACA 00
  73+ EACB 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  73+ EACF 69 6E 68 61
  73+ EAD3 62 69 74 61
  73+ EAD7 6E 74 73 27
  73+ EADB 20 3C 32 35
  73+ EADF 3E 20 3C 34
  73+ EAE3 3E 00
  74+ EAE5 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  74+ EAE9 00
  75+ EAEA 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  75+ EAEE 3C 31 32 3E
  75+ EAF2 20 3C 31 33
  75+ EAF6 3E 00
  76+ EAF8 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  76+ EAFC 65 00
  77+ EAFE 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  77+ EB02 64 79 00
  78+ EB05 77 61 74 65  GalaxyDescList11C       DB "water",0
  78+ EB09 72 00
  79+ EB0B 62 72 65 77  GalaxyDescList11D       DB "brew",0
  79+ EB0F 00
  80+ EB10 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  80+ EB14 6C 65 20 62
  80+ EB18 6C 61 73 74
  80+ EB1C 65 72 73 00
  81+ EB20 25 52 00     GalaxyDescList12A       DB "%R",0
  82+ EB23 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  82+ EB27 32 34 3E 00
  83+ EB2B 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  83+ EB2F 52 00
  84+ EB31 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  84+ EB35 32 36 3E 00
  85+ EB39 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  85+ EB3D 20 25 52 00
  86+ EB41 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  86+ EB45 6C 6F 75 73
  86+ EB49 00
  87+ EB4A 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  87+ EB4E 69 63 00
  88+ EB51 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  88+ EB55 79 00
  89+ EB57 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  89+ EB5B 75 61 6C 00
  90+ EB5F 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  90+ EB63 74 69 6E 67
  90+ EB67 00
  91+ EB68 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  91+ EB6C 69 6E 65 00
  92+ EB70 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  92+ EB74 74 20 6C 69
  92+ EB78 66 65 00
  93+ EB7B 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  93+ EB7F 6E 6F 73 00
  94+ EB83 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  94+ EB87 63 6F 6D 73
  94+ EB8B 00
  95+ EB8C 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  95+ EB90 3E 20 00
  96+ EB93 25 48 00     GalaxyDescList15A       DB "%H",0
  97+ EB96 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  97+ EB9A 70 6C 61 6E
  97+ EB9E 65 74 20 25
  97+ EBA2 48 00
  98+ EBA4 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  98+ EBA8 77 6F 72 6C
  98+ EBAC 64 20 25 48
  98+ EBB0 00
  99+ EBB1 54 68 69 73  GalaxyDescList15D       DB "This planet",0
  99+ EBB5 20 70 6C 61
  99+ EBB9 6E 65 74 00
 100+ EBBD 54 68 69 73  GalaxyDescList15E       DB "This world",0
 100+ EBC1 20 77 6F 72
 100+ EBC5 6C 64 00
 101+ EBC8 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 101+ EBCC 72 65 6D 61
 101+ EBD0 72 6B 61 62
 101+ EBD4 6C 65 00
 102+ EBD7 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 102+ EBDB 69 6E 67 00
 103+ EBDF 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 103+ EBE3 6C 00
 104+ EBE5 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 104+ EBE9 69 6F 75 73
 104+ EBED 00
 105+ EBEE 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 105+ EBF2 6F 6C 74 69
 105+ EBF6 6E 67 00
 106+ EBF9 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 106+ EBFD 65 74 00
 107+ EC00 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 107+ EC04 64 00
 108+ EC06 70 6C 61 63  GalaxyDescList17C       DB "place",0
 108+ EC0A 65 00
 109+ EC0C 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 109+ EC10 6C 65 20 70
 109+ EC14 6C 61 6E 65
 109+ EC18 74 00
 110+ EC1A 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 110+ EC1E 00
 111+ EC1F 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 111+ EC23 00
 112+ EC24 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 112+ EC28 00
 113+ EC29 67 72 75 62  GalaxyDescList18C       DB "grub",0
 113+ EC2D 00
 114+ EC2E 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 115+ EC32 25 52 00     GalaxyDescList18E       DB "%R",0
 116+ EC35 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 116+ EC39 00
 117+ EC3A 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 117+ EC3E 20 67 72 61
 117+ EC42 64 75 61 74
 117+ EC46 65 00
 118+ EC48 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 119+ EC4C 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 119+ EC50 6C 00
 120+ EC52 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 120+ EC56 00
 121+ EC57 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 121+ EC5B 69 63 61 6C
 121+ EC5F 00
 122+ EC60 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 122+ EC64 65 00
 123+ EC66 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 123+ EC6A 00
 124+ EC6B 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 124+ EC6F 6E 65 74 72
 124+ EC73 61 62 6C 65
 124+ EC77 00
 125+ EC78 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 125+ EC7C 65 72 61 6E
 125+ EC80 74 00
 126+ EC82 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 126+ EC86 79 00
 127+ EC88 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 127+ EC8C 64 00
 128+ EC8E 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 128+ EC92 75 61 6C 00
 129+ EC96 73 74 72 61  GalaxyDescList21D       DB "strange",0
 129+ EC9A 6E 67 65 00
 130+ EC9E 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 130+ ECA2 6C 69 61 72
 130+ ECA6 00
 131+ ECA7 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 131+ ECAB 75 65 6E 74
 131+ ECAF 00
 132+ ECB0 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 132+ ECB4 73 69 6F 6E
 132+ ECB8 61 6C 00
 133+ ECBB 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 133+ ECBF 65 64 69 63
 133+ ECC3 74 61 62 6C
 133+ ECC7 65 00
 134+ ECC9 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 134+ ECCD 64 66 75 6C
 134+ ECD1 00
 135+ ECD2 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 135+ ECD6 6C 79 00
 136+ ECD9 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 136+ ECDD 3C 30 3E 20
 136+ ECE1 66 6F 72 20
 136+ ECE5 3C 39 3E 00
 137+ ECE9 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 137+ ECED 3C 30 3E 20
 137+ ECF1 66 6F 72 20
 137+ ECF5 3C 39 3E 20
 137+ ECF9 61 6E 64 20
 137+ ECFD 3C 39 3E 00
 138+ ED01 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 138+ ED05 62 79 20 3C
 138+ ED09 38 3E 00
 139+ ED0C 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 139+ ED10 3C 30 3E 20
 139+ ED14 66 6F 72 20
 139+ ED18 3C 39 3E 20
 139+ ED1C 62 75 74 20
 139+ ED20 3C 37 3E 20
 139+ ED24 62 79 20 3C
 139+ ED28 38 3E 00
 140+ ED2B 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 140+ ED2F 3E 20 3C 31
 140+ ED33 36 3E 00
 141+ ED36 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 141+ ED3A 00
 142+ ED3B 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 142+ ED3F 74 61 69 6E
 142+ ED43 00
 143+ ED44 65 64 69 62  GalaxyDescList24C       DB "edible",0
 143+ ED48 6C 65 00
 144+ ED4B 74 72 65 65  GalaxyDescList24D       DB "tree",0
 144+ ED4F 00
 145+ ED50 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 145+ ED54 74 65 64 00
 146+ ED58 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 146+ ED5C 00
 147+ ED5D 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 147+ ED61 00
 148+ ED62 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 148+ ED66 69 64 00
 149+ ED69 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 149+ ED6D 00
 150+ ED6E 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 150+ ED72 00
 151+ ED73 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 151+ ED77 65 6E 74 00
 152+ ED7B 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 152+ ED7F 70 74 69 6F
 152+ ED83 6E 61 6C 00
 153+ ED87 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 153+ ED8B 6E 74 72 69
 153+ ED8F 63 00
 154+ ED91 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 154+ ED95 61 69 6E 65
 154+ ED99 64 00
 155+ ED9B 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 155+ ED9F 00
 156+ EDA0 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 156+ EDA4 65 72 00
 157+ EDA7 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 157+ EDAB 6C 79 00
 158+ EDAE 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 158+ EDB2 00
 159+ EDB3 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 159+ EDB7 61 6C 00
 160+ EDBA 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 160+ EDBE 6F 75 73 00
 161+ EDC2 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 161+ EDC6 69 6E 67 20
 161+ EDCA 6D 65 74 65
 161+ EDCE 72 73 00
 162+ EDD1 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 162+ EDD5 20 63 6C 6F
 162+ EDD9 75 64 73 00
 163+ EDDD 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 163+ EDE1 62 65 72 67
 163+ EDE5 73 00
 164+ EDE7 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 164+ EDEB 20 66 6F 72
 164+ EDEF 6D 61 74 69
 164+ EDF3 6F 6E 73 00
 165+ EDF7 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 165+ EDFB 61 6E 6F 65
 165+ EDFF 73 00
 166+ EE01 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 166+ EE05 74 00
 167+ EE07 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 167+ EE0B 70 00
 168+ EE0D 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 168+ EE11 6E 61 00
 169+ EE14 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 169+ EE18 00
 170+ EE19 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 170+ EE1D 65 64 00
 171+ EE20 25 52 00     GalaxyDescList30A       DB "%R",0
 172+ EE23 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 172+ EE27 52 00
 173+ EE29 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 173+ EE2D 32 36 3E 00
 174+ EE31 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 174+ EE35 62 69 74 61
 174+ EE39 6E 74 00
 175+ EE3C 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 175+ EE40 52 00
 176+ EE42 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 176+ EE46 77 00
 177+ EE48 62 65 61 73  GalaxyDescList31B       DB "beast",0
 177+ EE4C 74 00
 178+ EE4E 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 178+ EE52 6E 00
 179+ EE54 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 179+ EE58 65 00
 180+ EE5A 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 180+ EE5E 00
 181+ EE5F 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 181+ EE63 61 72 64 00
 182+ EE67 63 61 74 00  GalaxyDescList32B       DB "cat",0
 183+ EE6B 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 183+ EE6F 65 79 00
 184+ EE72 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 184+ EE76 00
 185+ EE77 66 69 73 68  GalaxyDescList32E       DB "fish",0
 185+ EE7B 00
 186+ EE7C 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 186+ EE80 20 3C 31 30
 186+ EE84 3E 00
 187+ EE86 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 187+ EE8A 33 30 3E 20
 187+ EE8E 3C 33 33 3E
 187+ EE92 00
 188+ EE93 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 188+ EE97 3C 31 32 3E
 188+ EE9B 20 3C 33 31
 188+ EE9F 3E 20 3C 33
 188+ EEA3 33 3E 00
 189+ EEA6 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 189+ EEAA 20 3C 33 35
 189+ EEAE 3E 00
 190+ EEB0 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 190+ EEB4 20 3C 31 30
 190+ EEB8 3E 00
 191+ EEBA 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 191+ EEBE 00
 192+ EEBF 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 192+ EEC3 65 74 00
 193+ EEC6 73 74 65 61  GalaxyDescList34C       DB "steak",0
 193+ EECA 6B 00
 194+ EECC 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 194+ EED0 65 72 73 00
 195+ EED4 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 195+ EED8 00
 196+ EED9 69 63 65 00  GalaxyDescList35A       DB "ice",0
 197+ EEDD 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 198+ EEE1 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 198+ EEE5 2D 47 00
 199+ EEE8 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 199+ EEEC 75 6D 00
 200+ EEEF 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 200+ EEF3 6C 74 72 61
 200+ EEF7 00
 201+ EEF8 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 201+ EEFC 65 79 00
 202+ EEFF 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 202+ EF03 6B 65 74 00
 203+ EF07 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 203+ EF0B 74 65 00
 204+ EF0E 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 204+ EF12 00
 205+ EF13 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 205+ EF17 69 73 00
 206+ EF1A
 207+ EF1A 11 E9 18 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 207+ EF1E 20 E9 2B E9
 207+ EF22 32 E9
 208+ EF24 38 E9 3D E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 208+ EF28 44 E9 49 E9
 208+ EF2C 54 E9
 209+ EF2E 55 E9 5D E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 209+ EF32 62 E9 68 E9
 209+ EF36 6D E9
 210+ EF38 72 E9 88 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 210+ EF3C 92 E9 97 E9
 210+ EF40 A4 E9
 211+ EF42 AB E9 B3 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 211+ EF46 BD E9 CF E9
 211+ EF4A DF E9
 212+ EF4C EC E9 FA E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 212+ EF50 03 EA 0A EA
 212+ EF54 11 EA
 213+ EF56 16 EA 23 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 213+ EF5A 28 EA 2C EA
 213+ EF5E 32 EA
 214+ EF60 35 EA 3B EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 214+ EF64 43 EA 4B EA
 214+ EF68 52 EA
 215+ EF6A 5B EA 6A EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 215+ EF6E 7A EA 89 EA
 215+ EF72 9A EA
 216+ EF74 AE EA BA EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 216+ EF78 CB EA E5 EA
 216+ EF7C EA EA
 217+ EF7E F8 EA FE EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 217+ EF82 05 EB 0B EB
 217+ EF86 10 EB
 218+ EF88 20 EB 23 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 218+ EF8C 2B EB 31 EB
 218+ EF90 39 EB
 219+ EF92 41 EB 4A EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 219+ EF96 51 EB 57 EB
 219+ EF9A 5F EB
 220+ EF9C 68 EB 70 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 220+ EFA0 7B EB 83 EB
 220+ EFA4 8C EB
 221+ EFA6 93 EB 96 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 221+ EFAA A4 EB B1 EB
 221+ EFAE BD EB
 222+ EFB0 C8 EB D7 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 222+ EFB4 DF EB E5 EB
 222+ EFB8 EE EB
 223+ EFBA F9 EB 00 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 223+ EFBE 06 EC 0C EC
 223+ EFC2 1A EC
 224+ EFC4 1F EC 24 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 224+ EFC8 29 EC 2E EC
 224+ EFCC 32 EC
 225+ EFCE 35 EC 3A EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 225+ EFD2 48 EC 4C EC
 225+ EFD6 52 EC
 226+ EFD8 57 EC 60 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 226+ EFDC 66 EC 6B EC
 226+ EFE0 78 EC
 227+ EFE2 82 EC 88 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 227+ EFE6 8E EC 96 EC
 227+ EFEA 9E EC
 228+ EFEC A7 EC B0 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 228+ EFF0 BB EC C9 EC
 228+ EFF4 D2 EC
 229+ EFF6 D9 EC E9 EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 229+ EFFA 01 ED 0C ED
 229+ EFFE 2B ED
 230+ F000 36 ED 3B ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 230+ F004 44 ED 4B ED
 230+ F008 50 ED
 231+ F00A 58 ED 5D ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 231+ F00E 62 ED 69 ED
 231+ F012 6E ED
 232+ F014 73 ED 7B ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 232+ F018 87 ED 91 ED
 232+ F01C 9B ED
 233+ F01E A0 ED A7 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 233+ F022 AE ED B3 ED
 233+ F026 BA ED
 234+ F028 C2 ED D1 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 234+ F02C DD ED E7 ED
 234+ F030 F7 ED
 235+ F032 01 EE 07 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 235+ F036 0D EE 14 EE
 235+ F03A 19 EE
 236+ F03C 20 EE 23 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 236+ F040 29 EE 31 EE
 236+ F044 3C EE
 237+ F046 42 EE 48 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 237+ F04A 4E EE 54 EE
 237+ F04E 5A EE
 238+ F050 5F EE 67 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 238+ F054 6B EE 72 EE
 238+ F058 77 EE
 239+ F05A 7C EE 86 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 239+ F05E 93 EE A6 EE
 239+ F062 B0 EE
 240+ F064 BA EE BF EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 240+ F068 C6 EE CC EE
 240+ F06C D4 EE
 241+ F06E D9 EE DD EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 241+ F072 E1 EE E8 EE
 241+ F076 EF EE
 242+ F078 F8 EE FF EE                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 242+ F07C 07 EF 0E EF
 242+ F080 13 EF
 243+ F082
 244+ F082 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 244+ F086 65 20 00
 245+ F089 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 245+ F08D 63 65 20 00
 246+ F091 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 246+ F095 6C 20 00
 247+ F098 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 247+ F09C 6E 20 00
 248+ F09F 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 248+ F0A3 00
 249+ F0A4 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 249+ F0A8 6F 77 20 00
 250+ F0AC 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 250+ F0B0 20 00
 251+ F0B2 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 251+ F0B6 6B 20 00
 252+ F0B9 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 252+ F0BD 6C 65 73 73
 252+ F0C1 20 00
 253+ F0C3 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 253+ F0C7 79 20 00
 254+ F0CA 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 254+ F0CE 45 79 65 64
 254+ F0D2 20 00
 255+ F0D4 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 255+ F0D8 65 64 20 00
 256+ F0DC 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 256+ F0E0 20 00
 257+ F0E2 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 257+ F0E6 00
 258+ F0E7 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 258+ F0EB 79 20 00
 259+ F0EE 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 259+ F0F2 6E 74 00
 260+ F0F5 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 260+ F0F9 00
 261+ F0FA 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 261+ F0FE 72 64 00
 262+ F101 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 262+ F105 74 65 72 00
 263+ F109 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 263+ F10D 00
 264+ F10E 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 264+ F112 6E 6F 69 64
 264+ F116 00
 265+ F117 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 265+ F11B 6E 65 00
 266+ F11E 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 266+ F122 63 74 00
 267+ F125 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 267+ F129 6E 20 43 6F
 267+ F12D 6C 6F 6E 61
 267+ F131 6C 00
 268+ F133
 269+ F133 82 F0 89 F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 269+ F137 91 F0
 270+ F139 98 F0 9F F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 270+ F13D A4 F0 AC F0
 270+ F141 B2 F0 B9 F0
 271+ F145 C3 F0 CA F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 271+ F149 D4 F0 DC F0
 271+ F14D E2 F0 E7 F0
 272+ F151 EE F0 F5 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 272+ F155 FA F0 01 F1
 272+ F159 09 F1 0E F1
 272+ F15D 17 F1 1E F1
 273+ F161 25 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 274+ F163 00 00 00...  GalaxySpecies           DS 32
 275+ F183 00                                   DB 0
 276+ F184 00 00 00...  GalaxyPlanetDescription DS 300
 277+ F2B0 00                                   DB 0
 278+ F2B1 00 00 00...  GalaxyPlanetSource      DS 300,0
 279+ F3DD 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 279+ F3E1 20 69 73 20
 279+ F3E5 3C 32 32 3E
 279+ F3E9 00
 280+ F3EA
 281+ F3EA
 282+ F3EA D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 283+ F3EB 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 284+ F3EC 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 285+ F3ED 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 286+ F3EE FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 287+ F3EF 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 288+ F3F0 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 289+ F3F1 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 290+ F3F2 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 291+ F3F3 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 292+ F3F4 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 293+ F3F5 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 294+ F3F6 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 295+ F3F7 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 296+ F3F8 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 297+ F3F9 A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 298+ F3FA 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 299+ F3FB 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 300+ F3FC 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 301+ F3FD C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 302+ F3FE B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 303+ F3FF 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 304+ F400 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 305+ F401 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 306+ F402 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 307+ F403 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 308+ F404 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 309+ F405
 310+ F405
 311+ F405              EQ_FUEL                 EQU 0
 312+ F405              EQ_MISSILE              EQU 1
 313+ F405              EQ_CARGO_BAY            EQU 2
 314+ F405              EQ_ECM                  EQU 3
 315+ F405              EQ_FUEL_SCOOPS          EQU 4
 316+ F405              EQ_ESCAPE_POD           EQU 5
 317+ F405              EQ_ENERGY_BOMB          EQU 6
 318+ F405              EQ_ENERGY_UNIT          EQU 7
 319+ F405              EQ_DOCK_COMP            EQU 8
 320+ F405              EQ_GAL_DRIVE            EQU 9
 321+ F405              EQ_FRONT_PULSE          EQU 10
 322+ F405              EQ_REAR_PULSE           EQU 11
 323+ F405              EQ_LEFT_PULSE           EQU 12
 324+ F405              EQ_RIGHT_PULSE          EQU 13
 325+ F405              EQ_FRONT_BEAM           EQU 14
 326+ F405              EQ_REAR_BEAM            EQU 15
 327+ F405              EQ_LEFT_BEAM            EQU 16
 328+ F405              EQ_RIGHT_BEAM           EQU 17
 329+ F405              EQ_FRONT_MINING         EQU 18
 330+ F405              EQ_REAR_MINING          EQU 19
 331+ F405              EQ_LEFT_MINING          EQU 20
 332+ F405              EQ_RIGHT_MINING         EQU 21
 333+ F405              EQ_FRONT_MILITARY       EQU 22
 334+ F405              EQ_REAR_MILITARY        EQU 23
 335+ F405              EQ_LEFT_MILITARY        EQU 24
 336+ F405              EQ_RIGHT_MILITARY       EQU 25
 337+ F405
 338+ F405              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
 339+ F405
 340+ F405              EquipNameTableRowLen    EQU 8
 341+ F405 4E 99 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 341+ F409 00 00 00 00
 342+ F40D 03 9C 00 00                          DW  WordMissile,    0,              0,          0
 342+ F411 00 00 00 00
 343+ F415 33 99 44 99                          DW  WordLarge,      WordCargo,      WordBay,    0
 343+ F419 4A 99 00 00
 344+ F41D 5A 99 61 99                          DW  WordECM,        WordSystem,     0,          0
 344+ F421 00 00 00 00
 345+ F425 4E 99 53 99                          DW  WordFuel,       WordScoops,     0,          0
 345+ F429 00 00 00 00
 346+ F42D 39 99 40 99                          DW  WordEscape,     WordPod,        0,          0
 346+ F431 00 00 00 00
 347+ F435 68 99 6F 99                          DW  WordEnergy,     WordBomb,       0,          0
 347+ F439 00 00 00 00
 348+ F43D CD 99 68 99                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 348+ F441 9B 99 00 00
 349+ F445 A7 99 AF 99                          DW  WordDocking,    WordComputers,  0,          0
 349+ F449 00 00 00 00
 350+ F44D C4 99 0B 9C                          DW  WordGalactic,   WordHyperdrive, 0,          0
 350+ F451 00 00 00 00
 351+ F455 1D 99 7A 99                          DW  WordFront,      WordPulse,      WordLaser,  0
 351+ F459 74 99 00 00
 352+ F45D 2E 99 7A 99                          DW  WordRear,       WordPulse,      WordLaser,  0
 352+ F461 74 99 00 00
 353+ F465 29 99 7A 99                          DW  WordLeft,       WordPulse,      WordLaser,  0
 353+ F469 74 99 00 00
 354+ F46D 23 99 7A 99                          DW  WordRight,      WordPulse,      WordLaser,  0
 354+ F471 74 99 00 00
 355+ F475 1D 99 80 99                          DW  WordFront,      WordBeam,       WordLaser,  0
 355+ F479 74 99 00 00
 356+ F47D 2E 99 80 99                          DW  WordRear,       WordBeam,       WordLaser,  0
 356+ F481 74 99 00 00
 357+ F485 29 99 80 99                          DW  WordLeft,       WordBeam,       WordLaser,  0
 357+ F489 74 99 00 00
 358+ F48D 23 99 80 99                          DW  WordRight,      WordBeam,       WordLaser,  0
 358+ F491 74 99 00 00
 359+ F495 1D 99 8D 99                          DW  WordFront,      WordMining,     WordLaser,  0
 359+ F499 74 99 00 00
 360+ F49D 2E 99 8D 99                          DW  WordRear,       WordMining,     WordLaser,  0
 360+ F4A1 74 99 00 00
 361+ F4A5 29 99 8D 99                          DW  WordLeft,       WordMining,     WordLaser,  0
 361+ F4A9 74 99 00 00
 362+ F4AD 23 99 8D 99                          DW  WordRight,      WordMining,     WordLaser,  0
 362+ F4B1 74 99 00 00
 363+ F4B5 1D 99 16 9C                          DW  WordFront,      WordMilitary,   WordLaser,  0
 363+ F4B9 74 99 00 00
 364+ F4BD 2E 99 16 9C                          DW  WordRear,       WordMilitary,   WordLaser,  0
 364+ F4C1 74 99 00 00
 365+ F4C5 29 99 16 9C                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 365+ F4C9 74 99 00 00
 366+ F4CD 23 99 16 9C                          DW  WordRight,      WordMilitary,   WordLaser,  0
 366+ F4D1 74 99 00 00
 367+ F4D5
 368+ F4D5              ;Each row is 7 bytes
 369+ F4D5              ;                                                               12345  6  789012345678901
 370+ F4D5              ;	canbuy;
 371+ F4D5              ;	y;
 372+ F4D5              ;	show;
 373+ F4D5              ;	level;
 374+ F4D5              ;	price 2 bytes;
 375+ F4D5              ;	type;
 376+ F4D5              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 377+ F4D5              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 378+ F4D5              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 379+ F4D5              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 380+ F4D5              ;                           c  y  s  t
 381+ F4D5              ;                           a  p  h  e                                            fi     P
 382+ F4D5              ;                           n  o  o  c                                            tt     o
 383+ F4D5              ;                           B  s  w  h  price                  type               ed     s
 384+ F4D5 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 384+ F4D9 02 00 00 00
 384+ F4DD FF 00 00 00
 384+ F4E1 00 00 00 00
 385+ F4E5 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 385+ F4E9 2C 01 01 00
 385+ F4ED FF 00 00 00
 385+ F4F1 00 00 00 00
 386+ F4F5 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 386+ F4F9 A0 0F 02 00
 386+ F4FD FF 00 00 00
 386+ F501 00 00 00 00
 387+ F505 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 387+ F509 70 17 03 00
 387+ F50D FF 00 00 00
 387+ F511 00 00 00 00
 388+ F515 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 388+ F519 82 14 04 00
 388+ F51D FF 00 00 00
 388+ F521 00 00 00 00
 389+ F525 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 389+ F529 10 27 05 00
 389+ F52D FF 00 00 00
 389+ F531 00 00 00 00
 390+ F535 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 390+ F539 28 23 06 00
 390+ F53D FF 00 00 00
 390+ F541 00 00 00 00
 391+ F545 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 391+ F549 98 3A 07 00
 391+ F54D FF 00 00 00
 391+ F551 00 00 00 00
 392+ F555 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 392+ F559 98 3A 08 00
 392+ F55D FF 00 00 00
 392+ F561 00 00 00 00
 393+ F565 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 393+ F569 50 C3 09 00
 393+ F56D FF 00 00 00
 393+ F571 00 00 00 00
 394+ F575 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 394+ F579 A0 0F 0A 00
 394+ F57D 00 00 00 00
 394+ F581 00 00 00 00
 395+ F585 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 395+ F589 A0 0F 0B 00
 395+ F58D 01 00 00 00
 395+ F591 00 00 00 00
 396+ F595 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 396+ F599 A0 0F 0C 00
 396+ F59D 02 00 00 00
 396+ F5A1 00 00 00 00
 397+ F5A5 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 397+ F5A9 A0 0F 0D 00
 397+ F5AD 03 00 00 00
 397+ F5B1 00 00 00 00
 398+ F5B5 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 398+ F5B9 10 27 0E 00
 398+ F5BD 00 00 00 00
 398+ F5C1 00 00 00 00
 399+ F5C5 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 399+ F5C9 10 27 0F 00
 399+ F5CD 01 00 00 00
 399+ F5D1 00 00 00 00
 400+ F5D5 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 400+ F5D9 10 27 10 00
 400+ F5DD 02 00 00 00
 400+ F5E1 00 00 00 00
 401+ F5E5 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 401+ F5E9 10 27 11 00
 401+ F5ED 03 00 00 00
 401+ F5F1 00 00 00 00
 402+ F5F5 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 402+ F5F9 40 1F 12 00
 402+ F5FD 00 00 00 00
 402+ F601 00 00 00 00
 403+ F605 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 403+ F609 40 1F 13 00
 403+ F60D 01 00 00 00
 403+ F611 00 00 00 00
 404+ F615 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 404+ F619 40 1F 14 00
 404+ F61D 02 00 00 00
 404+ F621 00 00 00 00
 405+ F625 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 405+ F629 40 1F 15 00
 405+ F62D 03 00 00 00
 405+ F631 00 00 00 00
 406+ F635 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 406+ F639 60 EA 16 00
 406+ F63D 00 00 00 00
 406+ F641 00 00 00 00
 407+ F645 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 407+ F649 60 EA 17 00
 407+ F64D 01 00 00 00
 407+ F651 00 00 00 00
 408+ F655 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 408+ F659 60 EA 18 00
 408+ F65D 02 00 00 00
 408+ F661 00 00 00 00
 409+ F665 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 409+ F669 60 EA 19 00
 409+ F66D 03 00 00 00
 409+ F671 00 00 00 00
 410+ F675              ShipEquipTableRowLen    EQU 16
 411+ F675              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 412+ F675
 413+ F675              ;------------------------------------------------------------------------------------------------------------------------------------
 414+ F675 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 415+ F676 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 416+ F677 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 417+ F678 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 418+ F679              GalaxySeedRandom:
 419+ F679              ;------------------------------------------------------------------------------------------------------------------------------------
 420+ F679 CD 2B 96     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 421+ F67C 18 03                                jr		GetDigramWorkingSeed
 422+ F67E CD 43 96     GetDigramSystemSeed:    call	copy_system_to_working
 423+ F681 11 41 9E     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 424+ F684 06 03                                ld		b,3
 425+ F686 3A 44 93                             ld		a,(WorkingSeeds)
 426+ F689 E6 40                                and		$40
 427+ F68B 28 03                                jr		z,.SmallSizeName
 428+ F68D CD 62 9E     .LargeSizeName:         call	NamingLoop
 429+ F690 CD 62 9E     .SmallSizeName:         call	NamingLoop
 430+ F693 CD 62 9E                             call	NamingLoop
 431+ F696 CD 62 9E                             call	NamingLoop
 432+ F699 EB           .DoneName:              ex		de,hl
 433+ F69A 36 00                                ld		(hl),0
 434+ F69C EB                                   ex		de,hl
 435+ F69D C9                                   ret
 436+ F69E
 437+ F69E 11 75 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 438+ F6A1              ; Uses registers a,b and hl
 439+ F6A1 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 440+ F6A2 3A 75 F6                             ld      a,(GalaxyRandSeed)
 441+ F6A5 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 442+ F6A7 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 443+ F6A8 21 77 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 444+ F6AB 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 445+ F6AC 32 75 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 446+ F6AF 78                                   ld      a,b
 447+ F6B0 32 77 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 448+ F6B3 3A 76 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 449+ F6B6 47                                   ld      b,a                                             ; b = r1
 450+ F6B7 21 78 F6                             ld      hl,GalaxyRandSeed3
 451+ F6BA 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 452+ F6BB 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 453+ F6BE 4F                                   ld      c,a
 454+ F6BF 78                                   ld      a,b
 455+ F6C0 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 456+ F6C3 79                                   ld      a,c
 457+ F6C4 C9                                   ret
 458+ F6C5
 459+ F6C5              ;------------------------------------------------------------------------------------------------------------------------------------
 460+ F6C5 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 461+ F6C7 ED 31                                add     hl,a
 462+ F6C9 7E                                   ld      a,(hl)              ;  Fetch low byte
 463+ F6CA 47                                   ld      b,a
 464+ F6CB 23                                   inc     hl
 465+ F6CC 7E                                   ld      a,(hl)              ;  Fetch high byte
 466+ F6CD 68                                   ld      l,b
 467+ F6CE 67                                   ld      h,a
 468+ F6CF 7E           GalaxyCopyLoop:         ld      a,(hl)
 469+ F6D0 FE 00                                cp      0
 470+ F6D2 C8                                   ret     z
 471+ F6D3 12                                   ld      (de),a
 472+ F6D4 23                                   inc     hl
 473+ F6D5 13                                   inc     de
 474+ F6D6 18 F7                                jr      GalaxyCopyLoop
 475+ F6D8              ;------------------------------------------------------------------------------------------------------------------------------------
 476+ F6D8 11 63 F1     galaxy_get_species:     ld      de,GalaxySpecies
 477+ F6DB 3E 28                                ld      a,"("
 478+ F6DD 12                                   ld      (de),a
 479+ F6DE 13                                   inc     de
 480+ F6DF 3A FB E8                             ld      a,(GalaxyWorkingSeed+4)
 481+ F6E2 CB 7F                                bit     7,a
 482+ F6E4 20 0A                                jr      nz,.NonHuman
 483+ F6E6 21 61 F1                             ld      hl,GalaxyInhabitantHumanIx
 484+ F6E9 AF                                   xor     a
 485+ F6EA CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 486+ F6ED C3 4B F7                             jp      .galaxy_species_exit
 487+ F6F0 3A FC E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 488+ F6F3 CB 3F                                srl     a
 489+ F6F5 CB 3F                                srl     a
 490+ F6F7 E6 07                                and     $07
 491+ F6F9 FE 03                                cp      3
 492+ F6FB 30 0A                                jr      nc,.NotDesc1
 493+ F6FD 21 33 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 494+ F700 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 495+ F703 3E 20                                ld      a," "
 496+ F705 12                                   ld      (de),a
 497+ F706 13                                   inc     de
 498+ F707 3A FC E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 499+ F70A CB 3F                                srl     a
 500+ F70C CB 3F                                srl     a
 501+ F70E CB 3F                                srl     a
 502+ F710 CB 3F                                srl     a
 503+ F712 CB 3F                                srl     a
 504+ F714 FE 06                                cp      6
 505+ F716 30 0A                                jr      nc,.NotDesc2
 506+ F718 21 39 F1                             ld      hl,GalaxyInhabitantDesc2Ix
 507+ F71B CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 508+ F71E 3E 20                                ld      a," "
 509+ F720 12                                   ld      (de),a
 510+ F721 13                                   inc     de
 511+ F722 3A F8 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 512+ F725 47                                   ld      b,a
 513+ F726 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 514+ F729 A8                                   xor     b
 515+ F72A E6 07                                and     $07
 516+ F72C F5                                   push    af
 517+ F72D FE 06                                cp      6
 518+ F72F 30 0A                                jr      nc,.NotDesc3
 519+ F731 21 45 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 520+ F734 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 521+ F737 3E 20                                ld      a," "
 522+ F739 12                                   ld      (de),a
 523+ F73A 13                                   inc     de
 524+ F73B F1           .NotDesc3:              pop     af
 525+ F73C 47                                   ld      b,a
 526+ F73D 3A FC E8                             ld      a,(GalaxyWorkingSeed+5)
 527+ F740 E6 03                                and     $03
 528+ F742 80                                   add     a,b
 529+ F743 E6 07                                and     $07
 530+ F745 21 51 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 531+ F748 CD C5 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 532+ F74B 3E 73        .galaxy_species_exit:   ld      a,"s"
 533+ F74D 12                                   ld      (de),a
 534+ F74E 13                                   inc     de
 535+ F74F 3E 29                                ld      a,")"
 536+ F751 12                                   ld      (de),a
 537+ F752 13                                   inc     de
 538+ F753 AF                                   xor     a
 539+ F754 12                                   ld      (de),a
 540+ F755 C9                                   ret
 541+ F756
 542+ F756
 543+ F756              ; To copy seed, loops from 3 to 0
 544+ F756              ; copy seed X + 2 to target X
 545+ F756              ; x = x -1
 546+ F756
 547+ F756              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 548+ F756
 549+ F756              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 550+ F756 23                                   inc		hl
 551+ F757 7E                                   ld		a,(hl)
 552+ F758 FE 00                                cp		0
 553+ F75A C8                                   ret		z
 554+ F75B FE 5B                                cp		'Z'+1
 555+ F75D 30 F7                                jr		nc,GalaxyCapitaliseString
 556+ F75F FE 41                                cp		'A'
 557+ F761 38 F3                                jr		c,GalaxyCapitaliseString
 558+ F763 C6 20        .LowerCase:             add		a,'a'-'A'
 559+ F765 77                                   ld		(hl),a
 560+ F766 18 EE                                jr		GalaxyCapitaliseString
 561+ F768
 562+ F768
 563+ F768              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 564+ F768                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 565+ F768                                      ;cp      $FF
 566+ F768                                      ;jr      z,.NoSystemFound
 567+ F768 3A 46 93     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 568+ F76B 32 75 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 569+ F76E 3A 47 93                             ld      a,(WorkingSeeds+3)                              ;
 570+ F771 32 76 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 571+ F774 3A 48 93                             ld      a,(WorkingSeeds+4)                              ;
 572+ F777 32 77 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 573+ F77A 3A 49 93                             ld      a,(WorkingSeeds+5)                              ;
 574+ F77D 32 78 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 575+ F780 C9                                   ret
 576+ F781              ; For later......
 577+ F781 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 578+ F783 F5           .GalaxyExpandDesc:      push    af
 579+ F784 47                                   ld      b,a                                             ; b = 6502 X reg
 580+ F785 C5                                   push    bc                                              ; save Y reg
 581+ F786
 582+ F786              ;------------------------------------------------------------------------------------------------------------------------------------
 583+ F786              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 584+ F786              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 585+ F786 ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 586+ F78A CD 55 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 587+ F78D                                      ;cp      $FF
 588+ F78D                                      ;jr      z,.NoSystemFound
 589+ F78D              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 590+ F78D
 591+ F78D
 592+ F78D
 593+ F78D              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 594+ F78D
 595+ F78D 00 00 00...  GalaxyNameCopy          DS      30
 596+ F7AB
 597+ F7AB 1E 00        ExpandAtHLToE:          ld      e,0
 598+ F7AD 7E           .ExpandTokenLoop:       ld      a,(hl)
 599+ F7AE FE 3E                                cp      ">"
 600+ F7B0 C8                                   ret     z
 601+ F7B1 23                                   inc     hl
 602+ F7B2 16 0A                                ld      d,10
 603+ F7B4 ED 30                                mul
 604+ F7B6 D6 30                                sub     "0"
 605+ F7B8 83                                   add     a,e
 606+ F7B9 5F                                   ld      e,a
 607+ F7BA 18 F1                                jr      .ExpandTokenLoop
 608+ F7BC
 609+ F7BC E5           SelectTokenToHL:        push    hl                                          ;+1
 610+ F7BD C5                                   push    bc                                          ;+2
 611+ F7BE CD A1 F6                             call    GalaxyDoRandom
 612+ F7C1 C1                                   pop     bc                                          ;+1
 613+ F7C2 E1                                   pop     hl                                          ;+0
 614+ F7C3 16 00        .CalcOptionAToD:        ld      d,0
 615+ F7C5 FE 33                                cp      $33
 616+ F7C7 DA CB F7                             jp      c,.Check66
 617+ F7CA 14           .IsGTE33:               inc     d
 618+ F7CB FE 66        .Check66:               cp      $66
 619+ F7CD DA D1 F7                             jp      c,.Check99
 620+ F7D0 14           .IsGTE66:               inc     d
 621+ F7D1 FE 99        .Check99:               cp      $99
 622+ F7D3 DA D7 F7     .IsGTE99:               jp      c,.CheckCC
 623+ F7D6 14                                   inc     d
 624+ F7D7 FE CC        .CheckCC:               cp      $CC
 625+ F7D9 38 01                                jr      c,.TokenIdToAddress
 626+ F7DB 14           .ItGETCC:               inc     d
 627+ F7DC 21 1A EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 628+ F7DF 7B                                   ld      a,e
 629+ F7E0 CB 27                                sla     a                                               ; x 2
 630+ F7E2 ED 31                                add     hl,a                                            ; hl + a * 2
 631+ F7E4 ED 31                                add     hl,a                                            ; hl + a * 4
 632+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 6
 633+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 8
 634+ F7EA ED 31                                add     hl,a                                            ; hl + a * 10
 635+ F7EC 7A                                   ld      a,d
 636+ F7ED ED 31                                add     hl,a
 637+ F7EF ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 638+ F7F1 7E           .LookUpDataFromTable:   ld      a,(hl)
 639+ F7F2 DD 6F                                ld      ixl,a
 640+ F7F4 23                                   inc     hl
 641+ F7F5 7E                                   ld      a,(hl)
 642+ F7F6 DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 643+ F7F8 DD E5                                push    ix                                              ;+2
 644+ F7FA E1                                   pop     hl                                              ;+1
 645+ F7FB C9                                   ret
 646+ F7FC              ;------------------------------------------------------------------------------------------------------------------------------------
 647+ F7FC E5           ProcessHSymbol:         push    hl                                              ;+1
 648+ F7FD D5                                   push    de                                              ;+2
 649+ F7FE C5                                   push    bc                                              ;+3
 650+ F7FF 21 8D F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 651+ F802 FD 54                                ld      d,iyh
 652+ F804 FD 5D                                ld      e,iyl
 653+ F806 CD CF F6                             call    GalaxyCopyLoop
 654+ F809 FD 62                                ld      iyh,d
 655+ F80B FD 6B                                ld      iyl,e
 656+ F80D C1                                   pop     bc                                              ;+2
 657+ F80E D1                                   pop     de                                              ;+1
 658+ F80F E1                                   pop     hl
 659+ F810 C9                                   ret
 660+ F811              ;------------------------------------------------------------------------------------------------------------------------------------
 661+ F811 E5           ProcessISymbol:         push    hl                                              ;+1
 662+ F812 D5                                   push    de                                              ;+2
 663+ F813 C5                                   push    bc                                              ;+3
 664+ F814 21 8D F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 665+ F817 FD 54                                ld      d,iyh
 666+ F819 FD 5D                                ld      e,iyl
 667+ F81B CD CF F6                             call    GalaxyCopyLoop
 668+ F81E FD 62                                ld      iyh,d
 669+ F820 FD 6B                                ld      iyl,e
 670+ F822 3E 69                                ld      a,"i"
 671+ F824 EB                                   ex      de,hl
 672+ F825 77                                   ld      (hl),a
 673+ F826 23                                   inc     hl
 674+ F827 3E 61                                ld      a,"a"
 675+ F829 77                                   ld      (hl),a
 676+ F82A 23                                   inc     hl
 677+ F82B 3E 6E                                ld      a,"n"
 678+ F82D 77                                   ld      (hl),a
 679+ F82E 23                                   inc     hl
 680+ F82F E5                                   push    hl
 681+ F830 FD E1                                pop     iy
 682+ F832 C1                                   pop     bc                                              ;+2
 683+ F833 D1                                   pop     de                                              ;+1
 684+ F834 E1                                   pop     hl                                              ;+0
 685+ F835 C9                                   ret
 686+ F836              ;------------------------------------------------------------------------------------------------------------------------------------
 687+ F836 E5           ProcessRSymbol:         push    hl                                              ;+1
 688+ F837 D5                                   push    de                                              ;+2
 689+ F838 CD A1 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 690+ F83B E6 03                                and     $03
 691+ F83D 47                                   ld      b,a
 692+ F83E 04                                   inc     b
 693+ F83F AF                                   xor     a
 694+ F840 4F                                   ld      c,a
 695+ F841 C5           .RLoop:                 push    bc                                              ;+3
 696+ F842 CD A1 F6                             call    GalaxyDoRandom
 697+ F845 C1                                   pop     bc                                              ;+2
 698+ F846 E6 3E                                and     $3E
 699+ F848 21 9F E8                             ld      hl,GalaxyName_digrams
 700+ F84B ED 31                                add     hl,a
 701+ F84D 7E                                   ld      a,(hl)
 702+ F84E FE 41                                cp      "A"
 703+ F850 38 01                                jr      c,.NotLowercase
 704+ F852 81                                   add     a,c
 705+ F853 FD 77 00     .NotLowercase:          ld      (iy+0),a
 706+ F856 23                                   inc     hl
 707+ F857 FD 23                                inc     iy
 708+ F859 0E 20                                ld      c,$20               ; fixed force to lower case
 709+ F85B 7E                                   ld      a,(hl)
 710+ F85C FE 41                                cp      "A"
 711+ F85E 38 01                                jr      c,.NotLowercase2
 712+ F860 81                                   add     a,c
 713+ F861 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 714+ F864 FD 23                                inc     iy
 715+ F866 10 D9                                djnz    .RLoop
 716+ F868 D1                                   pop     de                                              ;+1
 717+ F869 E1                                   pop     hl                                              ;+0
 718+ F86A C9                                   ret
 719+ F86B              ;------------------------------------------------------------------------------------------------------------------------------------
 720+ F86B ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 721+ F86F CD 55 FC                             call    galaxy_system_under_cursor
 722+ F872 CD BB FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 723+ F875 21 7E E8                             ld      hl,GalaxyExpandedName
 724+ F878 11 8D F7                             ld      de,GalaxyNameCopy
 725+ F87B CD CF F6                             call    GalaxyCopyLoop
 726+ F87E 21 8D F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 727+ F881 CD 56 F7                             call    GalaxyCapitaliseString
 728+ F884                                      ; we will also capitalise the local copy here later
 729+ F884 21 DD F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 730+ F887 11 B1 F2                             ld      de,GalaxyPlanetSource
 731+ F88A CD CF F6                             call    GalaxyCopyLoop
 732+ F88D AF           .ClearOutDescription:   xor     a
 733+ F88E 21 84 F1                             ld      hl,GalaxyPlanetDescription
 734+ F891 77                                   ld      (hl),a
 735+ F892 11 85 F1                             ld      de,GalaxyPlanetDescription+1
 736+ F895 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 737+ F898 ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 738+ F89A CD 68 F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 739+ F89D 21 B1 F2                             ld      hl,GalaxyPlanetSource
 740+ F8A0 FD 21 84 F1                          ld      iy,GalaxyPlanetDescription
 741+ F8A4              ; At this point we are now prepped ready to expand the string to a full description
 742+ F8A4              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 743+ F8A4 7E           .ExpRecursive:          ld      a,(hl)
 744+ F8A5 FE 00                                cp      0
 745+ F8A7 CA EC F8                             jp      z,.ExpansionComplete
 746+ F8AA FE 3C                                cp      "<"
 747+ F8AC C2 BF F8                             jp      nz,.NotToken
 748+ F8AF 23           .ItIsAToken:            inc     hl
 749+ F8B0 CD AB F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 750+ F8B3 23                                   inc     hl
 751+ F8B4 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 752+ F8B5 CD BC F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 753+ F8B8 CD A4 F8                             call    .ExpRecursive
 754+ F8BB E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 755+ F8BC C3 A4 F8     .TokenNextIteration:    jp      .ExpRecursive
 756+ F8BF              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 757+ F8BF FE 25        .NotToken:              cp      "%"
 758+ F8C1 C2 E3 F8                             jp      nz,.RegularCharacter
 759+ F8C4 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 760+ F8C5 7E                                   ld      a,(hl)
 761+ F8C6 FE 48                                cp      "H"
 762+ F8C8 20 07                                jr      nz,.IsItI
 763+ F8CA 23           .ItIsAnH:               inc     hl
 764+ F8CB CD FC F7                             call    ProcessHSymbol
 765+ F8CE C3 A4 F8                             jp      .ExpRecursive
 766+ F8D1 FE 49        .IsItI:                 cp      "I"
 767+ F8D3 20 07                                jr      nz,.ItIsR
 768+ F8D5 23           .ItIsAnI:               inc     hl
 769+ F8D6 CD 11 F8                             call    ProcessISymbol
 770+ F8D9 C3 A4 F8                             jp      .ExpRecursive
 771+ F8DC CD 36 F8     .ItIsR:                 call    ProcessRSymbol
 772+ F8DF 23                                   inc     hl
 773+ F8E0 C3 A4 F8     .SystemNextIteration:   jp      .ExpRecursive
 774+ F8E3 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 775+ F8E6 FD 23                                inc     iy
 776+ F8E8 23                                   inc     hl
 777+ F8E9 C3 A4 F8     .RegularNextIteration:  jp      .ExpRecursive
 778+ F8EC AF           .ExpansionComplete:     xor     a
 779+ F8ED FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 780+ F8F0 C9                                   ret
 781+ F8F1              ;----------------------------------------------------------------------------------------------------------------------------------
 782+ F8F1 3A 0B E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 783+ F8F4 3C                                   inc     a
 784+ F8F5 67                                   ld      h,a
 785+ F8F6 0E 00                                ld      c,0
 786+ F8F8 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 787+ F8FA 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 788+ F8FD DD 21 D5 F4                          ld      ix,ShipEquipmentList
 789+ F901 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 790+ F904 FE 00                                cp      0
 791+ F906                                      ; Check Cash TODO
 792+ F906 28 00                                jr      z,.CheckTechLevel
 793+ F908 DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 794+ F90B BC                                   cp      h
 795+ F90C                                      ;jr      nc,.DoNotShowItem
 796+ F90C DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 797+ F90F FE 00                                cp      0
 798+ F911                                    ;  jr      z,.DoNotShowItem
 799+ F911 79           .ShowItem:              ld      a,c
 800+ F912 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 801+ F915 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 802+ F918 FE 00                                cp      EQ_FUEL
 803+ F91A 28 18                                jr      z,.FuelLevel
 804+ F91C FE 01                                cp      EQ_MISSILE
 805+ F91E 28 25                                jr      z,.CountMissiles
 806+ F920 21 FD 92     .IsFitted:              ld      hl,EquipmentFitted
 807+ F923 ED 31                                add     hl,a
 808+ F925 7E                                   ld      a,(hl)
 809+ F926 FE 00                                cp      0
 810+ F928 28 05                                jr      z,.NotFittedItem
 811+ F92A 3E 2A        .FittedItem:            ld      a,"*"
 812+ F92C C3 56 F9                             jp      .MoreToDoCheck
 813+ F92F 3E 2D        .NotFittedItem:         ld      a,"-"
 814+ F931 C3 56 F9                             jp      .MoreToDoCheck
 815+ F934 3A E4 92     .FuelLevel:             ld      a,(Fuel)
 816+ F937 FE 46                                cp      MaxFuelLevel
 817+ F939 28 05                                jr      z,.FullFuel
 818+ F93B 3E 2D        .NotFullFuel:           ld      a,"-"
 819+ F93D C3 56 F9                             jp      .MoreToDoCheck
 820+ F940 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 821+ F942 C3 56 F9                             jp      .MoreToDoCheck
 822+ F945 3A 1F 93     .CountMissiles:         ld      a,(NbrMissiles)
 823+ F948 FE 00                                cp      0
 824+ F94A 28 05                                jr      z,.NoMissiles
 825+ F94C C6 30                                add     "0"
 826+ F94E C3 56 F9                             jp      .MoreToDoCheck
 827+ F951 3E 2D        .NoMissiles:            ld      a,"-"
 828+ F953 C3 56 F9                             jp      .MoreToDoCheck
 829+ F956 DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 830+ F959 0C                                   inc     c
 831+ F95A DD 19                                add     ix,de
 832+ F95C 10 A3                                djnz    .ItemCheckLoop
 833+ F95E C9                                   ret
 834+ F95F 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 835+ F961 DD 77 01                             ld      (ix+1),a
 836+ F964 DD 19                                add     ix,de
 837+ F966 10 99                                djnz    .ItemCheckLoop
 838+ F968 C9                                   ret
 839+ F969              ;----------------------------------------------------------------------------------------------------------------------------------
 840+ F969 3A F9 E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 841+ F96C B7           .GenerateGovernment:    or      a
 842+ F96D CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 843+ F96F CB 3F                                srl	    a
 844+ F971 CB 3F                                srl	    a                                                   ;
 845+ F973 E6 07                                and     $07                                             ;
 846+ F975 32 09 E9                             ld      (GalaxyDisplayGovernment),a                     ;
 847+ F978 3A F8 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 848+ F97B E6 07                                and     $07
 849+ F97D 47                                   ld      b,a
 850+ F97E 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 851+ F981                                      JumpIfAGTENusng 1, .GreaterThan1
 851+ F981 FE 01       >                        cp     1
 851+ F983 D2 8F F9    >                        jp		nc,.GreaterThan1
 852+ F986 78           .OneOrZero:             ld      a,b
 853+ F987 F6 02                                or      2
 854+ F989 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 855+ F98C C3 93 F9                             jp      .GenerateTechLevel
 856+ F98F 78           .GreaterThan1:          ld      a,b
 857+ F990 32 0A E9                             ld      (GalaxyDisplayEconomy),a
 858+ F993 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 859+ F995 47                                   ld      b,a
 860+ F996 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 861+ F999 E6 03                                and     $03
 862+ F99B 80                                   add     b
 863+ F99C 47                                   ld      b,a
 864+ F99D 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 865+ F9A0 4F                                   ld      c,a
 866+ F9A1 CB 2F                                sra     a
 867+ F9A3 80                                   add     b
 868+ F9A4 47                                   ld      b,a
 869+ F9A5 79                                   ld      a,c
 870+ F9A6 E6 01                                and     $1
 871+ F9A8 80                                   add     b
 872+ F9A9 32 0B E9                             ld      (GalaxyDisplayTekLevel),a
 873+ F9AC CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 874+ F9AE CB 27                                sla     a
 875+ F9B0 21 09 E9                             ld      hl,GalaxyDisplayGovernment
 876+ F9B3 86                                   add     a,(hl)
 877+ F9B4 47                                   ld      b,a
 878+ F9B5 3A 0A E9                             ld      a,(GalaxyDisplayEconomy)
 879+ F9B8 80                                   add     a,b
 880+ F9B9 3C                                   inc     a
 881+ F9BA 32 0C E9                             ld      (GalaxyDisplayPopulation),a
 882+ F9BD 3A 0A E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 883+ F9C0 EE 07                                xor     7
 884+ F9C2 C6 03                                add     3
 885+ F9C4 57                                   ld      d,a
 886+ F9C5 3A 09 E9                             ld      a,(GalaxyDisplayGovernment)
 887+ F9C8 C6 04                                add     4
 888+ F9CA 5F                                   ld      e,a
 889+ F9CB ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 890+ F9CD 3A 0C E9                             ld      a,(GalaxyDisplayPopulation)
 891+ F9D0 26 00                                ld      h,0
 892+ F9D2 6F                                   ld      l,a
 893+ F9D3 CD 50 9F                             call    mulDEbyHL
 894+ F9D6 EB                                   ex      de,hl
 895+ F9D7                                      ShiftDELeft1
 895+ F9D7 CB 23       >			   sla e
 895+ F9D9 CB 12       >			   rl  d
 896+ F9DB                                      ShiftDELeft1
 896+ F9DB CB 23       >			   sla e
 896+ F9DD CB 12       >			   rl  d
 897+ F9DF                                      ShiftDELeft1
 897+ F9DF CB 23       >			   sla e
 897+ F9E1 CB 12       >			   rl  d
 898+ F9E3 ED 53 0D E9                          ld      (GalaxyDisplayProductivity),de
 899+ F9E7 3A FC E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 900+ F9EA E6 0F                                and		$0F
 901+ F9EC C6 0B                                add     11
 902+ F9EE 47                                   ld      b,a
 903+ F9EF 3A FA E8                             ld      a,(GalaxyWorkingSeed+3)
 904+ F9F2 4F                                   ld      c,a
 905+ F9F3 ED 43 0F E9                          ld      (GalaxyDisplayRadius),bc
 906+ F9F7 C9                                   ret
 907+ F9F8
 908+ F9F8              galaxy_master_seed_to_system:
 909+ F9F8 21 10 E0     		ld		hl,galaxy_master_seed
 910+ F9FB 11 1D 92     		ld		de,SystemSeed
 911+ F9FE              galaxy_copy_seed:
 912+ F9FE ED A0        		ldi
 913+ FA00 ED A0        		ldi
 914+ FA02 ED A0        		ldi
 915+ FA04 ED A0        		ldi
 916+ FA06 ED A0        		ldi
 917+ FA08 ED A0        		ldi
 918+ FA0A C9           		ret
 919+ FA0B
 920+ FA0B              galaxy_master_to_galaxy_working:
 921+ FA0B 21 10 E0     		ld		hl,galaxy_master_seed
 922+ FA0E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 923+ FA11 18 EB        		jr		galaxy_copy_seed
 924+ FA13
 925+ FA13              galaxy_master_to_galaxy_naming:
 926+ FA13 21 10 E0     		ld		hl,galaxy_master_seed
 927+ FA16 11 FD E8     		ld		de,GalaxyNamingSeed
 928+ FA19 18 E3        		jr		galaxy_copy_seed
 929+ FA1B
 930+ FA1B              working_seed_to_galaxy_working:
 931+ FA1B 21 44 93             ld      hl,WorkingSeeds
 932+ FA1E 11 F7 E8     		ld		de,GalaxyWorkingSeed
 933+ FA21 18 DB        		jr		galaxy_copy_seed
 934+ FA23
 935+ FA23              working_seed_to_galaxy_naming:
 936+ FA23 21 44 93             ld      hl,WorkingSeeds
 937+ FA26 11 FD E8     		ld		de,GalaxyNamingSeed
 938+ FA29 18 D3        		jr		galaxy_copy_seed
 939+ FA2B
 940+ FA2B              galaxy_ix_seed_to_galaxy_naming:
 941+ FA2B DD E5                push    ix
 942+ FA2D E1                   pop     hl
 943+ FA2E 11 FD E8     		ld		de,GalaxyNamingSeed
 944+ FA31 18 CB        		jr		galaxy_copy_seed
 945+ FA33
 946+ FA33
 947+ FA33              galaxy_working_seed_to_galaxy_naming:
 948+ FA33 21 F7 E8             ld      hl,GalaxyWorkingSeed
 949+ FA36 11 FD E8     		ld		de,GalaxyNamingSeed
 950+ FA39 18 C3        		jr		galaxy_copy_seed
 951+ FA3B
 952+ FA3B              galaxy_working_seed_to_system:
 953+ FA3B 21 F7 E8     		ld		hl,GalaxyWorkingSeed
 954+ FA3E 11 1D 92     		ld		de,SystemSeed
 955+ FA41 18 BB        		jr		galaxy_copy_seed
 956+ FA43
 957+ FA43              system_seed_to_galaxy_working:
 958+ FA43 21 1D 92     		ld		hl,SystemSeed
 959+ FA46 11 F7 E8     		ld		de,GalaxyWorkingSeed
 960+ FA49 18 B3        		jr		galaxy_copy_seed
 961+ FA4B
 962+ FA4B
 963+ FA4B              system_seed_to_galaxy_naming:
 964+ FA4B 21 1D 92     		ld		hl,SystemSeed
 965+ FA4E 11 FD E8     		ld		de,GalaxyNamingSeed
 966+ FA51 18 AB        		jr		galaxy_copy_seed
 967+ FA53
 968+ FA53              ix_seed_to_galaxy_working:
 969+ FA53 DD E5                push    ix
 970+ FA55 E1                   pop     hl
 971+ FA56 11 F7 E8     		ld		de,GalaxyWorkingSeed
 972+ FA59 18 A3        		jr		galaxy_copy_seed
 973+ FA5B
 974+ FA5B              ; Here we twist just once rather than the usual4 for a system
 975+ FA5B 3A FD E8     NextGalaxyNamingSeed:  ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 976+ FA5E B7                                   or		a							; clear carry flag
 977+ FA5F 21 FF E8                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 978+ FA62 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 979+ FA63 47                                   ld		b,a							; partial sum lo [x]
 980+ FA64              ; y = b + d	+ carry
 981+ FA64 3A FE E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 982+ FA67 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 983+ FA6A 8E                                   adc		a,(hl)						; note add with carry
 984+ FA6B 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 985+ FA6C 3A FF E8                             ld		a,(GalaxyNamingSeed+2)
 986+ FA6F 32 FD E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 987+ FA72 3A 00 E9                             ld		a,(GalaxyNamingSeed+3)
 988+ FA75 32 FE E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 989+ FA78 3A 02 E9                             ld		a,(GalaxyNamingSeed+5)
 990+ FA7B 32 00 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 991+ FA7E 3A 01 E9                             ld		a,(GalaxyNamingSeed+4)
 992+ FA81 32 FF E8                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 993+ FA84 B7                                   or		a
 994+ FA85 78                                   ld		a,b
 995+ FA86 21 FF E8                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 996+ FA89 86                                   add	    a,(hl)
 997+ FA8A 32 01 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 998+ FA8D 79                                   ld		a,c
 999+ FA8E 21 00 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
1000+ FA91 8E                                   adc		a,(hl)
1001+ FA92 32 02 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
1002+ FA95 C9                                   ret
1003+ FA96
1004+ FA96
1005+ FA96 3A 02 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
1006+ FA99 E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
1007+ FA9B FE 00                                cp		0					            ; 0 = skip 2 chars
1008+ FA9D 28 12                                jr		z,.SkipPhrase
1009+ FA9F C6 0C                                add		a,12
1010+ FAA1 CB 27                                sla		a					            ; phrase = (a+12)*2
1011+ FAA3 21 9F E8                             ld		hl,GalaxyName_digrams
1012+ FAA6 ED 31                                add		hl,a
1013+ FAA8 ED A0                                ldi
1014+ FAAA 7E                                   ld		a,(hl)
1015+ FAAB FE 3F                                cp		'?'
1016+ FAAD 28 02                                jr		z,.SkipPhrase
1017+ FAAF ED A0        .AddExtra:              ldi
1018+ FAB1 D5           .SkipPhrase:            push	de
1019+ FAB2 CD 5B FA                             call	NextGalaxyNamingSeed
1020+ FAB5 D1                                   pop		de
1021+ FAB6 C9                                   ret
1022+ FAB7
1023+ FAB7              ; takes location in BC, finds seed and expands the name
1024+ FAB7 ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1025+ FABB CD 55 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1026+ FABE FE 00                                cp      0
1027+ FAC0 C8                                   ret     z
1028+ FAC1
1029+ FAC1 CD 23 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1030+ FAC4 C3 DC FA                             jp      GalaxyDigramNamingSeed
1031+ FAC7
1032+ FAC7 CD 13 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1033+ FACA C3 DC FA                             jp      GalaxyDigramNamingSeed
1034+ FACD
1035+ FACD CD 33 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1036+ FAD0 C3 DC FA                             jp      GalaxyDigramNamingSeed
1037+ FAD3
1038+ FAD3 CD 2B FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1039+ FAD6 C3 DC FA                             jp      GalaxyDigramNamingSeed
1040+ FAD9
1041+ FAD9 CD 4B FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1042+ FADC
1043+ FADC 11 7E E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1044+ FADF 06 03        GalaxyDigramToDE:       ld		b,3
1045+ FAE1 3A FD E8                             ld		a,(GalaxyNamingSeed)
1046+ FAE4 E6 40                                and		$40
1047+ FAE6 28 03                                jr		z,.SmallSizeName
1048+ FAE8 CD 96 FA     .LargeSizeName:         call	GalaxyNamingLoop
1049+ FAEB CD 96 FA     .SmallSizeName:         call	GalaxyNamingLoop
1050+ FAEE CD 96 FA                             call	GalaxyNamingLoop
1051+ FAF1 CD 96 FA                             call	GalaxyNamingLoop
1052+ FAF4 EB           .DoneName:              ex		de,hl
1053+ FAF5 36 00                                ld		(hl),0
1054+ FAF7 EB                                   ex		de,hl
1055+ FAF8 AF                                   xor     a
1056+ FAF9 3D                                   dec     a
1057+ FAFA C9                                   ret
1058+ FAFB              ;reorte X 13 Y 97
1059+ FAFB
1060+ FAFB              set_names_lowercase:
1061+ FAFB                  ;- to do, for case insensitive match
1062+ FAFB C9               ret
1063+ FAFC              ;----------------------------------------------------------------------------------------------------------------------------------
1064+ FAFC              is_system_found:        ; search string does not have /0
1065+ FAFC              ; search for riinus then ra you get seardh of rainus
1066+ FAFC 21 5D E8                             ld      hl,GalaxySearchString
1067+ FAFF 11 7E E8                             ld      de,GalaxyExpandedName
1068+ FB02 0E 00        .getsearchlen:          ld      c,0
1069+ FB04 7E           .getsearchlenloop:      ld      a,(hl)
1070+ FB05 FE 00                                cp      0
1071+ FB07 28 07                                jr      z,.readyToSearch
1072+ FB09 23                                   inc     hl
1073+ FB0A 0C                                   inc     c
1074+ FB0B C3 04 FB                             jp      .getsearchlenloop
1075+ FB0E 06 20                                ld      b,32
1076+ FB10 21 5D E8     .readyToSearch:         ld      hl,GalaxySearchString
1077+ FB13 1A           .searchLoop:            ld      a,(de)
1078+ FB14 FE 00                                cp      0
1079+ FB16 28 0D                                jr      z,.EndOfMatch
1080+ FB18 0D                                   dec     c
1081+ FB19 C5                                   push    bc
1082+ FB1A ED A1                                cpi
1083+ FB1C C1                                   pop     bc
1084+ FB1D 20 03                                jr      nz,.noMatch
1085+ FB1F 13                                   inc     de
1086+ FB20
1087+ FB20 10 F1                                djnz    .searchLoop
1088+ FB22 3E FF        .noMatch:               ld      a,$FF
1089+ FB24 C9                                   ret
1090+ FB25 79           .EndOfMatch:            ld      a,c
1091+ FB26 FE 00                                cp      0
1092+ FB28 C8                                   ret     z
1093+ FB29 3E FF                                ld      a,$FF
1094+ FB2B C9                                   ret
1095+ FB2C
1096+ FB2C AF           find_system_by_name:    xor     a
1097+ FB2D 32 36 92                             ld      (XSAV),a
1098+ FB30 DD 21 16 E0                          ld      ix,galaxy_data
1099+ FB34 CD 53 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1100+ FB37 CD CD FA                             call    GalaxyDigramWorkingSeed
1101+ FB3A CD FC FA                             call    is_system_found
1102+ FB3D FE 00                                cp      0
1103+ FB3F 28 19                                jr      z,.FoundAtIX
1104+ FB41 3A 36 92                             ld      a,(XSAV)
1105+ FB44 3D                                   dec     a
1106+ FB45 28 10                                jr      z,.NoMoreSystems
1107+ FB47 32 36 92                             ld      (XSAV),a
1108+ FB4A DD E5                                push    ix
1109+ FB4C E1                                   pop     hl
1110+ FB4D ED 34 08 00                          add     hl,8
1111+ FB51 E5                                   push    hl
1112+ FB52 DD E1                                pop     ix
1113+ FB54 C3 34 FB                             jp      .nextSystem
1114+ FB57 3E FF        .NoMoreSystems:         ld      a,$FF
1115+ FB59 C9                                   ret
1116+ FB5A CD 53 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1117+ FB5D C9                                   ret
1118+ FB5E              ;----------------------------------------------------------------------------------------------------------------------------------
1119+ FB5E 00 00        nearestfound:           DW 0
1120+ FB60              ; In here de carries current nearest and loads into nearest found
1121+ FB60              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1122+ FB60 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1123+ FB64 FD 26 00                             ld      iyh,0
1124+ FB67 FD 2E 78                             ld      iyl,120
1125+ FB6A ED 43 5E FB                          ld      (nearestfound),bc
1126+ FB6E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1127+ FB71 5F                                   ld      e,a                             ; e= current seed x
1128+ FB72                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1128+ FB72 B9          >                        cp      c
1128+ FB73 DA 84 FB    >                        jp		c,nearestXPosLT
1129+ FB76 D5           nearestXPosGTE:         push    de                              ;
1130+ FB77 26 00                                ld      h,0                             ;
1131+ FB79 6F                                   ld      l,a                             ; hl = seed x
1132+ FB7A 16 00                                ld      d,0                             ;
1133+ FB7C 59                                   ld      e,c                             ; de = nearest x
1134+ FB7D B7                                   or      a                               ;
1135+ FB7E ED 52                                sbc     hl,de                           ; hl = distance between the two
1136+ FB80 D1                                   pop     de
1137+ FB81 C3 8E FB                             jp      nearestDistXPos
1138+ FB84 D5           nearestXPosLT:          push    de                              ;
1139+ FB85 26 00                                ld      h,0                             ;
1140+ FB87 69                                   ld      l,c                             ; hl = nearest x
1141+ FB88 16 00                                ld      d,0                             ;
1142+ FB8A B7                                   or      a                               ; de = seed x
1143+ FB8B ED 52                                sbc     hl,de                           ;
1144+ FB8D D1                                   pop     de                              ; hl = distance between the two
1145+ FB8E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1146+ FB8F FD BD                                cp      iyl                             ; under initial threshold?
1147+ FB91 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1148+ FB93               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1149+ FB93 DD 7E 01                             ld      a,(ix+1)                        ;
1150+ FB96 57                                   ld      d,a                             ; d = seed y
1151+ FB97                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1151+ FB97 B8          >                        cp      b
1151+ FB98 DA AC FB    >                        jp		c,nearestYPosLT
1152+ FB9B E5           nearestYPosGTE:         push    hl                              ; save current x distance
1153+ FB9C D5                                   push    de                              ;
1154+ FB9D 26 00                                ld      h,0                             ;
1155+ FB9F 6F                                   ld      l,a                             ; hl = seed y
1156+ FBA0 16 00                                ld      d,0                             ;
1157+ FBA2 58                                   ld      e,b                             ; de = nearest y
1158+ FBA3 B7                                   or      a                               ;
1159+ FBA4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1160+ FBA6 7D                                   ld      a,l
1161+ FBA7 D1                                   pop     de
1162+ FBA8 E1                                   pop     hl
1163+ FBA9 C3 BA FB                             jp      nearestDistYPos
1164+ FBAC E5           nearestYPosLT:          push    hl                              ; save current x distance
1165+ FBAD D5                                   push    de                              ;
1166+ FBAE 26 00                                ld      h,0                             ;
1167+ FBB0 68                                   ld      l,b                             ; hl = nearest y
1168+ FBB1 5A                                   ld      e,d                             ;
1169+ FBB2 16 00                                ld      d,0                             ; de = seed y
1170+ FBB4 B7                                   or      a                               ;
1171+ FBB5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1172+ FBB7 7D                                   ld      a,l
1173+ FBB8 D1                                   pop     de
1174+ FBB9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1175+ FBBA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1176+ FBBC 30 12                                jr      nc, find_nearest_miss
1177+ FBBE 26 00                                ld      h,0                             ; hl = distance for x
1178+ FBC0 ED 31                                add     hl,a                            ; adding distance y
1179+ FBC2 7D                                   ld      a,l                             ; and copy it to l
1180+ FBC3 FD BD                                cp      iyl                             ; is the pair under distance
1181+ FBC5 30 09                                jr      nc, find_nearest_miss           ;
1182+ FBC7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1183+ FBC9 ED 53 5E FB                          ld      (nearestfound),de               ;
1184+ FBCD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1184+ FBCD FE 02       >                   cp    2
1184+ FBCF D8          >                   ret	 c
1185+ FBD0 DD E5        find_nearest_miss:      push     ix
1186+ FBD2 E1                                   pop      hl
1187+ FBD3 ED 34 08 00                          add      hl,8
1188+ FBD7 E5                                   push     hl
1189+ FBD8 DD E1                                pop      ix
1190+ FBDA FD 25                                dec     iyh
1191+ FBDC FD 7C                                ld      a,iyh
1192+ FBDE                                      IfANotZeroGoto find_nearest_loop
1192+ FBDE FE 00       >				cp	0
1192+ FBE0 C2 6E FB    >				jp	nz,find_nearest_loop
1193+ FBE3 ED 4B 5E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1194+ FBE7 C9                                   ret
1195+ FBE8              ;----------------------------------------------------------------------------------------------------------------------------------
1196+ FBE8              ; Does a sqare root distance
1197+ FBE8 16 00        galaxy_find_distance:   ld      d,0
1198+ FBEA 26 00                                ld      h,0
1199+ FBEC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1200+ FBEF 47                                   ld      b,a
1201+ FBF0 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1202+ FBF3 B8                                   cp      b
1203+ FBF4 20 0E                                jr      nz,.NotSame
1204+ FBF6 C5           .XSame:                 push    bc
1205+ FBF7 F5                                   push    af
1206+ FBF8 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1207+ FBFB 47                                   ld      b,a
1208+ FBFC 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1209+ FBFF B8                                   cp      b
1210+ FC00 C1                                   pop     bc
1211+ FC01 F1                                   pop     af
1212+ FC02 28 49                                jr      z,.ZeroDistance
1213+ FC04 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1214+ FC06 68           .DestinationLTPresentX: ld      l,b
1215+ FC07 5F                                   ld      e,a
1216+ FC08 B7                                   or      a
1217+ FC09 ED 52                                sbc     hl,de
1218+ FC0B C3 13 FC                             jp      .SquareXDist
1219+ FC0E 6F           .DestinationGTEPresentX:ld      l,a
1220+ FC0F 58                                   ld      e,b
1221+ FC10 B7                                   or      a
1222+ FC11 ED 52                                sbc     hl,de
1223+ FC13 55           .SquareXDist:           ld      d,l
1224+ FC14 5D                                   ld      e,l
1225+ FC15 ED 30                                mul
1226+ FC17 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1227+ FC1A 47                                   ld      b,a
1228+ FC1B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1229+ FC1E B8                                   cp      b
1230+ FC1F 30 0B                                jr      nc,.DestinationGTEPresentY
1231+ FC21 4F           .DestinationLTPresentY: ld      c,a
1232+ FC22 68                                   ld      l,b
1233+ FC23 06 00                                ld      b,0
1234+ FC25 26 00                                ld      h,0
1235+ FC27 ED 42                                sbc     hl,bc
1236+ FC29 C3 34 FC                             jp      .DestinationYDone
1237+ FC2C 48           .DestinationGTEPresentY:ld      c,b
1238+ FC2D 6F                                   ld      l,a
1239+ FC2E 06 00                                ld      b,0
1240+ FC30 26 00                                ld      h,0
1241+ FC32 ED 42                                sbc     hl,bc
1242+ FC34 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1243+ FC36 7D                                   ld      a,l
1244+ FC37 EB                                   ex      de,hl
1245+ FC38 57                                   ld      d,a
1246+ FC39 5F                                   ld      e,a
1247+ FC3A ED 30        .SquareYDist:           mul
1248+ FC3C 19                                   add     hl,de
1249+ FC3D EB                                   ex      de,hl
1250+ FC3E CD CB 9F                             call    asm_sqrt            ; distance via pythagoras in hl
1251+ FC41                                      ShiftHLLeft1
1251+ FC41 CB 25       >			   sla l
1251+ FC43 CB 14       >			   rl  h
1252+ FC45                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1252+ FC45 CB 25       >			   sla l
1252+ FC47 CB 14       >			   rl  h
1253+ FC49 22 57 93                             ld      (Distance),hl       ; Distance is now caulated distance
1254+ FC4C C9                                   ret
1255+ FC4D AF           .ZeroDistance:          xor     a
1256+ FC4E 32 57 93                             ld      (Distance),a
1257+ FC51 32 58 93                             ld      (Distance+1),a
1258+ FC54 C9                                   ret
1259+ FC55              ;----------------------------------------------------------------------------------------------------------------------------------
1260+ FC55              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds, this needs to chagne to galaxyresultseed or galayxworkingseed
1261+ FC55 AF           galaxy_system_under_cursor:xor     a
1262+ FC56 32 36 92                             ld		(XSAV),a
1263+ FC59 DD 21 16 E0                          ld      ix,galaxy_data
1264+ FC5D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1265+ FC60 DD E5                                push    ix
1266+ FC62 7D                                   ld      a,l
1267+ FC63 DD BE 03                             cp      (ix+3)                          ; seed x
1268+ FC66 20 14                                jr      nz,.ItsNotThisX
1269+ FC68 7C                                   ld      a,h
1270+ FC69 DD BE 01                             cp      (ix+1)                          ; seed x
1271+ FC6C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1272+ FC6E DD E5                                push    ix
1273+ FC70 E1                                   pop     hl
1274+ FC71 11 44 93                             ld      de,WorkingSeeds
1275+ FC74 CD 16 96                             call    copy_seed
1276+ FC77 3E FF                                ld      a,$FF
1277+ FC79 DD E1                                pop     ix
1278+ FC7B C9                                   ret
1279+ FC7C E1           .ItsNotThisX:           pop     hl
1280+ FC7D ED 34 08 00                          add     hl,8
1281+ FC81 E5                                   push    hl
1282+ FC82 DD E1                                pop     ix
1283+ FC84 3A 36 92                             ld		a,(XSAV)
1284+ FC87 3D                                   dec		a
1285+ FC88 32 36 92                             ld      (XSAV),a
1286+ FC8B FE 00                                cp		0
1287+ FC8D C8                                   ret		z
1288+ FC8E 18 CD                                jr		.GCCounterLoop
1289+ FC90              ;----------------------------------------------------------------------------------------------------------------------------------
1290+ FC90 21 1D 92     SeedGalaxy:             ld      hl,SystemSeed
1291+ FC93 11 10 E0                             ld      de,galaxy_master_seed
1292+ FC96 ED A0                                ldi
1293+ FC98 ED A0                                ldi
1294+ FC9A ED A0                                ldi
1295+ FC9C ED A0                                ldi
1296+ FC9E ED A0                                ldi
1297+ FCA0 ED A0                                ldi
1298+ FCA2 DD 21 16 E0                          ld      ix,galaxy_data
1299+ FCA6 AF                                   xor		a
1300+ FCA7 32 36 92                             ld		(XSAV),a
1301+ FCAA DD E5        SeedGalaxyLoop:         push    ix
1302+ FCAC D1                                   pop     de
1303+ FCAD 21 1D 92                             ld      hl,SystemSeed
1304+ FCB0 CD 16 96                             call    copy_seed
1305+ FCB3 DD E5                                push    ix
1306+ FCB5 E1                                   pop     hl
1307+ FCB6 ED 34 08 00                          add     hl,8
1308+ FCBA E5                                   push    hl
1309+ FCBB DD E1                                pop     ix
1310+ FCBD CD 4B 96                             call    next_system_seed
1311+ FCC0 3A 36 92                             ld		a,(XSAV)
1312+ FCC3 3D                                   dec		a
1313+ FCC4 FE 00                                cp		0
1314+ FCC6 C8                                   ret		z
1315+ FCC7 32 36 92                             ld		(XSAV),a
1316+ FCCA 18 DE                                jr      SeedGalaxyLoop
1317+ FCCC C9                                   ret
1318+ FCCD
1319+ FCCD              GalaxyBankSize   EQU $ - galaxy_page_marker
1320+ FCCD
# file closed: Universe/galaxy_data.asm
 995  FCCD
 996  FCCD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
 997  FCCD
 998  FCCD
 999  FCCD                  SLOT    GalaxyDataAddr
1000  FCCD                  PAGE    BankGalaxyData1
1001  FCCD              	ORG GalaxyDataAddr, BankGalaxyData1
1002  E000 FF           GALAXYDATABlock1         DB $FF
1003  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1004  0000
1005  0000                  SLOT    GalaxyDataAddr
1006  0000                  PAGE    BankGalaxyData2
1007  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1008  E000 FF           GALAXYDATABlock2         DB $FF
1009  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1010  0000                  SLOT    GalaxyDataAddr
1011  0000                  PAGE    BankGalaxyData3
1012  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1013  E000 FF           GALAXYDATABlock3         DB $FF
1014  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1015  0000                  SLOT    GalaxyDataAddr
1016  0000                  PAGE    BankGalaxyData4
1017  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1018  E000 FF           GALAXYDATABlock4         DB $FF
1019  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1020  0000                  SLOT    GalaxyDataAddr
1021  0000                  PAGE    BankGalaxyData5
1022  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1023  E000 FF           GALAXYDATABlock5         DB $FF
1024  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1025  0000                  SLOT    GalaxyDataAddr
1026  0000                  PAGE    BankGalaxyData6
1027  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1028  E000 FF           GALAXYDATABlock6         DB $FF
1029  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1030  0000                  SLOT    GalaxyDataAddr
1031  0000                  PAGE    BankGalaxyData7
1032  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1033  E000 FF           GALAXYDATABlock7         DB $FF
1034  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1035  0000
1036  0000
1037  0000
1038  0000
1039  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1040  0000                  SAVENEX CFG  0,0,0,1
1041  0000                  SAVENEX AUTO
1042  0000                  SAVENEX CLOSE
1043  0000
# file closed: eliteNext.asm
